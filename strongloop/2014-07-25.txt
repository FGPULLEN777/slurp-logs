{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-07-25T03:51:29.987Z","type":"quit"}
{"nick":"rmg","date":"2014-07-25T04:51:58.783Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 245 seconds","date":"2014-07-25T04:56:27.348Z","type":"quit"}
{"nick":"bajtos","date":"2014-07-25T05:45:10.707Z","type":"join"}
{"nick":"fabienf","date":"2014-07-25T07:30:26.292Z","type":"join"}
{"nick":"rmg","date":"2014-07-25T08:18:04.622Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 255 seconds","date":"2014-07-25T08:22:38.952Z","type":"quit"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2014-07-25T10:02:00.792Z","type":"quit"}
{"nick":"rmg","date":"2014-07-25T11:20:23.548Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 264 seconds","date":"2014-07-25T11:25:10.874Z","type":"quit"}
{"nick":"bajtos","date":"2014-07-25T11:34:10.748Z","type":"join"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2014-07-25T12:03:14.127Z","type":"quit"}
{"nick":"bajtos","date":"2014-07-25T12:18:33.796Z","type":"join"}
{"nick":"fabienf","message":"Hi bajtos","date":"2014-07-25T12:20:43.679Z","type":"message"}
{"nick":"bajtos","message":"fabienf: hey","date":"2014-07-25T12:21:51.316Z","type":"message"}
{"nick":"bajtos","message":"fabienf: can we chat in two hours or so?","date":"2014-07-25T12:22:04.047Z","type":"message"}
{"nick":"fabienf","message":"bajtos: sure","date":"2014-07-25T12:22:12.262Z","type":"message"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2014-07-25T12:25:16.915Z","type":"quit"}
{"nick":"bajtos","date":"2014-07-25T13:35:48.560Z","type":"join"}
{"nick":"bajtos","message":"fabienf: yt?","date":"2014-07-25T13:46:38.601Z","type":"message"}
{"nick":"fabienf","message":"hi bajtos!","date":"2014-07-25T13:46:50.532Z","type":"message"}
{"nick":"fabienf","message":"just checked your email","date":"2014-07-25T13:47:29.261Z","type":"message"}
{"nick":"piscisaureus","date":"2014-07-25T13:47:36.082Z","type":"join"}
{"nick":"bajtos","message":"I am running out of time a bit, as I am off for two weeks starting tomorrow.","date":"2014-07-25T13:48:16.243Z","type":"message"}
{"nick":"fabienf","message":"bajtos: I wish it was easier for me to share more relevant code bits","date":"2014-07-25T13:48:25.543Z","type":"message"}
{"nick":"bajtos","message":"It would be great if we managed to find a workaround that works for you for the time being","date":"2014-07-25T13:48:33.536Z","type":"message"}
{"nick":"fabienf","message":"yeah, definitely","date":"2014-07-25T13:48:42.478Z","type":"message"}
{"nick":"bajtos","message":"regarding sharing code bits … well, let’s see what we can do","date":"2014-07-25T13:48:58.424Z","type":"message"}
{"nick":"fabienf","message":"let me check, do you have a moment?","date":"2014-07-25T13:49:15.956Z","type":"message"}
{"nick":"bajtos","message":"sure","date":"2014-07-25T13:50:51.005Z","type":"message"}
{"nick":"fabienf","message":"bajtos: https://gist.github.com/fabien/fb322d6af76ad5c5349a","date":"2014-07-25T13:53:38.000Z","type":"message"}
{"nick":"bajtos","message":"cool, let me try to wire that into a simple LB app","date":"2014-07-25T13:55:51.843Z","type":"message"}
{"nick":"bajtos","message":"If I use “Container” hasMany “Files” and then call “__create_files__” with the beforeCreateHandler of yours, will it make sense?","date":"2014-07-25T13:56:52.049Z","type":"message"}
{"nick":"bajtos","message":"i.e. is that close to what your app is doing?","date":"2014-07-25T13:57:05.895Z","type":"message"}
{"nick":"fabienf","message":"yes, exactly","date":"2014-07-25T13:57:25.811Z","type":"message"}
{"nick":"fabienf","message":"bajtos: updated the gist to not pause/resume there (code still works, but patch still applies)","date":"2014-07-25T13:58:02.990Z","type":"message"}
{"nick":"bajtos","message":"where is busboy called? from “storage.provider.extractAndProcess”?","date":"2014-07-25T13:59:22.677Z","type":"message"}
{"nick":"fabienf","message":"yes, need some code bits?","date":"2014-07-25T14:00:24.339Z","type":"message"}
{"nick":"bajtos","message":"yeah, that would help","date":"2014-07-25T14:00:32.895Z","type":"message"}
{"nick":"fabienf","message":"bajtos: updated","date":"2014-07-25T14:02:07.041Z","type":"message"}
{"nick":"fabienf","message":"what I noticed is that file or field events did not fire","date":"2014-07-25T14:03:09.853Z","type":"message"}
{"nick":"fabienf","message":"however, it did finish (no stalling or errors)","date":"2014-07-25T14:03:43.979Z","type":"message"}
{"nick":"fabienf","message":"bajtos: regarding your workaround, it's applied to your \"Container\" right? not \"File\"?","date":"2014-07-25T14:15:10.253Z","type":"message"}
{"nick":"bajtos","message":"probably :)","date":"2014-07-25T14:15:30.791Z","type":"message"}
{"nick":"bajtos","message":"try Container first, possibly both Container and File","date":"2014-07-25T14:15:39.456Z","type":"message"}
{"nick":"fabienf","message":"I'm trying it on the 'container', but logging from that method, doesn't seem it's being called","date":"2014-07-25T14:15:46.270Z","type":"message"}
{"nick":"bajtos","message":"that’s weird","date":"2014-07-25T14:16:12.437Z","type":"message"}
{"nick":"fabienf","message":"bajtos: yes, very weird - not logging from File either","date":"2014-07-25T14:17:34.693Z","type":"message"}
{"nick":"fabienf","message":"perhaps I'm applying after it already registered as a shared method on the app?","date":"2014-07-25T14:18:07.150Z","type":"message"}
{"nick":"bajtos","message":"that may be the reason why it does not work","date":"2014-07-25T14:18:26.162Z","type":"message"}
{"nick":"fabienf","message":"bajtos: applying it to app.loopback.PersistedModel.sharedCtor bombs away, all kinds of errors","date":"2014-07-25T14:20:33.203Z","type":"message"}
{"nick":"bajtos","message":"hmm.","date":"2014-07-25T14:21:01.042Z","type":"message"}
{"nick":"bajtos","message":"what version of loopback are you running?","date":"2014-07-25T14:21:12.994Z","type":"message"}
{"nick":"bajtos","message":"in 2.x, loopback setups a new sharedCtor function for each Model","date":"2014-07-25T14:21:37.584Z","type":"message"}
{"nick":"bajtos","message":"so when you overwrite PersistedModel.sharedCtor, the override won’t be called for Container","date":"2014-07-25T14:21:58.164Z","type":"message"}
{"nick":"fabienf","message":"2.x","date":"2014-07-25T14:22:03.856Z","type":"message"}
{"nick":"bajtos","message":"so what kind of errors are you seing?","date":"2014-07-25T14:22:18.737Z","type":"message"}
{"nick":"fabienf","message":"weird that there's exceptions being thrown: 'Shared class \"Space\" has no method handling GET /work/files'","date":"2014-07-25T14:22:31.904Z","type":"message"}
{"nick":"bajtos","message":"no clue","date":"2014-07-25T14:23:37.068Z","type":"message"}
{"nick":"bajtos","message":"I have a question regarding your gist: the request for `__create_files__` is a multipart file upload","date":"2014-07-25T14:24:09.500Z","type":"message"}
{"nick":"bajtos","message":"but the relation method expects JSON body","date":"2014-07-25T14:24:17.284Z","type":"message"}
{"nick":"fabienf","message":"yes, so what happens in handleFileCreation is that the body is set to the json it expects","date":"2014-07-25T14:24:58.927Z","type":"message"}
{"nick":"bajtos","message":"ok, I was expecting something like that","date":"2014-07-25T14:25:08.043Z","type":"message"}
{"nick":"fabienf","message":"not all that great, but it works","date":"2014-07-25T14:25:08.648Z","type":"message"}
{"nick":"fabienf","message":"the beforeRemote approach is the most flexible in this case, as it doesn't really matter which kind of relation I'm after, for example","date":"2014-07-25T14:26:01.464Z","type":"message"}
{"nick":"fabienf","message":"that's the reason why I chose this solution","date":"2014-07-25T14:26:23.233Z","type":"message"}
{"nick":"fabienf","message":"bajtos: if I were to override sharedCtor from a file in /models that should be good timing, no?","date":"2014-07-25T14:28:25.417Z","type":"message"}
{"nick":"fabienf","message":"it doesn't work though :/ it's not being called","date":"2014-07-25T14:28:39.421Z","type":"message"}
{"nick":"bajtos","message":"probably not if your model file is doing `var Container = app.models.Container`","date":"2014-07-25T14:30:25.098Z","type":"message"}
{"nick":"fabienf","message":"it is, yeah","date":"2014-07-25T14:30:40.310Z","type":"message"}
{"nick":"bajtos","message":"on second though, it should not matter when you override sharedCtor, as long as it is before the first HTTP request is handled","date":"2014-07-25T14:30:52.282Z","type":"message"}
{"nick":"fabienf","message":"bajtos: would you be against a sharedmethod rest: {} option to explicitly do this?","date":"2014-07-25T14:36:30.252Z","type":"message"}
{"nick":"bajtos","message":"to explicitly do what?","date":"2014-07-25T14:36:51.028Z","type":"message"}
{"nick":"fabienf","message":"to enable the pause/resume behavior on a case by case basis","date":"2014-07-25T14:37:08.787Z","type":"message"}
{"nick":"bajtos","message":"I don’t like it much. We should really find out how is your request resumed() instead of trying to randomly change/fix things","date":"2014-07-25T14:37:58.378Z","type":"message"}
{"nick":"fabienf","message":"I agree, however, I'm afraid that strong-remoting is parsing data itself (data event) to be able to use the JSON","date":"2014-07-25T14:39:00.385Z","type":"message"}
{"nick":"bajtos","message":"I believe it’s parsing data only when it is application/json and/or form-data","date":"2014-07-25T14:39:33.464Z","type":"message"}
{"nick":"fabienf","message":"that's why my patch works at exactly that point, one tick later, strong-remoting will be extracting args","date":"2014-07-25T14:39:35.069Z","type":"message"}
{"nick":"bajtos","message":"I would expect strong-remoting parses the whole json body before any of the hooks is called","date":"2014-07-25T14:40:08.217Z","type":"message"}
{"nick":"bajtos","message":"let me check","date":"2014-07-25T14:40:16.812Z","type":"message"}
{"nick":"fabienf","message":"even worse then","date":"2014-07-25T14:40:20.265Z","type":"message"}
{"nick":"GWX","date":"2014-07-25T14:40:42.168Z","type":"join"}
{"nick":"bajtos","message":"well, you can’t have both strong-remoting and beforeHook reading the same stream","date":"2014-07-25T14:41:05.623Z","type":"message"}
{"nick":"fabienf","message":"I suggest to have an option for now, until there's a better fix (perhaps when you're back in 14 days)","date":"2014-07-25T14:41:29.767Z","type":"message"}
{"nick":"bajtos","message":"can you do it in your fork for now?","date":"2014-07-25T14:41:46.455Z","type":"message"}
{"nick":"GWX","date":"2014-07-25T14:41:46.749Z","type":"part"}
{"nick":"fabienf","message":"sure","date":"2014-07-25T14:41:52.692Z","type":"message"}
{"nick":"bajtos","message":"or what if you implemented a regular express middleware that would read the request stream, save files, do whatever changes you need, and only then let strong-remoting kick in?","date":"2014-07-25T14:42:10.808Z","type":"message"}
{"nick":"fabienf","message":"bajtos: that's really not an option, my file handling/processing code is fairly elaborate","date":"2014-07-25T14:42:50.051Z","type":"message"}
{"nick":"fabienf","message":"and I need it to run in front of relations (different kinds, for different models)","date":"2014-07-25T14:44:01.961Z","type":"message"}
{"nick":"fabienf","message":"looks like I'll be forking forever, which is f*cked up, since it's a nested dependency of LB","date":"2014-07-25T14:44:50.055Z","type":"message"}
{"nick":"fabienf","message":"bajtos: I'm off for a bit, thanks for looking into it, but I wish we had come to a consensus","date":"2014-07-25T14:46:23.908Z","type":"message"}
{"nick":"fabienf","message":"I will go through my code once more, to see if there's anything particular going on still, that I'm not aware of triggering premature streaming","date":"2014-07-25T14:47:33.320Z","type":"message"}
{"nick":"bajtos","message":"I am trying to figure out how to provide a custom sharedCtor, I’ll let you know if I find a working solution","date":"2014-07-25T14:49:19.327Z","type":"message"}
{"nick":"fabienf","message":"thanks, that'd be great","date":"2014-07-25T14:49:28.753Z","type":"message"}
{"nick":"GWX","date":"2014-07-25T14:49:32.498Z","type":"join"}
{"nick":"bajtos","message":"forking loopback is a bad option, we should find a proper solution when I get back","date":"2014-07-25T14:49:32.894Z","type":"message"}
{"nick":"fabienf","message":"it's the worst option","date":"2014-07-25T14:49:51.366Z","type":"message"}
{"nick":"GWX","message":"What is the best IRC room to ask questions about Loopback 2.0?","date":"2014-07-25T14:50:18.812Z","type":"message"}
{"nick":"fabienf","message":"all I know is that the code works flawlessly with 'create', but not '__create__files'","date":"2014-07-25T14:50:22.097Z","type":"message"}
{"nick":"fabienf","message":"bajtos: have a nice vacation","date":"2014-07-25T14:50:44.629Z","type":"message"}
{"nick":"bajtos","message":"fabienf: thanks","date":"2014-07-25T14:50:50.916Z","type":"message"}
{"nick":"bajtos","message":"GWX: #loopback","date":"2014-07-25T14:50:55.120Z","type":"message"}
{"nick":"bajtos","message":"GWX: but this channel works too","date":"2014-07-25T14:51:01.805Z","type":"message"}
{"nick":"GWX","message":"bajtos: Thanks. See about the same people in both rooms. Hope someone could answer my question in #loopback.","date":"2014-07-25T14:52:53.161Z","type":"message"}
{"nick":"fabienf","message":"bajtos: just a quick thought: what if strong-remoting (and the RestAdapter specifically) would be exposed through loopback somehow?","date":"2014-07-25T14:54:33.363Z","type":"message"}
{"nick":"fabienf","message":"then I can patch RestAdapter.prototype._createPrototypeMethodHandler directly","date":"2014-07-25T14:54:54.981Z","type":"message"}
{"nick":"bajtos","message":"fabienf: well, you should be able to do something like `require(‘loopback/node_modules/strong-remoting/lib/rest-adapter’)`","date":"2014-07-25T14:55:14.220Z","type":"message"}
{"nick":"fabienf","message":"yes, I know, but isn't that even more hacky?","date":"2014-07-25T14:55:37.274Z","type":"message"}
{"nick":"bajtos","message":"fabienf: well, better than forking, right?","date":"2014-07-25T14:56:40.545Z","type":"message"}
{"nick":"fabienf","message":"it is, yeah","date":"2014-07-25T14:56:48.792Z","type":"message"}
{"nick":"bajtos","message":"fabienf: the paths are not very likely to change","date":"2014-07-25T14:56:49.536Z","type":"message"}
{"nick":"bajtos","message":"fabienf: here’s the fix for custom sharedCtor: you need to call `Container.setup()` after you changed sharedCtor","date":"2014-07-25T15:00:45.167Z","type":"message"}
{"nick":"bajtos","message":"that will re-create remoting metadata using the new sharedCtor","date":"2014-07-25T15:01:05.504Z","type":"message"}
{"nick":"fabienf","message":"let me check","date":"2014-07-25T15:01:07.988Z","type":"message"}
{"nick":"fabienf","message":"hmm","date":"2014-07-25T15:03:42.217Z","type":"message"}
{"nick":"fabienf","message":"doesn't seem to work, it's still not called","date":"2014-07-25T15:03:51.613Z","type":"message"}
{"nick":"bajtos","message":"let me paste a bit more complex code that worked for me","date":"2014-07-25T15:04:13.470Z","type":"message"}
{"nick":"bajtos","message":"fabienf: https://gist.github.com/bajtos/26890ece90ef9b81cf53","date":"2014-07-25T15:05:58.901Z","type":"message"}
{"nick":"fabienf","message":"bajtos: so you're doing it on PersistedModel directly?","date":"2014-07-25T15:06:39.686Z","type":"message"}
{"nick":"fabienf","message":"bajtos: Uncaught Maximum call stack size exceeded","date":"2014-07-25T15:09:35.789Z","type":"message"}
{"nick":"bajtos","message":"there is `Model.setup` function that is called whenever a model is subclassed","date":"2014-07-25T15:10:13.085Z","type":"message"}
{"nick":"bajtos","message":"so I changed that function to inject a custom sharedCtor","date":"2014-07-25T15:10:26.855Z","type":"message"}
{"nick":"bajtos","message":"but for PersistedModel descendants only","date":"2014-07-25T15:10:34.804Z","type":"message"}
{"nick":"fabienf","message":"if (!rec) this.setup(true); => infinite loop for me","date":"2014-07-25T15:10:52.080Z","type":"message"}
{"nick":"fabienf","message":"leaving it out: exceptions","date":"2014-07-25T15:11:13.461Z","type":"message"}
{"nick":"bajtos","message":"that’s weird. when you leave the last line out, the sharedCtor change is not applied","date":"2014-07-25T15:12:21.795Z","type":"message"}
{"nick":"bajtos","message":"and since there wasn’t anything else changed, you should not get exceptions","date":"2014-07-25T15:12:33.577Z","type":"message"}
{"nick":"fabienf","message":"err, failing tests (because the stream is not paused)","date":"2014-07-25T15:12:50.113Z","type":"message"}
{"nick":"bajtos","message":"try this as the last line in the custom setup fn:","date":"2014-07-25T15:13:21.249Z","type":"message"}
{"nick":"bajtos","message":"if (rec !== 'stop') this.setup('stop');","date":"2014-07-25T15:13:21.953Z","type":"message"}
{"nick":"fabienf","message":"still callstack exceeded","date":"2014-07-25T15:14:01.303Z","type":"message"}
{"nick":"fabienf","message":"huh?","date":"2014-07-25T15:14:06.237Z","type":"message"}
{"nick":"bajtos","message":"yeah, I don’t understand it either.","date":"2014-07-25T15:14:48.474Z","type":"message"}
{"nick":"bajtos","message":"well, if you managed to customize _createPrototypeMethodHandler and it works for you, then let’s leave at that","date":"2014-07-25T15:15:02.939Z","type":"message"}
{"nick":"fabienf","message":"yes, I was just going to say","date":"2014-07-25T15:15:12.853Z","type":"message"}
{"nick":"fabienf","message":"that is working now","date":"2014-07-25T15:15:17.573Z","type":"message"}
{"nick":"bajtos","message":"at least something :)","date":"2014-07-25T15:15:25.926Z","type":"message"}
{"nick":"fabienf","message":":)","date":"2014-07-25T15:15:29.524Z","type":"message"}
{"nick":"fabienf","message":"thanks bajtos","date":"2014-07-25T15:15:33.335Z","type":"message"}
{"nick":"bajtos","message":"you are welcome","date":"2014-07-25T15:15:39.917Z","type":"message"}
{"nick":"bajtos","message":"I hoped for a better result, but oh well...","date":"2014-07-25T15:15:45.952Z","type":"message"}
{"nick":"bajtos","message":"fabienf: see you","date":"2014-07-25T15:15:53.466Z","type":"message"}
{"nick":"fabienf","message":"well, kinda my experience with LB ;)","date":"2014-07-25T15:16:01.944Z","type":"message"}
{"nick":"fabienf","message":"see you in a couple of weeks","date":"2014-07-25T15:16:13.250Z","type":"message"}
{"nick":"fabienf","message":"is Raymond around still?","date":"2014-07-25T15:16:48.945Z","type":"message"}
{"nick":"fabienf","message":"bajtos: final workaround added here: https://gist.github.com/fabien/fb322d6af76ad5c5349a","date":"2014-07-25T15:18:36.368Z","type":"message"}
{"nick":"bajtos","message":"yes, Raymond should be online at this time of the day","date":"2014-07-25T15:20:02.557Z","type":"message"}
{"nick":"fabienf","message":"(I meant for the next couple of weeks)","date":"2014-07-25T15:20:19.662Z","type":"message"}
{"nick":"bajtos","message":"yes, both he and Ritchie should be available","date":"2014-07-25T15:20:41.892Z","type":"message"}
{"nick":"fabienf","message":"cool, see you then!","date":"2014-07-25T15:20:57.078Z","type":"message"}
{"nick":"rmg","date":"2014-07-25T16:08:34.758Z","type":"join"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2014-07-25T16:27:47.833Z","type":"quit"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-07-25T17:29:59.222Z","type":"quit"}
{"nick":"rmg","date":"2014-07-25T18:24:16.399Z","type":"join"}
{"nick":"bajtos","date":"2014-07-25T18:36:26.580Z","type":"join"}
{"nick":"bajtos","reason":"Client Quit","date":"2014-07-25T18:37:29.374Z","type":"quit"}
{"nick":"bajtos","date":"2014-07-25T18:37:54.929Z","type":"join"}
{"nick":"bajtos","reason":"Client Quit","date":"2014-07-25T18:39:00.125Z","type":"quit"}
{"nick":"bajtos","date":"2014-07-25T18:39:49.647Z","type":"join"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2014-07-25T18:46:21.670Z","type":"quit"}
{"nick":"piscisaureus","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2014-07-25T19:52:21.548Z","type":"quit"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-07-25T20:04:20.584Z","type":"quit"}
{"nick":"fabienf","reason":"Quit: fabienf","date":"2014-07-25T20:07:07.650Z","type":"quit"}
{"nick":"bajtos","date":"2014-07-25T20:33:35.556Z","type":"join"}
{"nick":"rmg","date":"2014-07-25T20:34:57.075Z","type":"join"}
{"nick":"bajtos","reason":"Client Quit","date":"2014-07-25T20:37:46.332Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 255 seconds","date":"2014-07-25T20:41:32.886Z","type":"quit"}
{"nick":"rmg","date":"2014-07-25T20:57:02.679Z","type":"join"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-07-25T21:07:51.491Z","type":"quit"}
{"nick":"rmg","date":"2014-07-25T21:28:05.824Z","type":"join"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-07-25T21:36:33.229Z","type":"quit"}
{"nick":"rmg","date":"2014-07-25T22:37:01.434Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 256 seconds","date":"2014-07-25T22:41:43.052Z","type":"quit"}
{"nick":"Poesghost","date":"2014-07-25T23:21:07.420Z","type":"join"}
{"nick":"Poesghost","message":"Hello everyone!","date":"2014-07-25T23:21:22.472Z","type":"message"}
