{"nick":"caitp","message":"doing stuff in c++ isn't necessarily bad","date":"2016-11-30T00:02:09.995Z","type":"message"}
{"nick":"caitp","message":"there are costs to jumping between js and c++, but it doesn't always mean slower","date":"2016-11-30T00:03:41.361Z","type":"message"}
{"nick":"Guest59","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-11-30T00:04:55.698Z","type":"quit"}
{"nick":"xaxxon","message":"caitp: I made bad decisions.   tight loops going back and forth.   I've mitigated a lot of it via caching results... but was hoping for a miracle :)","date":"2016-11-30T00:07:16.384Z","type":"message"}
{"nick":"xaxxon","message":"caitp: I asked this long ago and got a very strong non-answer, but do you have any information on what has an increased cost when you change an object's prototype after creation?  I see lots of scary generic warnings, but no specifics on even things to look out for","date":"2016-11-30T00:08:23.701Z","type":"message"}
{"nick":"xaxxon","message":"I create an c++-defined object type but then set the prototype to a javascript-created object -- and there's no C++ api call for doing that in a single step that I know of.  I was told to \"benchmark it\" but i'm not really in a situation where I can benchmark an apples to apples comparison","date":"2016-11-30T00:09:39.650Z","type":"message"}
{"nick":"caitp","message":"xaxxon: v8 tries to keep prototype objects in fast mode, which greatly simplifies lookup","date":"2016-11-30T00:10:02.410Z","type":"message"}
{"nick":"xaxxon","message":"makes sense","date":"2016-11-30T00:10:33.018Z","type":"message"}
{"nick":"caitp","message":"modifying can break fast mode, but it is possible to force it to be fast again","date":"2016-11-30T00:11:11.027Z","type":"message"}
{"nick":"caitp","message":"sort of a silly hack","date":"2016-11-30T00:11:22.373Z","type":"message"}
{"nick":"xaxxon","message":"I'm down with silly","date":"2016-11-30T00:11:29.009Z","type":"message"}
{"nick":"Guest59","date":"2016-11-30T00:11:52.427Z","type":"join"}
{"nick":"xaxxon","message":"it's a one-time thing I do immediately at object creation time and I dont create a lot of these types of objects, but they live a long time and get used a lot, so it would be useful","date":"2016-11-30T00:12:05.456Z","type":"message"}
{"nick":"xaxxon","message":"and that' definitely something I could benchmark to see the difference","date":"2016-11-30T00:12:29.682Z","type":"message"}
{"nick":"xaxxon","message":"you're such a tease!","date":"2016-11-30T00:14:15.300Z","type":"message"}
{"nick":"xaxxon","message":"maybe this: http://stackoverflow.com/questions/24987896/how-does-bluebirds-util-tofastproperties-function-make-an-objects-properties","date":"2016-11-30T00:14:55.268Z","type":"message"}
{"nick":"caitp","message":"https://github.com/v8/v8/blob/master/test/mjsunit/fast-prototype.js","date":"2016-11-30T00:16:45.108Z","type":"message"}
{"nick":"caitp","message":"various tricks in there, with some documentation","date":"2016-11-30T00:16:47.214Z","type":"message"}
{"nick":"xaxxon","message":"I'l check it out.  thanks!","date":"2016-11-30T00:17:13.061Z","type":"message"}
{"nick":"xaxxon","message":"https://jsperf.com/test-dictionary-mode","date":"2016-11-30T00:17:41.007Z","type":"message"}
{"nick":"bradleymeck","date":"2016-11-30T00:32:27.000Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-11-30T01:24:35.913Z","type":"quit"}
{"nick":"xaxxon","reason":"Ping timeout: 246 seconds","date":"2016-11-30T01:53:18.114Z","type":"quit"}
{"nick":"xaxxon","date":"2016-11-30T01:59:39.590Z","type":"join"}
{"nick":"bradleymeck","date":"2016-11-30T02:40:14.202Z","type":"join"}
{"nick":"xaxxon","message":"oooh, sneaky.   I was getting an object being destroyed weak ref callback when I really didn't expect it.. turned out I was assigning it to something I had an accessor for.. so I guess the assignment was just getting silently dropped on the floor and the object available for GC.   Any way to detect this at runtime?","date":"2016-11-30T02:41:36.446Z","type":"message"}
{"nick":"xaxxon","message":"hrmm I think it's more complicated than that.","date":"2016-11-30T02:43:06.243Z","type":"message"}
{"nick":"xaxxon","message":"also if it's not I know the answer.","date":"2016-11-30T02:43:51.593Z","type":"message"}
{"nick":"plutoniix","date":"2016-11-30T03:26:17.739Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-11-30T03:50:17.494Z","type":"quit"}
{"nick":"Ultrasauce","date":"2016-11-30T04:05:17.611Z","type":"join"}
{"nick":"Ultrasauce","reason":"Read error: Connection reset by peer","date":"2016-11-30T04:19:23.173Z","type":"quit"}
{"nick":"BobGneu","date":"2016-11-30T04:26:10.904Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: Leaving","date":"2016-11-30T07:46:42.248Z","type":"quit"}
{"nick":"Guest59","reason":"Ping timeout: 244 seconds","date":"2016-11-30T08:56:55.422Z","type":"quit"}
{"nick":"Guest59","date":"2016-11-30T08:57:29.931Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 250 seconds","date":"2016-11-30T09:39:08.842Z","type":"quit"}
{"nick":"hferreiro_","date":"2016-11-30T10:18:48.901Z","type":"join"}
{"nick":"Vbitz","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:19:09.940Z","type":"quit"}
{"nick":"hferreiro","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:19:18.631Z","type":"quit"}
{"nick":"sxa","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:19:19.561Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:19:20.033Z","type":"quit"}
{"nick":"hferreiro_","new_nick":"hferreiro","date":"2016-11-30T10:19:21.543Z","type":"nick"}
{"nick":"luite","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:19:22.818Z","type":"quit"}
{"nick":"mikolalysenko","date":"2016-11-30T10:23:46.384Z","type":"join"}
{"nick":"Vbitz","date":"2016-11-30T10:24:08.259Z","type":"join"}
{"nick":"plutoniix","date":"2016-11-30T10:24:10.159Z","type":"join"}
{"nick":"APK","date":"2016-11-30T10:24:55.833Z","type":"join"}
{"nick":"oleavr","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:25:44.140Z","type":"quit"}
{"nick":"aperezdc","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:25:44.317Z","type":"quit"}
{"nick":"AKPWD","reason":"Ping timeout: 258 seconds","date":"2016-11-30T10:25:44.371Z","type":"quit"}
{"nick":"luite","date":"2016-11-30T10:26:48.178Z","type":"join"}
{"nick":"oleavr","date":"2016-11-30T10:27:42.198Z","type":"join"}
{"nick":"aperezdc","date":"2016-11-30T10:31:51.231Z","type":"join"}
{"nick":"sxa","date":"2016-11-30T10:31:58.829Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2016-11-30T10:44:12.007Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-11-30T11:00:08.825Z","type":"join"}
{"nick":"kenansulayman","date":"2016-11-30T11:17:48.528Z","type":"join"}
{"nick":"BobGneu","reason":"Read error: Connection reset by peer","date":"2016-11-30T11:49:13.675Z","type":"quit"}
{"nick":"ncthom91","date":"2016-11-30T12:51:46.424Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-11-30T13:19:47.234Z","type":"quit"}
{"nick":"caitp","message":"xaxxon: sorry, what do you mean \"accessor\" --- like an API defined accessor, or JS defined? and, by \"dropped on the floor\", are you saying the accessor isn't retaining the target object, or the accessor call is getting elided from optimized code, or what?","date":"2016-11-30T13:20:52.881Z","type":"message"}
{"nick":"ncthom91","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2016-11-30T13:33:22.881Z","type":"quit"}
{"nick":"Guest59","reason":"Ping timeout: 260 seconds","date":"2016-11-30T14:18:08.902Z","type":"quit"}
{"nick":"APK","new_nick":"AKPWD","date":"2016-11-30T15:19:06.455Z","type":"nick"}
{"nick":"seventh","date":"2016-11-30T15:19:24.899Z","type":"join"}
{"nick":"bradleymeck","date":"2016-11-30T15:23:45.881Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2016-11-30T15:26:22.095Z","type":"quit"}
{"nick":"hferreiro","reason":"Quit: Connection closed for inactivity","date":"2016-11-30T15:30:30.175Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-11-30T16:08:57.167Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2016-11-30T16:11:10.708Z","type":"quit"}
{"nick":"mounibec","date":"2016-11-30T16:22:55.425Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2010030309]","date":"2016-11-30T16:23:30.876Z","type":"quit"}
{"nick":"rwlbuis","date":"2016-11-30T16:26:39.173Z","type":"join"}
{"nick":"sxa","reason":"Read error: Connection reset by peer","date":"2016-11-30T16:28:09.474Z","type":"quit"}
{"nick":"sxa","date":"2016-11-30T16:33:39.906Z","type":"join"}
{"nick":"seventh","reason":"Ping timeout: 260 seconds","date":"2016-11-30T16:47:56.958Z","type":"quit"}
{"nick":"seventh","date":"2016-11-30T16:59:04.656Z","type":"join"}
{"nick":"bradleymeck","date":"2016-11-30T17:09:34.456Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2016-11-30T17:10:05.768Z","type":"quit"}
{"nick":"mounibec","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-11-30T17:15:24.396Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-11-30T17:20:08.883Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-11-30T17:25:08.009Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-11-30T17:40:04.813Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2016-11-30T17:40:47.374Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-11-30T17:44:58.160Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2016-11-30T17:46:13.124Z","type":"quit"}
{"nick":"gsathya","message":"caitp: heh, we have tests that check the observable optimization of the builtin promises fastpath in ResolvePromise ","date":"2016-11-30T17:56:16.667Z","type":"message"}
{"nick":"gsathya","message":"caitp: mjsunit/harmony/async-await-no-constructor and mjsunit/harmony/mirror-async-function-promise; both fail without the fast path","date":"2016-11-30T17:56:34.921Z","type":"message"}
{"nick":"caitp","message":"well, the async-await-no-constructor test clearly isn't valid per spec","date":"2016-11-30T17:58:09.652Z","type":"message"}
{"nick":"gsathya","message":"yeah","date":"2016-11-30T17:58:46.198Z","type":"message"}
{"nick":"caitp","message":"where does the mirror test fail?","date":"2016-11-30T17:58:48.900Z","type":"message"}
{"nick":"gsathya","message":"var rejectedv = (async function() { return Promise.reject(\"reject\"); })(); needs a %RunMicrotasks()","date":"2016-11-30T17:59:11.627Z","type":"message"}
{"nick":"gsathya","message":"because it takes two ticks now","date":"2016-11-30T17:59:20.429Z","type":"message"}
{"nick":"caitp","message":"ah I see","date":"2016-11-30T17:59:49.034Z","type":"message"}
{"nick":"caitp","message":"I thought all the assertions were happening after the %RunMicrotasks() at the end","date":"2016-11-30T17:59:59.378Z","type":"message"}
{"nick":"caitp","message":"JSC had this same bug, I already landed the fix over there","date":"2016-11-30T18:00:36.606Z","type":"message"}
{"nick":"caitp","message":"but, if you guys think a spec change is possible, maybe we should hold off on fixing it","date":"2016-11-30T18:00:59.968Z","type":"message"}
{"nick":"gsathya","message":"i remember asking domenic about this, but i forgot the reason he mentioned; will talk to him this week about this","date":"2016-11-30T18:03:44.612Z","type":"message"}
{"nick":"caitp","message":"well, Promise.resolve() has this short circuiting behaviour in the spec, but it's not restricted to just builtin promises","date":"2016-11-30T18:04:16.705Z","type":"message"}
{"nick":"caitp","message":"but we can't do the same kind of trick that the Promise.resolve shortcut does for async functions","date":"2016-11-30T18:04:43.308Z","type":"message"}
{"nick":"caitp","message":"unless you assume the promise constructor for async functions is always %Promise%, which I guess is true","date":"2016-11-30T18:05:52.286Z","type":"message"}
{"nick":"bradleymeck","date":"2016-11-30T18:11:39.158Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-11-30T18:16:34.314Z","type":"quit"}
{"nick":"Net147","reason":"Ping timeout: 245 seconds","date":"2016-11-30T19:00:03.856Z","type":"quit"}
{"nick":"Net147","date":"2016-11-30T19:01:31.501Z","type":"join"}
{"nick":"mounibec","date":"2016-11-30T20:05:05.439Z","type":"join"}
{"nick":"seventh","reason":"Quit: ...","date":"2016-11-30T20:37:31.478Z","type":"quit"}
{"nick":"caitp","message":"littledan__ : well, there's 3 possibilities: either we drop the invalid optimization and find a more valid way (my preference), we change the spec to treat Arrays specially and not call the iterator at all (probably not possible anymore without breaking some content), or we keep having a non-interoperable implementation to take a shortcut that we can beat anyways","date":"2016-11-30T21:02:41.166Z","type":"message"}
{"nick":"littledan__","message":"caitp: What if we leave it as the status quo for now, while we're investigating the performance overhead and options? I doubt we'll get the spec text change. Are you totally convinced there's no way to do the optimization?","date":"2016-11-30T21:13:01.509Z","type":"message"}
{"nick":"littledan__","message":"for the Promise stuff, I think there is a chance we'll get a spec text change, OTOH","date":"2016-11-30T21:13:18.710Z","type":"message"}
{"nick":"caitp","message":"I don't think it's worth even trying to do the invalid optimizations, that's effort better spent on just making the spec'd behaviour fast","date":"2016-11-30T21:13:38.480Z","type":"message"}
{"nick":"Guest59","date":"2016-11-30T21:17:35.877Z","type":"join"}
{"nick":"Guest59","reason":"Ping timeout: 260 seconds","date":"2016-11-30T21:22:15.795Z","type":"quit"}
{"nick":"caitp","message":"re: typed arrays","date":"2016-11-30T21:26:09.437Z","type":"message"}
{"nick":"caitp","message":"but if it's observable, I think it's a bad idea","date":"2016-11-30T21:26:18.207Z","type":"message"}
{"nick":"littledan__","message":"well, the prior state was to leave the optimization in. Why not just stick with that while we're investigating?","date":"2016-11-30T21:29:10.061Z","type":"message"}
{"nick":"littledan__","message":"it's true it's observable and does not meet the spec, but the slowdown was really huge previously","date":"2016-11-30T21:29:37.084Z","type":"message"}
{"nick":"littledan__","message":"I'd agree if we were introducing a new invalid optimization, that we shouldn't do it. But this could hurt existing sites","date":"2016-11-30T21:30:07.936Z","type":"message"}
{"nick":"caitp","message":"lets wait and see how bad the regression is and decide where to go from there","date":"2016-11-30T21:34:31.688Z","type":"message"}
{"nick":"caitp","message":"basically, we're already optimizing iterators, and with --turbo-escape it's probably close to the \"cheating\" speed in the majority of cases that a typed array would be built from","date":"2016-11-30T21:44:15.108Z","type":"message"}
{"nick":"caitp","message":"and those figures will probably improve","date":"2016-11-30T21:44:33.105Z","type":"message"}
{"nick":"mounibec","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-11-30T21:44:55.617Z","type":"quit"}
{"nick":"mounibec","date":"2016-11-30T21:53:48.214Z","type":"join"}
{"nick":"mounibec","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2016-11-30T22:45:20.922Z","type":"quit"}
{"nick":"hferreiro","date":"2016-11-30T22:49:21.069Z","type":"join"}
{"nick":"RT|Chatzilla","date":"2016-11-30T22:56:36.214Z","type":"join"}
