{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T00:07:32.041Z","type":"quit"}
{"nick":"xaxxon","date":"2016-02-24T00:09:16.571Z","type":"join"}
{"nick":"jugglinmike","reason":"Quit: Leaving.","date":"2016-02-24T00:26:52.343Z","type":"quit"}
{"nick":"jugglinmike","date":"2016-02-24T00:27:38.160Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-02-24T00:30:25.049Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2016-02-24T00:35:03.969Z","type":"quit"}
{"nick":"evanluca_","date":"2016-02-24T00:45:58.964Z","type":"join"}
{"nick":"evanlucas","reason":"Ping timeout: 276 seconds","date":"2016-02-24T00:47:57.581Z","type":"quit"}
{"nick":"plutoniix","date":"2016-02-24T00:49:28.499Z","type":"join"}
{"nick":"xaxxon","message":"ok, so what I \"know\" now is that the function is taking the global object with it, even when I say js_function->Call(different_context...) it still looks up variables in its original context.. what's the point of even passing in a context to Call() then?","date":"2016-02-24T00:51:46.434Z","type":"message"}
{"nick":"jugglinmike","reason":"Quit: Leaving.","date":"2016-02-24T01:10:36.477Z","type":"quit"}
{"nick":"jugglinmike1","date":"2016-02-24T01:10:41.500Z","type":"join"}
{"nick":"jugglinmike1","reason":"Ping timeout: 252 seconds","date":"2016-02-24T01:19:43.571Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T01:21:28.573Z","type":"join"}
{"nick":"petka____","reason":"Quit: Connection closed for inactivity","date":"2016-02-24T01:30:37.829Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T01:39:36.835Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T01:41:58.752Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-02-24T01:43:22.635Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T01:46:02.049Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-02-24T01:49:45.462Z","type":"quit"}
{"nick":"zv","reason":"Quit: WeeChat 1.4","date":"2016-02-24T01:54:50.692Z","type":"quit"}
{"nick":"zv","date":"2016-02-24T01:55:38.063Z","type":"join"}
{"nick":"evanluca_","reason":"Read error: Connection reset by peer","date":"2016-02-24T02:01:23.281Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T02:04:07.996Z","type":"join"}
{"nick":"etnbrd","date":"2016-02-24T02:11:19.011Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T03:59:49.006Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T04:00:26.243Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T05:15:43.010Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T05:16:21.208Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T05:29:20.884Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T05:30:01.519Z","type":"join"}
{"nick":"evanluca_","date":"2016-02-24T06:31:22.588Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T06:31:31.304Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T07:23:49.256Z","type":"join"}
{"nick":"evanluca_","reason":"Read error: Connection reset by peer","date":"2016-02-24T07:23:56.548Z","type":"quit"}
{"nick":"evanluca_","date":"2016-02-24T07:43:57.995Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T07:44:04.669Z","type":"quit"}
{"nick":"evanluca_","reason":"Read error: Connection reset by peer","date":"2016-02-24T07:48:50.600Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T07:49:54.031Z","type":"join"}
{"nick":"jochen__","message":"if eg an exception is thrown before the function is even called, it'll be created in different_context","date":"2016-02-24T08:37:27.212Z","type":"message"}
{"nick":"xaxxon","reason":"Read error: Connection reset by peer","date":"2016-02-24T08:37:27.538Z","type":"quit"}
{"nick":"jochen__","message":"now I scared him off...","date":"2016-02-24T08:37:56.636Z","type":"message"}
{"nick":"petka____","date":"2016-02-24T08:44:07.006Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T08:55:05.737Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T08:55:24.279Z","type":"join"}
{"nick":"davi","date":"2016-02-24T10:23:42.660Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-02-24T10:24:19.213Z","type":"quit"}
{"nick":"davi","reason":"Ping timeout: 240 seconds","date":"2016-02-24T10:41:04.105Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-02-24T10:44:29.784Z","type":"join"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Mjsunit\" on http://build.chromium.org/p/client.v8/builders/V8%20Linux%20-%20arm64%20-%20sim%20-%20gc%20stress/builds/5843 \"V8 Linux - arm64 - sim - gc stress\" from a8d5d176598c131bb16b0c9767facf7d768c2d68: ahaas@chromium.org,bmeurer@chromium.org,machenbach@chromium.org)","date":"2016-02-24T10:55:10.955Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open","date":"2016-02-24T10:59:11.896Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open (test on arm64 to be blacklisted)","date":"2016-02-24T11:02:12.960Z","type":"message"}
{"nick":"esas","reason":"Read error: Connection reset by peer","date":"2016-02-24T11:05:09.130Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open (test on arm64 gc stress to be blacklisted)","date":"2016-02-24T11:12:16.520Z","type":"message"}
{"nick":"rendar","date":"2016-02-24T11:40:11.551Z","type":"join"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Check\" on http://build.chromium.org/p/client.v8/builders/V8%20Mac/builds/6407 \"V8 Mac\" from ee8108b71c7e63392ba9814d859aa06f47acf5e5: mstarzinger@chromium.org,mythria@chromium.org,ssanfilippo@chromium.org)","date":"2016-02-24T11:41:25.999Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open","date":"2016-02-24T11:52:29.578Z","type":"message"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T12:19:55.131Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T12:20:14.164Z","type":"join"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by machenbach@chromium.org: closed (maintenance)","date":"2016-02-24T12:37:45.269Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 248 seconds","date":"2016-02-24T12:45:55.786Z","type":"quit"}
{"nick":"mostynb","date":"2016-02-24T12:48:03.013Z","type":"join"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open","date":"2016-02-24T12:53:51.631Z","type":"message"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"compile\" on http://build.chromium.org/p/client.v8/builders/V8%20Linux64%20ASAN%20arm64%20-%20debug%20builder/builds/4829 \"V8 Linux64 ASAN arm64 - debug builder\" from a6f41f7b8226555c5900440f6e3092b3545ee0f6: vogelheim@chromium.org)","date":"2016-02-24T13:17:00.156Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open - ASAN arm64 has issues after switching to trusty","date":"2016-02-24T13:22:01.394Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open","date":"2016-02-24T13:41:08.719Z","type":"message"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-24T13:47:15.898Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-24T13:47:34.313Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-02-24T13:51:49.683Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 255 seconds","date":"2016-02-24T13:56:22.643Z","type":"quit"}
{"nick":"mounibec","date":"2016-02-24T14:16:24.797Z","type":"join"}
{"nick":"jugglinmike","date":"2016-02-24T14:27:38.055Z","type":"join"}
{"nick":"jugglinmike","message":"aklein: Thanks for the review! I'm going to start by adding the requested module flag to the Parser class. Let me know if you think it belongs on ParserTraits (or somewhere else) instead","date":"2016-02-24T15:15:06.395Z","type":"message"}
{"nick":"mounibec","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T15:18:39.351Z","type":"quit"}
{"nick":"plutoniix","date":"2016-02-24T15:19:59.338Z","type":"join"}
{"nick":"mounibec","date":"2016-02-24T15:29:59.791Z","type":"join"}
{"nick":"jugglinmike","message":"Looks like it might belong in ParserBase instead","date":"2016-02-24T15:34:54.158Z","type":"message"}
{"nick":"bnoordhuis","date":"2016-02-24T15:38:51.677Z","type":"join"}
{"nick":"mostynb","reason":"Quit: Leaving","date":"2016-02-24T15:50:08.560Z","type":"quit"}
{"nick":"mounibec","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T15:58:04.665Z","type":"quit"}
{"nick":"mounibec","date":"2016-02-24T15:59:04.742Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2010030309]","date":"2016-02-24T16:04:33.477Z","type":"quit"}
{"nick":"C-Man","date":"2016-02-24T16:05:56.717Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 255 seconds","date":"2016-02-24T16:21:43.673Z","type":"quit"}
{"nick":"mounibec","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T16:29:02.684Z","type":"quit"}
{"nick":"davi","date":"2016-02-24T16:30:34.097Z","type":"join"}
{"nick":"mounibec","date":"2016-02-24T16:34:51.359Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-02-24T16:48:29.095Z","type":"join"}
{"nick":"ofrobots","date":"2016-02-24T17:01:21.033Z","type":"join"}
{"nick":"aklein","message":"jugglinmike: yeah, ParserBase is probably what I meant","date":"2016-02-24T17:03:12.991Z","type":"message"}
{"nick":"jugglinmike","message":"great :)","date":"2016-02-24T17:03:24.247Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T17:13:44.428Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T17:21:19.430Z","type":"join"}
{"nick":"mounibec","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T17:24:02.183Z","type":"quit"}
{"nick":"jugglinmike","reason":"Quit: Leaving.","date":"2016-02-24T17:34:56.571Z","type":"quit"}
{"nick":"jugglinmike","date":"2016-02-24T17:35:12.055Z","type":"join"}
{"nick":"bradleymeck","date":"2016-02-24T17:39:11.186Z","type":"join"}
{"nick":"bradleymeck","message":"caitp: I looked at the code for why cyclical promises are blowing up chrome stable and node LTS, but can't figure out what caused it, the places in promise.js that I would expect to be causing the infinite microtask/memleak have 0 diff, so idk","date":"2016-02-24T17:46:37.762Z","type":"message"}
{"nick":"bradleymeck","message":"a fun fact is that it doesn't blow up until a .then / .catch is registered","date":"2016-02-24T17:52:21.961Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T18:44:32.003Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T18:49:28.892Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 244 seconds","date":"2016-02-24T19:09:57.995Z","type":"quit"}
{"nick":"caitp","message":"bradleymeck: I lost the repro you showed me before (client history doesn't go back far enough)","date":"2016-02-24T19:20:53.574Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: https://jsfiddle.net/r3fot0fd/1/ (remove /1/ to bring the bomb)","date":"2016-02-24T19:21:22.791Z","type":"message"}
{"nick":"bradleymeck","message":"basically once you make a cycle, and then cause a .then/.catch it blows up","date":"2016-02-24T19:21:44.465Z","type":"message"}
{"nick":"bradleymeck","message":"newest v8 doesn't do this, but reading through the code it doesn't look like it detects cycles either","date":"2016-02-24T19:22:04.797Z","type":"message"}
{"nick":"bradleymeck","message":"ES6 doesn't require TypeError for cycles except self cycling, but A+ did, trying to discuss in more depth, spec says you should infinite loop in the Promise Jobs queue","date":"2016-02-24T19:23:25.825Z","type":"message"}
{"nick":"bradleymeck","message":"will probably get back later and make a ticket once the actual desired effect is determined","date":"2016-02-24T19:23:55.106Z","type":"message"}
{"nick":"bradleymeck","message":"if it helps userland libs also bomb, so once a native Promise interacts with a userland Promise you can still have this effect","date":"2016-02-24T19:26:05.784Z","type":"message"}
{"nick":"caitp","message":"the current lts branch is \"v4.4.0-proposal\", right?","date":"2016-02-24T19:31:16.311Z","type":"message"}
{"nick":"bradleymeck","message":"yea","date":"2016-02-24T19:34:37.143Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-02-24T19:43:46.886Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-02-24T19:45:16.679Z","type":"join"}
{"nick":"caitp","message":"bradleymeck: anyways, there are at least a lot of promise-specific fixes that are missing --- I think my promise resolution refactoring is a good starting point (from back in november), but it's probably not the only relevant fix","date":"2016-02-24T19:54:47.050Z","type":"message"}
{"nick":"caitp","message":"you might want to look the history of src/js/promise.js to look at things that are cherrypickable","date":"2016-02-24T19:55:59.381Z","type":"message"}
{"nick":"bradleymeck","message":"yea, tried a simple copy pasta, and it didn't work which is about the amount of time I will have for looking at it in the next few weeks.","date":"2016-02-24T19:56:06.634Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: mksnapshot failed on the copied promise.js missing natives","date":"2016-02-24T19:56:21.224Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T19:59:53.890Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T20:00:19.260Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T20:33:59.690Z","type":"quit"}
{"nick":"bradleymeck_","date":"2016-02-24T20:34:54.724Z","type":"join"}
{"nick":"bradleymeck","reason":"Ping timeout: 255 seconds","date":"2016-02-24T20:35:58.636Z","type":"quit"}
{"nick":"bradleymeck_","new_nick":"bradleymeck","date":"2016-02-24T20:35:58.930Z","type":"nick"}
{"nick":"xaxxon","date":"2016-02-24T20:41:37.595Z","type":"join"}
{"nick":"ofrobots","date":"2016-02-24T20:41:40.034Z","type":"join"}
{"nick":"xaxxon","message":"still looking for any help associated with moving a function between contexts within an isolate.   Specifically around the global object present when running the function being the global object of the context the function was created in, not the one of the context it's running in","date":"2016-02-24T20:43:09.848Z","type":"message"}
{"nick":"bradleymeck","reason":"Ping timeout: 240 seconds","date":"2016-02-24T20:51:29.750Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-02-24T20:51:40.030Z","type":"join"}
{"nick":"aklein","message":"xaxxon: that's just how functions work in JavaScript","date":"2016-02-24T21:03:48.374Z","type":"message"}
{"nick":"aklein","message":"same as if you pull a function out of a same-origin <iframe>","date":"2016-02-24T21:04:06.721Z","type":"message"}
{"nick":"xaxxon","message":"aklein do you know exactly when it grabs it?  is it during compilation?","date":"2016-02-24T21:05:00.828Z","type":"message"}
{"nick":"xaxxon","message":"I think my tests are saying that is when it is bound ","date":"2016-02-24T21:05:45.716Z","type":"message"}
{"nick":"aklein","message":"xaxxon: yes. A Function is basically a chunk of code plus a Context chain (which includes the global context)","date":"2016-02-24T21:05:52.449Z","type":"message"}
{"nick":"aklein","message":"ah, right","date":"2016-02-24T21:06:12.541Z","type":"message"}
{"nick":"aklein","message":"so \"compilation\" has a few stages","date":"2016-02-24T21:06:17.153Z","type":"message"}
{"nick":"aklein","message":"but there's no way to have a v8::Function that isn't associated with a particular v8::Context","date":"2016-02-24T21:06:31.777Z","type":"message"}
{"nick":"bradleymeck","message":"aklein: if you get some time I would like to bend your ear about ES6 modules, we are doing a NodeUp around them Friday","date":"2016-02-24T21:06:50.466Z","type":"message"}
{"nick":"aklein","message":"bradleymeck: sure","date":"2016-02-24T21:07:05.753Z","type":"message"}
{"nick":"xaxxon","message":"aklein I simply mean is the global object associated with the function when I call Script::Compile  ?","date":"2016-02-24T21:07:32.295Z","type":"message"}
{"nick":"aklein","message":"xaxxon: yes. if you want to pass it around and use it elsewhere, use CompileUnbound()","date":"2016-02-24T21:07:58.728Z","type":"message"}
{"nick":"aklein","message":"er, CompileUnboundSCript?","date":"2016-02-24T21:08:07.868Z","type":"message"}
{"nick":"xaxxon","message":"oh, I didn't know about that.   I can find it I'm sure :)  THank you so much","date":"2016-02-24T21:08:19.038Z","type":"message"}
{"nick":"bradleymeck","message":"aklein: hangouts/skype/or other work? (idk your info on anything, so pm that maybe?)","date":"2016-02-24T21:08:37.352Z","type":"message"}
{"nick":"bradleymeck","reason":"Ping timeout: 244 seconds","date":"2016-02-24T21:20:10.014Z","type":"quit"}
{"nick":"watilde","date":"2016-02-24T21:30:23.335Z","type":"join"}
{"nick":"bnoordhuis","message":"xaxxon: the approach we use in node is to put a proxy object between the script and the global object","date":"2016-02-24T21:33:28.801Z","type":"message"}
{"nick":"bnoordhuis","message":"that way you can (if you wanted to) replace the global object on the fly with another one","date":"2016-02-24T21:33:47.445Z","type":"message"}
{"nick":"bnoordhuis","message":"the source is in src/node_contextify.cc if you're interested","date":"2016-02-24T21:34:04.010Z","type":"message"}
{"nick":"xaxxon","message":"bnoordhuis is that used to \"protect\" against required modules messing with the global object during require()?","date":"2016-02-24T21:34:16.823Z","type":"message"}
{"nick":"xaxxon","message":"that's basically what I was trying to do","date":"2016-02-24T21:34:22.176Z","type":"message"}
{"nick":"bnoordhuis","message":"well, we make a point in the documentation that the vm module is not for secure sandboxing","date":"2016-02-24T21:34:46.109Z","type":"message"}
{"nick":"xaxxon","message":"I see","date":"2016-02-24T21:35:04.825Z","type":"message"}
{"nick":"xaxxon","message":"I'll take a look at proxy objects.  I've heard about them but never looked at what they do.   Thank you.","date":"2016-02-24T21:35:33.397Z","type":"message"}
{"nick":"bnoordhuis","message":"np","date":"2016-02-24T21:35:38.995Z","type":"message"}
{"nick":"bradleymeck","date":"2016-02-24T21:36:41.570Z","type":"join"}
{"nick":"esas","date":"2016-02-24T21:37:36.073Z","type":"join"}
{"nick":"xaxxon","message":"given what everyone has just said, why does v8::Script::Run() take a context object?  Can someone give me an example of what else the context is used for other than providing the global object?","date":"2016-02-24T21:41:03.731Z","type":"message"}
{"nick":"xaxxon","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T21:59:44.009Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2016-02-24T22:30:39.045Z","type":"join"}
{"nick":"jugglinmike","message":"aklein: This check for the PreParser--should I make a standalone test case for it? Or extend the existing tests to also run with that flag set?","date":"2016-02-24T22:41:14.229Z","type":"message"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"compile\" on http://build.chromium.org/p/client.v8.fyi/builders/V8-Blink%20Mac/builds/3592 \"V8-Blink Mac\" from 546ea6b8393a894f07597ade5ec1c7db02c1e425: mbrandy@us.ibm.com)","date":"2016-02-24T22:41:55.493Z","type":"message"}
{"nick":"bradleymeck","reason":"Read error: Connection reset by peer","date":"2016-02-24T22:46:25.637Z","type":"quit"}
{"nick":"jugglinmike","message":"hmm, might be that I need a special test for this, given that it's specific to lazily-parsed function bodies (which none of the existing tests describe)","date":"2016-02-24T22:47:48.393Z","type":"message"}
{"nick":"jugglinmike","message":"I'll find out soon enough. Compiling","date":"2016-02-24T22:47:55.884Z","type":"message"}
{"nick":"aklein","message":"jugglinmike: I think you want a standalone case, see my second email","date":"2016-02-24T22:49:37.047Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by adamk@chromium.org (:aklein): Tree is open","date":"2016-02-24T22:49:58.292Z","type":"message"}
{"nick":"jugglinmike","message":"aklein: I think I've got something wrong. As I wrote it, the test passes without any change to the patch https://gist.github.com/jugglinmike/b595db3ece6103bdbe08","date":"2016-02-24T22:53:13.727Z","type":"message"}
{"nick":"bradleymeck_","date":"2016-02-24T22:53:36.120Z","type":"join"}
{"nick":"bradleymeck","date":"2016-02-24T22:53:52.296Z","type":"join"}
{"nick":"aklein","message":"jugglinmike: it's possibly we just never do lazy parsing inside a module at the moment?","date":"2016-02-24T22:55:56.630Z","type":"message"}
{"nick":"aklein","message":"some printf debugging (or gdb debugging) could tell you that","date":"2016-02-24T22:56:27.858Z","type":"message"}
{"nick":"aklein","message":"so it's possible this doesn't matter at the moment","date":"2016-02-24T22:56:33.537Z","type":"message"}
{"nick":"jugglinmike","message":"Is DCHECK still around when preparsing occurs?","date":"2016-02-24T22:57:15.749Z","type":"message"}
{"nick":"jugglinmike","message":"Or will implementing this involve more than that assertion statement?","date":"2016-02-24T22:57:59.008Z","type":"message"}
{"nick":"aklein","message":"sorry, what do you mean exactly?","date":"2016-02-24T22:59:39.953Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T22:59:50.315Z","type":"quit"}
{"nick":"aklein","message":"which assertion would you add? DCHECK(!parsing_module_) inside SkipLazyFunctionBody?","date":"2016-02-24T23:00:09.486Z","type":"message"}
{"nick":"jugglinmike","message":"I'm thinking of the assertion I had to modify in PreParser::ParseExpressionOrLabelledStatement","date":"2016-02-24T23:01:38.766Z","type":"message"}
{"nick":"jugglinmike","message":"DCHECK(!expr.AsIdentifier().IsFutureReserved());","date":"2016-02-24T23:01:59.766Z","type":"message"}
{"nick":"jugglinmike","message":"to be replaced with","date":"2016-02-24T23:02:05.695Z","type":"message"}
{"nick":"ofrobots","date":"2016-02-24T23:02:31.581Z","type":"join"}
{"nick":"caitp","message":"bradleymeck: yeah, there have been a lot of changes, but most of them shouldn't really matter --- it should be possible to backport the collection of promise fixes. if I get some time next week I could probably put together a patch for it","date":"2016-02-24T23:02:48.752Z","type":"message"}
{"nick":"jugglinmike","message":"DCHECK(!expr.AsIdentifier().IsEnum()); and DCHECK(!parsing_module_ || !expr.AsIdentifier().IsAwait());","date":"2016-02-24T23:02:49.744Z","type":"message"}
{"nick":"aklein","message":"jugglinmike: that will work anyway as long as parsing_module_ defaults to false anyway","date":"2016-02-24T23:07:53.887Z","type":"message"}
{"nick":"bradleymeck_","reason":"Read error: Connection reset by peer","date":"2016-02-24T23:16:34.178Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T23:16:51.709Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T23:21:49.658Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-02-24T23:23:25.480Z","type":"quit"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-02-24T23:24:19.100Z","type":"quit"}
{"nick":"bradleymeck_","date":"2016-02-24T23:27:39.729Z","type":"join"}
{"nick":"jugglinmike","message":"aklein: maybe I need something like this? https://github.com/v8/v8/blob/24e85029caf443a980cd46e286a4ab1333d8522e/test/cctest/test-parsing.cc#L239-L248","date":"2016-02-24T23:28:33.967Z","type":"message"}
{"nick":"jugglinmike","message":"...or https://github.com/v8/v8/blob/24e85029caf443a980cd46e286a4ab1333d8522e/test/cctest/test-parsing.cc#L334","date":"2016-02-24T23:28:55.769Z","type":"message"}
{"nick":"aklein","message":"jugglinmike: neither of those two","date":"2016-02-24T23:29:28.473Z","type":"message"}
{"nick":"jugglinmike","message":"but there's also this https://github.com/v8/v8/blob/24e85029caf443a980cd46e286a4ab1333d8522e/test/cctest/test-parsing.cc#L1122","date":"2016-02-24T23:29:30.624Z","type":"message"}
{"nick":"jugglinmike","message":"heh, I'm grasping at straws here","date":"2016-02-24T23:29:51.421Z","type":"message"}
{"nick":"aklein","message":"jugglinmike: the last one set to true is what you should need","date":"2016-02-24T23:30:01.965Z","type":"message"}
{"nick":"aklein","message":"but as I said it may be that it's getting disabled inside the parser","date":"2016-02-24T23:30:09.781Z","type":"message"}
{"nick":"aklein","message":"I haven't had a chance to check","date":"2016-02-24T23:30:14.054Z","type":"message"}
{"nick":"aklein","message":"which is why I suggested printf (or gdb) debugging to see if you're even going down the preparser path","date":"2016-02-24T23:30:29.546Z","type":"message"}
{"nick":"aklein","message":"basically the Parser chugs along until it sees a function, and then decides whether it should keep parsing or skip over it using the preparser","date":"2016-02-24T23:30:52.712Z","type":"message"}
{"nick":"aklein","message":"and it uses various bits of state and input to make that decision","date":"2016-02-24T23:33:11.857Z","type":"message"}
{"nick":"jugglinmike","message":"Got it. Digging in with printf now","date":"2016-02-24T23:33:36.827Z","type":"message"}
{"nick":"aklein","message":"cool","date":"2016-02-24T23:33:42.576Z","type":"message"}
{"nick":"aklein","message":"sorry if I didn't explain it well, it's a little wonky. especially since test-parsing.cc uses a different entry-point for the preparser","date":"2016-02-24T23:34:03.043Z","type":"message"}
{"nick":"ofrobots","date":"2016-02-24T23:34:30.609Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 244 seconds","date":"2016-02-24T23:34:58.153Z","type":"quit"}
{"nick":"jugglinmike","message":"It's alright! I think I'm just trying to do too much all at once","date":"2016-02-24T23:35:44.072Z","type":"message"}
{"nick":"xaxxon","date":"2016-02-24T23:37:52.176Z","type":"join"}
{"nick":"rendar_","date":"2016-02-24T23:39:12.022Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-24T23:39:44.279Z","type":"quit"}
{"nick":"rendar","reason":"Ping timeout: 255 seconds","date":"2016-02-24T23:42:16.648Z","type":"quit"}
{"nick":"jugglinmike","message":"aklein: It looks like something is intercepting standard out from the cctest suite. Does that sound right to you?","date":"2016-02-24T23:42:45.254Z","type":"message"}
{"nick":"aklein","message":"jugglinmike: run-tests.py is, yes","date":"2016-02-24T23:43:22.707Z","type":"message"}
{"nick":"aklein","message":"you can run it manually","date":"2016-02-24T23:43:26.308Z","type":"message"}
{"nick":"jugglinmike","message":"(my printf statements aren't coming through when I run the tests, though they're visible from d8)","date":"2016-02-24T23:43:27.913Z","type":"message"}
{"nick":"jugglinmike","message":"got it. I'll look into run-tests.py to learn more","date":"2016-02-24T23:44:16.921Z","type":"message"}
{"nick":"aklein","message":"out/path/to/cctest test-parsing/MyTestName","date":"2016-02-24T23:45:13.285Z","type":"message"}
{"nick":"jugglinmike","message":"bingo","date":"2016-02-24T23:48:14.214Z","type":"message"}
{"nick":"ofrobots","date":"2016-02-24T23:51:34.480Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-02-24T23:53:10.111Z","type":"quit"}
{"nick":"ofrobots","date":"2016-02-24T23:54:18.104Z","type":"join"}
{"nick":"jugglinmike","message":"close, but still not quite sure what is going wrong","date":"2016-02-24T23:58:52.610Z","type":"message"}
{"nick":"jugglinmike","message":"I'll pick it up in the morning. Thanks again, aklein","date":"2016-02-24T23:59:08.165Z","type":"message"}
