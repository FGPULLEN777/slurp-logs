{"nick":"iamdustan","reason":"Ping timeout: 272 seconds","date":"2013-10-17T00:14:13.196Z","type":"quit"}
{"nick":"iamdustan","date":"2013-10-17T00:16:08.897Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-17T00:17:56.282Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 268 seconds","date":"2013-10-17T00:22:44.120Z","type":"quit"}
{"nick":"iamdustan","reason":"Ping timeout: 272 seconds","date":"2013-10-17T01:05:25.808Z","type":"quit"}
{"nick":"leostera","date":"2013-10-17T01:19:41.962Z","type":"join"}
{"nick":"leostera","reason":"Client Quit","date":"2013-10-17T01:21:10.023Z","type":"quit"}
{"nick":"abraxas","date":"2013-10-17T01:39:46.285Z","type":"join"}
{"nick":"iamdustan","date":"2013-10-17T01:46:32.179Z","type":"join"}
{"nick":"iamdustan","reason":"Remote host closed the connection","date":"2013-10-17T01:52:42.787Z","type":"quit"}
{"nick":"iamdustan","date":"2013-10-17T02:01:05.722Z","type":"join"}
{"nick":"seventh","reason":"Ping timeout: 240 seconds","date":"2013-10-17T02:03:50.542Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-17T02:29:14.938Z","type":"quit"}
{"nick":"c4milo","date":"2013-10-17T02:29:41.310Z","type":"join"}
{"nick":"c4milo","reason":"Ping timeout: 268 seconds","date":"2013-10-17T02:34:42.136Z","type":"quit"}
{"nick":"jazz264","date":"2013-10-17T03:58:59.221Z","type":"join"}
{"nick":"iamdustan","reason":"Ping timeout: 245 seconds","date":"2013-10-17T04:07:31.631Z","type":"quit"}
{"nick":"jazz264","reason":"Ping timeout: 245 seconds","date":"2013-10-17T05:51:51.270Z","type":"quit"}
{"nick":"spolu","date":"2013-10-17T06:40:31.777Z","type":"join"}
{"nick":"xan_","date":"2013-10-17T07:16:23.783Z","type":"join"}
{"nick":"muelli","date":"2013-10-17T07:22:44.265Z","type":"join"}
{"nick":"Lethalman","date":"2013-10-17T07:37:54.032Z","type":"join"}
{"nick":"jaseemabid","date":"2013-10-17T07:49:07.956Z","type":"join"}
{"nick":"jaseemabid","reason":"Read error: Connection reset by peer","date":"2013-10-17T08:14:44.457Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-17T08:16:02.876Z","type":"join"}
{"nick":"jaseemabid","reason":"Max SendQ exceeded","date":"2013-10-17T08:16:10.653Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-17T08:16:55.523Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-17T09:12:44.406Z","type":"join"}
{"nick":"muelli","message":"wow. The whole code generator thing is madness.","date":"2013-10-17T09:24:22.223Z","type":"message"}
{"nick":"muelli","reason":"Ping timeout: 272 seconds","date":"2013-10-17T09:37:15.221Z","type":"quit"}
{"nick":"muelli","date":"2013-10-17T09:40:40.122Z","type":"join"}
{"nick":"Petka","date":"2013-10-17T10:18:22.001Z","type":"join"}
{"nick":"rosseaux","reason":"Excess Flood","date":"2013-10-17T10:22:15.134Z","type":"quit"}
{"nick":"rosseaux","date":"2013-10-17T10:24:35.795Z","type":"join"}
{"nick":"jaseemabid","reason":"Remote host closed the connection","date":"2013-10-17T10:38:11.934Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-17T10:38:38.296Z","type":"join"}
{"nick":"jaseemabid","reason":"Quit: Leaving","date":"2013-10-17T10:55:29.948Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-17T10:57:43.540Z","type":"join"}
{"nick":"jaseemabid","reason":"Max SendQ exceeded","date":"2013-10-17T10:57:58.258Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-17T10:58:33.317Z","type":"join"}
{"nick":"jaseemabid","reason":"Remote host closed the connection","date":"2013-10-17T10:59:26.281Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-17T10:59:52.381Z","type":"join"}
{"nick":"jaseemabid","reason":"Remote host closed the connection","date":"2013-10-17T11:00:04.682Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-17T11:01:03.339Z","type":"join"}
{"nick":"jaseemabid","reason":"Max SendQ exceeded","date":"2013-10-17T11:01:13.909Z","type":"quit"}
{"nick":"iamdustan","date":"2013-10-17T11:56:01.125Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2013-10-17T11:56:24.748Z","type":"quit"}
{"nick":"iamdustan","reason":"Read error: Connection reset by peer","date":"2013-10-17T12:09:43.887Z","type":"quit"}
{"nick":"iamdustan","date":"2013-10-17T12:09:56.162Z","type":"join"}
{"nick":"c4milo","date":"2013-10-17T13:10:26.407Z","type":"join"}
{"nick":"c4milo_","date":"2013-10-17T13:25:43.632Z","type":"join"}
{"nick":"c4milo","reason":"Read error: No route to host","date":"2013-10-17T13:27:11.621Z","type":"quit"}
{"nick":"bnoordhuis","message":"how thread-safe is Debugger::EnqueueDebugCommand() in deps/v8/src/debug.cc?","date":"2013-10-17T14:05:56.489Z","type":"message"}
{"nick":"bnoordhuis","message":"make that src/debug.cc :)","date":"2013-10-17T14:06:09.034Z","type":"message"}
{"nick":"bnoordhuis","message":"it uses a mutex-protected queue for the command object (good) but the InDebugger() check afterwards is not protected by anything","date":"2013-10-17T14:06:35.170Z","type":"message"}
{"nick":"bnoordhuis","message":"the queue has an implicit memory barrier but it still looks susceptible to reordering","date":"2013-10-17T14:07:37.688Z","type":"message"}
{"nick":"guor","message":"you are right","date":"2013-10-17T14:07:59.193Z","type":"message"}
{"nick":"guor","message":"im not entirely familiar with the code","date":"2013-10-17T14:08:05.170Z","type":"message"}
{"nick":"guor","message":"but it does seem wrong","date":"2013-10-17T14:08:08.933Z","type":"message"}
{"nick":"bnoordhuis","message":"should i file an issue?","date":"2013-10-17T14:08:22.821Z","type":"message"}
{"nick":"guor","message":"please do","date":"2013-10-17T14:09:29.868Z","type":"message"}
{"nick":"bnoordhuis","message":"okay","date":"2013-10-17T14:09:42.625Z","type":"message"}
{"nick":"c4milo_","reason":"Remote host closed the connection","date":"2013-10-17T14:14:57.949Z","type":"quit"}
{"nick":"bnoordhuis","message":"#2936","date":"2013-10-17T14:15:09.982Z","type":"message"}
{"nick":"c4milo","date":"2013-10-17T14:15:23.335Z","type":"join"}
{"nick":"c4milo","reason":"Ping timeout: 272 seconds","date":"2013-10-17T14:20:21.192Z","type":"quit"}
{"nick":"muelli","message":"Is every internal::Object I acquire, i.e. via heap->AllocateRawOneByteString() managed? I.e. I do not need to worry about leaking the objects (and their memory)?","date":"2013-10-17T14:44:11.326Z","type":"message"}
{"nick":"muelli","message":"So if I allocated many new strings in, say, String::SlowFlatten, and return only one of those strings, the others would be GCed at some stage..?","date":"2013-10-17T14:52:54.866Z","type":"message"}
{"nick":"bnoordhuis","message":"muelli: yes, unless there's something referencing them","date":"2013-10-17T14:57:46.092Z","type":"message"}
{"nick":"muelli","message":"sure. cool. That's handy.","date":"2013-10-17T14:58:20.384Z","type":"message"}
{"nick":"spolu","reason":"Remote host closed the connection","date":"2013-10-17T15:19:04.113Z","type":"quit"}
{"nick":"spolu","date":"2013-10-17T15:20:05.931Z","type":"join"}
