{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2013-03-28T02:03:13.600Z","type":"quit"}
{"nick":"faceleg|work","reason":"Ping timeout: 258 seconds","date":"2013-03-28T03:05:46.662Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-28T03:09:57.886Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 258 seconds","date":"2013-03-28T03:14:35.704Z","type":"quit"}
{"nick":"jazz264","date":"2013-03-28T03:56:32.099Z","type":"join"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-03-28T04:30:09.718Z","type":"quit"}
{"nick":"Frippe","date":"2013-03-28T07:53:44.167Z","type":"join"}
{"nick":"Net147","date":"2013-03-28T09:22:17.274Z","type":"join"}
{"nick":"Net147","reason":"Client Quit","date":"2013-03-28T09:22:34.122Z","type":"quit"}
{"nick":"jazz264","reason":"Ping timeout: 246 seconds","date":"2013-03-28T09:59:14.154Z","type":"quit"}
{"nick":"Net147","date":"2013-03-28T10:12:11.587Z","type":"join"}
{"nick":"stalled","reason":"Ping timeout: 255 seconds","date":"2013-03-28T10:49:14.361Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-03-28T10:49:19.867Z","type":"join"}
{"nick":"stalled","date":"2013-03-28T10:58:09.125Z","type":"join"}
{"nick":"faceleg","reason":"Ping timeout: 260 seconds","date":"2013-03-28T11:03:59.869Z","type":"quit"}
{"nick":"faceleg","date":"2013-03-28T11:04:09.141Z","type":"join"}
{"nick":"rickytaylor26","reason":"Ping timeout: 255 seconds","date":"2013-03-28T11:23:47.484Z","type":"quit"}
{"nick":"saurik","reason":"Ping timeout: 260 seconds","date":"2013-03-28T11:23:47.904Z","type":"quit"}
{"nick":"ricky26","date":"2013-03-28T11:23:50.004Z","type":"join"}
{"nick":"saurik","date":"2013-03-28T11:24:33.784Z","type":"join"}
{"nick":"C-Man","date":"2013-03-28T12:11:30.902Z","type":"join"}
{"nick":"stampho","date":"2013-03-28T12:22:08.707Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-03-28T12:42:10.904Z","type":"join"}
{"nick":"c4milo","date":"2013-03-28T13:39:20.382Z","type":"join"}
{"nick":"cha0s","reason":"Ping timeout: 258 seconds","date":"2013-03-28T14:04:18.842Z","type":"quit"}
{"nick":"jaseemabid","reason":"Ping timeout: 248 seconds","date":"2013-03-28T14:33:41.801Z","type":"quit"}
{"nick":"Net147","reason":"Quit:  HydraIRC -> http://www.hydrairc.com <- Chicks dig it","date":"2013-03-28T14:41:00.395Z","type":"quit"}
{"nick":"Frippe","reason":"Quit: Computer has gone to sleep.","date":"2013-03-28T15:12:49.411Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-03-28T15:20:09.246Z","type":"join"}
{"nick":"{V}","date":"2013-03-28T15:26:47.768Z","type":"join"}
{"nick":"{V}","message":"http://code.google.com/p/v8/issues/detail?id=2599 suggests https://code.google.com/p/v8/issues/detail?id=2424 should be solved first, but asm.js requires a lot of \"coersion\" ; would v8 even make those \"mistakes\" with that amount (see http://jsbin.com/atokoq/2/edit ) ?","date":"2013-03-28T15:30:52.312Z","type":"message"}
{"nick":"guor","message":"what do you mean by \"mistakes\"?","date":"2013-03-28T15:31:24.231Z","type":"message"}
{"nick":"{V}","message":"2424 complains that v8 does the addition as doubles, rather than  int32 ","date":"2013-03-28T15:32:53.029Z","type":"message"}
{"nick":"guor","message":"the coersions in asm.js you are talking about are essentially signals on the type inferrer. the type inferrer pattern matches those signals to know which types to forcibly use","date":"2013-03-28T15:34:26.119Z","type":"message"}
{"nick":"guor","message":"V8 doesn't match those patterns yet since those just have not been common in javascript code, so far","date":"2013-03-28T15:34:43.667Z","type":"message"}
{"nick":"guor","message":"with asm.js this may change, so V8 will be optimized to act on those patterns","date":"2013-03-28T15:35:00.388Z","type":"message"}
{"nick":"guor","message":"part of it is issue 2424","date":"2013-03-28T15:35:12.539Z","type":"message"}
{"nick":"guor","message":"of course asm.js enables some other optimizations as well","date":"2013-03-28T15:35:35.456Z","type":"message"}
{"nick":"mraleph","message":"{V}: yes it will make it.","date":"2013-03-28T15:41:32.528Z","type":"message"}
{"nick":"mraleph","message":"{V}: amount does not matter.","date":"2013-03-28T15:41:50.351Z","type":"message"}
{"nick":"mraleph","message":"guor except for some tricks with bounds check elimination I don't see anything that asm.js enables that normal JIT compilation framework can't achieve.","date":"2013-03-28T15:42:44.098Z","type":"message"}
{"nick":"{V}","message":"I kind of assumed v8 already did most such inferences. Especially since they (asm.js users) report some of the tests they ran do better in v8 with the asm.js version of Emscripten output then the non-asm.js output","date":"2013-03-28T15:43:15.266Z","type":"message"}
{"nick":"guor","message":"i guess some pieces are still missing :)","date":"2013-03-28T15:44:05.745Z","type":"message"}
{"nick":"mraleph","message":"{V} it does some but there is a problem: it still allows type feedback from operations superceed what you infer statically. in this case if you add some big int32 numbers you get double type feedback for a + ","date":"2013-03-28T15:45:03.075Z","type":"message"}
{"nick":"{V}","message":"except the asm.js spec currently requires that you explicitely limit it to 32bit with a |0 operation  if a mere int32 is the desired result.","date":"2013-03-28T15:51:03.614Z","type":"message"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2013-03-28T15:54:21.494Z","type":"quit"}
{"nick":"{V}","message":"oh right. from 2424 \" u = (x4 + x0) | 0;","date":"2013-03-28T15:54:45.700Z","type":"message"}
{"nick":"{V}","message":"The addition remains double. \"","date":"2013-03-28T15:54:45.911Z","type":"message"}
