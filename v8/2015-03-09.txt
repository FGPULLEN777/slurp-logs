{"nick":"caitp-","date":"2015-03-09T01:21:07.293Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T01:26:39.315Z","type":"quit"}
{"nick":"mooseboobs","date":"2015-03-09T02:45:31.529Z","type":"join"}
{"nick":"caitp-","date":"2015-03-09T03:23:52.334Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T03:28:35.313Z","type":"quit"}
{"nick":"ashnur","reason":"Remote host closed the connection","date":"2015-03-09T03:49:30.079Z","type":"quit"}
{"nick":"ashnur","date":"2015-03-09T03:51:53.804Z","type":"join"}
{"nick":"muelli","date":"2015-03-09T03:57:55.358Z","type":"join"}
{"nick":"caitp","reason":"Ping timeout: 244 seconds","date":"2015-03-09T03:58:33.352Z","type":"quit"}
{"nick":"muelli","reason":"Ping timeout: 265 seconds","date":"2015-03-09T04:09:05.295Z","type":"quit"}
{"nick":"caitp-","date":"2015-03-09T04:25:00.251Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T04:30:04.326Z","type":"quit"}
{"nick":"caitp","date":"2015-03-09T04:32:39.134Z","type":"join"}
{"nick":"caitp","reason":"Ping timeout: 244 seconds","date":"2015-03-09T04:39:22.316Z","type":"quit"}
{"nick":"mooseboobs","date":"2015-03-09T04:40:31.500Z","type":"quit"}
{"nick":"Vbitz","reason":"Quit: ZNC - http://znc.in","date":"2015-03-09T04:50:30.196Z","type":"quit"}
{"nick":"Vbitz","date":"2015-03-09T05:14:54.196Z","type":"join"}
{"nick":"caitp-","date":"2015-03-09T05:31:23.520Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T05:35:41.252Z","type":"quit"}
{"nick":"mooseboobs","date":"2015-03-09T05:51:13.858Z","type":"join"}
{"nick":"guor","reason":"Ping timeout: 256 seconds","date":"2015-03-09T06:37:54.292Z","type":"quit"}
{"nick":"guor","date":"2015-03-09T07:08:43.373Z","type":"join"}
{"nick":"caitp-","date":"2015-03-09T07:20:23.473Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T07:24:42.243Z","type":"quit"}
{"nick":"wingo","date":"2015-03-09T07:29:03.869Z","type":"join"}
{"nick":"mostynb","date":"2015-03-09T07:33:26.348Z","type":"join"}
{"nick":"jochen__","date":"2015-03-09T08:01:44.374Z","type":"join"}
{"nick":"Lethalman","date":"2015-03-09T08:51:00.248Z","type":"join"}
{"nick":"dobson","reason":"*.net *.split","date":"2015-03-09T09:04:02.269Z","type":"quit"}
{"nick":"dobson","date":"2015-03-09T09:06:10.576Z","type":"join"}
{"nick":"caitp-","date":"2015-03-09T09:09:23.613Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T09:13:43.342Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: Tree is open (CQ failure http://crbug.com/465208)","date":"2015-03-09T09:25:06.867Z","type":"message"}
{"nick":"totemizer","date":"2015-03-09T10:27:19.295Z","type":"join"}
{"nick":"ashnur","reason":"Ping timeout: 272 seconds","date":"2015-03-09T10:27:24.381Z","type":"quit"}
{"nick":"tiglionabbit","date":"2015-03-09T10:47:14.274Z","type":"join"}
{"nick":"caitp-","date":"2015-03-09T10:58:26.348Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T11:02:44.329Z","type":"quit"}
{"nick":"tiglionabbit","reason":"Quit: tiglionabbit","date":"2015-03-09T11:09:48.553Z","type":"quit"}
{"nick":"Net147","date":"2015-03-09T11:24:15.405Z","type":"join"}
{"nick":"mostynb","reason":"Remote host closed the connection","date":"2015-03-09T12:02:05.876Z","type":"quit"}
{"nick":"caitp-","date":"2015-03-09T12:29:28.916Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T12:33:40.368Z","type":"quit"}
{"nick":"totemizer","new_nick":"ashnur","date":"2015-03-09T12:35:47.427Z","type":"nick"}
{"nick":"ashnur","reason":"Changing host","date":"2015-03-09T12:35:56.149Z","type":"quit"}
{"nick":"ashnur","date":"2015-03-09T12:35:56.341Z","type":"join"}
{"nick":"bnoordhuis","date":"2015-03-09T12:36:57.212Z","type":"join"}
{"nick":"caitp","date":"2015-03-09T13:20:28.996Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2015-03-09T13:24:08.222Z","type":"quit"}
{"nick":"caitp","reason":"Ping timeout: 246 seconds","date":"2015-03-09T13:33:53.993Z","type":"quit"}
{"nick":"caitp","date":"2015-03-09T13:41:22.405Z","type":"join"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: Tree is open (CQ problems resolved)","date":"2015-03-09T13:45:06.664Z","type":"message"}
{"nick":"Net147","reason":"Quit:  HydraIRC -> http://www.hydrairc.com <- IRC with a difference","date":"2015-03-09T13:45:59.400Z","type":"quit"}
{"nick":"jsgui","date":"2015-03-09T14:09:55.671Z","type":"join"}
{"nick":"caitp-","date":"2015-03-09T14:15:12.716Z","type":"join"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T14:20:06.251Z","type":"quit"}
{"nick":"KillerJim","date":"2015-03-09T14:27:49.654Z","type":"join"}
{"nick":"bnoordhuis","date":"2015-03-09T14:30:39.297Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2015-03-09T14:35:32.314Z","type":"quit"}
{"nick":"ashnur","reason":"Ping timeout: 256 seconds","date":"2015-03-09T15:28:18.319Z","type":"quit"}
{"nick":"caitp","message":"marja___, what's your opinion on adding some limited backtracking to the parser?","date":"2015-03-09T15:28:33.972Z","type":"message"}
{"nick":"caitp","message":"I think I need it for adding rest param support to arrow functions","date":"2015-03-09T15:28:46.255Z","type":"message"}
{"nick":"marja___","message":"caitp: it's kinda tricky... hmm, it was on the table once, and we concluded that at least the solution we had in mind just exploded (the backtracking was in no way \"limited\" any more, since the constructs can nest)","date":"2015-03-09T15:29:45.641Z","type":"message"}
{"nick":"marja___","message":"in addition, not all the parser data streams are rewindable (though, they can be made rewindable)","date":"2015-03-09T15:30:08.734Z","type":"message"}
{"nick":"caitp","message":"the idea I had in mind was, not actually rewinding the streams","date":"2015-03-09T15:31:03.138Z","type":"message"}
{"nick":"marja___","message":"but hmm, this was in the context of default parameters.","date":"2015-03-09T15:31:04.448Z","type":"message"}
{"nick":"marja___","message":"so maybe the situation you need to solve is easier and doesn't end up in pathological cases like that.","date":"2015-03-09T15:31:21.438Z","type":"message"}
{"nick":"caitp","message":"just making sure not to update the stream when calling next() in a backtracked position","date":"2015-03-09T15:31:21.981Z","type":"message"}
{"nick":"marja___","message":"alright, so, how would it work overall? when would we decide to backtrack, what would it mean, etc.","date":"2015-03-09T15:32:11.726Z","type":"message"}
{"nick":"caitp","message":"well mozilla's approach to it is to look for `... <identifier> ) =>` when parsing a primary expression --- which would work great, but I'd need to backtrack so that the closing paren can be parsed right","date":"2015-03-09T15:32:31.493Z","type":"message"}
{"nick":"marja___","message":"so it'd parse those, then push => and ) back?","date":"2015-03-09T15:35:47.898Z","type":"message"}
{"nick":"caitp","message":"https://gist.github.com/caitp/444ab494e6425b847824 something like that I guess","date":"2015-03-09T15:36:19.601Z","type":"message"}
{"nick":"marja___","message":"and then ParsePrimaryExpression would consume the )","date":"2015-03-09T15:36:30.505Z","type":"message"}
{"nick":"marja___","message":"... so you'd basically need a longer lookahead?","date":"2015-03-09T15:36:40.067Z","type":"message"}
{"nick":"caitp","message":"yeah I guess","date":"2015-03-09T15:36:51.438Z","type":"message"}
{"nick":"caitp","message":"same thing, different way of expressing it","date":"2015-03-09T15:37:11.570Z","type":"message"}
{"nick":"marja___","message":"yea","date":"2015-03-09T15:37:13.867Z","type":"message"}
{"nick":"aperezdc","message":"fwiw, it looks like “some more lookahead” to me, too","date":"2015-03-09T15:37:14.391Z","type":"message"}
{"nick":"marja___","message":"okay, so that case seems unproblematic compared to the pathological default param cases.","date":"2015-03-09T15:37:44.635Z","type":"message"}
{"nick":"marja___","message":"especially since the tokens looked-ahead are so simple... i'm not sure how much complicated it would be if we'd need to long-peek or push back strings etc.","date":"2015-03-09T15:38:28.886Z","type":"message"}
{"nick":"caitp","message":"i guess my worry is about making the parser slower for everyone if it needs to be able to deal with more state","date":"2015-03-09T15:39:04.347Z","type":"message"}
{"nick":"marja___","message":"q: would you do something different if you see \"... <identifier>\" than if you see \"... <identifier>) =>\"","date":"2015-03-09T15:39:44.543Z","type":"message"}
{"nick":"marja___","message":"do we actually need to know that there are ) and =>, or can we set some \"saw rest param\" state, which will then make subsequent phases fail if there are no ) or =>","date":"2015-03-09T15:40:11.964Z","type":"message"}
{"nick":"marja___","message":"(or somehow set the \"is rest param\" flag to a thing which is <identifier>)","date":"2015-03-09T15:40:49.576Z","type":"message"}
{"nick":"caitp","message":"if the next token after an identifier isn't a \")\", then it should be an error and doesn't need to scan further","date":"2015-03-09T15:40:57.900Z","type":"message"}
{"nick":"caitp","message":"or i mean, doesn't need to look further ahead","date":"2015-03-09T15:41:17.286Z","type":"message"}
{"nick":"marja___","message":"yea, ParsePrimaryExpression should handle that anyway (if it has seen \"(\")","date":"2015-03-09T15:41:42.255Z","type":"message"}
{"nick":"marja___","message":"so i'm still not sure what difference the increased lookahead would make","date":"2015-03-09T15:42:00.900Z","type":"message"}
{"nick":"marja___","message":"like, would it be possible to handle it with some other means","date":"2015-03-09T15:42:23.493Z","type":"message"}
{"nick":"caitp","message":"I think the idea is that ParsePrimaryExpression is called during the parsing of a binary expression with , op","date":"2015-03-09T15:42:42.005Z","type":"message"}
{"nick":"marja___","message":"ah yeah, we were probably talking about different levels of ParsePrimaryExpression. so there's one for \"( thing )\", and that's the one that consumes the )","date":"2015-03-09T15:43:44.729Z","type":"message"}
{"nick":"caitp","message":"so ParsePrimaryExpression wouldn't deal with the ()","date":"2015-03-09T15:43:52.839Z","type":"message"}
{"nick":"marja___","message":"so you'd like the one which parses \"...rest\" and you'd like that to only succeed if it's followed by ) =>","date":"2015-03-09T15:44:34.008Z","type":"message"}
{"nick":"caitp","message":"yeah, but then be able to resume parsing from the ) instead of from the =>","date":"2015-03-09T15:45:05.418Z","type":"message"}
{"nick":"marja___","message":"yep","date":"2015-03-09T15:45:14.377Z","type":"message"}
{"nick":"caitp-","date":"2015-03-09T15:46:16.992Z","type":"join"}
{"nick":"marja___","message":"an alternative solution would be to always accept \"...stuff\" and set the \"this is a rest parameter\" flag to the relevant entity, but then, i can see that it can be horrible to always check that flag in all places.","date":"2015-03-09T15:46:32.122Z","type":"message"}
{"nick":"marja___","message":"otoh, maybe it can be passed forward","date":"2015-03-09T15:46:50.309Z","type":"message"}
{"nick":"marja___","message":"when we're parsing something that's potentially an arrow function parameter list","date":"2015-03-09T15:47:00.428Z","type":"message"}
{"nick":"marja___","message":"(i.e., we have seen the \"(\")","date":"2015-03-09T15:47:10.849Z","type":"message"}
{"nick":"marja___","message":"afaics that could also work","date":"2015-03-09T15:47:26.521Z","type":"message"}
{"nick":"caitp","message":"yeah but you still end up worrying in a lot more places about a SpreadOperator ast node that shouldn't be ther","date":"2015-03-09T15:47:38.689Z","type":"message"}
{"nick":"caitp","message":"e","date":"2015-03-09T15:47:39.054Z","type":"message"}
{"nick":"caitp","message":"or a flag on a different token","date":"2015-03-09T15:47:47.903Z","type":"message"}
{"nick":"marja___","message":"yeah, hard to say in advance which solution is better","date":"2015-03-09T15:48:07.772Z","type":"message"}
{"nick":"caitp","message":"I thought it was nice to at least for now group things that way so that there's a limit to where the nodes can turn up","date":"2015-03-09T15:48:25.999Z","type":"message"}
{"nick":"marja___","message":"otoh, the \"increase peeking distance\" solution is only slightly horrible and afaics doesn't necessarily make things slower","date":"2015-03-09T15:49:06.556Z","type":"message"}
{"nick":"marja___","message":"(we'd just keep 4 tokens in memory instead of 2, and when we Next() we'd advance in the queue)","date":"2015-03-09T15:49:31.261Z","type":"message"}
{"nick":"marja___","message":"(i assume that scanning a token would dominate the queue handling, but otoh, that might not be true)","date":"2015-03-09T15:49:43.986Z","type":"message"}
{"nick":"marja___","message":"(nah, it will)","date":"2015-03-09T15:50:05.697Z","type":"message"}
{"nick":"marja___","message":"plus we'd potentially need to keep 4 strings or such, brr.","date":"2015-03-09T15:50:29.882Z","type":"message"}
{"nick":"caitp","message":"hm","date":"2015-03-09T15:50:53.846Z","type":"message"}
{"nick":"marja___","message":"that'll be a hassle with the literal buffers... so we probably want to somehow selectively be able to peek further","date":"2015-03-09T15:51:02.305Z","type":"message"}
{"nick":"caitp-","reason":"Ping timeout: 244 seconds","date":"2015-03-09T15:51:02.458Z","type":"quit"}
{"nick":"marja___","message":"and not always peek 4 tokens far","date":"2015-03-09T15:51:09.306Z","type":"message"}
{"nick":"marja___","message":"idk, i don't have a clear opinion now what solution is the most elegant. :/","date":"2015-03-09T15:51:30.129Z","type":"message"}
{"nick":"caitp","message":"i guess I'll try some things","date":"2015-03-09T15:51:44.422Z","type":"message"}
{"nick":"marja___","message":"alright","date":"2015-03-09T15:52:29.556Z","type":"message"}
{"nick":"marja___","message":"i guess the real horror will start when the default params emerge :/","date":"2015-03-09T15:52:39.045Z","type":"message"}
{"nick":"caitp","message":"why is it needed for default parameters though?","date":"2015-03-09T15:57:43.282Z","type":"message"}
{"nick":"caitp","message":"i guess in arrow functions it is","date":"2015-03-09T15:57:58.093Z","type":"message"}
