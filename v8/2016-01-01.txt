{"nick":"rom1504","reason":"Quit: Changing server","date":"2016-01-01T00:19:44.678Z","type":"quit"}
{"nick":"xiinotulp","new_nick":"plutoniix","date":"2016-01-01T01:14:33.225Z","type":"nick"}
{"nick":"watilde","date":"2016-01-01T01:52:11.332Z","type":"join"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-01T01:55:37.387Z","type":"quit"}
{"nick":"watilde","date":"2016-01-01T02:10:42.988Z","type":"join"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-01T02:13:09.302Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-01T02:40:41.663Z","type":"join"}
{"nick":"watilde","date":"2016-01-01T02:43:36.329Z","type":"join"}
{"nick":"watilde","reason":"Ping timeout: 264 seconds","date":"2016-01-01T02:51:11.968Z","type":"quit"}
{"nick":"xaxxon","date":"2016-01-01T03:00:15.855Z","type":"join"}
{"nick":"xaxxon","message":"any way to share a single object template as the instance template of multiple function templates?","date":"2016-01-01T03:00:47.700Z","type":"message"}
{"nick":"xaxxon","message":"I want to allow multiple c++ constructors to be called for the same type e.g. Point() and Point(int,int) but that seems to require two function templates but I want the exposed object to be identical regardless of which is called","date":"2016-01-01T03:03:19.382Z","type":"message"}
{"nick":"xaxxon","message":"and Point(double,double)","date":"2016-01-01T03:03:54.513Z","type":"message"}
{"nick":"xaxxon","message":"I tried creating a single ObjectTemplate and assigning it to the return of Instancetemplate(), but that doesn't seem to do anything.   I'm guessing it just changes what the Local is referring to, not what's actually inside the function template","date":"2016-01-01T03:05:53.447Z","type":"message"}
{"nick":"bobmcw","date":"2016-01-01T03:11:41.484Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 245 seconds","date":"2016-01-01T03:17:39.862Z","type":"quit"}
{"nick":"xaxxon","message":"I'm just creating multiple functiontemplates and then adding accessors or functiontemplates to every one of them whenever I want to add something... it's annoying but it seems to work.","date":"2016-01-01T03:26:20.513Z","type":"message"}
{"nick":"esas","date":"2016-01-01T03:53:41.448Z","type":"join"}
{"nick":"xaxxon","message":"oops","date":"2016-01-01T04:17:57.532Z","type":"message"}
{"nick":"JoWie","reason":"Quit: Connection closed for inactivity","date":"2016-01-01T04:19:39.995Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-01T04:24:11.658Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-01T04:30:45.987Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Read error: Connection reset by peer","date":"2016-01-01T04:42:29.904Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2016-01-01T04:43:19.697Z","type":"join"}
{"nick":"watilde","date":"2016-01-01T04:49:00.204Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-01T04:49:55.039Z","type":"quit"}
{"nick":"watilde","reason":"Ping timeout: 272 seconds","date":"2016-01-01T04:54:08.461Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-01T05:04:52.262Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-01T06:11:17.147Z","type":"quit"}
{"nick":"bobmcw","date":"2016-01-01T07:14:44.812Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 264 seconds","date":"2016-01-01T07:20:35.945Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-01T07:33:46.734Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 265 seconds","date":"2016-01-01T07:38:11.668Z","type":"quit"}
{"nick":"jugglinmike","reason":"Ping timeout: 250 seconds","date":"2016-01-01T07:57:37.009Z","type":"quit"}
{"nick":"watilde","date":"2016-01-01T08:09:27.714Z","type":"join"}
{"nick":"watilde","reason":"Ping timeout: 250 seconds","date":"2016-01-01T08:14:04.818Z","type":"quit"}
{"nick":"watilde","date":"2016-01-01T08:39:35.101Z","type":"join"}
{"nick":"esas","reason":"Ping timeout: 240 seconds","date":"2016-01-01T08:52:06.281Z","type":"quit"}
{"nick":"xaxxon","reason":"Quit: Leaving","date":"2016-01-01T08:57:55.360Z","type":"quit"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-01T10:47:54.847Z","type":"quit"}
{"nick":"watilde","date":"2016-01-01T10:50:11.648Z","type":"join"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-01T11:40:46.605Z","type":"quit"}
{"nick":"watilde","date":"2016-01-01T11:41:21.769Z","type":"join"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-01T11:45:18.781Z","type":"quit"}
{"nick":"bobmcw","date":"2016-01-01T13:04:47.502Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 245 seconds","date":"2016-01-01T13:10:09.975Z","type":"quit"}
{"nick":"C-Man","date":"2016-01-01T15:25:24.957Z","type":"join"}
{"nick":"bobmcw","date":"2016-01-01T16:08:48.565Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 264 seconds","date":"2016-01-01T16:13:23.902Z","type":"quit"}
{"nick":"ncthom91","date":"2016-01-01T16:35:09.148Z","type":"join"}
{"nick":"ncthom91","reason":"Read error: Connection reset by peer","date":"2016-01-01T16:37:40.400Z","type":"quit"}
{"nick":"ncthom91","date":"2016-01-01T16:38:08.448Z","type":"join"}
{"nick":"JoWie","date":"2016-01-01T16:38:09.832Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-01T16:38:28.396Z","type":"join"}
{"nick":"ncthom91","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2016-01-01T17:01:42.271Z","type":"quit"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2016-01-01T17:18:57.506Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-01T17:36:15.943Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-01T17:56:04.157Z","type":"join"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2016-01-01T18:00:48.996Z","type":"quit"}
{"nick":"C-Man","date":"2016-01-01T18:03:03.207Z","type":"join"}
{"nick":"mostynb","date":"2016-01-01T18:19:16.830Z","type":"join"}
{"nick":"ncthom91","date":"2016-01-01T18:38:54.100Z","type":"join"}
{"nick":"jugglinmike","date":"2016-01-01T18:51:57.828Z","type":"join"}
{"nick":"mostynb","reason":"Quit: Leaving","date":"2016-01-01T18:58:39.607Z","type":"quit"}
{"nick":"ncthom91","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2016-01-01T19:25:07.542Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 260 seconds","date":"2016-01-01T19:50:31.311Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-01T20:16:49.482Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 272 seconds","date":"2016-01-01T20:25:46.486Z","type":"quit"}
{"nick":"phpnode","message":"hello, does anyone know how v8 deals with colliding hashes in Map and Set? Skimming through https://github.com/v8/v8/blob/master/src/js/collection.js it appears that it doesn't handle them","date":"2016-01-01T21:09:19.571Z","type":"message"}
{"nick":"phpnode","message":"which makes me curious about the implementation of GenericHash(), but I can't find the source for it, does anyone have any hints on where I should start looking?","date":"2016-01-01T21:09:58.656Z","type":"message"}
{"nick":"bobmcw","date":"2016-01-01T21:11:56.098Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 240 seconds","date":"2016-01-01T21:16:15.855Z","type":"quit"}
{"nick":"saper","message":"phpnode: isn't that in the C++ code?","date":"2016-01-01T21:29:10.057Z","type":"message"}
{"nick":"watilde","date":"2016-01-01T21:29:32.851Z","type":"join"}
{"nick":"phpnode","message":"saper: it will be yes, but I can only find a single reference to that when searching on github and it's in a header file without any implementation code","date":"2016-01-01T21:31:10.003Z","type":"message"}
{"nick":"saper","message":"phpnode: https://github.com/v8/v8/blob/master/src/hashmap.h maybe? (just guessing)","date":"2016-01-01T21:31:42.123Z","type":"message"}
{"nick":"saper","message":"that's C++ - you have sometimes actual code in the \"header\" file","date":"2016-01-01T21:32:04.619Z","type":"message"}
{"nick":"phpnode","message":"saper: thanks, i don't think that is specifically what i was looking for but can probably give me the answers I need, reading now :)","date":"2016-01-01T21:33:04.175Z","type":"message"}
{"nick":"saper","message":"https://github.com/v8/v8/blob/master/src/hashmap.h#L254 this looks interesting","date":"2016-01-01T21:35:20.296Z","type":"message"}
{"nick":"phpnode","message":"ha, yes just reading that exact line","date":"2016-01-01T21:35:36.051Z","type":"message"}
{"nick":"phpnode","message":"it does compare the keys, that's all i needed to know :)","date":"2016-01-01T21:35:46.132Z","type":"message"}
{"nick":"saper","message":"it seems to me that hash and capacity are used to provide faster jump in the key table, if that does not work it continues with linear search","date":"2016-01-01T21:40:21.270Z","type":"message"}
{"nick":"saper","message":"should the capacity bits were not enough, Resize() will increase the map with a double capacity","date":"2016-01-01T21:43:21.350Z","type":"message"}
{"nick":"phpnode","message":"ok so it's not storing a pointer to an \"overflow\" node in the case of a collision, it just literally inserts into the next available array slot, or resizes if needbe","date":"2016-01-01T21:49:58.617Z","type":"message"}
{"nick":"phpnode","message":"in my implementation i spill collisions into an unbalanced tree, i wonder whether it's worth it","date":"2016-01-01T21:52:41.762Z","type":"message"}
{"nick":"xiinotulp","date":"2016-01-01T21:53:58.235Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 240 seconds","date":"2016-01-01T21:56:55.863Z","type":"quit"}
{"nick":"jugglinmike","reason":"Ping timeout: 240 seconds","date":"2016-01-01T21:59:15.722Z","type":"quit"}
{"nick":"saper","message":"phpnode: somehow v8 way feels incomplete, but can be pretty fast","date":"2016-01-01T22:12:32.378Z","type":"message"}
{"nick":"saper","message":"phpnode: I don't think I understand fully how it works","date":"2016-01-01T22:12:45.734Z","type":"message"}
{"nick":"saper","message":"it resizes on 80% capacity, not on the slow overflow","date":"2016-01-01T22:13:17.145Z","type":"message"}
{"nick":"phpnode","message":"sure but same effect","date":"2016-01-01T22:28:24.063Z","type":"message"}
{"nick":"saper","message":"phpnode: can I overflow a single slow with collisions until the expansion happens?","date":"2016-01-01T22:29:07.795Z","type":"message"}
{"nick":"phpnode","message":"yes LookupOrInsert will do that by the looks of things","date":"2016-01-01T22:30:57.429Z","type":"message"}
{"nick":"saper","message":"aren't capacity_ and occupancy_ per-hash and not per-Entry?","date":"2016-01-01T22:47:27.100Z","type":"message"}
{"nick":"phpnode","message":"yes","date":"2016-01-01T22:48:02.525Z","type":"message"}
{"nick":"saper","message":"so if I have a colliding entry, and I insert 2^capacity colliding entries into a map_, do I overflow the space for that single hash?","date":"2016-01-01T22:49:55.464Z","type":"message"}
{"nick":"saper","message":"or doesn't it really matter, because the key is always chacked anyway, so I'll be only suboptimal in that case","date":"2016-01-01T22:51:57.750Z","type":"message"}
{"nick":"phpnode","message":"no because if any individual insert causes the occupancy rate to exceed 80% it will resize the backing array, so there's no way to overflow (without allocating more than Math.pow(2, 32) elements which is not allowed anyway)","date":"2016-01-01T22:52:03.897Z","type":"message"}
{"nick":"phpnode","message":"it just causes extremely awful performance","date":"2016-01-01T22:52:33.071Z","type":"message"}
{"nick":"phpnode","message":"in practice though it sounds like the reduced complexity is worth the tradeoff, unless you're actively being attacked","date":"2016-01-01T22:54:20.172Z","type":"message"}
{"nick":"saper","message":"I think \"hash != p->hash || \" is just a performance improvement - that's what it makes it a hash table after all","date":"2016-01-01T22:54:58.603Z","type":"message"}
{"nick":"saper","message":"so if the hash does not match, it just tries the next slot, if the hash matches (collision?) but the value does not, - next slot again","date":"2016-01-01T22:55:30.429Z","type":"message"}
{"nick":"saper","message":"got it","date":"2016-01-01T22:56:12.366Z","type":"message"}
{"nick":"phpnode","message":"yes so a hash collision is treated identically to an index collision, which is pretty nice","date":"2016-01-01T22:56:30.573Z","type":"message"}
{"nick":"saper","message":"your performance depenends really on how good you hash function is","date":"2016-01-01T22:56:31.918Z","type":"message"}
{"nick":"saper","message":"I like the trick","date":"2016-01-01T22:56:50.641Z","type":"message"}
{"nick":"saper","message":"and line 254 goes down probably only to few lines of the machine code","date":"2016-01-01T22:57:19.945Z","type":"message"}
{"nick":"phpnode","message":"probably a lot cache friendlier too","date":"2016-01-01T22:57:30.959Z","type":"message"}
{"nick":"saper","message":"there is v8::internal::HashTabl","date":"2016-01-01T23:04:22.652Z","type":"message"}
{"nick":"saper","message":"there is v8::internal::HashTable","date":"2016-01-01T23:04:23.998Z","type":"message"}
{"nick":"saper","message":"https://github.com/v8/v8/blob/97def8070cbb979419c041c3732d5e11779f79da/src/objects-inl.h","date":"2016-01-01T23:05:47.719Z","type":"message"}
{"nick":"saper","message":"ZoneAllocationPolicy is one concerete implementation of that in my node","date":"2016-01-01T23:15:52.532Z","type":"message"}
{"nick":"saper","message":"wow, a whole object module where it is used (modules.o) is 4984 bytes on my platform (amd64 FreeBSD)","date":"2016-01-01T23:20:00.155Z","type":"message"}
{"nick":"saper","message":"phpnode: https://gist.github.com/saper/887019521e9d330b5745#L27-L38 seems to be https://github.com/v8/v8/blob/master/src/hashmap.h#L254 in assembly","date":"2016-01-01T23:34:30.111Z","type":"message"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-01T23:34:35.820Z","type":"quit"}
{"nick":"saper","message":"so comparing a hash at  50: 44 39 7b 10 cmp %r15d,0x10(%rbx) lets us avoid an expensive key match function call at 5a: 41 ff 55 00 callq *0x0(%r13)","date":"2016-01-01T23:35:26.284Z","type":"message"}
{"nick":"watilde","date":"2016-01-01T23:43:11.201Z","type":"join"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-01T23:44:12.389Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-01T23:46:54.904Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 260 seconds","date":"2016-01-01T23:51:55.941Z","type":"quit"}
{"nick":"trungl-bot`","date":"2016-01-01T23:55:57.902Z","type":"join"}
{"nick":"RT|Chatzilla","date":"2016-01-01T23:58:12.902Z","type":"join"}
{"nick":"watilde","date":"2016-01-01T23:58:24.171Z","type":"join"}
{"nick":"s1w","date":"2016-01-01T23:59:09.750Z","type":"join"}
{"nick":"dagobert______","date":"2016-01-01T23:59:19.869Z","type":"join"}
{"nick":"s1w","new_nick":"Guest5401","date":"2016-01-01T23:59:33.346Z","type":"nick"}
