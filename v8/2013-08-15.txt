{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-08-15T00:02:20.180Z","type":"quit"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-08-15T00:37:41.140Z","type":"quit"}
{"nick":"abraxas","date":"2013-08-15T01:36:22.451Z","type":"join"}
{"nick":"carif","date":"2013-08-15T01:53:02.775Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-08-15T01:58:05.646Z","type":"quit"}
{"nick":"c4milo","date":"2013-08-15T01:59:41.303Z","type":"join"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-08-15T02:07:33.928Z","type":"quit"}
{"nick":"carif","date":"2013-08-15T04:18:02.783Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-08-15T04:54:52.727Z","type":"quit"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-08-15T05:51:06.811Z","type":"quit"}
{"nick":"muelli","date":"2013-08-15T08:27:58.787Z","type":"join"}
{"nick":"cha0s","reason":"Ping timeout: 246 seconds","date":"2013-08-15T08:41:10.894Z","type":"quit"}
{"nick":"cha0s","date":"2013-08-15T08:43:01.400Z","type":"join"}
{"nick":"cha0s","reason":"Changing host","date":"2013-08-15T08:43:01.611Z","type":"quit"}
{"nick":"cha0s","date":"2013-08-15T08:43:01.611Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-08-15T08:51:47.608Z","type":"join"}
{"nick":"C-Man","date":"2013-08-15T08:53:47.152Z","type":"join"}
{"nick":"carif","date":"2013-08-15T10:54:28.705Z","type":"join"}
{"nick":"soluble","date":"2013-08-15T10:58:52.393Z","type":"join"}
{"nick":"soluble","date":"2013-08-15T10:59:05.277Z","type":"part"}
{"nick":"soluble","date":"2013-08-15T10:59:26.913Z","type":"join"}
{"nick":"stalled","reason":"Read error: Connection reset by peer","date":"2013-08-15T12:48:04.412Z","type":"quit"}
{"nick":"stalled","date":"2013-08-15T12:55:21.270Z","type":"join"}
{"nick":"[[zz]]","reason":"Ping timeout: 240 seconds","date":"2013-08-15T12:55:57.443Z","type":"quit"}
{"nick":"[[zz]]","date":"2013-08-15T13:10:01.518Z","type":"join"}
{"nick":"soluble","reason":"Ping timeout: 246 seconds","date":"2013-08-15T14:47:16.927Z","type":"quit"}
{"nick":"c4milo","date":"2013-08-15T14:51:48.032Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2013-08-15T15:10:04.389Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-08-15T15:10:06.505Z","type":"quit"}
{"nick":"spolu","date":"2013-08-15T15:18:03.373Z","type":"join"}
{"nick":"jmar777","date":"2013-08-15T15:27:40.639Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2013-08-15T15:31:37.307Z","type":"quit"}
{"nick":"muelli","reason":"Remote host closed the connection","date":"2013-08-15T15:35:44.820Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-08-15T16:15:17.362Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 245 seconds","date":"2013-08-15T16:19:35.124Z","type":"quit"}
{"nick":"stalled","reason":"Ping timeout: 260 seconds","date":"2013-08-15T16:19:36.002Z","type":"quit"}
{"nick":"[[zz]]","reason":"Ping timeout: 240 seconds","date":"2013-08-15T16:23:23.666Z","type":"quit"}
{"nick":"stalled","date":"2013-08-15T16:32:39.607Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-08-15T16:37:14.645Z","type":"join"}
{"nick":"[[zz]]","date":"2013-08-15T16:38:15.642Z","type":"join"}
{"nick":"c4milo","date":"2013-08-15T16:42:42.563Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-08-15T17:24:34.830Z","type":"quit"}
{"nick":"spolu","reason":"Ping timeout: 268 seconds","date":"2013-08-15T17:37:12.079Z","type":"quit"}
{"nick":"c4milo","date":"2013-08-15T18:26:06.077Z","type":"join"}
{"nick":"rickytaylor26_","new_nick":"ricky26","date":"2013-08-15T19:02:34.572Z","type":"nick"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-08-15T19:28:11.568Z","type":"quit"}
{"nick":"c4milo","date":"2013-08-15T19:36:41.762Z","type":"join"}
{"nick":"mraleph","date":"2013-08-15T19:38:50.332Z","type":"join"}
{"nick":"_bga","date":"2013-08-15T19:39:39.032Z","type":"join"}
{"nick":"_bga","message":"here","date":"2013-08-15T19:39:46.983Z","type":"message"}
{"nick":"mraleph","message":"hi","date":"2013-08-15T19:41:40.638Z","type":"message"}
{"nick":"_bga","message":"mraleph anyway i guess that checking overflow after each op is too expensive","date":"2013-08-15T19:41:44.541Z","type":"message"}
{"nick":"mraleph","message":"no, it is not ","date":"2013-08-15T19:41:52.285Z","type":"message"}
{"nick":"_bga","message":"i need benchmark :)","date":"2013-08-15T19:42:45.808Z","type":"message"}
{"nick":"mraleph","message":"it can matters only on a very tight stuff, which never happens in reality. and it can be worked around by sprinkling enough |0 here and there.","date":"2013-08-15T19:42:46.208Z","type":"message"}
{"nick":"_bga","message":"as in asm.js","date":"2013-08-15T19:43:08.766Z","type":"message"}
{"nick":"mraleph","message":"CPUs are very good at predicting branches.","date":"2013-08-15T19:43:14.639Z","type":"message"}
{"nick":"mraleph","message":"as in normal javascript","date":"2013-08-15T19:43:18.900Z","type":"message"}
{"nick":"mraleph","message":"but yes reasoning is the same as in asm.js","date":"2013-08-15T19:43:56.326Z","type":"message"}
{"nick":"mraleph","message":"except that you don't need no asm.js --- ability to eliminate overflow checks here and there just follows from the pure JS spec","date":"2013-08-15T19:44:32.852Z","type":"message"}
{"nick":"mraleph","message":"regarding your case with for (var i = x; i < y; i += z)","date":"2013-08-15T19:45:07.130Z","type":"message"}
{"nick":"mraleph","message":"usually if range for x and y is unknown you would have an overflow check on i += z.","date":"2013-08-15T19:45:59.640Z","type":"message"}
{"nick":"mraleph","message":"the code would look like add eax, ebx; jc ->deopt;","date":"2013-08-15T19:46:18.419Z","type":"message"}
{"nick":"mraleph","message":"not very tragic cost, really.","date":"2013-08-15T19:46:32.283Z","type":"message"}
{"nick":"_bga","message":"so v8 eliminates overflow check if i have explicit | 0","date":"2013-08-15T19:46:50.836Z","type":"message"}
{"nick":"mraleph","message":"i = (i + z) | 0 should have no overflow check.","date":"2013-08-15T19:47:16.649Z","type":"message"}
{"nick":"mraleph","message":"in case of z = 1 quite often you can actually derive that i would not overflow because you usually already know that  x and y are int32 (or int31 even) and thus i + 1 will never overflow. it can go at most to y, which is bounded.","date":"2013-08-15T19:49:44.734Z","type":"message"}
{"nick":"mraleph","message":"and the case of z = 1 is quite common.","date":"2013-08-15T19:49:58.150Z","type":"message"}
{"nick":"_bga","message":"mraleph and. Is Math.floor(x) casts int x to double?","date":"2013-08-15T19:50:00.296Z","type":"message"}
{"nick":"mraleph","message":"back in the day in V8 math.floor only supported double to int behaviour for Math.floor","date":"2013-08-15T19:50:43.388Z","type":"message"}
{"nick":"mraleph","message":"in optimized code I mean","date":"2013-08-15T19:51:01.833Z","type":"message"}
{"nick":"mraleph","message":"so in optimized code x was expected to be double and the result was expected to be int.","date":"2013-08-15T19:51:38.621Z","type":"message"}
{"nick":"mraleph","message":"if you did Math.floor on smth that did not fit into int you get deoptimization","date":"2013-08-15T19:51:53.780Z","type":"message"}
{"nick":"mraleph","message":"if you did Math.floor on something that is known to be an int32 than Math.floor just goes away","date":"2013-08-15T19:52:12.691Z","type":"message"}
{"nick":"mraleph","message":"optimizer would replace Math.floor(x) with x if x is int32.","date":"2013-08-15T19:52:29.159Z","type":"message"}
{"nick":"mraleph","message":"cause that makes perfect sense not to do redundant stuff :-)","date":"2013-08-15T19:52:44.970Z","type":"message"}
{"nick":"mraleph","message":"[I can switch to Russian if you prefer, _bga]","date":"2013-08-15T19:53:20.595Z","type":"message"}
{"nick":"_bga","message":"i just want robust way to cast int to double. Will benchmark tomorrow","date":"2013-08-15T19:53:31.842Z","type":"message"}
{"nick":"mraleph","message":"I am not sure what you mean by robust way to cast in to double. ","date":"2013-08-15T19:54:07.986Z","type":"message"}
{"nick":"mraleph","message":"VM prefers to have representation that is most beneficial for the given value.","date":"2013-08-15T19:54:23.074Z","type":"message"}
{"nick":"_bga","message":"i fear thats x - eps + eps just will transformed to x","date":"2013-08-15T19:54:28.497Z","type":"message"}
{"nick":"mraleph","message":"unlikely, as it is not equivalent.","date":"2013-08-15T19:54:48.756Z","type":"message"}
{"nick":"mraleph","message":"-0 - eps + eps is 0","date":"2013-08-15T19:55:04.984Z","type":"message"}
{"nick":"mraleph","message":"not -0","date":"2013-08-15T19:55:06.520Z","type":"message"}
{"nick":"_bga","message":"so it will work","date":"2013-08-15T19:55:20.544Z","type":"message"}
{"nick":"_bga","message":"ok","date":"2013-08-15T19:55:21.431Z","type":"message"}
{"nick":"mraleph","message":"should work","date":"2013-08-15T19:55:43.961Z","type":"message"}
{"nick":"_bga","message":"is v8 uses 64 bits as SM now?","date":"2013-08-15T19:55:45.788Z","type":"message"}
{"nick":"mraleph","message":"no","date":"2013-08-15T19:55:54.015Z","type":"message"}
{"nick":"mraleph","message":"actually if x is known to be integer to optimizer than optimizer could turn x - eps + eps to x but I am pretty sure V8 would.","date":"2013-08-15T19:56:39.048Z","type":"message"}
{"nick":"_bga","message":"so each double will be pointer deref","date":"2013-08-15T19:56:57.986Z","type":"message"}
{"nick":"_bga","message":":/","date":"2013-08-15T19:56:59.003Z","type":"message"}
{"nick":"bnoordhuis","message":"v8 can sometimes unbox them","date":"2013-08-15T19:58:11.322Z","type":"message"}
{"nick":"bnoordhuis","message":"maybe not as often as one would like","date":"2013-08-15T19:58:22.571Z","type":"message"}
{"nick":"mraleph","message":"_bga no","date":"2013-08-15T20:00:39.892Z","type":"message"}
{"nick":"mraleph","message":"doubles that are in the optimized code are unboxed","date":"2013-08-15T20:00:53.275Z","type":"message"}
{"nick":"mraleph","message":"bnoordhuis: often enough for majority of computations","date":"2013-08-15T20:01:10.710Z","type":"message"}
{"nick":"bnoordhuis","message":"mraleph: i was half tongue-in-cheek there :)","date":"2013-08-15T20:01:31.366Z","type":"message"}
{"nick":"mraleph","message":"now even fields use mutable boxes, so situation is almost golden","date":"2013-08-15T20:01:32.011Z","type":"message"}
{"nick":"_bga","message":"m. or i can have code, optimized for ints, or - for doubles","date":"2013-08-15T20:01:34.220Z","type":"message"}
{"nick":"bnoordhuis","message":"we had an issue recently where c++ code that used to return an int now returns a double","date":"2013-08-15T20:01:55.001Z","type":"message"}
{"nick":"bnoordhuis","message":"and the gc went crazy","date":"2013-08-15T20:02:01.457Z","type":"message"}
{"nick":"mraleph","message":"oh yeah that is one of the issues left to address.","date":"2013-08-15T20:02:08.875Z","type":"message"}
{"nick":"mraleph","message":"can be fixed still","date":"2013-08-15T20:02:12.579Z","type":"message"}
{"nick":"bnoordhuis","message":"oh? if you tell me how and if it's not too much work, i'll have a go at it","date":"2013-08-15T20:02:29.793Z","type":"message"}
{"nick":"mraleph","message":"_bga: code will be optimized for the most wide type needed to contain your values, if we are talking about optimizer.","date":"2013-08-15T20:02:55.389Z","type":"message"}
{"nick":"mraleph","message":"bnoordhuis: actually the way I know requires quite a bit of work, requires splitting each optimized code object into two parts: one that does unboxing of inputs and reboxing of the result and the other that does work. and then you connect things to the working part directly from other optimized code objects","date":"2013-08-15T20:04:29.737Z","type":"message"}
{"nick":"mraleph","message":"it's the same approach functional language compilers use to avoid boxing","date":"2013-08-15T20:04:56.291Z","type":"message"}
{"nick":"_bga","message":"assuming thats modern cpus are 64bit - i guess thats forcing computation in pure doubles make code faster in v8","date":"2013-08-15T20:05:00.345Z","type":"message"}
{"nick":"mraleph","message":"(thunks in their case)","date":"2013-08-15T20:05:02.863Z","type":"message"}
{"nick":"mraleph","message":"(aka worker/wrapper transformation)","date":"2013-08-15T20:05:10.473Z","type":"message"}
{"nick":"mraleph","message":"no :-)","date":"2013-08-15T20:05:17.744Z","type":"message"}
{"nick":"mraleph","message":"SSE units while speedy have somewhat higher latency and other issues.","date":"2013-08-15T20:05:59.480Z","type":"message"}
{"nick":"bnoordhuis","message":"mraleph: ah, okay. that doesn't sound like something i could get done in a day or two","date":"2013-08-15T20:06:08.167Z","type":"message"}
{"nick":"mraleph","message":"yeah, I guess it would take a couple of months to get it right :-/","date":"2013-08-15T20:06:25.495Z","type":"message"}
{"nick":"mraleph1","date":"2013-08-15T21:38:07.120Z","type":"join"}
{"nick":"mraleph","reason":"Read error: Connection reset by peer","date":"2013-08-15T21:38:52.074Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2013-08-15T21:51:33.529Z","type":"quit"}
{"nick":"seventh","date":"2013-08-15T21:51:54.408Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2013-08-15T21:58:47.764Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-08-15T22:07:36.340Z","type":"join"}
{"nick":"juanjosanchez","date":"2013-08-15T22:29:06.589Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-08-15T22:31:06.308Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2013-08-15T22:31:28.398Z","type":"join"}
{"nick":"c4milo","date":"2013-08-15T23:01:20.302Z","type":"join"}
{"nick":"seventh","reason":"Ping timeout: 240 seconds","date":"2013-08-15T23:25:36.351Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-08-15T23:51:56.406Z","type":"quit"}
