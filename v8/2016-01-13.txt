{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-01-13T00:11:18.564Z","type":"quit"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-01-13T00:18:55.469Z","type":"quit"}
{"nick":"evanlucas","date":"2016-01-13T00:19:21.648Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-13T00:25:49.321Z","type":"quit"}
{"nick":"jgi","date":"2016-01-13T00:27:14.922Z","type":"join"}
{"nick":"plutoniix","date":"2016-01-13T00:33:38.498Z","type":"join"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-01-13T00:37:44.018Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T00:47:02.338Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-13T00:48:12.251Z","type":"join"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2016-01-13T00:53:38.290Z","type":"quit"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-13T01:33:15.407Z","type":"quit"}
{"nick":"bobmcw","date":"2016-01-13T01:38:09.288Z","type":"join"}
{"nick":"bobmcw","reason":"Changing host","date":"2016-01-13T01:38:09.484Z","type":"quit"}
{"nick":"bobmcw","date":"2016-01-13T01:38:09.484Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 276 seconds","date":"2016-01-13T01:45:08.140Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T02:10:08.217Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-13T02:16:12.667Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-13T02:26:17.787Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T02:34:52.822Z","type":"quit"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-01-13T03:17:04.064Z","type":"quit"}
{"nick":"evanlucas","date":"2016-01-13T03:18:16.992Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T03:28:43.903Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T03:51:54.771Z","type":"quit"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-01-13T04:44:57.844Z","type":"quit"}
{"nick":"plutoniix","date":"2016-01-13T04:53:43.966Z","type":"join"}
{"nick":"jgi","date":"2016-01-13T04:56:44.052Z","type":"join"}
{"nick":"xaxxon","date":"2016-01-13T04:57:32.839Z","type":"join"}
{"nick":"evanluca_","date":"2016-01-13T05:09:32.893Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-01-13T05:10:32.909Z","type":"quit"}
{"nick":"dherman","message":"is there any kind of standard way to extract a Function's FunctionTemplate? if not, I'm wondering what would be the best way to stash it away in a private extra field of the function","date":"2016-01-13T05:43:42.056Z","type":"message"}
{"nick":"dherman","message":"ah maybe the `data` parameter of FunctionTemplate::New","date":"2016-01-13T05:44:41.265Z","type":"message"}
{"nick":"caitp","message":"doesn't the api expose an extra_data thing?","date":"2016-01-13T05:44:44.940Z","type":"message"}
{"nick":"dherman","message":"doh","date":"2016-01-13T05:45:35.752Z","type":"message"}
{"nick":"dherman","message":"it does","date":"2016-01-13T05:45:36.798Z","type":"message"}
{"nick":"dherman","message":"but","date":"2016-01-13T05:45:37.294Z","type":"message"}
{"nick":"dherman","message":"it's a Handle<Value>","date":"2016-01-13T05:45:40.897Z","type":"message"}
{"nick":"dherman","message":"not a Handle<Data>","date":"2016-01-13T05:45:43.557Z","type":"message"}
{"nick":"dherman","message":"Template is a subclass of Data but not Value","date":"2016-01-13T05:45:50.616Z","type":"message"}
{"nick":"dherman","message":"guessing I can probably create an extra object that has the FunctionTemplate as a secret field...","date":"2016-01-13T05:46:32.223Z","type":"message"}
{"nick":"dherman","action":"hasn't learned all the right v8 terminology for things yet","date":"2016-01-13T05:46:47.699Z","type":"action"}
{"nick":"caitp","message":"what do you need the template for?","date":"2016-01-13T05:52:21.578Z","type":"message"}
{"nick":"caitp","message":"i mean, the template associated with an object","date":"2016-01-13T05:52:41.937Z","type":"message"}
{"nick":"dherman","message":"I need the FunctionTemplate","date":"2016-01-13T05:53:27.322Z","type":"message"}
{"nick":"dherman","message":"it's a slightly long story... I'll try to keep it short","date":"2016-01-13T05:53:37.198Z","type":"message"}
{"nick":"dherman","message":"I'm working on Neon, a framework for building Node addons with Rust","date":"2016-01-13T05:54:02.126Z","type":"message"}
{"nick":"dherman","message":"what I'm working on right now is a safe mechanism for creating custom classes that wrap Rust data","date":"2016-01-13T05:54:24.637Z","type":"message"}
{"nick":"dherman","message":"in the implementation I need the ability to get access to the FunctionTemplate so I can do template->HasInstance on the `this` binding","date":"2016-01-13T05:55:01.904Z","type":"message"}
{"nick":"dherman","message":"when I create the class constructor function, I'd like to just stash the FunctionTemplate as the optional `data` parameter to FunctionTemplate#New","date":"2016-01-13T05:56:17.182Z","type":"message"}
{"nick":"dherman","message":"but the `data` parameter has to be a Handle<Value> so that doesn't work","date":"2016-01-13T05:56:35.572Z","type":"message"}
{"nick":"dherman","message":"so what I was saying ^^ was that maybe I could allocate an object whose only purpose is to have an internal field that points to the FunctionTemplate, and use that object as the `data` parameter","date":"2016-01-13T05:57:25.849Z","type":"message"}
{"nick":"dherman","message":"unsure if I'm doing things stupidly... I'm still feeling my way around the v8 api","date":"2016-01-13T05:57:48.167Z","type":"message"}
{"nick":"caitp","message":"ah I see","date":"2016-01-13T06:03:29.036Z","type":"message"}
{"nick":"caitp","message":"I think you could use v8::External for that","date":"2016-01-13T06:04:42.573Z","type":"message"}
{"nick":"caitp","message":"so long as you have some way to safely keep the template alive","date":"2016-01-13T06:04:59.984Z","type":"message"}
{"nick":"caitp","message":"chromium does some gymnastics like that I think, but I haven't gone over the whole thing","date":"2016-01-13T06:05:20.694Z","type":"message"}
{"nick":"dherman","message":"according to the docs the template should live for the lifetime of the context","date":"2016-01-13T06:05:30.183Z","type":"message"}
{"nick":"caitp","message":"you don't need a context to get a Template, though","date":"2016-01-13T06:06:11.473Z","type":"message"}
{"nick":"dherman","message":"hm, maybe I'm misunderstanding","date":"2016-01-13T06:06:26.213Z","type":"message"}
{"nick":"dherman","message":"I'm not sure why I need to keep the template alive?","date":"2016-01-13T06:06:36.203Z","type":"message"}
{"nick":"caitp","message":"well, if you want to reference it later","date":"2016-01-13T06:07:04.380Z","type":"message"}
{"nick":"caitp","message":"under the hood it's basically just an array with information about properties to add to new objects it creates, and that stuff can disappear if it's not retained","date":"2016-01-13T06:07:52.212Z","type":"message"}
{"nick":"dherman","message":"but isn't it true that the FunctionTemplate itself should be retained at least as long as one of the functions it created?","date":"2016-01-13T06:08:34.893Z","type":"message"}
{"nick":"xaxxon","message":"can I use a functiontemplate to create an object the same way it would be created if I had it bound to javascript and new FunctionName was called?","date":"2016-01-13T06:08:35.340Z","type":"message"}
{"nick":"xaxxon","message":"I'm trying functmpl->InstanceTemplate->newinstance but when I try to set the internal object, it complains that it's out of bounds","date":"2016-01-13T06:09:40.101Z","type":"message"}
{"nick":"caitp","message":"dherman: I don't think so, afaik they don't retain any reference to the template","date":"2016-01-13T06:11:06.010Z","type":"message"}
{"nick":"xaxxon","message":"but, I think I'm in a similar boat as dherman which is I don't really understand what templates are used for at \"runtime\"","date":"2016-01-13T06:11:07.943Z","type":"message"}
{"nick":"dherman","message":"huh","date":"2016-01-13T06:11:22.155Z","type":"message"}
{"nick":"caitp","message":"i'm wrong","date":"2016-01-13T06:11:43.096Z","type":"message"}
{"nick":"dherman","message":"phew! :)","date":"2016-01-13T06:11:59.233Z","type":"message"}
{"nick":"caitp","message":"so, I guess the template is retained","date":"2016-01-13T06:12:01.580Z","type":"message"}
{"nick":"dherman","message":"ok","date":"2016-01-13T06:12:56.182Z","type":"message"}
{"nick":"dherman","message":"looking at v8::External... the thing that worries me here is that I don't know what pointer I can use that's actually stable, since the GC can move things","date":"2016-01-13T06:13:45.906Z","type":"message"}
{"nick":"dherman","message":"just because the FunctionTemplate is retained doesn't mean it won't be moved","date":"2016-01-13T06:13:55.094Z","type":"message"}
{"nick":"xaxxon","message":"dherman, isn't that why you wrap it in a local/persistent/global so the GC knows to keep it updated?","date":"2016-01-13T06:14:45.503Z","type":"message"}
{"nick":"xaxxon","message":"(I'm asking as much as suggesting)","date":"2016-01-13T06:14:53.822Z","type":"message"}
{"nick":"dherman","message":"yeah I can probably create a persistent, I just need to figure out how to store that in an object","date":"2016-01-13T06:15:20.618Z","type":"message"}
{"nick":"dherman","message":"I'm not sure External is the right thing as opposed to ObjectTemplate but caitp knows better than me :)","date":"2016-01-13T06:15:35.690Z","type":"message"}
{"nick":"xaxxon","message":"I make my persistents copyable... but I don't know the side effects of that","date":"2016-01-13T06:15:50.572Z","type":"message"}
{"nick":"xaxxon","message":"but it seems to work for me","date":"2016-01-13T06:15:58.066Z","type":"message"}
{"nick":"dherman","message":"well it warns against that :(","date":"2016-01-13T06:16:03.950Z","type":"message"}
{"nick":"dherman","message":"so many sharp edges...","date":"2016-01-13T06:16:15.799Z","type":"message"}
{"nick":"caitp","message":"the node guys, or maybe jochen or adam if they get time, are more well versed in the api","date":"2016-01-13T06:17:54.105Z","type":"message"}
{"nick":"dherman","message":"kk","date":"2016-01-13T06:18:03.411Z","type":"message"}
{"nick":"dherman","message":"yeah I might hassle adam... he hasn't yet told me to buzz off when I've bugged him for help so far :)","date":"2016-01-13T06:18:25.919Z","type":"message"}
{"nick":"xaxxon","message":"is the node channel a good place to ask theese types of questions?","date":"2016-01-13T06:18:34.020Z","type":"message"}
{"nick":"caitp","message":"doubt it","date":"2016-01-13T06:18:41.152Z","type":"message"}
{"nick":"xaxxon","message":"or do those people come here?","date":"2016-01-13T06:18:43.494Z","type":"message"}
{"nick":"xaxxon","message":"oh ok","date":"2016-01-13T06:18:44.511Z","type":"message"}
{"nick":"caitp","message":"I think there would be more people around to answer api questions, if the api were shaped more like JSC's, easier to keep in mind","date":"2016-01-13T06:19:32.084Z","type":"message"}
{"nick":"xaxxon","message":"is there any way to ask if there is a current scope of some type?  like \"is there a current isolate scope?\"","date":"2016-01-13T06:33:34.745Z","type":"message"}
{"nick":"xaxxon","message":"I'm so tempted to write a function that takes a closure and just makes every kind of scope and then calls the function.   so painful to figure out what needs what","date":"2016-01-13T06:44:28.654Z","type":"message"}
{"nick":"ofrobots","date":"2016-01-13T06:48:21.019Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-13T06:49:57.289Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T06:56:55.018Z","type":"quit"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-01-13T07:04:37.116Z","type":"quit"}
{"nick":"plutoniix","date":"2016-01-13T07:13:13.360Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T07:35:16.355Z","type":"join"}
{"nick":"xaxxon","message":"idiom","date":"2016-01-13T07:36:07.619Z","type":"message"}
{"nick":"xaxxon","message":"(oops)","date":"2016-01-13T07:36:19.696Z","type":"message"}
{"nick":"xaxxon","reason":"Quit: This computer has gone to sleep","date":"2016-01-13T07:40:08.355Z","type":"quit"}
{"nick":"rendar","date":"2016-01-13T07:41:09.253Z","type":"join"}
{"nick":"xaxxon","date":"2016-01-13T07:42:58.108Z","type":"join"}
{"nick":"watilde","date":"2016-01-13T07:44:04.165Z","type":"join"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-13T07:46:27.039Z","type":"quit"}
{"nick":"mostynb","date":"2016-01-13T07:55:49.376Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T08:20:22.710Z","type":"quit"}
{"nick":"esas","reason":"Ping timeout: 245 seconds","date":"2016-01-13T08:28:55.041Z","type":"quit"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-01-13T08:59:40.660Z","type":"quit"}
{"nick":"JoWie","date":"2016-01-13T09:03:21.093Z","type":"join"}
{"nick":"jochen__","message":"dherman: FunctionTemplates are context independent.","date":"2016-01-13T09:06:18.062Z","type":"message"}
{"nick":"jochen__","message":"xaxxon: the side effect is that your program randomly crashes","date":"2016-01-13T09:06:39.144Z","type":"message"}
{"nick":"xaxxon","message":"oh","date":"2016-01-13T09:06:54.892Z","type":"message"}
{"nick":"xaxxon","message":"jochen__, are you referring to making copyable persistents?","date":"2016-01-13T09:07:07.960Z","type":"message"}
{"nick":"xaxxon","message":"jochen__, if so, how do you store a handle outside of the flow control where you make something for use later?","date":"2016-01-13T09:07:41.445Z","type":"message"}
{"nick":"jochen__","message":"yes","date":"2016-01-13T09:08:06.585Z","type":"message"}
{"nick":"xaxxon","message":"and then pass it back in to functions when it's needed.. things like a context","date":"2016-01-13T09:08:08.326Z","type":"message"}
{"nick":"jochen__","message":"create a new persistent","date":"2016-01-13T09:08:09.237Z","type":"message"}
{"nick":"jochen__","message":"or move the existing persistent around","date":"2016-01-13T09:08:14.618Z","type":"message"}
{"nick":"jochen__","message":"just don't copy i","date":"2016-01-13T09:08:17.488Z","type":"message"}
{"nick":"jochen__","message":"t","date":"2016-01-13T09:08:18.434Z","type":"message"}
{"nick":"xaxxon","message":"when you say \"move it around\"... do you mean like std::move it?","date":"2016-01-13T09:08:34.911Z","type":"message"}
{"nick":"xaxxon","message":"because obviously having it be non-copyable means you can't just send it in as a normal parameter.. won't compile","date":"2016-01-13T09:09:16.336Z","type":"message"}
{"nick":"jochen__","message":"you can pass a reference to it around","date":"2016-01-13T09:10:28.415Z","type":"message"}
{"nick":"xaxxon","message":"oh ok","date":"2016-01-13T09:10:40.553Z","type":"message"}
{"nick":"xaxxon","message":"a reference to the persistent or a reference to the thing it holds?","date":"2016-01-13T09:10:50.231Z","type":"message"}
{"nick":"xaxxon","message":"errr... I'm guessing the former","date":"2016-01-13T09:11:01.943Z","type":"message"}
{"nick":"jochen__","message":"to the persistent","date":"2016-01-13T09:11:25.846Z","type":"message"}
{"nick":"jochen__","message":"actually, you never get a pointer to the thing it holds in the V8 API","date":"2016-01-13T09:11:36.192Z","type":"message"}
{"nick":"jochen__","message":"operator* on Local<T> is defined as reinterepret_cast<T*>(this)","date":"2016-01-13T09:11:51.587Z","type":"message"}
{"nick":"xaxxon","message":"ok","date":"2016-01-13T09:12:03.138Z","type":"message"}
{"nick":"xaxxon","message":"I'll start getting rid of the copyable stuff.. see how it goes","date":"2016-01-13T09:12:16.372Z","type":"message"}
{"nick":"xaxxon","message":"thank you for your hlep","date":"2016-01-13T09:13:11.927Z","type":"message"}
{"nick":"plutoniix","date":"2016-01-13T09:23:59.093Z","type":"join"}
{"nick":"jochen__","message":"yw :)","date":"2016-01-13T09:37:23.325Z","type":"message"}
{"nick":"davi","date":"2016-01-13T10:00:06.205Z","type":"join"}
{"nick":"davi","reason":"Changing host","date":"2016-01-13T10:00:06.395Z","type":"quit"}
{"nick":"davi","date":"2016-01-13T10:00:06.396Z","type":"join"}
{"nick":"xaxxon","message":"jochen__, if I want to have a class that stores off a context, for example, as a data member.   what type do I make it?   Error messages like this:  error: assigning to 'v8::Object *volatile' from incompatible type 'v8::Primitive *' just means I'm trying to copy an uncopyable persistent, right?","date":"2016-01-13T10:04:20.236Z","type":"message"}
{"nick":"xaxxon","message":"I was trying to use rvalues and such.. but that doesn't seem to be the trick (or I'm doing it wrong)","date":"2016-01-13T10:05:36.597Z","type":"message"}
{"nick":"jochen__","message":"you'd add a v8::Persistent<v8::Context> context_; as member","date":"2016-01-13T10:07:20.320Z","type":"message"}
{"nick":"jochen__","message":"when you set it, just use context_.Reset(isolate, some_local);","date":"2016-01-13T10:07:41.453Z","type":"message"}
{"nick":"xaxxon","message":"oh","date":"2016-01-13T10:07:48.537Z","type":"message"}
{"nick":"xaxxon","message":"I...","date":"2016-01-13T10:07:52.839Z","type":"message"}
{"nick":"xaxxon","message":"oh.. it's in PersistentBase","date":"2016-01-13T10:08:11.500Z","type":"message"}
{"nick":"xaxxon","message":"I was looking at the docs for something like that.   ","date":"2016-01-13T10:08:31.274Z","type":"message"}
{"nick":"xaxxon","message":"jochen__, last thing for tonight.. is there a short description of the difference between persistent and global?","date":"2016-01-13T10:09:08.141Z","type":"message"}
{"nick":"jochen__","message":"Persistent is the deprecated name :)","date":"2016-01-13T10:09:37.416Z","type":"message"}
{"nick":"xaxxon","message":"I thought global was uniquepersistent","date":"2016-01-13T10:09:47.081Z","type":"message"}
{"nick":"jochen__","message":"so actually, use v8::Global<v8::Context> context_","date":"2016-01-13T10:09:47.388Z","type":"message"}
{"nick":"xaxxon","message":"http://v8.paulfryzel.com/docs/master/classv8_1_1_persistent_base.html <== shows them as different classes -- which may be why I'm confused.   ","date":"2016-01-13T10:10:49.997Z","type":"message"}
{"nick":"xaxxon","message":"but ok.. so local and global","date":"2016-01-13T10:11:42.961Z","type":"message"}
{"nick":"davi","reason":"Ping timeout: 250 seconds","date":"2016-01-13T10:13:16.915Z","type":"quit"}
{"nick":"jochen__","message":"yeah, sorry about that","date":"2016-01-13T10:14:14.274Z","type":"message"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-01-13T10:41:31.436Z","type":"quit"}
{"nick":"bobmcw","date":"2016-01-13T10:47:23.674Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 265 seconds","date":"2016-01-13T10:52:37.722Z","type":"quit"}
{"nick":"trungl-bot`","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Test262 - no variants\" on http://build.chromium.org/p/client.v8/builders/V8%20Win64%20-%20debug/builds/7405 \"V8 Win64 - debug\" from e8e4e920d42f0bb2980e4014fc52bbd4af9bd305: vogelheim@chromium.org)","date":"2016-01-13T11:03:26.901Z","type":"message"}
{"nick":"trungl-bot`","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open","date":"2016-01-13T11:04:27.104Z","type":"message"}
{"nick":"chrisdickinson","reason":"Ping timeout: 240 seconds","date":"2016-01-13T11:09:46.426Z","type":"quit"}
{"nick":"chrisdickinson","date":"2016-01-13T11:13:33.621Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: This computer has gone to sleep","date":"2016-01-13T11:20:46.577Z","type":"quit"}
{"nick":"Bob_Gneu","reason":"Read error: Connection reset by peer","date":"2016-01-13T11:30:07.378Z","type":"quit"}
{"nick":"davi","date":"2016-01-13T13:23:52.153Z","type":"join"}
{"nick":"sxa__","reason":"Ping timeout: 246 seconds","date":"2016-01-13T13:27:54.157Z","type":"quit"}
{"nick":"davi","reason":"Remote host closed the connection","date":"2016-01-13T13:36:27.252Z","type":"quit"}
{"nick":"plutoniix","date":"2016-01-13T13:52:01.864Z","type":"join"}
{"nick":"bobmcw","date":"2016-01-13T13:57:10.819Z","type":"join"}
{"nick":"bobmcw","reason":"Changing host","date":"2016-01-13T13:57:11.008Z","type":"quit"}
{"nick":"bobmcw","date":"2016-01-13T13:57:11.009Z","type":"join"}
{"nick":"sxa__","date":"2016-01-13T14:14:09.464Z","type":"join"}
{"nick":"dherman","message":"jochen__: so am I correct in understanding: 1. a FT exists outside of all contexts 2. It can be multiply instantiated in separate contexts 3. A FT is managed by the GC 4. Each Function instance of the FT keeps the FT alive 5. Each Function instance lives as long as its own Context","date":"2016-01-13T15:06:17.736Z","type":"message"}
{"nick":"dherman","message":"?","date":"2016-01-13T15:06:20.938Z","type":"message"}
{"nick":"davi","date":"2016-01-13T15:35:39.985Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T15:40:34.394Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2016-01-13T15:46:34.959Z","type":"quit"}
{"nick":"mostynb","reason":"Quit: -","date":"2016-01-13T15:53:47.331Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T15:59:35.880Z","type":"quit"}
{"nick":"BobGneu","date":"2016-01-13T16:05:51.096Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T16:11:47.243Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-01-13T16:21:50.969Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T16:34:23.928Z","type":"quit"}
{"nick":"evanluca_","reason":"Read error: Connection reset by peer","date":"2016-01-13T16:36:55.337Z","type":"quit"}
{"nick":"evanlucas","date":"2016-01-13T16:37:54.650Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T16:40:35.176Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T16:47:28.041Z","type":"quit"}
{"nick":"jgi","date":"2016-01-13T16:56:33.859Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T16:58:22.934Z","type":"join"}
{"nick":"dherman","message":"aklein: if you have a moment today I had a question for jochen__ ^^ but I suspect he's in munich and it's getting late in the day :)","date":"2016-01-13T17:01:25.755Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T17:04:55.542Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-13T17:05:10.499Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-13T17:20:03.128Z","type":"join"}
{"nick":"BobGneu","reason":"Ping timeout: 276 seconds","date":"2016-01-13T17:21:08.137Z","type":"quit"}
{"nick":"jgi","date":"2016-01-13T17:29:17.430Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T17:31:37.150Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2016-01-13T17:32:36.061Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-13T17:33:43.141Z","type":"join"}
{"nick":"BobGneu","date":"2016-01-13T17:36:19.143Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-13T17:46:53.002Z","type":"quit"}
{"nick":"watilde","date":"2016-01-13T17:50:22.570Z","type":"join"}
{"nick":"xaxxon","date":"2016-01-13T17:54:51.931Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 240 seconds","date":"2016-01-13T17:56:56.055Z","type":"quit"}
{"nick":"BobGneu","reason":"Read error: Connection reset by peer","date":"2016-01-13T17:57:47.063Z","type":"quit"}
{"nick":"dherman","message":"also if anyone could help me understand PersistentBase#MarkIndependent I'd be super grateful","date":"2016-01-13T18:06:46.814Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 276 seconds","date":"2016-01-13T18:07:56.115Z","type":"quit"}
{"nick":"thefourtheye__","reason":"K-Lined","date":"2016-01-13T18:08:35.907Z","type":"quit"}
{"nick":"JoWie","reason":"K-Lined","date":"2016-01-13T18:08:49.042Z","type":"quit"}
{"nick":"oleavr","reason":"K-Lined","date":"2016-01-13T18:08:49.043Z","type":"quit"}
{"nick":"aklein","reason":"K-Lined","date":"2016-01-13T18:08:49.043Z","type":"quit"}
{"nick":"dherman","reason":"K-Lined","date":"2016-01-13T18:08:49.043Z","type":"quit"}
{"nick":"Martijnc","reason":"K-Lined","date":"2016-01-13T18:08:49.044Z","type":"quit"}
{"nick":"iamstef","reason":"K-Lined","date":"2016-01-13T18:08:49.044Z","type":"quit"}
{"nick":"mesch","reason":"K-Lined","date":"2016-01-13T18:08:49.045Z","type":"quit"}
{"nick":"jochen__","reason":"K-Lined","date":"2016-01-13T18:08:49.045Z","type":"quit"}
{"nick":"mikolalysenko","reason":"K-Lined","date":"2016-01-13T18:08:50.025Z","type":"quit"}
{"nick":"eseidel","reason":"K-Lined","date":"2016-01-13T18:08:50.026Z","type":"quit"}
{"nick":"dagobert______","reason":"K-Lined","date":"2016-01-13T18:08:50.403Z","type":"quit"}
{"nick":"mathiasbynens","reason":"K-Lined","date":"2016-01-13T18:08:50.592Z","type":"quit"}
{"nick":"arv","reason":"K-Lined","date":"2016-01-13T18:08:51.967Z","type":"quit"}
{"nick":"ErikCorry_","reason":"K-Lined","date":"2016-01-13T18:08:51.968Z","type":"quit"}
{"nick":"Raynos","reason":"K-Lined","date":"2016-01-13T18:08:51.968Z","type":"quit"}
{"nick":"littledan_","reason":"K-Lined","date":"2016-01-13T18:08:51.971Z","type":"quit"}
{"nick":"wycats","reason":"K-Lined","date":"2016-01-13T18:08:52.347Z","type":"quit"}
{"nick":"sof","reason":"K-Lined","date":"2016-01-13T18:08:52.347Z","type":"quit"}
{"nick":"scottmg","reason":"K-Lined","date":"2016-01-13T18:08:52.348Z","type":"quit"}
{"nick":"mikolalysenko","date":"2016-01-13T18:10:40.275Z","type":"join"}
{"nick":"dherman","date":"2016-01-13T18:12:29.895Z","type":"join"}
{"nick":"caitp","message":"dherman: looks GC related","date":"2016-01-13T18:12:31.256Z","type":"message"}
{"nick":"caitp","message":"so, probably has some impact on whether the object can be moved or collected","date":"2016-01-13T18:13:18.279Z","type":"message"}
{"nick":"oleavr","date":"2016-01-13T18:14:54.795Z","type":"join"}
{"nick":"sof","date":"2016-01-13T18:15:26.842Z","type":"join"}
{"nick":"dherman","message":"caitp: yeah I just can't really make sense of \"Garbage collector is free to ignore any object groups containing this object.\"","date":"2016-01-13T18:15:36.801Z","type":"message"}
{"nick":"iamstef","date":"2016-01-13T18:16:00.570Z","type":"join"}
{"nick":"caitp","message":"it looks like Chrome uses it to do some kind of string interning","date":"2016-01-13T18:16:13.510Z","type":"message"}
{"nick":"caitp","message":"among other things","date":"2016-01-13T18:16:20.305Z","type":"message"}
{"nick":"dherman","message":"node uses it for ObjectWrap","date":"2016-01-13T18:16:41.756Z","type":"message"}
{"nick":"dherman","message":"but that doesn't really tell me much","date":"2016-01-13T18:16:50.731Z","type":"message"}
{"nick":"bnoordhuis","date":"2016-01-13T18:17:13.465Z","type":"join"}
{"nick":"dherman","message":"bnoordhuis: you might know -- what is MarkIndependent() doing (in particular in ObjectWrap)?","date":"2016-01-13T18:17:31.881Z","type":"message"}
{"nick":"dherman","message":"PersistentBase#MarkIndependent","date":"2016-01-13T18:17:38.161Z","type":"message"}
{"nick":"arv","date":"2016-01-13T18:17:42.358Z","type":"join"}
{"nick":"wycats","date":"2016-01-13T18:18:41.145Z","type":"join"}
{"nick":"Raynos","date":"2016-01-13T18:18:53.612Z","type":"join"}
{"nick":"mathiasbynens","date":"2016-01-13T18:19:02.237Z","type":"join"}
{"nick":"aklein","date":"2016-01-13T18:19:03.318Z","type":"join"}
{"nick":"eseidel","date":"2016-01-13T18:19:04.772Z","type":"join"}
{"nick":"caitp","message":"i could probably draw it on a blackboard, but it's hard to describe it based on my reading of the code verbally :(","date":"2016-01-13T18:19:41.637Z","type":"message"}
{"nick":"caitp","message":"kyle huey did a pretty good job of explaining the pattern in gecko","date":"2016-01-13T18:19:51.578Z","type":"message"}
{"nick":"dherman","message":"caitp: is there a writeup or a video?","date":"2016-01-13T18:20:03.251Z","type":"message"}
{"nick":"caitp","message":"I dunno, it was a few years ago","date":"2016-01-13T18:20:10.976Z","type":"message"}
{"nick":"littledan_","date":"2016-01-13T18:21:57.905Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T18:22:00.499Z","type":"join"}
{"nick":"thefourtheye__","date":"2016-01-13T18:23:07.005Z","type":"join"}
{"nick":"mesch","date":"2016-01-13T18:24:03.883Z","type":"join"}
{"nick":"ofrobots","reason":"Ping timeout: 246 seconds","date":"2016-01-13T18:26:26.866Z","type":"quit"}
{"nick":"dagobert______","date":"2016-01-13T18:26:52.023Z","type":"join"}
{"nick":"ErikCorry_","date":"2016-01-13T18:27:01.882Z","type":"join"}
{"nick":"Martijnc","date":"2016-01-13T18:27:26.863Z","type":"join"}
{"nick":"scottmg","date":"2016-01-13T18:28:20.451Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T18:29:40.210Z","type":"join"}
{"nick":"jgi","date":"2016-01-13T18:30:45.232Z","type":"join"}
{"nick":"jochen__","date":"2016-01-13T18:32:00.442Z","type":"join"}
{"nick":"JoWie","date":"2016-01-13T18:34:43.978Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T18:39:06.858Z","type":"quit"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-13T18:44:54.872Z","type":"quit"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-01-13T18:47:17.918Z","type":"quit"}
{"nick":"plutoniix","date":"2016-01-13T18:50:52.994Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T18:51:11.946Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 272 seconds","date":"2016-01-13T18:54:26.485Z","type":"quit"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-01-13T18:54:44.025Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-13T18:56:04.112Z","type":"join"}
{"nick":"watilde","date":"2016-01-13T18:56:57.524Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T19:07:02.876Z","type":"quit"}
{"nick":"C-Man","date":"2016-01-13T19:33:35.884Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T19:41:51.301Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-01-13T19:42:19.895Z","type":"quit"}
{"nick":"aklein","message":"dherman: to your question for jochen__, yes, that's right","date":"2016-01-13T19:42:25.917Z","type":"message"}
{"nick":"rendar","reason":"Ping timeout: 272 seconds","date":"2016-01-13T19:42:34.496Z","type":"quit"}
{"nick":"aklein","message":"dherman: well, except for (5)","date":"2016-01-13T19:42:44.569Z","type":"message"}
{"nick":"dherman","message":"Oh?","date":"2016-01-13T19:42:58.188Z","type":"message"}
{"nick":"aklein","message":"dherman: the Function doesn't itself have any special lifetime, it lives as long as there is some reference to it","date":"2016-01-13T19:43:01.141Z","type":"message"}
{"nick":"aklein","message":"but it does keep its Context alive","date":"2016-01-13T19:43:05.892Z","type":"message"}
{"nick":"dherman","message":"The embedders' guide says the function lives as long as the context","date":"2016-01-13T19:43:16.188Z","type":"message"}
{"nick":"aklein","message":"hmm","date":"2016-01-13T19:43:19.604Z","type":"message"}
{"nick":"aklein","message":"that seems weird","date":"2016-01-13T19:43:21.770Z","type":"message"}
{"nick":"dherman","message":"Lies eh? ;)","date":"2016-01-13T19:43:25.185Z","type":"message"}
{"nick":"aklein","message":"if that's what the embedder's guide says, there must be something to it, but I don't know where that reference comes from...let me take a look at the code","date":"2016-01-13T19:44:06.906Z","type":"message"}
{"nick":"dherman","message":"Maybe it was in API docs actually","date":"2016-01-13T19:45:08.807Z","type":"message"}
{"nick":"dherman","message":"Searching","date":"2016-01-13T19:45:10.619Z","type":"message"}
{"nick":"aklein","message":"dherman: ah, I think this is because FunctionTemplate::New only creates a single Function instance for a given context","date":"2016-01-13T19:45:38.763Z","type":"message"}
{"nick":"aklein","message":"it caches that somewhere","date":"2016-01-13T19:45:42.014Z","type":"message"}
{"nick":"dherman","message":"There can only be one function created from a FunctionTemplate in a context. The lifetime of the created function is equal to the lifetime of the context. So in case the embedder needs to create temporary functions that can be collected using Scripts is preferred.","date":"2016-01-13T19:46:28.570Z","type":"message"}
{"nick":"aklein","message":"ok, so (5) is right too","date":"2016-01-13T19:46:40.825Z","type":"message"}
{"nick":"dherman","message":"^^ http://izs.me/v8-docs/classv8_1_1FunctionTemplate.html","date":"2016-01-13T19:46:44.086Z","type":"message"}
{"nick":"dherman","message":"Ok :)","date":"2016-01-13T19:46:52.963Z","type":"message"}
{"nick":"dherman","message":"aklein: any hints about MakeIndependent?","date":"2016-01-13T19:47:23.383Z","type":"message"}
{"nick":"dherman","message":"Mark*","date":"2016-01-13T19:47:32.456Z","type":"message"}
{"nick":"aklein","message":"dherman: my initial answer would be \"don't worry about it\". are you doing anything special with object grouping?","date":"2016-01-13T19:48:23.229Z","type":"message"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-01-13T19:48:35.817Z","type":"quit"}
{"nick":"rendar","date":"2016-01-13T19:48:37.849Z","type":"join"}
{"nick":"dherman","message":"no, nor do I know what that is :)","date":"2016-01-13T19:48:40.613Z","type":"message"}
{"nick":"dherman","message":"But node's ObjectWrap is a similar abstraction to what I'm doing and uses it, which is why I was nervous I needed to know","date":"2016-01-13T19:49:08.820Z","type":"message"}
{"nick":"aklein","message":"interesting","date":"2016-01-13T19:49:18.617Z","type":"message"}
{"nick":"aklein","message":"I wonder if node's just cargo-culting something","date":"2016-01-13T19:50:40.251Z","type":"message"}
{"nick":"dherman","message":"https://github.com/nodejs/node/blob/master/src/node_object_wrap.h#L65","date":"2016-01-13T19:50:58.932Z","type":"message"}
{"nick":"dherman","message":"Could be!","date":"2016-01-13T19:51:01.883Z","type":"message"}
{"nick":"dherman","message":"I'll ignore until things crash ;P","date":"2016-01-13T19:51:10.962Z","type":"message"}
{"nick":"aklein","message":"yeah, I don't really think it should be needed","date":"2016-01-13T19:52:11.090Z","type":"message"}
{"nick":"aklein","message":"in the basic case","date":"2016-01-13T19:52:15.568Z","type":"message"}
{"nick":"aklein","message":"I assume you're just trying to keep your FunctionTemplate alive?","date":"2016-01-13T19:52:24.875Z","type":"message"}
{"nick":"watilde","date":"2016-01-13T19:53:09.122Z","type":"join"}
{"nick":"dherman","message":"I'm just trying to keep a weak reference to it","date":"2016-01-13T19:53:10.382Z","type":"message"}
{"nick":"dherman","message":"Not even trying to keep it alive","date":"2016-01-13T19:53:15.097Z","type":"message"}
{"nick":"dherman","message":"Its instance will keep it alive","date":"2016-01-13T19:53:25.634Z","type":"message"}
{"nick":"aklein","message":"right, right","date":"2016-01-13T19:53:35.871Z","type":"message"}
{"nick":"bnoordhuis","date":"2016-01-13T19:54:04.946Z","type":"join"}
{"nick":"caitp","message":"that caught me by surprise, I didn't realize maps held onto the template","date":"2016-01-13T19:54:16.450Z","type":"message"}
{"nick":"dherman","message":"Maps?","date":"2016-01-13T19:54:40.928Z","type":"message"}
{"nick":"aklein","message":"dherman: 3.5 years ago MarkIndependent was required to let Persistents be cleared during minor GCs","date":"2016-01-13T19:55:06.276Z","type":"message"}
{"nick":"aklein","message":"https://bugs.webkit.org/show_bug.cgi?id=91251","date":"2016-01-13T19:55:12.643Z","type":"message"}
{"nick":"aklein","message":"maybe still true?","date":"2016-01-13T19:55:17.203Z","type":"message"}
{"nick":"aklein","message":"seems like a micro-opt","date":"2016-01-13T19:55:20.577Z","type":"message"}
{"nick":"aklein","message":"unless you have a _lot_ of short-lived FunctionTemplates :)","date":"2016-01-13T19:55:33.130Z","type":"message"}
{"nick":"aklein","message":"dherman: depending on what you're doing, you could also use Function::New(), which doesn't do any caching (and doesn't require holding on to a FunctionTemplate)","date":"2016-01-13T19:56:12.790Z","type":"message"}
{"nick":"dherman","message":"Nah I want FT","date":"2016-01-13T19:59:18.818Z","type":"message"}
{"nick":"dherman","message":"Many thx!","date":"2016-01-13T19:59:37.816Z","type":"message"}
{"nick":"caitp","message":"it sounds like this is about generating bindings for servo or something","date":"2016-01-13T19:59:52.325Z","type":"message"}
{"nick":"dherman","message":"Ah, no, this project is independent of servo","date":"2016-01-13T20:00:27.391Z","type":"message"}
{"nick":"caitp","message":"ah","date":"2016-01-13T20:00:32.312Z","type":"message"}
{"nick":"dherman","message":"This is for node programmers to be able to use Rust to write native modules","date":"2016-01-13T20:00:43.852Z","type":"message"}
{"nick":"caitp","message":"oh, that's cool","date":"2016-01-13T20:00:56.173Z","type":"message"}
{"nick":"dherman","message":"My first personal big rust project, I'm having a blast","date":"2016-01-13T20:01:22.319Z","type":"message"}
{"nick":"ofrobots","date":"2016-01-13T20:18:29.136Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T20:41:17.541Z","type":"quit"}
{"nick":"trungl-bot`","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Check\" on http://build.chromium.org/p/client.v8/builders/V8%20Linux%20-%20nosnap%20-%20debug/builds/4738 \"V8 Linux - nosnap - debug\" from c52f5ced4e600a57c02301f2936b80f086613985: titzer@chromium.org)","date":"2016-01-13T20:53:19.101Z","type":"message"}
{"nick":"trungl-bot`","message":"\u00033\u0002Tree opened\u000f by adamk@chromium.org (:aklein): Tree is open","date":"2016-01-13T21:02:22.314Z","type":"message"}
{"nick":"aklein","message":"caitp: based on your mail about Object.values/entries, are you looking for random v8 work to do? I'd be happy for a hand with the Function.name stuff if you're looking for small tasks...","date":"2016-01-13T21:09:10.515Z","type":"message"}
{"nick":"caitp","message":"yeah, that would be great","date":"2016-01-13T21:09:58.133Z","type":"message"}
{"nick":"aklein","message":"also I think you have more of how assignment works in your head right now","date":"2016-01-13T21:10:13.619Z","type":"message"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-13T21:11:11.834Z","type":"quit"}
{"nick":"aklein","message":"the two still-missing static cases I'm aware of are in AssignmentExpression and in AssignmentProperty (defaults in binding and assignment patterns)","date":"2016-01-13T21:11:13.838Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2016-01-13T21:13:35.893Z","type":"quit"}
{"nick":"caitp","message":"CoverInitializedName should be simple enough","date":"2016-01-13T21:19:44.818Z","type":"message"}
{"nick":"caitp","message":"are those IsIdentifierRef predicates for those steps new? I don't remember those there before","date":"2016-01-13T21:21:20.396Z","type":"message"}
{"nick":"caitp","message":"because it looks like the only slow case left are computed property name MethodDefinitions","date":"2016-01-13T21:22:34.063Z","type":"message"}
{"nick":"caitp","message":"well computed property names in general","date":"2016-01-13T21:24:32.826Z","type":"message"}
{"nick":"caitp","message":"ahh nope, I guess there's still the AssignmentProperty slow case","date":"2016-01-13T21:25:41.966Z","type":"message"}
{"nick":"aklein","message":"caitp: have a link to what you mean by \"AssignmentProperty slow case\"?","date":"2016-01-13T21:36:12.451Z","type":"message"}
{"nick":"aklein","message":"computed property names were the only places I was aware of where we don't know at parse time what the name is","date":"2016-01-13T21:36:37.256Z","type":"message"}
{"nick":"caitp","message":"i was probably misreading it","date":"2016-01-13T21:37:40.625Z","type":"message"}
{"nick":"caitp","message":"the IsIdentifierRef predicate is pretty ubiquitous","date":"2016-01-13T21:37:52.605Z","type":"message"}
{"nick":"ofrobots","date":"2016-01-13T21:42:56.124Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: This computer has gone to sleep","date":"2016-01-13T21:44:34.480Z","type":"quit"}
{"nick":"davi","date":"2016-01-13T21:46:36.297Z","type":"join"}
{"nick":"davi","reason":"Changing host","date":"2016-01-13T21:46:36.507Z","type":"quit"}
{"nick":"davi","date":"2016-01-13T21:46:36.507Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-01-13T21:47:39.823Z","type":"join"}
{"nick":"jgi","date":"2016-01-13T21:47:55.370Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 265 seconds","date":"2016-01-13T21:52:22.676Z","type":"quit"}
{"nick":"xaxxon","date":"2016-01-13T21:53:19.010Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 250 seconds","date":"2016-01-13T21:53:32.948Z","type":"quit"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-01-13T22:03:38.496Z","type":"quit"}
{"nick":"dherman","message":"hm, so jochen__ said earlier that Persistent is deprecated and you should always use Global, but nan is treating Global as UniquePersistent","date":"2016-01-13T22:05:45.790Z","type":"message"}
{"nick":"dherman","message":"yeah, using Nan::Persistent works for my case. guess I'll just hope that isn't going to disappear :/","date":"2016-01-13T22:08:42.501Z","type":"message"}
{"nick":"bnoordhuis","date":"2016-01-13T22:17:52.853Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 246 seconds","date":"2016-01-13T22:25:08.770Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2016-01-13T22:31:36.845Z","type":"join"}
{"nick":"esas","date":"2016-01-13T22:36:23.036Z","type":"join"}
{"nick":"aklein","message":"caitp: I noticed while reading the tests again the computed property names provide a sad test case: if the computed property of a static class method ends up as \"name\", we need to _not_ overwrite it. I feel like we already have another bug about this somewhere...","date":"2016-01-13T22:44:31.367Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-01-13T22:46:16.864Z","type":"quit"}
{"nick":"aklein","message":"maybe this already works","date":"2016-01-13T22:47:48.388Z","type":"message"}
{"nick":"aklein","message":"d8 -e 'var n = \"name\"; class Foo { static [n]() { return 42 } }; print(typeof Foo.name)'","date":"2016-01-13T22:48:00.011Z","type":"message"}
{"nick":"aklein","message":"that prints function","date":"2016-01-13T22:48:07.273Z","type":"message"}
{"nick":"bnoordhuis","date":"2016-01-13T22:56:29.007Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T22:59:12.123Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-01-13T23:00:53.242Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 255 seconds","date":"2016-01-13T23:01:12.024Z","type":"quit"}
{"nick":"ofrobots","date":"2016-01-13T23:02:24.247Z","type":"join"}
{"nick":"bobmcw","date":"2016-01-13T23:04:04.131Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-01-13T23:06:27.079Z","type":"quit"}
{"nick":"bobmcw_","date":"2016-01-13T23:06:44.846Z","type":"join"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-01-13T23:07:37.657Z","type":"quit"}
{"nick":"bobmcw_","reason":"Remote host closed the connection","date":"2016-01-13T23:07:38.452Z","type":"quit"}
{"nick":"BobGneu","date":"2016-01-13T23:15:57.461Z","type":"join"}
{"nick":"ofrobots","date":"2016-01-13T23:18:34.144Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-13T23:43:08.494Z","type":"quit"}
{"nick":"jgi","date":"2016-01-13T23:44:09.870Z","type":"join"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2016-01-13T23:49:25.328Z","type":"quit"}
{"nick":"JoWie","reason":"Quit: Connection closed for inactivity","date":"2016-01-13T23:59:42.350Z","type":"quit"}
