{"nick":"cha0s","reason":"Quit: Viva La Revoluciï¿½n!","date":"2013-05-20T01:38:19.088Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-05-20T02:46:53.278Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-05-20T04:14:50.346Z","type":"quit"}
{"nick":"[[zz]]","reason":"Ping timeout: 246 seconds","date":"2013-05-20T04:57:49.765Z","type":"quit"}
{"nick":"[[zz]]","date":"2013-05-20T05:10:55.787Z","type":"join"}
{"nick":"Vbitz","reason":"Quit: Computer has gone to sleep.","date":"2013-05-20T07:32:01.952Z","type":"quit"}
{"nick":"jewel","date":"2013-05-20T07:52:35.076Z","type":"join"}
{"nick":"jewel","reason":"Remote host closed the connection","date":"2013-05-20T07:55:20.398Z","type":"quit"}
{"nick":"Net147","date":"2013-05-20T09:08:59.759Z","type":"join"}
{"nick":"C-Man","date":"2013-05-20T09:51:07.129Z","type":"join"}
{"nick":"Vbitz","date":"2013-05-20T11:21:52.980Z","type":"join"}
{"nick":"Vbitz","reason":"Max SendQ exceeded","date":"2013-05-20T11:21:58.823Z","type":"quit"}
{"nick":"Vbitz","date":"2013-05-20T11:22:30.130Z","type":"join"}
{"nick":"C-Man","reason":"Ping timeout: 256 seconds","date":"2013-05-20T11:23:55.593Z","type":"quit"}
{"nick":"C-Man","date":"2013-05-20T11:24:28.040Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-05-20T11:29:12.618Z","type":"join"}
{"nick":"Net147","reason":"Quit:  HydraIRC -> http://www.hydrairc.com <- In tests, 0x09 out of 0x0A l33t h4x0rz prefer it :)","date":"2013-05-20T13:33:41.509Z","type":"quit"}
{"nick":"c4milo","date":"2013-05-20T13:59:41.258Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2013-05-20T15:35:04.391Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-05-20T17:37:02.495Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-05-20T18:30:32.479Z","type":"quit"}
{"nick":"soluble","date":"2013-05-20T18:49:49.088Z","type":"join"}
{"nick":"soluble","message":"Can someone explain to me how exactly < operator works when evaluating this expression [1] < [2]. I'd wish to understand why it evaluates to false as per ecma specification. Here http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3. What are the results of the calls to GetValue(lref) and GetValue(rref) and why does say [] == [] fail here when it too relies on the same results? ","date":"2013-05-20T19:03:52.204Z","type":"message"}
{"nick":"soluble","message":"evaluates to true*","date":"2013-05-20T19:04:05.175Z","type":"message"}
{"nick":"soluble","message":"s/fail here/evaluates to false","date":"2013-05-20T19:04:58.418Z","type":"message"}
{"nick":"soluble","message":"the trouble is that I can't understand the spec yet :( it's overwhelming but I'm curious ","date":"2013-05-20T19:06:56.876Z","type":"message"}
{"nick":"jamespage_","date":"2013-05-20T19:07:01.365Z","type":"join"}
{"nick":"mraleph","message":"soluble:  [] == [] evaluates to false because it reaches step 10 because none of previous step matches (Type(x) is Object and Type(y) is Object, there is no such clause)","date":"2013-05-20T19:11:46.922Z","type":"message"}
{"nick":"soluble","message":"but there's If \"Type(x) is the same as Type(y)\"","date":"2013-05-20T19:12:27.121Z","type":"message"}
{"nick":"mraleph","message":"yeah, my eyes fail me. ","date":"2013-05-20T19:13:07.139Z","type":"message"}
{"nick":"soluble","message":"and as for < operator, how that works? The thing that would clear all to me is really the result of GetValue(ref) on array ","date":"2013-05-20T19:13:13.925Z","type":"message"}
{"nick":"soluble","message":"but I have trouble understanding it, I just started reading the spec","date":"2013-05-20T19:13:32.785Z","type":"message"}
{"nick":"mraleph","message":"then it returns false per 1. f that says return false when objects are not the same.","date":"2013-05-20T19:13:44.497Z","type":"message"}
{"nick":"mraleph","message":"x and y refer to different objects.","date":"2013-05-20T19:14:10.153Z","type":"message"}
{"nick":"mraleph","message":"GetValue(ref) returns value that reference (e.g. variable name, or expression like o.f) points to.","date":"2013-05-20T19:15:59.557Z","type":"message"}
{"nick":"mraleph","message":"so in this case GetValue(lref) is precisely [1] and GetValue(rref) is [2].","date":"2013-05-20T19:16:40.189Z","type":"message"}
{"nick":"soluble","message":"but where then is the lexical comparison described?","date":"2013-05-20T19:17:00.153Z","type":"message"}
{"nick":"soluble","message":"for arrays ","date":"2013-05-20T19:17:06.543Z","type":"message"}
{"nick":"jamespage_","reason":"Quit: Ex-Chat","date":"2013-05-20T19:17:16.256Z","type":"quit"}
{"nick":"soluble","message":"lexicographical, pardon me","date":"2013-05-20T19:18:42.350Z","type":"message"}
{"nick":"mraleph","message":"I don't think JavaScript arrays are compared lexicographically.","date":"2013-05-20T19:18:55.234Z","type":"message"}
{"nick":"soluble","message":"it's well described for strings","date":"2013-05-20T19:19:01.529Z","type":"message"}
{"nick":"mraleph","message":"both left and right sides are converted to primitive values which are then compared","date":"2013-05-20T19:19:28.455Z","type":"message"}
{"nick":"soluble","message":"and the value being a number (as per default hint?) ?","date":"2013-05-20T19:20:02.676Z","type":"message"}
{"nick":"mraleph","message":"ah, it might be that it gets converted to String and then strings are compared lexicographically","date":"2013-05-20T19:20:36.475Z","type":"message"}
{"nick":"soluble","message":"that's what I was thinking, but then [1] == [1] should evaluate to true ","date":"2013-05-20T19:21:13.645Z","type":"message"}
{"nick":"soluble","message":"but it doesn't","date":"2013-05-20T19:21:19.540Z","type":"message"}
{"nick":"mraleph","message":"soluble: [1] == [1] evaluated to false per 1 f in the section you linked to.","date":"2013-05-20T19:21:50.951Z","type":"message"}
{"nick":"soluble","message":"but there's d)","date":"2013-05-20T19:22:37.820Z","type":"message"}
{"nick":"soluble","message":"If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return false.","date":"2013-05-20T19:22:38.847Z","type":"message"}
{"nick":"soluble","message":"under step 1","date":"2013-05-20T19:22:53.040Z","type":"message"}
{"nick":"mraleph","message":"but type of x is Object","date":"2013-05-20T19:23:07.099Z","type":"message"}
{"nick":"soluble","message":"Ah, okay, I see it now ;) ","date":"2013-05-20T19:24:57.687Z","type":"message"}
{"nick":"mraleph","message":"< calls ToPrimitive([1], hint Number) which calls [[DefaultValue]]([1], Number) which first calls valueOf on the array (that does not return primitive value) and then does toString and returns that.","date":"2013-05-20T19:24:59.482Z","type":"message"}
{"nick":"soluble","message":"Thank you very much mraleph","date":"2013-05-20T19:25:16.522Z","type":"message"}
{"nick":"mraleph","message":"so [1] < [2] is the same as \"1\" < \"2\"","date":"2013-05-20T19:25:21.795Z","type":"message"}
{"nick":"mraleph","message":"it is pretty obscure.","date":"2013-05-20T19:25:29.580Z","type":"message"}
{"nick":"Vbitz","reason":"Quit: Computer has gone to sleep.","date":"2013-05-20T19:54:53.762Z","type":"quit"}
{"nick":"jamespage_","date":"2013-05-20T20:04:14.481Z","type":"join"}
{"nick":"jamespage_","reason":"Quit: Ex-Chat","date":"2013-05-20T20:27:00.196Z","type":"quit"}
{"nick":"Vbitz","date":"2013-05-20T20:27:23.025Z","type":"join"}
{"nick":"Vbitz","reason":"Max SendQ exceeded","date":"2013-05-20T20:27:26.868Z","type":"quit"}
{"nick":"Vbitz","date":"2013-05-20T20:27:52.465Z","type":"join"}
{"nick":"Vbitz","reason":"Max SendQ exceeded","date":"2013-05-20T20:27:57.735Z","type":"quit"}
{"nick":"Vbitz","date":"2013-05-20T20:28:33.894Z","type":"join"}
{"nick":"carif","date":"2013-05-20T20:41:42.790Z","type":"join"}
{"nick":"carif","reason":"Ping timeout: 248 seconds","date":"2013-05-20T20:59:49.646Z","type":"quit"}
{"nick":"soluble","message":"mraleph, are you still there? ","date":"2013-05-20T21:30:52.735Z","type":"message"}
{"nick":"mraleph","message":"yes, soluble","date":"2013-05-20T21:33:02.755Z","type":"message"}
{"nick":"soluble","message":"why is the expression [0][0] evaluated to 0? where's that described? ","date":"2013-05-20T21:33:52.655Z","type":"message"}
{"nick":"mraleph","message":"I think you need to look at the grammar. My guess it is parsed as ([0])[0]","date":"2013-05-20T21:34:32.105Z","type":"message"}
{"nick":"mraleph","message":"which would be the first element of the array, which is 0","date":"2013-05-20T21:34:51.730Z","type":"message"}
{"nick":"mraleph","message":"[1][0] would be 1, I guess.","date":"2013-05-20T21:35:00.409Z","type":"message"}
{"nick":"soluble","message":"yes, that's it :) thank you ","date":"2013-05-20T21:35:17.890Z","type":"message"}
{"nick":"mraleph","message":"you look at some really strange corner cases :-)","date":"2013-05-20T21:35:34.163Z","type":"message"}
{"nick":"soluble","message":"I'm having fun :) ","date":"2013-05-20T21:36:00.195Z","type":"message"}
{"nick":"[[zz]]","reason":"Read error: Connection reset by peer","date":"2013-05-20T21:44:54.915Z","type":"quit"}
{"nick":"carif","date":"2013-05-20T21:51:17.343Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-05-20T22:01:18.519Z","type":"quit"}
{"nick":"[[zz]]","date":"2013-05-20T22:07:41.854Z","type":"join"}
{"nick":"soluble","message":"mraleph, I just stumbled across your website, incredible - small world indeed :) I love the asm.js article and I completely agree with you ","date":"2013-05-20T22:09:31.824Z","type":"message"}
{"nick":"RT|Chatzilla","date":"2013-05-20T22:16:50.080Z","type":"join"}
{"nick":"jonaslund","reason":"Read error: Connection reset by peer","date":"2013-05-20T22:30:47.764Z","type":"quit"}
{"nick":"jonaslund","date":"2013-05-20T22:31:11.834Z","type":"join"}
{"nick":"c4milo","date":"2013-05-20T22:42:35.006Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-05-20T22:45:02.956Z","type":"join"}
{"nick":"C-Man","date":"2013-05-20T23:45:48.385Z","type":"join"}
