{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-07-09T00:31:52.231Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2015-07-09T00:38:52.141Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T00:50:10.605Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T00:53:31.224Z","type":"join"}
{"nick":"enaqx","reason":"Read error: Connection reset by peer","date":"2015-07-09T00:57:45.041Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T00:58:12.372Z","type":"join"}
{"nick":"enaqx","reason":"Ping timeout: 248 seconds","date":"2015-07-09T01:06:23.472Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-07-09T01:08:47.072Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-07-09T01:17:22.166Z","type":"quit"}
{"nick":"jugglinmike","reason":"Ping timeout: 276 seconds","date":"2015-07-09T01:20:43.745Z","type":"quit"}
{"nick":"JoWie","reason":"Quit: Connection closed for inactivity","date":"2015-07-09T01:40:58.012Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T01:43:28.143Z","type":"join"}
{"nick":"bnoordhuis","date":"2015-07-09T01:45:11.321Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2015-07-09T01:50:00.276Z","type":"quit"}
{"nick":"enaqx","reason":"Ping timeout: 276 seconds","date":"2015-07-09T01:55:10.790Z","type":"quit"}
{"nick":"abraxas_","date":"2015-07-09T01:55:45.591Z","type":"join"}
{"nick":"caitp","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T02:28:53.487Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T02:34:11.272Z","type":"join"}
{"nick":"enaqx","reason":"Read error: Connection reset by peer","date":"2015-07-09T02:42:05.961Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T02:42:20.342Z","type":"join"}
{"nick":"ofrobots","date":"2015-07-09T03:11:28.679Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2015-07-09T03:14:36.317Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T03:15:07.783Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T03:22:25.215Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T03:26:27.582Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T03:31:39.791Z","type":"quit"}
{"nick":"enaqx","reason":"Ping timeout: 248 seconds","date":"2015-07-09T03:35:43.489Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T03:51:21.450Z","type":"join"}
{"nick":"bradleymeck","date":"2015-07-09T03:52:43.612Z","type":"join"}
{"nick":"enaqx","reason":"Read error: Connection reset by peer","date":"2015-07-09T04:13:45.476Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T04:14:04.428Z","type":"join"}
{"nick":"ofrobots","date":"2015-07-09T04:19:04.558Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2015-07-09T04:21:57.701Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-07-09T04:43:20.596Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T04:58:29.873Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T05:04:33.415Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T05:04:53.904Z","type":"join"}
{"nick":"enaqx","reason":"Remote host closed the connection","date":"2015-07-09T05:25:46.860Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-07-09T05:33:51.539Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T06:06:20.633Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T06:08:24.213Z","type":"join"}
{"nick":"mostynb","date":"2015-07-09T07:15:12.229Z","type":"join"}
{"nick":"enaqx","reason":"Ping timeout: 252 seconds","date":"2015-07-09T07:28:03.096Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T07:30:30.514Z","type":"join"}
{"nick":"abraxas_","reason":"Remote host closed the connection","date":"2015-07-09T07:40:42.844Z","type":"quit"}
{"nick":"enaqx","reason":"Ping timeout: 252 seconds","date":"2015-07-09T07:47:51.060Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T07:49:11.299Z","type":"join"}
{"nick":"abraxas_","date":"2015-07-09T07:53:01.921Z","type":"join"}
{"nick":"enaqx","reason":"Ping timeout: 252 seconds","date":"2015-07-09T07:54:27.054Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-07-09T07:57:07.954Z","type":"quit"}
{"nick":"C-Man","date":"2015-07-09T08:17:50.391Z","type":"join"}
{"nick":"bnoordhuis","date":"2015-07-09T08:23:23.344Z","type":"join"}
{"nick":"abraxas_","reason":"Remote host closed the connection","date":"2015-07-09T08:43:35.495Z","type":"quit"}
{"nick":"abraxas_","date":"2015-07-09T08:56:24.938Z","type":"join"}
{"nick":"enaqx","date":"2015-07-09T09:07:25.879Z","type":"join"}
{"nick":"enaqx","reason":"Ping timeout: 252 seconds","date":"2015-07-09T09:14:12.021Z","type":"quit"}
{"nick":"rendar","date":"2015-07-09T09:16:12.994Z","type":"join"}
{"nick":"abraxas__","date":"2015-07-09T09:18:07.839Z","type":"join"}
{"nick":"abraxas_","reason":"Ping timeout: 264 seconds","date":"2015-07-09T09:20:49.392Z","type":"quit"}
{"nick":"abraxas__","reason":"Read error: Connection reset by peer","date":"2015-07-09T09:25:17.010Z","type":"quit"}
{"nick":"abraxas_","date":"2015-07-09T09:25:30.675Z","type":"join"}
{"nick":"enaqx","date":"2015-07-09T10:06:14.222Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2015-07-09T10:17:37.277Z","type":"quit"}
{"nick":"xiinotulp","date":"2015-07-09T10:24:36.306Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 252 seconds","date":"2015-07-09T10:28:04.937Z","type":"quit"}
{"nick":"bnoordhuis","date":"2015-07-09T10:42:02.440Z","type":"join"}
{"nick":"caitp","date":"2015-07-09T10:52:38.762Z","type":"join"}
{"nick":"abraxas_","reason":"Remote host closed the connection","date":"2015-07-09T10:53:50.718Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by machenbach@chromium.org: Tree is closed (maintenance)","date":"2015-07-09T10:54:19.057Z","type":"message"}
{"nick":"xiinotulp","new_nick":"plutoniix","date":"2015-07-09T10:56:12.886Z","type":"nick"}
{"nick":"abraxas_","date":"2015-07-09T10:56:27.836Z","type":"join"}
{"nick":"abraxas_","reason":"Remote host closed the connection","date":"2015-07-09T11:12:17.782Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: Tree is open","date":"2015-07-09T11:25:29.612Z","type":"message"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"gclient runhooks\" on http://build.chromium.org/p/client.v8/builders/V8%20Win64%20-%20debug/builds/4345 \"V8 Win64 - debug\" from b7795b6a3e6eba31646d94fd97b1da53b2574d2e: machenbach@chromium.org)","date":"2015-07-09T11:27:31.086Z","type":"message"}
{"nick":"esas","reason":"Ping timeout: 264 seconds","date":"2015-07-09T11:53:52.793Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by bmeurer@google.com: Tree is open (Win ninja not working? Arm debug timeouts as usual)","date":"2015-07-09T11:56:43.642Z","type":"message"}
{"nick":"JoWie","date":"2015-07-09T12:09:43.882Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 250 seconds","date":"2015-07-09T12:14:47.424Z","type":"quit"}
{"nick":"bnoordhuis","date":"2015-07-09T12:20:56.360Z","type":"join"}
{"nick":"enaqx","reason":"Remote host closed the connection","date":"2015-07-09T12:41:06.829Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T12:56:20.897Z","type":"join"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: Tree is open (infra CL reverted)","date":"2015-07-09T13:20:14.873Z","type":"message"}
{"nick":"jugglinmike","date":"2015-07-09T13:45:06.376Z","type":"join"}
{"nick":"ofrobots","date":"2015-07-09T13:58:15.856Z","type":"join"}
{"nick":"mostynb","reason":"Quit: Leaving","date":"2015-07-09T14:00:33.371Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"compile\" on http://build.chromium.org/p/client.v8/builders/V8%20Win32%20-%20debug%20builder/builds/4984 \"V8 Win32 - debug builder\" from 21d64edfdf313f530dabec1fd751d9a96183508e: machenbach@chromium.org)","date":"2015-07-09T14:00:33.902Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T14:08:01.753Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T14:16:17.517Z","type":"join"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: Tree is open","date":"2015-07-09T14:21:46.071Z","type":"message"}
{"nick":"abraxas_","date":"2015-07-09T14:49:53.607Z","type":"join"}
{"nick":"bradleymeck","date":"2015-07-09T14:50:10.197Z","type":"join"}
{"nick":"abraxas_","reason":"Ping timeout: 256 seconds","date":"2015-07-09T14:54:50.276Z","type":"quit"}
{"nick":"davi","date":"2015-07-09T15:01:24.454Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T15:01:34.994Z","type":"quit"}
{"nick":"davi","reason":"Ping timeout: 256 seconds","date":"2015-07-09T15:20:38.322Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T15:37:01.651Z","type":"join"}
{"nick":"davi","date":"2015-07-09T15:42:49.505Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 256 seconds","date":"2015-07-09T15:51:48.356Z","type":"quit"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2015-07-09T16:04:33.340Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2015-07-09T16:26:34.039Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 244 seconds","date":"2015-07-09T16:30:04.313Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T16:30:35.145Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T16:30:53.611Z","type":"join"}
{"nick":"davi","date":"2015-07-09T16:55:39.365Z","type":"join"}
{"nick":"davi","reason":"Changing host","date":"2015-07-09T16:55:39.366Z","type":"quit"}
{"nick":"davi","date":"2015-07-09T16:55:39.366Z","type":"join"}
{"nick":"bnoordhuis","date":"2015-07-09T17:36:51.311Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2015-07-09T17:41:19.288Z","type":"quit"}
{"nick":"bnoordhuis","date":"2015-07-09T17:50:25.340Z","type":"join"}
{"nick":"ofrobots","reason":"Read error: Connection reset by peer","date":"2015-07-09T18:06:05.431Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T18:06:37.991Z","type":"join"}
{"nick":"enaqx","reason":"Remote host closed the connection","date":"2015-07-09T18:07:59.266Z","type":"quit"}
{"nick":"rmichnik","date":"2015-07-09T18:18:56.616Z","type":"join"}
{"nick":"abraxas_","date":"2015-07-09T18:27:47.484Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 246 seconds","date":"2015-07-09T18:31:05.181Z","type":"quit"}
{"nick":"abraxas_","reason":"Ping timeout: 264 seconds","date":"2015-07-09T18:32:53.282Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T18:48:32.835Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T18:53:00.484Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T19:06:49.343Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T19:10:28.032Z","type":"join"}
{"nick":"EGreg","date":"2015-07-09T19:15:15.916Z","type":"join"}
{"nick":"EGreg","message":"hey all","date":"2015-07-09T19:15:20.162Z","type":"message"}
{"nick":"caitp","message":"hi greg","date":"2015-07-09T19:15:28.412Z","type":"message"}
{"nick":"EGreg","message":"how efficient are closures in v8? Should I avoid having a lot of variables in closures?","date":"2015-07-09T19:15:32.390Z","type":"message"}
{"nick":"EGreg","message":"or are they as efficient as objects?","date":"2015-07-09T19:15:38.522Z","type":"message"}
{"nick":"caitp","message":"the usual advice is \"don't try to optimize until you need to\" but","date":"2015-07-09T19:16:00.362Z","type":"message"}
{"nick":"EGreg","message":"I'm guessing that each function is actually compiled once into static code, wherever it appears, but the closure is passed to it as an implicit object, and there is very little price for having 40 variables in the closure vs 1","date":"2015-07-09T19:16:13.962Z","type":"message"}
{"nick":"EGreg","message":"I'd like to know how the performance is, or what really happens.","date":"2015-07-09T19:16:25.177Z","type":"message"}
{"nick":"bnoordhuis","message":"EGreg: you're spot on","date":"2015-07-09T19:18:48.898Z","type":"message"}
{"nick":"bnoordhuis","message":"a closure is basically a code pointer + an array for the captured free variables","date":"2015-07-09T19:19:28.889Z","type":"message"}
{"nick":"caitp","message":"the \"captured free variables\" are the things that are most expensive to reference, especially if they're very high up in the chain","date":"2015-07-09T19:22:48.451Z","type":"message"}
{"nick":"caitp","message":"but it usually doesn't matter","date":"2015-07-09T19:23:02.177Z","type":"message"}
{"nick":"caitp","message":"profile =)","date":"2015-07-09T19:23:07.010Z","type":"message"}
{"nick":"caitp","message":"local variables should always be basically free though","date":"2015-07-09T19:23:36.088Z","type":"message"}
{"nick":"ofrobots","date":"2015-07-09T19:23:38.691Z","type":"join"}
{"nick":"caitp","message":"(to reference, not talking about allocation or compilation)","date":"2015-07-09T19:24:11.258Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2015-07-09T19:25:42.303Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T19:34:06.435Z","type":"quit"}
{"nick":"EGreg","message":"I thought so. But I was put off by worrying about some browser engines. Like Microsoft writes this:","date":"2015-07-09T19:34:30.476Z","type":"message"}
{"nick":"EGreg","message":"https://msdn.microsoft.com/en-us/library/windows/apps/Hh781219.aspx","date":"2015-07-09T19:34:31.638Z","type":"message"}
{"nick":"EGreg","message":"http://blogs.msdn.com/b/eternalcoding/archive/2014/08/05/javascript-using-closure-space-to-create-real-private-members.aspx","date":"2015-07-09T19:38:33.426Z","type":"message"}
{"nick":"EGreg","message":"But if I use node.js then I am only using v8.","date":"2015-07-09T19:38:52.446Z","type":"message"}
{"nick":"caitp","message":"I remember reading that MS made a fork of Node that uses chakra + some abstraction layer to look like v8, iirc","date":"2015-07-09T19:39:31.935Z","type":"message"}
{"nick":"EGreg","message":"it seems to me that having more closure variables (flat structure) is better than having one closure object with properties (extra level of indirection)","date":"2015-07-09T19:39:41.321Z","type":"message"}
{"nick":"EGreg","message":"so basically, what is more efficient? or are they roughly the same:","date":"2015-07-09T19:40:06.591Z","type":"message"}
{"nick":"EGreg","message":"MyClass.construct = function() { var ret = {}; ret._foo = 4; } // pretend it's private","date":"2015-07-09T19:41:31.340Z","type":"message"}
{"nick":"EGreg","message":"or","date":"2015-07-09T19:41:32.418Z","type":"message"}
{"nick":"EGreg","message":"sorry I meant","date":"2015-07-09T19:41:39.716Z","type":"message"}
{"nick":"EGreg","message":"MyClass.construct = function() { var ret = {}; ret._foo = 4; return ret; } // pretend it's private","date":"2015-07-09T19:41:55.543Z","type":"message"}
{"nick":"EGreg","message":"MyClass.construct = function() { var _foo = 4; var ret = {}; } // pretend it's private","date":"2015-07-09T19:42:18.941Z","type":"message"}
{"nick":"EGreg","message":"It seems to me that the real closures carry a cost because any methods accessing them have to be on every instance object, not just the prototype. So it consumes more memory.","date":"2015-07-09T19:42:51.046Z","type":"message"}
{"nick":"EGreg","message":"I mean closures to make 'private properties'","date":"2015-07-09T19:43:02.689Z","type":"message"}
{"nick":"caitp","message":"it's probably not worth worrying about making things \"private\"","date":"2015-07-09T19:43:04.886Z","type":"message"}
{"nick":"EGreg","message":"sorry if I'm not being clear","date":"2015-07-09T19:43:05.573Z","type":"message"}
{"nick":"EGreg","message":"yeah. I was just wondering whether making \"private properties\" via closures is as efficient as adding them to the this._private object","date":"2015-07-09T19:43:36.852Z","type":"message"}
{"nick":"caitp","message":"unfortunately \"private\" abstractions end up being more complicated and often slower","date":"2015-07-09T19:43:37.041Z","type":"message"}
{"nick":"EGreg","message":"ignoring the fact that this._private can be accessed by prototype methods and closures can't","date":"2015-07-09T19:44:02.856Z","type":"message"}
{"nick":"caitp","message":"yes, that would be faster","date":"2015-07-09T19:44:26.519Z","type":"message"}
{"nick":"EGreg","message":"what would?","date":"2015-07-09T19:44:36.484Z","type":"message"}
{"nick":"caitp","message":"storing properties on the object vs defining getter/setters that operate on context allocated variables","date":"2015-07-09T19:44:59.364Z","type":"message"}
{"nick":"caitp","message":"whether it matters or not for performance depends on the code that uses it","date":"2015-07-09T19:45:09.068Z","type":"message"}
{"nick":"caitp","message":"how hot is it","date":"2015-07-09T19:45:11.003Z","type":"message"}
{"nick":"caitp","message":"I mean, one may be faster than the other, but it probably doesn't matter 99% of the time","date":"2015-07-09T19:45:27.736Z","type":"message"}
{"nick":"caitp","message":"so the more important thing is just how confusing is it for your other authors","date":"2015-07-09T19:45:45.277Z","type":"message"}
{"nick":"EGreg","message":"right","date":"2015-07-09T19:46:12.450Z","type":"message"}
{"nick":"EGreg","message":"I used closures heavily here: https://github.com/Qbix/Platform/blob/master/platform/classes/Db/Row.js","date":"2015-07-09T19:46:46.368Z","type":"message"}
{"nick":"EGreg","message":"can you please take a look and critique it?","date":"2015-07-09T19:46:53.312Z","type":"message"}
{"nick":"caitp","message":"well, the biggest criticism is probably  the metaprogramming","date":"2015-07-09T19:50:57.742Z","type":"message"}
{"nick":"C-Man","date":"2015-07-09T19:51:44.448Z","type":"join"}
{"nick":"caitp","message":"something you'll notice is that Object.defineProperty/ies isn't particularly fast, so it's generally better to do that like once during bootup rather than every time you instantiate the object. If the object has to be instantiated often, you'll notice it","date":"2015-07-09T19:54:37.118Z","type":"message"}
{"nick":"caitp","message":"i had wanted to use a strategy like that for hiding private state in the promise implementation in angularjs last year, but it had a significant impact on benchmarks because promises are created pretty frequently","date":"2015-07-09T19:58:37.059Z","type":"message"}
{"nick":"EGreg","message":"oh, you work on angularjs?","date":"2015-07-09T19:59:10.591Z","type":"message"}
{"nick":"EGreg","message":"Db rows are created pretty frequently","date":"2015-07-09T19:59:29.187Z","type":"message"}
{"nick":"caitp","message":"might be worth looking at Mongoose's strategy","date":"2015-07-09T20:00:03.447Z","type":"message"}
{"nick":"EGreg","message":"but, we don't have a way around it, we need to have hooks for getting/setting row properties, and we would like to use a familiar syntax instead of fields.setFoo and fields.getFoo","date":"2015-07-09T20:00:06.872Z","type":"message"}
{"nick":"caitp","message":"I haven't been through their code in too much detail","date":"2015-07-09T20:00:15.213Z","type":"message"}
{"nick":"caitp","message":"you could always just make those hooks methods","date":"2015-07-09T20:00:32.613Z","type":"message"}
{"nick":"EGreg","message":"I want to be able to assign properties normally with normal syntax:","date":"2015-07-09T20:01:10.720Z","type":"message"}
{"nick":"EGreg","message":"stream.fields.publisherId = 'z9878czc'","date":"2015-07-09T20:01:19.192Z","type":"message"}
{"nick":"EGreg","message":"but have a hook that validates the input etc.","date":"2015-07-09T20:01:26.776Z","type":"message"}
{"nick":"EGreg","message":"so I need to define getter/setter","date":"2015-07-09T20:01:33.985Z","type":"message"}
{"nick":"caitp","message":"I mean I can see the appeal, but if you're creating that abstraction often, the cost will be noticeable","date":"2015-07-09T20:02:05.635Z","type":"message"}
{"nick":"caitp","message":"if you don't need 60fps then go for it","date":"2015-07-09T20:02:15.212Z","type":"message"}
{"nick":"ofrobots","date":"2015-07-09T20:02:51.642Z","type":"join"}
{"nick":"EGreg","message":"it's on the backend","date":"2015-07-09T20:04:15.047Z","type":"message"}
{"nick":"EGreg","message":"node.js","date":"2015-07-09T20:04:16.107Z","type":"message"}
{"nick":"EGreg","message":"a db row will be saved to the db, which the script will probably have to wait for anyway","date":"2015-07-09T20:04:54.472Z","type":"message"}
{"nick":"EGreg","message":"so the only real cost is slowing down the main thread / main loop slightly","date":"2015-07-09T20:05:07.863Z","type":"message"}
{"nick":"caitp","message":"there's no need for you to block during db interactions, and that is definitely not scaleable","date":"2015-07-09T20:05:30.604Z","type":"message"}
{"nick":"EGreg","message":"that's not what I mean","date":"2015-07-09T20:06:16.882Z","type":"message"}
{"nick":"EGreg","message":"I mean that a given request will wait until the db callback is called","date":"2015-07-09T20:06:30.483Z","type":"message"}
{"nick":"EGreg","message":"and in the meantime, the only real cost can be described as the aggregate of all calls to getter/setter setup, on the main loop, as an aggregate thing","date":"2015-07-09T20:06:57.443Z","type":"message"}
{"nick":"EGreg","message":"in other words each particular request would be slowed down by a negligible amount","date":"2015-07-09T20:07:08.661Z","type":"message"}
{"nick":"EGreg","message":"but the main thread might be slowed down by a significant amount","date":"2015-07-09T20:07:15.259Z","type":"message"}
{"nick":"EGreg","message":"I'm talking in the context of a node.js web server","date":"2015-07-09T20:09:02.349Z","type":"message"}
{"nick":"caitp","message":"so, say you had to set up one of these schema objects for every single request, okay, it will take some time","date":"2015-07-09T20:09:16.897Z","type":"message"}
{"nick":"EGreg","message":"a request comes in, most of the time spent serving it is I/O bound, the getter/setter hardly makes a difference in a given rquest","date":"2015-07-09T20:09:19.623Z","type":"message"}
{"nick":"caitp","message":"not \"forever\", but a measurable amount of time","date":"2015-07-09T20:09:26.459Z","type":"message"}
{"nick":"EGreg","message":"but, on a given thread / core, I might be spending 1% of the time in those getter/setters","date":"2015-07-09T20:09:37.792Z","type":"message"}
{"nick":"EGreg","message":"that's where the real cost appears","date":"2015-07-09T20:09:42.524Z","type":"message"}
{"nick":"EGreg","message":"in other words latency isn't affected but throughput is","date":"2015-07-09T20:10:01.094Z","type":"message"}
{"nick":"caitp","message":"not enough time for your user to notice __probably__, but in order to scale it, you'd need a well load balanced cluster","date":"2015-07-09T20:10:10.497Z","type":"message"}
{"nick":"EGreg","message":"yeah, latency and scalability can be orthogonal","date":"2015-07-09T20:10:25.157Z","type":"message"}
{"nick":"EGreg","message":"getter/setter may be bad for scalability, not latency","date":"2015-07-09T20:10:33.877Z","type":"message"}
{"nick":"EGreg","message":"that's all I meant","date":"2015-07-09T20:10:40.662Z","type":"message"}
{"nick":"EGreg","message":"does it take up a lot of extra memory btw? or is it just storing a closure?","date":"2015-07-09T20:10:58.111Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-07-09T20:12:18.900Z","type":"quit"}
{"nick":"abraxas_","date":"2015-07-09T20:16:55.284Z","type":"join"}
{"nick":"caitp","message":"it's a bit hard to grok how everything is allocated and stored, but at the very least you'll have code space for each of your getters and setters, you'll have accessor info for the property, you'll have map space for the property itself, you'll probably have a few map transitions on the heap for each schema (but you'd have those anyways because you need to use a dynamic list of properties)","date":"2015-07-09T20:16:59.652Z","type":"message"}
{"nick":"caitp","message":"so I mean, relative to like, a fully finished object literal { get fieldA() { doTheThing(); } set fieldA() { doTheOtherThing(); } ... etc }, it's a bit bigger","date":"2015-07-09T20:17:45.170Z","type":"message"}
{"nick":"caitp","message":"but that doesn't mean \"use an object literal and don't add or delete or configure properties on it ever\"","date":"2015-07-09T20:18:45.171Z","type":"message"}
{"nick":"caitp","message":"you might want to think about using the new \"strong mode\" stuff, which tries to help you make code easy for the vm to optimize","date":"2015-07-09T20:19:07.726Z","type":"message"}
{"nick":"caitp","message":"https://developers.google.com/v8/experiments","date":"2015-07-09T20:19:32.725Z","type":"message"}
{"nick":"abraxas_","reason":"Ping timeout: 256 seconds","date":"2015-07-09T20:21:32.241Z","type":"quit"}
{"nick":"caitp","message":"some of that has probably crept into more recent io.js releases","date":"2015-07-09T20:21:45.709Z","type":"message"}
{"nick":"caitp","message":"there's still a lot left to do on it, but it's probably at the very least, a helpful guide","date":"2015-07-09T20:22:03.974Z","type":"message"}
{"nick":"bnoordhuis","date":"2015-07-09T20:30:33.548Z","type":"join"}
{"nick":"EGreg","message":"do you mean \"use stricter\" ?","date":"2015-07-09T20:46:25.998Z","type":"message"}
{"nick":"EGreg","message":"Google SoundScript?","date":"2015-07-09T20:47:02.385Z","type":"message"}
{"nick":"EGreg","message":"what is the main difference between io.js and node.js ? They are merging back to node.js right?","date":"2015-07-09T20:47:25.157Z","type":"message"}
{"nick":"EGreg","message":"I just tested my front-end framework's speed. Apparently it's able to initialize 750 components in 2.8 seconds ... that's about 3 microseconds per component. I don't know if it's fast, or not. How fast does AngulerJS do it?","date":"2015-07-09T20:48:09.262Z","type":"message"}
{"nick":"caitp","message":"I think it's just \"use strong\" now","date":"2015-07-09T20:55:58.064Z","type":"message"}
{"nick":"lmkmplm","date":"2015-07-09T20:56:47.162Z","type":"join"}
{"nick":"caitp","message":"\"How fast does AngulerJS do it?\" off the top of my head, I have no idea. it would depend on the components","date":"2015-07-09T20:57:17.586Z","type":"message"}
{"nick":"bnoordhuis","message":"EGreg: for practical purposes, io.js is node.js-next","date":"2015-07-09T20:57:37.917Z","type":"message"}
{"nick":"C-Man","reason":"Ping timeout: 265 seconds","date":"2015-07-09T20:57:56.593Z","type":"quit"}
{"nick":"caitp","message":"that stuff gets complicated very fast, did you read addy osmani's perf audit of the new reddit mobile app?","date":"2015-07-09T20:58:07.797Z","type":"message"}
{"nick":"caitp","message":"not angular, just that it's relatively complicated","date":"2015-07-09T20:58:20.170Z","type":"message"}
{"nick":"EGreg","message":"I've done a ton of work on my platform, started before Angular became all the rage.","date":"2015-07-09T21:16:13.139Z","type":"message"}
{"nick":"EGreg","message":"Its main focus is just to have reusability, security, interoperability, scalability, resilience, etc.","date":"2015-07-09T21:16:34.584Z","type":"message"}
{"nick":"enaqx","reason":"Remote host closed the connection","date":"2015-07-09T21:16:56.707Z","type":"quit"}
{"nick":"EGreg","message":"But outperforming everyone on speed wasn't a key concern. Still, I don't want it to be super slow.","date":"2015-07-09T21:16:59.474Z","type":"message"}
{"nick":"enaqx","date":"2015-07-09T21:17:10.296Z","type":"join"}
{"nick":"EGreg","message":"The way we do updates for example is that people building components are supposed to do:","date":"2015-07-09T21:17:34.051Z","type":"message"}
{"nick":"EGreg","message":"component.rendering('a,b,c', function () { update the dom here } )","date":"2015-07-09T21:17:56.959Z","type":"message"}
{"nick":"EGreg","message":"it could also be ['a', 'b', 'c'] or just 'a' etc.","date":"2015-07-09T21:18:05.411Z","type":"message"}
{"nick":"EGreg","message":"basically the callback is scheduled to be run on the next frame ... but you have to *explicitly* tell the system that the state has changed, with component.stateChanged('a,b') for example.","date":"2015-07-09T21:18:37.059Z","type":"message"}
{"nick":"rendar","reason":"Ping timeout: 256 seconds","date":"2015-07-09T21:18:46.335Z","type":"quit"}
{"nick":"EGreg","message":"instead of wasting time at run-time trying to do \"magic\" through dirty-checking (the model like angular, or the dom like react/mithril) it just asks the developer to explicitly say when something has changed.","date":"2015-07-09T21:19:13.252Z","type":"message"}
{"nick":"EGreg","message":"after all they did just write     component.state.a = 5; so they can also write component.stateChanged('a,b,c') at the end of the changes.","date":"2015-07-09T21:19:40.133Z","type":"message"}
{"nick":"C-Man","date":"2015-07-09T21:23:09.841Z","type":"join"}
{"nick":"lmkmplm","reason":"Ping timeout: 246 seconds","date":"2015-07-09T21:24:20.160Z","type":"quit"}
{"nick":"rendar","date":"2015-07-09T21:25:22.956Z","type":"join"}
{"nick":"bradleymeck","date":"2015-07-09T21:30:18.448Z","type":"join"}
{"nick":"bnoordhuis","reason":"Remote host closed the connection","date":"2015-07-09T21:32:51.746Z","type":"quit"}
{"nick":"enaqx","reason":"Remote host closed the connection","date":"2015-07-09T21:33:16.012Z","type":"quit"}
{"nick":"bnoordhuis","date":"2015-07-09T21:36:23.382Z","type":"join"}
{"nick":"Bob_Gneu","reason":"Ping timeout: 252 seconds","date":"2015-07-09T21:45:18.919Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T21:45:33.572Z","type":"join"}
{"nick":"Bob_Gneu","date":"2015-07-09T21:46:33.920Z","type":"join"}
{"nick":"bradleymeck","reason":"Read error: Connection reset by peer","date":"2015-07-09T21:47:06.773Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-07-09T21:47:38.336Z","type":"join"}
{"nick":"Bob_Gneu","reason":"Ping timeout: 252 seconds","date":"2015-07-09T21:50:48.877Z","type":"quit"}
{"nick":"enaqx","reason":"Remote host closed the connection","date":"2015-07-09T22:04:00.310Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T22:18:33.227Z","type":"join"}
{"nick":"enaqx","reason":"Ping timeout: 256 seconds","date":"2015-07-09T22:25:04.226Z","type":"quit"}
{"nick":"rendar","date":"2015-07-09T22:26:22.112Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2015-07-09T22:28:34.444Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2015-07-09T22:32:09.697Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T22:32:49.801Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2015-07-09T22:36:18.545Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T22:39:57.245Z","type":"join"}
{"nick":"ofrobots","reason":"Read error: Connection reset by peer","date":"2015-07-09T22:41:56.221Z","type":"quit"}
{"nick":"ofrobots","date":"2015-07-09T23:00:43.983Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 256 seconds","date":"2015-07-09T23:13:30.310Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 250 seconds","date":"2015-07-09T23:17:47.418Z","type":"quit"}
{"nick":"enaqx","date":"2015-07-09T23:22:26.866Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-07-09T23:23:35.709Z","type":"quit"}
{"nick":"plutoniix","date":"2015-07-09T23:30:58.357Z","type":"join"}
