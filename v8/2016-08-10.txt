{"nick":"Net147","reason":"Ping timeout: 264 seconds","date":"2016-08-10T02:50:16.143Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T02:51:34.080Z","type":"join"}
{"nick":"Net147","reason":"Ping timeout: 264 seconds","date":"2016-08-10T03:35:16.024Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T03:37:09.123Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2016-08-10T05:05:53.940Z","type":"quit"}
{"nick":"Net147","reason":"Ping timeout: 264 seconds","date":"2016-08-10T05:16:04.092Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T05:19:19.828Z","type":"join"}
{"nick":"plutoniix","date":"2016-08-10T07:22:00.101Z","type":"join"}
{"nick":"seththompson","reason":"Ping timeout: 240 seconds","date":"2016-08-10T08:09:34.130Z","type":"quit"}
{"nick":"seththompson","date":"2016-08-10T08:09:50.972Z","type":"join"}
{"nick":"Net147","reason":"Ping timeout: 276 seconds","date":"2016-08-10T08:26:27.712Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T08:29:06.211Z","type":"join"}
{"nick":"vanillaSpeedLove","reason":"Quit: Page closed","date":"2016-08-10T08:40:41.193Z","type":"quit"}
{"nick":"Net147","reason":"Ping timeout: 258 seconds","date":"2016-08-10T10:47:25.184Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T10:47:58.810Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2016-08-10T11:40:04.589Z","type":"quit"}
{"nick":"bobmcw","date":"2016-08-10T11:56:04.823Z","type":"join"}
{"nick":"bobmcw","reason":"Changing host","date":"2016-08-10T11:56:04.888Z","type":"quit"}
{"nick":"bobmcw","date":"2016-08-10T11:56:04.942Z","type":"join"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Check - extra\" on http://build.chromium.org/p/client.v8/builders/V8%20Linux64%20TSAN/builds/11134 \"V8 Linux64 TSAN\" from 58524d6df343911c2ea1f3793718cb012f7e813c: bgeron@google.com,mlippautz@chromium.org,neis@chromium.org,verwaest@chromium.org)","date":"2016-08-10T12:06:59.252Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by mlippautz@google.com: open","date":"2016-08-10T12:15:02.335Z","type":"message"}
{"nick":"aperezdc","date":"2016-08-10T12:40:41.837Z","type":"join"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Check,Bisect 58524d6d.Retry\" on http://build.chromium.org/p/client.v8/builders/V8%20Linux%20-%20nosnap%20-%20debug/builds/8521 \"V8 Linux - nosnap - debug\" from cbe5d41d88f35dc8ee29d2e0f9ce739d9e132481: peterssen@google.com,verwaest@chromium.org)","date":"2016-08-10T12:50:17.994Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by buildbot@chromium.org: Tree is open (Automatic: بالتوفيق!)","date":"2016-08-10T12:57:21.128Z","type":"message"}
{"nick":"bradleymeck","date":"2016-08-10T13:25:09.952Z","type":"join"}
{"nick":"Net147","reason":"Ping timeout: 265 seconds","date":"2016-08-10T13:46:57.752Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T13:48:07.590Z","type":"join"}
{"nick":"plutoniix","date":"2016-08-10T14:50:30.111Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-10T14:50:44.616Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-08-10T14:52:27.109Z","type":"join"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Presubmit\" on http://build.chromium.org/p/client.v8/builders/V8%20Linux%20-%20presubmit/builds/10077 \"V8 Linux - presubmit\" from 779e3d6df00d53ca46a0b1b40752cd16da29f098: epertoso@chromium.org)","date":"2016-08-10T14:55:12.482Z","type":"message"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by machenbach@chromium.org: closed (epertoso fixing)","date":"2016-08-10T15:09:23.942Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open","date":"2016-08-10T15:16:26.951Z","type":"message"}
{"nick":"seventh","date":"2016-08-10T15:19:01.852Z","type":"join"}
{"nick":"seventh","reason":"Ping timeout: 258 seconds","date":"2016-08-10T15:33:03.264Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-10T16:04:04.454Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-08-10T16:12:40.283Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2010030309]","date":"2016-08-10T16:23:53.005Z","type":"quit"}
{"nick":"seventh","date":"2016-08-10T16:39:07.981Z","type":"join"}
{"nick":"ofrobots","reason":"Ping timeout: 252 seconds","date":"2016-08-10T16:53:19.515Z","type":"quit"}
{"nick":"ofrobots","date":"2016-08-10T16:53:39.029Z","type":"join"}
{"nick":"dherman","message":"what's the difference between Array::Get and Array::CloneElementAt?","date":"2016-08-10T16:54:48.091Z","type":"message"}
{"nick":"dherman","message":"and is there no fast path for getting a C++ array of handles to the indexed elements of an array? looping through and doing a Get of an Integer for each index, re-checking the length on every iteration in case of side effects, seems to be extremely slow","date":"2016-08-10T16:58:08.316Z","type":"message"}
{"nick":"caitp","message":"dherman: let me check","date":"2016-08-10T17:00:01.933Z","type":"message"}
{"nick":"dherman","message":"thx!","date":"2016-08-10T17:05:04.252Z","type":"message"}
{"nick":"caitp","message":"there are fast paths, but","date":"2016-08-10T17:08:41.472Z","type":"message"}
{"nick":"caitp","message":"they may not help the API much in particular","date":"2016-08-10T17:08:46.480Z","type":"message"}
{"nick":"caitp","message":"see ElementsAccessor, particularly the FastElementsAccessor subclasses","date":"2016-08-10T17:09:10.284Z","type":"message"}
{"nick":"caitp","message":"hopefully, the API is able to make use of it, but I doubt there would be much of a difference made","date":"2016-08-10T17:09:35.557Z","type":"message"}
{"nick":"caitp","message":"at least not for single Get() calls","date":"2016-08-10T17:09:42.860Z","type":"message"}
{"nick":"caitp","message":"well, no, fast case there would still be a lot quicker than slower elements representations","date":"2016-08-10T17:10:08.745Z","type":"message"}
{"nick":"caitp","message":"but you still wouldn't see the same advantage that you do in algorithms that iterate through fast elements in a tight loop","date":"2016-08-10T17:10:24.632Z","type":"message"}
{"nick":"caitp","message":"the main difference seems to be that CloneElementAt() is deprecated, and apparently it creates an actual copy of JSObjects in the array","date":"2016-08-10T17:11:26.855Z","type":"message"}
{"nick":"caitp","message":"and it looks like it fails to do anything if the array does not have fast elements.","date":"2016-08-10T17:11:40.063Z","type":"message"}
{"nick":"caitp","message":"probably was used for something DOM-related at some point, and the new recommended API reflects the proper MOP operations, is my guess","date":"2016-08-10T17:12:11.352Z","type":"message"}
{"nick":"thefourtheye","reason":"Quit: Connection closed for inactivity","date":"2016-08-10T17:31:17.585Z","type":"quit"}
{"nick":"dherman","message":"caitp: thanks! ElementAccessor is public API?","date":"2016-08-10T17:32:31.609Z","type":"message"}
{"nick":"caitp","message":"no","date":"2016-08-10T17:32:57.399Z","type":"message"}
{"nick":"dherman","message":"Oh sorry that's what I was asking about","date":"2016-08-10T17:33:06.406Z","type":"message"}
{"nick":"caitp","message":"yeah, there isn't really stuff in the API for it","date":"2016-08-10T17:33:18.187Z","type":"message"}
{"nick":"dherman","message":"I should've been clearer","date":"2016-08-10T17:33:18.606Z","type":"message"}
{"nick":"caitp","message":"I was trying to explain that","date":"2016-08-10T17:33:25.233Z","type":"message"}
{"nick":"caitp","message":"I don't think it's really feasible to expose fast arrays to the API, I think the api would break too often","date":"2016-08-10T17:33:59.246Z","type":"message"}
{"nick":"caitp","message":"but that's something to talk to cbruni about I guess","date":"2016-08-10T17:34:23.433Z","type":"message"}
{"nick":"dherman","message":"Ok","date":"2016-08-10T17:34:30.187Z","type":"message"}
{"nick":"Meep","date":"2016-08-10T17:48:47.345Z","type":"join"}
{"nick":"Tweth-U-PDS","reason":"Ping timeout: 264 seconds","date":"2016-08-10T17:51:28.128Z","type":"quit"}
{"nick":"caitp","message":"actually, I dunno","date":"2016-08-10T18:00:11.095Z","type":"message"}
{"nick":"caitp","message":"maybe it wouldn't be too bad to expose some version of the elements accessor to the API","date":"2016-08-10T18:00:25.308Z","type":"message"}
{"nick":"Tweth-U-PDS","date":"2016-08-10T18:18:20.581Z","type":"join"}
{"nick":"Meep","reason":"Ping timeout: 240 seconds","date":"2016-08-10T18:20:12.748Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-10T18:26:57.479Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-08-10T18:54:06.750Z","type":"join"}
{"nick":"aklein","message":"yeah, that would be nice","date":"2016-08-10T18:55:16.180Z","type":"message"}
{"nick":"aklein","message":"but scary","date":"2016-08-10T18:55:20.558Z","type":"message"}
{"nick":"caitp","message":"it wouldn't help most API objects that use elements, because of the interceptors","date":"2016-08-10T19:01:37.889Z","type":"message"}
{"nick":"caitp","message":"aklein: do you know why the bootstrapper creates a function for JSON, even though it doesn't seem to be exposed to anything?","date":"2016-08-10T19:04:10.553Z","type":"message"}
{"nick":"aklein","message":"weird","date":"2016-08-10T19:05:40.174Z","type":"message"}
{"nick":"aklein","message":"I'm trying to imagine what breaks if you change that to just use Object as the constructor","date":"2016-08-10T19:06:36.934Z","type":"message"}
{"nick":"aklein","message":"it dates back to the beginning of time","date":"2016-08-10T19:08:01.654Z","type":"message"}
{"nick":"aklein","message":"random guess: it's used to make JSON.toString() return '[object JSON]'?","date":"2016-08-10T19:15:47.038Z","type":"message"}
{"nick":"aklein","message":"that is, in ES5, it sets [[Class]] to \"JSON\"","date":"2016-08-10T19:17:17.992Z","type":"message"}
{"nick":"aklein","message":"yup","date":"2016-08-10T19:19:02.907Z","type":"message"}
{"nick":"caitp","message":"hm","date":"2016-08-10T19:19:08.839Z","type":"message"}
{"nick":"caitp","message":"of course, nowadays it uses @@toStringTag for that","date":"2016-08-10T19:19:25.095Z","type":"message"}
{"nick":"aklein","message":"clearly we need some test262 tests that delete @@toStringTag off of objects that aren't special-cased in O.p.toString() :)","date":"2016-08-10T19:19:26.368Z","type":"message"}
{"nick":"aklein","message":"how did you happen to run across that?","date":"2016-08-10T19:21:27.686Z","type":"message"}
{"nick":"dherman","message":"caitp, aklein: I don't know the ElementAccessor API but just an ability to say something like \"please give me an array of the own indexed properties of this Array.isArray array\" seems like it should be able to be faster than Get, and doesn't expose any internals of v8","date":"2016-08-10T19:21:53.028Z","type":"message"}
{"nick":"caitp","message":"was setting up the Intl object in the bootstrapper to install some of the C++-ified builtins on it, and started by copy/pasting from JSON","date":"2016-08-10T19:21:55.218Z","type":"message"}
{"nick":"aklein","message":"Intl definitely doesn't need it","date":"2016-08-10T19:22:23.987Z","type":"message"}
{"nick":"dherman","message":"(Give me a c array that is)","date":"2016-08-10T19:22:25.796Z","type":"message"}
{"nick":"aklein","message":"dherman: yeah, there's been some talk about such an API, which I agree feels much safer","date":"2016-08-10T19:22:49.865Z","type":"message"}
{"nick":"caitp","message":"is this still about the rust bindings thing or whatever it was?","date":"2016-08-10T19:23:57.269Z","type":"message"}
{"nick":"aklein","message":"the \"trouble\" is that most API changes are driven by Blink, and there's such a tight feedback loop between blink and v8 that things often get solved in some other way (e.g., we're currently looking at moving our Structured Clone implementation from blink into v8, which was the most recent request for this API)","date":"2016-08-10T19:24:03.861Z","type":"message"}
{"nick":"dherman","message":"caitp: ya","date":"2016-08-10T19:29:28.475Z","type":"message"}
{"nick":"caitp","message":"what is the main problem point that you're wanting to solve? could always try to escalate the discussion about it and make a solid case for extending the Array API (which is admittedly very thin)","date":"2016-08-10T19:32:18.364Z","type":"message"}
{"nick":"zv","date":"2016-08-10T19:39:23.744Z","type":"join"}
{"nick":"dherman","message":"caitp: it's just common when writing a native module that you want to pass n things across the boundary from JS into c++ (or rust in my case)","date":"2016-08-10T19:42:11.493Z","type":"message"}
{"nick":"dherman","message":"And the cost of crossing the boundary is super high","date":"2016-08-10T19:42:25.990Z","type":"message"}
{"nick":"dherman","message":"For lots of reasons, but this is one that's showing up in an example app I've been building","date":"2016-08-10T19:42:44.689Z","type":"message"}
{"nick":"Net147","reason":"Ping timeout: 260 seconds","date":"2016-08-10T19:45:44.516Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T19:48:43.361Z","type":"join"}
{"nick":"caitp","message":"well, why not write up the behave your want from it, I guess","date":"2016-08-10T19:50:33.819Z","type":"message"}
{"nick":"caitp","message":"behaviour*","date":"2016-08-10T19:50:40.660Z","type":"message"}
{"nick":"caitp","message":"maybe Node would get something out of it too","date":"2016-08-10T19:50:53.919Z","type":"message"}
{"nick":"seventh","reason":"Ping timeout: 276 seconds","date":"2016-08-10T19:56:45.364Z","type":"quit"}
{"nick":"aklein","message":"dherman, caitp: yeah, I think the right next step is to file a bug with use-case(s)","date":"2016-08-10T20:05:06.525Z","type":"message"}
{"nick":"aklein","message":"will help the folks who work on the API to prioritize with respect to other ongoing work","date":"2016-08-10T20:05:21.912Z","type":"message"}
{"nick":"aklein","message":"caitp: I would lgtm a change that got rid of the extra functions that are only there to support ES5 requirements.","date":"2016-08-10T20:06:05.954Z","type":"message"}
{"nick":"aklein","message":"no legacy code could possibly depend on this, since it would have no knowledge of toStringTag","date":"2016-08-10T20:06:23.976Z","type":"message"}
{"nick":"caitp","message":"hmm, chromium has std::regex as a \"banned\" feature because \"too many regex engines already in chromium, use re2 instead\"","date":"2016-08-10T20:20:26.285Z","type":"message"}
{"nick":"caitp","message":"but I don't think I want to add an re2 dependency, and I don't think I want to use JSRegExp for this :<","date":"2016-08-10T20:24:37.762Z","type":"message"}
{"nick":"Net147","reason":"Ping timeout: 240 seconds","date":"2016-08-10T20:28:12.345Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T20:33:22.809Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 250 seconds","date":"2016-08-10T20:35:21.929Z","type":"quit"}
{"nick":"caitp","message":"speaking of the API, it seems weird that RegExp is exposed through the api, but not most of the useful operations specific to RegExp","date":"2016-08-10T21:00:04.187Z","type":"message"}
{"nick":"caitp","message":"and using them from C++ is in general is pretty unfriendly","date":"2016-08-10T21:00:50.484Z","type":"message"}
{"nick":"dherman","message":"aklein: I have a few thoughts but it's not 100% coherent. would it be better to just share my thoughts and have the discussion in the bug thread, or to try to work out a more concrete proposal first?","date":"2016-08-10T21:04:59.669Z","type":"message"}
{"nick":"NewNewbie","reason":"Quit: Connection closed for inactivity","date":"2016-08-10T21:09:34.379Z","type":"quit"}
{"nick":"aklein","message":"dherman: I don't think your proposal has to be super-concrete for this purpose, I think the general shape would be valuable","date":"2016-08-10T21:42:17.506Z","type":"message"}
{"nick":"aklein","message":"caitp: I understand using JSRegExp isn't ideal, but could you get by with it to start with?","date":"2016-08-10T21:43:28.590Z","type":"message"}
{"nick":"aklein","message":"caitp: and there would definitely be value to Blink in having regexp matching exposed in some way via the API (probably not on v8::RegExp, but somehow)","date":"2016-08-10T21:44:13.366Z","type":"message"}
{"nick":"aklein","message":"right now the bits of DOM that use regexps do something really ugly like keep a separate v8::Context around just for this purpose","date":"2016-08-10T21:44:30.591Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-10T21:46:16.008Z","type":"quit"}
{"nick":"koldbrutality","reason":"Ping timeout: 240 seconds","date":"2016-08-10T22:07:33.960Z","type":"quit"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2016-08-10T22:13:15.818Z","type":"quit"}
{"nick":"bobmcw","date":"2016-08-10T22:18:01.723Z","type":"join"}
{"nick":"bobmcw","reason":"Changing host","date":"2016-08-10T22:18:01.778Z","type":"quit"}
{"nick":"bobmcw","date":"2016-08-10T22:18:01.778Z","type":"join"}
{"nick":"bobmcw","reason":"Ping timeout: 250 seconds","date":"2016-08-10T22:22:23.597Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2016-08-10T22:33:01.791Z","type":"join"}
{"nick":"koldbrutality","date":"2016-08-10T22:45:04.956Z","type":"join"}
{"nick":"Net147","reason":"Ping timeout: 265 seconds","date":"2016-08-10T22:53:36.805Z","type":"quit"}
{"nick":"Net147","date":"2016-08-10T22:59:34.752Z","type":"join"}
{"nick":"bradleymeck","date":"2016-08-10T22:59:57.596Z","type":"join"}
