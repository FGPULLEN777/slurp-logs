{"nick":"watilde","date":"2016-02-03T00:03:12.977Z","type":"join"}
{"nick":"watilde","reason":"Ping timeout: 240 seconds","date":"2016-02-03T00:07:26.356Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2016-02-03T00:31:06.315Z","type":"quit"}
{"nick":"plutoniix","date":"2016-02-03T01:08:32.473Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-02-03T02:13:38.353Z","type":"quit"}
{"nick":"watilde","date":"2016-02-03T03:06:10.317Z","type":"join"}
{"nick":"watilde","reason":"Ping timeout: 245 seconds","date":"2016-02-03T03:10:30.772Z","type":"quit"}
{"nick":"watilde","date":"2016-02-03T03:11:41.057Z","type":"join"}
{"nick":"watilde","reason":"Ping timeout: 245 seconds","date":"2016-02-03T03:38:50.787Z","type":"quit"}
{"nick":"watilde","date":"2016-02-03T03:39:56.801Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2016-02-03T04:11:45.480Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2016-02-03T04:17:27.555Z","type":"join"}
{"nick":"zv_","date":"2016-02-03T04:56:00.796Z","type":"join"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-02-03T06:46:14.655Z","type":"quit"}
{"nick":"jgi","date":"2016-02-03T07:03:21.013Z","type":"join"}
{"nick":"davi","date":"2016-02-03T07:09:56.709Z","type":"join"}
{"nick":"davi","reason":"Changing host","date":"2016-02-03T07:09:56.710Z","type":"quit"}
{"nick":"davi","date":"2016-02-03T07:09:56.710Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-02-03T07:38:22.495Z","type":"quit"}
{"nick":"jgi","date":"2016-02-03T07:38:47.633Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-02-03T07:44:39.699Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by machenbach@chromium.org: closed","date":"2016-02-03T07:44:55.929Z","type":"message"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by machenbach@chromium.org: closed (repairing things)","date":"2016-02-03T07:54:57.748Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open (resolved breakage -> crbug.com/583585)","date":"2016-02-03T08:18:06.713Z","type":"message"}
{"nick":"rendar","date":"2016-02-03T09:39:02.496Z","type":"join"}
{"nick":"BobGneu","reason":"Ping timeout: 250 seconds","date":"2016-02-03T09:39:34.702Z","type":"quit"}
{"nick":"BobGneu","date":"2016-02-03T09:41:12.683Z","type":"join"}
{"nick":"zv_","reason":"Ping timeout: 245 seconds","date":"2016-02-03T09:58:00.775Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by machenbach@chromium.org: open","date":"2016-02-03T09:58:39.243Z","type":"message"}
{"nick":"zv_","date":"2016-02-03T10:00:03.085Z","type":"join"}
{"nick":"thefourtheye___","date":"2016-02-03T10:06:53.600Z","type":"join"}
{"nick":"zv_","reason":"Ping timeout: 240 seconds","date":"2016-02-03T10:33:46.093Z","type":"quit"}
{"nick":"zv_","date":"2016-02-03T10:35:51.571Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-02-03T10:38:35.758Z","type":"quit"}
{"nick":"zv_","reason":"Ping timeout: 245 seconds","date":"2016-02-03T10:40:55.768Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: Tree is closed (Automatic: \"Check\" on http://build.chromium.org/p/client.v8/builders/V8%20Mac64%20ASAN/builds/4459 \"V8 Mac64 ASAN\" from 007e14ce4ba444531e9ec27b3e2a760f80cb801c: titzer@chromium.org)","date":"2016-02-03T11:43:18.669Z","type":"message"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by bmeurer@google.com: Tree is open","date":"2016-02-03T12:01:25.484Z","type":"message"}
{"nick":"thefourtheye___","reason":"Quit: Connection closed for inactivity","date":"2016-02-03T12:19:40.879Z","type":"quit"}
{"nick":"thefourtheye___","date":"2016-02-03T13:48:23.782Z","type":"join"}
{"nick":"ofrobots","date":"2016-02-03T13:52:00.571Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-03T14:13:16.704Z","type":"quit"}
{"nick":"jugglinmike","date":"2016-02-03T14:20:11.041Z","type":"join"}
{"nick":"bradleymeck","date":"2016-02-03T14:25:46.747Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 248 seconds","date":"2016-02-03T14:45:24.455Z","type":"quit"}
{"nick":"plutoniix","date":"2016-02-03T14:50:11.376Z","type":"join"}
{"nick":"sammy_","date":"2016-02-03T14:59:57.825Z","type":"join"}
{"nick":"sammy_","new_nick":"Guest64018","date":"2016-02-03T15:00:20.965Z","type":"nick"}
{"nick":"Guest64018","message":"hey, i'm super new to v8, c++ and javascript. But I'm looking to create a node addon that performs faster than current execution in javascript. but all the basic benchmarking tests i've been doing for simple things in v8 in comparison to javascript are much slower. ","date":"2016-02-03T15:01:42.460Z","type":"message"}
{"nick":"Guest64018","message":"does anyone have any advice on when converting a module to c++ might be more performant than javascript? or maybe i'm doing something wrong","date":"2016-02-03T15:02:02.539Z","type":"message"}
{"nick":"caitp","message":"Guest64018, one of the big causes of slowness is frequently jumping between JS and C++ code","date":"2016-02-03T15:09:56.506Z","type":"message"}
{"nick":"caitp","message":"backends can't, except in very specialized cases, inline calls to code in C++, no way to minimize register saving, calling convention issues, it's overhead that adds up if you have to do it very frequently","date":"2016-02-03T15:11:56.162Z","type":"message"}
{"nick":"caitp","message":"there are probably better reasons, but those are what I gather are the big ones","date":"2016-02-03T15:12:29.846Z","type":"message"}
{"nick":"Guest64018","message":"thanks so much. what about creating a js object directly in c++ and then converting it? would that provide any performance enhancement or same issues?","date":"2016-02-03T15:25:48.003Z","type":"message"}
{"nick":"ofrobots","date":"2016-02-03T15:27:56.797Z","type":"join"}
{"nick":"caitp","message":"converting it?","date":"2016-02-03T15:34:34.842Z","type":"message"}
{"nick":"caitp","message":"what does your module do exactly?","date":"2016-02-03T15:36:06.308Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-02-03T15:37:44.927Z","type":"quit"}
{"nick":"Guest64018","message":"it manipulates a js object by adding/removing/updating properties (1000+x)","date":"2016-02-03T15:38:36.711Z","type":"message"}
{"nick":"Guest64018","message":"trying to see if i can get a speedup by writing it in c++ but the time it takes for marshaling is so slow, very discouraging. was thinking if i connect to the db directly and create the object in c++ and pass it forward after all the manipulations it will be faster but perhaps not","date":"2016-02-03T15:39:35.289Z","type":"message"}
{"nick":"caitp","message":"accessing properties from js can be faster if the shape of the object is always the same","date":"2016-02-03T15:42:05.865Z","type":"message"}
{"nick":"bradleymeck","message":"well the adding/removing probably invalidates that","date":"2016-02-03T15:42:40.459Z","type":"message"}
{"nick":"bradleymeck","message":"Guest50070: if you are using an Object as a dictionary with that many properties, I might take a look at Map as well","date":"2016-02-03T15:43:10.611Z","type":"message"}
{"nick":"Guest64018","message":"no the shape changes, which is why i was thinking there might be a speedup with c++ but even doing a basic comparison of large object manipulation between js and c++ still shows js outperforming c for me","date":"2016-02-03T15:43:13.724Z","type":"message"}
{"nick":"caitp","message":"you could try CreateDataProperty(), when changing property v alues","date":"2016-02-03T15:44:09.564Z","type":"message"}
{"nick":"caitp","message":"it should do a better job than Set()","date":"2016-02-03T15:44:16.471Z","type":"message"}
{"nick":"Guest64018","message":"bradleymeck, what do you mean by looking at map?","date":"2016-02-03T15:44:54.486Z","type":"message"}
{"nick":"bradleymeck","message":"Guest64018: the JS Map type","date":"2016-02-03T15:45:22.466Z","type":"message"}
{"nick":"caitp","message":"i'm not sure that would be a performance win ._.","date":"2016-02-03T15:46:02.445Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: ive seen it sometimes win","date":"2016-02-03T15:46:22.562Z","type":"message"}
{"nick":"bradleymeck","message":"but try them all, and then figure out which you want","date":"2016-02-03T15:46:39.278Z","type":"message"}
{"nick":"Guest64018","message":"yeah thanks caitp, i was looking for setters/getters that access memory directly rather than using all the v8 constructs. saw that GetIndexedPropertiesExternalArrayData was a quick way of retrieving property data but that method has now been deprecated, any replacements on new v8 api?","date":"2016-02-03T15:46:39.744Z","type":"message"}
{"nick":"caitp","message":"iirc the externalarraydata stuff was removed","date":"2016-02-03T15:47:00.813Z","type":"message"}
{"nick":"bradleymeck","message":"yes it was","date":"2016-02-03T15:47:19.693Z","type":"message"}
{"nick":"bradleymeck","message":"hence the node snafu","date":"2016-02-03T15:47:24.961Z","type":"message"}
{"nick":"caitp","message":"CreateDataProperty() still cares about object shape and stuff, but it has the advantage of skipping a bunch of gunk in [[DefineOwnProperty]], and doesn't walk the prototype chain every time it is performed","date":"2016-02-03T15:47:54.051Z","type":"message"}
{"nick":"caitp","message":"so it could cut some corners and be a bit faster","date":"2016-02-03T15:48:07.499Z","type":"message"}
{"nick":"Guest64018","message":"ok cool, and it will overwrite a property if its already present?","date":"2016-02-03T15:48:23.906Z","type":"message"}
{"nick":"caitp","message":"not if the property isn't configurable, but in general yes","date":"2016-02-03T15:49:47.192Z","type":"message"}
{"nick":"caitp","message":"and it will fail to add a new property if the object isn't extensible","date":"2016-02-03T15:50:00.738Z","type":"message"}
{"nick":"bradleymeck","message":"aklein: you ever get a chance to look at the Node ES module proposal?","date":"2016-02-03T15:51:21.237Z","type":"message"}
{"nick":"Guest64018","message":"not sure what configurable or extensible means yet but i'll have a look at creating a js object in c++ and hopefully figure it out. thanks very much you guys, been working on this for a while now getting stuck and discouraged.","date":"2016-02-03T15:52:10.243Z","type":"message"}
{"nick":"caitp","message":"configurable as in doesn't have that DontDelete property flag, and extensible as in the object wasn't frozen/sealed/target of Object.preventExtensions()","date":"2016-02-03T15:53:49.522Z","type":"message"}
{"nick":"thefourtheye___","reason":"Quit: Connection closed for inactivity","date":"2016-02-03T15:59:40.990Z","type":"quit"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2010030309]","date":"2016-02-03T15:59:52.261Z","type":"quit"}
