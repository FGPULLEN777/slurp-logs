{"nick":"Cube","reason":"Remote host closed the connection","date":"2016-08-28T02:03:21.859Z","type":"quit"}
{"nick":"zv","date":"2016-08-28T02:08:02.610Z","type":"join"}
{"nick":"bradleymeck","date":"2016-08-28T02:51:01.518Z","type":"join"}
{"nick":"mikolalysenko_","date":"2016-08-28T03:21:54.282Z","type":"join"}
{"nick":"Garbee_","date":"2016-08-28T03:25:14.034Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 258 seconds","date":"2016-08-28T03:25:57.067Z","type":"quit"}
{"nick":"jochen__","reason":"Ping timeout: 258 seconds","date":"2016-08-28T03:25:57.760Z","type":"quit"}
{"nick":"scottmg","reason":"Ping timeout: 258 seconds","date":"2016-08-28T03:25:57.925Z","type":"quit"}
{"nick":"Garbee","reason":"Ping timeout: 258 seconds","date":"2016-08-28T03:25:58.668Z","type":"quit"}
{"nick":"seththompson","reason":"Ping timeout: 258 seconds","date":"2016-08-28T03:25:59.116Z","type":"quit"}
{"nick":"Martijnc","reason":"Ping timeout: 258 seconds","date":"2016-08-28T03:25:59.282Z","type":"quit"}
{"nick":"s1w","reason":"Ping timeout: 258 seconds","date":"2016-08-28T03:26:00.487Z","type":"quit"}
{"nick":"s1w","date":"2016-08-28T03:27:53.379Z","type":"join"}
{"nick":"mikolalysenko_","new_nick":"mikolalysenko","date":"2016-08-28T03:28:04.575Z","type":"nick"}
{"nick":"s1w","new_nick":"Guest22353","date":"2016-08-28T03:28:17.120Z","type":"nick"}
{"nick":"Garbee_","new_nick":"Garbee","date":"2016-08-28T03:30:28.545Z","type":"nick"}
{"nick":"seththompson","date":"2016-08-28T03:31:56.013Z","type":"join"}
{"nick":"jochen__","date":"2016-08-28T03:32:08.287Z","type":"join"}
{"nick":"scottmg","date":"2016-08-28T03:32:44.284Z","type":"join"}
{"nick":"Martijnc","date":"2016-08-28T03:34:36.436Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-28T03:35:23.986Z","type":"quit"}
{"nick":"xaxxon","date":"2016-08-28T03:53:34.525Z","type":"join"}
{"nick":"xaxxon","message":"any issues with using FindInstanceInPrototypeChain when changing the prototype of an object after creation?","date":"2016-08-28T03:53:55.927Z","type":"message"}
{"nick":"xaxxon","message":"I'm getting no matches when I'm expecting one","date":"2016-08-28T03:54:10.344Z","type":"message"}
{"nick":"dostoyevsky","date":"2016-08-28T05:17:42.086Z","type":"join"}
{"nick":"dostoyevsky","message":" d->result = Array::New(d->isolate, 0); // is that going to free d->result?  I get an ``Allocation failed'' error after a while ","date":"2016-08-28T05:18:40.227Z","type":"message"}
{"nick":"dostoyevsky","message":"(always creating new d->result which are not that large individually )","date":"2016-08-28T05:20:28.536Z","type":"message"}
{"nick":"dostoyevsky","message":"Should I also generate a new isolate to get the GC going?","date":"2016-08-28T05:26:57.910Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, that will reduce the ref count on whatever d->result pointed to before, if anything","date":"2016-08-28T05:27:51.945Z","type":"message"}
{"nick":"xaxxon","message":"the GC won't run immedaitely because of it, most likely, though","date":"2016-08-28T05:28:13.711Z","type":"message"}
{"nick":"xaxxon","message":"GC is per-isolate... so I don't know what you mean by creating a new isolate to get GC going","date":"2016-08-28T05:28:33.764Z","type":"message"}
{"nick":"xaxxon","message":"an isolate is a completely independent interpreter and shares (virtually) nothing with other isolates","date":"2016-08-28T05:28:51.922Z","type":"message"}
{"nick":"xaxxon","message":"except for certain startup parameters, basically","date":"2016-08-28T05:29:02.871Z","type":"message"}
{"nick":"xaxxon","message":"not sure what your allocation failed error is.. are you making \"a lot\" of them?","date":"2016-08-28T05:29:28.255Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Well, I create many tiny arrays and then call a callback... after calling the callback thousands of times, v8 crashes with \"Allocation error\"... the old arrays were never cleaned up... but nobody should be using them (reference counter should be 0)","date":"2016-08-28T05:30:00.887Z","type":"message"}
{"nick":"xaxxon","message":"you can run the GC manually.   I forget how but it's easy to find","date":"2016-08-28T05:30:40.539Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, ah, found it: *   while(!v8::Isolate::IdleNotificationDeadline([time])) {};                                                                                                ","date":"2016-08-28T05:31:39.881Z","type":"message"}
{"nick":"xaxxon","message":"I dunno what time is, but you can find it in the doxygen docs presumably","date":"2016-08-28T05:32:15.706Z","type":"message"}
{"nick":"xaxxon","message":"it's like floating point seconds or millis or something","date":"2016-08-28T05:32:23.751Z","type":"message"}
{"nick":"xaxxon","message":"maybe post the code for your callback somewhere and link it here?","date":"2016-08-28T05:33:28.503Z","type":"message"}
{"nick":"xaxxon","message":"also, I'm not the most knowledgable about v8... ","date":"2016-08-28T05:33:44.549Z","type":"message"}
{"nick":"xaxxon","message":"but as to one of your statements, you can see that the GC is called on the isolate object.. so a different isolate wouldn't have a related GC","date":"2016-08-28T05:35:17.809Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: yeah, I do not think running the gc is the problem...","date":"2016-08-28T05:35:27.077Z","type":"message"}
{"nick":"xaxxon","message":"is the \"allocation failed\" a v8 error or a system one?","date":"2016-08-28T05:35:54.923Z","type":"message"}
{"nick":"dostoyevsky","message":"Because you get this \"<--- Last few GCs --->\" error message","date":"2016-08-28T05:36:12.859Z","type":"message"}
{"nick":"xaxxon","message":"I have no idea what that is","date":"2016-08-28T05:36:27.416Z","type":"message"}
{"nick":"dostoyevsky","message":"226507 ms: Scavenge 1400.6 (1457.0) -> 1400.6 (1457.0) // 227789 ms: Mark-sweep 1400.6 (1457.0) -> 1398.5 (1457.0) MB // 229063 ms: Mark-sweep 1398.5 (1457.0) -> 1398.1 (1457.0) MB","date":"2016-08-28T05:36:46.860Z","type":"message"}
{"nick":"dostoyevsky","message":"So it ran but couldn't free anything","date":"2016-08-28T05:37:01.897Z","type":"message"}
{"nick":"dostoyevsky","message":"And then you get: FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory","date":"2016-08-28T05:37:31.832Z","type":"message"}
{"nick":"xaxxon","message":"are you using promises?","date":"2016-08-28T05:37:44.658Z","type":"message"}
{"nick":"xaxxon","message":"if so: https://bugs.chromium.org/p/v8/issues/detail?id=4858","date":"2016-08-28T05:38:01.434Z","type":"message"}
{"nick":"xaxxon","message":"that link may be of interest (just skimmed it)","date":"2016-08-28T05:38:32.302Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, I'm curious what you find, though.  this place is usually pretty dead and I'm always trying ot learn more about v","date":"2016-08-28T05:42:52.818Z","type":"message"}
{"nick":"xaxxon","message":"8","date":"2016-08-28T05:42:53.510Z","type":"message"}
{"nick":"dostoyevsky","message":"And then there is this: https://github.com/katlogic/lv8/blob/344353dac702901c917a4c05438252121c527ab3/lv8.cpp#L755","date":"2016-08-28T05:43:27.389Z","type":"message"}
{"nick":"dostoyevsky","message":"> V8 keeps one instace stale for fast reuse. Allocate dummy one to force flush.","date":"2016-08-28T05:43:43.431Z","type":"message"}
{"nick":"dostoyevsky","message":"So I assume that I should change contexts regularly because the GC might ignore the current context and it is not meant to use it for such a long time, as I do","date":"2016-08-28T05:46:00.738Z","type":"message"}
{"nick":"xaxxon","message":"contexts are what have your functions in them, so you can't just \"switch\" them arbitrarily.   ","date":"2016-08-28T05:46:47.019Z","type":"message"}
{"nick":"xaxxon","message":"I mean, they get built with the templates you've set up","date":"2016-08-28T05:47:09.577Z","type":"message"}
{"nick":"xaxxon","message":"but bec areful.  ","date":"2016-08-28T05:47:14.522Z","type":"message"}
{"nick":"xaxxon","message":"I'd be surprised if the problem isn't something speific with your code, not that you're not playing the right games with v8","date":"2016-08-28T05:47:30.619Z","type":"message"}
{"nick":"xaxxon","message":"can you post the code you're running?","date":"2016-08-28T05:48:09.732Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: it's about 50k of C++ code... not sure if posting it might be helpful","date":"2016-08-28T05:49:35.172Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: but since you say that one isolate per function, then that's interesting... because I have a function with a callback... so that's actually two functions..  and I prepare the parameters for another function in v8 and then call the javascript callback... I could create a new isolate for each function call","date":"2016-08-28T05:51:58.019Z","type":"message"}
{"nick":"xaxxon","message":"I don't think I said what you said I said","date":"2016-08-28T05:52:29.251Z","type":"message"}
{"nick":"xaxxon","message":"and that sounds like a VERY slow way to do things","date":"2016-08-28T05:52:41.154Z","type":"message"}
{"nick":"xaxxon","message":"if you could isolate the memory issue to a smaller section of code, it could help -- both for your own sanity and for someone else to try to help","date":"2016-08-28T05:54:03.879Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Isolate* isolate = Isolate::GetCurrent(); HandleScope scope(isolate); // that's quite cheap imho... I do it for each call into my v8 module","date":"2016-08-28T05:54:08.885Z","type":"message"}
{"nick":"xaxxon","message":"that's not creating a new isolate","date":"2016-08-28T05:54:26.973Z","type":"message"}
{"nick":"dostoyevsky","message":"oh...","date":"2016-08-28T05:54:33.841Z","type":"message"}
{"nick":"xaxxon","message":"that's getting the \"current\" one","date":"2016-08-28T05:54:40.617Z","type":"message"}
{"nick":"xaxxon","message":"v8::Isolate::New() creates a new one","date":"2016-08-28T05:55:20.099Z","type":"message"}
{"nick":"xaxxon","message":"v8 has a lot of state information in it.   You're requesting the isolate it is storing as the \"current\" one to be given back to you","date":"2016-08-28T05:56:12.739Z","type":"message"}
{"nick":"Guest22353","reason":"Changing host","date":"2016-08-28T06:03:15.856Z","type":"quit"}
{"nick":"Guest22353","date":"2016-08-28T06:03:16.051Z","type":"join"}
{"nick":"Guest22353","new_nick":"s1w","date":"2016-08-28T06:03:17.492Z","type":"nick"}
{"nick":"dostoyevsky","message":"xaxxon: I got it down to a few line of code","date":"2016-08-28T06:17:35.991Z","type":"message"}
{"nick":"xaxxon","message":"well, share share :)","date":"2016-08-28T06:19:09.188Z","type":"message"}
{"nick":"dostoyevsky","message":"http://ideone.com/clWSy1","date":"2016-08-28T06:20:48.597Z","type":"message"}
{"nick":"dostoyevsky","message":"That will just blow up... because result is never freed","date":"2016-08-28T06:21:00.790Z","type":"message"}
{"nick":"xaxxon","message":"and what if you put a GC call in there?","date":"2016-08-28T06:22:20.908Z","type":"message"}
{"nick":"xaxxon","message":"V8 isn't threaded behidn the scenes","date":"2016-08-28T06:22:29.526Z","type":"message"}
{"nick":"xaxxon","message":"so it won't GC in the middle of your calls","date":"2016-08-28T06:22:41.588Z","type":"message"}
{"nick":"xaxxon","message":"(I don't think)","date":"2016-08-28T06:23:02.848Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Well, result is used for a javascript callback... so the GC should run there, no?","date":"2016-08-28T06:23:14.764Z","type":"message"}
{"nick":"xaxxon","message":"well, that's a lot of objects.   not sure it's supposed to work","date":"2016-08-28T06:23:57.261Z","type":"message"}
{"nick":"dostoyevsky","message":"http://ideone.com/clWSy1 <- I added the error message... you can see that the GC ran... with a heap size of (1457.0) MB","date":"2016-08-28T06:24:14.164Z","type":"message"}
{"nick":"xaxxon","message":"I see.   The limit for 64 bit V8 is around 1.9Gbytes now.  Start V8 with the","date":"2016-08-28T06:25:24.924Z","type":"message"}
{"nick":"xaxxon","message":"https://bugs.chromium.org/p/v8/issues/detail?id=847","date":"2016-08-28T06:25:31.260Z","type":"message"}
{"nick":"xaxxon","message":"that's a bit old, but maybe try that flag","date":"2016-08-28T06:25:50.443Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: I know that I could use more RAM but I just want an array with 100 elements in ram... not the whole dataset","date":"2016-08-28T06:26:48.344Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, please update your example with where you call the callback","date":"2016-08-28T06:27:34.580Z","type":"message"}
{"nick":"xaxxon","message":"otherwise I can't know what data you need when you try to call it","date":"2016-08-28T06:27:51.482Z","type":"message"}
{"nick":"xaxxon","message":"hrm, try this.. move the handlescope inside the first for loop","date":"2016-08-28T06:28:33.552Z","type":"message"}
{"nick":"xaxxon","message":"maybe it doesn't do reference counting when you overwrite a local","date":"2016-08-28T06:28:46.461Z","type":"message"}
{"nick":"xaxxon","message":"maybe it only does it when the handlescope goes away","date":"2016-08-28T06:28:52.486Z","type":"message"}
{"nick":"xaxxon","message":"something like this: http://ideone.com/WnZDCC","date":"2016-08-28T06:29:22.447Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: yeah!","date":"2016-08-28T06:31:20.081Z","type":"message"}
{"nick":"xaxxon","message":":-)","date":"2016-08-28T06:31:28.989Z","type":"message"}
{"nick":"xaxxon","message":"did it work?","date":"2016-08-28T06:31:32.605Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: yeah... no more memory leaks... ","date":"2016-08-28T06:31:43.042Z","type":"message"}
{"nick":"xaxxon","message":"yay.  it wasn't actually leaking it, though.  it was just crashing before it had a chance to clean up","date":"2016-08-28T06:31:58.008Z","type":"message"}
{"nick":"xaxxon","message":"well, I learend something","date":"2016-08-28T06:32:06.080Z","type":"message"}
{"nick":"xaxxon","message":"I thought Local worked more like Global... but alas they are much lighter weight","date":"2016-08-28T06:32:30.463Z","type":"message"}
{"nick":"dostoyevsky","message":"now I just need to figure out if I can call handlescope manually... as I am not using a C++ scope for handling the callbaks","date":"2016-08-28T06:32:33.223Z","type":"message"}
{"nick":"xaxxon","message":"you can't, but that shouldn't matter.    overwriting a variable in JS is different","date":"2016-08-28T06:33:06.120Z","type":"message"}
{"nick":"xaxxon","message":"that DOES affect it's GCability","date":"2016-08-28T06:33:12.896Z","type":"message"}
{"nick":"xaxxon","message":"I'm afraid you may have created a similar, but different problem with your code you posted","date":"2016-08-28T06:34:03.587Z","type":"message"}
{"nick":"xaxxon","message":"vs your actual use case","date":"2016-08-28T06:35:32.488Z","type":"message"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2016-08-28T06:43:45.608Z","type":"quit"}
{"nick":"xaxxon","date":"2016-08-28T06:44:00.576Z","type":"join"}
{"nick":"xaxxon","message":"wrong button","date":"2016-08-28T06:44:04.667Z","type":"message"}
{"nick":"wingo","reason":"Quit: ZNC 1.6.1+deb1 - http://znc.in","date":"2016-08-28T07:46:25.816Z","type":"quit"}
{"nick":"wingo","date":"2016-08-28T07:48:21.177Z","type":"join"}
{"nick":"xiinotulp","date":"2016-08-28T08:19:56.286Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 244 seconds","date":"2016-08-28T08:22:55.103Z","type":"quit"}
{"nick":"davi","date":"2016-08-28T08:33:43.872Z","type":"join"}
{"nick":"dostoyevsky","message":"xaxxon: I tried for a while to see if I could decompose HandleScope into manual mode but it doesn't work... So I will change my internal API to be able to use a true C++ scope and then I should be set...  So what we did was still helpful","date":"2016-08-28T08:42:59.603Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, hrmmm hang on","date":"2016-08-28T08:44:05.917Z","type":"message"}
{"nick":"xaxxon","message":"so the \"ref count\" is the combination of the active javascript variables AND the handlescope","date":"2016-08-28T08:44:22.042Z","type":"message"}
{"nick":"xaxxon","message":"so in yoru real code, if you have a handlescope around the loop, it doesn't matter what goes on in javsript","date":"2016-08-28T08:44:45.647Z","type":"message"}
{"nick":"xaxxon","message":"*typing is hard","date":"2016-08-28T08:44:49.422Z","type":"message"}
{"nick":"xaxxon","message":"both the v8::Local, v8::Global, and plain javascript variables all contribute to the lifetime of the actual memory and inhibit GC","date":"2016-08-28T08:45:44.237Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: The HandleScope in my example that you moved into another scope (of the for loop) cannot be moved in my current code... but there seems not other way","date":"2016-08-28T08:46:08.630Z","type":"message"}
{"nick":"xaxxon","message":"You can create sub-handle scopes","date":"2016-08-28T08:46:23.360Z","type":"message"}
{"nick":"xaxxon","message":"(I think)","date":"2016-08-28T08:46:27.413Z","type":"message"}
{"nick":"xaxxon","message":"locals are associated with the most local handlescope","date":"2016-08-28T08:46:36.917Z","type":"message"}
{"nick":"xaxxon","message":"(I think)","date":"2016-08-28T08:46:41.809Z","type":"message"}
{"nick":"xaxxon","message":"(I'm making this up, but there's a chance it's true)","date":"2016-08-28T08:46:50.120Z","type":"message"}
{"nick":"xaxxon","message":"v8::local is associated with the most \"tightest\" handlescope","date":"2016-08-28T08:47:29.746Z","type":"message"}
{"nick":"xaxxon","message":"am I making sense?  I'm not sure","date":"2016-08-28T08:47:39.559Z","type":"message"}
{"nick":"xaxxon","message":"so you can do handlescope some_local_that_lives_a_while for_loop{handlscope some_short_lifespan_local}","date":"2016-08-28T08:48:15.698Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Well you have different kinds of references...","date":"2016-08-28T08:48:19.626Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: But Scopes are either HandleScope, EscapableHandleScope (return value from a function), or SealHandleScope ... I couldn't find any other use cases in v8's source code","date":"2016-08-28T08:49:35.668Z","type":"message"}
{"nick":"xaxxon","message":"hang on","date":"2016-08-28T08:49:44.511Z","type":"message"}
{"nick":"davi","reason":"Ping timeout: 265 seconds","date":"2016-08-28T08:49:54.704Z","type":"quit"}
{"nick":"xaxxon","message":"dostoyevsky, http://melpon.org/wandbox/permlink/dRtjGHrbPu3LaVM9","date":"2016-08-28T08:50:48.455Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Yeah, but the for-scope doesn't exist in my code...","date":"2016-08-28T08:52:03.736Z","type":"message"}
{"nick":"xaxxon","message":"what are you doing that results in so mayn variables being created that you run out of space?","date":"2016-08-28T08:52:34.704Z","type":"message"}
{"nick":"dostoyevsky","message":"Newer versions of v8 have CloseAndEscape for a scope, which might do what I want","date":"2016-08-28T08:52:44.129Z","type":"message"}
{"nick":"dostoyevsky","message":"http://melpon.org/wandbox/permlink/okjgXfENBxOfAdTB (c&p from v8 source)","date":"2016-08-28T08:55:04.622Z","type":"message"}
{"nick":"dostoyevsky","message":"slow_storage = loop_scope.CloseAndEscape(new_storage); // this might be just what I would need ... ","date":"2016-08-28T08:55:49.916Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: I keep some GB of data in sqlite databases and want to process these GB of data... in JavaScript... so the result sets become too large","date":"2016-08-28T08:56:49.322Z","type":"message"}
{"nick":"xaxxon","message":"right, I was figuring you'd load a row, process it, then throw away the row","date":"2016-08-28T08:57:19.341Z","type":"message"}
{"nick":"xaxxon","message":"load the next row","date":"2016-08-28T08:57:26.288Z","type":"message"}
{"nick":"xaxxon","message":"for(auto & row : results) {","date":"2016-08-28T08:57:50.350Z","type":"message"}
{"nick":"xaxxon","message":"handlescope hs; ...create JS objects...;  call_callback(...js objects...); }","date":"2016-08-28T08:58:16.903Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: I call the callback for every 10000 rows, to keep the overhead minimal","date":"2016-08-28T08:58:35.162Z","type":"message"}
{"nick":"xaxxon","message":"have you benchmarked this?   I'm guessing the cost of creating all these JS vars is massive compared to the per-call cost of calling your callback","date":"2016-08-28T08:59:38.318Z","type":"message"}
{"nick":"xaxxon","message":"also, did you try bumping up the heap size limit?","date":"2016-08-28T08:59:53.980Z","type":"message"}
{"nick":"xaxxon","message":"there's no memory leak.   You're simply creating more objects than it's set to allow","date":"2016-08-28T09:00:10.289Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: I need to be websql compatible too...","date":"2016-08-28T09:00:10.849Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: the callback expects the full dataset in results.rows ...  I just had the idea of calling the cb multiple times to get it work with my GB of datasets","date":"2016-08-28T09:01:17.877Z","type":"message"}
{"nick":"thefourtheye","date":"2016-08-28T09:01:28.489Z","type":"join"}
{"nick":"xaxxon","message":"dostoyevsky, you don't have to actually put all the data in there, though.   You can pretend","date":"2016-08-28T09:01:49.280Z","type":"message"}
{"nick":"xaxxon","message":"and load lazy behind the scenes","date":"2016-08-28T09:01:53.414Z","type":"message"}
{"nick":"xaxxon","message":"no good database driver dumps all the data on you in one big chunk ","date":"2016-08-28T09:02:35.528Z","type":"message"}
{"nick":"xaxxon","message":"and with javascript it's extra super easy to intercept the calls","date":"2016-08-28T09:02:58.734Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: they don't?  Well, websql has a 20M limit or so :)","date":"2016-08-28T09:03:02.704Z","type":"message"}
{"nick":"xaxxon","message":"but does it actually load up all the data right away?","date":"2016-08-28T09:03:42.300Z","type":"message"}
{"nick":"xaxxon","message":"I'm guessing no, it just makes it look like it","date":"2016-08-28T09:03:59.886Z","type":"message"}
{"nick":"dostoyevsky","message":"But still, I just can return EMOREDATAREADY in my sql_retrieve function and then have a loop in the v8 module... for the scope","date":"2016-08-28T09:04:20.713Z","type":"message"}
{"nick":"xaxxon","message":"but anyhow, you can't return more objects than your JS environment will let you -- doesn't matter if it's embedded V8 or running in chrome","date":"2016-08-28T09:04:23.226Z","type":"message"}
{"nick":"xiinotulp","new_nick":"plutoniix","date":"2016-08-28T09:04:31.927Z","type":"nick"}
{"nick":"xaxxon","message":"so either you increase the memory limit or you lower the max rows returned at once","date":"2016-08-28T09:04:48.894Z","type":"message"}
{"nick":"xaxxon","message":"the point is that V8 is acting appropriately and you're calling it correctly","date":"2016-08-28T09:05:00.346Z","type":"message"}
{"nick":"xaxxon","message":"you're simply asking it to do something it won't","date":"2016-08-28T09:05:06.070Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: websql will load all the data right away... but the other node.js sql apis use streaming apis to cope with large data sets","date":"2016-08-28T09:05:21.541Z","type":"message"}
{"nick":"xaxxon","message":"you don't need a \"streaming api\" to not load all the data at once","date":"2016-08-28T09:05:39.549Z","type":"message"}
{"nick":"xaxxon","message":"you can hook into array and atribute lookups","date":"2016-08-28T09:05:55.239Z","type":"message"}
{"nick":"xaxxon","message":"so when someone says database_results[2].some_value -- you can intercept the array index call and load the result then","date":"2016-08-28T09:06:32.653Z","type":"message"}
{"nick":"xaxxon","message":"or take it out of a c++ cache","date":"2016-08-28T09:06:40.991Z","type":"message"}
{"nick":"xaxxon","message":"from a coding perspective, you don't know if the data is being loaded all at once or not","date":"2016-08-28T09:07:26.052Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Well, suppose you had such a cache in a v8 module, how could you sope it?  You would load it when?  In what cope and when you read it from JS--it's still there?  What kind of sope would that be?  And you'd end up with the same problem","date":"2016-08-28T09:08:37.221Z","type":"message"}
{"nick":"xaxxon","message":"the handlescope would be inside the callback associated with the array lookup","date":"2016-08-28T09:09:13.910Z","type":"message"}
{"nick":"xaxxon","message":"which would leave the only references in the user code and allow the GC to run on the data as soon as the user code didn't have a reference to it","date":"2016-08-28T09:09:37.378Z","type":"message"}
{"nick":"xaxxon","message":"so if the user handled it row by row, then only a row's worth of data at a time would be unGCable","date":"2016-08-28T09:10:05.871Z","type":"message"}
{"nick":"xaxxon","message":"but that's what you want -- the memory usage to scale with the user-code's requirements","date":"2016-08-28T09:10:29.244Z","type":"message"}
{"nick":"xaxxon","message":"not with the full data set's","date":"2016-08-28T09:10:46.856Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: And how would you not end up with all the data in memory?  What are you going to do if someoone periodiacally asks for results.item(0) ?  Just re-execute the SQL for the data you already purged from RAM?","date":"2016-08-28T09:10:58.973Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, there are all sorts of caching options.   ","date":"2016-08-28T09:11:52.377Z","type":"message"}
{"nick":"xaxxon","message":"but I don't understand what else you think you can do","date":"2016-08-28T09:11:57.430Z","type":"message"}
{"nick":"dostoyevsky","message":"You'd be implementing a virtual memory management based on SQL results sets... ","date":"2016-08-28T09:11:57.589Z","type":"message"}
{"nick":"xaxxon","message":"you're trying to put more stuff in memory than V8 will allow for.  ","date":"2016-08-28T09:12:20.791Z","type":"message"}
{"nick":"xaxxon","message":"you HAVE to do something differnet","date":"2016-08-28T09:12:30.291Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Yeah, just operate in chunks... same like with when you do read() in c++... your idea seems to be to invent mmap() for sql :)","date":"2016-08-28T09:13:06.335Z","type":"message"}
{"nick":"xaxxon","message":"this is what most database drivers do","date":"2016-08-28T09:13:30.515Z","type":"message"}
{"nick":"xaxxon","message":"you can request amssive datasets an access them as if it's all there, but it's being loaded from the DB behind the scenes","date":"2016-08-28T09:13:51.230Z","type":"message"}
{"nick":"xaxxon","message":"optimziations can be done to help certain acces patterns have lower latency","date":"2016-08-28T09:14:42.307Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: I've never seen any db driver like this... and never seen a low level SQL api offer that kind of caching","date":"2016-08-28T09:15:29.153Z","type":"message"}
{"nick":"xaxxon","message":"well, anyhow, you have to figure out something else, and you know your use cases best.. ","date":"2016-08-28T09:17:31.040Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: Yeah, but thanks for helping me figuring out how to use handle scope properly :)","date":"2016-08-28T09:19:06.787Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, happy to help","date":"2016-08-28T09:21:44.065Z","type":"message"}
{"nick":"xaxxon","message":"I learned something too.   also, usually this channel is compltely dead","date":"2016-08-28T09:21:54.250Z","type":"message"}
{"nick":"xaxxon","message":"v8-users mailing list or stackoverflow are better places to find help","date":"2016-08-28T09:22:06.717Z","type":"message"}
{"nick":"dostoyevsky","message":"yeah :-/  reading the v8 source code is quite educating...  but still I do not really like that kind of c++ very much, very dogmatic, not really versatile to use in your own c++ code","date":"2016-08-28T09:25:02.041Z","type":"message"}
{"nick":"xaxxon","message":"dostoyevsky, well, much of v8 is dictated by requirements for javascript and for performance. ","date":"2016-08-28T09:29:00.742Z","type":"message"}
{"nick":"xaxxon","message":"it's very important for it to be fast, ls that requires certain usability tradeoffs.   but the options are always there.   ","date":"2016-08-28T09:29:49.467Z","type":"message"}
{"nick":"dostoyevsky","message":"xaxxon: e->Set(v8::String::NewFromUtf8(isolate, \"message\"), v8::String::NewFromUtf8(isolate, s->error)) // why not just write e->Set(\"message\", s->error) ?  It's not like boost hasn't taught us for decades how to write great APIs... ","date":"2016-08-28T09:34:26.800Z","type":"message"}
{"nick":"xaxxon","message":"https://google.github.io/styleguide/cppguide.html#Function_Overloading","date":"2016-08-28T09:35:45.715Z","type":"message"}
{"nick":"xaxxon","message":"the number of combinatinos you'd need to provide would be quite large","date":"2016-08-28T09:35:58.771Z","type":"message"}
{"nick":"xaxxon","message":"the API is consistent in wanting the JS types, not C++ types","date":"2016-08-28T09:36:15.931Z","type":"message"}
{"nick":"xaxxon","message":"because you'd have to accept the JS types, too.   and would you take JS/C++ and C++/JS as well as C++/C++ and JS/JS?","date":"2016-08-28T09:37:01.892Z","type":"message"}
{"nick":"xaxxon","message":"what about std::string?","date":"2016-08-28T09:37:07.497Z","type":"message"}
{"nick":"xaxxon","message":"the point is that the type is going to be a JS type, so if it needs to be converted, let the user take care of deciding how to do it","date":"2016-08-28T09:37:32.641Z","type":"message"}
{"nick":"xaxxon","message":"at least that' smy interpretation","date":"2016-08-28T09:37:42.185Z","type":"message"}
{"nick":"xaxxon","message":"also, boost isn't what I'd call great APIs","date":"2016-08-28T09:40:43.023Z","type":"message"}
{"nick":"wingo","reason":"Quit: ZNC 1.6.1+deb1 - http://znc.in","date":"2016-08-28T09:57:10.022Z","type":"quit"}
{"nick":"xaxxon","reason":"Ping timeout: 250 seconds","date":"2016-08-28T09:58:03.723Z","type":"quit"}
{"nick":"xaxxon","date":"2016-08-28T10:11:54.335Z","type":"join"}
{"nick":"wingo","date":"2016-08-28T10:16:23.844Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2016-08-28T11:28:15.504Z","type":"quit"}
{"nick":"saper_","new_nick":"saper","date":"2016-08-28T11:31:17.375Z","type":"nick"}
{"nick":"davi","date":"2016-08-28T11:36:27.903Z","type":"join"}
{"nick":"davi","reason":"Remote host closed the connection","date":"2016-08-28T11:56:30.044Z","type":"quit"}
{"nick":"rmcilroy","reason":"Ping timeout: 264 seconds","date":"2016-08-28T12:23:15.986Z","type":"quit"}
{"nick":"rmcilroy","date":"2016-08-28T12:35:33.979Z","type":"join"}
{"nick":"rmcilroy","reason":"Ping timeout: 264 seconds","date":"2016-08-28T13:13:03.983Z","type":"quit"}
{"nick":"rmcilroy","date":"2016-08-28T13:25:05.992Z","type":"join"}
{"nick":"rmcilroy","reason":"Ping timeout: 264 seconds","date":"2016-08-28T13:46:03.981Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-08-28T13:57:59.003Z","type":"join"}
{"nick":"rmcilroy","date":"2016-08-28T14:45:13.004Z","type":"join"}
{"nick":"davi","date":"2016-08-28T15:38:09.672Z","type":"join"}
