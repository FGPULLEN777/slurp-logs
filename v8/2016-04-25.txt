{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T00:19:33.599Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T00:21:05.525Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T00:26:21.995Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T00:29:40.240Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T00:42:22.170Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T00:44:47.907Z","type":"join"}
{"nick":"JoWie","reason":"Quit: Connection closed for inactivity","date":"2016-04-25T00:50:27.181Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T00:50:44.984Z","type":"quit"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-04-25T00:52:19.631Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-04-25T01:19:30.767Z","type":"quit"}
{"nick":"esas","reason":"Ping timeout: 240 seconds","date":"2016-04-25T02:11:34.041Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2016-04-25T02:16:49.969Z","type":"quit"}
{"nick":"xaxxon_","reason":"Ping timeout: 246 seconds","date":"2016-04-25T02:28:24.106Z","type":"quit"}
{"nick":"plutoniix","date":"2016-04-25T03:18:12.476Z","type":"join"}
{"nick":"xaxxon","date":"2016-04-25T03:26:58.227Z","type":"join"}
{"nick":"bradleymeck","date":"2016-04-25T03:40:27.250Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-04-25T04:02:04.100Z","type":"quit"}
{"nick":"xaxxon","reason":"Ping timeout: 268 seconds","date":"2016-04-25T04:05:48.212Z","type":"quit"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-04-25T04:20:48.507Z","type":"quit"}
{"nick":"bobmcw","date":"2016-04-25T04:20:58.876Z","type":"join"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-04-25T04:21:04.516Z","type":"quit"}
{"nick":"bobmcw","date":"2016-04-25T04:30:36.213Z","type":"join"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-04-25T04:37:30.679Z","type":"quit"}
{"nick":"bobmcw","date":"2016-04-25T04:37:42.444Z","type":"join"}
{"nick":"xaxxon","date":"2016-04-25T04:55:44.129Z","type":"join"}
{"nick":"ofrobots","date":"2016-04-25T05:18:38.697Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 252 seconds","date":"2016-04-25T05:34:52.428Z","type":"quit"}
{"nick":"plutoniix","date":"2016-04-25T05:47:55.642Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 260 seconds","date":"2016-04-25T05:59:49.473Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T06:01:50.826Z","type":"quit"}
{"nick":"plutoniix","date":"2016-04-25T06:16:35.746Z","type":"join"}
{"nick":"rendar","date":"2016-04-25T06:40:36.720Z","type":"join"}
{"nick":"rendar","reason":"Ping timeout: 246 seconds","date":"2016-04-25T06:55:06.109Z","type":"quit"}
{"nick":"plutoniix","reason":"Ping timeout: 252 seconds","date":"2016-04-25T06:57:55.539Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T07:02:33.184Z","type":"join"}
{"nick":"rendar","date":"2016-04-25T07:04:22.072Z","type":"join"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-04-25T07:04:59.520Z","type":"quit"}
{"nick":"bobmcw","date":"2016-04-25T07:05:31.462Z","type":"join"}
{"nick":"plutoniix","date":"2016-04-25T07:10:40.674Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T07:59:19.158Z","type":"quit"}
{"nick":"zv","reason":"Ping timeout: 268 seconds","date":"2016-04-25T08:30:58.269Z","type":"quit"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-04-25T09:09:17.947Z","type":"quit"}
{"nick":"bobmcw","date":"2016-04-25T09:09:26.767Z","type":"join"}
{"nick":"bobmcw","reason":"Read error: Connection reset by peer","date":"2016-04-25T10:01:42.015Z","type":"quit"}
{"nick":"bobmcw","date":"2016-04-25T10:20:25.341Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: จรลี จรลา","date":"2016-04-25T11:15:52.104Z","type":"quit"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-04-25T11:27:39.853Z","type":"quit"}
{"nick":"oleavr","reason":"Ping timeout: 268 seconds","date":"2016-04-25T12:58:36.315Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-04-25T13:04:08.911Z","type":"join"}
{"nick":"oleavr","date":"2016-04-25T13:05:57.187Z","type":"join"}
{"nick":"jugglinmike","date":"2016-04-25T13:26:48.485Z","type":"join"}
{"nick":"caitp","message":"do you think ignition will eventually allow us to move all of the desugaring from the parser to the bytecode generator","date":"2016-04-25T13:40:21.751Z","type":"message"}
{"nick":"caitp","message":"because that would be awesome","date":"2016-04-25T13:40:24.853Z","type":"message"}
{"nick":"caitp","message":"registers instead of variables, imagine","date":"2016-04-25T13:40:47.148Z","type":"message"}
{"nick":"jugglinmike","reason":"Ping timeout: 240 seconds","date":"2016-04-25T13:41:34.027Z","type":"quit"}
{"nick":"caitp","message":"that would probably boost CodeLoad scores a good amount, too","date":"2016-04-25T13:42:00.530Z","type":"message"}
{"nick":"caitp","message":"and maybe some day, parser-base can be implemented in a source file rather than a header, and making small changes to it won't require rebuilding a bunch of unrelated stuff --- and inlining will still be totally possible, because all callers will be in the source file itself","date":"2016-04-25T13:43:24.686Z","type":"message"}
{"nick":"caitp","message":"between the two of those changes, you could make the difference between the parser and preparser totally transparent","date":"2016-04-25T13:43:46.575Z","type":"message"}
{"nick":"caitp","message":"simplifying everything, wow","date":"2016-04-25T13:43:58.997Z","type":"message"}
{"nick":"caitp","message":"well, one can hope","date":"2016-04-25T13:44:11.980Z","type":"message"}
{"nick":"pringlescan","date":"2016-04-25T13:45:33.511Z","type":"join"}
{"nick":"jugglinmike","date":"2016-04-25T13:48:39.717Z","type":"join"}
{"nick":"davi_","date":"2016-04-25T14:05:49.860Z","type":"join"}
{"nick":"davi_","reason":"Remote host closed the connection","date":"2016-04-25T14:11:49.816Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-04-25T14:12:51.589Z","type":"quit"}
{"nick":"davi","date":"2016-04-25T14:13:08.120Z","type":"join"}
{"nick":"xaxxon","reason":"Ping timeout: 246 seconds","date":"2016-04-25T14:15:24.114Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-04-25T14:18:29.923Z","type":"join"}
{"nick":"ofrobots","date":"2016-04-25T14:37:02.768Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-04-25T15:06:04.391Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T15:06:22.011Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T15:10:00.320Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-04-25T15:14:30.724Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-04-25T15:19:27.841Z","type":"join"}
{"nick":"Fishrock123","message":"ANyone here able to help me with the v8::Set native API?","date":"2016-04-25T15:19:40.799Z","type":"message"}
{"nick":"plutoniix","date":"2016-04-25T15:20:06.719Z","type":"join"}
{"nick":"caitp","message":"Fishrock123: what about it?","date":"2016-04-25T15:21:01.449Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: When I do a `set->Delete(env->context(), value);`, it has 3 items in it. One gets deleted, one turns to undefined, the other is untouched.","date":"2016-04-25T15:22:43.701Z","type":"message"}
{"nick":"Fishrock123","message":"The undefined part is the problem","date":"2016-04-25T15:22:50.016Z","type":"message"}
{"nick":"Fishrock123","message":"One of the keys keeps turning to undefined without my doing anything to it as far as I can tel","date":"2016-04-25T15:23:08.451Z","type":"message"}
{"nick":"Fishrock123","message":"This is v8 5.0 (Node master)","date":"2016-04-25T15:23:28.127Z","type":"message"}
{"nick":"caitp","message":"you mean that Set::Has() continues to return true for the key?","date":"2016-04-25T15:23:35.438Z","type":"message"}
{"nick":"caitp","message":"it continues to show up in forEach() / etc?","date":"2016-04-25T15:23:58.486Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: I mean wehn I get the Array of values (AsArray()), one of the values is undefined","date":"2016-04-25T15:24:13.335Z","type":"message"}
{"nick":"caitp","message":"interesting, hang on a sec","date":"2016-04-25T15:24:23.582Z","type":"message"}
{"nick":"Fishrock123","message":"(I'm viewing it from JavaScript but the problem is also present in c++)","date":"2016-04-25T15:24:26.788Z","type":"message"}
{"nick":"caitp","message":"does the `undefined` show up at the end of the array, no matter which item was deleted?","date":"2016-04-25T15:26:08.571Z","type":"message"}
{"nick":"caitp","message":"actually, I guess it wouldn't","date":"2016-04-25T15:26:41.530Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: It appears to show up at the beginning","date":"2016-04-25T15:27:04.114Z","type":"message"}
{"nick":"caitp","message":"yeah, I think the Set::AsArray code is a bit off","date":"2016-04-25T15:27:35.706Z","type":"message"}
{"nick":"Fishrock123","message":"Note again, I'm only deleting one, which gets deleted but another turns to undefined and ends up at the start of the array","date":"2016-04-25T15:27:38.340Z","type":"message"}
{"nick":"caitp","message":"afaik you should get a different result from Array.from(<the set>)","date":"2016-04-25T15:27:48.155Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: oh hmmm, is there a better way to iterate? (Preferably in c++...)","date":"2016-04-25T15:28:03.454Z","type":"message"}
{"nick":"caitp","message":"aklein might know if the chrome api depends on this quirk, but if not it seems like a bug","date":"2016-04-25T15:28:06.849Z","type":"message"}
{"nick":"caitp","message":"er, if chrome depends on it","date":"2016-04-25T15:28:19.323Z","type":"message"}
{"nick":"caitp","message":"there isn't really another way exposed in the api","date":"2016-04-25T15:28:44.301Z","type":"message"}
{"nick":"caitp","message":"far as I can see","date":"2016-04-25T15:28:47.234Z","type":"message"}
{"nick":"Fishrock123","message":"*sigh*, aight. Thanks for the info.","date":"2016-04-25T15:29:25.384Z","type":"message"}
{"nick":"caitp","message":"you should probably file a bug, I can't think of a good reason to record the hole-y items as undefined","date":"2016-04-25T15:29:44.732Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: hole-y?","date":"2016-04-25T15:30:12.762Z","type":"message"}
{"nick":"caitp","message":"what happens is, AsArray allocates a backing store for the Array it creates, initializing each item to undefined --- then loops over each element in the hash set. if it's not deleted, it puts the value in the backing store, otherwise it doesn't","date":"2016-04-25T15:31:21.940Z","type":"message"}
{"nick":"caitp","message":"so deleted items show up in the list as undefined, as an own property","date":"2016-04-25T15:31:59.098Z","type":"message"}
{"nick":"caitp","message":"I think this is a bug, and it's still present on ToT --- so you should file it","date":"2016-04-25T15:32:34.778Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: ok, mind linking the bug tracker? I always forget where it is at :(","date":"2016-04-25T15:37:01.188Z","type":"message"}
{"nick":"caitp","message":"https://bugs.chromium.org/p/v8/issues/list","date":"2016-04-25T15:37:16.503Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: Hmmm, isn't there still another issue though? I have a Set with 3 items, do a single Delete, and it ends up with one item and an undefined..","date":"2016-04-25T15:39:25.186Z","type":"message"}
{"nick":"caitp","message":"hm","date":"2016-04-25T15:39:48.945Z","type":"message"}
{"nick":"Fishrock123","message":"If it matters, the items are Errors, specifically promise rejection \"reason\"s.","date":"2016-04-25T15:39:57.545Z","type":"message"}
{"nick":"caitp","message":"do two of those errors have the same identity?","date":"2016-04-25T15:40:20.648Z","type":"message"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2010030309]","date":"2016-04-25T15:40:23.082Z","type":"quit"}
{"nick":"caitp","message":"that could be a separate issue with the hashtable implementation, but that's more work to deal with","date":"2016-04-25T15:40:59.539Z","type":"message"}
{"nick":"caitp","message":"if you can provide a reproduction for that, we can look into it easier","date":"2016-04-25T15:41:08.406Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: How would I check if they have the same identity? They definitely have different stack traces.","date":"2016-04-25T15:41:44.349Z","type":"message"}
{"nick":"caitp","message":"either they're the same object, (eg obj1 === obj2), or we're erroneously giving them the same hash value","date":"2016-04-25T15:42:21.591Z","type":"message"}
{"nick":"caitp","message":"or, a third possibility is that the internal iteration over the hash table is just wrong","date":"2016-04-25T15:42:45.944Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: Is that just Local1 == Local2 in c++?","date":"2016-04-25T15:43:06.268Z","type":"message"}
{"nick":"caitp","message":"yeah","date":"2016-04-25T15:43:50.338Z","type":"message"}
{"nick":"pringlescan1","date":"2016-04-25T15:45:49.947Z","type":"join"}
{"nick":"pringlescan","reason":"Ping timeout: 252 seconds","date":"2016-04-25T15:45:55.476Z","type":"quit"}
{"nick":"bobmcw","date":"2016-04-25T15:51:49.377Z","type":"join"}
{"nick":"ofrobots","date":"2016-04-25T15:52:16.039Z","type":"join"}
{"nick":"ofrobots","reason":"Ping timeout: 276 seconds","date":"2016-04-25T15:57:00.628Z","type":"quit"}
{"nick":"aperezdc","reason":"Remote host closed the connection","date":"2016-04-25T16:06:08.303Z","type":"quit"}
{"nick":"aperezdc","date":"2016-04-25T16:10:29.103Z","type":"join"}
{"nick":"Fishrock123","message":"caitp: is it possible to get a reference to Array.from which can be called from C++?","date":"2016-04-25T16:11:19.031Z","type":"message"}
{"nick":"Fishrock123","message":"mostly because adding more JS functions to call is a big mess XD","date":"2016-04-25T16:11:51.239Z","type":"message"}
{"nick":"caitp","message":"you should be able to get it just by compiling and running the script \"(Array.from)\", I think","date":"2016-04-25T16:11:58.547Z","type":"message"}
{"nick":"caitp","message":"or, you could get the Array function and get \"from\" from it","date":"2016-04-25T16:12:09.483Z","type":"message"}
{"nick":"Fishrock123","message":"caitp: You mean just get it off of the gloabal?","date":"2016-04-25T16:13:30.923Z","type":"message"}
{"nick":"caitp","message":"yeah","date":"2016-04-25T16:13:36.659Z","type":"message"}
{"nick":"BobGneu","date":"2016-04-25T16:13:53.508Z","type":"join"}
{"nick":"ofrobots","date":"2016-04-25T16:15:13.477Z","type":"join"}
{"nick":"BobGneu","reason":"Ping timeout: 252 seconds","date":"2016-04-25T16:18:22.524Z","type":"quit"}
{"nick":"BobGneu","date":"2016-04-25T16:19:20.942Z","type":"join"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by mlippautz@google.com: open - mlippautz@ looking at arm64","date":"2016-04-25T16:26:00.482Z","type":"message"}
{"nick":"caitp","message":"Fishrock123: a reproduction would be very helpful, as this seems to be doing the right thing on ToT, even though it doesn't look like it should","date":"2016-04-25T16:26:33.176Z","type":"message"}
{"nick":"caitp","message":"trying in an older version though","date":"2016-04-25T16:26:42.677Z","type":"message"}
{"nick":"Fishrock123","message":"ok I'll see what I can do, probably not for a couple days though. I'm trying to get this together for node's v6 release","date":"2016-04-25T16:27:20.122Z","type":"message"}
{"nick":"Fishrock123","message":"now my functions just won't call though sooooooo","date":"2016-04-25T16:27:37.513Z","type":"message"}
{"nick":"bobmcw","reason":"Remote host closed the connection","date":"2016-04-25T16:33:13.393Z","type":"quit"}
{"nick":"trungl-bot","message":"\u00033\u0002Tree opened\u000f by mlippautz@google.com: Tree is open","date":"2016-04-25T16:34:04.834Z","type":"message"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T16:42:05.580Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T16:50:27.559Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2016-04-25T17:26:19.585Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T17:33:00.140Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T17:33:22.153Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 244 seconds","date":"2016-04-25T17:53:01.992Z","type":"quit"}
{"nick":"davi","date":"2016-04-25T17:57:42.466Z","type":"join"}
{"nick":"aklein","action":"reads up and sees himself mentioned","date":"2016-04-25T18:16:09.619Z","type":"action"}
{"nick":"caitp","message":"re: Set::AsArray() that you added last year, yeah","date":"2016-04-25T18:16:51.015Z","type":"message"}
{"nick":"aklein","message":"caitp: when you say Set::AsArray is a bit off...","date":"2016-04-25T18:17:46.731Z","type":"message"}
{"nick":"caitp","message":"aklein: if any value is the hole (eg, was deleted), then it is kept as undefined in the returned Array","date":"2016-04-25T18:18:50.530Z","type":"message"}
{"nick":"aklein","message":"caitp: can you reproduce that? my reading of the API code specifically skips over holes","date":"2016-04-25T18:19:58.062Z","type":"message"}
{"nick":"caitp","message":"well, the fixed array allocator initializes everything to undefined","date":"2016-04-25T18:20:25.841Z","type":"message"}
{"nick":"caitp","message":"so you skip over them, but the skipped over item is still \"undefined\"","date":"2016-04-25T18:20:41.012Z","type":"message"}
{"nick":"caitp","message":"but, it's hard to reproduce this in the unittest, so I think may need to wait for them to show it","date":"2016-04-25T18:21:07.198Z","type":"message"}
{"nick":"aklein","message":"oh, I see, this is just broken","date":"2016-04-25T18:22:27.148Z","type":"message"}
{"nick":"aklein","message":"heh","date":"2016-04-25T18:22:29.822Z","type":"message"}
{"nick":"aklein","message":"whoops","date":"2016-04-25T18:22:39.870Z","type":"message"}
{"nick":"aklein","message":"the increment shouldn't be in the loop header","date":"2016-04-25T18:23:10.201Z","type":"message"}
{"nick":"caitp","message":"and you'd need to shrink it after --- but the other issue they brought up is even weirder, especially if it happens consistently","date":"2016-04-25T18:23:33.049Z","type":"message"}
{"nick":"aklein","message":"looks like this needs complete rewriting, I don't understand why I thought this was right","date":"2016-04-25T18:23:59.005Z","type":"message"}
{"nick":"caitp","message":"would you be willing to leave it for our new hire? he starts next week","date":"2016-04-25T18:24:32.678Z","type":"message"}
{"nick":"aklein","message":"it's been broken for a year, so sure :)","date":"2016-04-25T18:24:48.356Z","type":"message"}
{"nick":"caitp","message":"nice, thanks","date":"2016-04-25T18:24:55.728Z","type":"message"}
{"nick":"aklein","message":"did a bug get filed for it?","date":"2016-04-25T18:24:56.384Z","type":"message"}
{"nick":"caitp","message":"no, Fishrock123 said he'd probably file one in a few days","date":"2016-04-25T18:25:11.455Z","type":"message"}
{"nick":"aklein","message":"k","date":"2016-04-25T18:25:34.214Z","type":"message"}
{"nick":"pringlescan1","reason":"Ping timeout: 244 seconds","date":"2016-04-25T18:25:34.949Z","type":"quit"}
{"nick":"aklein","message":"excited for the idea of having help fixing bugs :)","date":"2016-04-25T18:28:56.309Z","type":"message"}
{"nick":"pringlescan","date":"2016-04-25T18:31:34.638Z","type":"join"}
{"nick":"caitp","message":"hah, yeah it should be good","date":"2016-04-25T18:32:30.128Z","type":"message"}
{"nick":"davi","reason":"Ping timeout: 246 seconds","date":"2016-04-25T18:38:15.134Z","type":"quit"}
{"nick":"zv","date":"2016-04-25T18:39:13.609Z","type":"join"}
{"nick":"pringlescan","reason":"Quit: Leaving.","date":"2016-04-25T18:40:38.018Z","type":"quit"}
{"nick":"pringlescan","date":"2016-04-25T18:41:28.497Z","type":"join"}
{"nick":"pringlescan","reason":"Client Quit","date":"2016-04-25T18:41:42.962Z","type":"quit"}
{"nick":"zv","reason":"Ping timeout: 260 seconds","date":"2016-04-25T18:44:12.702Z","type":"quit"}
{"nick":"rendar","reason":"Ping timeout: 252 seconds","date":"2016-04-25T18:55:07.495Z","type":"quit"}
{"nick":"aklein","message":"caitp: hmm, looks like the S390 change actually pointed out a bug in our ** operator?","date":"2016-04-25T18:59:53.263Z","type":"message"}
{"nick":"caitp","message":"in the fake constant folding bit","date":"2016-04-25T19:00:45.196Z","type":"message"}
{"nick":"rendar","date":"2016-04-25T19:01:38.139Z","type":"join"}
{"nick":"aklein","message":"yeah :)","date":"2016-04-25T19:01:49.342Z","type":"message"}
{"nick":"aklein","message":"is it even worth having the fake constant folding?","date":"2016-04-25T19:01:59.723Z","type":"message"}
{"nick":"aklein","message":"maybe we should just delete this and let the backends handle it?","date":"2016-04-25T19:02:07.627Z","type":"message"}
{"nick":"caitp","message":"maybe --- how reproducible is it off aix?","date":"2016-04-25T19:02:38.443Z","type":"message"}
{"nick":"caitp","message":"i think the folding is good for common cases like bitsets","date":"2016-04-25T19:04:08.340Z","type":"message"}
{"nick":"caitp","message":"we could just add extra constraints to it","date":"2016-04-25T19:04:37.839Z","type":"message"}
{"nick":"aklein","message":"oh, I see, it doesn't come up","date":"2016-04-25T19:05:31.234Z","type":"message"}
{"nick":"aklein","message":"because of the constraints","date":"2016-04-25T19:05:34.425Z","type":"message"}
{"nick":"aklein","message":"(it's only an issue with infinite or nan exponents)","date":"2016-04-25T19:05:50.472Z","type":"message"}
{"nick":"zv","date":"2016-04-25T19:11:32.639Z","type":"join"}
{"nick":"sxaPi2","date":"2016-04-25T19:12:47.438Z","type":"join"}
{"nick":"sxa__","reason":"Ping timeout: 264 seconds","date":"2016-04-25T19:14:52.004Z","type":"quit"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T19:40:06.879Z","type":"quit"}
{"nick":"rendar","reason":"Ping timeout: 246 seconds","date":"2016-04-25T19:50:00.142Z","type":"quit"}
{"nick":"rendar","date":"2016-04-25T19:56:51.014Z","type":"join"}
{"nick":"ofrobots","date":"2016-04-25T20:10:16.866Z","type":"join"}
{"nick":"pringlescan","date":"2016-04-25T20:21:53.971Z","type":"join"}
{"nick":"Venemo","date":"2016-04-25T21:04:35.656Z","type":"join"}
{"nick":"ofrobots","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-04-25T21:30:03.685Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T21:32:14.976Z","type":"join"}
{"nick":"ofrobots","reason":"Client Quit","date":"2016-04-25T21:34:34.998Z","type":"quit"}
{"nick":"pringlescan","reason":"Quit: Leaving.","date":"2016-04-25T21:46:04.045Z","type":"quit"}
{"nick":"pringlescan","date":"2016-04-25T21:46:48.692Z","type":"join"}
{"nick":"pringlescan","reason":"Read error: Connection reset by peer","date":"2016-04-25T21:46:51.210Z","type":"quit"}
{"nick":"ofrobots","date":"2016-04-25T21:56:13.146Z","type":"join"}
{"nick":"RT|Chatzilla","date":"2016-04-25T22:15:26.313Z","type":"join"}
{"nick":"Fishrock123","date":"2016-04-25T22:30:45.034Z","type":"join"}
{"nick":"jugglinmike","reason":"Ping timeout: 260 seconds","date":"2016-04-25T22:41:02.682Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-04-25T22:46:22.274Z","type":"join"}
{"nick":"pringlescan","date":"2016-04-25T22:56:49.891Z","type":"join"}
{"nick":"plutoniix","reason":"Read error: Connection reset by peer","date":"2016-04-25T22:59:56.210Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-04-25T23:02:48.175Z","type":"quit"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-04-25T23:16:40.275Z","type":"quit"}
{"nick":"pringlescan","reason":"Quit: Leaving.","date":"2016-04-25T23:45:22.746Z","type":"quit"}
{"nick":"pringlescan","date":"2016-04-25T23:46:45.013Z","type":"join"}
{"nick":"bradleymeck","date":"2016-04-25T23:49:02.972Z","type":"join"}
