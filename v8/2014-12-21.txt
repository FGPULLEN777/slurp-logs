{"nick":"jmar777","date":"2014-12-21T00:01:11.621Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-12-21T00:03:23.781Z","type":"quit"}
{"nick":"jmar777","date":"2014-12-21T00:06:12.913Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-12-21T00:07:38.767Z","type":"quit"}
{"nick":"jmar777","date":"2014-12-21T00:18:05.550Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 244 seconds","date":"2014-12-21T00:32:28.456Z","type":"quit"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-12-21T00:48:01.081Z","type":"quit"}
{"nick":"jmar777","date":"2014-12-21T01:06:06.709Z","type":"join"}
{"nick":"caitp-","date":"2014-12-21T01:10:48.341Z","type":"join"}
{"nick":"caitp","reason":"Ping timeout: 244 seconds","date":"2014-12-21T01:13:30.315Z","type":"quit"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-12-21T01:21:44.727Z","type":"quit"}
{"nick":"jmar777","date":"2014-12-21T03:37:10.521Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-12-21T03:47:39.333Z","type":"quit"}
{"nick":"jmar777","date":"2014-12-21T05:00:18.000Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-12-21T05:29:28.400Z","type":"quit"}
{"nick":"petka_","reason":"Quit: Connection closed for inactivity","date":"2014-12-21T05:34:45.570Z","type":"quit"}
{"nick":"jmar777","date":"2014-12-21T06:28:03.636Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-12-21T07:24:54.256Z","type":"quit"}
{"nick":"davi","date":"2014-12-21T07:43:24.509Z","type":"join"}
{"nick":"saurik_","new_nick":"saurik","date":"2014-12-21T11:50:25.633Z","type":"nick"}
{"nick":"jmar777","date":"2014-12-21T12:02:16.746Z","type":"join"}
{"nick":"jmar777","reason":"Ping timeout: 258 seconds","date":"2014-12-21T12:08:31.550Z","type":"quit"}
{"nick":"petka_","date":"2014-12-21T12:21:44.653Z","type":"join"}
{"nick":"bnoordhuis","date":"2014-12-21T12:30:48.420Z","type":"join"}
{"nick":"muelli","date":"2014-12-21T13:15:57.319Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 255 seconds","date":"2014-12-21T13:51:43.444Z","type":"quit"}
{"nick":"davi","reason":"Ping timeout: 252 seconds","date":"2014-12-21T13:58:57.362Z","type":"quit"}
{"nick":"jmar777","date":"2014-12-21T14:05:45.113Z","type":"join"}
{"nick":"saapas","reason":"Remote host closed the connection","date":"2014-12-21T14:08:04.022Z","type":"quit"}
{"nick":"jmar777","reason":"Ping timeout: 258 seconds","date":"2014-12-21T14:10:48.467Z","type":"quit"}
{"nick":"caitp-","reason":"Quit: Leaving","date":"2014-12-21T14:55:51.255Z","type":"quit"}
{"nick":"KillerJim","date":"2014-12-21T15:32:55.204Z","type":"join"}
{"nick":"KillerJim","message":"I have a some code that send a string to a functionTemplate - for example : \"myTestVar : \" + testVar","date":"2014-12-21T15:34:11.917Z","type":"message"}
{"nick":"KillerJim","message":"but if I do info[0]->IsString() it returns false","date":"2014-12-21T15:34:16.788Z","type":"message"}
{"nick":"KillerJim","message":"but \"string sText = *v8::String::Utf8Value(info[0]->ToString()) ;\" works fine and I see the string..","date":"2014-12-21T15:34:39.476Z","type":"message"}
{"nick":"KillerJim","message":"how can I validate parameters are strings when they are more complex than just a \"string\"","date":"2014-12-21T15:34:56.683Z","type":"message"}
{"nick":"bnoordhuis","date":"2014-12-21T15:36:08.709Z","type":"join"}
{"nick":"katu","message":"\"send\" how?","date":"2014-12-21T15:51:08.940Z","type":"message"}
{"nick":"KillerJim","message":"basically in JS they do this.log(\"myTestVar : \" + testVar) and in my C++ land I've log as a functionTemplate which I then walk the args on","date":"2014-12-21T15:54:10.933Z","type":"message"}
