{"nick":"watilde","date":"2016-02-16T00:20:58.098Z","type":"join"}
{"nick":"watilde","reason":"Ping timeout: 264 seconds","date":"2016-02-16T00:27:47.703Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2016-02-16T00:32:39.125Z","type":"quit"}
{"nick":"xaxxon","date":"2016-02-16T01:04:57.114Z","type":"join"}
{"nick":"plutoniix","date":"2016-02-16T01:26:04.914Z","type":"join"}
{"nick":"jugglinmike","reason":"Ping timeout: 250 seconds","date":"2016-02-16T01:35:30.407Z","type":"quit"}
{"nick":"evanlucas","reason":"Max SendQ exceeded","date":"2016-02-16T01:53:35.689Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-16T01:54:15.222Z","type":"join"}
{"nick":"xaxxon","reason":"Read error: Connection reset by peer","date":"2016-02-16T02:00:34.745Z","type":"quit"}
{"nick":"xaxxon","date":"2016-02-16T02:34:27.081Z","type":"join"}
{"nick":"xaxxon","message":"wow.. is it expected that a simple javascript-only progrma would take less than 1/10 the time to run than a c++-backed version of that same program?   made a loop that allocates an object and then calls a simple function that returns a property of that object.    js-only: <.5s   cpp-backed object:   9s+","date":"2016-02-16T02:36:23.858Z","type":"message"}
{"nick":"xaxxon","message":"I guess the javascript compiler can't optimize my c++ code?","date":"2016-02-16T02:36:39.496Z","type":"message"}
{"nick":"caitp","message":"it can't","date":"2016-02-16T02:37:07.905Z","type":"message"}
{"nick":"caitp","message":"the backend can only optimize specific builtins that it knows a lot about","date":"2016-02-16T02:37:25.509Z","type":"message"}
{"nick":"xaxxon","message":"Switching to an optimized build the numbers change drastically, but the relative difference remains the same... they're both 10x faster","date":"2016-02-16T02:38:09.932Z","type":"message"}
{"nick":"caitp","message":"js backends can't optimize your C++ code","date":"2016-02-16T02:38:38.424Z","type":"message"}
{"nick":"xaxxon","message":"but now it's 1s vs 0.1s    yeah, that makes sense.   ","date":"2016-02-16T02:38:45.715Z","type":"message"}
{"nick":"xaxxon","message":"so frequent calls in and out of C++ code is bad, huh?","date":"2016-02-16T02:38:56.275Z","type":"message"}
{"nick":"caitp","message":"yes","date":"2016-02-16T02:39:07.993Z","type":"message"}
{"nick":"caitp","message":"on the other hand, there are some pickmups","date":"2016-02-16T02:39:27.911Z","type":"message"}
{"nick":"xaxxon","message":"caitp trying to benchmark using SetPrototype on already-existing objects, but I'm finding all sorts of surprises well before I'm getting anywhere near that","date":"2016-02-16T02:39:57.078Z","type":"message"}
{"nick":"caitp","message":"https://twitter.com/caitp88/status/698693948441804800 << note bmeurer's reply, which is well known but not articulated in my comment","date":"2016-02-16T02:40:02.076Z","type":"message"}
{"nick":"caitp","message":"the C++ code has the advantage of being faster for more diverse types","date":"2016-02-16T02:40:10.001Z","type":"message"}
{"nick":"caitp","message":"not penalized for polymorphism","date":"2016-02-16T02:40:18.742Z","type":"message"}
{"nick":"caitp","message":"but, js backends can still make the js code look really really good in a microbenchmark, just due to how the compiler works","date":"2016-02-16T02:42:08.612Z","type":"message"}
{"nick":"caitp","message":"it can just remove all kinds of code that never gets used","date":"2016-02-16T02:42:15.337Z","type":"message"}
{"nick":"caitp","message":"or evaluated","date":"2016-02-16T02:42:19.245Z","type":"message"}
{"nick":"caitp","message":"the C++ compiler can't do that because it doesn't know","date":"2016-02-16T02:42:27.026Z","type":"message"}
{"nick":"caitp","message":"https://www.youtube.com/watch?v=65-RbBwZQdU&hd=1 or mraleph explaining why it might just be the microbenchmark itself that's fooling you","date":"2016-02-16T02:43:43.818Z","type":"message"}
{"nick":"xaxxon","message":"well, I keep asking on the mailing lists for someone to provide some sort of understanding of the performance implications of dynamically setting object prototypes.. and no one will answer my questions except someone named \"jakob\" who is very... uninformative with his answers.   I've asked for a basic description of what types of performance implications I'd see and he said \"certain things may be slow\" and I asked him what types of things I should benchmark","date":"2016-02-16T02:47:20.100Z","type":"message"}
{"nick":"xaxxon","message":" and he says \"What you'll use\"... but I'm in a situation where I'm trying to figure out what approach I want to use because going down the wrong path could be painful to revert by the time I udnerstand the problems.. so microbenchmarks are what I have :-\\","date":"2016-02-16T02:47:20.492Z","type":"message"}
{"nick":"caitp","message":"the most meaningful thing you can do is try this in an actual meaningful application, and benchmark the actual application","date":"2016-02-16T02:52:25.347Z","type":"message"}
{"nick":"caitp","message":"in order to weigh the performance","date":"2016-02-16T02:52:36.029Z","type":"message"}
{"nick":"caitp","message":"because most likely any microbenchmark you write will be meaningless","date":"2016-02-16T02:52:43.212Z","type":"message"}
{"nick":"caitp","message":"most likely you won't see a 10x difference in a real app, it will be much more subtle","date":"2016-02-16T02:53:24.336Z","type":"message"}
{"nick":"caitp","message":"and the C++ might even win","date":"2016-02-16T02:53:39.106Z","type":"message"}
{"nick":"xaxxon","reason":"Remote host closed the connection","date":"2016-02-16T03:03:01.011Z","type":"quit"}
{"nick":"xaxxon","date":"2016-02-16T03:03:13.117Z","type":"join"}
{"nick":"xaxxon","message":"caitp that youtube link is fun.   That guy is a good speaker.  ","date":"2016-02-16T03:29:36.289Z","type":"message"}
{"nick":"xaxxon","message":"and yeah.. my \"benchmark\" wasn't even mildly unoptimizable... ","date":"2016-02-16T03:30:42.533Z","type":"message"}
{"nick":"petka____","reason":"Quit: Connection closed for inactivity","date":"2016-02-16T03:40:34.190Z","type":"quit"}
{"nick":"xaxxon","reason":"Read error: Connection reset by peer","date":"2016-02-16T04:05:10.944Z","type":"quit"}
{"nick":"plutoniix","reason":"Read error: Connection reset by peer","date":"2016-02-16T04:07:51.540Z","type":"quit"}
{"nick":"xaxxon","date":"2016-02-16T04:11:42.597Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: My Mac has gone to sleep. ZZZzzzâ€¦","date":"2016-02-16T04:52:02.389Z","type":"quit"}
{"nick":"xaxxon","date":"2016-02-16T05:12:46.428Z","type":"join"}
{"nick":"xaxxon","reason":"Client Quit","date":"2016-02-16T05:12:52.629Z","type":"quit"}
{"nick":"xaxxon","date":"2016-02-16T05:13:04.079Z","type":"join"}
{"nick":"watilde","date":"2016-02-16T05:25:58.970Z","type":"join"}
{"nick":"watilde","reason":"Ping timeout: 252 seconds","date":"2016-02-16T05:31:06.143Z","type":"quit"}
{"nick":"plutoniix","date":"2016-02-16T05:32:05.151Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-16T06:02:00.291Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-16T06:02:18.882Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-16T07:16:41.925Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-16T07:17:16.706Z","type":"join"}
{"nick":"esas","reason":"Read error: Connection reset by peer","date":"2016-02-16T07:31:13.796Z","type":"quit"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-16T07:32:08.655Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-16T07:32:36.830Z","type":"join"}
{"nick":"watilde","date":"2016-02-16T07:39:41.038Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-16T07:43:04.342Z","type":"quit"}
{"nick":"evanluca_","date":"2016-02-16T07:43:04.554Z","type":"join"}
{"nick":"chrisdickinson","reason":"Ping timeout: 276 seconds","date":"2016-02-16T07:43:53.208Z","type":"quit"}
{"nick":"chrisdickinson","date":"2016-02-16T07:47:20.962Z","type":"join"}
{"nick":"Clinteger","reason":"Ping timeout: 256 seconds","date":"2016-02-16T07:47:26.727Z","type":"quit"}
{"nick":"watilde","reason":"Remote host closed the connection","date":"2016-02-16T07:48:41.701Z","type":"quit"}
{"nick":"Clinteger","date":"2016-02-16T07:49:47.093Z","type":"join"}
{"nick":"xaxxon","message":"if I create an object from a functiontemplate and then set it as the prototype of another object via: o = Object.create(new CppBackedObject()); and then call o.function_only_in_cppbackedobject();  should I expect FunctionCallbackInfo.Holder() to be the CppBackedObject I created earlier?   When I try to get the internalfield while calling that method, I'm getting nullptr and if I print out the address of the object (which I know can","date":"2016-02-16T07:50:54.336Z","type":"message"}
{"nick":"xaxxon","message":" change, but I'm doing these things back to back), the address of Holder() is always 0x100 higher than the object created in the call to new CppBackedObject() earlier","date":"2016-02-16T07:50:54.762Z","type":"message"}
{"nick":"xaxxon","message":"hrmm, maybe Im' doing something else wrong... trying to simplify the code and it's still failing","date":"2016-02-16T07:54:42.273Z","type":"message"}
{"nick":"JoWie","date":"2016-02-16T07:55:34.760Z","type":"join"}
{"nick":"jochen__","message":"you have to create CppBackedObject from C++","date":"2016-02-16T07:59:53.572Z","type":"message"}
