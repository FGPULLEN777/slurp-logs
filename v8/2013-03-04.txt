{"nick":"Frippe","date":"2013-03-04T00:31:25.594Z","type":"join"}
{"nick":"Frippe","reason":"Quit: Computer has gone to sleep.","date":"2013-03-04T00:47:23.851Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 248 seconds","date":"2013-03-04T02:16:01.352Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T03:22:03.579Z","type":"join"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-03-04T03:23:35.191Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2013-03-04T03:27:06.356Z","type":"quit"}
{"nick":"xan_","date":"2013-03-04T06:47:38.149Z","type":"join"}
{"nick":"Alex_Gaynor","reason":"Ping timeout: 252 seconds","date":"2013-03-04T06:58:42.734Z","type":"quit"}
{"nick":"sanjoyd","reason":"Ping timeout: 252 seconds","date":"2013-03-04T06:59:11.384Z","type":"quit"}
{"nick":"Frippe","date":"2013-03-04T07:49:29.085Z","type":"join"}
{"nick":"Frippe","reason":"Client Quit","date":"2013-03-04T07:53:21.610Z","type":"quit"}
{"nick":"Frippe","date":"2013-03-04T07:56:06.558Z","type":"join"}
{"nick":"Alex_Gaynor","date":"2013-03-04T08:08:08.490Z","type":"join"}
{"nick":"guor","reason":"Remote host closed the connection","date":"2013-03-04T08:22:10.416Z","type":"quit"}
{"nick":"guor","date":"2013-03-04T08:22:50.403Z","type":"join"}
{"nick":"stampho_","new_nick":"stampho","date":"2013-03-04T08:45:11.702Z","type":"nick"}
{"nick":"faceleg","date":"2013-03-04T09:12:41.829Z","type":"join"}
{"nick":"faceleg","message":"Hi room","date":"2013-03-04T09:13:21.218Z","type":"message"}
{"nick":"faceleg","message":"My google is broken, I can't find docs for Persistent<Function>","date":"2013-03-04T09:13:36.562Z","type":"message"}
{"nick":"faceleg","message":"specifically, I'm looking to find out whether I need to specify the # of args expected for a given function","date":"2013-03-04T09:13:58.499Z","type":"message"}
{"nick":"faceleg","message":"uh sorry I mean \"im developing a node module with v*","date":"2013-03-04T09:15:53.754Z","type":"message"}
{"nick":"faceleg","message":"v8* sigh, it's been a long day","date":"2013-03-04T09:16:01.399Z","type":"message"}
{"nick":"faceleg","message":"never mind, found answer here: http://nodejs.org/api/addons.html#addons_function_arguments","date":"2013-03-04T09:16:33.205Z","type":"message"}
{"nick":"faceleg","message":"thanks for eventually reading this and thinking of me","date":"2013-03-04T09:16:43.918Z","type":"message"}
{"nick":"sanjoyd","date":"2013-03-04T09:26:49.815Z","type":"join"}
{"nick":"guor","message":"in any case faceleg, about that escape from handle scope question","date":"2013-03-04T09:55:18.744Z","type":"message"}
{"nick":"guor","message":"you only have to escape a handle if it's been created in that handle scope","date":"2013-03-04T09:55:32.832Z","type":"message"}
{"nick":"guor","message":"for v8::Undefined for example that would be unnecessesary","date":"2013-03-04T09:55:52.867Z","type":"message"}
{"nick":"faceleg","message":"oh ok","date":"2013-03-04T09:57:19.944Z","type":"message"}
{"nick":"faceleg","message":"if I\"m retunring scope.Close(someObject->handle_)","date":"2013-03-04T09:57:52.279Z","type":"message"}
{"nick":"faceleg","message":"do I ned to do anything special?","date":"2013-03-04T09:57:57.832Z","type":"message"}
{"nick":"guor","message":"the reason is that when a HandleScope is deconstructed, it destroys all the handles created inside that scope","date":"2013-03-04T09:58:18.147Z","type":"message"}
{"nick":"faceleg","message":"ohhhhh","date":"2013-03-04T09:58:27.510Z","type":"message"}
{"nick":"faceleg","message":"hmm","date":"2013-03-04T09:58:30.430Z","type":"message"}
{"nick":"faceleg","message":"so if","date":"2013-03-04T09:58:33.880Z","type":"message"}
{"nick":"guor","message":"if you use scope.Close on an handle inside that scope, it gets moved to the outer scope before the scope is destroyed","date":"2013-03-04T09:58:44.558Z","type":"message"}
{"nick":"faceleg","message":"and if you don't, the handles get blown away?","date":"2013-03-04T09:59:14.292Z","type":"message"}
{"nick":"guor","message":"yup","date":"2013-03-04T09:59:18.547Z","type":"message"}
{"nick":"faceleg","message":"does ->Ref() do anything here","date":"2013-03-04T09:59:30.267Z","type":"message"}
{"nick":"faceleg","message":"right","date":"2013-03-04T09:59:37.498Z","type":"message"}
{"nick":"faceleg","message":"so in an async v8 func, that created some uv_work","date":"2013-03-04T09:59:58.061Z","type":"message"}
{"nick":"guor","message":"not sure what ->Ref() does. Doesn't seem part of V8's API","date":"2013-03-04T09:59:59.458Z","type":"message"}
{"nick":"faceleg","message":"yeah","date":"2013-03-04T10:00:04.892Z","type":"message"}
{"nick":"faceleg","message":"I'm wroking with a year stagnant node module","date":"2013-03-04T10:00:15.557Z","type":"message"}
{"nick":"faceleg","message":"trying to update it improve etc","date":"2013-03-04T10:00:21.717Z","type":"message"}
{"nick":"guor","message":"if you want a function to be sort of like void in C, then just return undefined","date":"2013-03-04T10:00:28.169Z","type":"message"}
{"nick":"faceleg","message":"hmm","date":"2013-03-04T10:00:35.918Z","type":"message"}
{"nick":"faceleg","message":"in JS one will use it like: obj.functionName(int, function(error, value) {})","date":"2013-03-04T10:00:58.974Z","type":"message"}
{"nick":"faceleg","message":"in this situation should I use scope.close(undef)","date":"2013-03-04T10:01:17.360Z","type":"message"}
{"nick":"faceleg","message":"?","date":"2013-03-04T10:01:19.916Z","type":"message"}
{"nick":"guor","message":"no. just return V8::Undefined. there is no need to close it because the handle on undefined is not created inside the handle scope","date":"2013-03-04T10:02:23.662Z","type":"message"}
{"nick":"faceleg","message":"and if I assign a variable that wraps a handle_ to a struct, which is then passed as an arg to uv_queue_work, will said var still be destroyed when the main function returns?","date":"2013-03-04T10:02:30.521Z","type":"message"}
{"nick":"guor","message":"undefined is a singleton in V8 and the handle to it is just always there","date":"2013-03-04T10:02:38.740Z","type":"message"}
{"nick":"faceleg","message":"ok","date":"2013-03-04T10:02:44.311Z","type":"message"}
{"nick":"faceleg","message":"do you mean Undefined() or Undefined","date":"2013-03-04T10:02:52.066Z","type":"message"}
{"nick":"guor","message":"Undefined()","date":"2013-03-04T10:03:01.088Z","type":"message"}
{"nick":"faceleg","message":"ok","date":"2013-03-04T10:03:04.433Z","type":"message"}
{"nick":"faceleg","message":"thanks","date":"2013-03-04T10:03:06.916Z","type":"message"}
{"nick":"faceleg","message":"so this way","date":"2013-03-04T10:03:08.915Z","type":"message"}
{"nick":"faceleg","message":"to step through what I'm doing:","date":"2013-03-04T10:03:21.366Z","type":"message"}
{"nick":"faceleg","message":"1. call from js to function that takes an integer and a callback","date":"2013-03-04T10:03:32.700Z","type":"message"}
{"nick":"faceleg","message":"2. said function queues with uv_queue_work, with \"this\"'s handle_, the integer and the callback as properties of a struct","date":"2013-03-04T10:04:11.340Z","type":"message"}
{"nick":"faceleg","message":"in the first uv_work method, the result variable is initialized, populated and added to the uv_work's struct","date":"2013-03-04T10:04:42.727Z","type":"message"}
{"nick":"faceleg","message":"3. then in the second uv_work method, the result value is added to an arg array and passed as parameters to the callback","date":"2013-03-04T10:05:10.750Z","type":"message"}
{"nick":"faceleg","message":"would I close scope on the 3rd step?","date":"2013-03-04T10:05:18.824Z","type":"message"}
{"nick":"faceleg","message":"having opened it on the first? Or should I not be using HandleScope at all","date":"2013-03-04T10:05:43.949Z","type":"message"}
{"nick":"guor","message":"you probably want to use persistent handles instead of local handles in here","date":"2013-03-04T10:06:20.290Z","type":"message"}
{"nick":"faceleg","message":"So instead of: Local<Function> callback = Local<Function>::Cast(args[1]);","date":"2013-03-04T10:06:40.273Z","type":"message"}
{"nick":"faceleg","message":"  ar->callback = Persistent<Function>::New(callback);","date":"2013-03-04T10:06:42.915Z","type":"message"}
{"nick":"faceleg","message":"Persistent<Function> callback = Persistent<Function>::Cast(args[1]);","date":"2013-03-04T10:06:55.852Z","type":"message"}
{"nick":"faceleg","message":"  ar->callback = Persistent<Function>::New(callback);","date":"2013-03-04T10:06:57.916Z","type":"message"}
{"nick":"faceleg","message":"?","date":"2013-03-04T10:06:59.914Z","type":"message"}
{"nick":"guor","message":"I would say yes","date":"2013-03-04T10:07:17.840Z","type":"message"}
{"nick":"guor","message":"I'm not entirely sure though since I have no idea about the node.js part","date":"2013-03-04T10:07:41.275Z","type":"message"}
{"nick":"faceleg","message":"haha","date":"2013-03-04T10:07:45.340Z","type":"message"}
{"nick":"mraleph1","message":"faceleg: you should read through http://kkaefer.github.com/node-cpp-modules/","date":"2013-03-04T10:08:35.787Z","type":"message"}
{"nick":"mraleph1","message":"it's a bit dated (back from 2011) but it gets all important parts about handles right.","date":"2013-03-04T10:08:55.380Z","type":"message"}
{"nick":"faceleg","message":"ok thanks","date":"2013-03-04T10:09:02.122Z","type":"message"}
{"nick":"faceleg","message":"I actually have that open","date":"2013-03-04T10:09:05.829Z","type":"message"}
{"nick":"faceleg","message":"It's just hard to know which guides are still relevant","date":"2013-03-04T10:09:14.190Z","type":"message"}
{"nick":"faceleg","message":"I've jumped into the diving pool and am still flailing around whildly","date":"2013-03-04T10:09:34.693Z","type":"message"}
{"nick":"faceleg","message":"wildly*","date":"2013-03-04T10:09:37.318Z","type":"message"}
{"nick":"faceleg","message":"thanks for your help and patience with this noob","date":"2013-03-04T10:09:45.821Z","type":"message"}
{"nick":"[[zzz]]","date":"2013-03-04T10:13:09.559Z","type":"join"}
{"nick":"faceleg","message":"now I have faith in that document it starts to make more sense...","date":"2013-03-04T10:15:09.199Z","type":"message"}
{"nick":"[[zz]]","reason":"Ping timeout: 272 seconds","date":"2013-03-04T10:16:28.677Z","type":"quit"}
{"nick":"faceleg","message":"hmmm","date":"2013-03-04T10:19:16.193Z","type":"message"}
{"nick":"faceleg","message":"in my \"Baton\", should I define non primitives as Persistent<Type>?","date":"2013-03-04T10:20:01.833Z","type":"message"}
{"nick":"mraleph1","message":"yes","date":"2013-03-04T10:20:25.487Z","type":"message"}
{"nick":"faceleg","message":"it's like there is a light flickering","date":"2013-03-04T10:20:37.073Z","type":"message"}
{"nick":"mraleph1","message":"those that come from JS side that is.","date":"2013-03-04T10:20:39.299Z","type":"message"}
{"nick":"faceleg","message":"those that don't?","date":"2013-03-04T10:20:47.154Z","type":"message"}
{"nick":"faceleg","message":"args.This() comes from JS, right?","date":"2013-03-04T10:20:57.183Z","type":"message"}
{"nick":"mraleph1","message":"those that don't you manage yourself. yes.","date":"2013-03-04T10:21:06.900Z","type":"message"}
{"nick":"mraleph1","message":"Persistent is there to tell V8: \"hey, I am using this guy, to garbage collect it\".","date":"2013-03-04T10:21:29.400Z","type":"message"}
{"nick":"faceleg","message":"I'm coming from ObjC, what is C++ equiv to retain/release?","date":"2013-03-04T10:21:38.687Z","type":"message"}
{"nick":"mraleph1","message":"\"… don't garbage collect it\"","date":"2013-03-04T10:21:46.653Z","type":"message"}
{"nick":"faceleg","message":"mmm","date":"2013-03-04T10:21:51.027Z","type":"message"}
{"nick":"mraleph1","message":"faceleg: there is none","date":"2013-03-04T10:22:01.597Z","type":"message"}
{"nick":"mraleph1","message":"retain/release is a reference counting scheme.","date":"2013-03-04T10:22:12.714Z","type":"message"}
{"nick":"faceleg","message":"oh","date":"2013-03-04T10:22:16.410Z","type":"message"}
{"nick":"mraleph1","message":"none directly built into the language.","date":"2013-03-04T10:22:38.085Z","type":"message"}
{"nick":"faceleg","message":"ah ok","date":"2013-03-04T10:22:45.134Z","type":"message"}
{"nick":"mraleph1","message":"there are smart pointers that do reference counting but this is not what V8 does.","date":"2013-03-04T10:22:53.810Z","type":"message"}
{"nick":"faceleg","message":"so to \"retain\" something, i.e. have it stick around in memory","date":"2013-03-04T10:22:54.615Z","type":"message"}
{"nick":"faceleg","message":"I just don't \"delete\" it?","date":"2013-03-04T10:22:59.191Z","type":"message"}
{"nick":"mraleph1","message":"something your allocated with \"new\" you just don't delete, yes.","date":"2013-03-04T10:23:17.620Z","type":"message"}
{"nick":"mraleph1","message":"this is why its called manual memory management :-)","date":"2013-03-04T10:23:25.856Z","type":"message"}
{"nick":"faceleg","message":"yes ","date":"2013-03-04T10:23:32.889Z","type":"message"}
{"nick":"mraleph1","message":"but V8 has its own garbage collector. so to tell V8 not to delete something you need to hold a handle to an object.","date":"2013-03-04T10:23:48.627Z","type":"message"}
{"nick":"faceleg","message":"don't laugh, but I find retain/release confusing ","date":"2013-03-04T10:23:54.282Z","type":"message"}
{"nick":"faceleg","message":"this \"don't delete it if you don't want it gone\" seems more straight-forward","date":"2013-03-04T10:24:10.804Z","type":"message"}
{"nick":"mraleph1","message":"yes, but both have their own pitfalls in practice.","date":"2013-03-04T10:24:27.948Z","type":"message"}
{"nick":"faceleg","message":"I'm sure they do","date":"2013-03-04T10:24:34.641Z","type":"message"}
{"nick":"faceleg","message":"Programming be like 'dat","date":"2013-03-04T10:24:41.287Z","type":"message"}
{"nick":"faceleg","message":"Now I know slightly better, and having confidence in those slides linked to me","date":"2013-03-04T10:25:55.083Z","type":"message"}
{"nick":"mraleph1","message":"great :-) good luck. I am afk.","date":"2013-03-04T10:26:26.003Z","type":"message"}
{"nick":"faceleg","message":"Thanks for hte help, mraleph1 and guor ","date":"2013-03-04T10:26:43.840Z","type":"message"}
{"nick":"guor","message":"np","date":"2013-03-04T10:26:50.787Z","type":"message"}
{"nick":"faceleg","message":"Does v8 have the _this = this convention ?","date":"2013-03-04T10:40:55.829Z","type":"message"}
{"nick":"guor","message":"nope","date":"2013-03-04T10:41:08.123Z","type":"message"}
{"nick":"faceleg","message":"hopes are dashed on the shores of segfault","date":"2013-03-04T10:42:53.326Z","type":"message"}
{"nick":"faceleg","message":"another question / issue","date":"2013-03-04T11:04:04.095Z","type":"message"}
{"nick":"faceleg","message":"I am intantiating a class in my asyncafter function in V8","date":"2013-03-04T11:04:25.120Z","type":"message"}
{"nick":"faceleg","message":"GitCommit *out = new GitCommit()","date":"2013-03-04T11:04:47.621Z","type":"message"}
{"nick":"faceleg","message":"but it seems that out->handle_ is undefined","date":"2013-03-04T11:04:59.025Z","type":"message"}
{"nick":"faceleg","message":"as this is where my code is segfaulting","date":"2013-03-04T11:05:05.657Z","type":"message"}
{"nick":"faceleg","message":"is there something special I must do to give an instance of a class a \"handle_\"?","date":"2013-03-04T11:05:22.485Z","type":"message"}
{"nick":"C-Man","date":"2013-03-04T11:13:32.410Z","type":"join"}
{"nick":"faceleg","message":"As this: GitCommit *out = new GitCommit();","date":"2013-03-04T11:20:57.690Z","type":"message"}
{"nick":"faceleg","message":"    Handle<Value> argv[1] = { out->handle };","date":"2013-03-04T11:20:59.905Z","type":"message"}
{"nick":"faceleg","message":"is segfaulting","date":"2013-03-04T11:21:01.823Z","type":"message"}
{"nick":"Net147","date":"2013-03-04T11:22:45.370Z","type":"join"}
{"nick":"tellnes","date":"2013-03-04T11:24:29.680Z","type":"join"}
{"nick":"faceleg","message":"so I guess my question is","date":"2013-03-04T11:29:59.099Z","type":"message"}
{"nick":"faceleg","message":"how do I create a js object to be passed to a js callback?","date":"2013-03-04T11:30:09.058Z","type":"message"}
{"nick":"ager","reason":"Remote host closed the connection","date":"2013-03-04T11:37:29.546Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T12:30:03.389Z","type":"join"}
{"nick":"faceleg","message":"If anyone could give me a pointer on how to do this: http://stackoverflow.com/questions/15202676/instantiate-pass-c-object-to-node-js-function-v8","date":"2013-03-04T13:31:02.616Z","type":"message"}
{"nick":"faceleg","message":"I'd love them a long time","date":"2013-03-04T13:31:06.714Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 245 seconds","date":"2013-03-04T13:31:23.389Z","type":"quit"}
{"nick":"Net147","reason":"Read error: Connection reset by peer","date":"2013-03-04T13:34:15.321Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T13:57:55.355Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-03-04T14:06:19.791Z","type":"quit"}
{"nick":"carif","date":"2013-03-04T14:12:29.587Z","type":"join"}
{"nick":"heath","reason":"Read error: Connection reset by peer","date":"2013-03-04T14:36:33.259Z","type":"quit"}
{"nick":"heath","date":"2013-03-04T14:36:49.205Z","type":"join"}
{"nick":"heath","reason":"Changing host","date":"2013-03-04T14:36:49.205Z","type":"quit"}
{"nick":"heath","date":"2013-03-04T14:36:49.206Z","type":"join"}
{"nick":"c4milo","date":"2013-03-04T14:52:28.388Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-03-04T14:59:31.535Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2013-03-04T15:38:46.358Z","type":"quit"}
