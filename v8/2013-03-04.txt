{"nick":"Frippe","date":"2013-03-04T00:31:25.594Z","type":"join"}
{"nick":"Frippe","reason":"Quit: Computer has gone to sleep.","date":"2013-03-04T00:47:23.851Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 248 seconds","date":"2013-03-04T02:16:01.352Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T03:22:03.579Z","type":"join"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-03-04T03:23:35.191Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2013-03-04T03:27:06.356Z","type":"quit"}
{"nick":"xan_","date":"2013-03-04T06:47:38.149Z","type":"join"}
{"nick":"Alex_Gaynor","reason":"Ping timeout: 252 seconds","date":"2013-03-04T06:58:42.734Z","type":"quit"}
{"nick":"sanjoyd","reason":"Ping timeout: 252 seconds","date":"2013-03-04T06:59:11.384Z","type":"quit"}
{"nick":"Frippe","date":"2013-03-04T07:49:29.085Z","type":"join"}
{"nick":"Frippe","reason":"Client Quit","date":"2013-03-04T07:53:21.610Z","type":"quit"}
{"nick":"Frippe","date":"2013-03-04T07:56:06.558Z","type":"join"}
{"nick":"Alex_Gaynor","date":"2013-03-04T08:08:08.490Z","type":"join"}
{"nick":"guor","reason":"Remote host closed the connection","date":"2013-03-04T08:22:10.416Z","type":"quit"}
{"nick":"guor","date":"2013-03-04T08:22:50.403Z","type":"join"}
{"nick":"stampho_","new_nick":"stampho","date":"2013-03-04T08:45:11.702Z","type":"nick"}
{"nick":"faceleg","date":"2013-03-04T09:12:41.829Z","type":"join"}
{"nick":"faceleg","message":"Hi room","date":"2013-03-04T09:13:21.218Z","type":"message"}
{"nick":"faceleg","message":"My google is broken, I can't find docs for Persistent<Function>","date":"2013-03-04T09:13:36.562Z","type":"message"}
{"nick":"faceleg","message":"specifically, I'm looking to find out whether I need to specify the # of args expected for a given function","date":"2013-03-04T09:13:58.499Z","type":"message"}
{"nick":"faceleg","message":"uh sorry I mean \"im developing a node module with v*","date":"2013-03-04T09:15:53.754Z","type":"message"}
{"nick":"faceleg","message":"v8* sigh, it's been a long day","date":"2013-03-04T09:16:01.399Z","type":"message"}
{"nick":"faceleg","message":"never mind, found answer here: http://nodejs.org/api/addons.html#addons_function_arguments","date":"2013-03-04T09:16:33.205Z","type":"message"}
{"nick":"faceleg","message":"thanks for eventually reading this and thinking of me","date":"2013-03-04T09:16:43.918Z","type":"message"}
{"nick":"sanjoyd","date":"2013-03-04T09:26:49.815Z","type":"join"}
{"nick":"guor","message":"in any case faceleg, about that escape from handle scope question","date":"2013-03-04T09:55:18.744Z","type":"message"}
{"nick":"guor","message":"you only have to escape a handle if it's been created in that handle scope","date":"2013-03-04T09:55:32.832Z","type":"message"}
{"nick":"guor","message":"for v8::Undefined for example that would be unnecessesary","date":"2013-03-04T09:55:52.867Z","type":"message"}
{"nick":"faceleg","message":"oh ok","date":"2013-03-04T09:57:19.944Z","type":"message"}
{"nick":"faceleg","message":"if I\"m retunring scope.Close(someObject->handle_)","date":"2013-03-04T09:57:52.279Z","type":"message"}
{"nick":"faceleg","message":"do I ned to do anything special?","date":"2013-03-04T09:57:57.832Z","type":"message"}
{"nick":"guor","message":"the reason is that when a HandleScope is deconstructed, it destroys all the handles created inside that scope","date":"2013-03-04T09:58:18.147Z","type":"message"}
{"nick":"faceleg","message":"ohhhhh","date":"2013-03-04T09:58:27.510Z","type":"message"}
{"nick":"faceleg","message":"hmm","date":"2013-03-04T09:58:30.430Z","type":"message"}
{"nick":"faceleg","message":"so if","date":"2013-03-04T09:58:33.880Z","type":"message"}
{"nick":"guor","message":"if you use scope.Close on an handle inside that scope, it gets moved to the outer scope before the scope is destroyed","date":"2013-03-04T09:58:44.558Z","type":"message"}
{"nick":"faceleg","message":"and if you don't, the handles get blown away?","date":"2013-03-04T09:59:14.292Z","type":"message"}
{"nick":"guor","message":"yup","date":"2013-03-04T09:59:18.547Z","type":"message"}
{"nick":"faceleg","message":"does ->Ref() do anything here","date":"2013-03-04T09:59:30.267Z","type":"message"}
{"nick":"faceleg","message":"right","date":"2013-03-04T09:59:37.498Z","type":"message"}
{"nick":"faceleg","message":"so in an async v8 func, that created some uv_work","date":"2013-03-04T09:59:58.061Z","type":"message"}
{"nick":"guor","message":"not sure what ->Ref() does. Doesn't seem part of V8's API","date":"2013-03-04T09:59:59.458Z","type":"message"}
{"nick":"faceleg","message":"yeah","date":"2013-03-04T10:00:04.892Z","type":"message"}
{"nick":"faceleg","message":"I'm wroking with a year stagnant node module","date":"2013-03-04T10:00:15.557Z","type":"message"}
{"nick":"faceleg","message":"trying to update it improve etc","date":"2013-03-04T10:00:21.717Z","type":"message"}
{"nick":"guor","message":"if you want a function to be sort of like void in C, then just return undefined","date":"2013-03-04T10:00:28.169Z","type":"message"}
{"nick":"faceleg","message":"hmm","date":"2013-03-04T10:00:35.918Z","type":"message"}
{"nick":"faceleg","message":"in JS one will use it like: obj.functionName(int, function(error, value) {})","date":"2013-03-04T10:00:58.974Z","type":"message"}
{"nick":"faceleg","message":"in this situation should I use scope.close(undef)","date":"2013-03-04T10:01:17.360Z","type":"message"}
{"nick":"faceleg","message":"?","date":"2013-03-04T10:01:19.916Z","type":"message"}
{"nick":"guor","message":"no. just return V8::Undefined. there is no need to close it because the handle on undefined is not created inside the handle scope","date":"2013-03-04T10:02:23.662Z","type":"message"}
{"nick":"faceleg","message":"and if I assign a variable that wraps a handle_ to a struct, which is then passed as an arg to uv_queue_work, will said var still be destroyed when the main function returns?","date":"2013-03-04T10:02:30.521Z","type":"message"}
{"nick":"guor","message":"undefined is a singleton in V8 and the handle to it is just always there","date":"2013-03-04T10:02:38.740Z","type":"message"}
{"nick":"faceleg","message":"ok","date":"2013-03-04T10:02:44.311Z","type":"message"}
{"nick":"faceleg","message":"do you mean Undefined() or Undefined","date":"2013-03-04T10:02:52.066Z","type":"message"}
{"nick":"guor","message":"Undefined()","date":"2013-03-04T10:03:01.088Z","type":"message"}
{"nick":"faceleg","message":"ok","date":"2013-03-04T10:03:04.433Z","type":"message"}
{"nick":"faceleg","message":"thanks","date":"2013-03-04T10:03:06.916Z","type":"message"}
{"nick":"faceleg","message":"so this way","date":"2013-03-04T10:03:08.915Z","type":"message"}
{"nick":"faceleg","message":"to step through what I'm doing:","date":"2013-03-04T10:03:21.366Z","type":"message"}
{"nick":"faceleg","message":"1. call from js to function that takes an integer and a callback","date":"2013-03-04T10:03:32.700Z","type":"message"}
{"nick":"faceleg","message":"2. said function queues with uv_queue_work, with \"this\"'s handle_, the integer and the callback as properties of a struct","date":"2013-03-04T10:04:11.340Z","type":"message"}
{"nick":"faceleg","message":"in the first uv_work method, the result variable is initialized, populated and added to the uv_work's struct","date":"2013-03-04T10:04:42.727Z","type":"message"}
{"nick":"faceleg","message":"3. then in the second uv_work method, the result value is added to an arg array and passed as parameters to the callback","date":"2013-03-04T10:05:10.750Z","type":"message"}
{"nick":"faceleg","message":"would I close scope on the 3rd step?","date":"2013-03-04T10:05:18.824Z","type":"message"}
{"nick":"faceleg","message":"having opened it on the first? Or should I not be using HandleScope at all","date":"2013-03-04T10:05:43.949Z","type":"message"}
{"nick":"guor","message":"you probably want to use persistent handles instead of local handles in here","date":"2013-03-04T10:06:20.290Z","type":"message"}
{"nick":"faceleg","message":"So instead of: Local<Function> callback = Local<Function>::Cast(args[1]);","date":"2013-03-04T10:06:40.273Z","type":"message"}
{"nick":"faceleg","message":"  ar->callback = Persistent<Function>::New(callback);","date":"2013-03-04T10:06:42.915Z","type":"message"}
{"nick":"faceleg","message":"Persistent<Function> callback = Persistent<Function>::Cast(args[1]);","date":"2013-03-04T10:06:55.852Z","type":"message"}
{"nick":"faceleg","message":"  ar->callback = Persistent<Function>::New(callback);","date":"2013-03-04T10:06:57.916Z","type":"message"}
{"nick":"faceleg","message":"?","date":"2013-03-04T10:06:59.914Z","type":"message"}
{"nick":"guor","message":"I would say yes","date":"2013-03-04T10:07:17.840Z","type":"message"}
{"nick":"guor","message":"I'm not entirely sure though since I have no idea about the node.js part","date":"2013-03-04T10:07:41.275Z","type":"message"}
{"nick":"faceleg","message":"haha","date":"2013-03-04T10:07:45.340Z","type":"message"}
{"nick":"mraleph1","message":"faceleg: you should read through http://kkaefer.github.com/node-cpp-modules/","date":"2013-03-04T10:08:35.787Z","type":"message"}
{"nick":"mraleph1","message":"it's a bit dated (back from 2011) but it gets all important parts about handles right.","date":"2013-03-04T10:08:55.380Z","type":"message"}
{"nick":"faceleg","message":"ok thanks","date":"2013-03-04T10:09:02.122Z","type":"message"}
{"nick":"faceleg","message":"I actually have that open","date":"2013-03-04T10:09:05.829Z","type":"message"}
{"nick":"faceleg","message":"It's just hard to know which guides are still relevant","date":"2013-03-04T10:09:14.190Z","type":"message"}
{"nick":"faceleg","message":"I've jumped into the diving pool and am still flailing around whildly","date":"2013-03-04T10:09:34.693Z","type":"message"}
{"nick":"faceleg","message":"wildly*","date":"2013-03-04T10:09:37.318Z","type":"message"}
{"nick":"faceleg","message":"thanks for your help and patience with this noob","date":"2013-03-04T10:09:45.821Z","type":"message"}
{"nick":"[[zzz]]","date":"2013-03-04T10:13:09.559Z","type":"join"}
{"nick":"faceleg","message":"now I have faith in that document it starts to make more sense...","date":"2013-03-04T10:15:09.199Z","type":"message"}
{"nick":"[[zz]]","reason":"Ping timeout: 272 seconds","date":"2013-03-04T10:16:28.677Z","type":"quit"}
{"nick":"faceleg","message":"hmmm","date":"2013-03-04T10:19:16.193Z","type":"message"}
{"nick":"faceleg","message":"in my \"Baton\", should I define non primitives as Persistent<Type>?","date":"2013-03-04T10:20:01.833Z","type":"message"}
{"nick":"mraleph1","message":"yes","date":"2013-03-04T10:20:25.487Z","type":"message"}
{"nick":"faceleg","message":"it's like there is a light flickering","date":"2013-03-04T10:20:37.073Z","type":"message"}
{"nick":"mraleph1","message":"those that come from JS side that is.","date":"2013-03-04T10:20:39.299Z","type":"message"}
{"nick":"faceleg","message":"those that don't?","date":"2013-03-04T10:20:47.154Z","type":"message"}
{"nick":"faceleg","message":"args.This() comes from JS, right?","date":"2013-03-04T10:20:57.183Z","type":"message"}
{"nick":"mraleph1","message":"those that don't you manage yourself. yes.","date":"2013-03-04T10:21:06.900Z","type":"message"}
{"nick":"mraleph1","message":"Persistent is there to tell V8: \"hey, I am using this guy, to garbage collect it\".","date":"2013-03-04T10:21:29.400Z","type":"message"}
{"nick":"faceleg","message":"I'm coming from ObjC, what is C++ equiv to retain/release?","date":"2013-03-04T10:21:38.687Z","type":"message"}
{"nick":"mraleph1","message":"\"… don't garbage collect it\"","date":"2013-03-04T10:21:46.653Z","type":"message"}
{"nick":"faceleg","message":"mmm","date":"2013-03-04T10:21:51.027Z","type":"message"}
{"nick":"mraleph1","message":"faceleg: there is none","date":"2013-03-04T10:22:01.597Z","type":"message"}
{"nick":"mraleph1","message":"retain/release is a reference counting scheme.","date":"2013-03-04T10:22:12.714Z","type":"message"}
{"nick":"faceleg","message":"oh","date":"2013-03-04T10:22:16.410Z","type":"message"}
{"nick":"mraleph1","message":"none directly built into the language.","date":"2013-03-04T10:22:38.085Z","type":"message"}
{"nick":"faceleg","message":"ah ok","date":"2013-03-04T10:22:45.134Z","type":"message"}
{"nick":"mraleph1","message":"there are smart pointers that do reference counting but this is not what V8 does.","date":"2013-03-04T10:22:53.810Z","type":"message"}
{"nick":"faceleg","message":"so to \"retain\" something, i.e. have it stick around in memory","date":"2013-03-04T10:22:54.615Z","type":"message"}
{"nick":"faceleg","message":"I just don't \"delete\" it?","date":"2013-03-04T10:22:59.191Z","type":"message"}
{"nick":"mraleph1","message":"something your allocated with \"new\" you just don't delete, yes.","date":"2013-03-04T10:23:17.620Z","type":"message"}
{"nick":"mraleph1","message":"this is why its called manual memory management :-)","date":"2013-03-04T10:23:25.856Z","type":"message"}
{"nick":"faceleg","message":"yes ","date":"2013-03-04T10:23:32.889Z","type":"message"}
{"nick":"mraleph1","message":"but V8 has its own garbage collector. so to tell V8 not to delete something you need to hold a handle to an object.","date":"2013-03-04T10:23:48.627Z","type":"message"}
{"nick":"faceleg","message":"don't laugh, but I find retain/release confusing ","date":"2013-03-04T10:23:54.282Z","type":"message"}
{"nick":"faceleg","message":"this \"don't delete it if you don't want it gone\" seems more straight-forward","date":"2013-03-04T10:24:10.804Z","type":"message"}
{"nick":"mraleph1","message":"yes, but both have their own pitfalls in practice.","date":"2013-03-04T10:24:27.948Z","type":"message"}
{"nick":"faceleg","message":"I'm sure they do","date":"2013-03-04T10:24:34.641Z","type":"message"}
{"nick":"faceleg","message":"Programming be like 'dat","date":"2013-03-04T10:24:41.287Z","type":"message"}
{"nick":"faceleg","message":"Now I know slightly better, and having confidence in those slides linked to me","date":"2013-03-04T10:25:55.083Z","type":"message"}
{"nick":"mraleph1","message":"great :-) good luck. I am afk.","date":"2013-03-04T10:26:26.003Z","type":"message"}
{"nick":"faceleg","message":"Thanks for hte help, mraleph1 and guor ","date":"2013-03-04T10:26:43.840Z","type":"message"}
{"nick":"guor","message":"np","date":"2013-03-04T10:26:50.787Z","type":"message"}
{"nick":"faceleg","message":"Does v8 have the _this = this convention ?","date":"2013-03-04T10:40:55.829Z","type":"message"}
{"nick":"guor","message":"nope","date":"2013-03-04T10:41:08.123Z","type":"message"}
{"nick":"faceleg","message":"hopes are dashed on the shores of segfault","date":"2013-03-04T10:42:53.326Z","type":"message"}
{"nick":"faceleg","message":"another question / issue","date":"2013-03-04T11:04:04.095Z","type":"message"}
{"nick":"faceleg","message":"I am intantiating a class in my asyncafter function in V8","date":"2013-03-04T11:04:25.120Z","type":"message"}
{"nick":"faceleg","message":"GitCommit *out = new GitCommit()","date":"2013-03-04T11:04:47.621Z","type":"message"}
{"nick":"faceleg","message":"but it seems that out->handle_ is undefined","date":"2013-03-04T11:04:59.025Z","type":"message"}
{"nick":"faceleg","message":"as this is where my code is segfaulting","date":"2013-03-04T11:05:05.657Z","type":"message"}
{"nick":"faceleg","message":"is there something special I must do to give an instance of a class a \"handle_\"?","date":"2013-03-04T11:05:22.485Z","type":"message"}
{"nick":"C-Man","date":"2013-03-04T11:13:32.410Z","type":"join"}
{"nick":"faceleg","message":"As this: GitCommit *out = new GitCommit();","date":"2013-03-04T11:20:57.690Z","type":"message"}
{"nick":"faceleg","message":"    Handle<Value> argv[1] = { out->handle };","date":"2013-03-04T11:20:59.905Z","type":"message"}
{"nick":"faceleg","message":"is segfaulting","date":"2013-03-04T11:21:01.823Z","type":"message"}
{"nick":"Net147","date":"2013-03-04T11:22:45.370Z","type":"join"}
{"nick":"tellnes","date":"2013-03-04T11:24:29.680Z","type":"join"}
{"nick":"faceleg","message":"so I guess my question is","date":"2013-03-04T11:29:59.099Z","type":"message"}
{"nick":"faceleg","message":"how do I create a js object to be passed to a js callback?","date":"2013-03-04T11:30:09.058Z","type":"message"}
{"nick":"ager","reason":"Remote host closed the connection","date":"2013-03-04T11:37:29.546Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T12:30:03.389Z","type":"join"}
{"nick":"faceleg","message":"If anyone could give me a pointer on how to do this: http://stackoverflow.com/questions/15202676/instantiate-pass-c-object-to-node-js-function-v8","date":"2013-03-04T13:31:02.616Z","type":"message"}
{"nick":"faceleg","message":"I'd love them a long time","date":"2013-03-04T13:31:06.714Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 245 seconds","date":"2013-03-04T13:31:23.389Z","type":"quit"}
{"nick":"Net147","reason":"Read error: Connection reset by peer","date":"2013-03-04T13:34:15.321Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T13:57:55.355Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-03-04T14:06:19.791Z","type":"quit"}
{"nick":"carif","date":"2013-03-04T14:12:29.587Z","type":"join"}
{"nick":"heath","reason":"Read error: Connection reset by peer","date":"2013-03-04T14:36:33.259Z","type":"quit"}
{"nick":"heath","date":"2013-03-04T14:36:49.205Z","type":"join"}
{"nick":"heath","reason":"Changing host","date":"2013-03-04T14:36:49.205Z","type":"quit"}
{"nick":"heath","date":"2013-03-04T14:36:49.206Z","type":"join"}
{"nick":"c4milo","date":"2013-03-04T14:52:28.388Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-03-04T14:59:31.535Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2013-03-04T15:38:46.358Z","type":"quit"}
{"nick":"Frippe","new_nick":"Frippe2","date":"2013-03-04T16:14:16.253Z","type":"nick"}
{"nick":"Frippe2","reason":"Quit: Computer has gone to sleep.","date":"2013-03-04T16:30:24.418Z","type":"quit"}
{"nick":"tellnes","reason":"\"WeeChat 0.3.9.2\"","date":"2013-03-04T17:00:29.102Z","type":"part"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-03-04T17:39:23.079Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2013-03-04T17:45:42.446Z","type":"quit"}
{"nick":"C-Man","reason":"Ping timeout: 255 seconds","date":"2013-03-04T18:10:14.380Z","type":"quit"}
{"nick":"C-Man","date":"2013-03-04T18:10:45.383Z","type":"join"}
{"nick":"C-Man","reason":"Remote host closed the connection","date":"2013-03-04T18:10:46.107Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T18:51:30.134Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-03-04T18:55:54.722Z","type":"quit"}
{"nick":"michael-robinson","date":"2013-03-04T19:11:38.918Z","type":"join"}
{"nick":"michael-robinson","message":"Hello?","date":"2013-03-04T19:11:48.782Z","type":"message"}
{"nick":"michael-robinson","new_nick":"faceleg|work","date":"2013-03-04T19:11:54.281Z","type":"nick"}
{"nick":"bnoordhuis","date":"2013-03-04T19:32:42.534Z","type":"join"}
{"nick":"carif","date":"2013-03-04T19:35:33.049Z","type":"join"}
{"nick":"faceleg|work","message":"Hello?","date":"2013-03-04T19:45:31.766Z","type":"message"}
{"nick":"bnoordhuis","message":"faceleg|work: hello","date":"2013-03-04T19:55:44.545Z","type":"message"}
{"nick":"faceleg|work","message":"hey","date":"2013-03-04T20:04:36.110Z","type":"message"}
{"nick":"faceleg|work","message":"do you have a moment to laugh at my SO question?","date":"2013-03-04T20:04:44.426Z","type":"message"}
{"nick":"faceleg|work","message":"by laugh I mean solve ","date":"2013-03-04T20:04:49.945Z","type":"message"}
{"nick":"faceleg|work","message":"*answer","date":"2013-03-04T20:04:53.521Z","type":"message"}
{"nick":"faceleg|work","message":"In case you answer in the affirmative, here it is: http://stackoverflow.com/questions/15202676/instantiate-pass-c-object-to-node-js-function-v8","date":"2013-03-04T20:05:43.979Z","type":"message"}
{"nick":"bnoordhuis","message":"faceleg|work: try #node.js, it's a lot more active than #v8","date":"2013-03-04T20:25:49.849Z","type":"message"}
{"nick":"bnoordhuis","message":"to answer your question, i think the issue is with ar->callback, not instance->handle_","date":"2013-03-04T20:27:19.059Z","type":"message"}
{"nick":"bnoordhuis","message":"it's hard to say for sure because the snippet is incomplete","date":"2013-03-04T20:27:52.236Z","type":"message"}
{"nick":"faceleg|work","message":"I'm pretty sure it's with the handle_","date":"2013-03-04T20:30:18.506Z","type":"message"}
{"nick":"faceleg|work","message":"as the previous implementation used input/output vars from JS","date":"2013-03-04T20:30:39.894Z","type":"message"}
{"nick":"faceleg|work","message":"and operated on them","date":"2013-03-04T20:30:41.991Z","type":"message"}
{"nick":"faceleg|work","message":"i.e. GC was passed from js","date":"2013-03-04T20:30:49.462Z","type":"message"}
{"nick":"faceleg|work","message":"manipulated","date":"2013-03-04T20:30:53.343Z","type":"message"}
{"nick":"bnoordhuis","message":"then you should post full code. it's impossible to tell what's going on now","date":"2013-03-04T20:30:59.178Z","type":"message"}
{"nick":"faceleg|work","message":"Yeah ok","date":"2013-03-04T20:31:06.154Z","type":"message"}
{"nick":"faceleg|work","message":"I'll have to wait until I get home","date":"2013-03-04T20:31:09.967Z","type":"message"}
{"nick":"faceleg|work","message":"didn't want to post it all, was many 10's of lines","date":"2013-03-04T20:31:25.667Z","type":"message"}
{"nick":"faceleg|work","message":"is*","date":"2013-03-04T20:31:28.121Z","type":"message"}
{"nick":"bnoordhuis","message":"you can check the backtrace in gdb, that should give you a hint","date":"2013-03-04T20:32:05.567Z","type":"message"}
{"nick":"faceleg|work","message":"If one instantiates a C++ class within C++ though, is ob->handle_ actually set?","date":"2013-03-04T20:32:07.017Z","type":"message"}
{"nick":"faceleg|work","message":"haha","date":"2013-03-04T20:32:10.017Z","type":"message"}
{"nick":"faceleg|work","message":"I did","date":"2013-03-04T20:32:11.658Z","type":"message"}
{"nick":"faceleg|work","message":"wasn't helpful at all","date":"2013-03-04T20:32:14.086Z","type":"message"}
{"nick":"bnoordhuis","message":"if one of the handles has val_=0x0, it's been gc'ed","date":"2013-03-04T20:32:23.819Z","type":"message"}
{"nick":"bnoordhuis","message":"which usually means you forgot to make it persistent","date":"2013-03-04T20:32:34.744Z","type":"message"}
{"nick":"bnoordhuis","message":"btw, from what thread are you invoking Call()?","date":"2013-03-04T20:32:48.279Z","type":"message"}
{"nick":"bnoordhuis","message":"\"If one instantiates a C++ class within C++ though, is ob->handle_ actually set?\" <- you mean new MyClass()? no","date":"2013-03-04T20:34:01.123Z","type":"message"}
{"nick":"bnoordhuis","message":"if your class inherits from ObjectWrap, it needs to call ObjectWrap::Wrap(args.This()) somewhere","date":"2013-03-04T20:34:32.386Z","type":"message"}
{"nick":"faceleg|work","message":"oh ok, (0x0 comment) I didn't know that, thank you","date":"2013-03-04T20:35:12.419Z","type":"message"}
{"nick":"faceleg|work","message":"Ah, it goes:js(callback), C++, uv_work Work, WorkAfter","date":"2013-03-04T20:35:37.230Z","type":"message"}
{"nick":"faceleg|work","message":"WorkAfter is the subject of my issues","date":"2013-03-04T20:35:45.444Z","type":"message"}
{"nick":"bnoordhuis","message":"okay, good - calling into v8 from another thread will crash and burn","date":"2013-03-04T20:36:29.833Z","type":"message"}
{"nick":"faceleg|work","message":"should I instantiate the GC instance in the first C++ function, the one that initialises and begins uv_queue, and add it to the uv_work's request data?","date":"2013-03-04T20:36:48.067Z","type":"message"}
{"nick":"faceleg|work","message":"that way I should be able to instantiate it with GitCommit::New(args.This))","date":"2013-03-04T20:37:04.991Z","type":"message"}
{"nick":"faceleg|work","message":"was struggling with where to get args.This() from in the context of the AfterWork method","date":"2013-03-04T20:37:18.562Z","type":"message"}
{"nick":"faceleg|work","message":"in \"work\" I do some work with libgit2, which is why I want it tobe async","date":"2013-03-04T20:37:37.091Z","type":"message"}
{"nick":"faceleg|work","message":"all I want to do is end up with a GC instance that has the relevant git_commit raw value encapsualted, and pass said GC instance to my JS callback function","date":"2013-03-04T20:38:06.392Z","type":"message"}
{"nick":"bnoordhuis","message":"is your c++ object tied to a js constructor?","date":"2013-03-04T20:38:30.506Z","type":"message"}
{"nick":"faceleg|work","message":"I was thinking I could instantiate it in the final AfterWork method, but if I need to use the args var from the Method called from JS then no problem","date":"2013-03-04T20:38:34.902Z","type":"message"}
{"nick":"faceleg|work","message":"https://github.com/tbranyen/nodegit/blob/master/src/commit.cc#L22","date":"2013-03-04T20:38:55.561Z","type":"message"}
{"nick":"faceleg|work","message":"Note I haven't commited the broken functionality I'm working / we're discussing now","date":"2013-03-04T20:39:16.190Z","type":"message"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-03-04T20:39:48.468Z","type":"quit"}
{"nick":"bnoordhuis","message":"okay, so you have a New() function that's invoked from js","date":"2013-03-04T20:39:59.247Z","type":"message"}
{"nick":"bnoordhuis","message":"and it calls Wrap() which is good","date":"2013-03-04T20:40:11.311Z","type":"message"}
{"nick":"carif","date":"2013-03-04T20:40:46.465Z","type":"join"}
{"nick":"faceleg|work","message":"Ah I didn't write this, I'm taking over as maintainer, the owner has no time for such frivolities","date":"2013-03-04T20:40:56.656Z","type":"message"}
{"nick":"faceleg|work","message":"Hence why I have questions that might appear stupid if you assume I wrote this entirely","date":"2013-03-04T20:41:16.456Z","type":"message"}
{"nick":"bnoordhuis","message":"okay, it should be easy","date":"2013-03-04T20:41:38.740Z","type":"message"}
{"nick":"bnoordhuis","message":"call Ref() before you call uv_work, call Unref() at the end of your AfterWork function","date":"2013-03-04T20:42:01.249Z","type":"message"}
{"nick":"bnoordhuis","message":"that'll make sure handle_ doesn't get gc'ed","date":"2013-03-04T20:42:27.359Z","type":"message"}
{"nick":"faceleg|work","message":"and should I move my GitCommit instantiation into the before uv_work section?","date":"2013-03-04T20:42:40.141Z","type":"message"}
{"nick":"faceleg|work","message":"so js->function init GC output var, uv_work, work (get git_commit raw value, assign it to GC output var), after work, call callback","date":"2013-03-04T20:43:18.303Z","type":"message"}
{"nick":"faceleg|work","message":"gc->Ref() (add to uv_work data) work: req->data->out->whatever = somthing; aftewr work callback(req->data->out->handle_)","date":"2013-03-04T20:44:01.028Z","type":"message"}
{"nick":"bnoordhuis","message":"it's instantiated by a `new Commit` call in js land, right?","date":"2013-03-04T20:44:17.773Z","type":"message"}
{"nick":"faceleg|work","message":"no","date":"2013-03-04T20:44:26.475Z","type":"message"}
{"nick":"faceleg|work","message":"you could do it like:","date":"2013-03-04T20:44:38.074Z","type":"message"}
{"nick":"faceleg|work","message":"aCommit.parent(function(error, parent) { // parent is what I'm struggling with - the parent of the commit, it is instantiated within v8 });","date":"2013-03-04T20:45:09.373Z","type":"message"}
{"nick":"bnoordhuis","message":"oh, you probably want to instantiate it in your AfterWork function","date":"2013-03-04T20:45:50.644Z","type":"message"}
{"nick":"faceleg|work","message":"the previous implementation used output var, see line: https://github.com/tbranyen/nodegit/blob/master/src/commit.cc#L299","date":"2013-03-04T20:45:57.532Z","type":"message"}
{"nick":"bnoordhuis","message":"commit_constructor_function_template->NewInstance()","date":"2013-03-04T20:46:03.777Z","type":"message"}
{"nick":"faceleg|work","message":"is that my \"GitCommit::constructor_template\"?","date":"2013-03-04T20:46:34.440Z","type":"message"}
{"nick":"faceleg|work","message":"GitCommit *outputCommit = GitCommit::constructor_template->NewInstance();","date":"2013-03-04T20:46:53.027Z","type":"message"}
{"nick":"bnoordhuis","message":"something like that","date":"2013-03-04T20:47:02.786Z","type":"message"}
{"nick":"faceleg|work","message":"hmm ok","date":"2013-03-04T20:47:07.462Z","type":"message"}
{"nick":"faceleg|work","message":"And I don't need to pass it any arguments?","date":"2013-03-04T20:47:18.913Z","type":"message"}
{"nick":"bnoordhuis","message":"only you get a Local<Object>, not a GitCommit*","date":"2013-03-04T20:47:25.210Z","type":"message"}
{"nick":"faceleg|work","message":"yeah","date":"2013-03-04T20:47:31.455Z","type":"message"}
{"nick":"faceleg|work","message":"then how might I assign a value to a GC* property?","date":"2013-03-04T20:47:44.252Z","type":"message"}
{"nick":"bnoordhuis","message":"you Unwrap() it","date":"2013-03-04T20:47:50.650Z","type":"message"}
{"nick":"faceleg|work","message":"aaaaaaaaah","date":"2013-03-04T20:47:54.642Z","type":"message"}
{"nick":"faceleg|work","message":"I want to skive off work and rush home to try this out","date":"2013-03-04T20:48:11.958Z","type":"message"}
{"nick":"bnoordhuis","message":"i'm not stopping you :)","date":"2013-03-04T20:48:21.025Z","type":"message"}
{"nick":"faceleg|work","message":"thank linus for the terminal, it renders IRC invisible no non programmers","date":"2013-03-04T20:48:29.703Z","type":"message"}
{"nick":"faceleg|work","message":"Local<Object> *commit = GitCommit::constructor_template->NewInstance();","date":"2013-03-04T20:49:28.576Z","type":"message"}
{"nick":"bnoordhuis","message":"just commit, not *commit. it's not a pointer","date":"2013-03-04T20:49:54.309Z","type":"message"}
{"nick":"faceleg|work","message":"ok thanks","date":"2013-03-04T20:49:59.078Z","type":"message"}
{"nick":"faceleg|work","message":"then unwrap it","date":"2013-03-04T20:50:07.759Z","type":"message"}
{"nick":"faceleg|work","message":"assign properties whateer","date":"2013-03-04T20:50:12.238Z","type":"message"}
{"nick":"bnoordhuis","message":"yep","date":"2013-03-04T20:50:12.456Z","type":"message"}
{"nick":"faceleg|work","message":"then I can pass it to callback with commit->handle_","date":"2013-03-04T20:50:22.716Z","type":"message"}
{"nick":"bnoordhuis","message":"correct","date":"2013-03-04T20:50:45.733Z","type":"message"}
{"nick":"faceleg|work","message":"and for future reference, if I was to pass an object throw uv_work, I should call ->Ref(), then ->Unref() in the after work?","date":"2013-03-04T20:50:49.070Z","type":"message"}
{"nick":"bnoordhuis","message":"yes","date":"2013-03-04T20:51:03.092Z","type":"message"}
{"nick":"faceleg|work","message":"Thanks bnoordhuis, so very much. I love learning different languages etc, but the initial steps can be *so* frustrating!","date":"2013-03-04T20:51:18.423Z","type":"message"}
{"nick":"faceleg|work","message":"-Ref && -Unref shold be called only on any/all non primitives, or only ObjectWraps?","date":"2013-03-04T20:51:43.691Z","type":"message"}
{"nick":"bnoordhuis","message":"ObjectWrap instances only","date":"2013-03-04T20:51:59.647Z","type":"message"}
{"nick":"faceleg|work","message":"ok","date":"2013-03-04T20:52:04.813Z","type":"message"}
{"nick":"faceleg|work","message":"at all times right, else they get shoved off into nullspace","date":"2013-03-04T20:52:15.593Z","type":"message"}
{"nick":"faceleg|work","message":"When I'm done with the learnin' I might write a V8 beginners guide for noobs","date":"2013-03-04T20:52:37.958Z","type":"message"}
{"nick":"bnoordhuis","message":"even worse, they *might* get shoved off","date":"2013-03-04T20:52:39.215Z","type":"message"}
{"nick":"faceleg|work","message":"hahahahahaha","date":"2013-03-04T20:52:44.695Z","type":"message"}
{"nick":"faceleg|work","message":"great.","date":"2013-03-04T20:52:47.239Z","type":"message"}
{"nick":"faceleg|work","message":"Like dancing on waxed razorblades","date":"2013-03-04T20:53:07.636Z","type":"message"}
{"nick":"bnoordhuis","message":"yeah. it works 99 out of a 100 times but the 100th time...","date":"2013-03-04T20:53:24.116Z","type":"message"}
{"nick":"faceleg|work","message":"100th time it'll happen on a user's compuer","date":"2013-03-04T20:53:45.809Z","type":"message"}
{"nick":"faceleg|work","message":"computer","date":"2013-03-04T20:53:48.098Z","type":"message"}
{"nick":"faceleg|work","message":"and they won't have the ability to provide helpful debuggin information","date":"2013-03-04T20:53:57.779Z","type":"message"}
{"nick":"bnoordhuis","message":"we had a similar issue in node once","date":"2013-03-04T20:54:20.426Z","type":"message"}
{"nick":"bnoordhuis","message":"where we forgot to root some newly created objects in a HandleScope","date":"2013-03-04T20:54:32.585Z","type":"message"}
{"nick":"bnoordhuis","message":"the only place where the bug actually showed up was at big deployments like voxer","date":"2013-03-04T20:54:59.432Z","type":"message"}
{"nick":"bnoordhuis","message":"because it only happened like once every few million invocations","date":"2013-03-04T20:55:11.287Z","type":"message"}
{"nick":"faceleg|work","message":"ugh","date":"2013-03-04T20:55:23.843Z","type":"message"}
{"nick":"faceleg|work","message":"and this is why noobs like me need to take the time to make absolutely sure the 'template' implementation of functionality that is generally repetitive is done perfectly","date":"2013-03-04T20:55:56.567Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 276 seconds","date":"2013-03-04T21:04:48.326Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-03-04T21:37:35.074Z","type":"join"}
{"nick":"Net147","date":"2013-03-04T21:43:35.668Z","type":"join"}
{"nick":"Net147","reason":"Quit:  I love my HydraIRC -> http://www.hydrairc.com <-","date":"2013-03-04T22:03:11.290Z","type":"quit"}
{"nick":"stalled","reason":"Ping timeout: 264 seconds","date":"2013-03-04T22:16:24.648Z","type":"quit"}
{"nick":"RT|Chatzilla","date":"2013-03-04T22:26:26.348Z","type":"join"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-03-04T22:26:45.868Z","type":"quit"}
{"nick":"stalled","date":"2013-03-04T22:41:15.885Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-03-04T23:23:03.995Z","type":"quit"}
