{"nick":"floody","reason":"Ping timeout: 250 seconds","date":"2013-05-28T00:03:15.187Z","type":"quit"}
{"nick":"[[zzz]]","date":"2013-05-28T00:35:38.789Z","type":"join"}
{"nick":"[[zz]]","reason":"Read error: Operation timed out","date":"2013-05-28T00:38:13.619Z","type":"quit"}
{"nick":"c4milo","date":"2013-05-28T01:02:56.346Z","type":"join"}
{"nick":"mraleph1","reason":"Ping timeout: 260 seconds","date":"2013-05-28T01:03:15.846Z","type":"quit"}
{"nick":"mraleph","date":"2013-05-28T01:46:27.429Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-05-28T02:20:17.938Z","type":"quit"}
{"nick":"c4milo","date":"2013-05-28T03:21:39.346Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-05-28T03:25:35.656Z","type":"quit"}
{"nick":"asrail","reason":"Ping timeout: 256 seconds","date":"2013-05-28T04:29:02.934Z","type":"quit"}
{"nick":"Vbitz","reason":"Quit: Computer has gone to sleep.","date":"2013-05-28T05:16:41.469Z","type":"quit"}
{"nick":"M28","reason":"Read error: Connection reset by peer","date":"2013-05-28T05:41:13.079Z","type":"quit"}
{"nick":"M28","date":"2013-05-28T05:42:23.754Z","type":"join"}
{"nick":"asrail","date":"2013-05-28T06:02:11.337Z","type":"join"}
{"nick":"xan_","date":"2013-05-28T06:44:19.383Z","type":"join"}
{"nick":"asrail","reason":"Ping timeout: 276 seconds","date":"2013-05-28T06:48:25.251Z","type":"quit"}
{"nick":"C-Man","date":"2013-05-28T06:57:55.690Z","type":"join"}
{"nick":"juanjosanchez","date":"2013-05-28T07:28:16.509Z","type":"join"}
{"nick":"guor","reason":"Read error: No route to host","date":"2013-05-28T07:37:09.695Z","type":"quit"}
{"nick":"mraleph1","date":"2013-05-28T07:56:37.496Z","type":"join"}
{"nick":"mraleph","reason":"Read error: Connection reset by peer","date":"2013-05-28T07:57:09.234Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-05-28T07:57:31.688Z","type":"quit"}
{"nick":"jonaslund","date":"2013-05-28T08:13:09.647Z","type":"join"}
{"nick":"C-Man","date":"2013-05-28T08:25:11.324Z","type":"join"}
{"nick":"Net147","date":"2013-05-28T09:27:11.312Z","type":"join"}
{"nick":"floody","date":"2013-05-28T10:27:44.834Z","type":"join"}
{"nick":"floody","message":"helllo","date":"2013-05-28T10:27:48.069Z","type":"message"}
{"nick":"floody","message":"could someone please help me? i trying to write an extension to nodejs and i'm little confused in that  part how can i easily expose deeply nested cpp objects to the js world, could someone show me a good example?","date":"2013-05-28T10:37:49.298Z","type":"message"}
{"nick":"juanjosanchez","reason":"Ping timeout: 252 seconds","date":"2013-05-28T11:08:55.592Z","type":"quit"}
{"nick":"C-Man","reason":"Quit: Connection reset by beer","date":"2013-05-28T13:00:36.616Z","type":"quit"}
{"nick":"juanjosanchez","date":"2013-05-28T13:58:28.377Z","type":"join"}
{"nick":"asrail","date":"2013-05-28T14:07:32.701Z","type":"join"}
{"nick":"decoder_","date":"2013-05-28T14:16:43.914Z","type":"join"}
{"nick":"decoder","reason":"Ping timeout: 249 seconds","date":"2013-05-28T14:18:06.777Z","type":"quit"}
{"nick":"c4milo","date":"2013-05-28T14:19:02.457Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-05-28T15:06:00.700Z","type":"join"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2013-05-28T15:31:43.420Z","type":"quit"}
{"nick":"Net147","reason":"Quit:  HydraIRC -> http://www.hydrairc.com <- Nine out of ten l33t h4x0rz prefer it","date":"2013-05-28T15:52:32.237Z","type":"quit"}
{"nick":"sanjoyd","reason":"Remote host closed the connection","date":"2013-05-28T16:08:11.715Z","type":"quit"}
{"nick":"Alex_Gaynor","reason":"Read error: Connection reset by peer","date":"2013-05-28T16:08:15.424Z","type":"quit"}
{"nick":"C-Man","date":"2013-05-28T16:26:28.851Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-05-28T16:56:14.515Z","type":"quit"}
{"nick":"Alex_Gaynor","date":"2013-05-28T17:20:28.780Z","type":"join"}
{"nick":"floody","reason":"Quit: Page closed","date":"2013-05-28T17:35:00.110Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-05-28T18:02:33.426Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-05-28T18:07:11.167Z","type":"quit"}
{"nick":"sanjoyd","date":"2013-05-28T18:08:29.733Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-05-28T18:10:09.267Z","type":"join"}
{"nick":"juanjosanchez","reason":"Ping timeout: 264 seconds","date":"2013-05-28T18:14:19.300Z","type":"quit"}
{"nick":"juanjosanchez","date":"2013-05-28T18:27:11.759Z","type":"join"}
{"nick":"carif","date":"2013-05-28T18:34:51.113Z","type":"join"}
{"nick":"floody","date":"2013-05-28T18:47:33.201Z","type":"join"}
{"nick":"floody","message":"hello","date":"2013-05-28T18:47:39.188Z","type":"message"}
{"nick":"bnoordhuis","message":"what's up floody?","date":"2013-05-28T18:57:10.980Z","type":"message"}
{"nick":"Alex_Gaynor","message":"mraleph1: ping","date":"2013-05-28T18:58:44.495Z","type":"message"}
{"nick":"mraleph1","message":"pong Alex_Gaynor","date":"2013-05-28T19:32:08.671Z","type":"message"}
{"nick":"carif","reason":"Read error: No route to host","date":"2013-05-28T20:19:15.370Z","type":"quit"}
{"nick":"carif","date":"2013-05-28T20:20:15.479Z","type":"join"}
{"nick":"Vbitz","date":"2013-05-28T20:22:22.982Z","type":"join"}
{"nick":"Alex_Gaynor","message":"mraleph1: Does v8 or dart do any loop unrolling? (Particular in cases where stuff is not syntactically constant, such as over the elements of a variadic function)","date":"2013-05-28T20:25:36.327Z","type":"message"}
{"nick":"mraleph1","message":"we don't unroll any loops","date":"2013-05-28T20:30:17.761Z","type":"message"}
{"nick":"mraleph1","message":"no unrolling","date":"2013-05-28T20:30:21.460Z","type":"message"}
{"nick":"mraleph1","message":"no peeling","date":"2013-05-28T20:30:24.442Z","type":"message"}
{"nick":"mraleph1","message":"no nothing","date":"2013-05-28T20:30:27.595Z","type":"message"}
{"nick":"mraleph1","message":"never got to it.","date":"2013-05-28T20:30:30.308Z","type":"message"}
{"nick":"mraleph1","message":"too much other stuff to care about","date":"2013-05-28T20:30:45.659Z","type":"message"}
{"nick":"mraleph1","message":"Alex_Gaynor: ^^^^","date":"2013-05-28T20:30:48.737Z","type":"message"}
{"nick":"Alex_Gaynor","message":"mraleph1: ok, thanks, do you feel like looking over some notes on adding loop unrolling to pypy (feel free to not care at all :))?","date":"2013-05-28T20:31:16.584Z","type":"message"}
{"nick":"Alex_Gaynor","message":"Also, do you know of any other dynamic (or static, I guess) language JITs which do unrolling?","date":"2013-05-28T20:33:29.761Z","type":"message"}
{"nick":"mraleph1","message":"lua? :-)","date":"2013-05-28T20:34:14.367Z","type":"message"}
{"nick":"mraleph1","message":"he does everything","date":"2013-05-28T20:34:21.023Z","type":"message"}
{"nick":"Alex_Gaynor","message":"That's what I figured :D I wonder if he's on IRC","date":"2013-05-28T20:34:31.625Z","type":"message"}
{"nick":"bnoordhuis","message":"Alex_Gaynor: fwiw, loop unrolling has been a subject of some debate on the gcc mailing lists","date":"2013-05-28T20:34:44.000Z","type":"message"}
{"nick":"bnoordhuis","message":"apparently it's harmful as often as it's beneficial","date":"2013-05-28T20:34:57.082Z","type":"message"}
{"nick":"mraleph1","message":"JVM does unrolling.","date":"2013-05-28T20:34:57.230Z","type":"message"}
{"nick":"mraleph1","message":"especially if you work with arrays.","date":"2013-05-28T20:35:11.153Z","type":"message"}
{"nick":"mraleph1","message":"like do four things at a time.","date":"2013-05-28T20:35:30.418Z","type":"message"}
{"nick":"mraleph1","message":"for tight loops.","date":"2013-05-28T20:35:37.101Z","type":"message"}
{"nick":"Alex_Gaynor","message":"bnoordhuis: Sure, there are codesize concerns (depending on your architecture and other fun); but I have cases that can do better codegen, stuff like (python): `for attr in [\"a\", \"c\"]: getattr(obj, attr)()`","date":"2013-05-28T20:35:46.320Z","type":"message"}
{"nick":"Alex_Gaynor","message":"(yes, people do metaprogramming like this)","date":"2013-05-28T20:35:54.029Z","type":"message"}
{"nick":"mraleph1","message":"Alex_Gaynor: I would be very interested to look at your notes. I am always very curious about PyPy.","date":"2013-05-28T20:36:01.086Z","type":"message"}
{"nick":"Alex_Gaynor","message":"mraleph1: https://gist.github.com/alex/5664808 (feel free to ask about stuff that makes no sense)","date":"2013-05-28T20:36:11.149Z","type":"message"}
{"nick":"bnoordhuis","message":"Alex_Gaynor: right. that makes sense","date":"2013-05-28T20:36:59.884Z","type":"message"}
{"nick":"mraleph1","message":"oh metaprogramming. this is pretty cool.","date":"2013-05-28T20:37:32.626Z","type":"message"}
{"nick":"mraleph1","message":"ah this is why you asked about for (var x in foo)","date":"2013-05-28T20:37:43.378Z","type":"message"}
{"nick":"Alex_Gaynor","message":"Yes, somehow I'm supposed to make: https://bitbucket.org/zzzeek/sqlalchemy/src/master/lib/sqlalchemy/engine/base.py#cl-597 fast :)","date":"2013-05-28T20:38:00.992Z","type":"message"}
{"nick":"fijal","date":"2013-05-28T20:38:51.890Z","type":"join"}
{"nick":"fijal","message":"mraleph1: hi","date":"2013-05-28T20:38:54.065Z","type":"message"}
{"nick":"mraleph1","message":"hi!","date":"2013-05-28T20:39:03.227Z","type":"message"}
{"nick":"mraleph1","message":"I suppose you inline execute into call site where object is known?","date":"2013-05-28T20:39:54.269Z","type":"message"}
{"nick":"mraleph1","message":"where is the loop that you are tracing?","date":"2013-05-28T20:40:08.484Z","type":"message"}
{"nick":"Alex_Gaynor","message":"http://bpaste.net/show/102625/ is an example","date":"2013-05-28T20:41:45.798Z","type":"message"}
{"nick":"Alex_Gaynor","message":"Right now, we inline into execute and then immediately emit a call to the execute() loop","date":"2013-05-28T20:43:13.048Z","type":"message"}
{"nick":"Alex_Gaynor","message":"ideally that whole loop would be unrolled (assumign the type of object is constant)","date":"2013-05-28T20:43:21.198Z","type":"message"}
{"nick":"ls3","date":"2013-05-28T20:45:22.256Z","type":"join"}
{"nick":"mraleph1","message":"interesting.","date":"2013-05-28T20:49:16.530Z","type":"message"}
{"nick":"mraleph1","message":"though I skipped almost all details related to IR or innards of the pipeline :-)","date":"2013-05-28T20:49:50.000Z","type":"message"}
{"nick":"Alex_Gaynor","message":":)","date":"2013-05-28T20:49:57.952Z","type":"message"}
{"nick":"mraleph1","message":"for JavaScript main retardiness in optimizing for (var k in o) is that k will iterate over names and you have to manually access o[k] and then you need to link this two things together in the IR and blargh","date":"2013-05-28T20:50:56.918Z","type":"message"}
{"nick":"mraleph1","message":"and then be carefull to guard in the right places against the shape changes.","date":"2013-05-28T20:51:33.038Z","type":"message"}
{"nick":"mraleph1","message":"but you are kinda free from all this.","date":"2013-05-28T20:51:42.892Z","type":"message"}
{"nick":"mraleph1","message":"which actually makes me wonder if LuaJIT actually unrolls something like this.","date":"2013-05-28T20:52:35.304Z","type":"message"}
{"nick":"Alex_Gaynor","message":"I'm not sure, I don't think Mike hangs out on IRC unfortunately.","date":"2013-05-28T20:52:56.893Z","type":"message"}
{"nick":"Alex_Gaynor","message":"I don't think .*?Monkey does either.","date":"2013-05-28T20:53:06.210Z","type":"message"}
{"nick":"bnoordhuis","message":"you mean the spidermonkey guys?","date":"2013-05-28T20:53:25.124Z","type":"message"}
{"nick":"Alex_Gaynor","message":"spider/ion/whatever else they're up to","date":"2013-05-28T20:53:39.746Z","type":"message"}
{"nick":"bnoordhuis","message":"they hang in some of the irc.mozilla.org channels","date":"2013-05-28T20:53:48.684Z","type":"message"}
{"nick":"bnoordhuis","message":"hang, hang out.","date":"2013-05-28T20:53:58.679Z","type":"message"}
{"nick":"bnoordhuis","message":"PST office hours, mostly","date":"2013-05-28T20:54:22.088Z","type":"message"}
{"nick":"mraleph1","message":"which reminds me about one thing","date":"2013-05-28T20:56:55.883Z","type":"message"}
{"nick":"mraleph1","message":"in node.js MySQL driver author got a big boost by manually unrolling for (var i = 0; i < cols.length; i++) a[cols[i]] = row[i]; using code generation.","date":"2013-05-28T20:58:03.198Z","type":"message"}
{"nick":"mraleph1","message":"though it's pretty hairy to do this optimization automatically.","date":"2013-05-28T20:58:36.783Z","type":"message"}
{"nick":"mraleph1","message":"I am just sitting here and trying to understand if I ever saw a case where it would help without any implementation complications","date":"2013-05-28T20:59:20.910Z","type":"message"}
{"nick":"fijal","message":"mraleph1: I think we don't have such issues","date":"2013-05-28T21:01:04.960Z","type":"message"}
{"nick":"fijal","message":"but not because pthon","date":"2013-05-28T21:01:08.412Z","type":"message"}
{"nick":"fijal","message":"python","date":"2013-05-28T21:01:09.875Z","type":"message"}
{"nick":"fijal","message":"but because meta-tracing","date":"2013-05-28T21:01:14.836Z","type":"message"}
{"nick":"mraleph1","message":"which issues in particular? building IR for for (var k in o) { …. o[k] … }?","date":"2013-05-28T21:01:52.182Z","type":"message"}
{"nick":"Alex_Gaynor","message":"yes","date":"2013-05-28T21:02:00.053Z","type":"message"}
{"nick":"mraleph1","message":"well, still to see that this loop is actually loop over property values, you need some pass over IR.","date":"2013-05-28T21:02:41.841Z","type":"message"}
{"nick":"mraleph1","message":"metatracing does not give it you for free.","date":"2013-05-28T21:02:57.422Z","type":"message"}
{"nick":"fijal","message":"mraleph1: no, but you structure the interpreter in a way that you get this shit for free","date":"2013-05-28T21:03:15.286Z","type":"message"}
{"nick":"fijal","message":"the same way we have for free **kwargs","date":"2013-05-28T21:03:21.396Z","type":"message"}
{"nick":"fijal","message":"if you actually have stuff that's escapeable","date":"2013-05-28T21:03:34.581Z","type":"message"}
{"nick":"fijal","message":"mraleph1: you don't get it for free, but it's easier","date":"2013-05-28T21:03:56.835Z","type":"message"}
{"nick":"fijal","message":"since you can tell the compiler \"this is constant, this is not\"","date":"2013-05-28T21:04:05.404Z","type":"message"}
{"nick":"fijal","message":"does not always work like that, but you can structure it that way","date":"2013-05-28T21:04:13.684Z","type":"message"}
{"nick":"fijal","message":"e.g. our jit does not know about maps at all","date":"2013-05-28T21:04:19.915Z","type":"message"}
{"nick":"fijal","message":"(or hidden classes how you call them)","date":"2013-05-28T21:04:27.239Z","type":"message"}
{"nick":"mraleph1","message":"mhm","date":"2013-05-28T21:04:30.580Z","type":"message"}
{"nick":"mraleph1","message":"how do you track dependencies then?","date":"2013-05-28T21:04:48.450Z","type":"message"}
{"nick":"mraleph1","message":"do you assume that everything that is not inside the trace can affect any slot?","date":"2013-05-28T21:05:10.657Z","type":"message"}
{"nick":"mraleph1","message":"where one slot essentially contains map, or something like that.","date":"2013-05-28T21:05:29.818Z","type":"message"}
{"nick":"mraleph1","message":"(and by slot I mean part of the object)","date":"2013-05-28T21:05:39.389Z","type":"message"}
{"nick":"fijal","message":"you guard on the map shape","date":"2013-05-28T21:05:49.258Z","type":"message"}
{"nick":"fijal","message":"anything can affect the shape","date":"2013-05-28T21:05:54.877Z","type":"message"}
{"nick":"fijal","message":"but it's just one check","date":"2013-05-28T21:06:16.346Z","type":"message"}
{"nick":"fijal","message":"and then you know the shape is what you're expecting","date":"2013-05-28T21:06:22.045Z","type":"message"}
{"nick":"fijal","message":"we also have version numbers on type dictionaries","date":"2013-05-28T21:06:28.656Z","type":"message"}
{"nick":"fijal","message":"that helps","date":"2013-05-28T21:06:29.898Z","type":"message"}
{"nick":"fijal","message":"version tags actually","date":"2013-05-28T21:06:32.789Z","type":"message"}
{"nick":"fijal","message":"mraleph1: python is complicated","date":"2013-05-28T21:06:37.306Z","type":"message"}
{"nick":"qengho","reason":"Remote host closed the connection","date":"2013-05-28T21:07:33.333Z","type":"quit"}
{"nick":"mraleph1","message":"yeah, I see.","date":"2013-05-28T21:08:08.316Z","type":"message"}
{"nick":"mraleph1","message":"I need to look at PyPy again. ","date":"2013-05-28T21:08:38.266Z","type":"message"}
{"nick":"fijal","message":"no, we all suck","date":"2013-05-28T21:09:09.262Z","type":"message"}
{"nick":"Alex_Gaynor","message":"haha","date":"2013-05-28T21:09:15.026Z","type":"message"}
{"nick":"qengho","date":"2013-05-28T21:09:24.290Z","type":"join"}
{"nick":"fijal","message":"that's what I was told when I visited you guys ;-)","date":"2013-05-28T21:09:25.951Z","type":"message"}
{"nick":"mraleph1","message":"how do you get from lookup in the interpreter to guard on shape and load?","date":"2013-05-28T21:09:47.010Z","type":"message"}
{"nick":"Alex_Gaynor","message":"mraleph1: I just found a mail from you on this very subject! http://lua-users.org/lists/lua-l/2009-11/msg00968.html","date":"2013-05-28T21:09:48.107Z","type":"message"}
{"nick":"fijal","message":"not exactly ;-)","date":"2013-05-28T21:09:49.220Z","type":"message"}
{"nick":"fijal","message":"mraleph1: let me dig the code","date":"2013-05-28T21:10:05.626Z","type":"message"}
{"nick":"fijal","message":"mraleph1: I think it's something like","date":"2013-05-28T21:10:13.454Z","type":"message"}
{"nick":"fijal","message":"jit.hint(type.shape, promote=True)","date":"2013-05-28T21:10:21.497Z","type":"message"}
{"nick":"fijal","message":"which does emit guard_value","date":"2013-05-28T21:10:27.419Z","type":"message"}
{"nick":"mraleph1","message":"Alex_Gaynor: lol","date":"2013-05-28T21:10:31.562Z","type":"message"}
{"nick":"mraleph1","message":"Alex_Gaynor: it's not exactly the same though and I was utterly confused back then :-)","date":"2013-05-28T21:10:55.873Z","type":"message"}
{"nick":"fijal","message":"mraleph1: to be honest we wrote a paper on exaclty that subject","date":"2013-05-28T21:11:30.970Z","type":"message"}
{"nick":"fijal","message":"you should read it, it's quite readable","date":"2013-05-28T21:11:36.102Z","type":"message"}
{"nick":"mraleph1","message":"Alex_Gaynor: ah no, that thread is not where I was confused :-)","date":"2013-05-28T21:11:43.692Z","type":"message"}
{"nick":"fijal","message":"https://bitbucket.org/pypy/pypy/src/a8943ada15ee4e7111b75237d3b7340b7453c9d0/pypy/objspace/std/typeobject.py?at=default#cl-362","date":"2013-05-28T21:11:58.605Z","type":"message"}
{"nick":"mraleph1","message":"fijal: yes, I should. I actually read it, I think but I forgot details already.","date":"2013-05-28T21:12:00.924Z","type":"message"}
{"nick":"mraleph1","message":"fijal: it was quite a bit of time ago.","date":"2013-05-28T21:12:12.237Z","type":"message"}
{"nick":"mraleph1","message":"maybe three years, or was it the wrong paper?","date":"2013-05-28T21:12:26.772Z","type":"message"}
{"nick":"fijal","message":"http://scholar.google.com/citations?view_op=view_citation&hl=en&user=S0rpYpkAAAAJ&citation_for_view=S0rpYpkAAAAJ:kNdYIx-mwKoC","date":"2013-05-28T21:12:47.796Z","type":"message"}
{"nick":"fijal","message":"this one","date":"2013-05-28T21:12:48.898Z","type":"message"}
{"nick":"fijal","message":"2011","date":"2013-05-28T21:13:02.667Z","type":"message"}
{"nick":"fijal","message":"so not even 2 years ago","date":"2013-05-28T21:13:09.465Z","type":"message"}
{"nick":"fijal","action":"goes back to \"pypy, the bad parts\"","date":"2013-05-28T21:13:47.893Z","type":"action"}
{"nick":"mraleph1","message":"I don't think I read this one.","date":"2013-05-28T21:13:55.794Z","type":"message"}
{"nick":"fijal","message":"I think it's quite readable","date":"2013-05-28T21:14:11.301Z","type":"message"}
{"nick":"mraleph1","message":"I read only this one","date":"2013-05-28T21:14:12.986Z","type":"message"}
{"nick":"mraleph1","message":"http://dl.acm.org/citation.cfm?id=1565824.1565827&coll=DL&dl=GUIDE&CFID=333227241&CFTOKEN=84213604","date":"2013-05-28T21:14:13.586Z","type":"message"}
{"nick":"mraleph1","message":"I'll read the one you pointed to, thanks.","date":"2013-05-28T21:14:30.765Z","type":"message"}
{"nick":"fijal","message":"that's the basic one","date":"2013-05-28T21:14:39.031Z","type":"message"}
{"nick":"mraleph1","message":"yep.","date":"2013-05-28T21:14:43.501Z","type":"message"}
{"nick":"mraleph1","message":"that is why I don't recall any details.","date":"2013-05-28T21:14:53.871Z","type":"message"}
{"nick":"fijal","message":"the newer one covers specifically maps and methods and types","date":"2013-05-28T21:14:54.548Z","type":"message"}
{"nick":"fijal","message":"I think","date":"2013-05-28T21:14:55.580Z","type":"message"}
{"nick":"mraleph1","message":"maybe there were none :-)","date":"2013-05-28T21:14:58.495Z","type":"message"}
{"nick":"fijal","message":"the basic ones cover meta-tracing in general","date":"2013-05-28T21:15:04.933Z","type":"message"}
{"nick":"fijal","message":"there is also one about escape analysis","date":"2013-05-28T21:15:09.756Z","type":"message"}
{"nick":"fijal","message":"and there is one that has not been written yet, which we should write about frames","date":"2013-05-28T21:15:23.834Z","type":"message"}
{"nick":"mraleph1","message":"ah-ha, I see.","date":"2013-05-28T21:17:57.640Z","type":"message"}
{"nick":"mraleph1","message":"so you still tell it which one is actually constant.","date":"2013-05-28T21:18:08.355Z","type":"message"}
{"nick":"mraleph1","message":"or likely to be constant","date":"2013-05-28T21:18:14.625Z","type":"message"}
{"nick":"mraleph1","message":"so can serve as a guard.","date":"2013-05-28T21:18:19.142Z","type":"message"}
{"nick":"fijal","message":"I tell it","date":"2013-05-28T21:18:21.522Z","type":"message"}
{"nick":"mraleph1","message":"promote thingy","date":"2013-05-28T21:18:28.126Z","type":"message"}
{"nick":"fijal","message":"\"make a version of assembler per value\"","date":"2013-05-28T21:18:30.915Z","type":"message"}
{"nick":"fijal","message":"this is how promote works - \"assume this is constant\"","date":"2013-05-28T21:18:38.388Z","type":"message"}
{"nick":"mraleph1","message":"yep, yep.","date":"2013-05-28T21:18:40.929Z","type":"message"}
{"nick":"fijal","message":"if it's not a new path has to be compiled","date":"2013-05-28T21:18:45.287Z","type":"message"}
{"nick":"fijal","message":"so if you say write a program that stores stuff in type's __dict__ only","date":"2013-05-28T21:19:04.104Z","type":"message"}
{"nick":"fijal","message":"you could do that in python ","date":"2013-05-28T21:19:08.926Z","type":"message"}
{"nick":"fijal","message":"performance will be horrible","date":"2013-05-28T21:19:12.811Z","type":"message"}
{"nick":"mraleph1","message":"yep, this is quite similar to what I considering to do at the method JIT level to produce specialize stubs: tell compiler to fully constant fold lookup routines given the fixed hidden class.","date":"2013-05-28T21:20:42.596Z","type":"message"}
{"nick":"mraleph1","message":"or given any number of fixed constant (or quasi constant arguments).","date":"2013-05-28T21:21:14.513Z","type":"message"}
{"nick":"mraleph1","message":"where by quasi constant is meant that certain slots in object are assumed to constant.","date":"2013-05-28T21:21:49.408Z","type":"message"}
{"nick":"mraleph1","message":"and guarded against.","date":"2013-05-28T21:22:05.229Z","type":"message"}
{"nick":"fijal","message":"we have quasi constant stuff and it means something else ;-)","date":"2013-05-28T21:22:05.376Z","type":"message"}
{"nick":"fijal","message":"it means out of line guards","date":"2013-05-28T21:22:20.714Z","type":"message"}
{"nick":"fijal","message":"we can probably do that too","date":"2013-05-28T21:22:24.252Z","type":"message"}
{"nick":"mraleph1","message":"well this is side effect of inventing terminology independently.","date":"2013-05-28T21:22:29.464Z","type":"message"}
{"nick":"fijal","message":"it results in no assembler","date":"2013-05-28T21:22:30.181Z","type":"message"}
{"nick":"Alex_Gaynor","message":"out-of-line guards are cool","date":"2013-05-28T21:22:42.343Z","type":"message"}
{"nick":"Alex_Gaynor","message":"So luajit2 defintiely does some loop unrolling, but I completely fail to understand the heuristic","date":"2013-05-28T21:22:50.560Z","type":"message"}
{"nick":"mraleph1","message":"yes it does.","date":"2013-05-28T21:23:04.725Z","type":"message"}
{"nick":"mraleph1","message":"I saw the code but it is indeed confusing.","date":"2013-05-28T21:23:14.626Z","type":"message"}
{"nick":"mraleph1","message":"I think one of the things that triggers unrolling is when he fails to connect phies on the backedge to achieve type stability.","date":"2013-05-28T21:23:37.094Z","type":"message"}
{"nick":"fijal","message":"that's indeed odd","date":"2013-05-28T21:24:09.261Z","type":"message"}
{"nick":"mraleph1","message":"http://repo.or.cz/w/luajit-2.0.git/blob/HEAD:/src/lj_opt_loop.c#l418","date":"2013-05-28T21:24:55.543Z","type":"message"}
{"nick":"mraleph1","message":"it is all here.","date":"2013-05-28T21:24:59.991Z","type":"message"}
{"nick":"Alex_Gaynor","message":"mraleph1: Oh really? I'm looking at lj_record.c and it appears to be there :)","date":"2013-05-28T21:25:16.702Z","type":"message"}
{"nick":"mraleph1","message":"hm.","date":"2013-05-28T21:25:22.923Z","type":"message"}
{"nick":"mraleph1","message":"MYSTERY","date":"2013-05-28T21:25:30.432Z","type":"message"}
{"nick":"mraleph1","message":"what are you looking at?","date":"2013-05-28T21:25:35.505Z","type":"message"}
{"nick":"fijal","message":"what's LJ_UNLiKELY?","date":"2013-05-28T21:25:36.939Z","type":"message"}
{"nick":"mraleph1","message":"hint for a compiler I think to rearrange branches ","date":"2013-05-28T21:25:50.338Z","type":"message"}
{"nick":"mraleph1","message":"condition is unlikely to happen","date":"2013-05-28T21:25:59.236Z","type":"message"}
{"nick":"Alex_Gaynor","message":"rec_loop_interp","date":"2013-05-28T21:25:59.372Z","type":"message"}
{"nick":"fijal","message":"mraleph1: do you know how on modern architecture tell the processor \"this is the likely branch\"?","date":"2013-05-28T21:26:10.436Z","type":"message"}
{"nick":"Alex_Gaynor","message":"you put it first I think?","date":"2013-05-28T21:26:23.909Z","type":"message"}
{"nick":"mraleph1","message":"I think he is helping GCC to layout code","date":"2013-05-28T21:26:25.034Z","type":"message"}
{"nick":"Alex_Gaynor","message":"pentium had an instruction for it","date":"2013-05-28T21:26:31.039Z","type":"message"}
{"nick":"Alex_Gaynor","message":"but it's a noop now, as far as I know","date":"2013-05-28T21:26:35.742Z","type":"message"}
{"nick":"mraleph1","message":"unlikely code can at least be moved to the bottom to utilize icache better","date":"2013-05-28T21:27:02.046Z","type":"message"}
{"nick":"mraleph1","message":"I am not sure whether it is witchcraft or snake oil though","date":"2013-05-28T21:27:16.780Z","type":"message"}
{"nick":"Alex_Gaynor","message":"A little of both?","date":"2013-05-28T21:27:26.896Z","type":"message"}
{"nick":"mraleph1","message":"ah that one is also doing unrolling.","date":"2013-05-28T21:28:25.632Z","type":"message"}
{"nick":"Alex_Gaynor","message":"I think what I'm interested is loopunroll (and not instunroll)","date":"2013-05-28T21:30:42.387Z","type":"message"}
{"nick":"mraleph1","message":"so there are two unrollings: one unrolls inner loops by simply recording them as part of the trace and the other unrolls already recorded trace as whole.","date":"2013-05-28T21:33:17.842Z","type":"message"}
{"nick":"Alex_Gaynor","message":"The first one is what I want (I believe)","date":"2013-05-28T21:33:31.110Z","type":"message"}
{"nick":"mraleph1","message":"yep, seems so.","date":"2013-05-28T21:33:38.960Z","type":"message"}
{"nick":"mraleph1","message":"though his way of deciding to unroll is indeed pretty convoluted.","date":"2013-05-28T21:36:36.389Z","type":"message"}
{"nick":"Alex_Gaynor","message":"Do you understand the heuristic?","date":"2013-05-28T21:36:50.604Z","type":"message"}
{"nick":"mraleph1","message":"weeeell.","date":"2013-05-28T21:36:57.437Z","type":"message"}
{"nick":"mraleph1","message":"not entirely.","date":"2013-05-28T21:37:23.234Z","type":"message"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-05-28T21:37:39.350Z","type":"quit"}
{"nick":"mraleph1","message":"first of all I don't understand why would outer loop become hotter than inner one, this does not seem to hit even simplest case like your execute.","date":"2013-05-28T21:38:15.566Z","type":"message"}
{"nick":"Alex_Gaynor","message":"Indeed, I would expect the inner loop to be compiled (badly)","date":"2013-05-28T21:38:33.352Z","type":"message"}
{"nick":"Alex_Gaynor","message":"then the outer loop would decide to ignore the inner loop and re-trace it","date":"2013-05-28T21:38:43.670Z","type":"message"}
{"nick":"Alex_Gaynor","message":"(and eventually throw away the inner one)","date":"2013-05-28T21:38:50.029Z","type":"message"}
{"nick":"mraleph1","message":"and I don't think we will ever come to this place if we have successfully traces inner one.","date":"2013-05-28T21:39:14.376Z","type":"message"}
{"nick":"mraleph1","message":"*traced","date":"2013-05-28T21:39:19.346Z","type":"message"}
{"nick":"mraleph1","message":"because successfully jited inner loops  will go into rec_loop_jit","date":"2013-05-28T21:40:10.138Z","type":"message"}
{"nick":"mraleph1","message":"though there is some magic there in rec_loop_jit as well.","date":"2013-05-28T21:41:08.560Z","type":"message"}
{"nick":"Alex_Gaynor","message":"it looks like an inner loop will always stop if it hits there","date":"2013-05-28T21:42:48.559Z","type":"message"}
{"nick":"mraleph1","message":"it really seems like this whole heuristic is to catch loops that are not loops","date":"2013-05-28T21:42:54.289Z","type":"message"}
{"nick":"mraleph1","message":"yep","date":"2013-05-28T21:42:55.751Z","type":"message"}
{"nick":"mraleph1","message":"no wait","date":"2013-05-28T21:43:02.008Z","type":"message"}
{"nick":"Alex_Gaynor","message":"(unless there's some value for ev besides LEAVE and ENTER)","date":"2013-05-28T21:43:07.385Z","type":"message"}
{"nick":"mraleph1","message":"also if J->parent != 0","date":"2013-05-28T21:43:22.903Z","type":"message"}
{"nick":"Alex_Gaynor","message":"but I don't think it would be a root trace there ever?","date":"2013-05-28T21:43:41.157Z","type":"message"}
{"nick":"Alex_Gaynor","message":"err, sorry rather it would always be root trace","date":"2013-05-28T21:43:54.933Z","type":"message"}
{"nick":"mraleph1","message":"what about two nested loops?","date":"2013-05-28T21:44:06.656Z","type":"message"}
{"nick":"Alex_Gaynor","message":"If you leave a non-root trace, something besides err/stop ahppens","date":"2013-05-28T21:44:23.069Z","type":"message"}
{"nick":"mraleph1","message":"like root and then one and then another.","date":"2013-05-28T21:44:24.733Z","type":"message"}
{"nick":"Alex_Gaynor","message":"so then you have J->parent == 1 (I assume)?","date":"2013-05-28T21:44:37.655Z","type":"message"}
{"nick":"mraleph1","message":"I guess so","date":"2013-05-28T21:44:46.778Z","type":"message"}
{"nick":"Alex_Gaynor","message":"so when you LEAVE that loop, something happens?","date":"2013-05-28T21:45:08.231Z","type":"message"}
{"nick":"mraleph1","message":"which one?","date":"2013-05-28T21:48:26.391Z","type":"message"}
{"nick":"mraleph1","message":"the innermost?","date":"2013-05-28T21:48:31.268Z","type":"message"}
{"nick":"Alex_Gaynor","message":"one with J->parent != 0","date":"2013-05-28T21:48:36.693Z","type":"message"}
{"nick":"mraleph1","message":"so it seems that if he started unrolling the first inner loop he will indiscriminately unroll all inner loops as well.","date":"2013-05-28T21:49:26.192Z","type":"message"}
{"nick":"mraleph1","message":"as he goes deeper.","date":"2013-05-28T21:49:35.047Z","type":"message"}
{"nick":"Alex_Gaynor","message":"hmmm","date":"2013-05-28T21:50:03.361Z","type":"message"}
{"nick":"mraleph1","message":"at least that is how I read this code","date":"2013-05-28T21:52:34.113Z","type":"message"}
{"nick":"mraleph1","message":"or rather wait","date":"2013-05-28T21:52:58.054Z","type":"message"}
{"nick":"mraleph1","message":"I said bullshit","date":"2013-05-28T21:53:08.023Z","type":"message"}
{"nick":"mraleph1","message":"he indiscriminately unrolls loops in side traces.","date":"2013-05-28T21:53:21.339Z","type":"message"}
{"nick":"Alex_Gaynor","message":"Sounds right, I'm not sure it's so useful for me though","date":"2013-05-28T21:54:10.392Z","type":"message"}
{"nick":"mraleph1","message":"I guess not.","date":"2013-05-28T21:54:40.000Z","type":"message"}
{"nick":"mraleph1","message":"anyway. have to go now :-)","date":"2013-05-28T21:55:30.112Z","type":"message"}
{"nick":"mraleph1","message":"was fun digging into LJ2 sourced :-)","date":"2013-05-28T21:55:40.324Z","type":"message"}
{"nick":"Alex_Gaynor","message":"Indeed, was fun :)","date":"2013-05-28T21:55:49.266Z","type":"message"}
{"nick":"Alex_Gaynor","message":"I guess I'll write a prototype with explicit declaration of unrolling and then invent some hueristics.","date":"2013-05-28T21:55:56.482Z","type":"message"}
{"nick":"mraleph1","message":":-)","date":"2013-05-28T21:56:04.092Z","type":"message"}
{"nick":"piscisaureus_","date":"2013-05-28T21:57:58.738Z","type":"join"}
{"nick":"RT|Chatzilla","date":"2013-05-28T22:16:27.123Z","type":"join"}
{"nick":"floody","reason":"Ping timeout: 250 seconds","date":"2013-05-28T22:17:55.210Z","type":"quit"}
{"nick":"juanjosanchez","reason":"Quit: Leaving","date":"2013-05-28T22:27:16.625Z","type":"quit"}
{"nick":"asrail","reason":"Read error: Operation timed out","date":"2013-05-28T22:44:41.873Z","type":"quit"}
{"nick":"mraleph1","reason":"Read error: Connection reset by peer","date":"2013-05-28T23:15:04.350Z","type":"quit"}
{"nick":"piscisaureus_","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2013-05-28T23:15:06.864Z","type":"quit"}
{"nick":"mraleph","date":"2013-05-28T23:15:16.177Z","type":"join"}
{"nick":"hackygolucky","date":"2013-05-28T23:28:17.536Z","type":"join"}
