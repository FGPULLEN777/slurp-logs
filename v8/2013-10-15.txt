{"nick":"c4milo","date":"2013-10-15T00:29:22.491Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-15T00:36:59.576Z","type":"quit"}
{"nick":"c4milo","date":"2013-10-15T00:37:25.418Z","type":"join"}
{"nick":"c4milo_","date":"2013-10-15T00:41:01.077Z","type":"join"}
{"nick":"c4milo","reason":"Ping timeout: 272 seconds","date":"2013-10-15T00:42:19.426Z","type":"quit"}
{"nick":"c4milo_","reason":"Remote host closed the connection","date":"2013-10-15T00:44:03.394Z","type":"quit"}
{"nick":"c4milo","date":"2013-10-15T00:44:31.685Z","type":"join"}
{"nick":"c4milo","reason":"Ping timeout: 264 seconds","date":"2013-10-15T00:49:26.786Z","type":"quit"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-10-15T01:01:10.134Z","type":"quit"}
{"nick":"abraxas","date":"2013-10-15T01:31:30.950Z","type":"join"}
{"nick":"carif","date":"2013-10-15T01:40:57.106Z","type":"join"}
{"nick":"iamdustan","date":"2013-10-15T01:52:15.841Z","type":"join"}
{"nick":"isaacbw","message":"can I reasonably expect V8 to be using 32 bit signed integers until I go over 2^31?","date":"2013-10-15T02:05:51.368Z","type":"message"}
{"nick":"c4milo","date":"2013-10-15T03:00:11.261Z","type":"join"}
{"nick":"jaseemabid","date":"2013-10-15T03:18:48.338Z","type":"join"}
{"nick":"jaseemabid","reason":"Ping timeout: 272 seconds","date":"2013-10-15T03:28:53.192Z","type":"quit"}
{"nick":"carif","reason":"Ping timeout: 260 seconds","date":"2013-10-15T03:42:27.948Z","type":"quit"}
{"nick":"carif","date":"2013-10-15T03:56:21.412Z","type":"join"}
{"nick":"carif","reason":"Quit: Ex-Chat","date":"2013-10-15T04:03:29.694Z","type":"quit"}
{"nick":"c4milo","reason":"Read error: Connection reset by peer","date":"2013-10-15T04:32:34.610Z","type":"quit"}
{"nick":"c4milo","date":"2013-10-15T04:33:38.330Z","type":"join"}
{"nick":"jaseemabid","date":"2013-10-15T05:00:28.039Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-15T05:19:11.158Z","type":"quit"}
{"nick":"spolu","date":"2013-10-15T06:16:20.942Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-15T06:56:40.002Z","type":"join"}
{"nick":"muelli","date":"2013-10-15T07:32:24.923Z","type":"join"}
{"nick":"mraleph","reason":"Read error: Connection reset by peer","date":"2013-10-15T07:38:27.733Z","type":"quit"}
{"nick":"mraleph1","date":"2013-10-15T07:38:29.027Z","type":"join"}
{"nick":"spolu","reason":"Ping timeout: 260 seconds","date":"2013-10-15T07:44:40.016Z","type":"quit"}
{"nick":"spolu","date":"2013-10-15T07:59:10.748Z","type":"join"}
{"nick":"Lethalman","date":"2013-10-15T08:08:58.036Z","type":"join"}
{"nick":"juanjosanchez","date":"2013-10-15T08:11:23.957Z","type":"join"}
{"nick":"guor","message":"isaacbw, for +/- 2^30, yes","date":"2013-10-15T08:12:41.265Z","type":"message"}
{"nick":"guor","message":"we use 31-bit integers in most cases","date":"2013-10-15T08:13:23.357Z","type":"message"}
{"nick":"guor","message":"optimized code also uses 32-bit integers internally","date":"2013-10-15T08:13:34.855Z","type":"message"}
{"nick":"jaseemabid","reason":"Read error: Operation timed out","date":"2013-10-15T08:41:52.009Z","type":"quit"}
{"nick":"muelli","message":"hm... So an \"Internalized\" string is a string that has been added to the internal cache, correct? As opposed to a \"normal\" string, which is not added to the internal hashmap...","date":"2013-10-15T08:44:07.097Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2013-10-15T09:01:26.789Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-10-15T09:11:33.756Z","type":"join"}
{"nick":"bnoordhuis","message":"muelli: correct","date":"2013-10-15T09:12:40.034Z","type":"message"}
{"nick":"muelli","message":"cool","date":"2013-10-15T09:22:52.800Z","type":"message"}
{"nick":"muelli","message":"Corollary: One can only make use of the cached string one creating \"new\" internalized strings, i.e. factory()->InternalizeTwoByteString() as opposed to factory()->NewStringFromTwoByte(). Correct?","date":"2013-10-15T09:30:26.064Z","type":"message"}
{"nick":"abraxas_","date":"2013-10-15T09:32:33.419Z","type":"join"}
{"nick":"bnoordhuis","message":"muelli: correct","date":"2013-10-15T09:34:27.429Z","type":"message"}
{"nick":"abraxas","reason":"Read error: Connection reset by peer","date":"2013-10-15T09:38:34.218Z","type":"quit"}
{"nick":"jaseemabid","date":"2013-10-15T09:53:14.586Z","type":"join"}
{"nick":"Petka","date":"2013-10-15T10:02:03.543Z","type":"join"}
{"nick":"abraxas_","reason":"Remote host closed the connection","date":"2013-10-15T11:01:23.504Z","type":"quit"}
{"nick":"abraxas","date":"2013-10-15T11:01:55.499Z","type":"join"}
{"nick":"abraxas","reason":"Ping timeout: 240 seconds","date":"2013-10-15T11:06:08.228Z","type":"quit"}
{"nick":"iamdustan","reason":"Ping timeout: 265 seconds","date":"2013-10-15T11:16:20.547Z","type":"quit"}
{"nick":"muelli","message":"Can I make v8 internalize strings from JavaScript land?","date":"2013-10-15T11:42:01.032Z","type":"message"}
{"nick":"bnoordhuis","message":"muelli: i don't think there's a builtin for that. you'd probably have to add one in src/runtime.{h,cc}","date":"2013-10-15T11:49:55.297Z","type":"message"}
{"nick":"bnoordhuis","message":"one question comes to mind though: why? :)","date":"2013-10-15T11:50:20.771Z","type":"message"}
{"nick":"muelli","message":"bnoordhuis: only to craft test cases in JavaScript.","date":"2013-10-15T11:50:43.982Z","type":"message"}
{"nick":"muelli","message":"could have been that whenever one uses some operations on strings, they will get internalized.","date":"2013-10-15T11:51:14.008Z","type":"message"}
{"nick":"juanjosanchez","reason":"Ping timeout: 260 seconds","date":"2013-10-15T12:02:15.962Z","type":"quit"}
{"nick":"c4milo","date":"2013-10-15T12:17:36.324Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2013-10-15T12:31:50.539Z","type":"quit"}
{"nick":"iamdustan","date":"2013-10-15T12:38:24.771Z","type":"join"}
{"nick":"juanjosanchez","date":"2013-10-15T12:43:15.191Z","type":"join"}
{"nick":"juanjosanchez","reason":"Ping timeout: 245 seconds","date":"2013-10-15T12:56:15.124Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-10-15T13:12:41.165Z","type":"join"}
{"nick":"xan_","reason":"Ping timeout: 272 seconds","date":"2013-10-15T13:13:59.893Z","type":"quit"}
{"nick":"leostera","date":"2013-10-15T13:14:13.312Z","type":"join"}
{"nick":"leostera","message":"hi there guys","date":"2013-10-15T13:14:26.754Z","type":"message"}
{"nick":"xan_","date":"2013-10-15T13:14:36.818Z","type":"join"}
{"nick":"leostera","message":"i've been meaning to get into the guts of the beast but I'm not quite sure where to start","date":"2013-10-15T13:14:53.047Z","type":"message"}
{"nick":"leostera","message":"anyone would have any pointers to really start understanding v8 and how to properly code js when using it?","date":"2013-10-15T13:15:20.936Z","type":"message"}
{"nick":"bnoordhuis","message":"leostera: i believe the general advice is \"don't optimize for v8, v8 should optimize for you\"","date":"2013-10-15T13:17:47.354Z","type":"message"}
{"nick":"guor","message":"just read crockford's book and don't use the stuff listed in the addendum \"the bad parts\"","date":"2013-10-15T13:18:48.458Z","type":"message"}
{"nick":"leostera","message":"guor, I have","date":"2013-10-15T13:18:57.026Z","type":"message"}
{"nick":"leostera","message":"bnoordhuis: thanks for that","date":"2013-10-15T13:19:00.625Z","type":"message"}
{"nick":"leostera","message":"i'm just wondering how I can make my code even better","date":"2013-10-15T13:19:21.314Z","type":"message"}
{"nick":"bnoordhuis","message":"leostera: v8 (and other js engines) really like it when your code is pretty much static","date":"2013-10-15T13:19:39.366Z","type":"message"}
{"nick":"leostera","message":"particularly when running on top of v8","date":"2013-10-15T13:19:41.137Z","type":"message"}
{"nick":"bnoordhuis","message":"code and data, actually","date":"2013-10-15T13:19:46.819Z","type":"message"}
{"nick":"guor","message":"yup. make sure that the code is written as if javascript was a statically typed language","date":"2013-10-15T13:20:12.412Z","type":"message"}
{"nick":"leostera","message":"ok, alright, an example of non static would be using the same variable that previously was an array to store the joined string of the array's elements?","date":"2013-10-15T13:21:21.342Z","type":"message"}
{"nick":"leostera","message":"var a = a.join(','); ","date":"2013-10-15T13:21:38.790Z","type":"message"}
{"nick":"leostera","message":"instead of var str = a.join(','); ?","date":"2013-10-15T13:21:46.372Z","type":"message"}
{"nick":"guor","message":"nah. non static would be, for example, adding properties to an object after construction","date":"2013-10-15T13:22:03.999Z","type":"message"}
{"nick":"guor","message":"the compiler can deal with using different types for the same variable, since variables are just names of stack and context slots really","date":"2013-10-15T13:22:45.218Z","type":"message"}
{"nick":"bnoordhuis","message":"leostera: var o = { x: Math.random() < 0.5 ? 42 : \"42\" } <- don't do things like that","date":"2013-10-15T13:22:45.817Z","type":"message"}
{"nick":"guor","message":"also, for the time being, if you use try-catch, use it in a wrapper function, don't wrap a try-catch around a huge block of code inline","date":"2013-10-15T13:23:21.779Z","type":"message"}
{"nick":"leostera","message":"guor: that's the stuff that what I want to learn","date":"2013-10-15T13:23:22.042Z","type":"message"}
{"nick":"bnoordhuis","message":"that's not the worst thing you could, actually","date":"2013-10-15T13:23:23.058Z","type":"message"}
{"nick":"leostera","message":"guor: yeah, that one I knew","date":"2013-10-15T13:23:31.818Z","type":"message"}
{"nick":"bnoordhuis","message":"guor: hasn't that been fixed?","date":"2013-10-15T13:23:36.196Z","type":"message"}
{"nick":"guor","message":"unfortunately, no :/","date":"2013-10-15T13:23:42.992Z","type":"message"}
{"nick":"guor","message":"try catch is still not optimized for","date":"2013-10-15T13:23:52.694Z","type":"message"}
{"nick":"bnoordhuis","message":"oh. i thought i saw patches land for that","date":"2013-10-15T13:24:03.805Z","type":"message"}
{"nick":"bnoordhuis","message":"hrm, maybe time to revisit some code in node's lib/ dir","date":"2013-10-15T13:24:26.252Z","type":"message"}
{"nick":"guor","message":":)","date":"2013-10-15T13:24:33.608Z","type":"message"}
{"nick":"leostera","message":"ok, this is good stuff","date":"2013-10-15T13:25:06.858Z","type":"message"}
{"nick":"leostera","message":"I appreciate the tips given","date":"2013-10-15T13:25:17.242Z","type":"message"}
{"nick":"guor","message":"don't use double equal, use triple equal","date":"2013-10-15T13:25:24.041Z","type":"message"}
{"nick":"leostera","message":"anything regarding new/delete ?","date":"2013-10-15T13:25:50.385Z","type":"message"}
{"nick":"guor","message":"also, no arguments object","date":"2013-10-15T13:25:54.731Z","type":"message"}
{"nick":"guor","message":"yeah. don't use delete :P","date":"2013-10-15T13:25:59.128Z","type":"message"}
{"nick":"bnoordhuis","message":"leostera: don't use delete","date":"2013-10-15T13:26:02.859Z","type":"message"}
{"nick":"bnoordhuis","message":"right :)","date":"2013-10-15T13:26:06.083Z","type":"message"}
{"nick":"guor","message":"delete totally screws up the object layout","date":"2013-10-15T13:26:10.145Z","type":"message"}
{"nick":"leostera","message":"why?","date":"2013-10-15T13:26:15.157Z","type":"message"}
{"nick":"leostera","message":"oh, I see","date":"2013-10-15T13:26:20.878Z","type":"message"}
{"nick":"leostera","message":"what does that mean?","date":"2013-10-15T13:26:26.758Z","type":"message"}
{"nick":"bnoordhuis","message":"leostera: think of a c struct","date":"2013-10-15T13:26:33.954Z","type":"message"}
{"nick":"bnoordhuis","message":"that's what v8 tries to turn your object into","date":"2013-10-15T13:26:40.081Z","type":"message"}
{"nick":"bnoordhuis","message":"that is, a chunk of memory with values at fixed addresses","date":"2013-10-15T13:26:49.999Z","type":"message"}
{"nick":"bnoordhuis","message":"if you start adding/deleting things, that no longer works, the addresses don't remain fixed","date":"2013-10-15T13:27:03.634Z","type":"message"}
{"nick":"leostera","message":"right","date":"2013-10-15T13:27:16.672Z","type":"message"}
{"nick":"bnoordhuis","message":"it then gets turned into what is essentially a hash table","date":"2013-10-15T13:27:30.701Z","type":"message"}
{"nick":"leostera","message":"so keeping my objects static lets v8 optimize them","date":"2013-10-15T13:27:32.130Z","type":"message"}
{"nick":"guor","message":"yup","date":"2013-10-15T13:27:37.029Z","type":"message"}
{"nick":"bnoordhuis","message":"exactly","date":"2013-10-15T13:27:37.686Z","type":"message"}
{"nick":"leostera","message":"so when you say the Math.random thing","date":"2013-10-15T13:27:56.802Z","type":"message"}
{"nick":"bnoordhuis","message":"also, keep your functions short else they won't inline","date":"2013-10-15T13:28:03.388Z","type":"message"}
{"nick":"leostera","message":"does v8 try to predict something there?","date":"2013-10-15T13:28:04.216Z","type":"message"}
{"nick":"Petka","message":"and the good parts are even worse for perf than the bad parts :P","date":"2013-10-15T13:28:22.211Z","type":"message"}
{"nick":"bnoordhuis","message":"ah, you might want to google for 'hidden class'","date":"2013-10-15T13:28:23.784Z","type":"message"}
{"nick":"guor","message":"that's actually a recent addition, we try to use specific representations for properties","date":"2013-10-15T13:28:28.771Z","type":"message"}
{"nick":"leostera","message":"bnoordhuis: yup, i've read some about it and watched the google video with lars explaining them","date":"2013-10-15T13:29:05.034Z","type":"message"}
{"nick":"leostera","message":"i'll have to keep delving into it I guess","date":"2013-10-15T13:29:27.511Z","type":"message"}
{"nick":"guor","message":"leostera, v8 doesn't really ever predict anything. instead it tries to observe past behavior","date":"2013-10-15T13:29:38.862Z","type":"message"}
{"nick":"leostera","message":"so it's more of a retrospection","date":"2013-10-15T13:29:52.329Z","type":"message"}
{"nick":"guor","message":"if it sees values of a certain type, it assumes for the future that same code sites will encounter the same type","date":"2013-10-15T13:30:16.452Z","type":"message"}
{"nick":"leostera","message":"right","date":"2013-10-15T13:30:22.703Z","type":"message"}
{"nick":"guor","message":"and optimizes for that assumption","date":"2013-10-15T13:30:26.068Z","type":"message"}
{"nick":"leostera","message":"tha'ts how the optimizing compiler works, right?","date":"2013-10-15T13:30:30.984Z","type":"message"}
{"nick":"guor","message":"if it turns out to be wrong, we go the slow path","date":"2013-10-15T13:30:36.142Z","type":"message"}
{"nick":"guor","message":"right","date":"2013-10-15T13:30:39.844Z","type":"message"}
{"nick":"leostera","message":"then if that assumption is proven wrong, it deoptimizes","date":"2013-10-15T13:30:42.504Z","type":"message"}
{"nick":"guor","message":"but even before the optimizing compiler, we have inline caches","date":"2013-10-15T13:30:50.690Z","type":"message"}
{"nick":"guor","message":"so like","date":"2013-10-15T13:31:17.307Z","type":"message"}
{"nick":"guor","message":"if you load a property x of object o, like o.x","date":"2013-10-15T13:31:27.110Z","type":"message"}
{"nick":"guor","message":"the first time you get there, we don't know anything yet, so we do the slow way of doing all necessary look ups","date":"2013-10-15T13:31:45.155Z","type":"message"}
{"nick":"guor","message":"but then we embed the load as fast path into the code at that load site","date":"2013-10-15T13:32:00.228Z","type":"message"}
{"nick":"guor","message":"the second time we get there, we check the type of the object o, and if it's the expected type, we just go the fast path","date":"2013-10-15T13:32:29.508Z","type":"message"}
{"nick":"guor","message":"if you changed the object type, added properties inbetween etc, the check fails and we have to do the slow load all over again","date":"2013-10-15T13:33:13.736Z","type":"message"}
{"nick":"bnoordhuis","message":"^ that's somewhat mitigated by polymorphic ICs","date":"2013-10-15T13:37:49.464Z","type":"message"}
{"nick":"leostera","message":"awesome","date":"2013-10-15T13:38:47.469Z","type":"message"}
{"nick":"leostera","message":"so as long as I keep my objects pretty much static","date":"2013-10-15T13:38:56.750Z","type":"message"}
{"nick":"leostera","message":"I'll get most of the benefits ","date":"2013-10-15T13:39:01.643Z","type":"message"}
{"nick":"bnoordhuis","message":"yep","date":"2013-10-15T13:39:09.983Z","type":"message"}
{"nick":"leostera","message":"would you recommend me to read any particular part of the source code of v8?","date":"2013-10-15T13:39:20.184Z","type":"message"}
{"nick":"guor","message":"no :P","date":"2013-10-15T13:39:31.087Z","type":"message"}
{"nick":"guor","message":"it's a huge mess","date":"2013-10-15T13:39:48.331Z","type":"message"}
{"nick":"juanjosanchez","date":"2013-10-15T13:40:04.300Z","type":"join"}
{"nick":"leostera","message":"haha ok","date":"2013-10-15T13:40:34.445Z","type":"message"}
{"nick":"leostera","message":"i'll stick around this room but I have to leave now","date":"2013-10-15T13:40:46.786Z","type":"message"}
{"nick":"leostera","message":"do you guys have any benchmarks I could use to compare how I do some things?","date":"2013-10-15T13:41:16.453Z","type":"message"}
{"nick":"bnoordhuis","message":"leostera: http://wingolog.org/archives/2011/07/05/v8-a-tale-of-two-compilers <- kind of outdated but still reasonably relevant","date":"2013-10-15T13:41:42.209Z","type":"message"}
{"nick":"bnoordhuis","message":"hm. that's kind of contradictionary, isn't it?","date":"2013-10-15T13:42:05.301Z","type":"message"}
{"nick":"bnoordhuis","message":"let's say the basic concepts still apply","date":"2013-10-15T13:42:34.646Z","type":"message"}
{"nick":"leostera","message":"thanks bnoordhuis ","date":"2013-10-15T13:46:28.224Z","type":"message"}
{"nick":"juanjosanchez","reason":"Ping timeout: 260 seconds","date":"2013-10-15T13:56:35.921Z","type":"quit"}
{"nick":"jaseemabid","reason":"Ping timeout: 240 seconds","date":"2013-10-15T14:07:48.222Z","type":"quit"}
{"nick":"muelli","message":"hm. can I remove strings from the cache? I.e. \"uninternalize\" them?","date":"2013-10-15T14:31:22.887Z","type":"message"}
{"nick":"bnoordhuis","message":"muelli: don't think so","date":"2013-10-15T14:33:41.654Z","type":"message"}
{"nick":"muelli","message":"yeah. I guess there is no reason to in the current design.","date":"2013-10-15T14:36:23.953Z","type":"message"}
{"nick":"muelli","message":"Strings are expected to be immutable, right?","date":"2013-10-15T14:36:29.054Z","type":"message"}
{"nick":"bnoordhuis","message":"yes","date":"2013-10-15T14:43:34.143Z","type":"message"}
{"nick":"leostera","reason":"Quit: leostera","date":"2013-10-15T14:45:22.821Z","type":"quit"}
{"nick":"muelli","message":"hm. but they do have a Set method.. weird","date":"2013-10-15T14:49:02.781Z","type":"message"}
{"nick":"muelli","message":"hm. let me check what happens to internalized strings when chars are set...","date":"2013-10-15T14:49:31.756Z","type":"message"}
{"nick":"bnoordhuis","message":"muelli: it's people like you that will one day bring back the Old Ones. \"oh, i wonder what happens when i read chants from this book written in a dead language?\"","date":"2013-10-15T14:53:21.913Z","type":"message"}
{"nick":"bnoordhuis","message":"it'll end in tentacles, mark my words","date":"2013-10-15T14:53:58.817Z","type":"message"}
{"nick":"muelli","message":":D","date":"2013-10-15T14:58:21.493Z","type":"message"}
{"nick":"muelli","message":"hm. yeah. It's broken as expected. My two Handle<String>s change their value... hm...","date":"2013-10-15T15:00:22.946Z","type":"message"}
{"nick":"muelli","message":"maybe it should at least ASSERT that the string has not been internalized","date":"2013-10-15T15:01:51.531Z","type":"message"}
{"nick":"muelli","message":"bnoordhuis: do you have any opinion?","date":"2013-10-15T15:22:28.813Z","type":"message"}
{"nick":"bnoordhuis","message":"muelli: sorry, what's the question?","date":"2013-10-15T15:29:34.140Z","type":"message"}
{"nick":"muelli","message":"bnoordhuis: should String::Set ASSERT(StringShape(this).IsInternalized() == false)?","date":"2013-10-15T15:30:23.641Z","type":"message"}
{"nick":"bnoordhuis","message":"muelli: oh, right. yeah, i guess that makes sense","date":"2013-10-15T15:31:28.237Z","type":"message"}
{"nick":"Esailija","date":"2013-10-15T15:36:36.190Z","type":"join"}
{"nick":"muelli","message":"or maybe allocate new strings, but it'd be pretty weird to allocate new strings from within String::Set I suppose.","date":"2013-10-15T15:36:44.977Z","type":"message"}
{"nick":"Petka","reason":"Ping timeout: 240 seconds","date":"2013-10-15T15:39:50.545Z","type":"quit"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2009081014]","date":"2013-10-15T15:42:06.595Z","type":"quit"}
