{"nick":"plutoniix","date":"2017-01-30T01:22:48.297Z","type":"join"}
{"nick":"plutoniix","reason":"Max SendQ exceeded","date":"2017-01-30T01:23:20.282Z","type":"quit"}
{"nick":"plutoniix","date":"2017-01-30T01:23:56.643Z","type":"join"}
{"nick":"plutoniix","reason":"Max SendQ exceeded","date":"2017-01-30T01:25:05.283Z","type":"quit"}
{"nick":"plutoniix","date":"2017-01-30T01:25:32.288Z","type":"join"}
{"nick":"bradleymeck","date":"2017-01-30T03:00:48.412Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-01-30T03:06:17.425Z","type":"quit"}
{"nick":"Guest59_","reason":"Read error: Connection reset by peer","date":"2017-01-30T08:22:52.689Z","type":"quit"}
{"nick":"Guest59","date":"2017-01-30T08:23:49.499Z","type":"join"}
{"nick":"ilyaigpetrov","date":"2017-01-30T08:33:34.926Z","type":"join"}
{"nick":"RT|Chatzilla","date":"2017-01-30T08:56:30.327Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2017-01-30T09:54:58.253Z","type":"quit"}
{"nick":"Cube8","date":"2017-01-30T11:15:37.924Z","type":"join"}
{"nick":"zv","reason":"Ping timeout: 240 seconds","date":"2017-01-30T12:47:09.889Z","type":"quit"}
{"nick":"s1341","message":"it seems that expose_debug_as is no longer available on d8... what's going on with that?","date":"2017-01-30T12:56:27.716Z","type":"message"}
{"nick":"zv","date":"2017-01-30T13:04:15.914Z","type":"join"}
{"nick":"caitp","message":"s1341: the tests that still use the debug api include test/debugger/test-api.js","date":"2017-01-30T13:49:12.790Z","type":"message"}
{"nick":"caitp","message":"which seems to implement the old debug.Debug api using a couple intrinsics","date":"2017-01-30T13:49:37.188Z","type":"message"}
{"nick":"s1341","message":"so the debug.Debug api is gone?","date":"2017-01-30T13:50:04.514Z","type":"message"}
{"nick":"bradleymeck","date":"2017-01-30T13:50:12.016Z","type":"join"}
{"nick":"caitp","message":"I believe so, yeah","date":"2017-01-30T13:50:16.275Z","type":"message"}
{"nick":"caitp","message":"but I haven't followed the v8-inspector work too closely","date":"2017-01-30T13:50:24.185Z","type":"message"}
{"nick":"s1341","message":"caitp. ok. thanks for the info","date":"2017-01-30T13:50:54.210Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-01-30T14:28:07.315Z","type":"quit"}
{"nick":"s1341","message":"caitp i'm having trouble understanding how some builtins are called.","date":"2017-01-30T14:33:56.685Z","type":"message"}
{"nick":"s1341","message":"caitp: can i pick your brain?","date":"2017-01-30T14:34:16.571Z","type":"message"}
{"nick":"caitp","message":"go ahead","date":"2017-01-30T14:34:23.002Z","type":"message"}
{"nick":"s1341","message":"caitp: how is this builtin called: https://chromium.googlesource.com/v8/v8/+/master/src/builtins/builtins-string.cc#362","date":"2017-01-30T14:35:16.861Z","type":"message"}
{"nick":"caitp","message":"that's a code stub, I'm going to guess it's called if type feedback indicates both lhs and rhs of a == operation are strings","date":"2017-01-30T14:36:40.569Z","type":"message"}
{"nick":"s1341","message":"caitp, any idea what code actually calls it? I can't seem to find a reference to any code which directly calls it","date":"2017-01-30T14:37:10.060Z","type":"message"}
{"nick":"s1341","message":"the best I can find is a TFS_BUILTIN(StringEqual) in code-factory.cc","date":"2017-01-30T14:37:50.740Z","type":"message"}
{"nick":"s1341","message":"is that calling my StringEqual?","date":"2017-01-30T14:38:06.798Z","type":"message"}
{"nick":"caitp","message":"so, in code-stub-assembler.cc there's a macro op called Equal, which invokes the StringEqual stub if the lhs and rhs are both strings","date":"2017-01-30T14:40:36.657Z","type":"message"}
{"nick":"caitp","message":"the Equal stub just calls that macro op, and implements the generic version of ==, eg when the compiler can't reduce it to a smaller inlineable operation","date":"2017-01-30T14:41:20.095Z","type":"message"}
{"nick":"s1341","message":"i","date":"2017-01-30T14:43:09.754Z","type":"message"}
{"nick":"s1341","message":"oh. i see. it does go through the CodeFactory::StringEqual...","date":"2017-01-30T14:43:25.727Z","type":"message"}
{"nick":"caitp","message":"the interpreter will definitely call this if lhs and rhs are strings and the code is interpreted, dunno if it's reachable through the legacy pipeline","date":"2017-01-30T14:46:46.009Z","type":"message"}
{"nick":"caitp","message":"looks like the legacy pipeline just uses CompareIC instead","date":"2017-01-30T14:49:17.680Z","type":"message"}
{"nick":"caitp","message":"anyway, hope that helps","date":"2017-01-30T14:49:32.171Z","type":"message"}
{"nick":"s1341","message":"caitp. i think it did. I was missing that the CodeFactory::XXX call the TF_BUILTINS...","date":"2017-01-30T14:49:56.962Z","type":"message"}
{"nick":"plutoniix","date":"2017-01-30T14:52:22.292Z","type":"join"}
{"nick":"plutoniix","reason":"Max SendQ exceeded","date":"2017-01-30T14:52:51.284Z","type":"quit"}
{"nick":"plutoniix","date":"2017-01-30T14:53:26.313Z","type":"join"}
{"nick":"s1341","message":"caitp. ok i've gotten turned around again.","date":"2017-01-30T15:08:46.689Z","type":"message"}
{"nick":"s1341","message":"what about this one: https://chromium.googlesource.com/v8/v8/+/master/src/builtins/builtins-string.cc#401","date":"2017-01-30T15:09:46.294Z","type":"message"}
{"nick":"s1341","message":"I see the CodeFactory stub... and it's even called from compiler/effect-control-linearizer.cc","date":"2017-01-30T15:10:24.624Z","type":"message"}
{"nick":"s1341","message":"caitp: but I can't seem to get that code to execute...","date":"2017-01-30T15:10:35.800Z","type":"message"}
{"nick":"caitp","message":"that gets installed to String.prototype at https://chromium.googlesource.com/v8/v8/+/master/src/bootstrapper.cc#1575","date":"2017-01-30T15:10:45.438Z","type":"message"}
{"nick":"caitp","message":"so, \"foo\".charCodeAt(0) calls it","date":"2017-01-30T15:11:04.995Z","type":"message"}
{"nick":"s1341","message":"caitp: no. i think what's installed is StringPrototypeCharCodeAt...","date":"2017-01-30T15:12:07.119Z","type":"message"}
{"nick":"s1341","message":"I'm looking at StringCharAt...","date":"2017-01-30T15:12:35.094Z","type":"message"}
{"nick":"caitp","message":"ah, you're right in that case, one sec","date":"2017-01-30T15:12:40.534Z","type":"message"}
{"nick":"caitp","message":"so yeah, StringCharCodeAt is another code stub","date":"2017-01-30T15:12:54.451Z","type":"message"}
{"nick":"caitp","message":"looks like it's used by turbofan","date":"2017-01-30T15:13:48.683Z","type":"message"}
{"nick":"caitp","message":"as part of lowering the StringCharCodeAt opcode, which I'm guessing comes from \"foo\"[0]","date":"2017-01-30T15:14:36.926Z","type":"message"}
{"nick":"s1341","message":"Well. i put a Print(\"foo\") in StringCharAt, and tried \"foo\"[0] and it doesn't get printed...","date":"2017-01-30T15:15:17.759Z","type":"message"}
{"nick":"caitp","message":"ah, I see","date":"2017-01-30T15:15:52.895Z","type":"message"}
{"nick":"caitp","message":"so the StringCharCodeAt operator gets used a bit in js-builtin-reducer, for inlining String.prototype.charCodeAt (and some other things)","date":"2017-01-30T15:16:17.558Z","type":"message"}
{"nick":"caitp","message":"IIRC the string iterator inlining uses it too","date":"2017-01-30T15:16:27.064Z","type":"message"}
{"nick":"s1341","message":"confusing...","date":"2017-01-30T15:26:03.211Z","type":"message"}
{"nick":"caitp","message":"what are you researching exactly anyways?","date":"2017-01-30T15:39:34.831Z","type":"message"}
{"nick":"s1341","message":"just trying to get a better feeling for how all this code works.","date":"2017-01-30T15:39:49.795Z","type":"message"}
{"nick":"s1341","message":"specifically the new TurboFan stuff, and how it interacts with the older code.","date":"2017-01-30T15:40:05.434Z","type":"message"}
{"nick":"caitp","message":"I see","date":"2017-01-30T15:41:09.348Z","type":"message"}
{"nick":"s1341","message":"any pointers?","date":"2017-01-30T15:41:58.633Z","type":"message"}
{"nick":"caitp","message":"well, the main path or the legacy full-codegen/crankshaft pipeline to get to turbofan is in ast-graph-builder.cc, afaik","date":"2017-01-30T15:42:46.598Z","type":"message"}
{"nick":"caitp","message":"for*","date":"2017-01-30T15:43:46.217Z","type":"message"}
{"nick":"bradleymeck","date":"2017-01-30T15:54:56.653Z","type":"join"}
{"nick":"s1341","message":"Thanks. I'll look into that","date":"2017-01-30T16:06:59.892Z","type":"message"}
{"nick":"ilyaigpetrov","message":"Today a bug crucial for me was fixed in v8. How long will it take before it lands in Chromium?","date":"2017-01-30T16:17:46.707Z","type":"message"}
{"nick":"ilyaigpetrov","message":"this one: https://bugs.chromium.org/p/v8/issues/detail?id=5904","date":"2017-01-30T16:17:53.328Z","type":"message"}
{"nick":"RT|Chatzilla","reason":"Read error: Connection reset by peer","date":"2017-01-30T16:41:55.974Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-01-30T18:02:31.377Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-01-30T18:10:35.665Z","type":"join"}
{"nick":"xiinotulp","date":"2017-01-30T19:10:48.793Z","type":"join"}
{"nick":"Guest59_","date":"2017-01-30T19:11:21.640Z","type":"join"}
{"nick":"Tweth-U-PDS","date":"2017-01-30T19:12:05.830Z","type":"join"}
{"nick":"Guest59","reason":"Ping timeout: 240 seconds","date":"2017-01-30T19:13:06.501Z","type":"quit"}
{"nick":"plutoniix","reason":"Ping timeout: 240 seconds","date":"2017-01-30T19:14:13.109Z","type":"quit"}
{"nick":"Tweth-G-PDS","reason":"Ping timeout: 248 seconds","date":"2017-01-30T19:14:43.818Z","type":"quit"}
{"nick":"joyee","date":"2017-01-30T19:18:40.891Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-01-30T19:24:11.496Z","type":"quit"}
{"nick":"joyee","reason":"Remote host closed the connection","date":"2017-01-30T19:28:07.817Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-01-30T19:37:10.164Z","type":"join"}
{"nick":"Guest59_","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2017-01-30T19:58:20.885Z","type":"quit"}
{"nick":"Guest59","date":"2017-01-30T20:05:01.314Z","type":"join"}
{"nick":"jwolfe","message":"i'm getting test failures when trying to ship trailing commas because test-parsing.cc initializes and runs the preparser without going through the parser like usual. there's code in test-parsing.cc to set up the flags, but trailing commas isn't one of the flags. it looks like the flags in the test are only for when you want to fiddle with the flags in the test, so i was thinking i would not add the flag there, but instead make the default value for ","date":"2017-01-30T20:08:18.015Z","type":"message"}
{"nick":"jwolfe","message":"allow_harmony_trailing_commas_(true) in the ParserBase() constructor. that makes the tests pass, but it'd be the only field with a non-zero default value. what should i do?","date":"2017-01-30T20:08:18.196Z","type":"message"}
{"nick":"jwolfe","message":"oh, never mind. i see that that flag was already in test-parsing.cc before i started this CL. so leaving it alone probably makes the most sense.","date":"2017-01-30T20:17:57.261Z","type":"message"}
{"nick":"rwlbuis_","reason":"Quit: Connection closed for inactivity","date":"2017-01-30T20:45:20.584Z","type":"quit"}
{"nick":"joyee","date":"2017-01-30T21:23:40.886Z","type":"join"}
{"nick":"joyee","reason":"Ping timeout: 245 seconds","date":"2017-01-30T21:28:12.872Z","type":"quit"}
{"nick":"ilyaigpetrov","reason":"Quit: Connection closed for inactivity","date":"2017-01-30T21:31:54.262Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-01-30T22:07:22.725Z","type":"quit"}
{"nick":"xiinotulp","reason":"Quit: Leaving","date":"2017-01-30T22:08:36.309Z","type":"quit"}
{"nick":"aklein","message":"caitp: you around?","date":"2017-01-30T22:38:01.456Z","type":"message"}
{"nick":"caitp","message":"aklein: pong","date":"2017-01-30T22:38:22.062Z","type":"message"}
{"nick":"aklein","message":"caitp: so neis's suggestion was to use the try/catch/finally that wraps the entire async function","date":"2017-01-30T22:38:49.258Z","type":"message"}
{"nick":"aklein","message":"and instead of rewriting return to resolve the promise, it'd be rewritten to save the return value somewhere, which the finally block would use to resolve the promise and then return","date":"2017-01-30T22:39:27.353Z","type":"message"}
{"nick":"caitp","message":"and I think that doesn't really work","date":"2017-01-30T22:39:54.609Z","type":"message"}
{"nick":"caitp","message":"or at least not cleanly","date":"2017-01-30T22:40:00.998Z","type":"message"}
{"nick":"caitp","message":"it especially doesn't work with the stuff further down in the pipeline which is blocked on this, makes it all much more complicated with no real gain","date":"2017-01-30T22:40:26.746Z","type":"message"}
{"nick":"caitp","message":"so, I don't think we really want to do that","date":"2017-01-30T22:40:47.893Z","type":"message"}
{"nick":"caitp","message":"I am trying to split the refactoring apart from the fix, but I think it actually creates more review work rather than less","date":"2017-01-30T22:41:36.099Z","type":"message"}
{"nick":"caitp","message":"basically, BG has a framework for fixing the problem already, and the AST desugaring gets in the way of that framework, I think the better fix is to just get rid of the AST desugaring rather than make it get in the way more","date":"2017-01-30T22:44:21.770Z","type":"message"}
{"nick":"aklein","message":"what's the lack of cleanliness?","date":"2017-01-30T22:45:42.048Z","type":"message"}
{"nick":"aklein","message":"from my point of view ( admittedly somewhat outside the implementation details), there's a bug in the existing code, and there's a straightforward-sounding fix. I'd rather fix the bug first and do the refactoring later, so as to get to a working state asap. but it sounds like the tricky part may be that it's not actually a \"straightforward fix\"","date":"2017-01-30T22:47:03.257Z","type":"message"}
{"nick":"caitp","message":"well, it's a bug, but nobody else seems to have actually noticed the bug","date":"2017-01-30T22:47:24.673Z","type":"message"}
{"nick":"caitp","message":"the ast fix is not very compatible with the work on async iteration so far, and I\"d really like to not have to go back to the drawing board on it :p","date":"2017-01-30T22:47:50.150Z","type":"message"}
{"nick":"aklein","message":"ah, ok, so that makes your objection clearer, thank you","date":"2017-01-30T22:48:11.918Z","type":"message"}
{"nick":"caitp","message":"the patch as it is now does combine the jobs of fixing the bug and getting rid of the AST desugaring, and I think I can split it into 2 patches, but I don't think that's really easier to review, unfortunately","date":"2017-01-30T22:49:17.812Z","type":"message"}
{"nick":"aklein","message":"is that because it's hard to get the \"wrong\" behavior with the refactored version?","date":"2017-01-30T22:50:42.074Z","type":"message"}
{"nick":"caitp","message":"the ControlScope state machine seems to work pretty well","date":"2017-01-30T22:57:03.951Z","type":"message"}
{"nick":"aklein","message":"caitp: I can buy that; I guess that's something to work out with littledan/neis, since they're the ones saying the current version is hard to review. I suspect the detailed CL description will help.","date":"2017-01-30T23:13:12.002Z","type":"message"}
{"nick":"Guest59","reason":"Ping timeout: 264 seconds","date":"2017-01-30T23:25:35.243Z","type":"quit"}
{"nick":"Guest59","date":"2017-01-30T23:27:28.652Z","type":"join"}
{"nick":"bradleymeck","date":"2017-01-30T23:36:33.280Z","type":"join"}
{"nick":"RT|Chatzilla","date":"2017-01-30T23:38:23.485Z","type":"join"}
