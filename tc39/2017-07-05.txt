{"nick":"Domenic","message":"This whole identifier vs. expression vs. destructuring syntax business is a rough problem","date":"2017-07-05T00:29:56.850Z","type":"message"}
{"nick":"Domenic","message":"Very curious if there's an elegant solution hiding somewhere","date":"2017-07-05T00:30:04.601Z","type":"message"}
{"nick":"Domenic","message":"It seems key","date":"2017-07-05T00:30:08.164Z","type":"message"}
{"nick":"samth","message":"Domenic: note that the destructuring syntax follows conventional pattern matching; ie that `match 1 { x : x }` produces 1","date":"2017-07-05T00:31:24.431Z","type":"message"}
{"nick":"samth","message":"and I agree that it's key","date":"2017-07-05T00:31:35.077Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-07-05T01:05:10.923Z","type":"quit"}
{"nick":"Havvy","message":"I do find it weird that an identifier in the match syntax is a custom matcher instead of binding an identifier. But then, you want to also have custom matchers give custom destructuring a. la. regexp?","date":"2017-07-05T02:07:09.781Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-07-05T03:23:25.591Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-07-05T04:02:23.696Z","type":"quit"}
{"nick":"Bakkot","message":"Digging through my dad's stuff, I found some old docs from TC39 circa '99.","date":"2017-07-05T05:18:21.904Z","type":"message"}
{"nick":"Bakkot","message":"Including e.g. what may be the earliest coherent classes proposal, from Herman Venter of Microsoft.","date":"2017-07-05T05:18:46.096Z","type":"message"}
{"nick":"Bakkot","message":"It's funny; it gives a few sentences to private fields, and pretty much assumes they'll be easy because we'll have type annotations.","date":"2017-07-05T05:19:18.844Z","type":"message"}
{"nick":"Bakkot","message":"Not so much.","date":"2017-07-05T05:19:21.356Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: your dad was on tc39?","date":"2017-07-05T05:41:56.009Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: indeed yes","date":"2017-07-05T05:46:49.322Z","type":"message"}
{"nick":"Bakkot","message":"he's credited in ES3, in fact.","date":"2017-07-05T05:46:59.272Z","type":"message"}
{"nick":"Bakkot","message":"http://www-archive.mozilla.org/js/language/E262-3.pdf \"The following people have contributed to the work leading to ECMA 262: [...] Bill Gibbons\"","date":"2017-07-05T05:47:38.772Z","type":"message"}
{"nick":"Bakkot","message":"littledan, wycats, jeffmo etc: I am increasingly uncomfortable with the shorthand syntax for access private properties and would prefer to see it removed before stage 3.","date":"2017-07-05T05:52:08.942Z","type":"message"}
{"nick":"Bakkot","message":"My concern can be summed up as \"property access without an explicit receiver is (/ feels like) an antipattern in programming language design\".","date":"2017-07-05T05:52:31.528Z","type":"message"}
{"nick":"Bakkot","message":"In particular, there's at least two potentially confusing parts:","date":"2017-07-05T05:52:44.136Z","type":"message"}
{"nick":"Bakkot","message":"1) In `class A { #x = 0; y = 1; m() { #x++; y--; } }`, the increment affects an instance field, and the decrement affects a closed-over variable (and not the instance property of the same name). Even if that's intentional, those things should _not_ look so similar.","date":"2017-07-05T05:53:15.137Z","type":"message"}
{"nick":"Bakkot","message":"2) The confusion about the receiver when invoking private methods: in `class A { #m() { return this; } a() { #m() } }; (new A).a()`, the fact that the call to `#m` returns the instance is not at all obvious from the code.","date":"2017-07-05T05:53:42.034Z","type":"message"}
{"nick":"afrael","date":"2017-07-05T05:54:40.630Z","type":"join"}
{"nick":"wycats","message":"1. I disagree with your arguments.","date":"2017-07-05T05:54:44.638Z","type":"message"}
{"nick":"wycats","message":"2. I don't think I'm going to win this one and don't want to be responsible for blocking private state over what many people seem to believe is a quixotic quest, so I'll probably give in before long","date":"2017-07-05T05:54:44.692Z","type":"message"}
{"nick":"Bakkot","message":"My impression has actually been that most people are on board with the shorthand syntax, and I was trying to figure out if I felt strongly enough to block it","date":"2017-07-05T05:55:44.722Z","type":"message"}
{"nick":"Bakkot","message":"I feel like I don't understand the arguments for the inclusion of the syntax very well, though, and would like to.","date":"2017-07-05T05:56:03.310Z","type":"message"}
{"nick":"wycats","message":"A handful of people share that perspective, and that doesn't bode well for \"sugar\"","date":"2017-07-05T05:56:10.738Z","type":"message"}
{"nick":"wycats","message":"Re: 1, my disagreement stems from the fact that I believe that private state is a significant new feature, and what is perceived as \"obvious\" will, in some sense, be driven by usage and idioms","date":"2017-07-05T05:56:55.002Z","type":"message"}
{"nick":"wycats","message":"I strongly disagree with the \"antipattern\" point, but I suspect you didn't mean it quite as strongly as that","date":"2017-07-05T05:57:17.677Z","type":"message"}
{"nick":"wycats","message":"Private methods affect my calculus some","date":"2017-07-05T05:57:25.427Z","type":"message"}
{"nick":"wycats","message":"It's almost 11pm here, perhaps we could schedule a VC in the near future (perhaps littledan would like to join)","date":"2017-07-05T05:57:48.541Z","type":"message"}
{"nick":"wycats","message":"(they affect my calculus in your direction, to be clear)","date":"2017-07-05T05:58:25.805Z","type":"message"}
{"nick":"Bakkot","message":"sure; let's coordinate that tomorrow? I am also on PST, but littledan was not last I checked.","date":"2017-07-05T05:58:39.258Z","type":"message"}
{"nick":"wycats","message":"Yep","date":"2017-07-05T06:03:59.961Z","type":"message"}
{"nick":"wycats","message":"Ping me tomorrow :)","date":"2017-07-05T06:04:06.214Z","type":"message"}
{"nick":"wycats","message":"New baby means I try to stick to work hours when I can","date":"2017-07-05T06:04:15.842Z","type":"message"}
{"nick":"Bakkot","message":"âˆš","date":"2017-07-05T06:04:20.568Z","type":"message"}
{"nick":"wycats","message":"I'd generally feel better if I knew you understood the arguments and came away unpersuaded :)","date":"2017-07-05T06:05:06.758Z","type":"message"}
{"nick":"Bakkot","message":"Me too!","date":"2017-07-05T06:05:20.719Z","type":"message"}
{"nick":"Bakkot","message":"I really don't want to say \"I don't know why this is here, but let's remove it\".","date":"2017-07-05T06:06:10.929Z","type":"message"}
{"nick":"Bakkot","message":"(even though I just did.)","date":"2017-07-05T06:07:05.712Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-07-05T06:20:12.587Z","type":"quit"}
{"nick":"gskachkov","date":"2017-07-05T06:20:25.657Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 260 seconds","date":"2017-07-05T06:25:04.624Z","type":"quit"}
{"nick":"littledan","message":"I work in European time, but don't have a baby and am fine to meet any time until 3 PM PST","date":"2017-07-05T06:43:45.877Z","type":"message"}
{"nick":"littledan","message":"Bakkot: diervo and I were also talking about the commas, which are causing some confusion among the people who are working on implementation in Babel and writing tests, e.g., https://github.com/babel/babylon/pull/608#issuecomment-312627433","date":"2017-07-05T06:55:49.819Z","type":"message"}
{"nick":"Bakkot","message":"Oh jeeze, I didn't realize there was Typescript precedent which differed.","date":"2017-07-05T06:56:45.596Z","type":"message"}
{"nick":"Bakkot","message":"I get the rational for comma declarations for use decorators, though, and expect that people would be more surprised by TS's behavior than the proposed behavior here.","date":"2017-07-05T06:58:15.376Z","type":"message"}
{"nick":"Bakkot","message":"(I wouldn't object to making commas a part of the decorators proposal, mind, but that might be too weird a separation.)","date":"2017-07-05T06:58:45.744Z","type":"message"}
{"nick":"Bakkot","message":"I wonder if we could talk to TS users and/or developers about that difference?","date":"2017-07-05T06:59:59.433Z","type":"message"}
{"nick":"Bakkot","message":"TS decorators are marked as 'experimental' pretty vividly, looks like, which is good.","date":"2017-07-05T07:00:19.822Z","type":"message"}
{"nick":"littledan","message":"I don't know if marking them as experimental is that strong of a signal; the sigil debate made it clear that people depend strongly on decorators being roughly how they are on the user end (even if it's fine for library authors to need to change things)","date":"2017-07-05T08:33:31.011Z","type":"message"}
{"nick":"gskachkov","date":"2017-07-05T09:17:18.886Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 255 seconds","date":"2017-07-05T09:25:20.909Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-07-05T10:25:12.328Z","type":"quit"}
{"nick":"mylesborins","date":"2017-07-05T10:25:42.914Z","type":"join"}
{"nick":"jmdyck","date":"2017-07-05T10:39:19.068Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2017-07-05T12:19:04.617Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-07-05T13:17:58.597Z","type":"join"}
{"nick":"Domenic","message":"+1 Bakkot, although not strong enough support to engage in long discussions or block or anything. I just agree I'd much prefer explicitness.","date":"2017-07-05T13:37:59.224Z","type":"message"}
{"nick":"bradleymeck","message":"without explicitness, could #global mean something eventually? a thing that is pulled off global scope?","date":"2017-07-05T14:15:39.869Z","type":"message"}
{"nick":"caridy_","date":"2017-07-05T15:15:57.349Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2017-07-05T15:18:57.551Z","type":"quit"}
{"nick":"caridy","date":"2017-07-05T15:29:50.480Z","type":"join"}
{"nick":"caridy_","reason":"Read error: Connection reset by peer","date":"2017-07-05T15:29:50.752Z","type":"quit"}
{"nick":"gskachkov","date":"2017-07-05T15:51:10.531Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 248 seconds","date":"2017-07-05T15:55:45.474Z","type":"quit"}
{"nick":"littledan","message":"bterlson: Any idea when we'll get pipeline on the agenda?","date":"2017-07-05T16:05:40.757Z","type":"message"}
{"nick":"bterlson","message":"littledan: working on it after pattern matching dies down a bit :-P","date":"2017-07-05T16:07:12.382Z","type":"message"}
{"nick":"bterlson","message":"btw the tweet I sent about it is at 51k impressions, by far the most I've gotten. I guess it's an exciting feature even if it's not clear what it'll look like.","date":"2017-07-05T16:08:01.894Z","type":"message"}
{"nick":"littledan","message":"bterlson: yay!","date":"2017-07-05T16:08:04.891Z","type":"message"}
{"nick":"bterlson","message":"oh my god so many comments","date":"2017-07-05T16:16:13.463Z","type":"message"}
{"nick":"bterlson","message":"maybe I should do pipeline now","date":"2017-07-05T16:16:20.871Z","type":"message"}
{"nick":"bterlson","message":":-P","date":"2017-07-05T16:16:24.104Z","type":"message"}
{"nick":"littledan","message":"pipeline is way easier","date":"2017-07-05T16:18:14.820Z","type":"message"}
{"nick":"bterlson","message":"littledan: the difficulty will be answering the extensive \"why not bind\" questions","date":"2017-07-05T16:19:34.666Z","type":"message"}
{"nick":"bterlson","message":"I have to write up a fair amount of text on that topic","date":"2017-07-05T16:19:57.039Z","type":"message"}
{"nick":"littledan","message":"is there anything to say about, why do this with the first argument (as opposed to, e.g., the receiver or the last argument)?","date":"2017-07-05T16:20:43.820Z","type":"message"}
{"nick":"Bakkot","message":"\"that's the idiom in functional style / mathematics\", is I think the reason, no?","date":"2017-07-05T16:32:48.517Z","type":"message"}
{"nick":"bterlson","message":"littledan: with the proposed syntax for partial application it becomes less important","date":"2017-07-05T16:34:21.138Z","type":"message"}
{"nick":"bterlson","message":"x |> foo(?, 10) |> bar(10, ?)","date":"2017-07-05T16:34:35.102Z","type":"message"}
{"nick":"bradleymeck","message":"getArgs |> call(...?)","date":"2017-07-05T16:37:39.373Z","type":"message"}
{"nick":"bradleymeck","message":"would be somewhat interesting","date":"2017-07-05T16:37:47.229Z","type":"message"}
{"nick":"bterlson","message":"indeed","date":"2017-07-05T16:40:36.952Z","type":"message"}
{"nick":"bterlson","message":"I feel so good about this proposal in part because I keep discovering useful things","date":"2017-07-05T16:40:46.010Z","type":"message"}
{"nick":"bterlson","message":"like Ron recently discovered that you could do this-style pipeline via call/apply: [1,2,3] |> Array.prototype.map.call(?, x => x * 2)","date":"2017-07-05T16:41:11.740Z","type":"message"}
{"nick":"Bakkot","message":"bterlson: [1,2,3] |> ?.map(x => x * 2)","date":"2017-07-05T17:29:57.235Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: I had that in early proposals but the special form seemed unnecessary and potentially confusiong","date":"2017-07-05T17:30:28.604Z","type":"message"}
{"nick":"Bakkot","message":"hmmmm","date":"2017-07-05T17:30:39.564Z","type":"message"}
{"nick":"bterlson","message":"is map looked up as an identifier or as a property of the LHS object?","date":"2017-07-05T17:31:15.751Z","type":"message"}
{"nick":"Bakkot","message":"property, obviously","date":"2017-07-05T17:31:32.932Z","type":"message"}
{"nick":"bterlson","message":"looks like the latter but the former is the predominant use case I think","date":"2017-07-05T17:31:33.023Z","type":"message"}
{"nick":"Bakkot","message":". always is property","date":"2017-07-05T17:31:37.504Z","type":"message"}
{"nick":"ljharb","message":"[1,2,3] |> ::Array.prototype.map(x => x * 2)","date":"2017-07-05T17:31:42.951Z","type":"message"}
{"nick":"bterlson","message":"unless it has another dot above it :-P","date":"2017-07-05T17:31:44.949Z","type":"message"}
{"nick":"ljharb","message":"ah no that wouldn't work","date":"2017-07-05T17:31:52.737Z","type":"message"}
{"nick":"AtumT","date":"2017-07-05T17:35:06.780Z","type":"join"}
{"nick":"Bakkot","message":"bterlson: not convinced former is predominant use case","date":"2017-07-05T17:35:24.155Z","type":"message"}
{"nick":"Bakkot","message":"or, especially, will be going forward","date":"2017-07-05T17:35:30.874Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: yeah could be right","date":"2017-07-05T17:36:30.541Z","type":"message"}
{"nick":"Bakkot","message":"it isn't all that common to have functions which operate on their 'this' and don't expect 'this' to be something with the function as a property of it","date":"2017-07-05T17:36:41.821Z","type":"message"}
{"nick":"Bakkot","message":"i.e. functions which are expected to be used via .call etc","date":"2017-07-05T17:36:56.557Z","type":"message"}
{"nick":"Bakkot","message":"is my impression, anyway.","date":"2017-07-05T17:37:13.338Z","type":"message"}
{"nick":"bterlson","message":"if we get extension methods or \"interfaces\" ala @jspedant's interface then I can see this happening much more","date":"2017-07-05T17:38:12.852Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: isn't that an argument against the :: operator with the exception of its method extraction tool?","date":"2017-07-05T17:38:28.525Z","type":"message"}
{"nick":"Bakkot","message":"kinda! but :: is good for postfix calls, which is something a lot of people want, so if we got :: we'd start seeing more of those functions.","date":"2017-07-05T17:39:18.419Z","type":"message"}
{"nick":"Bakkot","message":"the interfaces proposal actually does add methods to the prototype, so it would work with a |> ?.foo","date":"2017-07-05T17:43:22.767Z","type":"message"}
{"nick":"Bakkot","message":"incidentally, I found a postfix / infix proposal from '99","date":"2017-07-05T17:43:54.231Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: yeah that's what I'm saying, interfaces or extension methods or similar might argue for ?.blah syntax","date":"2017-07-05T17:44:12.759Z","type":"message"}
{"nick":"Bakkot","message":"ahh, yeah","date":"2017-07-05T17:44:19.944Z","type":"message"}
{"nick":"bterlson","message":"I also argue that these are the proposals that :: proponents mostly want :-P","date":"2017-07-05T17:44:23.415Z","type":"message"}
{"nick":"bterlson","message":"with the exception of method extraction which I want bad but unsure if prefix :: is the right syntax for it","date":"2017-07-05T17:44:43.744Z","type":"message"}
{"nick":"Bakkot","message":":: is so much prettier than |> ...","date":"2017-07-05T17:44:47.513Z","type":"message"}
{"nick":"bterlson","message":"disagree!","date":"2017-07-05T17:44:53.315Z","type":"message"}
{"nick":"bterlson","message":"in a monospaced font |> is more palatable at least","date":"2017-07-05T17:45:02.011Z","type":"message"}
{"nick":"bterlson","message":"plus, aren't you using ligatures and a programming font? ;)","date":"2017-07-05T17:45:10.888Z","type":"message"}
{"nick":"bradleymeck","message":"gah","date":"2017-07-05T17:45:21.194Z","type":"message"}
{"nick":"bradleymeck","message":"never","date":"2017-07-05T17:45:22.949Z","type":"message"}
{"nick":"bterlson","message":"lol","date":"2017-07-05T17:45:25.736Z","type":"message"}
{"nick":"bradleymeck","message":"the real programming font I want is one that shows me ASI semicolons, even if they don't go to disk","date":"2017-07-05T17:45:58.203Z","type":"message"}
{"nick":"bterlson","message":"hmm","date":"2017-07-05T17:46:56.551Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: prettier/eslint on save","date":"2017-07-05T17:46:58.677Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: i've done that, but it janks things","date":"2017-07-05T17:47:09.220Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-07-05T17:48:03.340Z","type":"quit"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2017-07-05T17:59:27.780Z","type":"quit"}
{"nick":"AtumT","date":"2017-07-05T18:11:50.907Z","type":"join"}
{"nick":"ljharb","message":"|> is super ugly :-/","date":"2017-07-05T18:16:38.399Z","type":"message"}
{"nick":"ljharb","message":"â†’ would be nice tho :-p","date":"2017-07-05T18:16:44.715Z","type":"message"}
{"nick":"bradleymeck","date":"2017-07-05T18:26:04.630Z","type":"join"}
{"nick":"Domenic","message":"bterlson: we are closing in on a final version of the modules spec patch. In fact we think what's up now is good. But we might want to refactor a bit later. Can we land now and refactor, or do you think we should do it all at once?","date":"2017-07-05T18:26:17.966Z","type":"message"}
{"nick":"Domenic","message":"My main concern is right now everyone has to implement off of PRs instead of master, so I would rather land things sooner","date":"2017-07-05T18:26:37.156Z","type":"message"}
{"nick":"bterlson","message":"Domenic: how big is the refactor?","date":"2017-07-05T18:27:51.223Z","type":"message"}
{"nick":"bterlson","message":"Domenic: don't want to merge something that will be completely rewritten. Maybe an editor note with a link to the WIP?","date":"2017-07-05T18:28:19.033Z","type":"message"}
{"nick":"Domenic","message":"bterlson: It looks like the current refactor proposal is to go from ResolveExport(x, y, paramToControlBehavior) returning x to ResolveExport(x, y) returning {x, infoAboutBehaviorYouShouldAlsoDo} and then move that behavior out to one of its callers.","date":"2017-07-05T18:29:27.210Z","type":"message"}
{"nick":"Domenic","message":"So, IMO pretty local","date":"2017-07-05T18:29:52.302Z","type":"message"}
{"nick":"bterlson","message":"I haven't read the proposal recently, but what's the holdup on doing that refactor?","date":"2017-07-05T18:31:56.687Z","type":"message"}
{"nick":"Domenic","message":"It just takes time, and we're not sure it's even a better refactor; we're debating it among three people in different timezones.","date":"2017-07-05T18:32:31.252Z","type":"message"}
{"nick":"bterlson","message":"alright, I'll leave it up to you then","date":"2017-07-05T18:33:11.739Z","type":"message"}
{"nick":"Domenic","message":"Sounds good. I'll CC you on the thread.","date":"2017-07-05T18:33:24.527Z","type":"message"}
{"nick":"bterlson","message":"thanks","date":"2017-07-05T18:33:30.501Z","type":"message"}
{"nick":"bterlson","message":"unsure what the consensus status is also","date":"2017-07-05T18:33:39.427Z","type":"message"}
{"nick":"Domenic","message":"We got consensus last meeting!!","date":"2017-07-05T18:33:47.734Z","type":"message"}
{"nick":"Domenic","message":"This I am very sure of","date":"2017-07-05T18:33:53.528Z","type":"message"}
{"nick":"Domenic","message":"It was pretty blanket too, especially with regard to refactorings and ways of meeting the overall goal we got consensus on","date":"2017-07-05T18:34:10.891Z","type":"message"}
{"nick":"bterlson","message":"that was my recollection as well","date":"2017-07-05T18:35:15.796Z","type":"message"}
{"nick":"bterlson","message":"plus, few people seemingly engaged in the room","date":"2017-07-05T18:35:24.909Z","type":"message"}
{"nick":"bterlson","message":"Domenic: is there a list of normative changes? Is the OP still up to date?","date":"2017-07-05T18:39:49.570Z","type":"message"}
{"nick":"Domenic","message":"bterlson: pretty much, yeah.","date":"2017-07-05T18:41:19.733Z","type":"message"}
{"nick":"Domenic","message":"The change in ResolveExport()'s signature might count as normative?","date":"2017-07-05T18:41:33.707Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-07-05T18:51:12.959Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-07-05T18:56:14.725Z","type":"join"}
{"nick":"Domenic","message":"bterlson: did you forget to push the \"send review\" button? I don't see any comments","date":"2017-07-05T19:11:06.072Z","type":"message"}
{"nick":"bterlson","message":"Domenic: I did, thanks :)","date":"2017-07-05T19:11:57.900Z","type":"message"}
{"nick":"gskachkov","date":"2017-07-05T19:50:58.926Z","type":"join"}
{"nick":"afrael","reason":"Remote host closed the connection","date":"2017-07-05T20:29:05.938Z","type":"quit"}
{"nick":"afrael","date":"2017-07-05T20:29:40.452Z","type":"join"}
{"nick":"afrael","reason":"Ping timeout: 240 seconds","date":"2017-07-05T20:33:45.285Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-07-05T22:38:49.345Z","type":"quit"}
