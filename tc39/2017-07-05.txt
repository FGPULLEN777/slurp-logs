{"nick":"Domenic","message":"This whole identifier vs. expression vs. destructuring syntax business is a rough problem","date":"2017-07-05T00:29:56.850Z","type":"message"}
{"nick":"Domenic","message":"Very curious if there's an elegant solution hiding somewhere","date":"2017-07-05T00:30:04.601Z","type":"message"}
{"nick":"Domenic","message":"It seems key","date":"2017-07-05T00:30:08.164Z","type":"message"}
{"nick":"samth","message":"Domenic: note that the destructuring syntax follows conventional pattern matching; ie that `match 1 { x : x }` produces 1","date":"2017-07-05T00:31:24.431Z","type":"message"}
{"nick":"samth","message":"and I agree that it's key","date":"2017-07-05T00:31:35.077Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-07-05T01:05:10.923Z","type":"quit"}
{"nick":"Havvy","message":"I do find it weird that an identifier in the match syntax is a custom matcher instead of binding an identifier. But then, you want to also have custom matchers give custom destructuring a. la. regexp?","date":"2017-07-05T02:07:09.781Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-07-05T03:23:25.591Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-07-05T04:02:23.696Z","type":"quit"}
{"nick":"Bakkot","message":"Digging through my dad's stuff, I found some old docs from TC39 circa '99.","date":"2017-07-05T05:18:21.904Z","type":"message"}
{"nick":"Bakkot","message":"Including e.g. what may be the earliest coherent classes proposal, from Herman Venter of Microsoft.","date":"2017-07-05T05:18:46.096Z","type":"message"}
{"nick":"Bakkot","message":"It's funny; it gives a few sentences to private fields, and pretty much assumes they'll be easy because we'll have type annotations.","date":"2017-07-05T05:19:18.844Z","type":"message"}
{"nick":"Bakkot","message":"Not so much.","date":"2017-07-05T05:19:21.356Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: your dad was on tc39?","date":"2017-07-05T05:41:56.009Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: indeed yes","date":"2017-07-05T05:46:49.322Z","type":"message"}
{"nick":"Bakkot","message":"he's credited in ES3, in fact.","date":"2017-07-05T05:46:59.272Z","type":"message"}
{"nick":"Bakkot","message":"http://www-archive.mozilla.org/js/language/E262-3.pdf \"The following people have contributed to the work leading to ECMA 262: [...] Bill Gibbons\"","date":"2017-07-05T05:47:38.772Z","type":"message"}
{"nick":"Bakkot","message":"littledan, wycats, jeffmo etc: I am increasingly uncomfortable with the shorthand syntax for access private properties and would prefer to see it removed before stage 3.","date":"2017-07-05T05:52:08.942Z","type":"message"}
{"nick":"Bakkot","message":"My concern can be summed up as \"property access without an explicit receiver is (/ feels like) an antipattern in programming language design\".","date":"2017-07-05T05:52:31.528Z","type":"message"}
{"nick":"Bakkot","message":"In particular, there's at least two potentially confusing parts:","date":"2017-07-05T05:52:44.136Z","type":"message"}
{"nick":"Bakkot","message":"1) In `class A { #x = 0; y = 1; m() { #x++; y--; } }`, the increment affects an instance field, and the decrement affects a closed-over variable (and not the instance property of the same name). Even if that's intentional, those things should _not_ look so similar.","date":"2017-07-05T05:53:15.137Z","type":"message"}
{"nick":"Bakkot","message":"2) The confusion about the receiver when invoking private methods: in `class A { #m() { return this; } a() { #m() } }; (new A).a()`, the fact that the call to `#m` returns the instance is not at all obvious from the code.","date":"2017-07-05T05:53:42.034Z","type":"message"}
{"nick":"afrael","date":"2017-07-05T05:54:40.630Z","type":"join"}
{"nick":"wycats","message":"1. I disagree with your arguments.","date":"2017-07-05T05:54:44.638Z","type":"message"}
{"nick":"wycats","message":"2. I don't think I'm going to win this one and don't want to be responsible for blocking private state over what many people seem to believe is a quixotic quest, so I'll probably give in before long","date":"2017-07-05T05:54:44.692Z","type":"message"}
{"nick":"Bakkot","message":"My impression has actually been that most people are on board with the shorthand syntax, and I was trying to figure out if I felt strongly enough to block it","date":"2017-07-05T05:55:44.722Z","type":"message"}
{"nick":"Bakkot","message":"I feel like I don't understand the arguments for the inclusion of the syntax very well, though, and would like to.","date":"2017-07-05T05:56:03.310Z","type":"message"}
{"nick":"wycats","message":"A handful of people share that perspective, and that doesn't bode well for \"sugar\"","date":"2017-07-05T05:56:10.738Z","type":"message"}
{"nick":"wycats","message":"Re: 1, my disagreement stems from the fact that I believe that private state is a significant new feature, and what is perceived as \"obvious\" will, in some sense, be driven by usage and idioms","date":"2017-07-05T05:56:55.002Z","type":"message"}
{"nick":"wycats","message":"I strongly disagree with the \"antipattern\" point, but I suspect you didn't mean it quite as strongly as that","date":"2017-07-05T05:57:17.677Z","type":"message"}
{"nick":"wycats","message":"Private methods affect my calculus some","date":"2017-07-05T05:57:25.427Z","type":"message"}
{"nick":"wycats","message":"It's almost 11pm here, perhaps we could schedule a VC in the near future (perhaps littledan would like to join)","date":"2017-07-05T05:57:48.541Z","type":"message"}
{"nick":"wycats","message":"(they affect my calculus in your direction, to be clear)","date":"2017-07-05T05:58:25.805Z","type":"message"}
{"nick":"Bakkot","message":"sure; let's coordinate that tomorrow? I am also on PST, but littledan was not last I checked.","date":"2017-07-05T05:58:39.258Z","type":"message"}
{"nick":"wycats","message":"Yep","date":"2017-07-05T06:03:59.961Z","type":"message"}
{"nick":"wycats","message":"Ping me tomorrow :)","date":"2017-07-05T06:04:06.214Z","type":"message"}
{"nick":"wycats","message":"New baby means I try to stick to work hours when I can","date":"2017-07-05T06:04:15.842Z","type":"message"}
{"nick":"Bakkot","message":"âˆš","date":"2017-07-05T06:04:20.568Z","type":"message"}
{"nick":"wycats","message":"I'd generally feel better if I knew you understood the arguments and came away unpersuaded :)","date":"2017-07-05T06:05:06.758Z","type":"message"}
{"nick":"Bakkot","message":"Me too!","date":"2017-07-05T06:05:20.719Z","type":"message"}
{"nick":"Bakkot","message":"I really don't want to say \"I don't know why this is here, but let's remove it\".","date":"2017-07-05T06:06:10.929Z","type":"message"}
{"nick":"Bakkot","message":"(even though I just did.)","date":"2017-07-05T06:07:05.712Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-07-05T06:20:12.587Z","type":"quit"}
{"nick":"gskachkov","date":"2017-07-05T06:20:25.657Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 260 seconds","date":"2017-07-05T06:25:04.624Z","type":"quit"}
{"nick":"littledan","message":"I work in European time, but don't have a baby and am fine to meet any time until 3 PM PST","date":"2017-07-05T06:43:45.877Z","type":"message"}
{"nick":"littledan","message":"Bakkot: diervo and I were also talking about the commas, which are causing some confusion among the people who are working on implementation in Babel and writing tests, e.g., https://github.com/babel/babylon/pull/608#issuecomment-312627433","date":"2017-07-05T06:55:49.819Z","type":"message"}
{"nick":"Bakkot","message":"Oh jeeze, I didn't realize there was Typescript precedent which differed.","date":"2017-07-05T06:56:45.596Z","type":"message"}
{"nick":"Bakkot","message":"I get the rational for comma declarations for use decorators, though, and expect that people would be more surprised by TS's behavior than the proposed behavior here.","date":"2017-07-05T06:58:15.376Z","type":"message"}
{"nick":"Bakkot","message":"(I wouldn't object to making commas a part of the decorators proposal, mind, but that might be too weird a separation.)","date":"2017-07-05T06:58:45.744Z","type":"message"}
{"nick":"Bakkot","message":"I wonder if we could talk to TS users and/or developers about that difference?","date":"2017-07-05T06:59:59.433Z","type":"message"}
{"nick":"Bakkot","message":"TS decorators are marked as 'experimental' pretty vividly, looks like, which is good.","date":"2017-07-05T07:00:19.822Z","type":"message"}
