{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-06T00:09:38.850Z","type":"quit"}
{"nick":"AtumT_","date":"2018-02-06T00:13:07.789Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 265 seconds","date":"2018-02-06T00:15:59.456Z","type":"quit"}
{"nick":"AtumT","date":"2018-02-06T00:25:49.206Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 268 seconds","date":"2018-02-06T00:27:41.760Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-02-06T01:06:29.137Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-06T02:04:25.186Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-06T02:19:19.872Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-06T02:32:07.224Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-06T02:35:31.225Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-06T03:12:07.516Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-06T03:25:36.782Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-06T03:34:07.190Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-06T03:54:54.856Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-06T04:08:08.087Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-06T04:11:59.462Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-06T04:23:10.198Z","type":"quit"}
{"nick":"caridy","date":"2018-02-06T04:23:37.286Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-02-06T04:51:48.201Z","type":"quit"}
{"nick":"jwalden","reason":"Ping timeout: 260 seconds","date":"2018-02-06T04:56:27.279Z","type":"quit"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-02-06T05:12:22.014Z","type":"quit"}
{"nick":"jwalden","date":"2018-02-06T05:19:13.021Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 260 seconds","date":"2018-02-06T05:26:12.195Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-06T07:17:51.140Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-06T07:52:27.752Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-02-06T07:53:56.181Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-02-06T08:56:28.310Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-06T09:34:39.520Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-02-06T09:53:04.548Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-06T11:25:11.945Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-06T11:25:42.579Z","type":"join"}
{"nick":"Havvy","reason":"Ping timeout: 268 seconds","date":"2018-02-06T11:51:34.766Z","type":"quit"}
{"nick":"Havvy","date":"2018-02-06T11:54:35.709Z","type":"join"}
{"nick":"tobie","date":"2018-02-06T12:00:03.342Z","type":"quit"}
{"nick":"tobie","date":"2018-02-06T12:00:36.290Z","type":"join"}
{"nick":"dherman","date":"2018-02-06T12:03:34.240Z","type":"quit"}
{"nick":"dherman","date":"2018-02-06T12:03:49.276Z","type":"join"}
{"nick":"Domenic","date":"2018-02-06T12:05:56.765Z","type":"quit"}
{"nick":"Domenic","date":"2018-02-06T12:06:13.774Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 240 seconds","date":"2018-02-06T13:13:48.167Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-06T13:37:36.205Z","type":"join"}
{"nick":"AtumT","date":"2018-02-06T13:39:25.419Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-06T13:43:13.857Z","type":"quit"}
{"nick":"jmdyck","date":"2018-02-06T13:45:17.731Z","type":"join"}
{"nick":"bradleymeck","date":"2018-02-06T14:59:43.518Z","type":"join"}
{"nick":"bstoroz","date":"2018-02-06T15:00:38.468Z","type":"quit"}
{"nick":"bstoroz","date":"2018-02-06T15:00:51.380Z","type":"join"}
{"nick":"ljharb","date":"2018-02-06T15:02:22.015Z","type":"quit"}
{"nick":"ljharb","date":"2018-02-06T15:03:14.019Z","type":"join"}
{"nick":"keith_miller","date":"2018-02-06T15:30:41.661Z","type":"join"}
{"nick":"littledan","date":"2018-02-06T15:32:30.839Z","type":"quit"}
{"nick":"littledan","date":"2018-02-06T15:32:49.537Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 248 seconds","date":"2018-02-06T15:44:33.801Z","type":"quit"}
{"nick":"caiolima","date":"2018-02-06T15:48:38.759Z","type":"quit"}
{"nick":"caiolima","date":"2018-02-06T15:48:54.246Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-06T15:57:08.228Z","type":"quit"}
{"nick":"AtumT_","date":"2018-02-06T16:31:09.661Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 265 seconds","date":"2018-02-06T16:34:15.426Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-06T16:49:17.313Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-06T16:58:18.930Z","type":"quit"}
{"nick":"jmdyck1","date":"2018-02-06T16:58:33.854Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 276 seconds","date":"2018-02-06T16:58:38.723Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-06T17:01:01.749Z","type":"join"}
{"nick":"jwalden","date":"2018-02-06T17:12:33.964Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-06T17:22:02.379Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-06T17:50:39.377Z","type":"join"}
{"nick":"caridy","date":"2018-02-06T18:07:33.729Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-06T18:08:28.216Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-06T18:14:18.366Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2018-02-06T18:15:55.229Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-06T18:26:01.260Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-02-06T18:28:33.854Z","type":"quit"}
{"nick":"littledan","message":"hey, I'm wondering what people here think of Ron Buckton's proposal to add static blocks to classes, as part of the \"static class features\" proposal. Very clear writeup with him, with examples, at https://github.com/tc39/proposal-static-class-features/issues/23","date":"2018-02-06T18:33:10.974Z","type":"message"}
{"nick":"keith_miller","date":"2018-02-06T18:35:12.513Z","type":"join"}
{"nick":"Domenic","message":"The fact that they escape the block just seems a little fatal to me","date":"2018-02-06T18:42:00.870Z","type":"message"}
{"nick":"Domenic","message":"Oh this is just static blocks","date":"2018-02-06T18:43:17.830Z","type":"message"}
{"nick":"Domenic","message":"Not declarations in a static block being accessible in the class","date":"2018-02-06T18:43:27.605Z","type":"message"}
{"nick":"littledan","message":"right, they don't escape the block","date":"2018-02-06T18:46:49.273Z","type":"message"}
{"nick":"littledan","message":"you can leak things from them, though","date":"2018-02-06T18:46:57.871Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: i'm curious to other things like if the same idea can apply to async initialization of modules. these blocks should never be async for class initializations though","date":"2018-02-06T18:49:11.929Z","type":"message"}
{"nick":"littledan","message":"bradleymeck: I wasn't thinking of inserting async static blocks, no","date":"2018-02-06T18:49:32.247Z","type":"message"}
{"nick":"littledan","message":"bradleymeck: Do you think we need to think through how it would apply to modules to apply it to classes?","date":"2018-02-06T18:50:02.948Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: unclear, I feel that you don't need to but it has a similar use case at least conceptually to me","date":"2018-02-06T18:50:41.573Z","type":"message"}
{"nick":"littledan","message":"well, this is sort of analogous to imperative statements at the top level of a  module, I think","date":"2018-02-06T18:51:02.974Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: I would agree","date":"2018-02-06T18:53:47.097Z","type":"message"}
{"nick":"bradleymeck","message":"but since ESM initialization sometimes wants to be async and there are 2 discrete instantiate and evaluate points you would have more work to go through that","date":"2018-02-06T18:54:18.299Z","type":"message"}
{"nick":"bradleymeck","message":"I think class static blocks might influence stuff for ESM, but no need to make sure they are in lock step","date":"2018-02-06T18:54:38.093Z","type":"message"}
{"nick":"littledan","message":"I don't understand the difference between exporting a class with an async static block (which Ron didn't propose) and an await at the top level","date":"2018-02-06T18:55:33.740Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: depends on a bunch of UX, would a class with an async static block always initialize as a Promise rather than Function?","date":"2018-02-06T19:08:17.184Z","type":"message"}
{"nick":"littledan","message":"bradleymeck: Do you think these decisions will come back and show us that we should've taken a particular other design for non-async static blocks?","date":"2018-02-06T19:09:06.811Z","type":"message"}
{"nick":"bradleymeck","message":"doubtful","date":"2018-02-06T19:09:20.953Z","type":"message"}
{"nick":"bradleymeck","message":"the only case which it might get weird is if you introduce async static blocks and it doesn't act the same as top level await (if it acts like Variant A, but top level await chooses Variant B)","date":"2018-02-06T19:10:08.547Z","type":"message"}
{"nick":"littledan","message":"OK, I'll make sure to leave out async static blocks then","date":"2018-02-06T19:11:03.189Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: I do wonder if just having a static function that deletes itself wouldn't be similar thinking about this","date":"2018-02-06T19:15:23.645Z","type":"message"}
{"nick":"gskachkov","date":"2018-02-06T19:15:25.810Z","type":"join"}
{"nick":"littledan","message":"bradleymeck: Ron mentioned that in the thread, but I have a couple concerns. For one, deleting properties is a slow path in many implementations, and it feels weird to do these mutations to just get at a scope.","date":"2018-02-06T19:17:43.368Z","type":"message"}
{"nick":"littledan","message":"that's a workaround you can do today, for sure","date":"2018-02-06T19:17:53.492Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: I guess decorators wouldn't need to do anything with these","date":"2018-02-06T19:22:44.859Z","type":"message"}
{"nick":"bradleymeck","message":"anywho I'm rambling","date":"2018-02-06T19:22:52.715Z","type":"message"}
{"nick":"littledan","message":"well, that's a design decision; we could make them decoratable","date":"2018-02-06T19:23:30.711Z","type":"message"}
{"nick":"littledan","message":"what we'd need to decide upfront is whether to permit multiple, and whether they should be interspersed with something or run at the very end","date":"2018-02-06T19:23:54.243Z","type":"message"}
{"nick":"bradleymeck","message":"i understand the interspersed vs end, but why would it be impossible to allow multiple ones later if we only allow 1 in first iteration?","date":"2018-02-06T19:26:05.533Z","type":"message"}
{"nick":"littledan","message":"well, good point","date":"2018-02-06T19:26:32.363Z","type":"message"}
{"nick":"littledan","message":"do you think it might be best to just add static public fields, and leave anything else for later?","date":"2018-02-06T19:28:17.166Z","type":"message"}
{"nick":"Bakkot","message":"linclark: that is what I think, personally","date":"2018-02-06T19:29:00.972Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-06T19:29:11.815Z","type":"quit"}
{"nick":"Bakkot","message":"sorry, littledan","date":"2018-02-06T19:29:13.852Z","type":"message"}
{"nick":"Bakkot","message":"(gotten too used to tab completion only needing two characters...)","date":"2018-02-06T19:29:25.476Z","type":"message"}
{"nick":"littledan","message":"In the November 2017 meeting, there seemed to be a big request from the committee to make sure that things are all very well thought through, and not advance things peacemeal","date":"2018-02-06T19:32:15.847Z","type":"message"}
{"nick":"littledan","message":"piecemeal","date":"2018-02-06T19:32:26.625Z","type":"message"}
{"nick":"littledan","message":"that's why I've been hesitant to go with that option","date":"2018-02-06T19:32:48.199Z","type":"message"}
{"nick":"ljharb","message":"for statics, i think starting with just public fields would be fine with me","date":"2018-02-06T19:48:54.578Z","type":"message"}
{"nick":"bradleymeck","date":"2018-02-06T20:17:18.218Z","type":"join"}
{"nick":"bradleymeck","message":"littledan: i'd push for later personally if we can, but i agree that planning ahead is always good (even if you scrap the plans)","date":"2018-02-06T20:26:23.324Z","type":"message"}
{"nick":"littledan","message":"OK, sounds like to demonstrate that things are well-thought through, one way would be to write a bunch of explainer documents for all the possible follow-on proposals which will be consistent with the rest of the other class features","date":"2018-02-06T20:35:27.534Z","type":"message"}
{"nick":"littledan","message":"or, probably, three of them: for lexical declarations in classes, static private, and static blocks in classes","date":"2018-02-06T20:35:46.954Z","type":"message"}
{"nick":"littledan","message":"does anyone want to help out with writing these?","date":"2018-02-06T20:35:56.141Z","type":"message"}
{"nick":"fourthex","date":"2018-02-06T20:53:56.968Z","type":"join"}
{"nick":"fourthex","message":"I would like to propose that the import statement gets enhanced to include a filtering mechanism like require-shield on npmjs.org. This will increase developers confidence in using 3rd party modules.","date":"2018-02-06T20:55:51.714Z","type":"message"}
{"nick":"bradleymeck","message":"fourthex: define \"filtering\"","date":"2018-02-06T20:57:03.277Z","type":"message"}
{"nick":"bradleymeck","message":"do you just mean integrity checks?","date":"2018-02-06T20:57:07.597Z","type":"message"}
{"nick":"fourthex","message":"When you require (import) another module, you can specify which modules that module are allowed to import.","date":"2018-02-06T20:57:51.655Z","type":"message"}
{"nick":"bradleymeck","message":"fourthex: i'd be hesitant to do that in TC39, also would want integrity checks to do that not just by name","date":"2018-02-06T20:58:29.798Z","type":"message"}
{"nick":"fourthex","message":"What do you mean by integrity checks?","date":"2018-02-06T20:58:53.180Z","type":"message"}
{"nick":"bradleymeck","message":"fourthex: code signing of some nature, like https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity","date":"2018-02-06T21:02:02.692Z","type":"message"}
{"nick":"bradleymeck","message":"even if we ban modules by a specific name people can just rename them / put them into `data:` / `blob:` URLs etc.","date":"2018-02-06T21:02:35.369Z","type":"message"}
{"nick":"ljharb","message":"fourthex: that sounds like a terrible idea; that should be an internal implementation detail of the thing you import.","date":"2018-02-06T21:02:58.124Z","type":"message"}
{"nick":"ljharb","message":"also i could get around that by just copy-pasting all the code i wanted into my module; then you'd get no security benefit at all","date":"2018-02-06T21:03:37.788Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: we do need some form of meta data passing in the import syntax but I agree that the actual details are probably best left to hosts which might have different trust/signing mechanisms","date":"2018-02-06T21:04:15.068Z","type":"message"}
{"nick":"ljharb","message":"i think that limiting what an import can import would be just as bad an idea as limiting what functions a function can call.","date":"2018-02-06T21:04:47.398Z","type":"message"}
{"nick":"bradleymeck","message":"in general code signing is not limiting what it can import, but verifying the imports content regardless of specifier","date":"2018-02-06T21:05:29.384Z","type":"message"}
{"nick":"bradleymeck","message":"s/code signing/integrity checks/","date":"2018-02-06T21:05:57.611Z","type":"message"}
{"nick":"bradleymeck","message":"this though leaks into some weird stuff like loader hook implications since replacing source text invalidates the signature","date":"2018-02-06T21:06:55.663Z","type":"message"}
{"nick":"ljharb","message":"yeah code signing sounds fine","date":"2018-02-06T21:07:37.920Z","type":"message"}
{"nick":"Bakkot","message":"yeah, this seems like a place for SRI or CSP","date":"2018-02-06T21:07:45.982Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: i'm less kean on CSP for same reason i dislike the crossorigin attribute on <script> tags, loading it in one place with the attribute and one without gets into weird races","date":"2018-02-06T21:10:33.438Z","type":"message"}
{"nick":"bradleymeck","message":"CSP seems more like the provider (http server / fs / etc.) needs to store the data rather than the importer putting a flag on something it doesn't make","date":"2018-02-06T21:11:14.249Z","type":"message"}
{"nick":"bradleymeck","message":"failing if it doesn't match seems safe though","date":"2018-02-06T21:11:33.346Z","type":"message"}
{"nick":"bradleymeck","message":"keen*","date":"2018-02-06T21:11:42.084Z","type":"message"}
{"nick":"fourthex","message":"But how do I as a developer feel confident that the 3'rd party module wouldn't do something terrible? Signing only secures that that code has not changed.","date":"2018-02-06T21:17:48.288Z","type":"message"}
{"nick":"fourthex","message":"I am mostly worried about NodeJS scenario where the code can access the file system for instance","date":"2018-02-06T21:18:33.981Z","type":"message"}
{"nick":"ljharb","message":"fourthex: you audit the code","date":"2018-02-06T21:23:41.422Z","type":"message"}
{"nick":"ljharb","message":"including the entire dependency tree","date":"2018-02-06T21:23:45.370Z","type":"message"}
{"nick":"ljharb","message":"and, you run the code in a sandboxed environment - so that instead of trying to prevent bad things, you make bad things have minimal consequence.","date":"2018-02-06T21:24:15.851Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-06T21:24:16.480Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-06T21:32:10.246Z","type":"join"}
{"nick":"fourthex","message":"Yes. That is what we have traditionally done, but it means that every consumer will spend resources. If it makes a difference, Java actually has a similar mechanism with the policy files.","date":"2018-02-06T21:36:41.496Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-06T21:49:54.439Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-06T21:50:31.738Z","type":"join"}
{"nick":"fourthex","reason":"Quit: Page closed","date":"2018-02-06T21:57:38.798Z","type":"quit"}
{"nick":"bradleymeck","message":"fourthex: but even with such specifier black/white listing you aren't auditing the content of the actual things so it doesn't really mean that your module didn't get malicious code","date":"2018-02-06T21:58:16.856Z","type":"message"}
{"nick":"bradleymeck","message":"if express had a dependency become malicious or it became malicious you would still load it. if you review the content of express and/or use some 3rd party audit service with integrity checks you would be sure about the contents. and there are also other concerns about when content is verified. specifier naming doesn't help much without integrity to actually check the contents of","date":"2018-02-06T22:01:08.499Z","type":"message"}
{"nick":"devsnek_","date":"2018-02-06T22:51:28.799Z","type":"join"}
{"nick":"devsnek","reason":"Quit: ZNC 1.6.5 - http://znc.in","date":"2018-02-06T22:58:41.772Z","type":"quit"}
{"nick":"devsnek_","new_nick":"devsnek","date":"2018-02-06T22:58:41.953Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-06T23:31:00.159Z","type":"quit"}
{"nick":"fourthex","date":"2018-02-06T23:37:08.954Z","type":"join"}
{"nick":"fourthex","message":"bradleymeck: Yes, I agree that it would need to be combined with an integrity check.","date":"2018-02-06T23:39:09.509Z","type":"message"}
{"nick":"not-an-aardvark","date":"2018-02-06T23:40:51.298Z","type":"join"}
