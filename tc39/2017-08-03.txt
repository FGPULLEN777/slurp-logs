{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-03T00:06:59.545Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-03T00:17:06.688Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-03T00:22:57.310Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-08-03T00:35:17.328Z","type":"quit"}
{"nick":"Bakkot","message":"... anyone know why proxies don't pass through internal slots they lack? that they don't is... weird.","date":"2017-08-03T00:49:34.203Z","type":"message"}
{"nick":"Bakkot","message":"and sort of hacked around in some places but not others: `Array.isArray(new Proxy([], {}))` is true, but `(new Proxy(new Number(0), {})) + 1` throws a TypeError.","date":"2017-08-03T00:50:04.192Z","type":"message"}
{"nick":"aklein","message":"are there any places other than Array.isArray()? I guess 'typeof' makes it clear whether a Proxy is wrapping a Function...","date":"2017-08-03T00:53:11.906Z","type":"message"}
{"nick":"Fishrock123","date":"2017-08-03T00:53:37.654Z","type":"join"}
{"nick":"M-IvanSanchez","reason":"Ping timeout: 276 seconds","date":"2017-08-03T00:55:22.851Z","type":"quit"}
{"nick":"M-IvanSanchez","date":"2017-08-03T00:55:41.825Z","type":"join"}
{"nick":"Bakkot","message":"The proxy constructor copies [[call]] and [[construct]] over, is the other special casing, so you can call them and `typeof new Proxy(function(){}, {}) === 'function'` holds","date":"2017-08-03T00:59:48.801Z","type":"message"}
{"nick":"Bakkot","message":"also, lol: anyone care to guess what `typeof new Proxy(document.all, {})` is?","date":"2017-08-03T01:03:39.381Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-03T01:09:05.534Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-08-03T01:10:53.908Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-03T01:13:13.651Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-03T01:13:21.791Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-03T01:14:00.523Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-03T01:14:06.838Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-03T01:36:03.705Z","type":"join"}
{"nick":"bterlson","message":"jeffmo: thanks for the ping, I forgot about that issue. I'll merge it when back at work next week.","date":"2017-08-03T02:07:15.361Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-03T02:34:10.360Z","type":"quit"}
{"nick":"bterlson","message":"jeffmo: actually I lied, did it now","date":"2017-08-03T02:35:13.966Z","type":"message"}
{"nick":"jeffmo","message":"Oh awesome, thanks!","date":"2017-08-03T02:36:24.573Z","type":"message"}
{"nick":"Fishrock123","date":"2017-08-03T02:38:29.640Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 276 seconds","date":"2017-08-03T02:43:16.706Z","type":"quit"}
{"nick":"howdoi","date":"2017-08-03T04:36:02.912Z","type":"join"}
{"nick":"jmdyck","message":"That commit erased some early errors that I don't think it should have.","date":"2017-08-03T04:58:57.581Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: I think they're now limited in the grammar","date":"2017-08-03T04:59:26.061Z","type":"message"}
{"nick":"bterlson","message":"eg. HexDigits [&gt; but not if MV of HexDigits &gt; 0x10FFFF ]?","date":"2017-08-03T04:59:58.593Z","type":"message"}
{"nick":"jmdyck","message":"It is a Syntax Error if the number of elements in the result of TemplateStrings of |TemplateLiteral| with argument *false* is greater than 2<sup>32</sup>-1.","date":"2017-08-03T05:00:03.861Z","type":"message"}
{"nick":"jmdyck","message":"It is a Syntax Error if _NcapturingParens_ &ge; 2<sup>32</sup>-1.","date":"2017-08-03T05:00:14.162Z","type":"message"}
{"nick":"bterlson","message":"ahh hmm","date":"2017-08-03T05:00:58.862Z","type":"message"}
{"nick":"jmdyck","message":"Also a bunch of other things, but I'm committing fixes for them.","date":"2017-08-03T05:02:29.861Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: a bunch?!?","date":"2017-08-03T05:02:41.924Z","type":"message"}
{"nick":"jmdyck","message":"yup","date":"2017-08-03T05:03:46.404Z","type":"message"}
{"nick":"bterlson","message":"I guess I shouldn't be accepting PRs while giving a talk :-P","date":"2017-08-03T05:04:06.472Z","type":"message"}
{"nick":"jmdyck","message":"not removed things, but editorial things","date":"2017-08-03T05:04:30.520Z","type":"message"}
{"nick":"jmdyck","message":"last 4 commits in https://github.com/tc39/ecma262/pull/964","date":"2017-08-03T05:06:46.148Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: looking deeper I'm not sure why those early errors were removed, they are not in the proposal","date":"2017-08-03T05:07:07.294Z","type":"message"}
{"nick":"bterlson","message":"or in the notes of differences from the proposal","date":"2017-08-03T05:07:15.216Z","type":"message"}
{"nick":"jmdyck","message":"maybe it didn't get rebased properly before merge","date":"2017-08-03T05:07:43.423Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: confirm","date":"2017-08-03T05:08:36.831Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: all my fault :'(","date":"2017-08-03T05:08:42.654Z","type":"message"}
{"nick":"bterlson","message":"git revert -p time I guess","date":"2017-08-03T05:08:51.900Z","type":"message"}
{"nick":"jmdyck","message":"those early errors were adjacent to ones which *were* supposed to be removed","date":"2017-08-03T05:09:17.825Z","type":"message"}
{"nick":"bterlson","message":"yeah","date":"2017-08-03T05:09:26.071Z","type":"message"}
{"nick":"jmdyck","message":"so too close in the diff","date":"2017-08-03T05:09:36.696Z","type":"message"}
{"nick":"jmdyck","message":"do you want me to add a commit to reinstate them, or is that your penance?","date":"2017-08-03T05:11:42.199Z","type":"message"}
{"nick":"bterlson","message":"I am currently self flagellating whilst reinstating them.","date":"2017-08-03T05:12:27.967Z","type":"message"}
{"nick":"jmdyck","message":"don't multitask! that's what got you into this mess","date":"2017-08-03T05:12:51.711Z","type":"message"}
{"nick":"jmdyck","message":"reinstate first, flagellate later.","date":"2017-08-03T05:13:20.301Z","type":"message"}
{"nick":"bterlson","message":"ok fair","date":"2017-08-03T05:13:33.833Z","type":"message"}
{"nick":"bterlson","message":"I'll look in to some kind of Johnny5 flagellation automation solution for the future (cc rwaldron)","date":"2017-08-03T05:14:09.270Z","type":"message"}
{"nick":"jmdyck","message":"so do you do the reinstate as a fixup, or is that 'dangerous'","date":"2017-08-03T05:15:16.752Z","type":"message"}
{"nick":"jmdyck","message":"?","date":"2017-08-03T05:15:18.017Z","type":"message"}
{"nick":"jmdyck","message":"('fixup' in the sense of git rebase)","date":"2017-08-03T05:15:55.134Z","type":"message"}
{"nick":"bterlson","message":"it'll just be a normal normative commit","date":"2017-08-03T05:16:11.091Z","type":"message"}
{"nick":"jmdyck","message":"k","date":"2017-08-03T05:16:17.926Z","type":"message"}
{"nick":"jmdyck","message":"gnight","date":"2017-08-03T05:18:57.591Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: thank you sir","date":"2017-08-03T05:19:42.318Z","type":"message"}
{"nick":"jmdyck","message":"yw","date":"2017-08-03T05:19:48.971Z","type":"message"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-08-03T05:20:32.183Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-03T05:23:35.687Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-03T06:58:05.508Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2017-08-03T07:03:57.140Z","type":"quit"}
{"nick":"tobie","reason":"Ping timeout: 255 seconds","date":"2017-08-03T07:39:16.117Z","type":"quit"}
{"nick":"tobie","date":"2017-08-03T07:41:31.408Z","type":"join"}
{"nick":"TabAtkins","reason":"Ping timeout: 255 seconds","date":"2017-08-03T08:11:32.915Z","type":"quit"}
{"nick":"TabAtkins","date":"2017-08-03T08:12:34.685Z","type":"join"}
{"nick":"gkatsev","reason":"Ping timeout: 240 seconds","date":"2017-08-03T08:16:35.513Z","type":"quit"}
{"nick":"gkatsev","date":"2017-08-03T08:17:33.830Z","type":"join"}
{"nick":"caridy_","date":"2017-08-03T10:05:33.136Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-08-03T10:05:33.402Z","type":"quit"}
{"nick":"AtumT","date":"2017-08-03T10:15:24.587Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-08-03T10:25:33.812Z","type":"quit"}
{"nick":"mylesborins","date":"2017-08-03T10:26:04.399Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-08-03T11:00:30.526Z","type":"quit"}
{"nick":"jmdyck","date":"2017-08-03T11:53:21.466Z","type":"join"}
{"nick":"caridy_","reason":"Remote host closed the connection","date":"2017-08-03T12:46:08.834Z","type":"quit"}
{"nick":"caridy","date":"2017-08-03T12:46:40.547Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-08-03T13:21:10.974Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-03T13:25:37.902Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-03T13:43:52.675Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-03T14:01:44.911Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-03T14:35:34.808Z","type":"quit"}
{"nick":"jmdyck","message":"bterlson: Also I notice that id=\"sec-primary-expression-template-literals-static-semantics-early-errors\" got changed to id=\"sec-static-semantics-template-early-errors\".  There's no internal xrefs to it, but should we be concerned about possible external links?","date":"2017-08-03T14:35:40.096Z","type":"message"}
{"nick":"gskachkov","date":"2017-08-03T14:36:23.091Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-08-03T14:36:23.146Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-03T15:35:42.522Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-03T15:47:21.837Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-03T16:07:04.558Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-03T16:21:30.173Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-03T16:49:53.578Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-03T16:54:49.726Z","type":"join"}
{"nick":"caridy","date":"2017-08-03T17:00:34.792Z","type":"quit"}
{"nick":"caridy","date":"2017-08-03T17:03:31.651Z","type":"join"}
{"nick":"ljharb","message":"jmdyck: we could add an extra `<a name=\"sec-primary-expression-template-literals-static-semantics-early-errors\"></a>` to preserve the link","date":"2017-08-03T17:04:02.545Z","type":"message"}
{"nick":"jmdyck","message":"we could.","date":"2017-08-03T17:05:25.809Z","type":"message"}
{"nick":"jmdyck","message":"(Or we could just change it back.)","date":"2017-08-03T17:05:44.140Z","type":"message"}
{"nick":"ljharb","message":"presumably the new ID reflects the correct location in the spec tho","date":"2017-08-03T17:06:14.799Z","type":"message"}
{"nick":"jmdyck","message":"it's the same location","date":"2017-08-03T17:06:39.548Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-08-03T17:07:20.352Z","type":"quit"}
{"nick":"caridy","date":"2017-08-03T17:07:53.953Z","type":"join"}
{"nick":"howdoi","date":"2017-08-03T17:10:04.509Z","type":"join"}
{"nick":"jmdyck","message":"plus, the new id doesn't follow the sec naming convention. (Not that I like that convention, but I didn't think we were at liberty to not follow it.)","date":"2017-08-03T17:10:06.252Z","type":"message"}
{"nick":"jmdyck","message":"It occurred to me that maybe we should add an attribute 'oldids' for preserving old ids, and then ecmarkup could take care of generating the back-compat anchors.","date":"2017-08-03T17:12:41.311Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-03T17:35:56.815Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-03T17:55:00.510Z","type":"join"}
{"nick":"leobalter","reason":"Quit: Changing server","date":"2017-08-03T19:04:56.173Z","type":"quit"}
{"nick":"leobalte_","date":"2017-08-03T19:09:21.300Z","type":"join"}
{"nick":"leobalte_","reason":"Quit: Using Textual IRC Client","date":"2017-08-03T19:18:30.076Z","type":"quit"}
{"nick":"leobalter___","date":"2017-08-03T19:18:43.280Z","type":"join"}
{"nick":"leobalter___","new_nick":"leobalter","date":"2017-08-03T19:19:08.653Z","type":"nick"}
{"nick":"leobalter","reason":"Client Quit","date":"2017-08-03T19:20:51.972Z","type":"quit"}
{"nick":"Guest78693","date":"2017-08-03T19:24:10.320Z","type":"join"}
{"nick":"Guest78693","new_nick":"leobalter","date":"2017-08-03T19:24:28.321Z","type":"nick"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-03T20:14:56.078Z","type":"quit"}
{"nick":"jeffmo","message":"littledan: Can you remind me why there is a restriction on name-sharing between private instance and static fields? I know we sort of discovered that it would impede some design decisions down the road with shorthand syntax... Is that the only reason?","date":"2017-08-03T20:19:54.125Z","type":"message"}
{"nick":"bradleymeck","message":"jeffmo: was there a design for grabbing them w/o shorthand off the containing class?","date":"2017-08-03T20:21:46.244Z","type":"message"}
{"nick":"jeffmo","message":"bradleymeck: when we had shorthand included, the previous spec text stated that `#foo` was strictly sugar for `this.#foo`. So in a static method, `this` is a ref to the class object","date":"2017-08-03T20:22:50.069Z","type":"message"}
{"nick":"jeffmo","message":"Bakkot: ^ do you know?","date":"2017-08-03T20:24:43.243Z","type":"message"}
{"nick":"Fishrock123","date":"2017-08-03T20:24:49.906Z","type":"join"}
{"nick":"ljharb","message":"jeffmo: what restriction?","date":"2017-08-03T20:42:48.921Z","type":"message"}
{"nick":"ljharb","message":"i'd assume you can have `static foo = 3; #foo = 4`?","date":"2017-08-03T20:43:00.188Z","type":"message"}
{"nick":"ljharb","message":"also `foo = 5`","date":"2017-08-03T20:43:08.595Z","type":"message"}
{"nick":"jeffmo","message":"ljharb: you cannot","date":"2017-08-03T20:48:27.402Z","type":"message"}
{"nick":"jeffmo","message":"At least for purposes of room to make decisions around the design of the shorthand syntax's semantics in the future","date":"2017-08-03T20:49:35.317Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2017-08-03T20:53:51.772Z","type":"message"}
{"nick":"ljharb","message":"that seems very weird","date":"2017-08-03T20:53:55.968Z","type":"message"}
{"nick":"ljharb","message":"can i have `foo = 3; #foo = 4`?","date":"2017-08-03T20:54:04.029Z","type":"message"}
{"nick":"TabAtkins","message":"jmdyck: `oldids` is precisely the attribute name Bikeshed uses for this purpose. (Multiple IDs are comma-separated.)","date":"2017-08-03T21:05:21.090Z","type":"message"}
{"nick":"littledan","message":"jeffmo: I'm not sure how you'd resolve whether you're talking about the static name or the instance name","date":"2017-08-03T21:08:49.036Z","type":"message"}
{"nick":"littledan","message":"jeffmo: Or would you just use one name for both of them together in that case?","date":"2017-08-03T21:08:57.667Z","type":"message"}
{"nick":"littledan","message":"when you see x.#y, which private name do you use for #y if both declarations exist?","date":"2017-08-03T21:09:14.649Z","type":"message"}
{"nick":"jmdyck","message":"TabAtkins: I woulda thought space-separated.","date":"2017-08-03T21:13:10.121Z","type":"message"}
{"nick":"jeffmo","message":"littledan: without shorthand it's pretty clear which you're talking about (the receiver is explicit)","date":"2017-08-03T21:14:12.745Z","type":"message"}
{"nick":"TabAtkins","message":"You can put spaces in an ID. (I think it's invalid, but it happens.)","date":"2017-08-03T21:14:24.240Z","type":"message"}
{"nick":"littledan","message":"jeffmo: I don't understand; if you're looking at `x.#y`, how do you know whether `x` is an instance or the constructor?","date":"2017-08-03T21:14:42.117Z","type":"message"}
{"nick":"jeffmo","message":"With an explicit receiver it's just as clear as normal dot-syntax","date":"2017-08-03T21:14:49.277Z","type":"message"}
{"nick":"TabAtkins","message":"I also have learned over time to just jump straight to comma-separation early, so I don't regret it later when I want to expand the value space.","date":"2017-08-03T21:14:56.621Z","type":"message"}
{"nick":"jeffmo","message":"x is an instance of something","date":"2017-08-03T21:15:01.145Z","type":"message"}
{"nick":"littledan","message":"I mean, how is this clear to the implementation?","date":"2017-08-03T21:15:03.982Z","type":"message"}
{"nick":"littledan","message":"I get how programmers can have the intuition","date":"2017-08-03T21:15:04.112Z","type":"message"}
{"nick":"jeffmo","message":"Either an instance of a class","date":"2017-08-03T21:15:06.932Z","type":"message"}
{"nick":"jeffmo","message":"Or an instance of a class object","date":"2017-08-03T21:15:17.351Z","type":"message"}
{"nick":"jmdyck","message":"TabAtkins: assuming you want to expand by adding space, not by adding comma.","date":"2017-08-03T21:15:24.567Z","type":"message"}
{"nick":"jeffmo","message":"class C { #p = 42; static #p = 43; m() { C.#p; this.p; } }","date":"2017-08-03T21:16:44.147Z","type":"message"}
{"nick":"littledan","message":"jeffmo: `x.#y` means, get the underlying Private Name for #y from the local lexical scope, then try to read that private field from x. Would we somehow have two names for #y, or would the static and instance fields share the name?","date":"2017-08-03T21:17:15.624Z","type":"message"}
{"nick":"littledan","message":"I can picture how the semantics would work for the second one, but not the first","date":"2017-08-03T21:17:37.808Z","type":"message"}
{"nick":"TabAtkins","message":"jmdyck: Please, I'm a CSSer, commas are *clearly* a higher-level separator than spaces.","date":"2017-08-03T21:17:45.068Z","type":"message"}
{"nick":"TabAtkins","message":"(And slashes are between the two.)","date":"2017-08-03T21:17:52.073Z","type":"message"}
{"nick":"jmdyck","message":"heh","date":"2017-08-03T21:18:19.075Z","type":"message"}
{"nick":"jeffmo","message":"littledan: In the map in the local scope, you first look up the receiver. The receiver is either an instance of C or it is the object C itself","date":"2017-08-03T21:18:28.348Z","type":"message"}
{"nick":"jeffmo","message":"#y is specific to the receiver","date":"2017-08-03T21:20:07.039Z","type":"message"}
{"nick":"littledan","message":"eesh, the current spec text is really careful to not be based on either of those two concepts","date":"2017-08-03T21:20:12.997Z","type":"message"}
{"nick":"jeffmo","message":"which two concepts?","date":"2017-08-03T21:20:23.374Z","type":"message"}
{"nick":"littledan","message":"checking if the receiver is the constructor, or checking if it is \"an instance of\" a class","date":"2017-08-03T21:20:43.097Z","type":"message"}
{"nick":"jeffmo","message":"you don't really have to","date":"2017-08-03T21:20:54.884Z","type":"message"}
{"nick":"jeffmo","message":"any more than you have to check if a receiver is inst0 vst inst1","date":"2017-08-03T21:21:06.258Z","type":"message"}
{"nick":"littledan","message":"the lookup is simpler than that. it just looks up the private name in the scope, and tries to read that from the instance","date":"2017-08-03T21:21:11.990Z","type":"message"}
{"nick":"littledan","message":"well, I just don't understand what semantics you're proposing","date":"2017-08-03T21:21:26.432Z","type":"message"}
{"nick":"jeffmo","message":"littledan: why not do the same, except have slots for a class object?","date":"2017-08-03T21:21:29.042Z","type":"message"}
{"nick":"littledan","message":"we could use the same private name for both the constructor and the instance, sure","date":"2017-08-03T21:21:43.975Z","type":"message"}
{"nick":"littledan","message":"using different private names sounds really hard","date":"2017-08-03T21:21:56.641Z","type":"message"}
{"nick":"jeffmo","message":"I'm confused by your confusion :p","date":"2017-08-03T21:22:07.895Z","type":"message"}
{"nick":"littledan","message":"I was asking, 'jeffmo: `x.#y` means, get the underlying Private Name for #y from the local lexical scope, then try to read that private field from x. Would we somehow have two names for #y, or would the static and instance fields share the name?'","date":"2017-08-03T21:22:30.758Z","type":"message"}
{"nick":"littledan","message":"it sounds like, obviously, we'd have just one name","date":"2017-08-03T21:22:33.651Z","type":"message"}
{"nick":"littledan","message":"the name isn't #y, it's what you get when you look up by the key #y in the local lexical scope","date":"2017-08-03T21:22:45.546Z","type":"message"}
{"nick":"littledan","message":"currently, we only have one initializer for each private name, but nothing depends on that, and decorators can break it","date":"2017-08-03T21:23:09.934Z","type":"message"}
{"nick":"jeffmo","message":"I think I see now -- maybe I need to re-read the spec, I might have glossed over some stuff assuming I knew more than I did","date":"2017-08-03T21:23:29.825Z","type":"message"}
{"nick":"littledan","message":"I think we could make this work, it would just take a tiny bit extra logic to coalesce the two declarations, and say that we allow this specific case while prohibiting other private redeclarations","date":"2017-08-03T21:24:29.321Z","type":"message"}
{"nick":"littledan","message":"but the mental model is weird. If the constructor slips into a place where you expect an instance, you won't get the TypeError you might expect","date":"2017-08-03T21:25:01.726Z","type":"message"}
{"nick":"jeffmo","message":"at minimum I think it makes sense to restrict this until we decide if we want Waldemar's Java semantics for the shorthand","date":"2017-08-03T21:25:04.635Z","type":"message"}
{"nick":"littledan","message":"I don't see the connection","date":"2017-08-03T21:25:17.599Z","type":"message"}
{"nick":"jeffmo","message":"with Waldemar's Java semantics?","date":"2017-08-03T21:25:27.828Z","type":"message"}
{"nick":"littledan","message":"oh, I see, it would ruin the alternative shorthand semantics","date":"2017-08-03T21:25:33.692Z","type":"message"}
{"nick":"littledan","message":"since the name would correspond to either one, and be ambiguous","date":"2017-08-03T21:25:42.218Z","type":"message"}
{"nick":"jeffmo","message":"right","date":"2017-08-03T21:25:45.544Z","type":"message"}
{"nick":"jeffmo","message":"if we go with that, it's a moot point. If not, we could always unlock further in the future (if we decide it's tenable)","date":"2017-08-03T21:26:04.933Z","type":"message"}
{"nick":"littledan","message":"but there's an easy, unprincipled fix there--decide whether to go with the class or instance version based on whether you're in a static method/initializer or not","date":"2017-08-03T21:26:41.636Z","type":"message"}
{"nick":"littledan","message":"rather than by what the name is","date":"2017-08-03T21:26:59.073Z","type":"message"}
{"nick":"jeffmo","message":"littledan: right, but that's a semantic choice that Waldemar opposes","date":"2017-08-03T21:29:16.701Z","type":"message"}
{"nick":"jeffmo","message":"personally I'm in favor of that","date":"2017-08-03T21:29:22.110Z","type":"message"}
{"nick":"jeffmo","message":"it keeps the shorthand as strictly sugar for `this.#foo`","date":"2017-08-03T21:29:32.816Z","type":"message"}
{"nick":"littledan","message":"oh, right, that defeats the whole purpose","date":"2017-08-03T21:29:47.037Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-03T21:54:24.907Z","type":"quit"}
{"nick":"ljharb","message":"sorry i'm confused","date":"2017-08-03T21:55:55.306Z","type":"message"}
{"nick":"ljharb","message":"i get why `static #foo = 3;` and `#foo = 4` might not be able to coexist right now - is that all we're talking about?","date":"2017-08-03T21:56:37.722Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-03T22:03:05.397Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-03T22:04:45.667Z","type":"join"}
{"nick":"Domenic","message":"Woah did IRCCloud start treating backticks as code? `test`","date":"2017-08-03T22:12:40.927Z","type":"message"}
{"nick":"Domenic","message":"Neato!","date":"2017-08-03T22:12:43.308Z","type":"message"}
{"nick":"Domenic","message":"More markdown? *test* _test_ **test**","date":"2017-08-03T22:12:52.181Z","type":"message"}
{"nick":"cloudshu","message":"i just see those as backticks and asterisks still","date":"2017-08-03T22:40:10.827Z","type":"message"}
{"nick":"Domenic","message":"Only backticks seemed to do anything","date":"2017-08-03T22:47:27.345Z","type":"message"}
{"nick":"ljharb","message":"aha, i had to refresh but i see it now. spiffy!","date":"2017-08-03T22:54:08.608Z","type":"message"}
