{"nick":"Bakkot","message":"Is there a reason RegExp.prototype.source isn't completely nailed down?","date":"2018-01-09T00:22:46.139Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-09T00:29:49.394Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2018-01-09T01:10:49.888Z","type":"quit"}
{"nick":"jmdyck1","date":"2018-01-09T01:16:48.732Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 268 seconds","date":"2018-01-09T01:16:53.741Z","type":"quit"}
{"nick":"dilijev","message":"Is there a formalization of the language in https://tc39.github.io/ecma402/#sec-datetime-format-functions -> https://tc39.github.io/ecma402/#sec-formatdatetime step 1 ->  https://tc39.github.io/ecma402/#sec-partitiondatetimepattern","date":"2018-01-09T01:44:34.877Z","type":"message"}
{"nick":"dilijev","message":"\"not a finite number\"","date":"2018-01-09T01:44:38.736Z","type":"message"}
{"nick":"dilijev","message":"a la https://github.com/Microsoft/ChakraCore/pull/4507#discussion_r160301755","date":"2018-01-09T01:44:51.748Z","type":"message"}
{"nick":"dilijev","message":"such that: `x` is \"not a finite number\" implies `[Infinity, -Infinity, NaN].includes(x) === true` ?","date":"2018-01-09T01:45:31.741Z","type":"message"}
{"nick":"dilijev","message":"a casual reading seems to suggest this, and the implementations seem to agree","date":"2018-01-09T01:46:11.599Z","type":"message"}
{"nick":"dilijev","message":"but -- i could also see this being just `[Infinity, -Infinity].includes(x)` depending on how \"number\" is defined here.","date":"2018-01-09T01:46:54.724Z","type":"message"}
{"nick":"dilijev","message":"(to wit: NaN is of \"number\" type: `typeof NaN === 'number'`)","date":"2018-01-09T01:47:38.721Z","type":"message"}
{"nick":"dilijev","message":"^ but is not infinite.","date":"2018-01-09T01:47:45.920Z","type":"message"}
{"nick":"Bakkot","message":"I don't think I could see a reading where \"NaN is not a finite number\" holds; \"is not one of the values Infinity, -Infinity\" does not mean \"is a finite number\"","date":"2018-01-09T01:49:18.370Z","type":"message"}
{"nick":"Bakkot","message":"iirc IEEE suggests a definition for `finite` which is `x => -Infinity < x && x < Infinity`?","date":"2018-01-09T01:49:43.601Z","type":"message"}
{"nick":"dilijev","message":"i guess first question is: does this phrasing need to be made more clear in the spec?","date":"2018-01-09T01:52:37.693Z","type":"message"}
{"nick":"jwalden","reason":"Ping timeout: 240 seconds","date":"2018-01-09T01:55:35.521Z","type":"quit"}
{"nick":"Bakkot","message":"ah: https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type","date":"2018-01-09T01:56:33.807Z","type":"message"}
{"nick":"dilijev","message":"i.e. \"The other 18437736874454810624 (that is, 264-253) values are called the finite numbers.\"","date":"2018-01-09T01:57:12.181Z","type":"message"}
{"nick":"dilijev","message":"\"The Number type has exactly 18437736874454810627 (that is, 264-253+3) values\"","date":"2018-01-09T01:57:45.145Z","type":"message"}
{"nick":"dilijev","message":"and the other 3 are [Infinity, -Infinity, NaN]","date":"2018-01-09T01:57:55.923Z","type":"message"}
{"nick":"dilijev","message":"so basically \"not a finite number\" should maybe refer to this section for clarification?","date":"2018-01-09T01:58:14.624Z","type":"message"}
{"nick":"dilijev","message":"@jackhorton ^","date":"2018-01-09T01:58:24.693Z","type":"message"}
{"nick":"bterlson","message":"dilijev: finite number could be made into a dfn","date":"2018-01-09T01:59:34.024Z","type":"message"}
{"nick":"dilijev","message":"^ bterlson SGTM","date":"2018-01-09T02:03:36.471Z","type":"message"}
{"nick":"jwalden","date":"2018-01-09T02:08:26.364Z","type":"join"}
{"nick":"dilijev","message":"Bakkot: just to be clear that link implies (to me) that \"NaN is not a finite number\"","date":"2018-01-09T02:10:22.213Z","type":"message"}
{"nick":"Bakkot","message":"dilijev: right, agreed; I had one extra negative earlier","date":"2018-01-09T02:11:33.024Z","type":"message"}
{"nick":"dilijev","message":"i.e. a hypothetical spec definition IsFiniteNumber(x) could be defined as `(x) => ![Infinity, -Infinity, NaN].includes(x)`","date":"2018-01-09T02:12:03.094Z","type":"message"}
{"nick":"dilijev","message":"and https://tc39.github.io/ecma402/#sec-partitiondatetimepattern  step 1 could be written as `If IsFiniteNumber(x) is false, throw a RangeError exception`","date":"2018-01-09T02:15:33.433Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-01-09T02:18:20.803Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-01-09T02:33:39.792Z","type":"join"}
{"nick":"d_run","reason":"Read error: Connection reset by peer","date":"2018-01-09T02:36:44.867Z","type":"quit"}
{"nick":"d_run","date":"2018-01-09T02:37:01.187Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-01-09T04:54:36.747Z","type":"quit"}
{"nick":"jmdyck1","reason":"Remote host closed the connection","date":"2018-01-09T04:59:39.628Z","type":"quit"}
{"nick":"ljharb","message":"Bakkot: in what way isn't it nailed down?","date":"2018-01-09T05:48:35.486Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: (ftr, if it's not nailed down then we should nail it down hard)","date":"2018-01-09T05:49:06.526Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-09T06:20:57.356Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-01-09T06:56:19.670Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T07:25:44.317Z","type":"join"}
{"nick":"Bakkot","message":"ljharb: it depends on EscapeRegExpPattern, the first step of which is \"pick any string which, when parsed, would result in an a functionally identical regex\", which leaves a lot of escaping decisions up in the air","date":"2018-01-09T07:55:42.887Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2018-01-09T07:56:39.817Z","type":"message"}
{"nick":"ljharb","message":"how would we be able to lock that down","date":"2018-01-09T07:57:04.815Z","type":"message"}
{"nick":"Bakkot","message":"and in fact engines vary substantially here; for example, `new RegExp('[/]').source` gives '[/]' in JSC and SpiderMonkey and '[\\/]' in V8 and ChakraCore","date":"2018-01-09T07:57:06.170Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2018-01-09T07:57:13.924Z","type":"message"}
{"nick":"ljharb","message":"what do they do for unicode escapes?","date":"2018-01-09T07:57:27.642Z","type":"message"}
{"nick":"Bakkot","message":"Leaves them as they were, I think.","date":"2018-01-09T07:57:55.654Z","type":"message"}
