{"nick":"Bakkot","message":"Is there a reason RegExp.prototype.source isn't completely nailed down?","date":"2018-01-09T00:22:46.139Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-09T00:29:49.394Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2018-01-09T01:10:49.888Z","type":"quit"}
{"nick":"jmdyck1","date":"2018-01-09T01:16:48.732Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 268 seconds","date":"2018-01-09T01:16:53.741Z","type":"quit"}
{"nick":"dilijev","message":"Is there a formalization of the language in https://tc39.github.io/ecma402/#sec-datetime-format-functions -> https://tc39.github.io/ecma402/#sec-formatdatetime step 1 ->  https://tc39.github.io/ecma402/#sec-partitiondatetimepattern","date":"2018-01-09T01:44:34.877Z","type":"message"}
{"nick":"dilijev","message":"\"not a finite number\"","date":"2018-01-09T01:44:38.736Z","type":"message"}
{"nick":"dilijev","message":"a la https://github.com/Microsoft/ChakraCore/pull/4507#discussion_r160301755","date":"2018-01-09T01:44:51.748Z","type":"message"}
{"nick":"dilijev","message":"such that: `x` is \"not a finite number\" implies `[Infinity, -Infinity, NaN].includes(x) === true` ?","date":"2018-01-09T01:45:31.741Z","type":"message"}
{"nick":"dilijev","message":"a casual reading seems to suggest this, and the implementations seem to agree","date":"2018-01-09T01:46:11.599Z","type":"message"}
{"nick":"dilijev","message":"but -- i could also see this being just `[Infinity, -Infinity].includes(x)` depending on how \"number\" is defined here.","date":"2018-01-09T01:46:54.724Z","type":"message"}
{"nick":"dilijev","message":"(to wit: NaN is of \"number\" type: `typeof NaN === 'number'`)","date":"2018-01-09T01:47:38.721Z","type":"message"}
{"nick":"dilijev","message":"^ but is not infinite.","date":"2018-01-09T01:47:45.920Z","type":"message"}
{"nick":"Bakkot","message":"I don't think I could see a reading where \"NaN is not a finite number\" holds; \"is not one of the values Infinity, -Infinity\" does not mean \"is a finite number\"","date":"2018-01-09T01:49:18.370Z","type":"message"}
{"nick":"Bakkot","message":"iirc IEEE suggests a definition for `finite` which is `x => -Infinity < x && x < Infinity`?","date":"2018-01-09T01:49:43.601Z","type":"message"}
{"nick":"dilijev","message":"i guess first question is: does this phrasing need to be made more clear in the spec?","date":"2018-01-09T01:52:37.693Z","type":"message"}
{"nick":"jwalden","reason":"Ping timeout: 240 seconds","date":"2018-01-09T01:55:35.521Z","type":"quit"}
{"nick":"Bakkot","message":"ah: https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type","date":"2018-01-09T01:56:33.807Z","type":"message"}
{"nick":"dilijev","message":"i.e. \"The other 18437736874454810624 (that is, 264-253) values are called the finite numbers.\"","date":"2018-01-09T01:57:12.181Z","type":"message"}
{"nick":"dilijev","message":"\"The Number type has exactly 18437736874454810627 (that is, 264-253+3) values\"","date":"2018-01-09T01:57:45.145Z","type":"message"}
{"nick":"dilijev","message":"and the other 3 are [Infinity, -Infinity, NaN]","date":"2018-01-09T01:57:55.923Z","type":"message"}
{"nick":"dilijev","message":"so basically \"not a finite number\" should maybe refer to this section for clarification?","date":"2018-01-09T01:58:14.624Z","type":"message"}
{"nick":"dilijev","message":"@jackhorton ^","date":"2018-01-09T01:58:24.693Z","type":"message"}
{"nick":"bterlson","message":"dilijev: finite number could be made into a dfn","date":"2018-01-09T01:59:34.024Z","type":"message"}
{"nick":"dilijev","message":"^ bterlson SGTM","date":"2018-01-09T02:03:36.471Z","type":"message"}
{"nick":"jwalden","date":"2018-01-09T02:08:26.364Z","type":"join"}
{"nick":"dilijev","message":"Bakkot: just to be clear that link implies (to me) that \"NaN is not a finite number\"","date":"2018-01-09T02:10:22.213Z","type":"message"}
{"nick":"Bakkot","message":"dilijev: right, agreed; I had one extra negative earlier","date":"2018-01-09T02:11:33.024Z","type":"message"}
{"nick":"dilijev","message":"i.e. a hypothetical spec definition IsFiniteNumber(x) could be defined as `(x) => ![Infinity, -Infinity, NaN].includes(x)`","date":"2018-01-09T02:12:03.094Z","type":"message"}
{"nick":"dilijev","message":"and https://tc39.github.io/ecma402/#sec-partitiondatetimepattern  step 1 could be written as `If IsFiniteNumber(x) is false, throw a RangeError exception`","date":"2018-01-09T02:15:33.433Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-01-09T02:18:20.803Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-01-09T02:33:39.792Z","type":"join"}
{"nick":"d_run","reason":"Read error: Connection reset by peer","date":"2018-01-09T02:36:44.867Z","type":"quit"}
{"nick":"d_run","date":"2018-01-09T02:37:01.187Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-01-09T04:54:36.747Z","type":"quit"}
{"nick":"jmdyck1","reason":"Remote host closed the connection","date":"2018-01-09T04:59:39.628Z","type":"quit"}
{"nick":"ljharb","message":"Bakkot: in what way isn't it nailed down?","date":"2018-01-09T05:48:35.486Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: (ftr, if it's not nailed down then we should nail it down hard)","date":"2018-01-09T05:49:06.526Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-09T06:20:57.356Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-01-09T06:56:19.670Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T07:25:44.317Z","type":"join"}
{"nick":"Bakkot","message":"ljharb: it depends on EscapeRegExpPattern, the first step of which is \"pick any string which, when parsed, would result in an a functionally identical regex\", which leaves a lot of escaping decisions up in the air","date":"2018-01-09T07:55:42.887Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2018-01-09T07:56:39.817Z","type":"message"}
{"nick":"ljharb","message":"how would we be able to lock that down","date":"2018-01-09T07:57:04.815Z","type":"message"}
{"nick":"Bakkot","message":"and in fact engines vary substantially here; for example, `new RegExp('[/]').source` gives '[/]' in JSC and SpiderMonkey and '[\\/]' in V8 and ChakraCore","date":"2018-01-09T07:57:06.170Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2018-01-09T07:57:13.924Z","type":"message"}
{"nick":"ljharb","message":"what do they do for unicode escapes?","date":"2018-01-09T07:57:27.642Z","type":"message"}
{"nick":"Bakkot","message":"Leaves them as they were, I think.","date":"2018-01-09T07:57:55.654Z","type":"message"}
{"nick":"ljharb","message":"it sounds like the spec could choose to always show the `/u` form tho, or always show the character?","date":"2018-01-09T08:00:36.517Z","type":"message"}
{"nick":"ljharb","message":"or rather the spec allows the impl to choose","date":"2018-01-09T08:00:45.846Z","type":"message"}
{"nick":"Bakkot","message":"my reading of the spec is that it currently allows implementations to choose; that's part of my complaint.","date":"2018-01-09T08:01:28.180Z","type":"message"}
{"nick":"ljharb","message":"gotcha","date":"2018-01-09T08:01:48.982Z","type":"message"}
{"nick":"ljharb","message":"so how would you suggest that be specified?","date":"2018-01-09T08:01:53.993Z","type":"message"}
{"nick":"Bakkot","message":"spec is at https://tc39.github.io/ecma262/#sec-escaperegexppattern, for reference.","date":"2018-01-09T08:02:04.189Z","type":"message"}
{"nick":"ljharb","message":"minimal necessary escapes? maximal escapes? something else?","date":"2018-01-09T08:02:06.473Z","type":"message"}
{"nick":"Bakkot","message":"I would actually prefer it normalize, because then tools like prettier could format regexes","date":"2018-01-09T08:02:13.592Z","type":"message"}
{"nick":"ljharb","message":"normalize to what tho","date":"2018-01-09T08:02:35.625Z","type":"message"}
{"nick":"Bakkot","message":"Don't really care, tbh","date":"2018-01-09T08:02:45.467Z","type":"message"}
{"nick":"Bakkot","message":"but the easiest thing by far would be to specify the minimal necessary things to escape from [[OriginalSource]], which I think is just newlines and '/'s which are not inside of character classes","date":"2018-01-09T08:03:13.127Z","type":"message"}
{"nick":"Bakkot","message":"+ that would better match existing engine behavior","date":"2018-01-09T08:03:38.430Z","type":"message"}
{"nick":"ljharb","message":"so that wouldn't normalize, it'd just aim for a minimal diff to the original source","date":"2018-01-09T08:03:41.340Z","type":"message"}
{"nick":"Bakkot","message":"right.","date":"2018-01-09T08:03:45.315Z","type":"message"}
{"nick":"ljharb","message":"seems reasonable, whether as an only or a first step","date":"2018-01-09T08:03:55.062Z","type":"message"}
{"nick":"ljharb","message":"normalizing of character escapes could come later if we wanted, or not","date":"2018-01-09T08:04:07.406Z","type":"message"}
{"nick":"Bakkot","message":"my guess is that the reason this is unspecified is to allow engines to store a normalized form, but at a glance I don't think anyone actually is, at least not w.r.t. unicode.","date":"2018-01-09T08:06:40.639Z","type":"message"}
{"nick":"ljharb","message":"what would be the downside of requiring they store a normalized form","date":"2018-01-09T08:07:15.558Z","type":"message"}
{"nick":"Bakkot","message":"/shrug","date":"2018-01-09T08:07:45.172Z","type":"message"}
{"nick":"gskachkov_","date":"2018-01-09T08:30:39.455Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 264 seconds","date":"2018-01-09T08:33:21.204Z","type":"quit"}
{"nick":"gskachkov_","new_nick":"gskachkov","date":"2018-01-09T08:33:21.319Z","type":"nick"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-01-09T08:40:40.504Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T08:43:23.114Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-01-09T08:48:47.443Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T08:54:23.734Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-01-09T09:00:53.065Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T09:04:03.772Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-01-09T09:21:24.489Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-01-09T09:28:58.023Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T09:30:19.871Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 252 seconds","date":"2018-01-09T09:34:37.870Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T09:35:04.281Z","type":"join"}
{"nick":"AtumT","date":"2018-01-09T09:38:01.954Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 240 seconds","date":"2018-01-09T09:57:31.954Z","type":"quit"}
{"nick":"littledan","message":"Bakkot: I was wondering about that too! V8 is the only engine that doesn't match the others, and this is already a spec violation","date":"2018-01-09T10:29:40.497Z","type":"message"}
{"nick":"littledan","message":"there's a couple cases, e.g., line terminators are escaped as \\r \\n \\u2028 \\u2029","date":"2018-01-09T10:30:43.534Z","type":"message"}
{"nick":"littledan","message":"mathias and I have discussed this issue; it's been on my todo list for a while and never got aorund to it","date":"2018-01-09T10:31:21.037Z","type":"message"}
{"nick":"littledan","message":"this would be a good beginner project for someone to write up the spec and test262 tests!","date":"2018-01-09T10:32:10.972Z","type":"message"}
{"nick":"littledan","message":"I didn't know about the [/] case; that is interesting","date":"2018-01-09T10:32:44.277Z","type":"message"}
{"nick":"littledan","message":"(negates that first line)","date":"2018-01-09T10:33:10.117Z","type":"message"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-01-09T11:25:11.278Z","type":"quit"}
{"nick":"mylesborins","date":"2018-01-09T11:25:41.039Z","type":"join"}
{"nick":"H|f|sh","reason":"Quit: WeeChat 1.0.1","date":"2018-01-09T12:20:11.899Z","type":"quit"}
{"nick":"jmdyck","date":"2018-01-09T12:48:58.520Z","type":"join"}
{"nick":"gibson042","date":"2018-01-09T13:03:09.825Z","type":"join"}
{"nick":"gibson042","reason":"Client Quit","date":"2018-01-09T13:03:23.727Z","type":"quit"}
{"nick":"AtumT_","date":"2018-01-09T13:09:10.863Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 248 seconds","date":"2018-01-09T13:10:23.889Z","type":"quit"}
{"nick":"AtumT","date":"2018-01-09T13:22:10.437Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 252 seconds","date":"2018-01-09T13:22:52.866Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T14:22:45.961Z","type":"join"}
{"nick":"gibson042","date":"2018-01-09T14:25:40.153Z","type":"part"}
{"nick":"gibson042","date":"2018-01-09T14:31:45.070Z","type":"join"}
{"nick":"bradleymeck","date":"2018-01-09T14:32:50.971Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2018-01-09T14:35:27.299Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 248 seconds","date":"2018-01-09T14:50:08.352Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T15:05:31.611Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 248 seconds","date":"2018-01-09T15:09:53.456Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T15:24:55.049Z","type":"join"}
{"nick":"bradleymeck","date":"2018-01-09T15:31:21.966Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 255 seconds","date":"2018-01-09T15:44:41.915Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T15:57:57.414Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 256 seconds","date":"2018-01-09T16:02:46.713Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T16:18:30.823Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 268 seconds","date":"2018-01-09T16:23:23.878Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T16:37:06.956Z","type":"join"}
{"nick":"jwalden","date":"2018-01-09T16:37:10.944Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-09T16:52:47.709Z","type":"quit"}
{"nick":"jackhorton","date":"2018-01-09T16:54:29.748Z","type":"join"}
{"nick":"bradleymeck","date":"2018-01-09T16:59:26.802Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 248 seconds","date":"2018-01-09T17:02:55.871Z","type":"quit"}
{"nick":"jwalden","reason":"Ping timeout: 255 seconds","date":"2018-01-09T17:07:30.019Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-01-09T17:12:58.440Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-09T17:13:23.996Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-01-09T17:43:58.785Z","type":"join"}
{"nick":"fabiorocha","date":"2018-01-09T17:44:39.283Z","type":"join"}
{"nick":"jwalden","date":"2018-01-09T17:56:22.564Z","type":"join"}
{"nick":"gibson042","date":"2018-01-09T18:01:28.223Z","type":"join"}
{"nick":"tkore","reason":"Read error: Connection reset by peer","date":"2018-01-09T18:02:25.009Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2018-01-09T18:19:11.137Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T18:36:49.619Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-01-09T19:23:57.828Z","type":"quit"}
{"nick":"dilijev","message":"recently had some fun with regexes with embedded null bytes","date":"2018-01-09T19:42:09.294Z","type":"message"}
{"nick":"dilijev","message":"makes me think a normalization should explicitly escape unprintable charactersz","date":"2018-01-09T19:42:29.207Z","type":"message"}
{"nick":"dilijev","message":"^ \\u or \\x escape that is","date":"2018-01-09T19:42:52.004Z","type":"message"}
{"nick":"Bakkot","message":"null bytes can legally occur in source text, pretty sure","date":"2018-01-09T19:49:24.713Z","type":"message"}
{"nick":"rektide","date":"2018-01-09T19:52:06.533Z","type":"join"}
{"nick":"jmdyck","message":"\"All Unicode code point values from U+0000 to U+10FFFF, including  surrogate code points, may occur in source text where permitted by the  ECMAScript grammars.\"","date":"2018-01-09T19:52:21.314Z","type":"message"}
{"nick":"Domenic","message":"I've found bugs in Intl APIs with null bytes before","date":"2018-01-09T19:57:12.675Z","type":"message"}
{"nick":"Domenic","message":"Where they truncated the string (due to conversion through C-style strings)","date":"2018-01-09T19:57:21.908Z","type":"message"}
{"nick":"jmdyck1","date":"2018-01-09T20:44:32.865Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 252 seconds","date":"2018-01-09T20:44:41.722Z","type":"quit"}
{"nick":"FR_RB","date":"2018-01-09T20:54:37.229Z","type":"join"}
{"nick":"FR_RB","reason":"Client Quit","date":"2018-01-09T20:55:05.988Z","type":"quit"}
{"nick":"fabiorocha","reason":"Ping timeout: 240 seconds","date":"2018-01-09T20:58:27.789Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 265 seconds","date":"2018-01-09T21:02:21.437Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-01-09T21:11:12.743Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-09T21:11:13.295Z","type":"quit"}
{"nick":"gibson042","date":"2018-01-09T21:12:18.521Z","type":"join"}
{"nick":"bradleymeck","date":"2018-01-09T21:16:30.143Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-01-09T21:30:51.873Z","type":"quit"}
{"nick":"gskachkov","date":"2018-01-09T21:49:16.840Z","type":"join"}
{"nick":"TabAtkins","message":"Stage 0, I guess, proposal for a seeded random function for JS: https://github.com/tabatkins/js-seeded-random/ Critique welcome!","date":"2018-01-09T22:33:25.746Z","type":"message"}
{"nick":"Domenic","message":"Looks nice!","date":"2018-01-09T22:38:08.793Z","type":"message"}
{"nick":"Domenic","message":"ljharb: I remember hearing from you that one of the es-shims overrides F.p.toString() to prevent detection. But I can't find that code while browsing. Any hints?","date":"2018-01-09T22:42:13.934Z","type":"message"}
{"nick":"jmdyck1","reason":"Ping timeout: 252 seconds","date":"2018-01-09T22:45:31.866Z","type":"quit"}
{"nick":"jmdyck","date":"2018-01-09T22:45:58.545Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-01-09T22:47:00.526Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-01-09T22:50:07.813Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2018-01-09T22:56:04.514Z","type":"quit"}
