{"nick":"Fishrock123","date":"2017-05-12T00:02:34.333Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-05-12T00:18:20.241Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-05-12T00:19:02.669Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-05-12T00:19:09.754Z","type":"quit"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-05-12T00:24:16.864Z","type":"quit"}
{"nick":"caridy","date":"2017-05-12T00:24:28.359Z","type":"join"}
{"nick":"bradleymeck","date":"2017-05-12T00:49:15.702Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-12T01:15:27.607Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-05-12T01:27:01.990Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 240 seconds","date":"2017-05-12T01:31:05.977Z","type":"quit"}
{"nick":"Maxdaman1us","date":"2017-05-12T03:20:21.236Z","type":"join"}
{"nick":"Maxdamantus","reason":"Ping timeout: 240 seconds","date":"2017-05-12T03:22:28.388Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-05-12T03:42:39.411Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-05-12T03:54:57.597Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T04:44:14.639Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T06:47:36.501Z","type":"join"}
{"nick":"Maxdaman1us","new_nick":"Maxdamantus","date":"2017-05-12T07:42:02.898Z","type":"nick"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T07:43:03.076Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T07:45:18.258Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T08:10:49.654Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T08:11:12.305Z","type":"join"}
{"nick":"brab","date":"2017-05-12T08:15:02.751Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-05-12T08:15:42.197Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T08:30:31.150Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T08:43:30.417Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T08:44:13.959Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T09:14:03.470Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T09:14:49.545Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T10:12:35.147Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T10:15:13.950Z","type":"join"}
{"nick":"Maxdaman1us","date":"2017-05-12T10:21:27.910Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T10:23:54.824Z","type":"quit"}
{"nick":"Maxdamantus","reason":"Ping timeout: 240 seconds","date":"2017-05-12T10:24:16.377Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-05-12T10:25:10.587Z","type":"quit"}
{"nick":"mylesborins","date":"2017-05-12T10:25:41.235Z","type":"join"}
{"nick":"gskachkov","date":"2017-05-12T10:28:20.974Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T10:34:20.758Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T10:40:19.248Z","type":"join"}
{"nick":"jmdyck","date":"2017-05-12T12:12:02.428Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T13:25:51.541Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T14:25:15.366Z","type":"join"}
{"nick":"Fishrock123","date":"2017-05-12T14:46:41.873Z","type":"join"}
{"nick":"brab`","date":"2017-05-12T14:51:07.629Z","type":"join"}
{"nick":"brab","reason":"Ping timeout: 240 seconds","date":"2017-05-12T14:54:12.081Z","type":"quit"}
{"nick":"basicdays","message":"some es module semantic question just came to mind, if I `import * as mod from './mod.mjs'` and in the same module I did `let mod2 = await import('./mod.mjs')`, would `mod === mod2`?","date":"2017-05-12T14:55:31.625Z","type":"message"}
{"nick":"brab`","reason":"Ping timeout: 268 seconds","date":"2017-05-12T14:55:57.604Z","type":"quit"}
{"nick":"basicdays","message":"or would the answer to that effectively be undefined and left up to implementation?","date":"2017-05-12T14:58:48.423Z","type":"message"}
{"nick":"gskachkov","reason":"Read error: Connection reset by peer","date":"2017-05-12T15:10:06.666Z","type":"quit"}
{"nick":"ljharb","message":"basicdays: no, it would be !==","date":"2017-05-12T15:27:16.360Z","type":"message"}
{"nick":"ljharb","message":"basicdays: actually hmm, it'd be either !==, or, it'd be === but the ModuleRecord would be frozen. i'm not sure which","date":"2017-05-12T15:27:39.297Z","type":"message"}
{"nick":"Domenic","message":"I think module namespace objects are memoized? Looking up...","date":"2017-05-12T15:34:46.571Z","type":"message"}
{"nick":"Domenic","message":"Yeah, they are https://tc39.github.io/ecma262/#sec-getmodulenamespace","date":"2017-05-12T15:35:03.430Z","type":"message"}
{"nick":"Domenic","message":"So they'd b e===","date":"2017-05-12T15:35:05.764Z","type":"message"}
{"nick":"Domenic","message":"(they are indeed immutable)","date":"2017-05-12T15:35:11.717Z","type":"message"}
{"nick":"gskachkov","date":"2017-05-12T16:07:53.198Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-05-12T16:08:39.536Z","type":"quit"}
{"nick":"basicdays","message":"really, that's actually convenient","date":"2017-05-12T17:18:04.538Z","type":"message"}
{"nick":"basicdays","message":"_considering_ using it in automated tests to check that a package api output contains the correct modules","date":"2017-05-12T17:18:34.643Z","type":"message"}
{"nick":"basicdays","message":"will have to check if babel does that","date":"2017-05-12T17:18:56.093Z","type":"message"}
{"nick":"gskachkov","date":"2017-05-12T17:37:07.882Z","type":"join"}
{"nick":"ljharb","message":"ah, thanks for confirming","date":"2017-05-12T18:48:01.659Z","type":"message"}
{"nick":"basicdays","message":"looks like webpack 2 and babel both handle it correctly \\o/","date":"2017-05-12T18:52:19.744Z","type":"message"}
{"nick":"basicdays","message":"A bit of a contrived test I guess if you want to know how I tested it specifically, but I just had 3 files, mod1, mod2, mod1-test. I `import * as mod2 from './mod2.mjs'` in mod1 and `export { mod2 }`; in mod1-test I also did `import * as mod2a from './mod2.mjs'` and `import {mod2} from 'mod1'`; `expect(mod2).to.equal(mod2a)` passes for both webpack2 and babel","date":"2017-05-12T18:57:54.319Z","type":"message"}
{"nick":"not-an-aardvark","date":"2017-05-12T19:38:49.573Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-12T21:09:43.137Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-12T21:10:32.192Z","type":"join"}
{"nick":"gkatsev_","new_nick":"gkatsev","date":"2017-05-12T21:29:58.966Z","type":"nick"}
{"nick":"leobalter","message":"Domenic: yt?","date":"2017-05-12T22:14:30.623Z","type":"message"}
{"nick":"Domenic","message":"leobalter: ya","date":"2017-05-12T22:14:36.180Z","type":"message"}
{"nick":"leobalter","message":"https://github.com/tc39/test262/pull/1020/files#r116333478","date":"2017-05-12T22:14:39.964Z","type":"message"}
{"nick":"leobalter","message":"I believe this test if fine, but it's failing both on SpiderMonkey and V8","date":"2017-05-12T22:15:03.973Z","type":"message"}
{"nick":"Domenic","message":"This looks fun.....","date":"2017-05-12T22:15:15.431Z","type":"message"}
{"nick":"leobalter","message":"What could be funnier in a Friday night?","date":"2017-05-12T22:15:36.340Z","type":"message"}
{"nick":"Domenic","message":"Ugh now I have to figure out what `const [...x] of [iter]` means...","date":"2017-05-12T22:16:24.714Z","type":"message"}
{"nick":"Domenic","message":"... I honestly have no idea what that means, sorry.","date":"2017-05-12T22:17:23.267Z","type":"message"}
{"nick":"Domenic","message":"OK so the sync version throws an error...","date":"2017-05-12T22:19:48.716Z","type":"message"}
{"nick":"leobalter","message":"|const [...x] of [iter]| defers to something similar to |const [...x] = iter|","date":"2017-05-12T22:19:50.087Z","type":"message"}
{"nick":"Domenic","message":"So this should probably throw an exception too? Which should indeed result in .next() throwing?","date":"2017-05-12T22:20:30.456Z","type":"message"}
{"nick":"Domenic","message":"caitp and alrra might be able to dig into why this fails in their implementations...","date":"2017-05-12T22:20:59.659Z","type":"message"}
{"nick":"Domenic","message":"Such exhaustive tests ^_^","date":"2017-05-12T22:21:07.725Z","type":"message"}
{"nick":"leobalter","message":"it should reject the promise on gen().next()","date":"2017-05-12T22:21:21.297Z","type":"message"}
{"nick":"Domenic","message":"yes, that seems right to me","date":"2017-05-12T22:22:27.980Z","type":"message"}
{"nick":"caitp","message":"doesn't seem unbelievable that it fails since it's copy/pasted from normal for-of loops","date":"2017-05-12T22:22:29.799Z","type":"message"}
{"nick":"caitp","message":"please file a bug with a misbehaving test case and I'll take a look tomorrow","date":"2017-05-12T22:24:21.279Z","type":"message"}
{"nick":"caitp","message":"or monday I mean :)","date":"2017-05-12T22:24:28.777Z","type":"message"}
{"nick":"leobalter","message":"sure! I'll merge that PR as it seems right, and I'll make myself available to fix anything there if I'm wrong.","date":"2017-05-12T22:26:09.589Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-05-12T23:14:59.609Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-05-12T23:15:38.982Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-05-12T23:15:46.714Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-05-12T23:49:04.931Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2017-05-12T23:55:21.985Z","type":"quit"}
