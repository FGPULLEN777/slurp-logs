{"nick":"cloudshu","message":"caitp: ping","date":"2017-05-19T01:10:48.834Z","type":"message"}
{"nick":"cloudshu","message":"caitp: could you (or someone) explain to me why this test is correct: https://github.com/tc39/test262/blob/master/test/language/statements/for-await-of/async-func-dstr-var-ary-ptrn-elision-step-err.js","date":"2017-05-19T01:11:06.969Z","type":"message"}
{"nick":"cloudshu","message":"i'd understand if the loop were |for await (var [,] of iter)| instead of |for await ([,] of [iter])|","date":"2017-05-19T01:12:07.745Z","type":"message"}
{"nick":"caitp","message":"rick or leo are probably better choices, but give me an hour and ill try","date":"2017-05-19T01:12:15.507Z","type":"message"}
{"nick":"cloudshu","message":"caitp: no worries -- an easier to check question is does v8 pass that test?","date":"2017-05-19T01:12:29.632Z","type":"message"}
{"nick":"caitp","message":"no, not iirc","date":"2017-05-19T01:12:42.238Z","type":"message"}
{"nick":"caitp","message":"if its what i think it is","date":"2017-05-19T01:12:54.301Z","type":"message"}
{"nick":"cloudshu","message":"caitp: fwiw SM fails as well","date":"2017-05-19T01:12:56.679Z","type":"message"}
{"nick":"cloudshu","message":"caitp: i'll wait for leo, thanks!","date":"2017-05-19T01:13:02.452Z","type":"message"}
{"nick":"chicoxyzzy","date":"2017-05-19T01:29:32.282Z","type":"join"}
{"nick":"chicoxyz_","date":"2017-05-19T01:30:03.417Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 246 seconds","date":"2017-05-19T01:33:53.398Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-05-19T01:59:48.715Z","type":"quit"}
{"nick":"bterlson","message":"https://github.com/rbuckton/ecmascript-ref anyone for a new pseudo-keyword?","date":"2017-05-19T02:10:12.218Z","type":"message"}
{"nick":"ljharb","message":"eef, that seems way too magic","date":"2017-05-19T02:26:10.017Z","type":"message"}
{"nick":"bradleymeck","date":"2017-05-19T02:33:22.227Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-05-19T02:39:17.901Z","type":"join"}
{"nick":"bterlson","message":"ljharb: which part?","date":"2017-05-19T03:02:00.992Z","type":"message"}
{"nick":"rbuckton","date":"2017-05-19T03:25:22.918Z","type":"join"}
{"nick":"rbuckton","reason":"Client Quit","date":"2017-05-19T03:27:24.203Z","type":"quit"}
{"nick":"rbuckton","date":"2017-05-19T03:27:42.938Z","type":"join"}
{"nick":"bradleymeck","message":"bterlson: is this just sugar instead of fns","date":"2017-05-19T03:29:47.663Z","type":"message"}
{"nick":"bradleymeck","message":"i feel like `($ref = ref) => ref = $ref` ~= this","date":"2017-05-19T03:30:24.244Z","type":"message"}
{"nick":"bradleymeck","message":"might make lifetime tracking a bit harder but don't see anything crazy about it except using a non-reserved word","date":"2017-05-19T03:32:26.241Z","type":"message"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-05-19T03:33:57.394Z","type":"quit"}
{"nick":"ljharb","message":"bterlson: the whole concept - having references. it's bad enough that modules create live bindings :-/","date":"2017-05-19T03:39:49.111Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-19T04:18:30.987Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-05-19T06:19:48.796Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-05-19T09:47:02.877Z","type":"join"}
{"nick":"chicoxyz_","reason":"Ping timeout: 246 seconds","date":"2017-05-19T09:50:11.391Z","type":"quit"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 260 seconds","date":"2017-05-19T09:51:58.622Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-05-19T10:25:07.251Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-05-19T10:25:14.695Z","type":"join"}
{"nick":"mylesborins","date":"2017-05-19T10:25:37.872Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-19T10:34:48.421Z","type":"quit"}
{"nick":"jmdyck","date":"2017-05-19T11:05:28.251Z","type":"join"}
{"nick":"bradleymeck","date":"2017-05-19T11:49:27.098Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-19T12:30:27.399Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-05-19T13:11:05.605Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-19T14:03:08.567Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-05-19T14:17:40.108Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-05-19T14:33:26.383Z","type":"quit"}
{"nick":"caridy","date":"2017-05-19T14:33:57.310Z","type":"join"}
{"nick":"Fishrock123","date":"2017-05-19T14:35:44.325Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-19T14:41:32.236Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-05-19T14:42:17.340Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2017-05-19T14:42:49.912Z","type":"quit"}
{"nick":"rbuckton","reason":"Ping timeout: 240 seconds","date":"2017-05-19T16:37:35.846Z","type":"quit"}
{"nick":"rwaldron","date":"2017-05-19T16:46:20.345Z","type":"join"}
{"nick":"rbuckton","date":"2017-05-19T19:15:44.300Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-05-19T20:03:45.789Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-05-19T20:13:21.003Z","type":"join"}
{"nick":"Fishrock123","date":"2017-05-19T20:15:19.988Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-05-19T20:15:36.326Z","type":"quit"}
{"nick":"mylesborins","reason":"Excess Flood","date":"2017-05-19T20:23:32.575Z","type":"quit"}
{"nick":"mylesborins","date":"2017-05-19T20:23:59.105Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-19T20:25:40.020Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-05-19T20:32:19.785Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-05-19T20:35:52.583Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-05-19T21:06:00.786Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2017-05-19T21:14:38.275Z","type":"quit"}
{"nick":"cloudshu","message":"bterlson: this is like ocaml ref?","date":"2017-05-19T21:33:43.675Z","type":"message"}
{"nick":"cloudshu","message":"bterlson: is the actual motivation better engine optimization opportunities if it's new syntax? manual boxing is obviously possible today","date":"2017-05-19T21:34:24.773Z","type":"message"}
{"nick":"samth","message":"cloudshu: that appears to be much more than ref in ml","date":"2017-05-19T21:44:08.344Z","type":"message"}
{"nick":"samth","message":"it addressof in C","date":"2017-05-19T21:44:25.337Z","type":"message"}
{"nick":"samth","message":"bterlson: why have that instead of `() => x`","date":"2017-05-19T21:45:13.149Z","type":"message"}
{"nick":"cloudshu","message":"samth: okay, then yes, your question","date":"2017-05-19T21:45:42.428Z","type":"message"}
{"nick":"cloudshu","message":"i can imagine that it'll make some C# codegen easier, but i'm wary adding another possible perf cliff to the language","date":"2017-05-19T21:46:03.964Z","type":"message"}
{"nick":"cloudshu","message":"our bindings already super weird","date":"2017-05-19T21:46:07.509Z","type":"message"}
{"nick":"samth","message":"it seems like the issue is TDZ in decorators, which functions fix","date":"2017-05-19T21:46:15.623Z","type":"message"}
{"nick":"rbuckton","message":"samth, the boilerplate for both reading and writing a reference using callbacks is a bit cumbersome","date":"2017-05-19T21:46:44.731Z","type":"message"}
{"nick":"rbuckton","message":"samth, yes decorators is one case where this is useful.","date":"2017-05-19T21:47:23.013Z","type":"message"}
{"nick":"samth","message":"oh, because you can write `ref y = ref x` and then do `y` instead of `x.value`","date":"2017-05-19T21:47:29.840Z","type":"message"}
{"nick":"rbuckton","message":"That's correct.","date":"2017-05-19T21:47:39.844Z","type":"message"}
{"nick":"bterlson","message":"I think it's also much easier to optimize ref than just functions","date":"2017-05-19T21:48:04.180Z","type":"message"}
{"nick":"samth","message":"still seems like `let y = ()=>x; y()` is pretty short","date":"2017-05-19T21:48:39.023Z","type":"message"}
{"nick":"bterlson","message":"samth: per https://github.com/tc39/ecma262/pull/919#issuecomment-302594742, are you pro-\"syntax-based operation\" over \"syntax-directed operation\"?","date":"2017-05-19T21:49:05.363Z","type":"message"}
{"nick":"samth","message":"bterlson: on the one hand, I agree, on the other hand as soon as you write `ref x` all accesses to x are de-optimized","date":"2017-05-19T21:49:10.217Z","type":"message"}
{"nick":"samth","message":"bterlson: I wasn't sure if it was syntax-directed or not since I was on my phone","date":"2017-05-19T21:49:30.051Z","type":"message"}
{"nick":"samth","message":":)","date":"2017-05-19T21:49:31.198Z","type":"message"}
{"nick":"rbuckton","message":"samth, to be fully the same you have to do something like `let y = (v) => v === undefined ? x : (x = v)`, but that doesnt work if `undefined` is a valid value","date":"2017-05-19T21:49:43.464Z","type":"message"}
{"nick":"bterlson","message":"also the behavior of [] access is hard to emulate","date":"2017-05-19T21:50:21.781Z","type":"message"}
{"nick":"bterlson","message":"adds more code anyway","date":"2017-05-19T21:50:59.069Z","type":"message"}
{"nick":"rbuckton","message":"so the full function version would be `let y = function (v) { return arguments.length === 0 ? x : (x = v); }` or having two functions: `let y = { get value() { return x; }, set value(v) { x = v; } }`. `ref` expressions create the latter for you.","date":"2017-05-19T21:51:11.010Z","type":"message"}
{"nick":"samth","message":"when do you need to set through the ref?","date":"2017-05-19T21:52:11.472Z","type":"message"}
{"nick":"rbuckton","message":"See the `max` example at https://github.com/rbuckton/ecmascript-ref/blob/master/README.md","date":"2017-05-19T21:52:58.776Z","type":"message"}
{"nick":"rbuckton","message":"Decrement the value of the higher reference: `ref y = max(ref a, ref b); y--;`","date":"2017-05-19T21:54:11.304Z","type":"message"}
{"nick":"samth","message":"rbuckton: I understand how it works, just wondering why you would want that -- I understand the motivation for reading in decorators, but not for writing","date":"2017-05-19T21:55:21.910Z","type":"message"}
{"nick":"rbuckton","message":"samth, decorators isn't the use case here. Its just a general language feature.","date":"2017-05-19T21:56:58.641Z","type":"message"}
{"nick":"bterlson","message":"to be fair, angular's usage of decorators motivates the reading side quite a bit :-P","date":"2017-05-19T21:57:35.531Z","type":"message"}
{"nick":"rbuckton","message":"Decorators definately benefit from having forward references, but there are many other possibilities for this kind of feature.","date":"2017-05-19T21:57:40.171Z","type":"message"}
{"nick":"bterlson","message":"and it's fair to say that reading has way more utility than writing I think?","date":"2017-05-19T21:57:56.536Z","type":"message"}
{"nick":"samth","message":"rbuckton: right, but this is a big change to the model of the language","date":"2017-05-19T21:58:24.317Z","type":"message"}
{"nick":"samth","message":"And so you want comparably big use cases","date":"2017-05-19T21:58:41.797Z","type":"message"}
{"nick":"cloudshu","message":"i think a lot more motivation is needed than \"just a general feature\" if you're talking about adding &","date":"2017-05-19T21:58:43.713Z","type":"message"}
{"nick":"rbuckton","message":"samth, yes and no. `ref` can be modeled today with object literals, but its fairly verbose.","date":"2017-05-19T21:59:06.198Z","type":"message"}
{"nick":"cloudshu","message":"it needs closures, no?","date":"2017-05-19T21:59:29.118Z","type":"message"}
{"nick":"cloudshu","message":"there's nothing else that forces a binding to be observably persisted beyond its frame","date":"2017-05-19T21:59:42.039Z","type":"message"}
{"nick":"rbuckton","message":"using functions for forward references is a footgun for decorators when capturing a forward reference to a class. Its much more difficult to distinguish between `@Type(MyClass)` and `@Type(() => MyClass)` as the argument in both cases is a function.","date":"2017-05-19T22:00:14.240Z","type":"message"}
{"nick":"cloudshu","message":"ah i see","date":"2017-05-19T22:01:35.752Z","type":"message"}
{"nick":"rbuckton","message":"cloudshu, in the general case yes, but engines could optimize some common cases.","date":"2017-05-19T22:01:41.646Z","type":"message"}
{"nick":"cloudshu","message":"so, am i being cynical here or does this seem like","date":"2017-05-19T22:02:27.480Z","type":"message"}
{"nick":"cloudshu","message":"TDZ is making some case hard. let's add something that'll let us work around TDZ","date":"2017-05-19T22:02:44.192Z","type":"message"}
{"nick":"bterlson","message":"no tdz wouldn't help forward refs would it? You get an undefined value rather than a thing you can query for a value later?","date":"2017-05-19T22:04:46.747Z","type":"message"}
{"nick":"rbuckton","message":"I tend to look at `&` and `ref` as different. `&` often implies addresses and pointers and unmanaged memory. `ref` generally implies a reference to a value that is still susceptible to GC and can be moved around in the heap (e.g. moving out of nursery, compaction, etc.).","date":"2017-05-19T22:05:27.143Z","type":"message"}
{"nick":"not-an-aardvark","date":"2017-05-19T22:06:10.729Z","type":"join"}
{"nick":"cloudshu","message":"bterlson: functions would","date":"2017-05-19T22:06:26.414Z","type":"message"}
{"nick":"bterlson","message":"right I agree function wrapping is a way to get this behavior","date":"2017-05-19T22:06:50.584Z","type":"message"}
{"nick":"cloudshu","message":"bterlson: that both the class ctor is typeof \"function\" and a thunk that returns the class ctor is typeof \"function\" is unfortunate though","date":"2017-05-19T22:07:08.974Z","type":"message"}
{"nick":"samth","message":"rbuckton: ref is just addressof in JavaScript, where pointers are objects and everything is safe","date":"2017-05-19T22:07:59.581Z","type":"message"}
{"nick":"bterlson","message":"and the points don't matter","date":"2017-05-19T22:08:25.234Z","type":"message"}
{"nick":"rbuckton","message":"samth, yes. Its similar in C#, except in C# you have both `ref` (which points to a managed reference) and `&` (which points to unmanaged memory).","date":"2017-05-19T22:09:09.332Z","type":"message"}
{"nick":"cloudshu","message":"my mental model for this is still that it'll mainly benefit codegen for compiling other managed languages that have such managed pointers","date":"2017-05-19T22:12:26.315Z","type":"message"}
{"nick":"rbuckton","message":"`ref` expressions are effectively syntactic sugar over something you can do today with functions or an object literal. They have the added benefit of removing ambiguity between constructors and thunks for decorators, and a much simpler (and well trodden in other languages) syntax.","date":"2017-05-19T22:13:35.223Z","type":"message"}
{"nick":"cloudshu","message":"rbuckton: adding new syntax has a pretty high bar in my mind; what's the main pain point of using a library for this, more typing?","date":"2017-05-19T22:15:31.588Z","type":"message"}
{"nick":"cloudshu","message":"rbuckton: or missed optimization opportunities?","date":"2017-05-19T22:15:42.349Z","type":"message"}
{"nick":"rbuckton","message":"`ref` declarations allow you to simplify local bindings and avoid odd `this` behavior for calls (e.g. `a()` vs. `a.value()`), as well as allow engines to optimize away closures when both the decl and its initalizer are refs","date":"2017-05-19T22:15:49.054Z","type":"message"}
{"nick":"cloudshu","message":"(actually why does this need a separate declaration type, why not just have ref values?)","date":"2017-05-19T22:18:20.401Z","type":"message"}
{"nick":"cloudshu","message":"for optimization?","date":"2017-05-19T22:18:29.904Z","type":"message"}
{"nick":"rbuckton","message":"cloudshu, I agree on the high bar for syntax. Decorators and forward references are a key driver. Another is that it is a powerful feature on its own that is commonly used in many other languages.","date":"2017-05-19T22:18:33.850Z","type":"message"}
{"nick":"bterlson","message":"rbuckton: I want to see a real example of ref setting","date":"2017-05-19T22:19:49.557Z","type":"message"}
{"nick":"rbuckton","message":"cloudshu, mostly for optimization. `ref` expressions and `ref` declarations could be two separate proposals, with `ref` declarations building on `ref` expressions, but both are small enough and closely related that keeping them together seemed the better choice for now.","date":"2017-05-19T22:20:15.504Z","type":"message"}
{"nick":"cloudshu","message":"rbuckton: i find \"commonly used in many other languages\" too broad and handwavy for me to consider compelling :)","date":"2017-05-19T22:20:22.591Z","type":"message"}
{"nick":"rbuckton","message":"bterlson, in C#, there are a fairly large number of examples of `ref` (and `out`, which is fairly similar).","date":"2017-05-19T22:21:00.334Z","type":"message"}
{"nick":"bterlson","message":"also does `ref x = ref foo.x; x; x;` trigger a getter twice?","date":"2017-05-19T22:21:02.454Z","type":"message"}
{"nick":"bterlson","message":"oh, once I guess","date":"2017-05-19T22:21:35.768Z","type":"message"}
{"nick":"cloudshu","message":"rbuckton: ref declarations seem odd to me as proposed right now because being a ref seems like it should be composable with scope","date":"2017-05-19T22:21:41.435Z","type":"message"}
{"nick":"rbuckton","message":"bterlson, yes it would trigger the getter twice.","date":"2017-05-19T22:21:42.961Z","type":"message"}
{"nick":"rbuckton","message":"bterlson, consider this example instead: `ref x = ref ar[0]; x; x;` or `ref x = ref ar[0]; x; ar[0]++; x;`","date":"2017-05-19T22:22:38.977Z","type":"message"}
{"nick":"rbuckton","message":"what do you mean by \"composable with scope\"?","date":"2017-05-19T22:23:04.792Z","type":"message"}
{"nick":"cloudshu","message":"rbuckton: i might want let refs vs var refs","date":"2017-05-19T22:23:23.535Z","type":"message"}
{"nick":"Bakkot","message":"Strongly disagree that this is a small feature","date":"2017-05-19T22:23:55.862Z","type":"message"}
{"nick":"cloudshu","message":"as an implementer that example scares me for the increased attack surface","date":"2017-05-19T22:24:08.180Z","type":"message"}
{"nick":"cloudshu","message":"the array example","date":"2017-05-19T22:24:11.808Z","type":"message"}
{"nick":"rbuckton","message":"I did consider that: `let ref x` or `const ref x`. It seemed a bit verbose, and whats the use of `const y = 1; let ref x = ref y;` since `y` is const.","date":"2017-05-19T22:24:25.111Z","type":"message"}
{"nick":"Bakkot","message":"your ref declarations and expressions are definitely simiar, but neither is at all what I'd call small","date":"2017-05-19T22:24:37.981Z","type":"message"}
{"nick":"ljharb","message":"i think first-class refs is a really really big feature that changes the language in a significant way.","date":"2017-05-19T22:25:21.783Z","type":"message"}
{"nick":"rbuckton","message":"Though on the other side: `let y = 1; const ref x = ref y;` does seem worthwhile","date":"2017-05-19T22:25:22.009Z","type":"message"}
{"nick":"cloudshu","message":"refs are of course semantically just as safe as functions, but that at least part of their motivation is better optimization in the engine would suggest that they will receive different treatment in engines, which i think will significantly increase the surface of... possible security bugs","date":"2017-05-19T22:25:53.208Z","type":"message"}
{"nick":"cloudshu","message":"don't consider than argument against, that's my general worry","date":"2017-05-19T22:26:07.621Z","type":"message"}
{"nick":"cloudshu","message":"that*","date":"2017-05-19T22:26:10.210Z","type":"message"}
{"nick":"rbuckton","message":"ljharb, I agree that it would. That impact alone seems to merit new syntax. If it was just for a corner case for decorators I don't feel it would be worth it.","date":"2017-05-19T22:26:23.076Z","type":"message"}
{"nick":"cloudshu","message":"i have no right to speak since SABs","date":"2017-05-19T22:26:31.074Z","type":"message"}
{"nick":"ljharb","message":"lol ^","date":"2017-05-19T22:26:35.125Z","type":"message"}
{"nick":"Bakkot","message":"lol","date":"2017-05-19T22:26:36.746Z","type":"message"}
{"nick":"Bakkot","message":"SABs enabled things which were strictly impossible before, to be fair","date":"2017-05-19T22:26:50.086Z","type":"message"}
{"nick":"ljharb","message":"rbuckton: what's the need in decorators? i probably didn't read your readme thoroughly","date":"2017-05-19T22:26:53.656Z","type":"message"}
{"nick":"rbuckton","message":"ljharb, forward references: `class A { @Type(B) get b() {} }; class B { @Type(A) get a() {} };` is an error today (regardless of TDZ)","date":"2017-05-19T22:27:56.769Z","type":"message"}
{"nick":"Bakkot","message":"the advantage vs closures is just optimization?","date":"2017-05-19T22:28:36.415Z","type":"message"}
{"nick":"rbuckton","message":"But `class A { @Type(ref B) get b() {} }; class B { @Type(ref A) get a() {} };` would not have this issue, and wouldn't be ambiguous between a thunk for a constructor and a constructor","date":"2017-05-19T22:28:39.946Z","type":"message"}
{"nick":"rbuckton","message":"Bakkot, optimization (in the general case) and disambiguation (in the decorator case)","date":"2017-05-19T22:29:03.704Z","type":"message"}
{"nick":"Bakkot","message":"optimization and readability in that, I guess, but otoh it kind of destroys the readability of the rest of the language.","date":"2017-05-19T22:29:16.157Z","type":"message"}
{"nick":"ljharb","message":"rbuckton: right but then i could `export const foo = () => ref A;`, which is very different","date":"2017-05-19T22:29:21.180Z","type":"message"}
{"nick":"ljharb","message":"i'm very concerned about readability.","date":"2017-05-19T22:29:26.167Z","type":"message"}
{"nick":"rbuckton","message":"ljharb, compare that to: `export const foo = () => ({ get value() { return A; }, set value(v) { A = v; } });` if you wanted the exact same capability right now.","date":"2017-05-19T22:30:21.393Z","type":"message"}
{"nick":"cloudshu","message":"Bakkot: that's a good point","date":"2017-05-19T22:30:47.430Z","type":"message"}
{"nick":"ljharb","message":"i'm personally not interested in enabling circular references/deps","date":"2017-05-19T22:31:17.811Z","type":"message"}
{"nick":"cloudshu","message":"Bakkot: not like JS has type specifiers. now i just have to wonder if things are refs","date":"2017-05-19T22:31:26.730Z","type":"message"}
{"nick":"rbuckton","message":"Another use case we found on TypeScript is that it would make refactorings in an editor much easier, for extracting functions, etc. Refactoring out a part of a larger function where locals are mutated becomes a bit messy.","date":"2017-05-19T22:31:37.702Z","type":"message"}
{"nick":"cloudshu","message":"Bakkot: though is that *much* worse than wondering if things are thunks?","date":"2017-05-19T22:31:58.240Z","type":"message"}
{"nick":"Bakkot","message":"well, at least with thunks there's an explicit call","date":"2017-05-19T22:32:10.441Z","type":"message"}
{"nick":"Bakkot","message":"currently \"local variable reads/writes\" is one of the only things in the entire language which is not side-effecting","date":"2017-05-19T22:32:23.846Z","type":"message"}
{"nick":"Bakkot","message":"I would mourn that loss deeply","date":"2017-05-19T22:32:54.619Z","type":"message"}
{"nick":"rbuckton","message":"a `ref` expression is just `typeof === \"object\"` and has a `value` accessor","date":"2017-05-19T22:32:59.245Z","type":"message"}
{"nick":"rbuckton","message":"Though I can see your point with respect to `ref` declarations.","date":"2017-05-19T22:33:23.323Z","type":"message"}
{"nick":"rbuckton","message":"Perhaps it *would* be better to separate the proposals","date":"2017-05-19T22:33:55.771Z","type":"message"}
{"nick":"Bakkot","message":"yeah, the readability concern is much stronger for declarations than references","date":"2017-05-19T22:34:00.838Z","type":"message"}
{"nick":"Bakkot","message":"though, uh","date":"2017-05-19T22:34:09.176Z","type":"message"}
{"nick":"rbuckton","message":"How is that different than import and export bindings though?","date":"2017-05-19T22:34:54.948Z","type":"message"}
{"nick":"ljharb","message":"import/export bindings aren't first class","date":"2017-05-19T22:35:33.635Z","type":"message"}
{"nick":"ljharb","message":"but yes, i have the same readability concerns about those.","date":"2017-05-19T22:35:39.033Z","type":"message"}
{"nick":"ljharb","message":"you can't pass around a binding; passing a binding anywhere reifies the value.","date":"2017-05-19T22:35:51.132Z","type":"message"}
{"nick":"ljharb","message":"imo that's an important restriction.","date":"2017-05-19T22:36:01.198Z","type":"message"}
{"nick":"rbuckton","message":"`import * as x from './y'` gives you a first class module object","date":"2017-05-19T22:36:06.744Z","type":"message"}
{"nick":"ljharb","message":"sure, but mutable objects isn't anything new","date":"2017-05-19T22:36:23.288Z","type":"message"}
{"nick":"ljharb","message":"in that case there's no bindings at all","date":"2017-05-19T22:36:28.688Z","type":"message"}
{"nick":"ljharb","message":"it's def weird that it's a frozen object that could also change on you, sure.","date":"2017-05-19T22:36:42.330Z","type":"message"}
{"nick":"rbuckton","message":"`ref` expressions behave no differently in that respect than a function closure","date":"2017-05-19T22:37:20.560Z","type":"message"}
{"nick":"ljharb","message":"i agree - but it's expected that an invoked function could return anything","date":"2017-05-19T22:38:15.392Z","type":"message"}
{"nick":"ljharb","message":"in that case then @Type could take a think for a type, instead of just a type itself, no?","date":"2017-05-19T22:39:42.792Z","type":"message"}
{"nick":"ljharb","message":"*thunk","date":"2017-05-19T22:39:44.621Z","type":"message"}
{"nick":"ljharb","message":"like `@Type(() => B)`","date":"2017-05-19T22:39:51.778Z","type":"message"}
{"nick":"Bakkot","message":"if there's a lot of interest from other committee members I could maybe be pursuaded, but I feel like I should say up front that I would block the proposal as it stands right now; first-class references would be a major new feature which I don't think would be good fit for the language","date":"2017-05-19T22:40:08.771Z","type":"message"}
{"nick":"ljharb","message":"that's usually how i work around these kinds of circular issues; just always require a thunk","date":"2017-05-19T22:40:09.493Z","type":"message"}
{"nick":"bterlson","message":"mr. type check, how do you test for whether you have a thunk or the class itself?","date":"2017-05-19T22:40:11.824Z","type":"message"}
{"nick":"bterlson","message":"assuming you're @Type","date":"2017-05-19T22:40:17.539Z","type":"message"}
{"nick":"ljharb","message":"bterlson: you take a thunk unconditionally","date":"2017-05-19T22:40:22.872Z","type":"message"}
{"nick":"Bakkot","message":"+ also I was just rereading https://mail.mozilla.org/pipermail/es-discuss/2015-June/043307.html today","date":"2017-05-19T22:40:26.384Z","type":"message"}
{"nick":"bterlson","message":"how do you throw if you don't pass a thunk?","date":"2017-05-19T22:40:40.469Z","type":"message"}
{"nick":"bterlson","message":"or does it just fail mysteriously","date":"2017-05-19T22:40:44.309Z","type":"message"}
{"nick":"ljharb","message":"bterlson: so you throw if it's not a function, or if that function's length isn't 0","date":"2017-05-19T22:40:47.549Z","type":"message"}
{"nick":"ljharb","message":"and yeah, there's no way to avoid weird behavior on an empty function.","date":"2017-05-19T22:40:59.562Z","type":"message"}
{"nick":"bterlson","message":"so, fails mysteriously if you pass a class instead of thunk to class","date":"2017-05-19T22:41:06.883Z","type":"message"}
{"nick":"ljharb","message":"sure, that is true. you could also throw if its `.name` wasn't the empty string, i suppose","date":"2017-05-19T22:41:26.091Z","type":"message"}
{"nick":"Bakkot","message":"bterlson: I feel like... there are maybe some tools you're familiar with which could help with this problem...","date":"2017-05-19T22:41:39.419Z","type":"message"}
{"nick":"ljharb","message":"i agree it's not perfect. but in this new proposal, how would you typecheck a ref?","date":"2017-05-19T22:41:42.590Z","type":"message"}
{"nick":"ljharb","message":"(also yes, obv type systems solve this too)","date":"2017-05-19T22:41:53.186Z","type":"message"}
{"nick":"rbuckton","message":"I think angular was doing something like `@Type(forwardRef(() => B))` where `forwardRef` would tag the function, but its really no safer than `@Type(() => B)`","date":"2017-05-19T22:41:55.849Z","type":"message"}
{"nick":"ljharb","message":"unless we're talking about a Ref.isRef :-p","date":"2017-05-19T22:42:33.929Z","type":"message"}
{"nick":"rbuckton","message":"Depends on if we add Number.isNumber, String.isString, etc.","date":"2017-05-19T22:44:37.722Z","type":"message"}
{"nick":"ljharb","message":"those all have prototype methods that brand-check; so regardless if `ref` provides a new first-class kind of value, there'd have to be some way to brand-check it.","date":"2017-05-19T22:45:47.137Z","type":"message"}
{"nick":"rbuckton","message":"I need to add this to the proposal as well: a `ref` expression creates a site object (similar to the array for a tagged template), so `(ref x) === (ref x)`.","date":"2017-05-19T22:46:08.244Z","type":"message"}
{"nick":"rbuckton","message":"ljharb, the actual implementation would have some kind of %RefPrototype% that would have the get/set accessors that check the brand via internal slot.","date":"2017-05-19T22:47:38.034Z","type":"message"}
{"nick":"rbuckton","message":"That's not in the strawman as of yet though.","date":"2017-05-19T22:47:50.528Z","type":"message"}
{"nick":"bterlson","message":"now let's not get ahead of ourselves. Brand checks are evil, right? ;)","date":"2017-05-19T22:47:58.261Z","type":"message"}
{"nick":"ljharb","message":"i was promised when toStringTag was left in ES6 that all new types would provide some form of brand checking :-)","date":"2017-05-19T22:49:18.566Z","type":"message"}
{"nick":"cloudshu","message":"rbuckton: i think you've discovered that many of us have violent gut reactions to this thing. more concrete motivations over \"it's a widely used feature elsewhere\" would help a lot if you plan to advance this","date":"2017-05-19T23:00:00.445Z","type":"message"}
{"nick":"rbuckton","message":"Fair enough.","date":"2017-05-19T23:02:12.335Z","type":"message"}
{"nick":"Bakkot","message":"question: why is `const a = 0; a = 1` not an early error? is the reason just dynamic scope constructs?","date":"2017-05-19T23:31:35.679Z","type":"message"}
{"nick":"Bakkot","message":"it could've been an early error in strict mode, at least","date":"2017-05-19T23:31:48.779Z","type":"message"}
{"nick":"Bakkot","message":"... still could, maybe?","date":"2017-05-19T23:31:52.154Z","type":"message"}
{"nick":"Bakkot","message":"but probably not.","date":"2017-05-19T23:32:14.458Z","type":"message"}
{"nick":"cloudshu","message":"Bakkot: yeah, i'd guess with?","date":"2017-05-19T23:49:39.521Z","type":"message"}
{"nick":"cloudshu","message":"that makes me sad that we didn't call unscopables \"without\"","date":"2017-05-19T23:50:59.004Z","type":"message"}
{"nick":"ljharb","message":"omg total missed opportunity","date":"2017-05-19T23:53:34.537Z","type":"message"}
{"nick":"ljharb","message":"i still want `Promise.empty = new Promise(() => {})` to be a thing","date":"2017-05-19T23:53:51.074Z","type":"message"}
{"nick":"bterlson","message":"cloudshu: sorry haven't gotten to that issue I promised to look at yet. Is next week too late?","date":"2017-05-19T23:59:16.663Z","type":"message"}
{"nick":"cloudshu","message":"bterlson: nope, next week is fine","date":"2017-05-19T23:59:28.503Z","type":"message"}
