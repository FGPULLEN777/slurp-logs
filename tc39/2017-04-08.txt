{"nick":"tcare","reason":"Quit: Connection closed for inactivity","date":"2017-04-08T03:50:05.681Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-04-08T04:09:33.480Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-08T04:56:05.270Z","type":"join"}
{"nick":"dilijev","reason":"Quit: Connection closed for inactivity","date":"2017-04-08T04:56:24.633Z","type":"quit"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T05:54:57.989Z","type":"quit"}
{"nick":"dilijev","date":"2017-04-08T06:07:07.818Z","type":"join"}
{"nick":"ljharb","message":"annevk: since we seem to be going back and forth; TC39 has refused, many times, to solve this problem in a generic way - so instead it's solved in a unique and different way for each type. i don't think HTML can just pass the buck by saying \"TC39 should solve it\" while they're simultaneously trying to solve a problem (cancellation) that TC39 should also","date":"2017-04-08T06:31:54.152Z","type":"message"}
{"nick":"ljharb","message":"solve :-)","date":"2017-04-08T06:31:54.340Z","type":"message"}
{"nick":"annevk","message":"ljharb: it seems more by accident that it's solved for most types as it's not solved for Error","date":"2017-04-08T06:33:32.943Z","type":"message"}
{"nick":"annevk","message":"ljharb: so it's not clear TC39 actually thinks this is a problem worth solving","date":"2017-04-08T06:33:56.297Z","type":"message"}
{"nick":"ljharb","message":"the accident is that it's not solved for error, indeed","date":"2017-04-08T06:33:58.148Z","type":"message"}
{"nick":"annevk","message":"ljharb: and therefore, it's not clear to me we should consider it a problem worth solving","date":"2017-04-08T06:34:17.946Z","type":"message"}
{"nick":"ljharb","message":"the committee's decision when i tried to get toStringTag pulled before ES6 was that every type, forever, would have *some* method of brand checking","date":"2017-04-08T06:34:19.561Z","type":"message"}
{"nick":"ljharb","message":"in other words, it's worth solving, but not worth solving generically.","date":"2017-04-08T06:34:34.149Z","type":"message"}
{"nick":"annevk","message":"ljharb: but they didn't solve it for Error","date":"2017-04-08T06:34:44.422Z","type":"message"}
{"nick":"ljharb","message":"that was an oversight","date":"2017-04-08T06:34:48.853Z","type":"message"}
{"nick":"annevk","message":"ljharb: so that is being fixed?","date":"2017-04-08T06:34:55.355Z","type":"message"}
{"nick":"ljharb","message":"had i noticed that at the time, we'd have had to","date":"2017-04-08T06:34:55.504Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2017-04-08T06:34:57.465Z","type":"message"}
{"nick":"ljharb","message":"in the error stacks proposal","date":"2017-04-08T06:35:01.477Z","type":"message"}
{"nick":"ljharb","message":"`System.getStack` or whatever it ends up being called, will throw if given a non-Error object.","date":"2017-04-08T06:35:14.952Z","type":"message"}
{"nick":"annevk","message":"ljharb: then it would also be solved for DOMException","date":"2017-04-08T06:35:20.620Z","type":"message"}
{"nick":"ljharb","message":"that will solve \"is it an Error\"","date":"2017-04-08T06:35:33.991Z","type":"message"}
{"nick":"ljharb","message":"not \"is it this specific type of Error\"","date":"2017-04-08T06:35:39.807Z","type":"message"}
{"nick":"annevk","message":"ljharb: okay, so is that being fixed?","date":"2017-04-08T06:35:56.104Z","type":"message"}
{"nick":"ljharb","message":"so it wouldn't help me distinguish between a DOMException and a TypeError","date":"2017-04-08T06:35:58.293Z","type":"message"}
{"nick":"ljharb","message":"no","date":"2017-04-08T06:36:02.701Z","type":"message"}
{"nick":"annevk","message":"ljharb: then we're back to does TC39 think this is worth solving","date":"2017-04-08T06:36:14.708Z","type":"message"}
{"nick":"ljharb","message":"but i'm sorry, that doesn't relieve you of the responsibility imo","date":"2017-04-08T06:36:14.917Z","type":"message"}
{"nick":"annevk","message":"Well, imo it does","date":"2017-04-08T06:36:23.763Z","type":"message"}
{"nick":"ljharb","message":"that's really reductionist and lazy :-","date":"2017-04-08T06:36:30.813Z","type":"message"}
{"nick":"ljharb","message":":-/","date":"2017-04-08T06:36:32.027Z","type":"message"}
{"nick":"annevk","message":"It's not lazy, it seems pretty clear TC39 is not aligned on whether this is a problem","date":"2017-04-08T06:36:49.296Z","type":"message"}
{"nick":"ljharb","message":"that is somewhat accurate","date":"2017-04-08T06:36:55.678Z","type":"message"}
{"nick":"annevk","message":"If they were, they'd solve it in a way that would make it efficient","date":"2017-04-08T06:37:02.651Z","type":"message"}
{"nick":"ljharb","message":"but that doesn't mean it's not a problem","date":"2017-04-08T06:37:03.162Z","type":"message"}
{"nick":"ljharb","message":"checking internal slots is already efficient","date":"2017-04-08T06:37:10.393Z","type":"message"}
{"nick":"ljharb","message":"it's just a bit in the underlying C++ or similar","date":"2017-04-08T06:37:16.344Z","type":"message"}
{"nick":"annevk","message":"Not for programmers","date":"2017-04-08T06:37:19.188Z","type":"message"}
{"nick":"annevk","message":"Not for folks writing JavaScript","date":"2017-04-08T06:37:25.687Z","type":"message"}
{"nick":"ljharb","message":"oh you mean, efficient for JS devs","date":"2017-04-08T06:37:34.369Z","type":"message"}
{"nick":"annevk","message":"They have to use rather weird hacks","date":"2017-04-08T06:37:37.181Z","type":"message"}
{"nick":"ljharb","message":"yes, that's true","date":"2017-04-08T06:37:39.023Z","type":"message"}
{"nick":"annevk","message":"So again, is it worth solving needs to be solved first, imo","date":"2017-04-08T06:37:46.820Z","type":"message"}
{"nick":"ljharb","message":"the problem is that if it's not solved by *something* soon then there will be a period of time where it *can't* be done","date":"2017-04-08T06:38:08.120Z","type":"message"}
{"nick":"ljharb","message":"in other words, i'm saying it's critical to ship *something* that brand checks, pending a better solution","date":"2017-04-08T06:38:20.051Z","type":"message"}
{"nick":"ljharb","message":"because it's impossible to brand check, or polyfill the better solution later, if there's no underlying primitive method","date":"2017-04-08T06:38:32.515Z","type":"message"}
{"nick":"ljharb","message":"absolutely i will be pursuing further improvements on brand checking","date":"2017-04-08T06:38:48.434Z","type":"message"}
{"nick":"ljharb","message":"but right now i'm just trying to stop the bleeding","date":"2017-04-08T06:38:57.744Z","type":"message"}
{"nick":"ljharb","message":"adding a `Symbol.asInstance` method that's cross-realm *would*, btw, be efficient for JS devs","date":"2017-04-08T06:39:26.877Z","type":"message"}
{"nick":"ljharb","message":"it would mean `foo instanceof DOMException` worked cross-realm (altho it thus wouldn't tell you if DOMException.prototype was the __proto__, ofc, but that's easy to check directly)","date":"2017-04-08T06:39:56.456Z","type":"message"}
{"nick":"ljharb","message":"if you want to hold off on shipping cancellation entirely, until TC39 has a generic solution, then fine","date":"2017-04-08T06:42:34.298Z","type":"message"}
{"nick":"annevk","message":"It's extremely easy to add brand checking later","date":"2017-04-08T06:42:43.060Z","type":"message"}
{"nick":"annevk","message":"Because we already have brands for all platform objects","date":"2017-04-08T06:42:58.881Z","type":"message"}
{"nick":"annevk","message":"They're just not always exposed","date":"2017-04-08T06:43:04.236Z","type":"message"}
{"nick":"gskachkov_","date":"2017-04-08T06:43:04.635Z","type":"join"}
{"nick":"ljharb","message":"it's easy for implementations to add them, sure","date":"2017-04-08T06:43:26.624Z","type":"message"}
{"nick":"ljharb","message":"it's *impossible* for JS devs to polyfill them in those browsers after the fact tho.","date":"2017-04-08T06:43:38.229Z","type":"message"}
{"nick":"ljharb","message":"like for Map - if we add `Map.is` or something, that's only polyfillable because Map.prototype has brand-checking methods already","date":"2017-04-08T06:43:54.433Z","type":"message"}
{"nick":"ljharb","message":"ie, some brand checking primitive must exist","date":"2017-04-08T06:44:02.725Z","type":"message"}
{"nick":"ljharb","message":"so if you're concerned about efficiency or ergonomics for JS devsâ€¦","date":"2017-04-08T06:44:17.613Z","type":"message"}
{"nick":"annevk","message":"FWIW, I'd love to add Symbol.isInstance or some such, but we'd really need TC39 on board","date":"2017-04-08T06:44:32.121Z","type":"message"}
{"nick":"ljharb","message":"? Symbol.asInstance already exists","date":"2017-04-08T06:44:42.510Z","type":"message"}
{"nick":"ljharb","message":"you'd just define your own implementation, which is totally allowed in the spec","date":"2017-04-08T06:44:50.009Z","type":"message"}
{"nick":"annevk","message":"Oh right, Firefox does that, but no other browser wants to","date":"2017-04-08T06:45:09.105Z","type":"message"}
{"nick":"annevk","message":"So that likely won't work out","date":"2017-04-08T06:45:17.218Z","type":"message"}
{"nick":"ljharb","message":"wants to implement the instanceof hook?","date":"2017-04-08T06:45:22.170Z","type":"message"}
{"nick":"ljharb","message":"i was not aware there was any delay in implementing it","date":"2017-04-08T06:45:30.450Z","type":"message"}
{"nick":"annevk","message":"No, Firefox implements it for platform objects in a way that makes it work cross-realm","date":"2017-04-08T06:45:49.750Z","type":"message"}
{"nick":"annevk","message":"No other browser wants to do that","date":"2017-04-08T06:45:55.549Z","type":"message"}
{"nick":"ljharb","message":"oh","date":"2017-04-08T06:46:06.599Z","type":"message"}
{"nick":"ljharb","message":"why not?","date":"2017-04-08T06:46:08.415Z","type":"message"}
{"nick":"annevk","message":"Because TC39'rs recommended against it","date":"2017-04-08T06:46:10.348Z","type":"message"}
{"nick":"ljharb","message":"what, where?","date":"2017-04-08T06:46:13.794Z","type":"message"}
{"nick":"annevk","message":"ljharb: see all the links from https://github.com/heycam/webidl/issues/129","date":"2017-04-08T06:47:14.440Z","type":"message"}
{"nick":"annevk","message":"ljharb: mostly Allen and Mark","date":"2017-04-08T06:47:35.265Z","type":"message"}
{"nick":"annevk","message":"ljharb: I referenced that issue from the DOM PR too btw","date":"2017-04-08T06:47:52.411Z","type":"message"}
{"nick":"ljharb","message":"hm, which links?","date":"2017-04-08T06:47:56.801Z","type":"message"}
{"nick":"ljharb","message":"neither of them are commenting on that thread","date":"2017-04-08T06:48:00.656Z","type":"message"}
{"nick":"ljharb","message":"ah, the esdiscuss one","date":"2017-04-08T06:48:19.919Z","type":"message"}
{"nick":"annevk","message":"ljharb: also the Bugzilla links at the end","date":"2017-04-08T06:48:47.180Z","type":"message"}
{"nick":"ljharb","message":"ok so i see a comment from allen that \"instanceof should probably be fixed for everything\", which it totally should","date":"2017-04-08T06:48:52.017Z","type":"message"}
{"nick":"annevk","message":"ljharb: the mailing list link points to the \"Solving the \"how do I tell whether I have an HTML element?\" (or image element, or whatever) problem\" thread, btw","date":"2017-04-08T06:48:56.699Z","type":"message"}
{"nick":"ljharb","message":"right","date":"2017-04-08T06:49:07.156Z","type":"message"}
{"nick":"annevk","message":"which is totally about this issue","date":"2017-04-08T06:49:14.463Z","type":"message"}
{"nick":"ljharb","message":"indeed","date":"2017-04-08T06:49:30.404Z","type":"message"}
{"nick":"ljharb","message":"altho i suspect the 2011 comments are based on obsolete proxy specs","date":"2017-04-08T06:49:40.571Z","type":"message"}
{"nick":"annevk","message":"they're still the same sentiment, solve generally or bust","date":"2017-04-08T06:49:59.016Z","type":"message"}
{"nick":"ljharb","message":"but sure, i'm not attached to using `Symbol.hasInstance`","date":"2017-04-08T06:50:02.841Z","type":"message"}
{"nick":"ljharb","message":"right, but i think those arguments are flawed","date":"2017-04-08T06:50:15.353Z","type":"message"}
{"nick":"ljharb","message":"because they ignore that there needs to be a primitive so that it can be polyfilled later","date":"2017-04-08T06:50:36.352Z","type":"message"}
{"nick":"annevk","message":"That hasn't been a huge source of problems for platform objects over many years of existence, though I agree it would be good to solve and I don't understand why TC39 doesn't want to solve it","date":"2017-04-08T06:51:45.999Z","type":"message"}
{"nick":"ljharb","message":"right, neither do i","date":"2017-04-08T06:51:53.018Z","type":"message"}
{"nick":"ljharb","message":"but does that mean we shouldn't make the problem worse now?","date":"2017-04-08T06:52:04.698Z","type":"message"}
{"nick":"ljharb","message":"it hasn't been a huge source of problems because working with realms sucks","date":"2017-04-08T06:52:16.286Z","type":"message"}
{"nick":"ljharb","message":"but the realms api will make that easier. and it will be polyfillable back to very old browsers via iframes.","date":"2017-04-08T06:52:25.943Z","type":"message"}
{"nick":"annevk","message":"We could block that API on solving this","date":"2017-04-08T06:52:42.549Z","type":"message"}
{"nick":"ljharb","message":"and forcing people to not use a feature unless they drop old browser support is not a great path to adoption","date":"2017-04-08T06:52:46.475Z","type":"message"}
{"nick":"ljharb","message":"i am totally fine with blocking on solving this.","date":"2017-04-08T06:52:55.855Z","type":"message"}
{"nick":"ljharb","message":"i just don't want more things shipped that provide no primitive to let this be solved later.","date":"2017-04-08T06:53:12.103Z","type":"message"}
{"nick":"annevk","message":"But I don't see how blocking any new object on solving this is fair","date":"2017-04-08T06:53:19.660Z","type":"message"}
{"nick":"ljharb","message":"i also agree","date":"2017-04-08T06:53:29.064Z","type":"message"}
{"nick":"ljharb","message":"which is why i think providing some form of brand check now is a good compromise","date":"2017-04-08T06:53:37.485Z","type":"message"}
{"nick":"annevk","message":"If the reams API is the problem, let's block on that","date":"2017-04-08T06:53:38.112Z","type":"message"}
{"nick":"ljharb","message":"the realms api will make the problem bigger. it's not the problem","date":"2017-04-08T06:53:50.398Z","type":"message"}
{"nick":"ljharb","message":"the problem has always existed","date":"2017-04-08T06:53:55.498Z","type":"message"}
{"nick":"annevk","message":"Right, so adding a couple new objects for cancel/abort is not making it worse","date":"2017-04-08T06:54:18.913Z","type":"message"}
{"nick":"ljharb","message":"i don't know about web builtins; but with JS builtins, only Error has this problem, and nobody knew that until a few months ago","date":"2017-04-08T06:54:25.894Z","type":"message"}
{"nick":"ljharb","message":"i think it is","date":"2017-04-08T06:54:30.946Z","type":"message"}
{"nick":"ljharb","message":"because it creates a window of browsers where brand-checking detection is *not possible*","date":"2017-04-08T06:54:46.114Z","type":"message"}
{"nick":"annevk","message":"that's already the case though","date":"2017-04-08T06:54:57.015Z","type":"message"}
{"nick":"ljharb","message":"not for cancellation","date":"2017-04-08T06:55:10.759Z","type":"message"}
{"nick":"ljharb","message":"that it's the case for some things, does not mean it's not worse to make it the case for more things","date":"2017-04-08T06:55:26.845Z","type":"message"}
{"nick":"ljharb","message":"ie, it's not \"it's a problem, therefore it doesn't matter if we make it worse\", making it worse is making it worse","date":"2017-04-08T06:55:48.233Z","type":"message"}
{"nick":"annevk","message":"I'm not really convinced we're making it worse","date":"2017-04-08T06:56:04.762Z","type":"message"}
{"nick":"annevk","message":"anyway, gotta go","date":"2017-04-08T06:56:22.371Z","type":"message"}
{"nick":"ljharb","message":"considering how eager people are to use fetch and stop using jquery, i think it will be a big problem.","date":"2017-04-08T06:56:28.909Z","type":"message"}
{"nick":"ljharb","message":"k, ttyl","date":"2017-04-08T06:56:44.295Z","type":"message"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T07:19:58.994Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-04-08T09:38:53.156Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-08T09:46:48.051Z","type":"join"}
{"nick":"sebmck","date":"2017-04-08T10:08:22.239Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-04-08T10:25:10.417Z","type":"quit"}
{"nick":"mylesborins","date":"2017-04-08T10:25:50.092Z","type":"join"}
{"nick":"sebmck","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2017-04-08T10:31:15.716Z","type":"quit"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T10:56:51.594Z","type":"quit"}
{"nick":"sebmck","date":"2017-04-08T11:01:48.265Z","type":"join"}
{"nick":"gskachkov_","date":"2017-04-08T11:08:21.336Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T11:13:21.244Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-08T11:42:08.827Z","type":"join"}
{"nick":"jmdyck","date":"2017-04-08T12:34:01.594Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T12:41:34.203Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-04-08T12:51:51.197Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-04-08T13:13:24.786Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-04-08T13:24:57.515Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-04-08T13:32:13.310Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-08T14:43:15.257Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T15:07:21.603Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-08T15:08:18.184Z","type":"join"}
{"nick":"gskachkov_","reason":"Client Quit","date":"2017-04-08T15:11:29.103Z","type":"quit"}
{"nick":"Domenic","message":"One of the benefits of not doing cancelation in TC39 is that we don't have to block on concerns from 1-person TC39 factions like ljharb's \"everything must be brand-checkable\" faction.","date":"2017-04-08T15:44:43.922Z","type":"message"}
{"nick":"sebmck","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2017-04-08T15:45:20.504Z","type":"quit"}
{"nick":"Domenic","message":"Instead we can just solve the web's problems which is canceling fetch/streams/credentials requests/etc.","date":"2017-04-08T15:45:50.751Z","type":"message"}
{"nick":"Domenic","message":"You can see how successful this has been because we've been able to add many many DOMException types over the last few years without being blocked by ljharb every step of the way.","date":"2017-04-08T15:47:30.845Z","type":"message"}
{"nick":"annevk","message":"If we were in charge branding would've been a thing too, so that objection would no longer be there ðŸ˜Š","date":"2017-04-08T15:48:54.814Z","type":"message"}
{"nick":"annevk","message":"Branding exposed in a reasonable manner to JavaScript developers, that is","date":"2017-04-08T15:49:20.022Z","type":"message"}
{"nick":"Domenic","message":"Well, if bz was in charge, at least :)","date":"2017-04-08T15:49:27.668Z","type":"message"}
{"nick":"annevk","message":"We use branding checks ourselves all the time, not exposing them to developers is very much against the extensible web manifesto, though that whole thing kinda faded","date":"2017-04-08T15:51:03.630Z","type":"message"}
{"nick":"Domenic","message":"We don't \"brand\"-check DOMExceptions","date":"2017-04-08T15:51:31.329Z","type":"message"}
{"nick":"annevk","message":"Fair","date":"2017-04-08T15:53:26.829Z","type":"message"}
{"nick":"annevk","message":"Domenic: you're with awb then that this shouldn't be a thing?","date":"2017-04-08T15:55:14.898Z","type":"message"}
{"nick":"Domenic","message":"Pretty much","date":"2017-04-08T15:55:20.970Z","type":"message"}
{"nick":"annevk","message":"Domenic: so when I write some custom code and need to branch on whether something is an element or text node, you'd argue for just using some property?","date":"2017-04-08T15:55:57.076Z","type":"message"}
{"nick":"Domenic","message":"Yeah","date":"2017-04-08T15:56:04.493Z","type":"message"}
{"nick":"annevk","message":"Domenic: which would be very different from how the platform itself behaves?","date":"2017-04-08T15:56:12.095Z","type":"message"}
{"nick":"Domenic","message":"Yeah","date":"2017-04-08T15:56:23.157Z","type":"message"}
{"nick":"Domenic","message":"It allows better flexibility on the part of someone passing things in to you to pass mocks etc.","date":"2017-04-08T15:56:42.212Z","type":"message"}
{"nick":"Domenic","message":"The platform sometimes needs private data (which causes an effective brand check), but ideally it would only rely on public data. In practice it always relies on public data because the first thing implementations do is go grab the private C++ \"data\" and use that.","date":"2017-04-08T15:57:40.574Z","type":"message"}
{"nick":"Domenic","message":"s/In practice it/In practice the platform/","date":"2017-04-08T15:57:54.573Z","type":"message"}
{"nick":"Domenic","message":"Author code has the choice to only rely on public data, which is great","date":"2017-04-08T15:58:10.375Z","type":"message"}
{"nick":"Domenic","message":"Author code should not be introducing artificial brand checks and then relying on public data anyway","date":"2017-04-08T15:58:24.899Z","type":"message"}
{"nick":"annevk","message":"You mean in practice it relies on private data?","date":"2017-04-08T15:58:30.327Z","type":"message"}
{"nick":"Domenic","message":"Oops, yeah","date":"2017-04-08T15:58:38.735Z","type":"message"}
{"nick":"Domenic","message":"The only other argument I've heard relies on security model where you're protecting against malicious code injected into your origin. Which is a threat model certain TC39 members endorse, but definitely not one we worry about on the web.","date":"2017-04-08T16:00:36.101Z","type":"message"}
{"nick":"annevk","message":"I mean, we do worry about it to some extent. That's why we added sandboxing, CSP, etc.","date":"2017-04-08T16:02:46.587Z","type":"message"}
{"nick":"Domenic","message":"There's a distinction between \"preventing injection of such code\" (sandboxing/etc.) and \"encouraging the injection of such code but programming super-carefully so such code cannot break your code's invariants\"","date":"2017-04-08T16:03:56.840Z","type":"message"}
{"nick":"annevk","message":"Rereading https://github.com/whatwg/dom/pull/434#issuecomment-292640413 it still doesn't have much justification, but maybe what you're saying here is it","date":"2017-04-08T16:04:10.891Z","type":"message"}
{"nick":"annevk","message":"Domenic: so does Mark Miller want this?","date":"2017-04-08T16:04:35.031Z","type":"message"}
{"nick":"Domenic","message":"He's happy with non-ergonomic ways, and IIRC he only needs it for specific classes?","date":"2017-04-08T16:05:06.787Z","type":"message"}
{"nick":"annevk","message":"Domenic: I tend to agree that on the web the view is that if untrusted code executes in your origin you're hosed","date":"2017-04-08T16:05:21.445Z","type":"message"}
{"nick":"annevk","message":"Domenic: I see","date":"2017-04-08T16:05:39.258Z","type":"message"}
{"nick":"annevk","message":"Domenic: maybe with the Realms API folks think they can run untrusted code safely there somehow?","date":"2017-04-08T16:06:32.506Z","type":"message"}
{"nick":"Domenic","message":"That does seem to be an emerging design tension","date":"2017-04-08T16:06:48.943Z","type":"message"}
{"nick":"annevk","message":"So many subtle bugs will emerge from that","date":"2017-04-08T16:07:15.321Z","type":"message"}
{"nick":"annevk","message":"TabAtkins: ^^ (re Twitter)","date":"2017-04-08T16:09:04.142Z","type":"message"}
{"nick":"annevk","message":"TabAtkins: Domenic is in favor of \"looks like\" tests (and so are others in TC39), personally I'm not sure I know enough to go either way, so I guess I'm happy with the status quo","date":"2017-04-08T16:10:57.223Z","type":"message"}
{"nick":"dilijev","message":"Was reading the notes from the last tc39 meeting and laughed a bit when 402 update was delayed for a second time due to technical difficulties. Every conference is the same :-P","date":"2017-04-08T16:15:23.465Z","type":"message"}
{"nick":"ljharb","message":"Domenic: let's not claim i'm \"blocking every step of the way\", i don't think it'll be productive to try to count up how many times an individual was the sole dissenter on something.","date":"2017-04-08T16:50:38.298Z","type":"message"}
{"nick":"Domenic","message":"Definitely, productivity is not TC39's strong suit.","date":"2017-04-08T16:50:55.483Z","type":"message"}
{"nick":"ljharb","message":"while it's been made clear that there are people who aren't convinced that brand-checking is a good idea, what has not been made clear is what the harm would be if these brand-checking methods - which are easy to implement, and don't break other aspects of the semantics - were just added.","date":"2017-04-08T16:51:40.063Z","type":"message"}
{"nick":"sebmck","date":"2017-04-08T16:51:42.281Z","type":"join"}
{"nick":"ljharb","message":"iow i *do* hear that i haven't yet made a convincing enough case to persuade everybody","date":"2017-04-08T16:51:52.083Z","type":"message"}
{"nick":"ljharb","message":"but i don't hear why it's necessary to block *a brand-checking method*","date":"2017-04-08T16:52:03.688Z","type":"message"}
{"nick":"gskachkov_","date":"2017-04-08T16:52:20.318Z","type":"join"}
{"nick":"ljharb","message":"(considering this isn't enabling a new programming model, it's just extending an existing one to fill the holes where it's not possible)","date":"2017-04-08T16:53:13.340Z","type":"message"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T17:02:29.196Z","type":"quit"}
{"nick":"sebmck","reason":"Read error: Connection reset by peer","date":"2017-04-08T18:28:09.714Z","type":"quit"}
{"nick":"dilijev","message":"Devil's advocate: harm is adding more things to the spec, producing more changes that web devs need to wait for the whole web to adopt before they can be used.","date":"2017-04-08T18:34:27.663Z","type":"message"}
{"nick":"dilijev","message":"FWIW I think that spec self-consistency of an already-mostly-possible thing is a laudable goal, and I don't see any harm in adding them.","date":"2017-04-08T18:35:02.142Z","type":"message"}
{"nick":"dilijev","message":"(my 2c as an idealist and not as a spec writer, only informed in a limited way by being an implementer)","date":"2017-04-08T18:35:27.531Z","type":"message"}
{"nick":"not-an-aardvark","date":"2017-04-08T18:37:10.311Z","type":"join"}
{"nick":"gskachkov_","date":"2017-04-08T19:28:14.296Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T20:14:55.144Z","type":"quit"}
{"nick":"jmdyck","reason":"Ping timeout: 240 seconds","date":"2017-04-08T20:27:58.569Z","type":"quit"}
{"nick":"jmdyck","date":"2017-04-08T20:30:05.896Z","type":"join"}
{"nick":"gskachkov_","date":"2017-04-08T21:01:37.904Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-08T21:47:04.114Z","type":"quit"}
