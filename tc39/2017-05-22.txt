{"nick":"jmdyck","message":"I agree it's the complete spec for how a parser (lexer) must handle whitespace, but I'm pretty sure that's not what adema is looking for.","date":"2017-05-22T00:01:48.313Z","type":"message"}
{"nick":"jmdyck","message":"you could use what the spec says to define where whitespace is allowed/manadatory/forbidden, but it wouldn't be a very practical definition","date":"2017-05-22T00:03:24.998Z","type":"message"}
{"nick":"jmdyck","message":"something like: whitespace is allowed at a given point in a source text if the insertion/deletion of whitespace at that point doesn't make a difference to the result of parsing the source text. If it does make a difference, then whitespace at that point is mandatory or forbidden or semantic, depending on how you define those.","date":"2017-05-22T00:06:50.532Z","type":"message"}
{"nick":"chicoxyzzy","reason":"Remote host closed the connection","date":"2017-05-22T00:39:19.167Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-05-22T00:41:29.885Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 246 seconds","date":"2017-05-22T00:45:44.386Z","type":"quit"}
{"nick":"TabAtkins","message":"Same applies to CSS - except for a very small number of explicitly required/disallowed whitespace, the grammar is always just tokens, and whitespace is required only where you need it to make the tokens parse the way you want.","date":"2017-05-22T02:40:34.715Z","type":"message"}
{"nick":"TabAtkins","message":"Excepting in calc() around the + and - operators, and in selectors when you want the descendant combinator, you never actually need whitespace in CSS - you can always replace it with an empty comment /**/.","date":"2017-05-22T02:41:15.423Z","type":"message"}
{"nick":"chicoxyzzy","date":"2017-05-22T02:43:23.386Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 255 seconds","date":"2017-05-22T02:43:30.017Z","type":"quit"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 268 seconds","date":"2017-05-22T02:48:03.886Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-05-22T03:41:55.899Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-05-22T04:44:49.655Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 260 seconds","date":"2017-05-22T05:01:43.545Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-05-22T06:58:31.604Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 260 seconds","date":"2017-05-22T07:16:07.544Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-05-22T07:27:27.935Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-05-22T09:13:00.201Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 268 seconds","date":"2017-05-22T09:17:47.726Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-05-22T09:55:20.718Z","type":"join"}
{"nick":"chicoxyz_","date":"2017-05-22T09:57:39.036Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 268 seconds","date":"2017-05-22T10:00:20.813Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-05-22T10:25:10.709Z","type":"quit"}
{"nick":"mylesborins","date":"2017-05-22T10:25:41.281Z","type":"join"}
{"nick":"chicoxyzzy","date":"2017-05-22T10:31:42.478Z","type":"join"}
{"nick":"chicoxyz_","reason":"Ping timeout: 260 seconds","date":"2017-05-22T10:35:24.598Z","type":"quit"}
{"nick":"jmdyck","date":"2017-05-22T11:40:56.652Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Remote host closed the connection","date":"2017-05-22T11:55:04.239Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-05-22T11:56:47.537Z","type":"join"}
{"nick":"bradleymeck","date":"2017-05-22T14:54:54.428Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-05-22T15:34:33.196Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-22T16:03:58.916Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-05-22T16:20:08.417Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-22T17:33:00.445Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-05-22T17:36:37.359Z","type":"join"}
{"nick":"gskachkov","date":"2017-05-22T18:22:03.580Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-05-22T18:23:57.883Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-22T18:25:02.086Z","type":"join"}
{"nick":"caridy","date":"2017-05-22T18:32:25.981Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-05-22T18:32:28.546Z","type":"quit"}
{"nick":"caridy","date":"2017-05-22T18:33:11.353Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-22T18:35:33.766Z","type":"quit"}
{"nick":"gskachkov","date":"2017-05-22T18:36:07.354Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-05-22T18:45:43.594Z","type":"quit"}
{"nick":"rwaldron","message":"caitp I believe I've found an excellent bug in V8 for-await","date":"2017-05-22T18:51:58.027Z","type":"message"}
{"nick":"caitp","message":"is it the destructuring thing?","date":"2017-05-22T18:52:13.645Z","type":"message"}
{"nick":"rwaldron","message":"The nitty gritty: destructuring bindings in for-await appear to _not_ evaluate the default value when the default value is `class Name {}`","date":"2017-05-22T18:52:59.387Z","type":"message"}
{"nick":"rwaldron","message":"> <caitp>\tis it the destructuring thing?","date":"2017-05-22T18:53:15.189Z","type":"message"}
{"nick":"rwaldron","message":"Maybe?","date":"2017-05-22T18:53:17.800Z","type":"message"}
{"nick":"caitp","message":"sounds similar to the bug dan found","date":"2017-05-22T18:53:26.806Z","type":"message"}
{"nick":"caitp","message":"which is a lot scarier than just \"not evaluating\"","date":"2017-05-22T18:53:36.314Z","type":"message"}
{"nick":"rwaldron","message":"link?","date":"2017-05-22T18:53:44.362Z","type":"message"}
{"nick":"caitp","message":"you probably can't access the chromium bugs, but it's pretty bbad","date":"2017-05-22T18:55:06.473Z","type":"message"}
{"nick":"rwaldron","message":"> you probably can't access the chromium bugs","date":"2017-05-22T18:55:17.233Z","type":"message"}
{"nick":"rwaldron","message":"seems silly, as a contractor :|","date":"2017-05-22T18:55:24.461Z","type":"message"}
{"nick":"rwaldron","message":"aklein ping ^^","date":"2017-05-22T18:55:32.042Z","type":"message"}
{"nick":"caitp","message":"https://chromium-review.googlesource.com/c/491686/8/test/mjsunit/harmony/regress/regress-6322.js << those are reproductions for it","date":"2017-05-22T18:56:16.495Z","type":"message"}
{"nick":"caitp","message":"similar to what you've found?","date":"2017-05-22T18:56:20.837Z","type":"message"}
{"nick":"rwaldron","message":"Let's find out","date":"2017-05-22T18:56:28.172Z","type":"message"}
{"nick":"rwaldron","message":"WHOA","date":"2017-05-22T18:57:19.980Z","type":"message"}
{"nick":"rwaldron","message":"The one I discovered does not dump like that","date":"2017-05-22T18:57:35.267Z","type":"message"}
{"nick":"rwaldron","message":"the promise is just rejected","date":"2017-05-22T18:57:42.465Z","type":"message"}
{"nick":"caitp","message":"interesting","date":"2017-05-22T18:57:46.528Z","type":"message"}
{"nick":"rwaldron","message":"el-oh-el","date":"2017-05-22T18:57:47.685Z","type":"message"}
{"nick":"rwaldron","message":"one sec","date":"2017-05-22T18:57:57.612Z","type":"message"}
{"nick":"caitp","message":"I don't have a build with the patch applied, it would be interesting to see if it's fixed by the fix for the other thing, eg same bubg","date":"2017-05-22T18:58:22.237Z","type":"message"}
{"nick":"caitp","message":"might bbe something different.","date":"2017-05-22T18:58:27.150Z","type":"message"}
{"nick":"rwaldron","message":"(async function fn() {for await (const [cls = class {}, xCls = class X {}] of [[,,]]) {print(cls.name);print(xCls.name);}}()).then(_ => _, error => print(error.toString()));","date":"2017-05-22T18:58:50.378Z","type":"message"}
{"nick":"rwaldron","message":"let me re-arrange it so that it's closer to Dan's","date":"2017-05-22T18:59:15.155Z","type":"message"}
{"nick":"caitp","message":"it looks like it's probably the same bug, just manifesting in a less dangerous way (similar to how it manifests in normal for-of loops in generators)","date":"2017-05-22T18:59:59.452Z","type":"message"}
{"nick":"rwaldron","message":"I think you're right about that","date":"2017-05-22T19:00:36.085Z","type":"message"}
{"nick":"caitp","message":"btw, does v8 still fail the generated destructuring tests that you guys added recently that were apparently broken?","date":"2017-05-22T19:03:28.545Z","type":"message"}
{"nick":"caitp","message":"I mean destructuring + for-await-of","date":"2017-05-22T19:03:41.159Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-05-22T19:03:56.113Z","type":"quit"}
{"nick":"rwaldron","message":"no it never did","date":"2017-05-22T19:04:10.026Z","type":"message"}
{"nick":"caridy","date":"2017-05-22T19:04:24.624Z","type":"join"}
{"nick":"rwaldron","message":"When I made the templates for \"destructuring binding + for-await-of\", I didn't think any of the cases had //- teardown","date":"2017-05-22T19:04:51.733Z","type":"message"}
{"nick":"rwaldron","message":"turns out there were two cases","date":"2017-05-22T19:04:56.566Z","type":"message"}
{"nick":"rwaldron","message":"2 * 6 templates = 12 failing cases you and cloudshu looked at","date":"2017-05-22T19:05:16.501Z","type":"message"}
{"nick":"rwaldron","message":"I just finished the patch to correct that","date":"2017-05-22T19:05:26.756Z","type":"message"}
{"nick":"caitp","message":"I saw, I was just wondering if we were passing the corrected tests","date":"2017-05-22T19:05:39.458Z","type":"message"}
{"nick":"rwaldron","message":"yes, you are","date":"2017-05-22T19:05:49.810Z","type":"message"}
{"nick":"caitp","message":"ok, thanks","date":"2017-05-22T19:05:53.887Z","type":"message"}
{"nick":"rwaldron","message":"both runtimes","date":"2017-05-22T19:05:54.177Z","type":"message"}
{"nick":"rwaldron","message":"The only issues now are related to the bug I mentioned above","date":"2017-05-22T19:06:07.720Z","type":"message"}
{"nick":"caitp","message":"do you want to apply that CL and see if it fixes the case you tried?","date":"2017-05-22T19:06:26.827Z","type":"message"}
{"nick":"caitp","message":"I can do it but I have some patches in progress, might take me a few days","date":"2017-05-22T19:06:38.292Z","type":"message"}
{"nick":"cloudshu","message":"rwaldron: cool, SM too? thanks for fixing","date":"2017-05-22T19:07:03.256Z","type":"message"}
{"nick":"rwaldron","message":"and not being able to use --harmony_object_rest_spread along with --harmony_async_iteration","date":"2017-05-22T19:07:15.297Z","type":"message"}
{"nick":"rwaldron","message":"cloudshu yes, both","date":"2017-05-22T19:07:22.405Z","type":"message"}
{"nick":"rwaldron","message":"that was always an accounting error on this end","date":"2017-05-22T19:07:32.559Z","type":"message"}
{"nick":"caitp","message":"wait what?","date":"2017-05-22T19:07:34.607Z","type":"message"}
{"nick":"caitp","message":"\"not being able to use --harmony_object_rest_spread along with --harmony_async_iteration\"","date":"2017-05-22T19:07:52.484Z","type":"message"}
{"nick":"rwaldron","message":"Chock it up to my first set of tests back on the job","date":"2017-05-22T19:07:55.321Z","type":"message"}
{"nick":"rwaldron","message":"caitp thats correct","date":"2017-05-22T19:08:02.218Z","type":"message"}
{"nick":"rwaldron","message":"leobalter said you knew about that","date":"2017-05-22T19:08:13.331Z","type":"message"}
{"nick":"caitp","message":"I don't think I'm familiar with this one","date":"2017-05-22T19:08:23.036Z","type":"message"}
{"nick":"leobalter","message":"I reported that once","date":"2017-05-22T19:08:23.863Z","type":"message"}
{"nick":"leobalter","message":"--harmony_async_iteration and --harmony","date":"2017-05-22T19:08:38.745Z","type":"message"}
{"nick":"caitp","message":"sounds familiar but I don't recall the details","date":"2017-05-22T19:09:36.788Z","type":"message"}
{"nick":"leobalter","message":"--harmony does not account for async_iteration neither object rest spread, I don't have a way on v8 for both at the same time","date":"2017-05-22T19:09:40.114Z","type":"message"}
{"nick":"rwaldron","message":"When I try to use them at the same time, all the tests fail for either: \"Expected no error, got SyntaxError: Unexpected reserved word\" or \" Expected no error, got SyntaxError: Unexpected token *\"","date":"2017-05-22T19:10:00.162Z","type":"message"}
{"nick":"caitp","message":"hm","date":"2017-05-22T19:10:41.942Z","type":"message"}
{"nick":"leobalter","message":"nevermind","date":"2017-05-22T19:10:47.025Z","type":"message"}
{"nick":"leobalter","message":"...","date":"2017-05-22T19:10:48.287Z","type":"message"}
{"nick":"leobalter","action":"runs `which d8` --harmony_async_iteration --harmony","date":"2017-05-22T19:10:59.227Z","type":"action"}
{"nick":"leobalter","message":"looks like it does not work when I pass the args to test262-harness","date":"2017-05-22T19:11:13.910Z","type":"message"}
{"nick":"caitp","message":"but it does work with other harmony flags?","date":"2017-05-22T19:11:27.982Z","type":"message"}
{"nick":"caitp","message":"they should all work the same way","date":"2017-05-22T19:11:35.714Z","type":"message"}
{"nick":"rwaldron","message":"Yep, I take that back","date":"2017-05-22T19:14:24.468Z","type":"message"}
{"nick":"rwaldron","message":"It's definitely test262-harness","date":"2017-05-22T19:14:30.781Z","type":"message"}
{"nick":"rwaldron","message":"sorry for the lies","date":"2017-05-22T19:14:39.779Z","type":"message"}
{"nick":"caitp","message":"it's all good, trying to eliminate as many bugs with this thing as possible so it can ship some day","date":"2017-05-22T19:15:53.500Z","type":"message"}
{"nick":"dval","date":"2017-05-22T20:23:51.638Z","type":"join"}
{"nick":"adema","message":"i read the clause and i understand your point about whitespaces being \"ignored\" but how do you recognize a valid token ? Everything between spaces are tokens ? What about \"if(\" ? Its not a valid one token sequence but its \"if\" and \"(\" tokens. On the other hand \"vara=0\" is never ok, it should always be separated by one or more tokens","date":"2017-05-22T20:47:27.804Z","type":"message"}
{"nick":"adema","message":"one or more whitespaces sorry","date":"2017-05-22T20:47:56.427Z","type":"message"}
{"nick":"rwaldron","message":"bterlson <3","date":"2017-05-22T20:49:50.581Z","type":"message"}
{"nick":"jmdyck","message":"adema: re \"how do you recognize a valid token?\" The spec definitely answers that.","date":"2017-05-22T21:19:21.855Z","type":"message"}
{"nick":"jmdyck","message":"That's what the lexical grammar is for.","date":"2017-05-22T21:19:37.854Z","type":"message"}
{"nick":"jmdyck","message":"and it's not the case that \"vara=0\" is never ok: it's a valid assignment stmt.","date":"2017-05-22T21:22:08.086Z","type":"message"}
{"nick":"rwaldron","message":"it's not valid in strict mode","date":"2017-05-22T21:23:10.892Z","type":"message"}
{"nick":"rwaldron","message":"(but that's a ReferenceError)","date":"2017-05-22T21:23:36.827Z","type":"message"}
{"nick":"adema","message":"well its valid but not in a \"var a = 0;\" sense","date":"2017-05-22T21:24:09.630Z","type":"message"}
{"nick":"rwaldron","message":"(vs a SyntaxError)","date":"2017-05-22T21:24:10.546Z","type":"message"}
{"nick":"jmdyck","message":"The InputElement* symbols are the goal symbols for the lexical grammar. They derive both tokens and non-tokens.","date":"2017-05-22T21:34:35.190Z","type":"message"}
{"nick":"dval","reason":"Remote host closed the connection","date":"2017-05-22T21:47:05.458Z","type":"quit"}
{"nick":"chicoxyzzy","reason":"Remote host closed the connection","date":"2017-05-22T21:58:37.169Z","type":"quit"}
{"nick":"chicoxyz_","date":"2017-05-22T22:00:42.525Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2017-05-22T22:38:48.579Z","type":"quit"}
{"nick":"chicoxyz_","reason":"Remote host closed the connection","date":"2017-05-22T22:41:42.260Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-05-22T23:07:52.326Z","type":"quit"}
