{"nick":"bradleymeck","date":"2017-08-16T00:13:40.614Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T00:34:35.755Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T00:35:15.616Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T00:35:21.888Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-16T00:52:23.139Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T00:52:42.656Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T00:53:20.886Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T00:54:30.520Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 240 seconds","date":"2017-08-16T00:58:35.480Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T01:02:06.407Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T01:17:45.199Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-08-16T01:37:10.269Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-16T01:56:35.555Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-16T02:16:55.518Z","type":"quit"}
{"nick":"wycats","message":"I basically know the issues but I am skeptical","date":"2017-08-16T02:23:08.696Z","type":"message"}
{"nick":"wycats","message":"Sorry for being cryptic on Twitter","date":"2017-08-16T02:23:15.968Z","type":"message"}
{"nick":"wycats","message":"I was back channelling with some ppl","date":"2017-08-16T02:23:23.743Z","type":"message"}
{"nick":"not-an-aardvark","date":"2017-08-16T03:01:34.633Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-08-16T04:07:19.831Z","type":"quit"}
{"nick":"caridy","date":"2017-08-16T04:07:51.440Z","type":"join"}
{"nick":"howdoi","date":"2017-08-16T04:34:10.642Z","type":"join"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-08-16T04:36:09.219Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 248 seconds","date":"2017-08-16T05:39:13.599Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-16T05:46:07.831Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-16T08:23:54.583Z","type":"join"}
{"nick":"caridy_","date":"2017-08-16T09:08:39.458Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2017-08-16T09:10:10.367Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-08-16T10:25:11.474Z","type":"quit"}
{"nick":"mylesborins","date":"2017-08-16T10:25:42.034Z","type":"join"}
{"nick":"abernix","date":"2017-08-16T10:37:06.701Z","type":"join"}
{"nick":"jmdyck","date":"2017-08-16T11:11:03.986Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-08-16T11:11:17.494Z","type":"quit"}
{"nick":"littledan","message":"I could imagine some ugly overloadings to make this sort of thing possible. For example, if a class decorator is a function, add that as a finisher, otherwise if it's an object with a \"decorator\" property, take that as the new-style decorator","date":"2017-08-16T11:28:00.770Z","type":"message"}
{"nick":"bradleymeck","date":"2017-08-16T12:14:32.871Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-16T13:26:25.358Z","type":"quit"}
{"nick":"d_run","reason":"Excess Flood","date":"2017-08-16T13:41:52.933Z","type":"quit"}
{"nick":"d_run","date":"2017-08-16T13:42:09.370Z","type":"join"}
{"nick":"bradleymeck","date":"2017-08-16T13:43:36.660Z","type":"join"}
{"nick":"AtumT","date":"2017-08-16T13:50:41.622Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-16T14:04:20.860Z","type":"join"}
{"nick":"bradleymeck","message":"are BOMs valid source text?","date":"2017-08-16T14:14:34.241Z","type":"message"}
{"nick":"bradleymeck","message":"nm found it","date":"2017-08-16T14:18:10.780Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T14:27:42.666Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T14:35:48.607Z","type":"join"}
{"nick":"wycats","message":"littledan: the key thing for me is that the kind of decorators they want are allowed to completely hide the class elements","date":"2017-08-16T14:46:20.983Z","type":"message"}
{"nick":"gskachkov","reason":"Read error: Connection reset by peer","date":"2017-08-16T14:46:21.496Z","type":"quit"}
{"nick":"wycats","message":"They don't want constructor replacement *and* assigning the statics and proto to it","date":"2017-08-16T14:46:40.384Z","type":"message"}
{"nick":"wycats","message":"Which is the thing that's the most crazy","date":"2017-08-16T14:46:54.204Z","type":"message"}
{"nick":"littledan","message":"what do they want to do, make an instance of the class and hold that as a private field?","date":"2017-08-16T14:46:54.362Z","type":"message"}
{"nick":"littledan","message":"do you have a link to an example?","date":"2017-08-16T14:47:11.811Z","type":"message"}
{"nick":"wycats","message":"They have a \"higher order\" pattern where they construct a new class that instantiates the inner with some kind of dependency","date":"2017-08-16T14:47:31.772Z","type":"message"}
{"nick":"wycats","message":"And then implements the component protocol to delegate to it","date":"2017-08-16T14:47:42.913Z","type":"message"}
{"nick":"wycats","message":"I can try to see if I can find the best example","date":"2017-08-16T14:47:51.289Z","type":"message"}
{"nick":"wycats","message":"Adam Rackis gave me some","date":"2017-08-16T14:47:55.801Z","type":"message"}
{"nick":"wycats","message":"They could in theory just use a function but ironically React people have come to really like decorator syntax","date":"2017-08-16T14:48:22.714Z","type":"message"}
{"nick":"wycats","message":"Mostly I feel like championing this because I feel bad that I didn't catch this consequence of the earlier change","date":"2017-08-16T14:48:46.812Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-08-16T15:08:12.007Z","type":"quit"}
{"nick":"gibson042","date":"2017-08-16T15:22:08.780Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T15:30:19.486Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2017-08-16T15:37:13.608Z","type":"quit"}
{"nick":"bradleymeck","reason":"Ping timeout: 260 seconds","date":"2017-08-16T15:39:07.621Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T15:40:42.720Z","type":"join"}
{"nick":"bradleymeck","date":"2017-08-16T15:41:57.311Z","type":"join"}
{"nick":"gskachkov","date":"2017-08-16T15:59:16.910Z","type":"join"}
{"nick":"Domenic","message":"bradleymeck: I assume they are whitespace? What's the answer?","date":"2017-08-16T16:01:53.679Z","type":"message"}
{"nick":"bradleymeck","message":"Domenic: they are whitespace but with HTML and node the story is more complex it seems","date":"2017-08-16T16:02:13.217Z","type":"message"}
{"nick":"bradleymeck","message":"and the darn shebang ghost comes to haunt me again as well","date":"2017-08-16T16:02:23.003Z","type":"message"}
{"nick":"Domenic","message":"Makes sense","date":"2017-08-16T16:02:33.329Z","type":"message"}
{"nick":"Domenic","message":"Yeah I mean for HTML depends on the input encoding","date":"2017-08-16T16:02:38.874Z","type":"message"}
{"nick":"Domenic","message":"If UTF-8 the BOM will be stripped I think but if you do windows-1252 then wheeee garbage characters at the beginning of your file","date":"2017-08-16T16:02:56.142Z","type":"message"}
{"nick":"bradleymeck","message":"stripping is observable in char indexes of stack traces so we might need to update things to state preprocessing concerns are in play","date":"2017-08-16T16:04:19.930Z","type":"message"}
{"nick":"Domenic","message":"Update what things?","date":"2017-08-16T16:04:32.250Z","type":"message"}
{"nick":"bradleymeck","message":"https://datatracker.ietf.org/submit/status/88872/","date":"2017-08-16T16:05:04.106Z","type":"message"}
{"nick":"bradleymeck","message":"annevk was stating this might be best addressed as scripting environment concerns and I am starting to lean towards that but Matthew A. Miller (@linuxwolf) might be wanting that as a separate thing","date":"2017-08-16T16:07:22.677Z","type":"message"}
{"nick":"Domenic","message":"I guess I don't understand why the RFC would care about stack trace char indices","date":"2017-08-16T16:07:54.364Z","type":"message"}
{"nick":"bradleymeck","message":"it doesn't really but it shows that the behaviors of the environments are observably changing things. so MIME charset parameter isn't the only thing in play. https://github.com/bmeck/I-D/issues/2#issuecomment-322794472 older RFC has invalid mechanics as well for how things are detected","date":"2017-08-16T16:10:22.456Z","type":"message"}
{"nick":"bradleymeck","message":"I think moving it to environment is a way to remove the bad mechanics and not cause people to have to standardize minor diffs between environments","date":"2017-08-16T16:11:23.492Z","type":"message"}
{"nick":"Mole[m]","date":"2017-08-16T16:17:02.390Z","type":"join"}
{"nick":"Mole[m]","reason":"\"User left\"","date":"2017-08-16T16:17:07.159Z","type":"part"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-16T16:18:06.848Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-16T16:21:25.188Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-16T16:30:34.518Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-16T16:34:02.451Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-16T16:41:51.196Z","type":"quit"}
{"nick":"annevk","message":"Domenic: no BOM always wins","date":"2017-08-16T16:43:24.804Z","type":"message"}
{"nick":"Domenic","message":"Ah right","date":"2017-08-16T16:43:32.063Z","type":"message"}
{"nick":"annevk","message":"Domenic: no garbage","date":"2017-08-16T16:43:32.413Z","type":"message"}
{"nick":"Domenic","message":"bradleymeck: oh, yeah, MIME charset is not very influential.","date":"2017-08-16T16:43:51.800Z","type":"message"}
{"nick":"Domenic","message":"There are like 5 ways to override that","date":"2017-08-16T16:43:57.166Z","type":"message"}
{"nick":"annevk","message":"No, just BOM","date":"2017-08-16T16:44:05.278Z","type":"message"}
{"nick":"Domenic","message":"charset=\"\"","date":"2017-08-16T16:44:11.639Z","type":"message"}
{"nick":"annevk","message":"Doesn't override MIME charset","date":"2017-08-16T16:44:19.234Z","type":"message"}
{"nick":"Domenic","message":"use as a worker -> always UTF-8","date":"2017-08-16T16:44:20.498Z","type":"message"}
{"nick":"annevk","message":"That's true","date":"2017-08-16T16:44:28.200Z","type":"message"}
{"nick":"gskachkov","date":"2017-08-16T16:44:28.598Z","type":"join"}
{"nick":"Domenic","message":"(and as a module, these days)","date":"2017-08-16T16:44:37.576Z","type":"message"}
{"nick":"annevk","message":"We should write a test to make sure that a UTF-16 BOM doesn't override that","date":"2017-08-16T16:44:53.918Z","type":"message"}
{"nick":"annevk","message":"That's true, the RFC would be wrong if it suggested you could use anything but UTF-8 for module scripts","date":"2017-08-16T16:45:16.744Z","type":"message"}
{"nick":"Domenic","message":"I think we have some","date":"2017-08-16T16:45:17.864Z","type":"message"}
{"nick":"annevk","message":"Whoever said an RFC would be simple was wrong","date":"2017-08-16T16:45:40.187Z","type":"message"}
{"nick":"annevk","message":"That attitude is why we keep having to fix RFCs","date":"2017-08-16T16:46:00.658Z","type":"message"}
{"nick":"Domenic","message":"that plus the fact that they're dead standards","date":"2017-08-16T16:46:17.360Z","type":"message"}
{"nick":"bradleymeck","message":"not really dead if I get resistance w/o updating them","date":"2017-08-16T16:46:54.236Z","type":"message"}
{"nick":"Domenic","message":"Didn't quite parse that sentence","date":"2017-08-16T16:47:08.097Z","type":"message"}
{"nick":"Domenic","message":"What I mean is that updating them requires this whole process of an entirely new RFC","date":"2017-08-16T16:47:21.485Z","type":"message"}
{"nick":"bradleymeck","message":"i mean that seems sane for their workflows","date":"2017-08-16T16:48:19.588Z","type":"message"}
{"nick":"bradleymeck","message":"if we move more stuff to environment specific we can avoid this a bit","date":"2017-08-16T16:48:29.265Z","type":"message"}
{"nick":"bradleymeck","message":"have no clue what embedded does w/ all this though","date":"2017-08-16T16:48:44.045Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: I think Node should copy HTML literally except for charset=\"\" and document inheritance, though it might be even better if Node just always did UTF-8","date":"2017-08-16T16:51:26.642Z","type":"message"}
{"nick":"bradleymeck","message":"annevk: i can double check but I think it is always UTF-8","date":"2017-08-16T16:52:19.430Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: if Node is interested in having compatibility to that extent I'm sure we could refactor things such that there would be a more neutral-looking algorithm that's not intertwined with <script> and Worker","date":"2017-08-16T16:52:22.042Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: okay, if that's the case I wouldn't change it (other than perhaps stripping the initial BOM if that's not done)","date":"2017-08-16T16:52:46.468Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: but that also argues that the charset parameter stuff is bullshit since we have environments that just want to ignore that","date":"2017-08-16T16:53:28.162Z","type":"message"}
{"nick":"bradleymeck","message":"always UTF-8 https://github.com/nodejs/node/blob/master/lib/module.js#L583  , always stripped https://github.com/nodejs/node/blob/master/lib/internal/module.js#L38","date":"2017-08-16T16:53:32.487Z","type":"message"}
{"nick":"annevk","message":"kudos to whoever made that happen","date":"2017-08-16T16:53:53.006Z","type":"message"}
{"nick":"annevk","message":"that's like the best possible way to deal with text formats","date":"2017-08-16T16:54:02.596Z","type":"message"}
{"nick":"bradleymeck","message":"node isn't working w/ MIME currently but some are interested in URL.createObjectURL which would introduce MIME","date":"2017-08-16T16:54:11.225Z","type":"message"}
{"nick":"annevk","message":"oh, that API is a mess","date":"2017-08-16T16:54:30.911Z","type":"message"}
{"nick":"bradleymeck","message":"annevk: does the charset parameter in MIME ever get used?","date":"2017-08-16T16:54:39.233Z","type":"message"}
{"nick":"bradleymeck","message":"not in script tag","date":"2017-08-16T16:54:43.976Z","type":"message"}
{"nick":"bradleymeck","message":"if someone wants a diff API so we can make it completely ignored in MIME update that seems fine","date":"2017-08-16T16:55:02.712Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: for JavaScript MIME types it gets used by (classic) <script src>","date":"2017-08-16T16:55:31.982Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: I suspect though that <script src> also would take it from text/html;charset=windows-1252","date":"2017-08-16T16:55:56.229Z","type":"message"}
{"nick":"bradleymeck","message":"but not for `type=\"text/javascript; charset...` when I was testing?","date":"2017-08-16T16:55:58.752Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: euh, that's not a MIME type","date":"2017-08-16T16:56:09.083Z","type":"message"}
{"nick":"bradleymeck","message":"reading bad docs on my side then?","date":"2017-08-16T16:56:22.072Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: and yeah, that would never work","date":"2017-08-16T16:56:23.397Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: I guess","date":"2017-08-16T16:56:31.052Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: <script type=> only accepts a JavaScript MIME type without any parameters and it's only used to establish it's classic JavaScript","date":"2017-08-16T16:57:10.571Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: (as opposed to module JavaScript)","date":"2017-08-16T16:57:20.484Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: you need Content-Type: ... on the resource to test charset parameter handling","date":"2017-08-16T16:57:37.192Z","type":"message"}
{"nick":"bradleymeck","message":"annevk: any recommendations on our looking into new File / URL.createObjectURL since that does have MIME info","date":"2017-08-16T16:58:00.322Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: not sure I have enough context to give advice","date":"2017-08-16T16:58:51.481Z","type":"message"}
{"nick":"annevk","message":"bradleymeck: also don't really have the time to dive into that now, work is over 😃","date":"2017-08-16T16:59:11.473Z","type":"message"}
{"nick":"bradleymeck","message":"kk","date":"2017-08-16T16:59:15.028Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-16T17:01:30.154Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-16T17:04:25.133Z","type":"quit"}
{"nick":"IgnoredAmbience","reason":"Ping timeout: 255 seconds","date":"2017-08-16T17:10:16.980Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-16T17:11:49.587Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-16T17:22:50.577Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T17:26:54.053Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-16T17:30:09.452Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-16T17:30:59.998Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T17:31:01.062Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T17:36:09.382Z","type":"join"}
{"nick":"gskachkov","date":"2017-08-16T17:49:29.779Z","type":"join"}
{"nick":"gibson042","date":"2017-08-16T18:29:32.340Z","type":"join"}
{"nick":"gibson042","reason":"Client Quit","date":"2017-08-16T18:29:34.595Z","type":"quit"}
{"nick":"gibson042","date":"2017-08-16T18:30:19.707Z","type":"join"}
{"nick":"gibson042","reason":"Client Quit","date":"2017-08-16T18:33:51.508Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-16T19:10:21.163Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-16T19:29:25.643Z","type":"join"}
{"nick":"ephemera_","reason":"Quit: No Ping reply in 180 seconds.","date":"2017-08-16T20:16:34.415Z","type":"quit"}
{"nick":"ephemera_","date":"2017-08-16T20:18:04.692Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit:  ","date":"2017-08-16T20:31:21.524Z","type":"quit"}
{"nick":"Bakkot","message":"thing I just learned: if you `import()` a module which exports a function named `then`, the promise you get from `import()` resolves to the result of that function, rather than the module namespace object","date":"2017-08-16T21:07:44.782Z","type":"message"}
{"nick":"TabAtkins","message":"Oh god.","date":"2017-08-16T21:09:05.805Z","type":"message"}
{"nick":"TabAtkins","message":"Yeah, having an opt-out for the unboxing (a \"I'm not a Promise, I promise!\" flag) would be a useful escape hatch.","date":"2017-08-16T21:09:23.006Z","type":"message"}
{"nick":"Bakkot","message":"Yeah, I was thinking about a well-known symbol which would prevent flattening.","date":"2017-08-16T21:11:02.023Z","type":"message"}
{"nick":"Bakkot","message":"(Also, I very much want to avoid the flattening behavior in all of my code, because I want promises to be monadic, so I'd love such a symbol anyway.)","date":"2017-08-16T21:11:27.098Z","type":"message"}
{"nick":"Bakkot","message":"It wouldn't necessary prevent `await`ing, just the auto-flattening.","date":"2017-08-16T21:11:43.511Z","type":"message"}
{"nick":"bterlson","message":"Wasn't there some monadic operator proposed for this","date":"2017-08-16T21:11:46.658Z","type":"message"}
{"nick":"bterlson","message":"at one point","date":"2017-08-16T21:11:49.766Z","type":"message"}
{"nick":"bterlson","message":".chain() or something?","date":"2017-08-16T21:11:57.760Z","type":"message"}
{"nick":"TabAtkins","message":"bterlson: Yeah, but that doesn't help all the places in the platform that uses Promises implicitly.","date":"2017-08-16T21:12:08.908Z","type":"message"}
{"nick":"bterlson","message":"agree","date":"2017-08-16T21:12:17.492Z","type":"message"}
{"nick":"TabAtkins","message":"But yeah, a .chain() for the proper monadic operation would be A+.  I should put together a proper proposal for that stuff, culled from the JS Fantasyland stuff.","date":"2017-08-16T21:12:53.898Z","type":"message"}
{"nick":"Bakkot","message":"(The well-known symbol I refer to above would presumably be defined on all module namespace objects, so this is probably something we should resolve sooner rather than later.)","date":"2017-08-16T21:13:27.991Z","type":"message"}
{"nick":"bterlson","message":"TabAtkins: I know a certain googler who would love you for doing that work :)","date":"2017-08-16T21:14:46.825Z","type":"message"}
{"nick":"TabAtkins","message":"Is that Googler me?","date":"2017-08-16T21:15:06.420Z","type":"message"}
{"nick":"TabAtkins","message":"Bakkot: Write up a proposal! Well-known symbols are free! Yay!","date":"2017-08-16T21:15:18.462Z","type":"message"}
{"nick":"bterlson","message":"IIRC Andreas argued very very strongly for .chain over .then","date":"2017-08-16T21:15:28.624Z","type":"message"}
{"nick":"TabAtkins","message":"Ah, they might have. My memory of that time is fuzzy; I was also a strong proponent for monadic promises.","date":"2017-08-16T21:15:51.664Z","type":"message"}
{"nick":"TabAtkins","message":"And as a compromise, a .then() that just unwrapped *one* level (acting as a .map() or .chain() depending on what you returned).","date":"2017-08-16T21:16:11.942Z","type":"message"}
{"nick":"TabAtkins","message":"I lost both. :(","date":"2017-08-16T21:16:15.372Z","type":"message"}
{"nick":"littledan","message":"I dunno, I wouldn't've minded if we went for chain instead of then, but having both seems weird","date":"2017-08-16T21:28:08.742Z","type":"message"}
{"nick":"littledan","message":"if await is based on then, and that's that, then that's that","date":"2017-08-16T21:28:35.740Z","type":"message"}
{"nick":"ljharb","message":"indeed","date":"2017-08-16T21:29:05.700Z","type":"message"}
{"nick":"littledan","message":"also, it'd be a bit invasive to spec chain at this point, given how the logic for chaining is in the resolving function, rather than in .then() itself (where I would've expected it)","date":"2017-08-16T21:29:25.066Z","type":"message"}
{"nick":"bterlson","message":"even if that's that, if that that is not that which we wanted that could be changed?","date":"2017-08-16T21:29:44.307Z","type":"message"}
{"nick":"dilijev","message":"Does anybody have a build of jsc on Windows newer than 2017-02?","date":"2017-08-16T21:50:58.343Z","type":"message"}
{"nick":"bterlson","message":"any apple engineers in here?","date":"2017-08-16T22:02:49.662Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T22:06:52.350Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T22:09:26.253Z","type":"join"}
{"nick":"Bakkot","message":"I don't think I have the bandwidth to write up a proposal for a symbol to opt out of promise flattening before the next meeting (and also wasn't planning to attend it); is anyone else willing to volunteer? :)","date":"2017-08-16T22:11:11.605Z","type":"message"}
{"nick":"Bakkot","message":"this is something which I think must be handled before import() gets to stage 4.","date":"2017-08-16T22:11:39.390Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T22:22:39.382Z","type":"quit"}
{"nick":"caiolima","message":"hey guys, is there any max number of arguments that a function should handle in the spec?","date":"2017-08-16T22:32:53.375Z","type":"message"}
{"nick":"ljharb","message":"i don't know if it's in the spec, but isn't it like 2^32?","date":"2017-08-16T22:39:02.856Z","type":"message"}
{"nick":"IgnoredAmbience","date":"2017-08-16T22:46:22.616Z","type":"join"}
{"nick":"dilijev","message":"the problem with that of course being you need enough memory to store the values of all the arguments, which assuming a minimum of 4 bytes per argument, 2^32 arguments would take up 16 GB","date":"2017-08-16T23:22:34.898Z","type":"message"}
{"nick":"dilijev","message":"most arguments would be pointers, which on a 64 bit system is 8 bytes each, leading to 32 GB. At that point we're reaching the end of even 99%th percentile consumer hardware","date":"2017-08-16T23:24:00.646Z","type":"message"}
{"nick":"Fishrock123","date":"2017-08-16T23:24:11.366Z","type":"join"}
{"nick":"caiolima","message":"I couldn't find anything in the spec. It is just a question.","date":"2017-08-16T23:26:58.809Z","type":"message"}
{"nick":"caiolima","message":"One possible problem is that we can call f.apply(this, {length, UINT32_MAX})","date":"2017-08-16T23:27:49.224Z","type":"message"}
{"nick":"Fishrock123","reason":"Ping timeout: 240 seconds","date":"2017-08-16T23:28:21.270Z","type":"quit"}
{"nick":"caiolima","message":"This sample doesn't take 16/32GB of memory, but I'm not sure what should be the behavior according specc","date":"2017-08-16T23:28:37.647Z","type":"message"}
{"nick":"caiolima","message":"This test in ChakraCore for example: https://github.com/Microsoft/ChakraCore/blob/master/test/Function/apply3.js#L82","date":"2017-08-16T23:29:12.577Z","type":"message"}
{"nick":"caiolima","message":"the test spect that an Range Error is thrown https://github.com/Microsoft/ChakraCore/blob/master/test/Function/apply3.baseline#L22","date":"2017-08-16T23:30:07.086Z","type":"message"}
{"nick":"AtumT_","date":"2017-08-16T23:32:09.000Z","type":"join"}
{"nick":"bterlson","message":"caiolima: I don't think there is any spec mandated maximum. What is outOfRange in that baseline, anyway?","date":"2017-08-16T23:33:00.138Z","type":"message"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2017-08-16T23:33:53.901Z","type":"quit"}
{"nick":"bterlson","message":"I think this is another case of ECMAScript mandating implementations have infinite computational resources at their disposal","date":"2017-08-16T23:33:58.642Z","type":"message"}
{"nick":"caiolima","message":"bterlson: in that case it is the out of  \"Exception: RangeError : Argument list too large to apply\"","date":"2017-08-16T23:34:08.877Z","type":"message"}
{"nick":"caiolima","message":"bterlson: in terms of code it is the https://github.com/Microsoft/ChakraCore/blob/master/test/Function/apply3.js#L82","date":"2017-08-16T23:34:54.768Z","type":"message"}
{"nick":"Fishrock123","date":"2017-08-16T23:35:01.396Z","type":"join"}
{"nick":"bterlson","message":"Ahh I see","date":"2017-08-16T23:35:04.639Z","type":"message"}
{"nick":"bterlson","message":"I think that's just an implementation-defined limit","date":"2017-08-16T23:35:10.763Z","type":"message"}
{"nick":"caiolima","message":"cool","date":"2017-08-16T23:35:17.396Z","type":"message"}
{"nick":"bterlson","message":"my recollection is that v8 allows substantially fewer arguments","date":"2017-08-16T23:35:23.385Z","type":"message"}
{"nick":"bterlson","message":"2^16 or so?","date":"2017-08-16T23:35:26.893Z","type":"message"}
{"nick":"caiolima","message":"I have this question because I'm fixing this problem into JSC","date":"2017-08-16T23:35:32.507Z","type":"message"}
{"nick":"TabAtkins","message":"When's next meeting?","date":"2017-08-16T23:36:11.185Z","type":"message"}
{"nick":"caiolima","message":"in JSC it is 0x10000","date":"2017-08-16T23:36:18.725Z","type":"message"}
{"nick":"bterlson","message":"TabAtkins: September in Boston. Bring your swimsuit!","date":"2017-08-16T23:36:32.212Z","type":"message"}
{"nick":"caiolima","message":"It's just 2^5","date":"2017-08-16T23:36:43.592Z","type":"message"}
{"nick":"dilijev","message":"Right, I guess the question is, what is the max value for number of arguments required? In our case, it's implementation-defined. We basically made the assumption that memory would never be sufficient for that number of args to be meaningful, and we handle many things like this as an integer with max value (2^31 - 1)","date":"2017-08-16T23:36:45.691Z","type":"message"}
{"nick":"dilijev","message":"which allows us to do some math operations on those numbers in 32 bits without worrying about overflow","date":"2017-08-16T23:37:06.032Z","type":"message"}
{"nick":"bterlson","message":"caiolima: are people finding issues with that low of a limit?","date":"2017-08-16T23:37:09.879Z","type":"message"}
{"nick":"TabAtkins","message":"I'm not gonna attend the meeting; I'm done with travel this year. But I can at least get some stuff together; I missed the last one for my \"integer-valued-property get/set interception\" proposal.","date":"2017-08-16T23:37:24.892Z","type":"message"}
{"nick":"caiolima","message":"bterlson: No, it's just to check if My fix will be spec compliant. The problem I've found is C++ type cast related","date":"2017-08-16T23:37:55.116Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-16T23:38:30.013Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-16T23:39:20.260Z","type":"join"}
{"nick":"bterlson","message":"caiolima: Roger that, spec says you are clear to maintain course at 0x10000, over.","date":"2017-08-16T23:39:54.982Z","type":"message"}
{"nick":"caiolima","message":"cool","date":"2017-08-16T23:40:30.183Z","type":"message"}
{"nick":"caiolima","message":"thx!","date":"2017-08-16T23:40:33.606Z","type":"message"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2017-08-16T23:48:49.066Z","type":"quit"}
{"nick":"jmdyck","message":"what's the current tc39 thinking re incorporating annex B into the spec body?","date":"2017-08-16T23:50:36.925Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: split, last I polled","date":"2017-08-16T23:51:21.495Z","type":"message"}
{"nick":"jmdyck","message":"tx","date":"2017-08-16T23:51:38.754Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: consensus is 'someone' should add tooling so people can see either as a preference","date":"2017-08-16T23:51:49.449Z","type":"message"}
{"nick":"jmdyck","message":"ah","date":"2017-08-16T23:51:57.690Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: my thinking is that explicit diff clauses (I think Michael Ficarra had ideas here) would make tooling at least possible.","date":"2017-08-16T23:53:18.774Z","type":"message"}
{"nick":"jmdyck","message":"it might not be difficult to suppress annexb mtl from the body at option, but to move it all to an annex with the appropriate surrounding verbiage, that'd be tough","date":"2017-08-16T23:53:46.447Z","type":"message"}
