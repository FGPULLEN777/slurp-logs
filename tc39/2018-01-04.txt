{"nick":"jwalden","reason":"Ping timeout: 240 seconds","date":"2018-01-04T00:19:27.837Z","type":"quit"}
{"nick":"jwalden","date":"2018-01-04T00:19:56.341Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-01-04T00:28:53.170Z","type":"quit"}
{"nick":"bterlson","message":"https://sites.google.com/a/chromium.org/dev/Home/chromium-security/ssca chrome disabling SAB :(","date":"2018-01-04T00:40:11.865Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-04T00:56:42.193Z","type":"quit"}
{"nick":"aklein","message":"bterlson: Firefox too: https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/","date":"2018-01-04T00:57:58.763Z","type":"message"}
{"nick":"cloudshu","message":"unsurprising","date":"2018-01-04T01:05:29.350Z","type":"message"}
{"nick":"cloudshu","message":"i do share the :( though","date":"2018-01-04T01:06:02.013Z","type":"message"}
{"nick":"ljharb","message":"i can't tell from either message if they're disabling SAB because it's causing the problem, or because they're just scared it might be","date":"2018-01-04T01:07:13.314Z","type":"message"}
{"nick":"cloudshu","message":"from luke's wording it seems a POC exists","date":"2018-01-04T01:08:10.593Z","type":"message"}
{"nick":"cloudshu","message":"JS cache timing sidechannel attacks already exist afaik","date":"2018-01-04T01:08:37.178Z","type":"message"}
{"nick":"ljharb","message":"so it's just another way to do something that's already possible","date":"2018-01-04T01:09:14.823Z","type":"message"}
{"nick":"ljharb","message":"?","date":"2018-01-04T01:09:15.761Z","type":"message"}
{"nick":"cloudshu","message":"but spectre made weaponizing that a much realer thing","date":"2018-01-04T01:09:22.061Z","type":"message"}
{"nick":"cloudshu","message":"well, side channel attacks have existed","date":"2018-01-04T01:09:29.800Z","type":"message"}
{"nick":"cloudshu","message":"but spectre and meltdown demonstrate new ways of using it that are immediately super scary","date":"2018-01-04T01:10:08.247Z","type":"message"}
{"nick":"cloudshu","message":"e.g. reading kernel memory, escaping sandboxes","date":"2018-01-04T01:10:22.278Z","type":"message"}
{"nick":"cloudshu","message":"whereas before, i guess, they existed but people were like maybe it's fine","date":"2018-01-04T01:10:40.602Z","type":"message"}
{"nick":"cloudshu","message":"that's how i interpret luke's \"instead of just hiding the leak by disabling timers\"","date":"2018-01-04T01:11:49.290Z","type":"message"}
{"nick":"cloudshu","message":"aklein: https://twitter.com/filpizlo/status/948721275085635584","date":"2018-01-04T01:20:18.892Z","type":"message"}
{"nick":"aklein","message":"cloudshu: ha","date":"2018-01-04T01:21:23.516Z","type":"message"}
{"nick":"cloudshu","message":"i can totally picture him saying it too","date":"2018-01-04T01:21:36.288Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-01-04T01:34:12.878Z","type":"quit"}
{"nick":"jwalden","date":"2018-01-04T02:34:09.463Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 265 seconds","date":"2018-01-04T04:43:52.499Z","type":"quit"}
{"nick":"bpayton","date":"2018-01-04T04:45:27.256Z","type":"join"}
{"nick":"jwalden","date":"2018-01-04T04:45:34.154Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-01-04T05:08:50.073Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-01-04T05:16:52.901Z","type":"quit"}
{"nick":"bpayton","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-01-04T06:41:42.264Z","type":"quit"}
{"nick":"bpayton","date":"2018-01-04T06:43:13.476Z","type":"join"}
{"nick":"bpayton","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-01-04T07:55:23.221Z","type":"quit"}
{"nick":"serbang","message":"what does `The resolution of performance.now() will be reduced to 20µs.` mean?","date":"2018-01-04T10:53:33.500Z","type":"message"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-01-04T11:25:09.121Z","type":"quit"}
{"nick":"mylesborins","date":"2018-01-04T11:25:39.740Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-01-04T11:29:57.849Z","type":"quit"}
{"nick":"littledan","message":":(","date":"2018-01-04T12:07:27.761Z","type":"message"}
{"nick":"littledan","message":"A few people have been asking me about it, so I've been thinking more about lexically scoped friends and private fields in object literals. I wrote this gist; what do you think? https://gist.github.com/littledan/d3030534cf96075d47228955828f932e","date":"2018-01-04T12:08:26.936Z","type":"message"}
{"nick":"littledan","message":"in particular, there are two alternatives: keep the current private field syntax, and add two contextual keywords for defining and using lexically scoped private names that aren't from the class, or add one keyword and require it in all new places where a private name is created, including in private class field and method declarations","date":"2018-01-04T12:09:19.642Z","type":"message"}
{"nick":"littledan","message":"the two-keyword variant is compatible with the current Stage 3 proposal, and might make the common case more terse, but the one-keyword variant could be thought to have a simpler mental model and make use with object literals more terse","date":"2018-01-04T12:10:49.138Z","type":"message"}
{"nick":"bradleymeck","date":"2018-01-04T12:34:18.518Z","type":"join"}
{"nick":"jmdyck","date":"2018-01-04T12:53:02.087Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-01-04T13:16:26.192Z","type":"quit"}
{"nick":"H|f|ish","new_nick":"DDoB2","date":"2018-01-04T13:38:29.270Z","type":"nick"}
{"nick":"DDoB2","new_nick":"H|f|sh","date":"2018-01-04T13:38:44.713Z","type":"nick"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-04T13:51:45.719Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-01-04T14:21:21.145Z","type":"join"}
{"nick":"littledan","message":"there's a third possibility, to give objects the default behavior of \"it's defined outside\" and classes the default behavior of \"it's defined here\", with these two keywords to control choosing the other one","date":"2018-01-04T14:49:01.899Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-04T14:54:01.987Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-01-04T15:11:33.992Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2018-01-04T15:12:15.338Z","type":"quit"}
{"nick":"littledan","message":"never mind about the idea for going back to `private #x`; yehuda's original arguments that `@protected private #x` and `@reader private #x` are weird still apply","date":"2018-01-04T16:00:25.658Z","type":"message"}
{"nick":"AtumT","date":"2018-01-04T16:21:18.928Z","type":"join"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-01-04T16:59:35.214Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-01-04T17:30:20.016Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-01-04T17:57:56.816Z","type":"quit"}
{"nick":"cloudshu","message":"serbang: it means performance.now() was made into a more coarse-grained timer","date":"2018-01-04T19:29:07.724Z","type":"message"}
{"nick":"jwalden","date":"2018-01-04T20:10:16.456Z","type":"join"}
{"nick":"bradleymeck","date":"2018-01-04T20:55:28.784Z","type":"join"}
{"nick":"Jayflux","date":"2018-01-04T21:31:19.088Z","type":"join"}
{"nick":"not-an-aardvark","date":"2018-01-04T21:32:04.990Z","type":"join"}
{"nick":"Bakkot","message":"littledan: this is something I wouldn't want to worry too much about for a couple of years after private state and decorators land, to get a better feel for what the actual JS usecases are. best not to rush. with that said: I like the 'introduce new keywords for using an external definition' option; I'd personally probably go with `private` for declaration and `outer` for use.","date":"2018-01-04T21:48:02.038Z","type":"message"}
{"nick":"littledan","message":"Bakkot: I like those names","date":"2018-01-04T21:59:49.138Z","type":"message"}
{"nick":"littledan","message":"Do you think it'd be premature to introduce these at Stage 0, just so the committee can have them in mind as reviewing the private fields proposals?","date":"2018-01-04T22:00:14.525Z","type":"message"}
{"nick":"littledan","message":"Another decision-point is whether we would want to make `outer` implicit in object literals","date":"2018-01-04T22:00:57.833Z","type":"message"}
{"nick":"Bakkot","message":"Mm... if the point is *just* so the committee can have them in mind when reviewing those proposals, I would just mention them as possible future work as part of those proposals.","date":"2018-01-04T22:01:27.607Z","type":"message"}
{"nick":"Bakkot","message":"Right; I would not want to, since we definitely don't want to for classes.","date":"2018-01-04T22:02:23.053Z","type":"message"}
{"nick":"littledan","message":"it'd lead to a place where, when seeing a LHS bare #x, you have to think \"is this a class or object\" to understand whether it's a declaration or not","date":"2018-01-04T22:03:01.163Z","type":"message"}
{"nick":"Bakkot","message":"right.","date":"2018-01-04T22:03:10.133Z","type":"message"}
{"nick":"littledan","message":"but, maybe that'd be justified by overall terseness, I dunno","date":"2018-01-04T22:03:17.772Z","type":"message"}
{"nick":"Bakkot","message":"(and because `return { #x: 0, get x(){ return this.#x++; } }` is a reasonable line of code not requiring any outer declaration, so it's not the case that you'd *always* want object literals to refer to an outer name.)","date":"2018-01-04T22:03:28.079Z","type":"message"}
{"nick":"littledan","message":"we could permit that too","date":"2018-01-04T22:03:44.595Z","type":"message"}
{"nick":"littledan","message":"generally, there's a hazard where you accidentally shadow outer private names with inner ones, since it's so easy to. I think linters would be good to enforce, no redeclaring a private name in a file, for that reason","date":"2018-01-04T22:04:20.932Z","type":"message"}
{"nick":"Bakkot","message":"I would be deeply uncomfortable if you'd be required to look outside the current context to determine if `#x: 0` is a declaration or reference","date":"2018-01-04T22:04:21.503Z","type":"message"}
{"nick":"littledan","message":"s/redeclaring/shadowing/","date":"2018-01-04T22:04:29.126Z","type":"message"}
{"nick":"littledan","message":"Bakkot: Well, it'd be #x: 0 vs #x = 0, but that's not a very clear indicator","date":"2018-01-04T22:08:15.676Z","type":"message"}
{"nick":"Bakkot","message":"er","date":"2018-01-04T22:08:33.702Z","type":"message"}
{"nick":"littledan","message":"or, #x; vs #x,","date":"2018-01-04T22:08:39.433Z","type":"message"}
{"nick":"Bakkot","message":"I'm not talking about objects vs classes","date":"2018-01-04T22:09:47.492Z","type":"message"}
{"nick":"Bakkot","message":"I am talking about `outer` being implicit in object literals.","date":"2018-01-04T22:10:01.225Z","type":"message"}
{"nick":"Bakkot","message":"I would not want it to be, since I want to be able to write `return { #x: 0, get x(){ return this.#x++; } }` and have that be a declaration, always, regardless of whether there is a `private #x` somewhere in scope.","date":"2018-01-04T22:10:42.928Z","type":"message"}
{"nick":"littledan","message":"yes, I definitely wasn't suggesting that the definition-ness depends on what's defined in an outer scope","date":"2018-01-04T22:13:57.406Z","type":"message"}
{"nick":"littledan","message":"I was just suggesting that object literals would have no way to create a new private name declaration","date":"2018-01-04T22:14:09.780Z","type":"message"}
{"nick":"littledan","message":"anyway, you'd want to do some more work to thread this through import and export private names in the #foo namespace, and also create a new package private concept, to really make this all hit home","date":"2018-01-04T22:14:42.738Z","type":"message"}
{"nick":"littledan","message":"which would be a lot","date":"2018-01-04T22:15:05.528Z","type":"message"}
{"nick":"Bakkot","message":"Ah. And yeah, I'm saying I'd prefer that not be the case, since it seems to me there are plenty of places I might want them to, just as I might want that for classes.","date":"2018-01-04T22:15:18.121Z","type":"message"}
{"nick":"Bakkot","message":"And for symmetry.","date":"2018-01-04T22:15:34.603Z","type":"message"}
{"nick":"Bakkot","message":"Aaaaanway, yes, you're right that this is speculating way far down a path to a feature which would need a great deal more exploration before we got to that sort of decision.","date":"2018-01-04T22:16:05.343Z","type":"message"}
{"nick":"Bakkot","message":"I don't think the committee would accept anything which required changes to the current private field syntax or semantics for classes, so I don't think it needs to be explored that fully before class fields go forward.","date":"2018-01-04T22:17:31.635Z","type":"message"}
{"nick":"littledan","message":"OK. The complexity here and lack of people clamoring for private fields in object literals was why I was working more on the decorator integration than this path","date":"2018-01-04T22:18:10.022Z","type":"message"}
{"nick":"Bakkot","message":":thumbsup:","date":"2018-01-04T22:18:24.088Z","type":"message"}
{"nick":"littledan","message":"I mean, part of the reason for doing this investigation is to make sure that this proposal isn't cutting off future paths for private fields in object literals. Anyway, if this syntax (the first option) looks good to you and a few other people, mission accomplished","date":"2018-01-04T22:18:52.891Z","type":"message"}
{"nick":"Bakkot","message":"IMO, private fields for classes are a much bigger and more important feature than private fields for objects, and I think we've explored the syntactic space for private fields for classes pretty thoroughly and found the best point we're likely to get; I would not want to compromise that for the sake of private fields in object literals. But it's nice that it seems likely not to come up!","date":"2018-01-04T22:22:24.020Z","type":"message"}
{"nick":"jwalden","reason":"Ping timeout: 265 seconds","date":"2018-01-04T22:45:34.477Z","type":"quit"}
{"nick":"jwalden","date":"2018-01-04T22:51:28.084Z","type":"join"}
{"nick":"littledan","message":"Bakkot: I'm wondering what you think of private static methods inheriting the method brand by copying the methods from the superclass","date":"2018-01-04T23:01:46.144Z","type":"message"}
{"nick":"littledan","message":"is that too ad-hoc? should it be a prototype chain walk (which is what I was imagining for your fields proposal)","date":"2018-01-04T23:02:12.676Z","type":"message"}
{"nick":"Bakkot","message":"Is that not the semantics we discussed yesterday?","date":"2018-01-04T23:02:49.848Z","type":"message"}
{"nick":"littledan","message":"which one?","date":"2018-01-04T23:03:03.364Z","type":"message"}
{"nick":"Bakkot","message":"er","date":"2018-01-04T23:03:05.353Z","type":"message"}
{"nick":"littledan","message":"a \"hazard\" case is if you have a class hierarchy, A > B > C, and you reparent B to D before executing the class declaration of C. Then, C will have A's private static methods, but C instances will have D's instance static methods","date":"2018-01-04T23:03:30.048Z","type":"message"}
{"nick":"Bakkot","message":"the one described by the readme in master as of a few yours ago, I think","date":"2018-01-04T23:03:34.297Z","type":"message"}
{"nick":"littledan","message":"s/instance static/instance/","date":"2018-01-04T23:03:37.941Z","type":"message"}
{"nick":"Bakkot","message":"oh, if you're just talking about reparenting: i definitely think brands and methods should be installed when the class is defined using the class in the `extends` clause and then never mutated.","date":"2018-01-04T23:04:18.218Z","type":"message"}
{"nick":"littledan","message":"an alternative semantic would be, when executing the class declaration of C, walk the prototype chain of B until you get to null, copying the method *declarations* that you see along the way","date":"2018-01-04T23:04:22.699Z","type":"message"}
{"nick":"Bakkot","message":"reparenting should not affect that.","date":"2018-01-04T23:04:24.435Z","type":"message"}
{"nick":"littledan","message":"well, there's multiple times for reparenting. I'm not talking about reparenting after the class declaration executes--totally with you on that","date":"2018-01-04T23:04:43.571Z","type":"message"}
{"nick":"littledan","message":"I'm talking about re-grandparenting before the class declaration executes","date":"2018-01-04T23:04:55.515Z","type":"message"}
{"nick":"littledan","message":"the semantics of copying the immutable/accessor *fields* of the parent class would not take re-grandparent that occurs before the class declaration executes into account","date":"2018-01-04T23:05:26.953Z","type":"message"}
{"nick":"littledan","message":"the other possibility would be to do a proto chain walk, to get at the *declarations* that are \"live\" at the time that the class declaration executes","date":"2018-01-04T23:05:58.107Z","type":"message"}
{"nick":"Bakkot","message":"Ah, right.","date":"2018-01-04T23:07:10.233Z","type":"message"}
{"nick":"Bakkot","message":"Ehhh - I am in favor of the simple thing, which is to use the methods that are present on the superclass when the subclass is defined, even if those methods don't make sense given the superclass's current heritage.","date":"2018-01-04T23:08:01.491Z","type":"message"}
{"nick":"littledan","message":"https://www.irccloud.com/pastebin/03Oq1hAh/","date":"2018-01-04T23:08:05.669Z","type":"message"}
{"nick":"littledan","message":"good, I like that variant too","date":"2018-01-04T23:08:38.682Z","type":"message"}
{"nick":"littledan","message":"here, we'd be saying, no TypeError","date":"2018-01-04T23:08:44.759Z","type":"message"}
{"nick":"Bakkot","message":"Right.","date":"2018-01-04T23:09:07.086Z","type":"message"}
{"nick":"littledan","message":"and, for completeness, if we have `class D { static #baz() { } static baz() { this.#baz() } }; D.baz.call(C)`, that would be a TypeError","date":"2018-01-04T23:09:27.546Z","type":"message"}
{"nick":"Bakkot","message":"Yup.","date":"2018-01-04T23:09:42.976Z","type":"message"}
{"nick":"ljharb","message":"imo it's totally fine if reparenting makes things confusing; reparenting is confusing.","date":"2018-01-04T23:09:47.891Z","type":"message"}
{"nick":"Bakkot","message":"Also yup.","date":"2018-01-04T23:09:54.656Z","type":"message"}
{"nick":"Bakkot","message":"Especially in the presence of private fields.","date":"2018-01-04T23:10:06.797Z","type":"message"}
{"nick":"littledan","message":"OTOH private instance fields ,by design, *do* handle reparenting decently","date":"2018-01-04T23:10:52.091Z","type":"message"}
{"nick":"littledan","message":"this was one of the things I didn't like about the previous private fields design, where reparenting and super return didn't work","date":"2018-01-04T23:11:26.188Z","type":"message"}
{"nick":"littledan","message":"I think this stuff is more important for instances, where super return is actually a thing that's used by design (e.g., in custom elements)","date":"2018-01-04T23:11:46.856Z","type":"message"}
{"nick":"Bakkot","message":"I actually think this *is* decent. It has a very simple explanation, which is that private methods are copied to a class from its parent when it is defined, and are thereafter immutable.","date":"2018-01-04T23:12:17.438Z","type":"message"}
{"nick":"littledan","message":"wait, that's not our current private methods semantics","date":"2018-01-04T23:13:26.745Z","type":"message"}
{"nick":"Bakkot","message":"sorry, private static methods","date":"2018-01-04T23:13:34.087Z","type":"message"}
{"nick":"littledan","message":"private instance methods also follow any reparenting","date":"2018-01-04T23:13:34.796Z","type":"message"}
{"nick":"littledan","message":"which, again, is important for custom elements","date":"2018-01-04T23:13:43.454Z","type":"message"}
{"nick":"Bakkot","message":"right, on board with all that, slip of the keyboard.","date":"2018-01-04T23:13:56.478Z","type":"message"}
{"nick":"Bakkot","message":"Instance fields are pretty different, in that the \"reparenting\" in question is not of the objects in question but of their constructors.","date":"2018-01-04T23:13:59.568Z","type":"message"}
{"nick":"Bakkot","message":"If you change the prototype of an extant instance with private fields, weird things might well happen there to.","date":"2018-01-04T23:14:24.985Z","type":"message"}
{"nick":"Bakkot","message":"*too.","date":"2018-01-04T23:14:27.075Z","type":"message"}
{"nick":"littledan","message":"yep","date":"2018-01-04T23:15:22.719Z","type":"message"}
{"nick":"littledan","message":"OK, another obscure corner: I was thinking of phrasing the spec as, all non-writable and accessor private fields of the superclass constructor are copied to the subclass constructor","date":"2018-01-04T23:16:01.710Z","type":"message"}
{"nick":"littledan","message":"this means, for example, if you make a @nonwritable decorator for an instance field, it'll get copied","date":"2018-01-04T23:16:19.806Z","type":"message"}
{"nick":"ljharb","message":"accessors can be mutators too tho, no?","date":"2018-01-04T23:16:23.956Z","type":"message"}
{"nick":"littledan","message":"no, accessors are always non-configurable (everything in private-land is non-configurable)","date":"2018-01-04T23:16:44.743Z","type":"message"}
{"nick":"littledan","message":"an alternative would be to add additional tracking for which fields originated as methods and which as fields, and copy just the method ones","date":"2018-01-04T23:17:08.571Z","type":"message"}
{"nick":"Bakkot","message":"ehm... I would prefer the spec be written in the way which makes the most sense for this feature on its own, and the decorator spec be applied as a patch on top of it.","date":"2018-01-04T23:17:21.306Z","type":"message"}
{"nick":"littledan","message":"this is unobservable until we add decorators, but I sort of want to phrase it the right way first","date":"2018-01-04T23:17:25.558Z","type":"message"}
{"nick":"littledan","message":"the private methods spec was always written so that the decorator spec doesn't need to make any changes to the private stuff internal MOP; this isn't really an essential property but I'm also maintaining the decorators spec, so...","date":"2018-01-04T23:18:29.779Z","type":"message"}
{"nick":"Bakkot","message":"don't have a strong opinion either way, though. as you're the author of the spec text I'd defer to you, as long as you think it'll make sense to readers (and bterlson or whoever is editor at the time). If you do go with your original plan, a non-normative NOTE would be enough to make up for the difference I think.","date":"2018-01-04T23:19:29.507Z","type":"message"}
{"nick":"littledan","message":"note that says what?","date":"2018-01-04T23:19:53.171Z","type":"message"}
{"nick":"littledan","message":"I'm leaning towards going ahead and copying the nonwritable private fields to subclass constructors; I think it makes semantic sense for the same reason it makes sense to copy methods and accessors","date":"2018-01-04T23:20:29.996Z","type":"message"}
{"nick":"Bakkot","message":"`NOTE: private static accessors and methods are copied to subclasses.`","date":"2018-01-04T23:20:37.342Z","type":"message"}
{"nick":"Bakkot","message":"or something to that effect.","date":"2018-01-04T23:20:51.324Z","type":"message"}
{"nick":"Bakkot","message":"I guess you'd want to make reference to the syntactical difference.","date":"2018-01-04T23:20:59.188Z","type":"message"}
{"nick":"littledan","message":"oh, no, this is too complicated to leave to a note; I'm trying to write the spec text now","date":"2018-01-04T23:21:05.739Z","type":"message"}
{"nick":"Bakkot","message":"right, I was trying to answer the \"note that says what\" question","date":"2018-01-04T23:21:25.236Z","type":"message"}
{"nick":"littledan","message":"I could do a note for other things, like NOTE: restore the lexical scope of the private scope stuff properly (I think there's a note like that now)","date":"2018-01-04T23:21:33.191Z","type":"message"}
{"nick":"littledan","message":"sorry, I don't understand what you meant by \" If you do go with your original plan, a non-normative NOTE would be enough to make up for the difference I think.\"","date":"2018-01-04T23:21:55.924Z","type":"message"}
{"nick":"littledan","message":"which original plan?","date":"2018-01-04T23:21:58.359Z","type":"message"}
{"nick":"Bakkot","message":"er","date":"2018-01-04T23:22:00.090Z","type":"message"}
{"nick":"Bakkot","message":"\"I'm leaning towards going ahead and copying the nonwritable private fields to subclass constructors\"","date":"2018-01-04T23:22:07.777Z","type":"message"}
{"nick":"Bakkot","message":"I think that, if you do this, there should be a NOTE in the final spec text which points out that \"nonwritable private fields\" is equivalent to syntactically declared static private methods and accesors.","date":"2018-01-04T23:22:44.425Z","type":"message"}
{"nick":"littledan","message":"oh, yeah, good point--this is pretty non-obvious","date":"2018-01-04T23:22:59.984Z","type":"message"}
{"nick":"littledan","message":"OK, thanks for all your help here","date":"2018-01-04T23:23:14.428Z","type":"message"}
{"nick":"Bakkot","message":"And then take that note out when decorators land, or amend it to say that this is only true if decorators haven't messed with things.","date":"2018-01-04T23:23:15.567Z","type":"message"}
{"nick":"Bakkot","message":"(assuming decorators have the relevant powers.)","date":"2018-01-04T23:23:28.163Z","type":"message"}
{"nick":"littledan","message":"decorators can create non-writable fields in the current draft spec","date":"2018-01-04T23:23:47.182Z","type":"message"}
{"nick":"littledan","message":"but, I don't see why anyone would want to do that","date":"2018-01-04T23:23:57.714Z","type":"message"}
{"nick":"littledan","message":"I mean, they'd be frozen to the value of their initializer","date":"2018-01-04T23:24:13.562Z","type":"message"}
{"nick":"Bakkot","message":"To the value their initializer returns, or its thunk?","date":"2018-01-04T23:24:37.426Z","type":"message"}
{"nick":"littledan","message":"the first one","date":"2018-01-04T23:24:44.061Z","type":"message"}
{"nick":"Bakkot","message":"Beause I write `private static final foo` in Java all the time.","date":"2018-01-04T23:24:50.255Z","type":"message"}
{"nick":"littledan","message":"`@nonwritable static #foo = 1;` huh not so bad","date":"2018-01-04T23:25:27.555Z","type":"message"}
{"nick":"littledan","message":"but, maybe better `const foo = 1` outside the class","date":"2018-01-04T23:25:42.339Z","type":"message"}
{"nick":"littledan","message":"anyway seems like it wouldn't hurt to have access in subclasses there","date":"2018-01-04T23:26:20.944Z","type":"message"}
{"nick":"littledan","message":"and I don't see a reason to exclude it","date":"2018-01-04T23:26:28.496Z","type":"message"}
{"nick":"Bakkot","message":"I have no strong opinion either way, and am not the target audience for decorators in any case. Something to discuss there, possibly. (Where \"discuss\" means \"pick a semantics and explain what it is going to be, and then if people offer objections take that into account\", I guess.)","date":"2018-01-04T23:29:28.867Z","type":"message"}
{"nick":"littledan","message":"yeah, sounds like a plan","date":"2018-01-04T23:32:21.218Z","type":"message"}
{"nick":"littledan","message":"sadly the set of people who have strong opinions about decorators differs a bit from the set of people who have strong opinions about private fields and methods","date":"2018-01-04T23:32:41.978Z","type":"message"}
{"nick":"littledan","message":"or, happily?","date":"2018-01-04T23:33:01.151Z","type":"message"}
