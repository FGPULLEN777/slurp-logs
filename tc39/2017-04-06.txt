{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-06T00:42:10.313Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-04-06T02:39:42.086Z","type":"quit"}
{"nick":"Domenic","message":"Wow this is not going to be a fun spec to edit anymore :(","date":"2017-04-06T03:16:32.459Z","type":"message"}
{"nick":"Domenic","message":"Or read the source of","date":"2017-04-06T03:16:39.750Z","type":"message"}
{"nick":"gskachkov_","date":"2017-04-06T03:30:46.553Z","type":"join"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-04-06T03:40:54.979Z","type":"quit"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-06T03:41:22.968Z","type":"quit"}
{"nick":"not-an-aardvark_","date":"2017-04-06T04:04:47.368Z","type":"join"}
{"nick":"not-an-aardvark","reason":"*.net *.split","date":"2017-04-06T04:10:46.262Z","type":"quit"}
{"nick":"TehShrike","reason":"*.net *.split","date":"2017-04-06T04:10:46.554Z","type":"quit"}
{"nick":"not-an-aardvark_","new_nick":"not-an-aardvark","date":"2017-04-06T04:10:54.538Z","type":"nick"}
{"nick":"ljharb","message":"what's the benefit of linking directly to a step, as opposed to an algorithm with a numbered step? is it just to protect against step reorderings?","date":"2017-04-06T04:42:05.780Z","type":"message"}
{"nick":"ljharb","message":"(since it wouldn't help with step removals, or many refactors)","date":"2017-04-06T04:42:20.596Z","type":"message"}
{"nick":"gskachkov_","date":"2017-04-06T05:04:05.954Z","type":"join"}
{"nick":"gskachkov_","reason":"Ping timeout: 240 seconds","date":"2017-04-06T05:08:27.694Z","type":"quit"}
{"nick":"Bakkot","message":"ljharb, did you see https://github.com/babel/babylon/issues/440 ?","date":"2017-04-06T05:28:50.820Z","type":"message"}
{"nick":"Bakkot","message":"(I don't know why I have in my head that you are a person who cares about sourcetype and node + ESM compatibility, but I do, so now you get to be pinged)","date":"2017-04-06T05:29:24.575Z","type":"message"}
{"nick":"Bakkot","message":"(plz ignore if you do not in fact care)","date":"2017-04-06T05:29:31.519Z","type":"message"}
{"nick":"ljharb","message":"lol will look shortly","date":"2017-04-06T05:29:49.135Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: k commented","date":"2017-04-06T05:40:27.299Z","type":"message"}
{"nick":"Bakkot","message":"thanks!","date":"2017-04-06T05:40:50.758Z","type":"message"}
{"nick":"Bakkot","message":"I have not been keeping good track of the state of the various grammar proposals.","date":"2017-04-06T05:41:14.504Z","type":"message"}
{"nick":"ljharb","message":"unambiguous is a nice idea, i like it, but a number of folks were super against it","date":"2017-04-06T05:43:27.256Z","type":"message"}
{"nick":"ljharb","message":"and jdd really wants it to happen, but shipping it in lodash or eslint won't make it happen ¯\\_(ツ)_/¯","date":"2017-04-06T05:43:43.081Z","type":"message"}
{"nick":"cmatheson","message":"~/exit","date":"2017-04-06T05:47:15.232Z","type":"message"}
{"nick":"ljharb","message":"error: exit not found","date":"2017-04-06T05:49:09.218Z","type":"message"}
{"nick":"not-an-aardvark","message":"I think it was supposed to be ~/exit/, which is -1.","date":"2017-04-06T05:50:53.154Z","type":"message"}
{"nick":"ljharb","message":":-p","date":"2017-04-06T05:51:40.170Z","type":"message"}
{"nick":"dilijev","message":"What about per-algorithm unique?","date":"2017-04-06T06:02:41.672Z","type":"message"}
{"nick":"dilijev","message":"Still handles the ability to reorder steps in an algorithm. Moving the same step to another algorithm wouldn't be meaningful to have the same link. Reduces the need for large numbers.","date":"2017-04-06T06:03:24.000Z","type":"message"}
{"nick":"ljharb","message":"ooh, that seems much nicer","date":"2017-04-06T06:03:27.826Z","type":"message"}
{"nick":"gskachkov_","date":"2017-04-06T06:41:24.521Z","type":"join"}
{"nick":"tarjei","date":"2017-04-06T06:45:25.307Z","type":"join"}
{"nick":"tarjei","message":"Good morning. I'm just wondering if Set.size is a work accident of if  it was intended. Since arrays have .length it would have been great to follow that convention.","date":"2017-04-06T06:46:37.751Z","type":"message"}
{"nick":"ljharb","message":"tarjei: nope, it's intentional and they aren't the same thing","date":"2017-04-06T06:47:03.615Z","type":"message"}
{"nick":"ljharb","message":"tarjei: \"length\" would imply it's arraylike. which it isn't.","date":"2017-04-06T06:47:10.668Z","type":"message"}
{"nick":"tarjei","message":"I can see that, but at the same time you end up increasing the developer overhead since one has to go look up the property","date":"2017-04-06T06:48:19.624Z","type":"message"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-06T06:48:30.107Z","type":"quit"}
{"nick":"tarjei","message":"I just expected all collections to have a length.","date":"2017-04-06T06:48:43.692Z","type":"message"}
{"nick":"ljharb","message":"theres a ton of differences; you simply can't \"not know\" if you have an Array, Map, or Set.","date":"2017-04-06T06:49:05.821Z","type":"message"}
{"nick":"Bakkot","message":"Yes, it's a bit of a tradeoff, but I think it comes out overwhelmingly in favor of not looking arraylike.","date":"2017-04-06T06:49:09.513Z","type":"message"}
{"nick":"ljharb","message":"really the only thing that's universal between all 3 collections is that they're iterable","date":"2017-04-06T06:49:34.200Z","type":"message"}
{"nick":"tarjei","message":"Ok, you're the expert :P","date":"2017-04-06T06:49:46.064Z","type":"message"}
{"nick":"gskachkov_","date":"2017-04-06T06:50:03.077Z","type":"join"}
{"nick":"tarjei","message":"Thank you for taking the time to answering me.","date":"2017-04-06T06:50:12.535Z","type":"message"}
{"nick":"ljharb","message":"tarjei: np. fwiw, i think it would be nice to be able to take a generic collection - array, map, set, or \"other\" - and operate on it without knowing which kind it is. but that's not a goal of the current spec, and that'd be a monumental task i think.","date":"2017-04-06T06:51:12.053Z","type":"message"}
{"nick":"tarjei","message":"It is too late now :P","date":"2017-04-06T06:51:32.699Z","type":"message"}
{"nick":"tarjei","message":"Oh, and has anyone considered an operation for converting an array to a map? Something like:","date":"2017-04-06T06:51:58.054Z","type":"message"}
{"nick":"tarjei","message":"myArray.mapToMap(function(item, i) { return [item.id, item] })","date":"2017-04-06T06:51:58.202Z","type":"message"}
{"nick":"ljharb","message":"if you have an array of entries (like `[key, value]`) you can just pass it into `new Map()`","date":"2017-04-06T06:54:00.296Z","type":"message"}
{"nick":"ljharb","message":"ie, `new Map([[1, 2], [3, 4]])` gets you a map of 1 → 2, and 3 → 4","date":"2017-04-06T06:54:13.695Z","type":"message"}
{"nick":"tarjei","message":"duh! I didn't know!","date":"2017-04-06T06:54:35.137Z","type":"message"}
{"nick":"tarjei","message":"thanks","date":"2017-04-06T06:54:36.273Z","type":"message"}
{"nick":"tarjei","message":"You just made my day :)","date":"2017-04-06T06:54:56.420Z","type":"message"}
{"nick":"ljharb","message":"also `Object.entries()` will take an object and give you that array of entries.","date":"2017-04-06T06:55:09.672Z","type":"message"}
{"nick":"tarjei","message":"Yes, I've used that one a lot :P","date":"2017-04-06T06:56:02.258Z","type":"message"}
{"nick":"Bakkot","message":"There's actually an annoying subtlety here, which is that Maps consider +0 and '0' to be different keys","date":"2017-04-06T06:56:52.133Z","type":"message"}
{"nick":"Bakkot","message":"so (new Map(Object.entries(['a', 'b', 'c']))).get(0) will give you undefined","date":"2017-04-06T06:57:08.015Z","type":"message"}
{"nick":"Bakkot","message":"whereas (new Map(['a', 'b', 'c'].map((v, i) => [i, v]))).get(0) will give you 'a'","date":"2017-04-06T06:57:22.584Z","type":"message"}
{"nick":"tarjei","message":"wft. Thanks!","date":"2017-04-06T06:57:37.899Z","type":"message"}
{"nick":"ljharb","message":"well sure but you wouldn't pass an array into Object.entries in the first place; you'd use `new Map(...arr.entries())`","date":"2017-04-06T06:58:46.363Z","type":"message"}
{"nick":"ljharb","message":"Object.entries is for objects; arrays are special","date":"2017-04-06T06:58:52.875Z","type":"message"}
{"nick":"ljharb","message":"(conceptually)","date":"2017-04-06T06:58:59.176Z","type":"message"}
{"nick":"ljharb","message":"* oops, `new Map(arr.entries())`","date":"2017-04-06T06:59:18.627Z","type":"message"}
{"nick":"tarjei","message":";)","date":"2017-04-06T06:59:22.206Z","type":"message"}
{"nick":"ljharb","message":"but i suppose that'd still have the problem where `0` would be a string, not a number","date":"2017-04-06T06:59:26.663Z","type":"message"}
{"nick":"ljharb","message":"or hmm, maybe not, if the .entries() iterator provides integer indexes","date":"2017-04-06T06:59:45.586Z","type":"message"}
{"nick":"Bakkot","message":"ah, yes, right","date":"2017-04-06T07:00:01.952Z","type":"message"}
{"nick":"Bakkot","message":"and yes, it does","date":"2017-04-06T07:00:03.565Z","type":"message"}
{"nick":"Bakkot","message":"that is, it gives integer indexes","date":"2017-04-06T07:01:13.310Z","type":"message"}
{"nick":"ljharb","message":"sweet, that's what i'd expect","date":"2017-04-06T07:02:04.904Z","type":"message"}
{"nick":"Bakkot","message":".entries() also works better with holey arrays, looks like.","date":"2017-04-06T07:02:28.943Z","type":"message"}
{"nick":"Bakkot","message":"because .map skips holes.","date":"2017-04-06T07:02:39.102Z","type":"message"}
{"nick":"ljharb","message":"dense or bust","date":"2017-04-06T07:02:52.587Z","type":"message"}
{"nick":"Bakkot","message":"So! `new Map(ar.entries())` is definitely the thing to do to get the behavior you'd expect.","date":"2017-04-06T07:03:03.105Z","type":"message"}
{"nick":"Bakkot","message":"unless you expect the resulting map to not have keys for holes.","date":"2017-04-06T07:03:20.236Z","type":"message"}
{"nick":"Bakkot","message":"I don't know if anyone really has intuitions about the behavior of arrays with holes though.","date":"2017-04-06T07:03:38.768Z","type":"message"}
{"nick":"Bakkot","message":"for my part, my intuition about holey arrays that my arrays should not have holes.","date":"2017-04-06T07:04:21.167Z","type":"message"}
{"nick":"ljharb","message":"that is mine as well","date":"2017-04-06T07:20:31.368Z","type":"message"}
{"nick":"tarjei","message":"Again, thanks a lot for the tips. I also note that Map.length always is 0.","date":"2017-04-06T07:22:17.542Z","type":"message"}
{"nick":"tarjei","message":"According to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map","date":"2017-04-06T07:22:41.041Z","type":"message"}
{"nick":"ljharb","message":"tarjei: Map.length is 0 because Map is a function that has 0 required arguments","date":"2017-04-06T07:23:11.913Z","type":"message"}
{"nick":"tarjei","message":"ah! But new Map().length is undefined","date":"2017-04-06T07:23:44.604Z","type":"message"}
{"nick":"tarjei","message":"My bad.","date":"2017-04-06T07:23:55.784Z","type":"message"}
{"nick":"ljharb","message":"correct","date":"2017-04-06T07:24:30.160Z","type":"message"}
{"nick":"dilijev","message":"another way to think about the difference between length and size is that length is an own property of an array, but size is a getter of Map and Set's prototypes","date":"2017-04-06T07:35:47.977Z","type":"message"}
{"nick":"ljharb","message":"array length is exotic tho, so it's a bit weird","date":"2017-04-06T07:36:24.748Z","type":"message"}
{"nick":"dilijev","message":"as a mental model, just another part of arrays being special","date":"2017-04-06T07:42:15.321Z","type":"message"}
{"nick":"dilijev","message":"for the spec and implementation, that's a bit more important","date":"2017-04-06T07:42:26.433Z","type":"message"}
{"nick":"dilijev","message":"imo","date":"2017-04-06T07:42:36.640Z","type":"message"}
{"nick":"dilijev","message":"unless i'm missing something important from a js perspective","date":"2017-04-06T07:45:34.557Z","type":"message"}
{"nick":"dilijev","message":"mental-model wise","date":"2017-04-06T07:45:40.609Z","type":"message"}
