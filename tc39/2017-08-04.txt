{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T00:00:14.321Z","type":"quit"}
{"nick":"paulfryzel","date":"2017-08-04T00:16:48.891Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-04T00:22:05.697Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-08-04T00:52:58.798Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T00:56:13.521Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-04T01:02:49.580Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T01:17:03.414Z","type":"quit"}
{"nick":"gibson042","date":"2017-08-04T01:29:05.515Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-08-04T01:35:15.718Z","type":"join"}
{"nick":"dilijev","reason":"Quit: Connection closed for inactivity","date":"2017-08-04T01:42:16.418Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-08-04T02:00:38.051Z","type":"quit"}
{"nick":"caridy","date":"2017-08-04T02:01:05.704Z","type":"join"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-08-04T03:52:34.282Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2017-08-04T03:54:02.767Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-04T05:18:58.910Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-04T05:39:59.304Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 258 seconds","date":"2017-08-04T05:47:45.201Z","type":"quit"}
{"nick":"basicdays","reason":"Ping timeout: 276 seconds","date":"2017-08-04T06:15:34.657Z","type":"quit"}
{"nick":"basicdays","date":"2017-08-04T06:29:40.840Z","type":"join"}
{"nick":"gskachkov","date":"2017-08-04T06:54:40.605Z","type":"join"}
{"nick":"TabAtkins","message":"Is nice.","date":"2017-08-04T07:40:03.604Z","type":"message"}
{"nick":"annevk","message":"Not seeing it even after refresh...","date":"2017-08-04T07:49:16.853Z","type":"message"}
{"nick":"ljharb","message":"annevk: `no`?","date":"2017-08-04T07:50:35.768Z","type":"message"}
{"nick":"annevk","message":"ljharb: lots of ` there","date":"2017-08-04T07:51:06.679Z","type":"message"}
{"nick":"ljharb","message":"huh, weird","date":"2017-08-04T07:51:11.674Z","type":"message"}
{"nick":"annevk","message":"Maybe it hasn't rolled out to corporate IRCCloud?","date":"2017-08-04T07:51:36.687Z","type":"message"}
{"nick":"ljharb","message":"oh maybe so, what's corporate irccloud?","date":"2017-08-04T07:51:48.880Z","type":"message"}
{"nick":"annevk","message":"ljharb: well I go to irccloud.mozilla.com, not entirely sure who ends up hosting the instance though and how that gets updated","date":"2017-08-04T07:52:19.144Z","type":"message"}
{"nick":"ljharb","message":"ah k","date":"2017-08-04T07:52:27.299Z","type":"message"}
{"nick":"TabAtkins","message":"Oh, huh, I just have a corporate-backed account on irccloud.com. I wonder why Moz runs its own?","date":"2017-08-04T07:55:20.406Z","type":"message"}
{"nick":"annevk","message":"TabAtkins: I suspect so we can use our own authentication mechanism and maybe some privacy and data ownership things, dunno really","date":"2017-08-04T07:58:17.204Z","type":"message"}
{"nick":"littledan","message":"ljharb: Yes, we were talking about why those can't coexist","date":"2017-08-04T08:21:13.805Z","type":"message"}
{"nick":"ljharb","message":"littledan: gotcha. is it just a matter of defining whether `x.#foo` attempts to look up the slot for `this.constructor.#foo` before or after it attempts to look up the slot for `this.#foo`?","date":"2017-08-04T08:23:17.308Z","type":"message"}
{"nick":"ljharb","message":"i guess that would mean that it would always throw for one of them, and therein lies the rub","date":"2017-08-04T08:23:44.456Z","type":"message"}
{"nick":"littledan","message":"no, the concern isn't about the receiver (it would never use a different receiver if one is explicitly provided) but about the private name","date":"2017-08-04T08:23:56.347Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2017-08-04T08:24:51.523Z","type":"message"}
{"nick":"ljharb","message":"so given `class X { #foo = 3; static #foo = 4; get() { return this.#foo; } static get() { return this.#foo; } }` - `new X().get()` vs `X.get()`, as opposed to `X.prototype.get.call(x)` vs `X.get.call(new X())`?","date":"2017-08-04T08:25:59.246Z","type":"message"}
{"nick":"ljharb","message":"iow the first pair is the intuitive one, but the second pair is where it gets tricky?","date":"2017-08-04T08:26:11.811Z","type":"message"}
{"nick":"ljharb","message":"(just making sure i understand the conflict)","date":"2017-08-04T08:27:10.421Z","type":"message"}
{"nick":"littledan","message":"it's not about intuitive vs tricky, it's like, I was trying to understand the semantics that jeffmo was proposing at all","date":"2017-08-04T08:33:29.222Z","type":"message"}
{"nick":"littledan","message":"the currently specified semantics are that each private declaration creates a private name which is bound in lexical scope. How would you do that if there are two of them?","date":"2017-08-04T08:33:53.701Z","type":"message"}
{"nick":"littledan","message":"I can imagine some semantics (they get the same private name)--this has some implications which are a little funny","date":"2017-08-04T08:34:22.076Z","type":"message"}
{"nick":"littledan","message":"I think we could leave that generalization for a future change","date":"2017-08-04T08:34:31.630Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2017-08-04T08:35:50.046Z","type":"message"}
{"nick":"ljharb","message":"could you name the static ones with a \"static:\" prefix?","date":"2017-08-04T08:36:12.676Z","type":"message"}
{"nick":"ljharb","message":"like \"static:foo\" vs \"foo\"","date":"2017-08-04T08:36:16.370Z","type":"message"}
{"nick":"littledan","message":"huh, you mean like you'd do this.#static:foo ?","date":"2017-08-04T08:49:03.569Z","type":"message"}
{"nick":"littledan","message":"if you use static_ as your prefix, you can already do that!","date":"2017-08-04T08:49:13.666Z","type":"message"}
{"nick":"littledan","message":"and then have \"overlapping\" names","date":"2017-08-04T08:49:18.140Z","type":"message"}
{"nick":"littledan","message":"`class C { static #static_foo; #foo; }","date":"2017-08-04T08:49:34.572Z","type":"message"}
{"nick":"littledan","message":"`class C { static #static_foo; #foo; }`","date":"2017-08-04T08:49:39.284Z","type":"message"}
{"nick":"littledan","message":"this is permitted already!","date":"2017-08-04T08:49:43.112Z","type":"message"}
{"nick":"ljharb","message":"no","date":"2017-08-04T09:01:14.912Z","type":"message"}
{"nick":"ljharb","message":"i mean like internally, private fields in a static context would get a different name","date":"2017-08-04T09:01:34.124Z","type":"message"}
{"nick":"ljharb","message":"iow in my class X example above, the one inside \"static get\" is statically distinct from the one inside \"get\"","date":"2017-08-04T09:01:57.988Z","type":"message"}
{"nick":"littledan","message":"I don't know how you'd resolve `x.#y` to know whether it is talking about the static or instance name","date":"2017-08-04T09:07:26.487Z","type":"message"}
{"nick":"littledan","message":"since a method can be called with anything as the receiver","date":"2017-08-04T09:07:39.254Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-08-04T10:14:57.536Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-08-04T10:25:10.975Z","type":"quit"}
{"nick":"mylesborins","date":"2017-08-04T10:25:41.547Z","type":"join"}
{"nick":"jmdyck","date":"2017-08-04T11:33:26.927Z","type":"join"}
{"nick":"bradleymeck","date":"2017-08-04T13:31:47.509Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-08-04T13:39:44.105Z","type":"quit"}
{"nick":"isHavvyGhosting","date":"2017-08-04T13:41:33.536Z","type":"join"}
{"nick":"isHavvy","reason":"Ping timeout: 240 seconds","date":"2017-08-04T13:44:28.519Z","type":"quit"}
{"nick":"AtumT","date":"2017-08-04T13:53:46.945Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-04T14:01:10.887Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-08-04T14:18:58.782Z","type":"quit"}
{"nick":"caridy","date":"2017-08-04T14:19:48.574Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T14:23:53.659Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-04T14:38:41.701Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T14:46:47.421Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-04T15:34:48.572Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-04T15:38:51.395Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-04T15:53:33.539Z","type":"join"}
{"nick":"howdoi","date":"2017-08-04T16:05:06.406Z","type":"join"}
{"nick":"bradleymeck","date":"2017-08-04T16:05:25.627Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T16:14:26.862Z","type":"quit"}
{"nick":"ljharb","message":"littledan: based on the context of the method itself","date":"2017-08-04T16:16:39.245Z","type":"message"}
{"nick":"ljharb","message":"littledan: static methods can access static fields, instance methods instance fields","date":"2017-08-04T16:16:48.665Z","type":"message"}
{"nick":"ljharb","message":"i do see how that'd be a problem if you wanted a static method that could access an instance field","date":"2017-08-04T16:17:11.632Z","type":"message"}
{"nick":"littledan","message":"the current proposal avoids doing this sort of thing. For example, a static method could have a function defined inside of it, which is used as a callback with instances as the receiver","date":"2017-08-04T16:17:49.200Z","type":"message"}
{"nick":"littledan","message":"or, a static initializer could create an instance, and then read a private field from that instance","date":"2017-08-04T16:18:10.043Z","type":"message"}
{"nick":"ljharb","message":"right, makes sense","date":"2017-08-04T16:18:40.454Z","type":"message"}
{"nick":"ljharb","message":"k, i think i understand the problem :-)","date":"2017-08-04T16:18:45.664Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-04T16:20:48.138Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-04T16:42:57.597Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-04T16:47:54.304Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-04T17:03:51.846Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-08-04T17:04:46.047Z","type":"join"}
{"nick":"gskachkov","date":"2017-08-04T17:07:35.067Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-08-04T17:10:44.444Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-04T17:13:24.870Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-08-04T17:17:26.821Z","type":"quit"}
{"nick":"caridy_","date":"2017-08-04T17:23:55.649Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 260 seconds","date":"2017-08-04T17:26:08.594Z","type":"quit"}
{"nick":"basicdays","reason":"Ping timeout: 240 seconds","date":"2017-08-04T17:32:50.398Z","type":"quit"}
{"nick":"basicdays","date":"2017-08-04T17:39:11.810Z","type":"join"}
{"nick":"gskachkov","date":"2017-08-04T17:54:17.589Z","type":"join"}
{"nick":"basicdays","reason":"Ping timeout: 255 seconds","date":"2017-08-04T18:08:41.912Z","type":"quit"}
{"nick":"dilijev","date":"2017-08-04T18:12:34.095Z","type":"join"}
{"nick":"basicdays","date":"2017-08-04T18:12:45.814Z","type":"join"}
{"nick":"Bakkot","message":"yeah, I fully support the current \"can only have either a static private or instance private field of a given name\", unless and until we someday come up with a better solution. it is a little surprising coming from other languages, but it feels like an inevitable consequence of the scope-based privacy model we're going with.","date":"2017-08-04T18:38:02.658Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T19:18:55.548Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-08-04T19:37:39.443Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-04T19:48:14.068Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-04T19:55:12.640Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-04T20:13:44.141Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-04T20:16:55.673Z","type":"join"}
{"nick":"Fishrock123","date":"2017-08-04T20:21:29.671Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T20:40:53.475Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-04T20:46:48.477Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-08-04T21:10:03.723Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T21:22:28.633Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-08-04T21:35:00.663Z","type":"join"}
{"nick":"AtumT_","date":"2017-08-04T21:58:54.716Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 255 seconds","date":"2017-08-04T22:01:20.966Z","type":"quit"}
{"nick":"AtumT_","reason":"Ping timeout: 260 seconds","date":"2017-08-04T22:12:47.669Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-08-04T22:45:01.329Z","type":"quit"}
