{"nick":"bterlson","message":"Given that we probably can't bring SAB back until CPUs are fixed, should we remove SAB from the spec for 2018? Seems bad to keep a feature that can't be implemented on modern CPUs securely?","date":"2018-01-05T00:02:09.499Z","type":"message"}
{"nick":"littledan","message":"maybe we can just add a note?","date":"2018-01-05T00:41:18.778Z","type":"message"}
{"nick":"littledan","message":"it sounded like there were some possible software mitigations","date":"2018-01-05T00:41:31.196Z","type":"message"}
{"nick":"bterlson","message":"I am not an expert but from what I can tell the software mitigations may not be 100% foolproof","date":"2018-01-05T00:42:00.012Z","type":"message"}
{"nick":"littledan","message":"move SAB to Annex B?","date":"2018-01-05T00:42:12.297Z","type":"message"}
{"nick":"bterlson","message":"why? it's not needed for web compat","date":"2018-01-05T00:42:24.066Z","type":"message"}
{"nick":"littledan","message":"or move it to ECMA 402, so it's actually optional","date":"2018-01-05T00:42:27.296Z","type":"message"}
{"nick":"littledan","message":"on the web even","date":"2018-01-05T00:42:32.614Z","type":"message"}
{"nick":"littledan","message":"oh, then implementations would have to choose between shipping Intl with SAB and not shipping either!","date":"2018-01-05T00:42:48.950Z","type":"message"}
{"nick":"bterlson","message":"we can make it normative optional wherever we put it","date":"2018-01-05T00:42:56.408Z","type":"message"}
{"nick":"littledan","message":"sorry, this is just a bad joke","date":"2018-01-05T00:43:08.126Z","type":"message"}
{"nick":"bterlson","message":"ahhh ok sorry","date":"2018-01-05T00:43:29.201Z","type":"message"}
{"nick":"littledan","message":"why not leave it required, as an (extremely gentle) push to get everyone to fix it so it can get re-shipped, and just add a note saying, \"we understand if you can't ship this now due to those issues\"","date":"2018-01-05T00:43:50.463Z","type":"message"}
{"nick":"littledan","message":"they'll be temporarily out of conformance due to the bug","date":"2018-01-05T00:44:24.553Z","type":"message"}
{"nick":"bterlson","message":"one possible reason: requiring standards process to bring the feature back is a forcing function to discuss its broader security impliciations?","date":"2018-01-05T00:44:28.983Z","type":"message"}
{"nick":"littledan","message":"tbh I'm not sure if we're the body to rule on that","date":"2018-01-05T00:44:57.160Z","type":"message"}
{"nick":"littledan","message":"also a lot of these discussions happen in private","date":"2018-01-05T00:45:26.501Z","type":"message"}
{"nick":"littledan","message":"Bakkot: Re the conversation above: A really strange consequence of the copying semantics is, if a superclass \"gets\" the private instance methods of another class (e.g., the super return trick), then the subclass will now also get them.","date":"2018-01-05T00:46:44.683Z","type":"message"}
{"nick":"littledan","message":"Bakkot: But, I still don't think this is worth changing the semantics for","date":"2018-01-05T00:46:56.175Z","type":"message"}
{"nick":"littledan","message":"I mean, I think those semantic consequences are OK","date":"2018-01-05T00:47:04.393Z","type":"message"}
{"nick":"littledan","message":"bterlson: Anyway if you want to remove it I'm not really opposed to it","date":"2018-01-05T00:48:19.312Z","type":"message"}
{"nick":"Jayflux","reason":"Quit: Leaving","date":"2018-01-05T00:56:43.419Z","type":"quit"}
{"nick":"littledan","message":"Bakkot: The spec came out really short, it's just this: https://tc39.github.io/proposal-static-class-features/#initialize-class-elements","date":"2018-01-05T00:59:26.053Z","type":"message"}
{"nick":"littledan","message":"or sorry, the relevant part is this: https://tc39.github.io/proposal-static-class-features/#copy-immutable-private-elements","date":"2018-01-05T00:59:41.835Z","type":"message"}
{"nick":"bterlson","message":"littledan: I'm just exploring options at this point :) I don't really have an opinion","date":"2018-01-05T01:00:44.413Z","type":"message"}
{"nick":"Bakkot","message":"littledan: seems fine, though gonna be a fun test262 case to write","date":"2018-01-05T01:04:22.099Z","type":"message"}
{"nick":"Bakkot","message":"You can run into it even without the super return trick: `class Base extends Function { #priv(){} pub(){ this.#priv(); } }; class Derived extends new Base {}; Derived.pub(); // succeeds`","date":"2018-01-05T01:09:55.373Z","type":"message"}
{"nick":"littledan","message":"oh right of course","date":"2018-01-05T01:14:08.418Z","type":"message"}
{"nick":"littledan","message":"well, that seems... natural?","date":"2018-01-05T01:14:27.946Z","type":"message"}
{"nick":"Bakkot","message":"That code kind of damages the static/instance boundary, but if you think of it as \"private methods invocable with the base class as a receiver are invocable with the derived class as a receiver\", yes, it all checks out.","date":"2018-01-05T01:18:50.488Z","type":"message"}
{"nick":"ljharb","message":"Annex M, for Meltdown","date":"2018-01-05T01:44:19.408Z","type":"message"}
{"nick":"ljharb","message":"or Annex I, for Insecure","date":"2018-01-05T01:44:34.841Z","type":"message"}
{"nick":"jwalden","reason":"Ping timeout: 240 seconds","date":"2018-01-05T02:17:11.958Z","type":"quit"}
{"nick":"jwalden","date":"2018-01-05T02:21:47.982Z","type":"join"}
{"nick":"jwalden","reason":"Quit: brb","date":"2018-01-05T02:27:39.933Z","type":"quit"}
{"nick":"Domenic","message":"littledan: Bakkot: I feel like this copying semantic/spec mechanic is more complicated than a branding-based one. I would have thought that when you call a private static method, it checks if the thisArg either has the right brand, or has something in its __proto__ chain with the right brand. This allows reparenting, I guess.","date":"2018-01-05T02:51:37.207Z","type":"message"}
{"nick":"Domenic","message":"SAB is probably sticking around in Node from what I understand. Not sure how that weighs on the in-the-spec question.","date":"2018-01-05T02:52:53.864Z","type":"message"}
{"nick":"bradleymeck","message":"Domenic: do we need to kick it out for now? it isn't on by default in Node@8","date":"2018-01-05T02:59:02.245Z","type":"message"}
{"nick":"Domenic","message":"bradleymeck: I don't think so; Node already has access to your system","date":"2018-01-05T02:59:38.161Z","type":"message"}
{"nick":"Domenic","message":"Consult your local V8 team for more definitive answers.","date":"2018-01-05T02:59:45.832Z","type":"message"}
{"nick":"jwalden","date":"2018-01-05T03:23:46.567Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-01-05T03:34:09.995Z","type":"quit"}
{"nick":"ahnheejong","reason":"\"WeeChat 1.6\"","date":"2018-01-05T03:42:16.925Z","type":"part"}
{"nick":"Bakkot","message":"Domenic: the copying semantics are equivalent to putting the brand on the subclass when the subclass is defined, I think","date":"2018-01-05T04:07:35.912Z","type":"message"}
{"nick":"Bakkot","message":"this avoids doing prototype lookups when the field is used, which is I think more consistent with how private fields work in general","date":"2018-01-05T04:08:23.604Z","type":"message"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2018-01-05T05:07:46.309Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-01-05T05:10:55.537Z","type":"quit"}
{"nick":"tkore","date":"2018-01-05T06:33:09.232Z","type":"join"}
