{"nick":"not-an-aardvark","date":"2017-08-27T01:23:28.642Z","type":"join"}
{"nick":"frankdrey","date":"2017-08-27T01:29:39.968Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-08-27T03:43:34.791Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-08-27T04:20:52.187Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-08-27T04:33:20.191Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-27T08:40:31.553Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-27T08:41:23.993Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-08-27T08:50:32.128Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-27T09:16:09.457Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-08-27T09:18:49.496Z","type":"quit"}
{"nick":"gskachkov","date":"2017-08-27T09:27:15.901Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-08-27T10:25:11.568Z","type":"quit"}
{"nick":"mylesborins","date":"2017-08-27T10:25:42.065Z","type":"join"}
{"nick":"pandem","reason":"Ping timeout: 240 seconds","date":"2017-08-27T10:44:41.393Z","type":"quit"}
{"nick":"pandem","date":"2017-08-27T10:45:47.587Z","type":"join"}
{"nick":"jmdyck","date":"2017-08-27T11:39:52.262Z","type":"join"}
{"nick":"abernix","date":"2017-08-27T13:55:13.930Z","type":"join"}
{"nick":"AtumT","date":"2017-08-27T14:06:46.386Z","type":"join"}
{"nick":"abernix","reason":"Quit: Sleepin'","date":"2017-08-27T15:15:24.088Z","type":"quit"}
{"nick":"abernix","date":"2017-08-27T15:21:56.757Z","type":"join"}
{"nick":"abernix","reason":"Quit: Sleepin'","date":"2017-08-27T15:29:31.122Z","type":"quit"}
{"nick":"Bakkot","message":"Huh. There's no way to make an immutable hash map, is there?","date":"2017-08-27T15:40:23.291Z","type":"message"}
{"nick":"Bakkot","message":"(That is: immutable in the sense of \"immutable data structure\", i.e., you can still perform operations on it, you just get back a new object instead of mutating the old one.)","date":"2017-08-27T15:41:02.564Z","type":"message"}
{"nick":"Bakkot","message":"er","date":"2017-08-27T15:46:28.964Z","type":"message"}
{"nick":"Bakkot","message":"s/immutable hash map/immutable *weak* map/","date":"2017-08-27T15:46:40.014Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: there's no way to make a Map or Set or WeakMap or WeakSet immutable, no - in the sense of an immutable API, nor in the sense of preventing mutations to it","date":"2017-08-27T16:24:11.499Z","type":"message"}
{"nick":"Bakkot","message":"That's unfortunate.","date":"2017-08-27T17:20:34.465Z","type":"message"}
{"nick":"ljharb","message":"very. even `Object.freeze(new Map())` can still be mutated.","date":"2017-08-27T17:22:09.158Z","type":"message"}
{"nick":"Bakkot","message":"Well, you can always wrap it and not expose anything allowing mutation.","date":"2017-08-27T17:22:35.088Z","type":"message"}
{"nick":"ljharb","message":"we could/should add an immutable API, of course, but that doesn't change that there's no way to actually freeze a Map unless we make a new ImmutableMap primitive","date":"2017-08-27T17:22:36.884Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: i can grab Map.prototype.set from another realm, and .call it on your map","date":"2017-08-27T17:22:49.525Z","type":"message"}
{"nick":"ljharb","message":"because it's internal slots","date":"2017-08-27T17:22:53.778Z","type":"message"}
{"nick":"Bakkot","message":"Not if you can't get my map.","date":"2017-08-27T17:22:56.537Z","type":"message"}
{"nick":"ljharb","message":"oh, sure","date":"2017-08-27T17:23:00.057Z","type":"message"}
{"nick":"ljharb","message":"you'd have to wrap it in a non-map, but then it'd not be a map","date":"2017-08-27T17:23:15.917Z","type":"message"}
{"nick":"ljharb","message":"`Object.getOwnPropertyDescriptor(Map.prototype, 'size').get.call` would throw","date":"2017-08-27T17:23:32.813Z","type":"message"}
{"nick":"ljharb","message":"(and for it to be a map, that has to work)","date":"2017-08-27T17:23:41.777Z","type":"message"}
{"nick":"Bakkot","message":"wouldn't be a Map, but would be a map, which is what I actually care about for most of my life.","date":"2017-08-27T17:24:05.780Z","type":"message"}
{"nick":"ljharb","message":"fair","date":"2017-08-27T17:24:18.271Z","type":"message"}
{"nick":"Bakkot","message":"a Map.prototype.close() wouldn't be a bad addition, though.","date":"2017-08-27T17:25:18.186Z","type":"message"}
{"nick":"Bakkot","message":"but what I actually want is ImmutableWeakMap, because you can't even polyfill that (without leaking memory).","date":"2017-08-27T17:26:07.865Z","type":"message"}
{"nick":"ljharb","message":"adding some kind of \"seal\" method to all 4 collections would be great","date":"2017-08-27T17:26:27.820Z","type":"message"}
{"nick":"ljharb","message":"there'd be no practical way to polyfill it, of course","date":"2017-08-27T17:26:39.057Z","type":"message"}
{"nick":"Bakkot","message":"I can fake ImmutableMap with arrays pretty well, if I'm willing to give up asymptotic performance characteristics (which I am willing to do), but not ImmutableWeakMap. Maybe someone from immutable.js at facebook wants to make a proposal? :D","date":"2017-08-27T17:27:37.572Z","type":"message"}
{"nick":"wadadli","date":"2017-08-27T18:19:13.478Z","type":"join"}
{"nick":"wadadli","message":"pandem: ^","date":"2017-08-27T18:19:25.332Z","type":"message"}
{"nick":"pandem","message":"?","date":"2017-08-27T18:19:51.492Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: would weak references allow userland implementation of ImmutableWeakMap?","date":"2017-08-27T18:46:37.747Z","type":"message"}
{"nick":"not-an-aardvark","date":"2017-08-27T18:57:30.279Z","type":"join"}
{"nick":"abernix","date":"2017-08-27T19:18:41.122Z","type":"join"}
{"nick":"abernix","reason":"Quit: Sleepin'","date":"2017-08-27T19:32:45.695Z","type":"quit"}
{"nick":"abernix","date":"2017-08-27T19:38:44.015Z","type":"join"}
