{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2017-12-14T00:33:22.880Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-14T00:48:48.533Z","type":"join"}
{"nick":"darkSeid_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-12-14T01:43:10.940Z","type":"quit"}
{"nick":"marxo_","reason":"Ping timeout: 272 seconds","date":"2017-12-14T02:10:48.140Z","type":"quit"}
{"nick":"mylesborins","reason":"*.net *.split","date":"2017-12-14T02:32:40.358Z","type":"quit"}
{"nick":"ChanServ","reason":"*.net *.split","date":"2017-12-14T02:32:40.695Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T02:33:58.708Z","type":"quit"}
{"nick":"ChanServ","date":"2017-12-14T02:34:39.893Z","type":"join"}
{"nick":"mylesborins","date":"2017-12-14T02:36:17.157Z","type":"join"}
{"nick":"gibson042","date":"2017-12-14T02:39:13.476Z","type":"join"}
{"nick":"gibson042","reason":"Read error: Connection reset by peer","date":"2017-12-14T03:03:48.560Z","type":"quit"}
{"nick":"gibson042","date":"2017-12-14T03:06:37.360Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 272 seconds","date":"2017-12-14T03:23:00.127Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-14T04:13:39.968Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-12-14T04:38:29.484Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-12-14T04:40:32.184Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T05:28:30.325Z","type":"join"}
{"nick":"caridy__","reason":"Read error: Connection reset by peer","date":"2017-12-14T05:29:41.133Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-12-14T05:38:51.846Z","type":"quit"}
{"nick":"Emulous","date":"2017-12-14T05:42:21.709Z","type":"join"}
{"nick":"Emulous","message":"Has any thought been given to some pleasant syntactic sugar like `Object.typeOf()` to get `null` returning \"null\" (and, perhaps depending on a second argument of options, `Array` instances returning \"array\" and/or constructors/class instances returning their class name)--with behavior otherwise like \"typeof\"?","date":"2017-12-14T05:47:01.399Z","type":"message"}
{"nick":"Emulous","reason":"Ping timeout: 264 seconds","date":"2017-12-14T06:01:33.182Z","type":"quit"}
{"nick":"howdoi","date":"2017-12-14T06:03:25.959Z","type":"join"}
{"nick":"caridy","date":"2017-12-14T06:07:23.712Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-12-14T06:07:27.685Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T06:07:35.108Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-12-14T06:07:44.794Z","type":"quit"}
{"nick":"Draggor","reason":"Ping timeout: 240 seconds","date":"2017-12-14T06:16:05.494Z","type":"quit"}
{"nick":"Draggor","date":"2017-12-14T06:18:09.158Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T06:57:58.314Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T07:08:06.511Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2017-12-14T07:12:09.013Z","type":"quit"}
{"nick":"Havvy","date":"2017-12-14T07:30:42.007Z","type":"join"}
{"nick":"darkSeid_","date":"2017-12-14T07:34:37.594Z","type":"join"}
{"nick":"darkSeid_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-12-14T07:54:21.182Z","type":"quit"}
{"nick":"Emulous","date":"2017-12-14T08:30:20.112Z","type":"join"}
{"nick":"Emulous","reason":"Ping timeout: 272 seconds","date":"2017-12-14T08:47:16.180Z","type":"quit"}
{"nick":"Emulous","date":"2017-12-14T09:05:45.150Z","type":"join"}
{"nick":"caridy","date":"2017-12-14T09:10:25.803Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2017-12-14T09:14:27.791Z","type":"quit"}
{"nick":"marxo","date":"2017-12-14T09:58:22.636Z","type":"join"}
{"nick":"marxo_","date":"2017-12-14T11:07:04.471Z","type":"join"}
{"nick":"marxo","reason":"Ping timeout: 260 seconds","date":"2017-12-14T11:11:01.694Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T11:12:01.513Z","type":"join"}
{"nick":"marxo_","reason":"Ping timeout: 248 seconds","date":"2017-12-14T11:14:39.893Z","type":"quit"}
{"nick":"caridy","reason":"Ping timeout: 256 seconds","date":"2017-12-14T11:16:21.446Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-12-14T11:25:07.430Z","type":"quit"}
{"nick":"mylesborins","date":"2017-12-14T11:25:38.091Z","type":"join"}
{"nick":"jmdyck","date":"2017-12-14T12:46:12.475Z","type":"join"}
{"nick":"bradleymeck","date":"2017-12-14T13:02:29.433Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-14T13:15:01.347Z","type":"quit"}
{"nick":"marxo","date":"2017-12-14T13:23:42.831Z","type":"join"}
{"nick":"Emulous","reason":"Ping timeout: 272 seconds","date":"2017-12-14T13:48:44.204Z","type":"quit"}
{"nick":"marxo_","date":"2017-12-14T13:58:35.317Z","type":"join"}
{"nick":"marxo","reason":"Ping timeout: 268 seconds","date":"2017-12-14T14:01:52.765Z","type":"quit"}
{"nick":"gibson042","date":"2017-12-14T14:10:27.866Z","type":"join"}
{"nick":"bradleymeck","date":"2017-12-14T14:12:20.944Z","type":"join"}
{"nick":"spectranaut","reason":"Quit: No Ping reply in 180 seconds.","date":"2017-12-14T14:38:57.803Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T14:39:40.420Z","type":"join"}
{"nick":"spectranaut","date":"2017-12-14T14:40:04.301Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2017-12-14T14:44:17.472Z","type":"quit"}
{"nick":"Emulous","date":"2017-12-14T15:06:47.643Z","type":"join"}
{"nick":"Emulous","reason":"Ping timeout: 260 seconds","date":"2017-12-14T15:56:16.613Z","type":"quit"}
{"nick":"AtumT","date":"2017-12-14T16:16:35.218Z","type":"join"}
{"nick":"jwalden","date":"2017-12-14T16:35:55.090Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-14T16:42:51.086Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T16:47:10.479Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-12-14T16:47:40.610Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T16:48:12.480Z","type":"join"}
{"nick":"marxo_","reason":"Ping timeout: 248 seconds","date":"2017-12-14T17:41:20.079Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-14T17:53:44.437Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2017-12-14T18:26:28.499Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T18:27:51.099Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2017-12-14T18:28:32.067Z","type":"quit"}
{"nick":"darkSeid_","date":"2017-12-14T19:05:57.441Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2017-12-14T19:06:04.531Z","type":"quit"}
{"nick":"AtumT","date":"2017-12-14T19:07:25.483Z","type":"join"}
{"nick":"AtumT_","date":"2017-12-14T19:19:11.605Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2017-12-14T19:19:45.293Z","type":"quit"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2017-12-14T19:50:24.052Z","type":"quit"}
{"nick":"Domenic","message":"I'm thinking of preparing a proposal to censor Function.prototype.toString in a per-function opt-in manner. Do people have any ideas on the API? So far I have (a) a new pragma e.g. 'use no Function.prototype.toString'; and (b) a symbol e.g. fn[Symbol.noFunctionToString] = true","date":"2017-12-14T19:52:55.598Z","type":"message"}
{"nick":"Domenic","message":"aklein: ^","date":"2017-12-14T19:53:21.140Z","type":"message"}
{"nick":"bradleymeck","message":"please no on the symbol","date":"2017-12-14T19:53:41.444Z","type":"message"}
{"nick":"bradleymeck","message":"is there ever a time that a function wants to go from censored to public?","date":"2017-12-14T19:54:04.597Z","type":"message"}
{"nick":"annevk","message":"What's the motivation for this? So you can do what the platform does?","date":"2017-12-14T19:54:20.095Z","type":"message"}
{"nick":"Domenic","message":"That, and memory usage, and encapsulation","date":"2017-12-14T19:54:51.987Z","type":"message"}
{"nick":"Domenic","message":"bradleymeck: I wasn't envisioning enabling un-censoring; fair point.","date":"2017-12-14T19:55:16.108Z","type":"message"}
{"nick":"aklein","message":"Domenic: uncensoring shouldn't be supported if we want to allow memory optimization. I have to admit I was imagining something outside the language, a la CSP","date":"2017-12-14T19:57:15.169Z","type":"message"}
{"nick":"Domenic","message":"Hmmm interesting","date":"2017-12-14T19:57:35.688Z","type":"message"}
{"nick":"Domenic","message":"I guess the question is scope; CSP would be whole page scoped","date":"2017-12-14T19:57:47.942Z","type":"message"}
{"nick":"not-an-aardvark","date":"2017-12-14T19:59:41.180Z","type":"join"}
{"nick":"aklein","message":"For engines I think it might be useful to know per resource, which I guess is more fine-grained...and I guess a downside of CSP-like is that you also get the CSP-y problem of libraries needing to deal with being loaded into such an environment","date":"2017-12-14T20:00:16.062Z","type":"message"}
{"nick":"aklein","message":"if you want per-function the pragma seems like the right place to start, as ugly as it is","date":"2017-12-14T20:00:51.185Z","type":"message"}
{"nick":"jwalden","date":"2017-12-14T20:05:57.520Z","type":"join"}
{"nick":"ljharb","message":"Domenic: if a pragma, why not a keyword?","date":"2017-12-14T20:06:09.694Z","type":"message"}
{"nick":"ljharb","message":"Domenic: `secret function () {}` or something","date":"2017-12-14T20:06:19.336Z","type":"message"}
{"nick":"Domenic","message":"ljharb: backward compat","date":"2017-12-14T20:06:22.066Z","type":"message"}
{"nick":"ljharb","message":"ah, true","date":"2017-12-14T20:06:30.528Z","type":"message"}
{"nick":"Domenic","message":"Also you could then do it per source file","date":"2017-12-14T20:06:46.800Z","type":"message"}
{"nick":"ljharb","message":"seems like there'd be pushback on more pragmas, but maybe it's fine for this case","date":"2017-12-14T20:06:49.456Z","type":"message"}
{"nick":"Domenic","message":"yeah, i'm unsure.","date":"2017-12-14T20:13:54.433Z","type":"message"}
{"nick":"ljharb","message":"would that impact stack traces (line numbers specifically), or be unrelated?","date":"2017-12-14T20:19:49.530Z","type":"message"}
{"nick":"cloudshu","message":"Domenic: i am in favor of such censorship","date":"2017-12-14T20:21:19.264Z","type":"message"}
{"nick":"cloudshu","message":"also agreed on that censorship will be a 1-way switch","date":"2017-12-14T20:22:28.047Z","type":"message"}
{"nick":"cloudshu","message":"or, should be","date":"2017-12-14T20:22:32.398Z","type":"message"}
{"nick":"cloudshu","message":"i'm having trouble imagining where this censorship is desired on a per-function granularity though","date":"2017-12-14T20:23:24.761Z","type":"message"}
{"nick":"ljharb","message":"it definitely feels like it needs to be tied to the source text, just like the toString output is, and not runtime-changeable in either direction","date":"2017-12-14T20:23:41.686Z","type":"message"}
{"nick":"Domenic","message":"Yeah, I think I'm abandoning the symbol idea; good thing I asked this channel","date":"2017-12-14T20:23:57.102Z","type":"message"}
{"nick":"Domenic","message":"I think this would impact line numbers in the same way that C++ functions currently do. (I'm not sure what that is.)","date":"2017-12-14T20:24:11.201Z","type":"message"}
{"nick":"ljharb","message":"whatever the impact, it'd need to integrate with the stacks proposal (if not the current one, the followon ones mark wants to do)","date":"2017-12-14T20:24:38.914Z","type":"message"}
{"nick":"Domenic","message":"cloudshu: I agree per-function might not be useful. Per source file is useful though, as opposed to whole-web-page.","date":"2017-12-14T20:24:42.285Z","type":"message"}
{"nick":"Domenic","message":"ljharb: agreed.","date":"2017-12-14T20:24:49.137Z","type":"message"}
{"nick":"ljharb","message":"and you want it to work on Scripts too, not just Modules?","date":"2017-12-14T20:24:59.264Z","type":"message"}
{"nick":"cloudshu","message":"Domenic: yeah, agreed","date":"2017-12-14T20:25:19.737Z","type":"message"}
{"nick":"ljharb","message":"also would i be able to runtime-distinguish native functions, from non-native censored functions?","date":"2017-12-14T20:25:42.361Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: wait, why would line numbers be impacted by discarding source?","date":"2017-12-14T20:25:59.941Z","type":"message"}
{"nick":"ljharb","message":"cloudshu: if the source text is censored, and a stack trace still points to a line number within it, that might be an issue","date":"2017-12-14T20:26:15.838Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: i'm not understanding in what way","date":"2017-12-14T20:26:32.335Z","type":"message"}
{"nick":"ljharb","message":"off the top of my head i'm not sure either","date":"2017-12-14T20:26:43.927Z","type":"message"}
{"nick":"ljharb","message":"i've only had 20 minutes to think about toString censorship :-p","date":"2017-12-14T20:26:57.415Z","type":"message"}
{"nick":"ljharb","message":"i'm just anticipating an interaction","date":"2017-12-14T20:27:00.351Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: \"censorship\" here is just that toString() returns some fixed string \"[no source]\" or whatever, right?","date":"2017-12-14T20:27:01.432Z","type":"message"}
{"nick":"cloudshu","message":"not any additional censorship","date":"2017-12-14T20:27:08.185Z","type":"message"}
{"nick":"ljharb","message":"i assume so. but toString serves as a quasi-toSource atm, so despite the committee's preference to avoid toSource, there still might be interesting interactions to consider","date":"2017-12-14T20:27:45.384Z","type":"message"}
{"nick":"ljharb","message":"source maps, for example","date":"2017-12-14T20:27:50.374Z","type":"message"}
{"nick":"ljharb","message":"the debugger having superpowers to see into censored source","date":"2017-12-14T20:28:04.257Z","type":"message"}
{"nick":"cloudshu","message":"debuggers most definitely do not use toString to do source mapping","date":"2017-12-14T20:28:27.286Z","type":"message"}
{"nick":"ljharb","message":"well yeah","date":"2017-12-14T20:28:30.833Z","type":"message"}
{"nick":"ljharb","message":"but would it be surprising or desirable for a dev using a debugger to be able to see censored function source","date":"2017-12-14T20:28:48.311Z","type":"message"}
{"nick":"cloudshu","message":"i am skeptical on line numbers being an issue -- toString for a long time in SM didn't even return the original string","date":"2017-12-14T20:28:52.998Z","type":"message"}
{"nick":"ljharb","message":"it very well might be the case that everything i've mentioned as a possible pitfall is a non-issue. i'm just spitballing :-)","date":"2017-12-14T20:28:58.771Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: maybe it's because \"censorship\" has very wide connotation","date":"2017-12-14T20:29:26.231Z","type":"message"}
{"nick":"Domenic","message":"ljharb: I don't think we'd want to have them be distinguishable? But you get the benefits even if they are, so if there's some reason, then we could do it.","date":"2017-12-14T20:30:09.506Z","type":"message"}
{"nick":"ljharb","message":"Domenic: lodash for example has a lot of pivots on \"is this function native or not\", for better or worse","date":"2017-12-14T20:30:57.943Z","type":"message"}
{"nick":"cloudshu","message":"Domenic: well, they're necessarily distinguishable if they return a fixed string in actual impls","date":"2017-12-14T20:33:17.162Z","type":"message"}
{"nick":"cloudshu","message":"if their toString, that is","date":"2017-12-14T20:33:29.744Z","type":"message"}
{"nick":"Domenic","message":"ljharb: sure, the question is, do we want lodash to detect these censored things as native or not.","date":"2017-12-14T20:33:38.618Z","type":"message"}
{"nick":"Domenic","message":"cloudshu: if this version makes it return `function foo() { [native code] }` then they're not","date":"2017-12-14T20:34:08.974Z","type":"message"}
{"nick":"cloudshu","message":"Domenic: ah ha, i see","date":"2017-12-14T20:34:18.526Z","type":"message"}
{"nick":"cloudshu","message":"i have vague misgivings about giving users ability to masquerade their functions as native code","date":"2017-12-14T20:34:44.042Z","type":"message"}
{"nick":"cloudshu","message":"wait, they can easily enough do this now, i guess","date":"2017-12-14T20:35:20.389Z","type":"message"}
{"nick":"ljharb","message":"cloudshu: no they can't","date":"2017-12-14T20:38:39.095Z","type":"message"}
{"nick":"ljharb","message":"cloudshu: `Function.prototype.toString.call()` with a cached/known-good Function.prototype.toString will only ever return the native code thing for real native functions","date":"2017-12-14T20:39:12.496Z","type":"message"}
{"nick":"caridy","date":"2017-12-14T20:41:34.476Z","type":"join"}
{"nick":"cloudshu","message":"ljharb: ah ok, are most frameworks doing that?","date":"2017-12-14T20:55:38.494Z","type":"message"}
{"nick":"cloudshu","message":"in any case, then my misgivings stand","date":"2017-12-14T20:56:11.103Z","type":"message"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2017-12-14T21:04:48.485Z","type":"quit"}
{"nick":"Bakkot","message":"It is already possible to do per-function hiding of .toString by overwriting F.p.toString, but it's somewhat tricky to do well since you also have to overwrite it in new realms","date":"2017-12-14T21:07:35.654Z","type":"message"}
{"nick":"Bakkot","message":"(if you run first of course)","date":"2017-12-14T21:08:06.695Z","type":"message"}
{"nick":"Bakkot","message":"anyone who is serious about detecting nativeness is using a cached F.p.toString, though, yes","date":"2017-12-14T21:09:03.737Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: a possible API would be a method on Function.prototype like .bind","date":"2017-12-14T21:12:57.163Z","type":"message"}
{"nick":"Domenic","message":"Ah, not bad.","date":"2017-12-14T21:13:15.496Z","type":"message"}
{"nick":"Bakkot","message":"(.bind already accomplishes this, in fact, but with other effects you probably don't want.)","date":"2017-12-14T21:13:39.710Z","type":"message"}
{"nick":"Bakkot","message":"'.sourceless()', maybe?","date":"2017-12-14T21:14:58.546Z","type":"message"}
{"nick":"cloudshu","message":".noString()","date":"2017-12-14T21:15:23.690Z","type":"message"}
{"nick":"Bakkot","message":"I guess there's two possibilities for how such a method could work - changing the behavior of F.p.toString for its receiver, or giving you a new function with the same behavior except for F.p.toString.","date":"2017-12-14T21:17:47.094Z","type":"message"}
{"nick":"Bakkot","message":"would strongly prefer the latter.","date":"2017-12-14T21:17:50.412Z","type":"message"}
{"nick":"Domenic","message":"Hmm, but all those problems with homeobject copying etc...","date":"2017-12-14T21:18:16.613Z","type":"message"}
{"nick":"Bakkot","message":"would require more work from enginges to get the memory usage benefits, but I think it would be a lot nicer.","date":"2017-12-14T21:18:23.024Z","type":"message"}
{"nick":"cloudshu","message":"and identity issues","date":"2017-12-14T21:20:10.827Z","type":"message"}
{"nick":"Bakkot","message":"I would expect the common pattern to be (function literal).sourceless(), in which case it really wouldn't matter.","date":"2017-12-14T21:20:39.233Z","type":"message"}
{"nick":"Domenic","message":"How do you do that for methods though","date":"2017-12-14T21:26:15.993Z","type":"message"}
{"nick":"Domenic","message":"And classes","date":"2017-12-14T21:26:18.928Z","type":"message"}
{"nick":"Domenic","message":"Leaning back toward directive.","date":"2017-12-14T21:26:26.865Z","type":"message"}
{"nick":"Bakkot","message":"Mm, fair, hadn't considered those.","date":"2017-12-14T21:26:30.610Z","type":"message"}
{"nick":"Bakkot","message":"Works fine for classes, but not so much for methods.","date":"2017-12-14T21:26:44.250Z","type":"message"}
{"nick":"cloudshu","message":"Reflect.sourceless(thing)?","date":"2017-12-14T21:29:06.456Z","type":"message"}
{"nick":"cloudshu","message":"i still want noString though","date":"2017-12-14T21:29:28.769Z","type":"message"}
{"nick":"darkSeid_","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2017-12-14T21:30:48.466Z","type":"quit"}
{"nick":"Bakkot","message":"I increasingly just want to start all my programs with `delete Function.prototype.toString;`","date":"2017-12-14T21:31:16.879Z","type":"message"}
{"nick":"darkSeid_","date":"2017-12-14T21:32:29.104Z","type":"join"}
{"nick":"ljharb","message":"could you do it on methods with a decorator?","date":"2017-12-14T21:40:28.724Z","type":"message"}
{"nick":"ljharb","message":"ie, `.sourceless()` or whatever for the normal case, and a decorator just does that replacement for you","date":"2017-12-14T21:40:44.139Z","type":"message"}
{"nick":"ljharb","message":"(such that `f !== f.sourceless()`, just like .bind)","date":"2017-12-14T21:40:54.031Z","type":"message"}
{"nick":"Bakkot","message":"decorators for methods in object literals aren't even a proposal at the moment, IIRC","date":"2017-12-14T21:41:37.338Z","type":"message"}
{"nick":"ljharb","message":"sure, but absent a way to observe [[HomeObject]], are methods in object literals anything more than concise syntax at the moment? :-)","date":"2017-12-14T21:42:16.194Z","type":"message"}
{"nick":"ljharb","message":"you're right tho that either way we'd want a decorator to work for that :-/","date":"2017-12-14T21:42:36.300Z","type":"message"}
{"nick":"Bakkot","message":"I do think a new prototype method would have a much higher chance of making it through committee","date":"2017-12-14T21:43:47.212Z","type":"message"}
{"nick":"Bakkot","message":"syntax is expensive","date":"2017-12-14T21:43:50.791Z","type":"message"}
{"nick":"ljharb","message":"prototype methods aren't syntax","date":"2017-12-14T21:44:53.336Z","type":"message"}
{"nick":"ljharb","message":"but sure, `Reflect.sourceless()` or similar is fine","date":"2017-12-14T21:44:57.029Z","type":"message"}
{"nick":"ljharb","message":"(altho we'd need a different namespace, since Reflect is just for proxy traps iirc)","date":"2017-12-14T21:45:11.187Z","type":"message"}
{"nick":"Domenic","message":"I'm glad that me saying that over and over (about Reflect) seems to have finally stuck :)","date":"2017-12-14T22:06:21.547Z","type":"message"}
{"nick":"Domenic","message":"Bakkot: do you think directives are as expensive as syntax?","date":"2017-12-14T22:06:48.876Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: right, that's my point","date":"2017-12-14T22:07:12.257Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: uhhh approximately yes.","date":"2017-12-14T22:07:16.786Z","type":"message"}
{"nick":"Bakkot","message":"they are syntax.","date":"2017-12-14T22:07:20.988Z","type":"message"}
{"nick":"Bakkot","message":"Not as much as, say, `match`, but still way more than a new prototype method.","date":"2017-12-14T22:07:51.970Z","type":"message"}
{"nick":"ljharb","message":"Domenic: lol what should the different namespace be called tho? some have suggested \"System\" ᕕ( ᐛ )ᕗ","date":"2017-12-14T22:08:14.014Z","type":"message"}
{"nick":"ljharb","message":"(inb4 response: just put it on Function)","date":"2017-12-14T22:08:39.061Z","type":"message"}
{"nick":"caridy","date":"2017-12-14T22:13:15.549Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-12-14T22:13:32.411Z","type":"quit"}
{"nick":"caridy","date":"2017-12-14T22:14:08.876Z","type":"join"}
{"nick":"ChanServ","reason":"*.net *.split","date":"2017-12-14T22:17:40.880Z","type":"quit"}
{"nick":"aklein","message":"does anyone of know a previous attempt to introduce async JSON parsing/serialization (the latter is a bit trickier, I know)? I see plenty of chatter about the lack of it on the interwebs, but nothing TC39/es-discuss related","date":"2017-12-14T22:22:35.252Z","type":"message"}
{"nick":"ljharb","message":"aklein: i'm pretty sure it's been on esdiscuss, one sec","date":"2017-12-14T22:23:04.909Z","type":"message"}
{"nick":"aklein","message":"ljharb: ah, so there is, didn't poke specifically enough there","date":"2017-12-14T22:23:31.060Z","type":"message"}
{"nick":"ljharb","message":"https://esdiscuss.org/topic/please-help-with-writing-spec-for-async-json-apis","date":"2017-12-14T22:23:50.143Z","type":"message"}
{"nick":"ChanServ","date":"2017-12-14T22:24:22.624Z","type":"join"}
{"nick":"Emulous","date":"2017-12-14T22:25:43.846Z","type":"join"}
{"nick":"aklein","message":"ljharb: thanks! reading through that thread now...doesn't sound like this may have ever gotten behind es-discuss though","date":"2017-12-14T22:25:52.518Z","type":"message"}
{"nick":"ljharb","message":"behind?","date":"2017-12-14T22:26:06.662Z","type":"message"}
{"nick":"ljharb","message":"i think it died there tho; seems like it's worth a stage 0 at least","date":"2017-12-14T22:27:03.028Z","type":"message"}
{"nick":"aklein","message":"*beyond","date":"2017-12-14T22:27:03.216Z","type":"message"}
{"nick":"ChanServ","reason":"*.net *.split","date":"2017-12-14T22:28:57.670Z","type":"quit"}
{"nick":"ChanServ","date":"2017-12-14T22:31:45.758Z","type":"join"}
{"nick":"Emulous","reason":"Ping timeout: 248 seconds","date":"2017-12-14T22:31:59.849Z","type":"quit"}
{"nick":"Emulous","date":"2017-12-14T22:32:14.852Z","type":"join"}
{"nick":"Emulous","reason":"Ping timeout: 248 seconds","date":"2017-12-14T22:45:51.920Z","type":"quit"}
{"nick":"caridy_","date":"2017-12-14T22:50:01.439Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2017-12-14T22:50:08.435Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2017-12-14T23:03:33.729Z","type":"quit"}
{"nick":"Emulous","date":"2017-12-14T23:43:50.459Z","type":"join"}
{"nick":"caridy_","reason":"Remote host closed the connection","date":"2017-12-14T23:52:30.506Z","type":"quit"}
{"nick":"Emulous","message":"Has any thought been given to some pleasant syntactic sugar like `Object.typeOf()` to get `null` returning \"null\" (and, perhaps depending on a second argument of options, `Array` instances returning \"array\" and/or constructors/class instances returning their class name)--with behavior otherwise like \"typeof\"?","date":"2017-12-14T23:55:57.960Z","type":"message"}
{"nick":"bradleymeck","message":"Emulous: why does it need to be syntax?","date":"2017-12-14T23:56:50.931Z","type":"message"}
{"nick":"bradleymeck","message":"do you just mean an API?","date":"2017-12-14T23:57:20.023Z","type":"message"}
{"nick":"Emulous","message":"ah yes, sorry, just an API","date":"2017-12-14T23:57:35.973Z","type":"message"}
{"nick":"Emulous","message":"lexical sugar :)","date":"2017-12-14T23:57:48.820Z","type":"message"}
{"nick":"bradleymeck","message":"it has been looked at many times, I just haven't seen it make much progress. Symbol.toStringTag kind of does what you want","date":"2017-12-14T23:59:03.699Z","type":"message"}
{"nick":"bradleymeck","message":"that + Object.prototype.toString.call(value)","date":"2017-12-14T23:59:36.438Z","type":"message"}
