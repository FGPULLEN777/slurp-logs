{"nick":"AtumT_","date":"2017-12-18T00:23:35.525Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2017-12-18T00:24:14.909Z","type":"quit"}
{"nick":"DeltaVis254","date":"2017-12-18T01:26:49.530Z","type":"join"}
{"nick":"DeltaVis254","message":"▄▄▄▄▄▄▄▄▄▄▄▄▄▄ https://www.youtube.com/watch?v=--jYqzJErTI LRH IS LIVE NOW!! CALL 415-349-5666 #LRH EFNETvehcrfzbu: ljharb spectranaut jeffmo gcommer srl295 wha121[m] zbraniecki surma gskachkov basicdays annevk mathiasbynens jackhorton STRML caridy bterlson IgnoredA1bience caitp Jasuruzakovgmail AtumT_ Bakkot maggiepint rektide Domenic pandem_ bstoroz samth dilij","date":"2017-12-18T01:26:53.688Z","type":"message"}
{"nick":"DeltaVis254","message":"▄▄▄▄▄▄▄▄▄▄▄▄ https://www.youtube.com/watch?v=--jYqzJErTI LRH IS LIVE NOW!! CALL 415-349-5666 #LRH EFNETqhjkgwug: annevk wycats jackhorton Bakkot ljharb jeffmo AtumT_ STRML brianloveswords samth bterlson zbraniecki pandem_ wha121[m] spectranaut bstoroz dilijev gkatsev basicdays Jasuruzakovgmail shachaf Havvy H|f|ish wadadli gcommer dpk gskachkov gsathya paulfryzel akirose flet rekt","date":"2017-12-18T01:28:23.647Z","type":"message"}
{"nick":"DeltaVis254","message":"▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ https://www.youtube.com/watch?v=--jYqzJErTI LRH IS LIVE NOW!! CALL 415-349-5666 #LRH EFNETdlugatfj: jmdyck bstoroz dilijev wha121[m] gcommer gskachkov paulfryzel akirose tobie caitp jackhorton Havvy srl295 jeffmo spectranaut Bakkot surma shachaf wadadli rektide zbraniecki flet dpk Domenic AtumT_ brianloveswords daveherman wycats","date":"2017-12-18T01:28:23.762Z","type":"message"}
{"nick":"DeltaVis254","reason":"Excess Flood","date":"2017-12-18T01:28:23.762Z","type":"quit"}
{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2017-12-18T01:54:20.732Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-12-18T03:28:45.172Z","type":"join"}
{"nick":"howdoi","date":"2017-12-18T04:55:53.175Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-12-18T05:02:43.907Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-12-18T05:38:08.093Z","type":"quit"}
{"nick":"gskachkov","date":"2017-12-18T08:09:54.546Z","type":"join"}
{"nick":"gskachkov_","date":"2017-12-18T08:25:06.307Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 248 seconds","date":"2017-12-18T08:27:45.474Z","type":"quit"}
{"nick":"gskachkov_","new_nick":"gskachkov","date":"2017-12-18T08:27:45.837Z","type":"nick"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-12-18T08:42:59.430Z","type":"quit"}
{"nick":"gskachkov","date":"2017-12-18T08:44:32.073Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-12-18T08:46:28.897Z","type":"quit"}
{"nick":"gskachkov","date":"2017-12-18T08:50:41.421Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-12-18T08:53:07.108Z","type":"quit"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T08:55:02.335Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T08:56:15.343Z","type":"join"}
{"nick":"gskachkov","date":"2017-12-18T08:57:18.567Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-12-18T08:58:02.112Z","type":"quit"}
{"nick":"gskachkov","date":"2017-12-18T09:00:19.038Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:00:19.169Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:02:35.567Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:07:13.603Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:08:34.266Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:12:57.391Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:14:33.572Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:19:52.823Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:20:12.575Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:26:58.776Z","type":"quit"}
{"nick":"caridy_","date":"2017-12-18T09:26:59.452Z","type":"join"}
{"nick":"caridy_","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:31:19.020Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:32:52.374Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:37:33.285Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:38:14.911Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:43:33.420Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:44:37.900Z","type":"join"}
{"nick":"caridy_","date":"2017-12-18T09:49:17.999Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:49:18.114Z","type":"quit"}
{"nick":"caridy_","reason":"Read error: Connection reset by peer","date":"2017-12-18T09:56:56.085Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T09:57:55.476Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:02:31.758Z","type":"quit"}
{"nick":"gskachkov","reason":"Ping timeout: 248 seconds","date":"2017-12-18T10:03:12.027Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:04:05.273Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:10:05.220Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:11:37.442Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:16:01.592Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:17:38.821Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:23:57.933Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:25:36.276Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:29:45.357Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:31:30.358Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:38:09.372Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:38:50.265Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:44:09.344Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:45:42.526Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:50:09.586Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T10:51:07.519Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T10:58:36.669Z","type":"quit"}
{"nick":"caridy_","date":"2017-12-18T10:58:41.433Z","type":"join"}
{"nick":"gskachkov","date":"2017-12-18T11:02:00.044Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-12-18T11:12:50.170Z","type":"quit"}
{"nick":"caridy_","reason":"Read error: Connection reset by peer","date":"2017-12-18T11:22:11.552Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T11:23:11.230Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-12-18T11:25:11.184Z","type":"quit"}
{"nick":"mylesborins","date":"2017-12-18T11:25:41.779Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T11:28:23.322Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T11:29:02.538Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2017-12-18T11:34:25.585Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T11:35:41.906Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-12-18T12:29:30.672Z","type":"quit"}
{"nick":"jmdyck","date":"2017-12-18T12:54:08.268Z","type":"join"}
{"nick":"darkSeid_","date":"2017-12-18T14:02:59.127Z","type":"join"}
{"nick":"gibson042","date":"2017-12-18T14:26:30.861Z","type":"join"}
{"nick":"AtumT","date":"2017-12-18T14:41:26.001Z","type":"join"}
{"nick":"bradleymeck","date":"2017-12-18T15:02:49.591Z","type":"join"}
{"nick":"bradleymeck","message":"mmmm, a curious isolation problem, does anyone have suggestions on using async functions in environment self hosted core? It has been pointed out that you can make them really broken with `Promise.prototype.then = null` since `await` is going through that. The only solution I have is to manually assign the original .then to the result by wrapping async functions.","date":"2017-12-18T15:04:54.165Z","type":"message"}
{"nick":"bradleymeck","message":"I think this also might be a bug given this example: https://jsbin.com/kiloluyovu/edit?js,console","date":"2017-12-18T16:03:22.168Z","type":"message"}
{"nick":"serbang","date":"2017-12-18T16:24:09.619Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-12-18T17:13:01.075Z","type":"quit"}
{"nick":"caridy","date":"2017-12-18T17:13:35.165Z","type":"join"}
{"nick":"Fishrock123","date":"2017-12-18T17:46:44.176Z","type":"join"}
{"nick":"serbang","reason":"Quit: Connection closed for inactivity","date":"2017-12-18T18:33:52.364Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-18T18:44:31.937Z","type":"quit"}
{"nick":"darkSeid_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-12-18T18:57:17.864Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-18T19:03:11.771Z","type":"join"}
{"nick":"darkSeid_","date":"2017-12-18T19:07:53.316Z","type":"join"}
{"nick":"ljharb","message":"bradleymeck: no, it's not","date":"2017-12-18T19:25:39.823Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: `await` is supposed to call the intrinsic, and explicitly *not* call `Promise.prototype.then`","date":"2017-12-18T19:25:51.468Z","type":"message"}
{"nick":"bradleymeck","message":"it is not a bug that `await` calls the .then?","date":"2017-12-18T19:26:14.591Z","type":"message"}
{"nick":"bradleymeck","message":"because browsers call the .then","date":"2017-12-18T19:26:29.874Z","type":"message"}
{"nick":"ljharb","message":"yes, that's a bug","date":"2017-12-18T19:26:59.939Z","type":"message"}
{"nick":"ljharb","message":"i definitely remember it coming up in committee and we talked about it not calling Promise.prototype.then","date":"2017-12-18T19:27:14.655Z","type":"message"}
{"nick":"ljharb","message":"and i expressed concern about not being able to polyfill it, but didn't object because this way was more robust.","date":"2017-12-18T19:27:28.202Z","type":"message"}
{"nick":"ljharb","message":"(iirc)","date":"2017-12-18T19:27:31.674Z","type":"message"}
{"nick":"ljharb","message":"bterlson, can you confirm?","date":"2017-12-18T19:27:37.317Z","type":"message"}
{"nick":"ljharb","message":"hmm","date":"2017-12-18T19:27:45.439Z","type":"message"}
{"nick":"ljharb","message":"i know it calls %PromiseResolve%, but yeah maybe it does call `.then`","date":"2017-12-18T19:27:52.398Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: some digging is showing other inconsistencies","date":"2017-12-18T19:33:03.889Z","type":"message"}
{"nick":"bradleymeck","message":"we may need to abstract another level *again* to make it consistent :(","date":"2017-12-18T19:33:22.576Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2017-12-18T19:33:42.622Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: extending Promise is probably the biggest example","date":"2017-12-18T19:37:53.836Z","type":"message"}
{"nick":"bradleymeck","message":"no LazyPromise if you cant intercept the await","date":"2017-12-18T19:38:36.490Z","type":"message"}
{"nick":"ljharb","message":"ah k","date":"2017-12-18T19:38:41.509Z","type":"message"}
{"nick":"ljharb","message":"so then yeah, i'm probably wrong, and the .then is observably called","date":"2017-12-18T19:38:48.661Z","type":"message"}
{"nick":"ljharb","message":"you could transpile async functions in core tho, to actual promise calls, and then use a SafePromise instead of the real Promise?","date":"2017-12-18T19:39:19.219Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: interestingly though it isn't called in Promise#then if the return value is a Promise","date":"2017-12-18T19:46:17.070Z","type":"message"}
{"nick":"bradleymeck","message":"but it is called if the return value is a thenable","date":"2017-12-18T19:46:24.081Z","type":"message"}
{"nick":"bradleymeck","message":"so, we can't actually wrap w/ SafePromise subclass easily unless we wrap *all* async functions with `SafePromise.resolve(async () => {})` which would still be somewhat inconsistent once it passes through an await","date":"2017-12-18T19:47:26.300Z","type":"message"}
{"nick":"bradleymeck","message":"vs if returned from a .then which would skip the custom .then","date":"2017-12-18T19:47:54.479Z","type":"message"}
{"nick":"ljharb","message":"ah","date":"2017-12-18T19:56:30.699Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-18T20:41:06.376Z","type":"quit"}
{"nick":"jackhorton","reason":"Quit: Connection closed for inactivity","date":"2017-12-18T20:46:21.189Z","type":"quit"}
{"nick":"ChanServ","reason":"shutting down","date":"2017-12-18T20:52:36.662Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-12-18T20:59:40.414Z","type":"quit"}
{"nick":"ChanServ","date":"2017-12-18T21:01:38.191Z","type":"join"}
{"nick":"bradleymeck","date":"2017-12-18T21:09:35.539Z","type":"join"}
{"nick":"Fishrock123","date":"2017-12-18T21:14:22.471Z","type":"join"}
{"nick":"jwalden","date":"2017-12-18T21:22:39.222Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-12-18T21:39:43.509Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-12-18T22:21:33.446Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-12-18T22:36:09.793Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-18T22:53:35.368Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-18T22:57:34.524Z","type":"join"}
