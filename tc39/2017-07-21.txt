{"nick":"Fishrock123","date":"2017-07-21T00:07:59.515Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 240 seconds","date":"2017-07-21T00:12:05.501Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-07-21T00:27:45.898Z","type":"join"}
{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2017-07-21T01:03:37.394Z","type":"quit"}
{"nick":"gibson042","date":"2017-07-21T01:30:49.442Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 248 seconds","date":"2017-07-21T02:02:09.549Z","type":"quit"}
{"nick":"gibson042","date":"2017-07-21T02:16:58.089Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2017-07-21T02:34:57.225Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-07-21T03:07:42.080Z","type":"quit"}
{"nick":"caridy","date":"2017-07-21T03:08:12.286Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-07-21T03:37:29.874Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-07-21T04:22:44.635Z","type":"quit"}
{"nick":"afrael_","date":"2017-07-21T06:28:30.217Z","type":"join"}
{"nick":"gskachkov_","date":"2017-07-21T07:22:47.901Z","type":"join"}
{"nick":"Bakkot","message":"anyone know why you can `export default` a function or class declaration but not other kinds of declaration?","date":"2017-07-21T08:20:46.148Z","type":"message"}
{"nick":"ljharb","message":"`export default function foo() {}` hoists `foo`, `export default class foo {}` hoists `class` in a tdz; would `export default let x = 3` hoist `x` in a tdz?","date":"2017-07-21T08:23:53.202Z","type":"message"}
{"nick":"ljharb","message":"(i assume you're asking about var/let/const, unless i'm missing other kinds of declarations)","date":"2017-07-21T08:24:04.147Z","type":"message"}
{"nick":"Bakkot","message":"I would assume it would host `x` in a tdz, yes.","date":"2017-07-21T08:24:22.314Z","type":"message"}
{"nick":"Bakkot","message":"basically just sugar for `let x = 3; export default x;`, I guess. same way as `export default class C {}` is sugar for `let C = class C {}; export default C;`","date":"2017-07-21T08:28:29.564Z","type":"message"}
{"nick":"ljharb","message":"yeah, i guess that'd make sense","date":"2017-07-21T08:29:38.308Z","type":"message"}
{"nick":"ljharb","message":"i originally thought `export default` was for values only, but since functions and classes are treated as declarations instead (which i find bonkers; i think they should both be expressions only), it makes sense that let/const/var should work","date":"2017-07-21T08:30:14.313Z","type":"message"}
{"nick":"Bakkot","message":"Only relevant notes I can find (this is from before my time) are https://github.com/rwaldron/tc39-notes/blob/6422214b4fbff77194bce2064a9a9879a208df85/es6/2014-04/apr-8.md","date":"2017-07-21T08:32:27.065Z","type":"message"}
{"nick":"Bakkot","message":"\"YK: Special casing class and function to create bindings at the parent level for export default function foo and export default class foo. We should special case those expression forms to behave like declaration forms\"","date":"2017-07-21T08:32:37.927Z","type":"message"}
{"nick":"Bakkot","message":"which does make sense to me; they certainly look like declarations. but if you're going to allow some declarations there you really should allow all declarations.","date":"2017-07-21T08:33:27.227Z","type":"message"}
{"nick":"ljharb","message":"agreed","date":"2017-07-21T08:33:50.229Z","type":"message"}
{"nick":"ljharb","message":"to me they look like `module.exports = function foo () {}` which is expressions","date":"2017-07-21T08:33:58.371Z","type":"message"}
{"nick":"Bakkot","message":"Not even any grammar ambiguities!","date":"2017-07-21T08:34:04.663Z","type":"message"}
{"nick":"Bakkot","message":"maybe I will bring this up at a future meeting.","date":"2017-07-21T08:34:10.904Z","type":"message"}
{"nick":"Bakkot","message":"this one is well overbooked.","date":"2017-07-21T08:34:18.134Z","type":"message"}
{"nick":"ljharb","message":"indeed","date":"2017-07-21T08:38:30.714Z","type":"message"}
{"nick":"afrael_","reason":"Remote host closed the connection","date":"2017-07-21T09:46:18.392Z","type":"quit"}
{"nick":"afrael_","date":"2017-07-21T09:47:02.929Z","type":"join"}
{"nick":"afrael_","reason":"Remote host closed the connection","date":"2017-07-21T09:47:35.842Z","type":"quit"}
{"nick":"afrael_","date":"2017-07-21T10:18:05.204Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-07-21T10:25:13.348Z","type":"quit"}
{"nick":"mylesborins","date":"2017-07-21T10:25:41.732Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-07-21T11:23:51.785Z","type":"quit"}
{"nick":"jmdyck","date":"2017-07-21T11:45:45.053Z","type":"join"}
{"nick":"AtumT","date":"2017-07-21T12:45:55.564Z","type":"join"}
{"nick":"Fishrock123","date":"2017-07-21T13:45:53.666Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-07-21T13:56:44.048Z","type":"quit"}
{"nick":"caridy","date":"2017-07-21T13:57:35.852Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T15:10:56.574Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T15:11:35.523Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T15:11:43.406Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T15:13:28.869Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T15:13:54.664Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T15:35:48.018Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T17:10:39.195Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T17:14:44.506Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T18:31:44.942Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T18:34:48.635Z","type":"join"}
{"nick":"afrael_","date":"2017-07-21T19:07:38.163Z","type":"quit"}
{"nick":"Bakkot","message":"bterlson: class fields is going for stage 3, which requires you signing off on the current spec text; have you / are you going to get a chance to look at it before the meeting?","date":"2017-07-21T20:23:01.562Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: I will do so","date":"2017-07-21T20:23:19.383Z","type":"message"}
{"nick":"Bakkot","message":"Seperately, I think the spec text needs to be changed a little :( https://github.com/tc39/proposal-class-fields/issues/25","date":"2017-07-21T20:23:35.102Z","type":"message"}
{"nick":"bterlson","message":"I'm pretty up on that proposal but I'll take an official pass","date":"2017-07-21T20:23:36.457Z","type":"message"}
{"nick":"Bakkot","message":"which might require touching a lot of the main spec unless there's a clever way of doing it.","date":"2017-07-21T20:24:00.882Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: blah :/","date":"2017-07-21T20:24:39.442Z","type":"message"}
{"nick":"bterlson","message":"this is all because Contains is odd and shouldn't be","date":"2017-07-21T20:25:20.176Z","type":"message"}
{"nick":"bterlson","message":"the special case for super, etc. is bad","date":"2017-07-21T20:25:37.825Z","type":"message"}
{"nick":"Bakkot","message":"yeah.","date":"2017-07-21T20:27:10.632Z","type":"message"}
{"nick":"Bakkot","message":"I was talking with @jspedant about this just now, who suggested that Contains could take a hint of some kind. But I don't want to put that into this proposal if we can possibly avoid it.","date":"2017-07-21T20:27:54.019Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: I think that's probably the right long-term fix but the short-term strawman you propose sounds good to me","date":"2017-07-21T20:30:51.910Z","type":"message"}
{"nick":"Bakkot","message":"ugh","date":"2017-07-21T20:54:29.442Z","type":"message"}
{"nick":"Bakkot","message":"my idea in that issue would require more text than I thought; it would need to have a rule for everything which currently has a rule for `Contains`.","date":"2017-07-21T20:55:10.375Z","type":"message"}
{"nick":"Bakkot","message":"bterlson: is my comment in here correct? https://github.com/tc39/proposal-class-fields/issues/25#issuecomment-317106094","date":"2017-07-21T20:56:25.605Z","type":"message"}
{"nick":"Bakkot","message":"because if it's not I want to just modify `Contains` on arrows to allow passing through 'an IdentifierReference whose StringValue is  \"arguments\".'","date":"2017-07-21T20:57:04.439Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T21:45:43.946Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T21:57:23.992Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T21:57:30.988Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T22:07:29.632Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T22:22:44.256Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T22:50:44.632Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T22:53:55.415Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T22:58:02.632Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T23:06:38.986Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-07-21T23:07:50.277Z","type":"join"}
{"nick":"Fishrock123","reason":"Read error: Connection reset by peer","date":"2017-07-21T23:11:13.917Z","type":"quit"}
{"nick":"jmdyck","message":"Bakkot: Is ContainsArguments exactly parallel to Contains except for the base case?","date":"2017-07-21T23:12:26.219Z","type":"message"}
{"nick":"Bakkot","message":"ContainsArguments also goes through arrow functions.","date":"2017-07-21T23:12:46.424Z","type":"message"}
{"nick":"Bakkot","message":"(and takes no parameters.)","date":"2017-07-21T23:13:01.375Z","type":"message"}
{"nick":"jmdyck","message":"hm","date":"2017-07-21T23:13:13.916Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: I don't think you need to define it everywhere because of the chain rule?","date":"2017-07-21T23:13:39.631Z","type":"message"}
{"nick":"bterlson","message":"By default chain rule will propagate the call down the parse tree","date":"2017-07-21T23:13:52.717Z","type":"message"}
{"nick":"jmdyck","message":"but only for chain prods","date":"2017-07-21T23:14:03.327Z","type":"message"}
{"nick":"Bakkot","message":"I thought so at first, but no. Contains has a special \"default semantics\" in Algorithm Conventions.","date":"2017-07-21T23:14:12.016Z","type":"message"}
{"nick":"jmdyck","message":"anything with 2 or more nonterminals on rhs is not subject to chaining","date":"2017-07-21T23:14:31.156Z","type":"message"}
{"nick":"bterlson","message":"jmdyck: ahh right","date":"2017-07-21T23:16:59.354Z","type":"message"}
{"nick":"bterlson","message":"blargh","date":"2017-07-21T23:17:07.511Z","type":"message"}
{"nick":"bterlson","message":"damn","date":"2017-07-21T23:17:20.144Z","type":"message"}
{"nick":"bterlson","message":"this makes my auto-linking change less good","date":"2017-07-21T23:17:26.171Z","type":"message"}
{"nick":"bterlson","message":"presumably Contains should also link to the default implementation","date":"2017-07-21T23:17:32.974Z","type":"message"}
{"nick":"bterlson","message":"I guess I can make that work","date":"2017-07-21T23:17:43.475Z","type":"message"}
{"nick":"jmdyck","message":"i was thinking (not sure it's a good idea) that we could replace most of 'Contains' with an abstract operation that takes: 1) a node, 2) a node predicate (abstract op that takes a node and returns a boolean), and I guess 3) a boolean that indicates whether to 'go through' arrow functions.","date":"2017-07-21T23:18:45.835Z","type":"message"}
{"nick":"bterlson","message":"I think that's a good idea","date":"2017-07-21T23:19:04.179Z","type":"message"}
{"nick":"jmdyck","message":"Then Contains and ContainsArguments could just be a think wrapper around the generic.","date":"2017-07-21T23:19:12.556Z","type":"message"}
{"nick":"jmdyck","message":"s/think/thin/","date":"2017-07-21T23:19:18.716Z","type":"message"}
{"nick":"Bakkot","message":"jmdyck: \"a boolean that indicates whether to 'go through' arrow functions.\" is unnecessary; you can put that into the node predicate","date":"2017-07-21T23:19:47.095Z","type":"message"}
{"nick":"bterlson","message":"I was thinking same, currently re-reading #933 to see if it's relevant","date":"2017-07-21T23:19:50.583Z","type":"message"}
{"nick":"jmdyck","message":"you can?","date":"2017-07-21T23:20:09.214Z","type":"message"}
{"nick":"Bakkot","message":"well, depending on what the predicate does, I guess.","date":"2017-07-21T23:20:16.015Z","type":"message"}
{"nick":"jmdyck","message":"yeah","date":"2017-07-21T23:20:40.128Z","type":"message"}
{"nick":"Fishrock123","date":"2017-07-21T23:20:42.573Z","type":"join"}
{"nick":"bterlson","message":"predicate returns a tuple of \"found\" and \"visit children\"? :-P","date":"2017-07-21T23:21:01.664Z","type":"message"}
{"nick":"jmdyck","message":"i was thinking the predicate would return true when you reached the 'goal'","date":"2017-07-21T23:21:13.412Z","type":"message"}
{"nick":"Bakkot","message":"The most general form would be, it takes a node and an override definition for some nodes, and its definition is \"if there is an override definition for this node type, return the result of applying that to the node; otherwise apply yourself with the same set of override definitions to all nonterminal children; if any is 'true' return true; else return false.\"","date":"2017-07-21T23:21:49.680Z","type":"message"}
{"nick":"Bakkot","message":"but this requires first-class spec algorithms :P","date":"2017-07-21T23:22:12.104Z","type":"message"}
{"nick":"jmdyck","message":"we've already got first-class spec algs, though not much","date":"2017-07-21T23:22:29.863Z","type":"message"}
{"nick":"bterlson","message":"IOW, all spec algs are first-class :-P","date":"2017-07-21T23:23:07.397Z","type":"message"}
{"nick":"jmdyck","message":"e.g., second arg to EnqueueJob is an abstract op","date":"2017-07-21T23:24:21.642Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-07-21T23:36:31.575Z","type":"quit"}
