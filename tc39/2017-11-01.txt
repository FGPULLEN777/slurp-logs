{"nick":"Fishrock123","date":"2017-11-01T00:02:32.637Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-11-01T00:06:29.728Z","type":"quit"}
{"nick":"TabAtkins","message":"littledan: What's the value of 64-bit decimal, vs BigDecimal?","date":"2017-11-01T00:17:33.436Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-01T01:17:02.343Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-01T02:17:56.665Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 258 seconds","date":"2017-11-01T02:22:39.735Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-01T03:10:50.756Z","type":"join"}
{"nick":"tschneidereit","reason":"Ping timeout: 246 seconds","date":"2017-11-01T03:21:02.723Z","type":"quit"}
{"nick":"tschneidereit","date":"2017-11-01T03:24:18.652Z","type":"join"}
{"nick":"Fishrock123","reason":"Read error: Connection reset by peer","date":"2017-11-01T03:24:38.285Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-01T03:25:16.692Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 258 seconds","date":"2017-11-01T03:25:31.698Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-11-01T04:09:11.915Z","type":"quit"}
{"nick":"gibson042","date":"2017-11-01T04:37:02.849Z","type":"join"}
{"nick":"gibson042","reason":"Client Quit","date":"2017-11-01T04:37:15.837Z","type":"quit"}
{"nick":"caridy","date":"2017-11-01T04:55:59.337Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-11-01T04:56:16.796Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-01T04:58:59.119Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-01T04:59:36.823Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 258 seconds","date":"2017-11-01T05:04:02.657Z","type":"quit"}
{"nick":"jeffmo","message":"littledan: “How do you resolve it when everyone wants to be first” — the builtin module follows some convention/protocol for finding the presence of the polyfill when it initializes. That protocol is defined in such a way that it can only resolve to one thing (probably bad strawman example: tries to resolve /polyfills/<<builtinname>>. If found, delegates to that)","date":"2017-11-01T05:07:31.516Z","type":"message"}
{"nick":"jeffmo","message":"Another probably bad strawman: First builtin thay initializes looks for a global called MAGIC_BEAN_STALK that contains metadata that dictates/resolves polyfills","date":"2017-11-01T05:09:52.538Z","type":"message"}
{"nick":"jeffmo","message":"There are lots of ways to slice this apple","date":"2017-11-01T05:10:08.832Z","type":"message"}
{"nick":"jeffmo","message":"General idea though: Builtin owns the job of finding its replacement to delegate to somehow","date":"2017-11-01T05:10:32.246Z","type":"message"}
{"nick":"jeffmo","message":"That way builtins maintain control of registration so that various module system invariants can be preserved","date":"2017-11-01T05:11:21.072Z","type":"message"}
{"nick":"Fishrock123","date":"2017-11-01T05:14:11.683Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-01T05:14:35.213Z","type":"quit"}
{"nick":"caridy","date":"2017-11-01T05:56:58.716Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 258 seconds","date":"2017-11-01T06:02:18.652Z","type":"quit"}
{"nick":"annevk","message":"I’m also curious why it would not be BigDecimal","date":"2017-11-01T07:05:08.443Z","type":"message"}
{"nick":"annevk","message":"Sam Ruby tried to standardize it last time btwp","date":"2017-11-01T07:05:48.166Z","type":"message"}
{"nick":"annevk","message":"There are some blog posts","date":"2017-11-01T07:05:58.890Z","type":"message"}
{"nick":"caridy","date":"2017-11-01T09:00:00.996Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 255 seconds","date":"2017-11-01T09:04:43.999Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-11-01T10:25:13.926Z","type":"quit"}
{"nick":"mylesborins","date":"2017-11-01T10:25:44.749Z","type":"join"}
{"nick":"caridy","date":"2017-11-01T11:02:03.689Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 258 seconds","date":"2017-11-01T11:06:40.811Z","type":"quit"}
{"nick":"AtumT","date":"2017-11-01T11:41:29.684Z","type":"join"}
{"nick":"jmdyck","date":"2017-11-01T12:39:28.745Z","type":"join"}
{"nick":"littledan","message":"Something I find sort of surprising about BigDecimal is how to determine the number of digits in the result. Java BigDecimal seems to take a sort of \"significant digits\" approach, according to https://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html . I'm not sure if that's exactly what you want for division","date":"2017-11-01T12:40:10.331Z","type":"message"}
{"nick":"littledan","message":"this approach makes the number of digits observably different","date":"2017-11-01T12:41:12.022Z","type":"message"}
{"nick":"annevk","message":"littledan: I only meant versus 64-bit decimal","date":"2017-11-01T13:13:27.469Z","type":"message"}
{"nick":"annevk","message":"littledan: I’m not sure about significant digits","date":"2017-11-01T13:13:54.590Z","type":"message"}
{"nick":"littledan","message":"annevk: I mean, this is a problem that's inherent if you don't choose a maximum precision","date":"2017-11-01T13:47:19.305Z","type":"message"}
{"nick":"littledan","message":"64-bits \"is big enough for anyone\", vs arbitrary-precision decimal requiring some sort of significant digits-like rule","date":"2017-11-01T13:47:45.325Z","type":"message"}
{"nick":"littledan","message":"or we could be like Python and make a global setting for the precision!","date":"2017-11-01T13:47:57.278Z","type":"message"}
{"nick":"littledan","message":"jeffmo: Those protocols sound interesting","date":"2017-11-01T13:49:40.419Z","type":"message"}
{"nick":"caridy","date":"2017-11-01T14:04:38.731Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-11-01T14:04:41.561Z","type":"quit"}
{"nick":"caridy","date":"2017-11-01T14:04:54.181Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-11-01T14:05:33.965Z","type":"quit"}
{"nick":"gibson042","date":"2017-11-01T14:05:59.736Z","type":"join"}
{"nick":"caridy","date":"2017-11-01T14:06:00.362Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-11-01T14:07:59.617Z","type":"quit"}
{"nick":"caridy_","date":"2017-11-01T14:08:05.160Z","type":"join"}
{"nick":"caridy_","reason":"Remote host closed the connection","date":"2017-11-01T14:08:13.629Z","type":"quit"}
{"nick":"TabAtkins","message":"Or make the number of digits controllable, and inferred via syntax when first constructed? Like `1.00d` starts out with 2 digits of decimal precision, but you can later go `x.digits = 5` to give it five instead. (Or use the constructor like `BigDecimal(1, 5)` to start it out that way.)","date":"2017-11-01T14:09:44.211Z","type":"message"}
{"nick":"TabAtkins","message":"(Strawman, unsure if good idea.)","date":"2017-11-01T14:09:52.244Z","type":"message"}
{"nick":"TabAtkins","message":"(Alternately: just do a BigRational instead, arbitrary precision ahoy!)","date":"2017-11-01T14:10:22.883Z","type":"message"}
{"nick":"caridy","date":"2017-11-01T14:13:03.204Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-11-01T14:13:11.596Z","type":"quit"}
{"nick":"caridy","date":"2017-11-01T14:13:44.235Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-11-01T14:14:01.453Z","type":"quit"}
{"nick":"caridy","date":"2017-11-01T14:14:07.226Z","type":"join"}
{"nick":"littledan","message":"huh, you think the decimal values should be mutable? right now, all primitives are immutable","date":"2017-11-01T14:16:38.683Z","type":"message"}
{"nick":"TabAtkins","message":"Feel free to interpret my mutation as instead being a construction that specifies an alternate scale.","date":"2017-11-01T14:18:43.354Z","type":"message"}
{"nick":"TabAtkins","message":"(But like I said, rationals side-step the whole precision issue altogether, by implicitly offering precision up to the implementation size limit for BigInt.)","date":"2017-11-01T14:20:12.824Z","type":"message"}
{"nick":"littledan","message":"BigRational does completely solve it, but it's also the slowest (with all the gcd computations). IEEE decimal 64 has some hardware implementations in obscure platforms, but also on more platforms, optimized assembly implementations distributed by hardware vendors","date":"2017-11-01T14:44:39.923Z","type":"message"}
{"nick":"littledan","message":"having multiple precision versions for the same mathematical value was brought up as a disadvantage of IEEE Decimal in the past; if we have it in BigDecimal, presumably it will be a complaint there too","date":"2017-11-01T14:45:32.851Z","type":"message"}
{"nick":"annevk","message":"BigRational sounds more intuitive","date":"2017-11-01T15:17:27.858Z","type":"message"}
{"nick":"annevk","message":"But then I'm probably not a good source here, the last time I worked with significant digits was secondary school physics","date":"2017-11-01T15:18:31.025Z","type":"message"}
{"nick":"annevk","message":"littledan: could you optimize BigRational using the hardware code paths for decimal?","date":"2017-11-01T15:27:53.721Z","type":"message"}
{"nick":"littledan","message":"annevk: I don't think decimal hardware codepaths are widespread in the kinds of computers that run browsers. Anyway, they are pretty different; I don't know what you could reuse","date":"2017-11-01T15:28:44.911Z","type":"message"}
{"nick":"littledan","message":"oh, re: normalization, I found this: http://speleotrove.com/decimal/decifaq1.html#tzeros. And I guess Java's BigDecimal grew functions to manipulate the number of trailing zeros over time, to meet user needs, in a way that matches the functions in the IEEE decimal stnadard","date":"2017-11-01T15:53:42.312Z","type":"message"}
{"nick":"annevk","message":"littledan: cool, measurement was the reason I had to care at school","date":"2017-11-01T15:58:55.093Z","type":"message"}
