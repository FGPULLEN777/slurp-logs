{"nick":"Fishrock123","date":"2017-10-31T00:03:39.619Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 246 seconds","date":"2017-10-31T00:07:51.608Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-31T00:13:44.666Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-10-31T00:21:01.252Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2017-10-31T00:59:52.199Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2017-10-31T03:07:30.929Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-10-31T03:48:24.434Z","type":"quit"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2017-10-31T04:05:51.685Z","type":"quit"}
{"nick":"ephemera_","reason":"Quit: No Ping reply in 180 seconds.","date":"2017-10-31T04:23:03.703Z","type":"quit"}
{"nick":"ephemera_","date":"2017-10-31T04:24:35.760Z","type":"join"}
{"nick":"ephemera_","reason":"Quit: No Ping reply in 180 seconds.","date":"2017-10-31T04:47:34.430Z","type":"quit"}
{"nick":"ephemera_","date":"2017-10-31T04:48:52.672Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 255 seconds","date":"2017-10-31T06:43:25.999Z","type":"quit"}
{"nick":"gskachkov","date":"2017-10-31T08:16:01.588Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-10-31T08:19:13.393Z","type":"quit"}
{"nick":"gskachkov","date":"2017-10-31T08:30:15.459Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-10-31T08:36:11.869Z","type":"quit"}
{"nick":"gskachkov","date":"2017-10-31T08:37:29.693Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-10-31T08:41:18.203Z","type":"quit"}
{"nick":"gskachkov","date":"2017-10-31T09:09:02.653Z","type":"join"}
{"nick":"AtumT","date":"2017-10-31T09:28:23.769Z","type":"join"}
{"nick":"wadadli","reason":"Ping timeout: 248 seconds","date":"2017-10-31T10:00:17.029Z","type":"quit"}
{"nick":"adema","reason":"Ping timeout: 248 seconds","date":"2017-10-31T10:00:17.029Z","type":"quit"}
{"nick":"STRML","reason":"Ping timeout: 248 seconds","date":"2017-10-31T10:01:03.883Z","type":"quit"}
{"nick":"Kovensky","reason":"Ping timeout: 248 seconds","date":"2017-10-31T10:01:03.963Z","type":"quit"}
{"nick":"FireFly","reason":"Quit: Goodbye","date":"2017-10-31T10:01:39.164Z","type":"quit"}
{"nick":"FireFly","date":"2017-10-31T10:01:40.404Z","type":"join"}
{"nick":"Kov|kasumi","date":"2017-10-31T10:01:45.260Z","type":"join"}
{"nick":"STRML","date":"2017-10-31T10:01:55.696Z","type":"join"}
{"nick":"Kov|kasumi","new_nick":"Kovensky","date":"2017-10-31T10:01:57.067Z","type":"nick"}
{"nick":"adema","date":"2017-10-31T10:02:11.233Z","type":"join"}
{"nick":"wadadli","date":"2017-10-31T10:02:50.173Z","type":"join"}
{"nick":"Effilry","date":"2017-10-31T10:24:38.498Z","type":"join"}
{"nick":"FireFly","reason":"Ping timeout: 615 seconds","date":"2017-10-31T10:25:02.768Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-10-31T10:25:13.438Z","type":"quit"}
{"nick":"mylesborins","date":"2017-10-31T10:25:44.172Z","type":"join"}
{"nick":"Effilry","new_nick":"FireFy","date":"2017-10-31T11:00:04.414Z","type":"nick"}
{"nick":"FireFy","new_nick":"FireFly","date":"2017-10-31T11:00:07.826Z","type":"nick"}
{"nick":"jmdyck","date":"2017-10-31T13:07:54.580Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-10-31T13:14:56.142Z","type":"quit"}
{"nick":"gskachkov","date":"2017-10-31T13:15:29.492Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-10-31T13:18:57.990Z","type":"quit"}
{"nick":"gskachkov","date":"2017-10-31T13:26:01.796Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-10-31T13:27:37.706Z","type":"quit"}
{"nick":"littledan","message":"bterlson: The last time we discussed built-in modules, the killer problem was allowing polyfilling. Anyone have an idea for an API that would permit that?","date":"2017-10-31T13:42:01.222Z","type":"message"}
{"nick":"littledan","message":"I don't really see how you could import the built-in version of a module, change some things, and re-export it without breaking the kind of invariants that we try to have for modules (that importing it always gets the same thing); would we have an API specifically for getting the built-in version, which isn't import?","date":"2017-10-31T13:42:44.958Z","type":"message"}
{"nick":"iosys","reason":"\"Leaving\"","date":"2017-10-31T13:45:38.419Z","type":"part"}
{"nick":"caridy","date":"2017-10-31T15:10:36.337Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-10-31T15:27:08.949Z","type":"quit"}
{"nick":"caridy","date":"2017-10-31T15:27:42.704Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-10-31T15:34:38.247Z","type":"quit"}
{"nick":"caridy","date":"2017-10-31T15:35:29.679Z","type":"join"}
{"nick":"jwalden","date":"2017-10-31T15:41:18.625Z","type":"join"}
{"nick":"FireFly","new_nick":"FaerieFly","date":"2017-10-31T18:20:02.549Z","type":"nick"}
{"nick":"jeffmo","message":"littledan: mayhaps some conventional loading mechanism that built-in modules use to check for a polyfill before initializing themselves?","date":"2017-10-31T18:44:12.599Z","type":"message"}
{"nick":"ljharb","message":"whatever the mechanism, it has to be possible for a polyfill to add, replace, or remove any builtin module implementation prior to any other code accessing it (by running first, eg), and then also possible for similar first-run code to lock down all (or individual) builtin modules so they can't be further modified","date":"2017-10-31T19:01:24.602Z","type":"message"}
{"nick":"ljharb","message":"(so that the first thing a user could also do is \"lock them down\" without any polyfilling, if they wanted)","date":"2017-10-31T19:01:54.533Z","type":"message"}
{"nick":"littledan","message":"How do you resolve it when everyone wants to be first","date":"2017-10-31T19:16:54.512Z","type":"message"}
{"nick":"littledan","message":"?","date":"2017-10-31T19:16:55.231Z","type":"message"}
{"nick":"littledan","message":"separate question: How would people feel about re-introducing 64-bit IEEE decimal, in a way that's analogous to BigInt?","date":"2017-10-31T19:17:34.660Z","type":"message"}
{"nick":"littledan","message":"another one-off primitive type with operator overloading, etc","date":"2017-10-31T19:17:50.496Z","type":"message"}
{"nick":"littledan","message":"it seems useful for dealing with money","date":"2017-10-31T19:17:54.967Z","type":"message"}
{"nick":"jwalden","message":"there's a fixed-size IEEE decimal type?  news to me","date":"2017-10-31T19:18:43.870Z","type":"message"}
{"nick":"ljharb","message":"littledan: same as in all JS; whoever is actually first wins","date":"2017-10-31T19:18:59.041Z","type":"message"}
{"nick":"littledan","message":"jswalden: Check out https://www.csee.umbc.edu/~tsimo1/CMSC455/IEEE-754-2008.pdf and grep around for \"decimal\".","date":"2017-10-31T19:19:53.790Z","type":"message"}
{"nick":"littledan","message":" I know it was shut down in the past, but I'm not sure which reason was most important there--was it the lack of normalization, or being unconvinced about applications, or something else?","date":"2017-10-31T19:19:56.853Z","type":"message"}
{"nick":"littledan","message":"(I'm sure different people saw different downsides)","date":"2017-10-31T19:20:05.566Z","type":"message"}
{"nick":"Domenic","message":"I would like a decimal type","date":"2017-10-31T20:14:25.516Z","type":"message"}
{"nick":"Domenic","message":"I know there is a lot of history there; probably Brendan/Waldemar/Allen would know why.","date":"2017-10-31T20:14:49.552Z","type":"message"}
{"nick":"Domenic","message":"I don't know which decimal type I would like but I remember being happy with C#'s","date":"2017-10-31T20:15:10.003Z","type":"message"}
{"nick":"Domenic","message":"I also remember Brendan complaining that IBM's proposal for JS had 1.0 !== 1.00","date":"2017-10-31T20:15:20.670Z","type":"message"}
{"nick":"Domenic","message":"(or rather, 1.0d !== 1.00d, or whatever)","date":"2017-10-31T20:15:32.640Z","type":"message"}
{"nick":"Fishrock123","date":"2017-10-31T20:21:28.639Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-10-31T20:47:30.666Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-31T21:08:08.399Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-31T21:08:46.717Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 258 seconds","date":"2017-10-31T21:13:18.635Z","type":"quit"}
{"nick":"gibson042","date":"2017-10-31T21:55:28.735Z","type":"join"}
{"nick":"Fishrock123","date":"2017-10-31T22:08:59.673Z","type":"join"}
{"nick":"jwalden","reason":"Quit: back shortly","date":"2017-10-31T22:30:33.534Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-10-31T23:33:48.463Z","type":"quit"}
{"nick":"littledan","message":"about that particular issue, I was looking into it and I can't see where we'd ever expose that to JS","date":"2017-10-31T23:34:46.074Z","type":"message"}
{"nick":"littledan","message":"we could just make SameValue identify the cohorts with each other (the way SameValue identifies all NaNs with each other) and not expose Decimal TypedArrays","date":"2017-10-31T23:35:21.608Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-10-31T23:36:08.995Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-31T23:55:06.879Z","type":"quit"}
