{"nick":"not-an-aardvark","reason":"Ping timeout: 240 seconds","date":"2017-12-19T00:06:48.492Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-12-19T00:07:15.442Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit:  ","date":"2017-12-19T00:18:21.866Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-12-19T00:41:57.431Z","type":"quit"}
{"nick":"cloudshu","date":"2017-12-19T00:53:33.475Z","type":"join"}
{"nick":"Fishrock123","date":"2017-12-19T01:17:02.186Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2017-12-19T01:22:32.397Z","type":"quit"}
{"nick":"AtumT_","date":"2017-12-19T01:31:06.521Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 255 seconds","date":"2017-12-19T01:34:16.912Z","type":"quit"}
{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2017-12-19T02:30:21.284Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-12-19T02:34:30.149Z","type":"quit"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2017-12-19T03:19:55.441Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2017-12-19T04:12:21.197Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-12-19T06:15:46.571Z","type":"quit"}
{"nick":"zjr","date":"2017-12-19T08:55:40.010Z","type":"join"}
{"nick":"zjr","reason":"Client Quit","date":"2017-12-19T08:55:40.463Z","type":"quit"}
{"nick":"puru","date":"2017-12-19T09:09:48.983Z","type":"join"}
{"nick":"puru","reason":"Client Quit","date":"2017-12-19T09:10:38.753Z","type":"quit"}
{"nick":"AtumT","date":"2017-12-19T09:25:05.334Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 252 seconds","date":"2017-12-19T10:30:37.862Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-12-19T11:03:51.167Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-12-19T11:25:06.504Z","type":"quit"}
{"nick":"mylesborins","date":"2017-12-19T11:25:37.627Z","type":"join"}
{"nick":"ahnheejong","date":"2017-12-19T12:31:54.607Z","type":"join"}
{"nick":"jmdyck","date":"2017-12-19T12:39:28.305Z","type":"join"}
{"nick":"gibson042","date":"2017-12-19T12:43:56.511Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2017-12-19T12:53:26.681Z","type":"quit"}
{"nick":"ioctaptceb","date":"2017-12-19T15:29:31.046Z","type":"join"}
{"nick":"ioctaptceb","reason":"Client Quit","date":"2017-12-19T15:29:43.369Z","type":"quit"}
{"nick":"ioctaptceb","date":"2017-12-19T15:30:13.933Z","type":"join"}
{"nick":"ioctaptceb","new_nick":"ystartsev","date":"2017-12-19T15:30:18.822Z","type":"nick"}
{"nick":"ystartsev","message":"hello!","date":"2017-12-19T15:30:27.075Z","type":"message"}
{"nick":"bradleymeck","date":"2017-12-19T15:30:34.562Z","type":"join"}
{"nick":"bradleymeck","message":"I had a bug in my example that I was walking through with spec. it isn't inconsistent, but it does seem the intrinsic `.then` works on Promises after Promise.prototype.then is deleted can work to get the resolution","date":"2017-12-19T15:57:25.545Z","type":"message"}
{"nick":"bradleymeck","message":"however, it is somewhat particular in how you do it","date":"2017-12-19T15:57:38.988Z","type":"message"}
{"nick":"bradleymeck","message":"`await` cannot get the resolution value that I can tell since it always defers to the \"then\"","date":"2017-12-19T15:57:58.638Z","type":"message"}
{"nick":"bdnugger","date":"2017-12-19T16:09:02.968Z","type":"join"}
{"nick":"bradleymeck","message":"manual unboxing function... works https://jsbin.com/kaciyulilo/edit?js,console , but seems odd to need that to be safe, it is pretty heavy in cost to run","date":"2017-12-19T16:28:05.300Z","type":"message"}
{"nick":"injectJon","date":"2017-12-19T16:39:20.447Z","type":"join"}
{"nick":"injectJon","reason":"Quit: http://quassel-irc.org - Chat comfortably. Anywhere.","date":"2017-12-19T17:00:57.195Z","type":"quit"}
{"nick":"injectJon","date":"2017-12-19T17:01:47.996Z","type":"join"}
{"nick":"injectJon","reason":"Ping timeout: 255 seconds","date":"2017-12-19T17:17:35.217Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2017-12-19T17:45:27.625Z","type":"quit"}
{"nick":"caridy","date":"2017-12-19T17:45:57.021Z","type":"join"}
{"nick":"bradleymeck","reason":"Read error: Connection reset by peer","date":"2017-12-19T17:54:45.590Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-19T17:54:57.467Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-19T18:33:27.022Z","type":"quit"}
{"nick":"nosigil","date":"2017-12-19T18:33:31.992Z","type":"join"}
{"nick":"nosigil","message":"Is it possible to not to use sigils for private fields whatever it takes? for example, I guess babel compiler could be modified to store a list of a registered private field names for a class and replace every matched words (not properties, not strings) inside a method with weak map implementation of the private field, that way private properties would not need any special identification at all, only a ‘private fieldName’ declarat","date":"2017-12-19T18:58:24.038Z","type":"message"}
{"nick":"nosigil","message":"Private fields of other instances of the same class could be accessed like that instanceFromArgumet->privateField.","date":"2017-12-19T18:58:52.734Z","type":"message"}
{"nick":"bradleymeck","date":"2017-12-19T18:59:38.228Z","type":"join"}
{"nick":"ljharb","message":"nosigil: babel can't prevent runtime reflection, and \"private\" means it's impossible for *anything in the runtime* to detect even the presence of a private field.","date":"2017-12-19T19:00:16.345Z","type":"message"}
{"nick":"ljharb","message":"nosigil: https://github.com/tc39/proposal-private-fields/blob/master/FAQ.md might be helpful","date":"2017-12-19T19:00:26.759Z","type":"message"}
{"nick":"nosigil","message":"thank you for the answer, but I don't understand how sigil helps with runtime. Does that mean that runtime itself would be able to resolve #x? Then why not to add some special closure for registered private properties or something like that? Hope I understood you correctly at least a bit :)","date":"2017-12-19T19:37:13.983Z","type":"message"}
{"nick":"ljharb","message":"nosigil: the runtime comment was about \"using babel to figure out what strings wouldn't collide\"","date":"2017-12-19T19:40:39.365Z","type":"message"}
{"nick":"linclark","date":"2017-12-19T19:48:48.433Z","type":"join"}
{"nick":"tschneidereit","message":"bterlson: can you voice linclark and invite her to the -delegates channel?","date":"2017-12-19T19:50:41.045Z","type":"message"}
{"nick":"tschneidereit","message":"bterlson: same for ystartsev","date":"2017-12-19T19:52:04.261Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-19T20:05:55.218Z","type":"quit"}
{"nick":"nosigil","reason":"Ping timeout: 260 seconds","date":"2017-12-19T20:37:55.057Z","type":"quit"}
{"nick":"AtumT","reason":"Ping timeout: 264 seconds","date":"2017-12-19T21:02:09.190Z","type":"quit"}
{"nick":"jwalden","date":"2017-12-19T21:09:14.512Z","type":"join"}
{"nick":"AtumT","date":"2017-12-19T21:12:27.765Z","type":"join"}
{"nick":"AtumT_","date":"2017-12-19T21:15:34.863Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 268 seconds","date":"2017-12-19T21:19:18.121Z","type":"quit"}
{"nick":"bdnugger","reason":"Quit: Connection closed for inactivity","date":"2017-12-19T21:24:45.571Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-19T22:09:33.478Z","type":"join"}
{"nick":"floatleft","date":"2017-12-19T22:31:05.847Z","type":"join"}
{"nick":"bterlson","message":"tschneidereit: linclark: ystartsev: done","date":"2017-12-19T23:01:32.620Z","type":"message"}
{"nick":"ystartsev","message":"thanks!","date":"2017-12-19T23:01:37.756Z","type":"message"}
{"nick":"tschneidereit","message":"bterlson: thank you!","date":"2017-12-19T23:03:26.869Z","type":"message"}
{"nick":"bdnugger","date":"2017-12-19T23:10:49.488Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-19T23:45:53.206Z","type":"quit"}
{"nick":"bterlson","message":"So, ChakraCore throws away all array mutations that occur while sorting","date":"2017-12-19T23:46:07.604Z","type":"message"}
{"nick":"bterlson","message":"and no one has noticed","date":"2017-12-19T23:46:11.595Z","type":"message"}
{"nick":"ljharb","message":"O.o","date":"2017-12-19T23:46:33.788Z","type":"message"}
{"nick":"bterlson","message":"not entirely sure if it's allowed per spec tbh","date":"2017-12-19T23:46:38.302Z","type":"message"}
{"nick":"ljharb","message":"bterlson: you mean like, mid-sort mutations?","date":"2017-12-19T23:46:45.420Z","type":"message"}
{"nick":"bterlson","message":"but might be nice to codify our behavior since it's faster? ;)","date":"2017-12-19T23:46:48.484Z","type":"message"}
{"nick":"bterlson","message":"yeah","date":"2017-12-19T23:46:49.107Z","type":"message"}
{"nick":"ljharb","message":"or like assigned properties on the array","date":"2017-12-19T23:46:50.524Z","type":"message"}
{"nick":"bterlson","message":"https://www.irccloud.com/pastebin/ZdbPxYX6/","date":"2017-12-19T23:48:32.623Z","type":"message"}
{"nick":"ljharb","message":"wow","date":"2017-12-19T23:48:45.455Z","type":"message"}
{"nick":"ljharb","message":"tbh i'm not even sure how that would be specified","date":"2017-12-19T23:48:56.507Z","type":"message"}
{"nick":"bterlson","message":"it says that if your sort function does weird things then the sort order is implementation defined","date":"2017-12-19T23:49:12.482Z","type":"message"}
{"nick":"ljharb","message":"i guess it would copy the array in memory, cache up all the comparisons, and then re-assign all of them?","date":"2017-12-19T23:49:21.735Z","type":"message"}
{"nick":"ljharb","message":"is that observable? what if my array has a setter","date":"2017-12-19T23:49:27.435Z","type":"message"}
{"nick":"ljharb","message":"or what if it's a Proxy","date":"2017-12-19T23:49:30.686Z","type":"message"}
{"nick":"ljharb","message":"or what if it's a sparse array and Array.prototype has a setter?","date":"2017-12-19T23:49:40.609Z","type":"message"}
{"nick":"caridy","message":"oh! yeah! we came across this one when implementing proxy compat for IE11 :)","date":"2017-12-19T23:50:16.365Z","type":"message"}
{"nick":"caridy","message":"`sort` is kinda weird!","date":"2017-12-19T23:50:41.275Z","type":"message"}
{"nick":"tschneidereit","message":"pretty sure that behavior doesn't strictly fall under \"sort order\" :)","date":"2017-12-19T23:50:42.851Z","type":"message"}
{"nick":"ljharb","message":"sort is super weird and i'm firmly in favor of locking it down","date":"2017-12-19T23:50:51.450Z","type":"message"}
{"nick":"ljharb","message":"but that particular semantic seems fairly impossible to spec, and fairly likely that it'll not be web compatible even if there's been no edge bug reports :-/","date":"2017-12-19T23:51:12.386Z","type":"message"}
{"nick":"bterlson","message":"tschneidereit: yeah :-P","date":"2017-12-19T23:52:05.600Z","type":"message"}
{"nick":"bterlson","message":"so anyone want to copy this or should I slow down our sort and fix the bug...","date":"2017-12-19T23:52:41.445Z","type":"message"}
{"nick":"bterlson","message":"ljharb: to answer your question, all observable things are still observable","date":"2017-12-19T23:53:25.125Z","type":"message"}
{"nick":"ljharb","message":"lol that tautology doesn't really answer my question","date":"2017-12-19T23:53:50.885Z","type":"message"}
{"nick":"bterlson","message":"proxy, getter, etc.","date":"2017-12-19T23:54:03.034Z","type":"message"}
{"nick":"bterlson","message":"it's like while sorting you're working on a copy I guess?","date":"2017-12-19T23:54:13.643Z","type":"message"}
{"nick":"ljharb","message":"but i don't have to be working on a real array either","date":"2017-12-19T23:54:32.461Z","type":"message"}
{"nick":"ljharb","message":"it could be an arraylike object","date":"2017-12-19T23:54:39.253Z","type":"message"}
{"nick":"tschneidereit","action":"bets this only happens for dense arrays","date":"2017-12-19T23:54:59.163Z","type":"action"}
{"nick":"tschneidereit","message":"or, hmm. Maybe not","date":"2017-12-19T23:56:25.924Z","type":"message"}
{"nick":"tschneidereit","message":"eh, anyway. I agree with ljharb - these semantics seem exceedingly weird and I doubt they're web compatible in the long tail","date":"2017-12-19T23:57:05.746Z","type":"message"}
{"nick":"bterlson","message":"you're saying our telemetry is broken??","date":"2017-12-19T23:57:28.547Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2017-12-19T23:57:32.031Z","type":"message"}
{"nick":"ljharb","message":"again tho, any way we can lock down `sort` is fine by me, \"implementation-dependent\" is icky","date":"2017-12-19T23:57:45.295Z","type":"message"}
{"nick":"bterlson","message":"according to Caridy it's been that way since IE11","date":"2017-12-19T23:57:57.866Z","type":"message"}
{"nick":"bterlson","message":"it's possibly been that way since IE9","date":"2017-12-19T23:58:01.970Z","type":"message"}
{"nick":"tschneidereit","message":"oooh, can we make it stable?","date":"2017-12-19T23:58:08.249Z","type":"message"}
{"nick":"littledan","message":"do you really want it to be stable? that could slow down existing websites","date":"2017-12-19T23:58:28.890Z","type":"message"}
{"nick":"tschneidereit","message":"it's stable in SM","date":"2017-12-19T23:58:37.670Z","type":"message"}
{"nick":"littledan","message":"what do other JS implementations do?","date":"2017-12-19T23:59:03.783Z","type":"message"}
{"nick":"littledan","message":"if it's stable in almost all of them...","date":"2017-12-19T23:59:18.775Z","type":"message"}
{"nick":"tschneidereit","message":"bterlson: well, maybe it is compatible - who knows. The semantics still don't make much sense :P","date":"2017-12-19T23:59:32.615Z","type":"message"}
{"nick":"tschneidereit","message":"v8 is unstable","date":"2017-12-19T23:59:37.755Z","type":"message"}
{"nick":"tschneidereit","message":"that's all I remember. It's been a few years since I worked on this","date":"2017-12-19T23:59:56.617Z","type":"message"}
