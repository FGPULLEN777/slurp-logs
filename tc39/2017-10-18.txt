{"nick":"Fishrock123","date":"2017-10-18T00:24:52.080Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-10-18T00:25:39.112Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-18T00:42:04.660Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-18T00:47:44.895Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2017-10-18T01:27:35.837Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2017-10-18T02:22:57.163Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-10-18T04:11:09.268Z","type":"quit"}
{"nick":"wycats","reason":"Read error: Connection reset by peer","date":"2017-10-18T07:38:11.495Z","type":"quit"}
{"nick":"wycats","date":"2017-10-18T07:38:34.617Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-10-18T09:11:02.539Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-10-18T10:25:08.777Z","type":"quit"}
{"nick":"mylesborins","date":"2017-10-18T10:25:39.595Z","type":"join"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T10:25:50.313Z","type":"quit"}
{"nick":"jmdyck","date":"2017-10-18T12:04:49.383Z","type":"join"}
{"nick":"AtumT","date":"2017-10-18T12:20:11.652Z","type":"join"}
{"nick":"bradleymeck","date":"2017-10-18T12:20:43.008Z","type":"join"}
{"nick":"Jasuruzakovgmail","reason":"*.net *.split","date":"2017-10-18T12:43:50.404Z","type":"quit"}
{"nick":"Jasuruzakovgmail","date":"2017-10-18T12:53:54.126Z","type":"join"}
{"nick":"gibson042","date":"2017-10-18T13:01:18.893Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 255 seconds","date":"2017-10-18T13:39:08.926Z","type":"quit"}
{"nick":"bathos","date":"2017-10-18T13:49:47.685Z","type":"join"}
{"nick":"gibson042","date":"2017-10-18T13:57:27.953Z","type":"join"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T14:39:36.041Z","type":"quit"}
{"nick":"bathos","date":"2017-10-18T15:34:47.882Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-10-18T15:58:26.706Z","type":"quit"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T16:13:50.174Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-18T16:26:30.728Z","type":"join"}
{"nick":"bathos","date":"2017-10-18T16:27:24.702Z","type":"join"}
{"nick":"bathos","reason":"Client Quit","date":"2017-10-18T16:27:26.173Z","type":"quit"}
{"nick":"bathos","date":"2017-10-18T17:15:46.644Z","type":"join"}
{"nick":"jwalden","date":"2017-10-18T17:40:31.063Z","type":"join"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T18:06:00.870Z","type":"quit"}
{"nick":"bathos","date":"2017-10-18T18:07:40.522Z","type":"join"}
{"nick":"Bakkot","message":"bterlson: I understand Edge has module support now","date":"2017-10-18T18:40:36.427Z","type":"message"}
{"nick":"Bakkot","message":"you may be interested in, I just updated https://bakkot.github.io/test262-web-runner/ to support modules","date":"2017-10-18T18:40:50.280Z","type":"message"}
{"nick":"jwalden","action":"spams test262 with more important tests like https://github.com/tc39/test262/pull/1299","date":"2017-10-18T18:40:59.898Z","type":"action"}
{"nick":"jwalden","message":":-)","date":"2017-10-18T18:41:01.519Z","type":"message"}
{"nick":"Bakkot","message":"via service workers","date":"2017-10-18T18:41:03.104Z","type":"message"}
{"nick":"Bakkot","message":"jwalden: your indentation style hurts me :(","date":"2017-10-18T18:45:25.503Z","type":"message"}
{"nick":"jwalden","message":"2space4lyf","date":"2017-10-18T18:45:40.083Z","type":"message"}
{"nick":"Bakkot","message":"also, wait, this looks like it would pass even if the iterator doesn‚Äôt throw","date":"2017-10-18T18:45:52.050Z","type":"message"}
{"nick":"Bakkot","message":"or, for that matter, even if it does","date":"2017-10-18T18:46:03.774Z","type":"message"}
{"nick":"jwalden","message":"hrm, would it?  I tested without my bugfix and it failed, with it and it passed","date":"2017-10-18T18:46:22.841Z","type":"message"}
{"nick":"Bakkot","message":"Maybe I‚Äôm just confused, then","date":"2017-10-18T18:46:31.727Z","type":"message"}
{"nick":"jwalden","message":"but I am certainly open to the possibility that I don't know what I'm doing here :-)","date":"2017-10-18T18:46:38.736Z","type":"message"}
{"nick":"Bakkot","message":"Oh, wait, right, I forgot how $DONE works.","date":"2017-10-18T18:47:33.049Z","type":"message"}
{"nick":"jwalden","message":"so if I read the async docs correctly, if |async function f| returns a truthy value -- namely either of those two strings -- that'll get passed as argument to $DONE and that...yeah","date":"2017-10-18T18:47:40.850Z","type":"message"}
{"nick":"Bakkot","message":"(i.e. it requires its argument to be falsy)","date":"2017-10-18T18:47:58.528Z","type":"message"}
{"nick":"Bakkot","message":"I don‚Äôt _think_ the style is generally to rely on the condition in $DONE, but haven‚Äôt read too many of the async tests","date":"2017-10-18T18:48:41.135Z","type":"message"}
{"nick":"Bakkot","message":"ignore my rambling","date":"2017-10-18T18:48:44.142Z","type":"message"}
{"nick":"jwalden","message":":-)","date":"2017-10-18T18:49:38.630Z","type":"message"}
{"nick":"jwalden","message":"blind leading the blind here","date":"2017-10-18T18:49:45.049Z","type":"message"}
{"nick":"jwalden","message":"where are the adults?","date":"2017-10-18T18:49:55.994Z","type":"message"}
{"nick":"Bakkot","message":"leobalter, rwaldron ^ :)","date":"2017-10-18T18:50:08.424Z","type":"message"}
{"nick":"bterlson","message":"lol I was just about to ping leobalter","date":"2017-10-18T18:50:17.660Z","type":"message"}
{"nick":"bterlson","message":"should we call him \"papa leo\" from now on?","date":"2017-10-18T18:50:43.645Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-18T18:51:32.817Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-18T18:52:09.091Z","type":"join"}
{"nick":"rwaldron","message":"jswalden, your test looks correct to me!","date":"2017-10-18T18:54:30.873Z","type":"message"}
{"nick":"rwaldron","message":"FWIW, I compared it to this .case: https://github.com/tc39/test262/blob/master/src/dstr-assignment-for-await/array-elem-trlg-iter-list-nrml-close-err.case#L53-L57","date":"2017-10-18T18:54:45.053Z","type":"message"}
{"nick":"rwaldron","message":"üëçüèΩ","date":"2017-10-18T18:55:24.458Z","type":"message"}
{"nick":"rwaldron","message":"Oh wait...","date":"2017-10-18T18:55:47.343Z","type":"message"}
{"nick":"rwaldron","message":"One thing, I can feedback here or on the PR?","date":"2017-10-18T18:55:58.275Z","type":"message"}
{"nick":"Fishrock123","reason":"Ping timeout: 252 seconds","date":"2017-10-18T18:56:47.101Z","type":"quit"}
{"nick":"jwalden","message":"I'm watching both places :-)","date":"2017-10-18T18:58:00.370Z","type":"message"}
{"nick":"rwaldron","message":"Just this:","date":"2017-10-18T18:58:59.072Z","type":"message"}
{"nick":"rwaldron","message":"get [Symbol.iterator]","date":"2017-10-18T18:59:08.241Z","type":"message"}
{"nick":"jwalden","message":"that's mostly just a fencepost to be sure the operation doesn't accidentally proceed past the @@asyncIterator get/test, and if it does things will Die","date":"2017-10-18T18:59:53.284Z","type":"message"}
{"nick":"rwaldron","message":"Sorry, I just meant that it should be: \"[Symbol.iterator]()\", not \"get [Symbol.iterator]()\"","date":"2017-10-18T19:01:03.442Z","type":"message"}
{"nick":"jwalden","message":"rwaldron: no, that was intentional -- even the mere act of *getting* is too far, shouldn't proceed past that to calling","date":"2017-10-18T19:01:35.005Z","type":"message"}
{"nick":"jwalden","message":"I mean, sure, either would work","date":"2017-10-18T19:01:48.990Z","type":"message"}
{"nick":"jwalden","message":"throw-on-get is just more restrictive","date":"2017-10-18T19:01:55.837Z","type":"message"}
{"nick":"rwaldron","message":"Oh, because with get, you'll have this result: TypeError: fakeiter is not iterable","date":"2017-10-18T19:02:01.403Z","type":"message"}
{"nick":"rwaldron","message":"I assumed you wanted that Test262Error to come through","date":"2017-10-18T19:02:15.735Z","type":"message"}
{"nick":"Fishrock123","date":"2017-10-18T19:02:32.656Z","type":"join"}
{"nick":"jwalden","message":"hum, really?  GetIterator's operation is \"? GetMethod(obj, @@iterator)\" so would just throw the T2E, and I think that would just propagate outward uncaught","date":"2017-10-18T19:03:20.856Z","type":"message"}
{"nick":"rwaldron","message":"Can I try to walk through this with you? Maybe I've misunderstood something, so that might help","date":"2017-10-18T19:04:30.366Z","type":"message"}
{"nick":"jwalden","message":"sure","date":"2017-10-18T19:04:37.716Z","type":"message"}
{"nick":"jwalden","message":"https://tc39.github.io/proposal-async-iteration/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind last step is what would make that GetIterator call, and seems like that would throw","date":"2017-10-18T19:05:02.209Z","type":"message"}
{"nick":"rwaldron","message":"The normal execution of an asyncIter would first look for [Symbol.asyncIterator]() {} on an iterable, if it found that, it would call it (and so on); if it did not find one, it would then look for [Symbol.iterator]() {}, and if it found that, it would try to call it.","date":"2017-10-18T19:06:57.721Z","type":"message"}
{"nick":"rwaldron","message":"In this case, it finds [Symbol.asyncIterator], but it's not a function, it's this other icky thing and that should end the whole show right there","date":"2017-10-18T19:07:32.750Z","type":"message"}
{"nick":"jwalden","message":"rwaldron: yes, it'll call the icky thing and throw because the icky thing throws","date":"2017-10-18T19:08:31.890Z","type":"message"}
{"nick":"jwalden","message":"rwaldron: the [Symbol.iterator] part is in case there's an implementation bug or something where the bad asyncIterator isn't called","date":"2017-10-18T19:09:06.148Z","type":"message"}
{"nick":"rwaldron","message":"great, then my \"concern\" is downgraded to a \"nit\" and because it doesn't matter, nothing should ever get that far anyway","date":"2017-10-18T19:09:13.791Z","type":"message"}
{"nick":"rwaldron","action":"nods","date":"2017-10-18T19:09:26.553Z","type":"action"}
{"nick":"rwaldron","message":"Cool","date":"2017-10-18T19:09:29.570Z","type":"message"}
{"nick":"rwaldron","message":"Excuse me bterlson","date":"2017-10-18T19:11:05.376Z","type":"message"}
{"nick":"rwaldron","message":"While we have your attention","date":"2017-10-18T19:11:13.906Z","type":"message"}
{"nick":"rwaldron","message":"https://github.com/bterlson/eshost/pull/41","date":"2017-10-18T19:11:14.934Z","type":"message"}
{"nick":"rwaldron","message":"That's relevant for supporting this ickiness that jwalden has uncovered","date":"2017-10-18T19:11:35.249Z","type":"message"}
{"nick":"rwaldron","message":"thx in advance","date":"2017-10-18T19:11:42.655Z","type":"message"}
{"nick":"bterlson","message":"rwaldron: I am investigating presently, IIRC ch.exe has some API to get the actual ULEO","date":"2017-10-18T19:11:53.914Z","type":"message"}
{"nick":"bterlson","message":"will comment once I find it","date":"2017-10-18T19:12:01.430Z","type":"message"}
{"nick":"rwaldron","message":"Oh rad","date":"2017-10-18T19:12:01.741Z","type":"message"}
{"nick":"rwaldron","message":"I'm still trying to figure out how we might use %GetUndetectable() with d8 (as Bakkot mentions here https://github.com/bterlson/eshost/pull/41#issuecomment-337349144)","date":"2017-10-18T19:12:57.562Z","type":"message"}
{"nick":"rwaldron","message":"I kind of want to do some fancy footwork with eshost and sniff out calls to `uncallableAndIsHTMLDDA()` in the source as a way to signal adding \"--allow-natives-syntax\" to hostArgs","date":"2017-10-18T19:14:20.520Z","type":"message"}
{"nick":"rwaldron","message":"(in the d8 runtime)","date":"2017-10-18T19:14:50.507Z","type":"message"}
{"nick":"rwaldron","message":"And by that I mean d8 agent. Obviously.","date":"2017-10-18T19:15:12.469Z","type":"message"}
{"nick":"rwaldron","message":";)","date":"2017-10-18T19:15:24.703Z","type":"message"}
{"nick":"bterlson","message":"rwaldron: gah looks like the API is not available in ch.exe :/","date":"2017-10-18T19:16:09.971Z","type":"message"}
{"nick":"jwalden","message":"rwaldron: whoops, was just looking at the test one last time to verify its failure in unpatched SpiderMonkey and saw a typo in it (plus an opportunity to put a bad-exception error message into the assert.sameValue message) -- mind taking a look at/merging the last micro-change on the same getiterator-async-funky branch?","date":"2017-10-18T19:22:23.711Z","type":"message"}
{"nick":"jwalden","message":"rwaldron: https://github.com/jswalden/test262/commit/fe90a3f0db4f80114f10a4e4c1f05d817bea7b30","date":"2017-10-18T19:24:22.653Z","type":"message"}
{"nick":"jwalden","message":"looks like when you push to a merged branch, Github switches to claiming the particular referenced commit is what was merged, loses recognition of what the branch was that was asked to be merged originally","date":"2017-10-18T19:24:56.180Z","type":"message"}
{"nick":"rwaldron","message":"jwalden nope, don't mind","date":"2017-10-18T19:25:00.189Z","type":"message"}
{"nick":"rwaldron","message":"jwalden https://github.com/tc39/test262/commit/99ee383d3fc2e10342842cad40bad89db123fdc1","date":"2017-10-18T19:29:43.968Z","type":"message"}
{"nick":"jwalden","message":"woo","date":"2017-10-18T19:29:55.218Z","type":"message"}
{"nick":"jwalden","message":"gentleman and a scholar","date":"2017-10-18T19:29:58.304Z","type":"message"}
{"nick":"rwaldron","message":"lol üëçüèΩ","date":"2017-10-18T19:30:21.736Z","type":"message"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T19:58:17.392Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-18T20:04:21.081Z","type":"quit"}
{"nick":"jwalden","action":"hopes other impls will expose ULEOs in their shells, bets there are widespread bugs of this nature across implementations","date":"2017-10-18T20:04:48.556Z","type":"action"}
{"nick":"Fishrock123","date":"2017-10-18T20:04:59.750Z","type":"join"}
{"nick":"Bakkot","message":"don‚Äôt necessarily need it in the shells! I will add the host hook to my web runner sometime soonish and just use the actual document.all","date":"2017-10-18T20:06:03.717Z","type":"message"}
{"nick":"Bakkot","message":"in fact, I‚Äôm on lunch break right now, one sec‚Ä¶","date":"2017-10-18T20:06:49.455Z","type":"message"}
{"nick":"Bakkot","message":"oh, wait. jwalden: uncallableAndIsHTMLDDA isn‚Äôt actually document.all?","date":"2017-10-18T20:08:25.524Z","type":"message"}
{"nick":"Bakkot","message":"because document.all is callable without throwing a type error","date":"2017-10-18T20:09:09.827Z","type":"message"}
{"nick":"Fishrock123","reason":"Ping timeout: 258 seconds","date":"2017-10-18T20:09:12.768Z","type":"quit"}
{"nick":"bathos","date":"2017-10-18T20:13:38.573Z","type":"join"}
{"nick":"Fishrock123","date":"2017-10-18T20:15:09.705Z","type":"join"}
{"nick":"jwalden","message":"Bakkot: it *may* return document.all, but it isn't required to","date":"2017-10-18T20:18:15.582Z","type":"message"}
{"nick":"Bakkot","message":"document.all doesn‚Äôt meet the requirements, though, does it?","date":"2017-10-18T20:18:29.948Z","type":"message"}
{"nick":"jwalden","message":"Bakkot: Call(document.all, ..., <<>>) throws a TypeError","date":"2017-10-18T20:18:42.114Z","type":"message"}
{"nick":"jwalden","message":"Bakkot: ^ that's the peculiar requirement of the return value of uncallableAndIsHTMLDDA","date":"2017-10-18T20:18:56.242Z","type":"message"}
{"nick":"Bakkot","message":"‚Ä¶ does it?","date":"2017-10-18T20:19:59.761Z","type":"message"}
{"nick":"jwalden","message":"having an [[IsHTMLDDA]] internal slot is an optional add-on behavior that is permitted by uncallableAndIsHTMLDDA's interface","date":"2017-10-18T20:20:02.205Z","type":"message"}
{"nick":"jwalden","message":"Bakkot: yes -- you're invoking it with too few arguments","date":"2017-10-18T20:20:14.693Z","type":"message"}
{"nick":"jwalden","message":"Bakkot: uncallableAndIsHTMLDDA() { return {}; } is also an entirely permissible implementation, because it meets the uncallability requirement","date":"2017-10-18T20:20:42.386Z","type":"message"}
{"nick":"Bakkot","message":"Ah. It does not throw when given no arguments in either chrome or safari","date":"2017-10-18T20:20:56.813Z","type":"message"}
{"nick":"Bakkot","message":"Hence my confusion.","date":"2017-10-18T20:21:00.026Z","type":"message"}
{"nick":"jwalden","message":"that...sounds wrong","date":"2017-10-18T20:21:12.440Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-18T20:21:19.211Z","type":"quit"}
{"nick":"Bakkot","message":"Domenic would know the spec here, I expect","date":"2017-10-18T20:21:39.778Z","type":"message"}
{"nick":"jwalden","message":"data:text/html,<script>try { document.all(); } catch (e) { document.write(e); }</script>","date":"2017-10-18T20:21:48.278Z","type":"message"}
{"nick":"jwalden","message":"TypeError: Not enough arguments to HTMLAllCollection.__legacycaller.","date":"2017-10-18T20:21:52.033Z","type":"message"}
{"nick":"jwalden","message":"^ Firefox behavior","date":"2017-10-18T20:21:55.405Z","type":"message"}
{"nick":"jwalden","message":"and given we autogen the binding stuff for this I'd be very surprised if that's not the required behavior","date":"2017-10-18T20:22:15.391Z","type":"message"}
{"nick":"jwalden","action":"consults specs","date":"2017-10-18T20:22:18.951Z","type":"action"}
{"nick":"jwalden","message":"oh, ugh","date":"2017-10-18T20:22:46.518Z","type":"message"}
{"nick":"jwalden","message":"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#HTMLAllCollection-call","date":"2017-10-18T20:22:48.521Z","type":"message"}
{"nick":"Domenic","message":"Yeah... document.all is callable....","date":"2017-10-18T20:23:02.374Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: the question is, does calling it with no arguments throw or not","date":"2017-10-18T20:23:18.412Z","type":"message"}
{"nick":"jwalden","message":"agreed it's callable, the question is its behavior on attempt to call","date":"2017-10-18T20:23:21.851Z","type":"message"}
{"nick":"Bakkot","message":"Firefox thinks it does, for some reason","date":"2017-10-18T20:23:22.549Z","type":"message"}
{"nick":"Domenic","message":"Why can't these just be WPT testing actual document.all, not this made up Mozilla JS she'll thing?","date":"2017-10-18T20:23:24.506Z","type":"message"}
{"nick":"jwalden","message":"^ that URL seems pretty unambiguous","date":"2017-10-18T20:23:29.185Z","type":"message"}
{"nick":"Domenic","message":"*shell","date":"2017-10-18T20:23:29.516Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: see discussion on https://github.com/tc39/test262/pull/1287","date":"2017-10-18T20:24:16.072Z","type":"message"}
{"nick":"jwalden","message":"because WPT tests aren't run nearly as easily/frequently by people who primarily hack on an engine as an engine, not as an engine in a browser","date":"2017-10-18T20:24:18.737Z","type":"message"}
{"nick":"jwalden","message":"sure, we write for browsers, but the majority of our work is browser-agnostic","date":"2017-10-18T20:24:38.513Z","type":"message"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T20:24:40.900Z","type":"quit"}
{"nick":"Domenic","message":"How frequently does this test need to be run?","date":"2017-10-18T20:24:51.886Z","type":"message"}
{"nick":"jwalden","message":"and for these tests, the vast bulk of the tests as written are ECMA functionality, and it's not really practical for WPT people to review them","date":"2017-10-18T20:24:59.571Z","type":"message"}
{"nick":"jwalden","message":"depends how often we modify the relevant code, or even just write it","date":"2017-10-18T20:25:45.269Z","type":"message"}
{"nick":"Domenic","message":"Isn't it normatively disallowed for other objects to have the IsHTMLDDA slot?","date":"2017-10-18T20:25:46.627Z","type":"message"}
{"nick":"jwalden","message":"I don't believe it is -- spec heavily discourages having objects have it, but it doesn't/can't really restrict it to just document.all because that's beyond its purview","date":"2017-10-18T20:26:27.021Z","type":"message"}
{"nick":"Bakkot","message":"Technically it‚Äôs a NOTE which I think implies not normative","date":"2017-10-18T20:26:52.214Z","type":"message"}
{"nick":"Domenic","message":"Meh, I'm gonna give up on this, I'm burned out on test262 discussions. Sorry, gotta duck out.","date":"2017-10-18T20:27:08.514Z","type":"message"}
{"nick":"Bakkot","message":"the ‚Äúimplementations should not create any [others]‚Äù bit, that is","date":"2017-10-18T20:27:08.885Z","type":"message"}
{"nick":"bathos","date":"2017-10-18T20:27:14.421Z","type":"join"}
{"nick":"Bakkot","message":"aaaanyway jwalden I think the hook in test262 should be fixed to match the spec‚Äôd behavior of document.all","date":"2017-10-18T20:27:38.115Z","type":"message"}
{"nick":"jwalden","message":"definitely it's desirable/useful that a test here not require having a full browser build to test it, 'cause building a little JS engine versus a big browser is a very different degree of time requirement","date":"2017-10-18T20:28:44.109Z","type":"message"}
{"nick":"jwalden","message":"anyway","date":"2017-10-18T20:28:46.066Z","type":"message"}
{"nick":"jwalden","action":"goes to fix document.all()","date":"2017-10-18T20:28:50.754Z","type":"action"}
{"nick":"jwalden","message":"now, it *may* be the case that .return === null or .@@asyncIterator === null causes a subsequent TypeError","date":"2017-10-18T20:35:17.495Z","type":"message"}
{"nick":"jwalden","message":"or rather, when invoking either returns null causes one","date":"2017-10-18T20:35:27.579Z","type":"message"}
{"nick":"jwalden","message":"\"Let innerReturnResult be ? Call(return, iterator, ¬´ received.[[Value]] ¬ª).\" \"If Type(innerReturnResult) is not Object, throw a TypeError exception.\"","date":"2017-10-18T20:37:27.149Z","type":"message"}
{"nick":"jwalden","message":"well, ugh","date":"2017-10-18T20:37:46.209Z","type":"message"}
{"nick":"jwalden","message":"so in that case .return === document.all will cause a TypeError to be thrown","date":"2017-10-18T20:38:00.255Z","type":"message"}
{"nick":"jwalden","message":"well, won't *necessarily*","date":"2017-10-18T20:38:49.418Z","type":"message"}
{"nick":"jwalden","message":"on the other hand, if you can get received.[[Value]] to be \"\", then you would I think hit step 1 of https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#concept-get-all-named and return null and cause that TypeError","date":"2017-10-18T20:39:20.283Z","type":"message"}
{"nick":"jwalden","message":"bah, this is all very sadmaking","date":"2017-10-18T20:39:30.075Z","type":"message"}
{"nick":"Fishrock123","date":"2017-10-18T20:44:47.956Z","type":"join"}
{"nick":"caitp","reason":"Ping timeout: 248 seconds","date":"2017-10-18T20:49:03.687Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-18T20:53:16.625Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-18T20:53:50.689Z","type":"join"}
{"nick":"caitp","date":"2017-10-18T20:55:20.215Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-10-18T20:57:32.016Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 258 seconds","date":"2017-10-18T20:58:16.671Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-18T21:04:47.752Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-18T21:09:03.855Z","type":"quit"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T21:42:53.871Z","type":"quit"}
{"nick":"bathos","date":"2017-10-18T21:44:08.852Z","type":"join"}
{"nick":"Fishrock123","date":"2017-10-18T22:09:53.671Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 260 seconds","date":"2017-10-18T22:15:12.707Z","type":"quit"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-18T22:20:32.032Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-18T22:51:58.387Z","type":"join"}
{"nick":"bathos","date":"2017-10-18T23:33:36.374Z","type":"join"}
{"nick":"bathos","reason":"Client Quit","date":"2017-10-18T23:34:09.819Z","type":"quit"}
{"nick":"bathos","date":"2017-10-18T23:34:47.376Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-10-18T23:38:10.472Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-10-18T23:38:38.853Z","type":"join"}
{"nick":"bradleymeck","date":"2017-10-18T23:48:22.725Z","type":"join"}
