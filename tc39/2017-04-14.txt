{"nick":"bttf","date":"2017-04-14T00:04:22.916Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-04-14T00:05:04.079Z","type":"quit"}
{"nick":"TabAtkins","message":"Yeah, that's why we now have a completely separate minute taker; they don't need to pay attention to what's going on.","date":"2017-04-14T00:11:26.493Z","type":"message"}
{"nick":"dilijev","message":"So this note taker is not a member of tc39 - just someone whose sole responsibility it is to take notes?","date":"2017-04-14T00:51:05.846Z","type":"message"}
{"nick":"dilijev","message":"I want to discuss some semantics and behavior of Intl.getCanonicalLocales (CanonicalizeLocaleList) to understand whether some differences I'm seeing between V8/Chakra (ICU/WinGlob) are a violation of spec or implementation details. Anyone around? It's tough when the spec refers to RFC 5646 and ICU refers to BCP 47 (which is RFC 5646 + RFC 4647) -- hard to","date":"2017-04-14T00:53:44.767Z","type":"message"}
{"nick":"dilijev","message":"tell what steps are required versus optional and what forms are considered normal.","date":"2017-04-14T00:53:44.957Z","type":"message"}
{"nick":"dilijev","message":"Reading the various documents has turned into a rabbit hole and I've fallen back on experimenting and writing test cases to compare outputs.","date":"2017-04-14T00:54:36.625Z","type":"message"}
{"nick":"dilijev","message":"There's also some possibly-relevant information in https://github.com/tc39/ecma402/issues/87#issuecomment-225570830","date":"2017-04-14T00:57:11.840Z","type":"message"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-04-14T04:49:19.612Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-14T05:56:09.911Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-04-14T07:38:54.009Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-04-14T10:25:05.980Z","type":"quit"}
{"nick":"mylesborins","date":"2017-04-14T10:25:36.552Z","type":"join"}
{"nick":"jmdyck","date":"2017-04-14T11:41:42.762Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-14T12:54:50.125Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-14T12:55:12.245Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 260 seconds","date":"2017-04-14T13:10:14.868Z","type":"quit"}
{"nick":"jmdyck","date":"2017-04-14T13:11:53.948Z","type":"join"}
{"nick":"brianloveswords","date":"2017-04-14T13:40:06.101Z","type":"quit"}
{"nick":"brianloveswords","date":"2017-04-14T13:40:20.122Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-14T13:45:23.407Z","type":"quit"}
{"nick":"littledan","message":"dilijev: I'm interested in that topic--are you talking about https://github.com/tc39/ecma402/issues/141 ?","date":"2017-04-14T15:53:11.336Z","type":"message"}
{"nick":"littledan","message":"what sort of test cases do you have?","date":"2017-04-14T15:53:37.340Z","type":"message"}
{"nick":"littledan","message":"FWIW the spec refers to RFC 4647 in https://tc39.github.io/ecma402/#sec-language-tags","date":"2017-04-14T16:00:12.400Z","type":"message"}
{"nick":"littledan","message":"but 6.2.3 CanonicalizeLanguageTag does not reference it. Hard to tell whether that's an oversight or deliberate variability","date":"2017-04-14T16:01:01.943Z","type":"message"}
{"nick":"littledan","message":"if you're only comparing against V8, though, V8 definitely does not have 100% ECMA 402 spec compliance...","date":"2017-04-14T16:02:02.734Z","type":"message"}
{"nick":"littledan","message":"how does the ICU/WinGlob implementation behave differently?","date":"2017-04-14T16:02:18.960Z","type":"message"}
{"nick":"gskachkov_","date":"2017-04-14T16:58:59.046Z","type":"join"}
{"nick":"dilijev","message":"I'm working in that area of the spec, hence opening that issue.","date":"2017-04-14T17:08:52.681Z","type":"message"}
{"nick":"dilijev","message":"Ah I guess I forgot I saw the reference to all of the documents there. BCP 47 is obviously the whole set of relevant documents here. Not really worried about that.","date":"2017-04-14T17:09:45.793Z","type":"message"}
{"nick":"dilijev","message":"so let's see, I'm sure there are other cases","date":"2017-04-14T17:10:03.742Z","type":"message"}
{"nick":"dilijev","message":"but the one I'm looking at in particular is in test262\\test\\intl402\\6.2.3.js","date":"2017-04-14T17:11:01.384Z","type":"message"}
{"nick":"dilijev","message":"line 27 \"ji\": [\"yi\"],","date":"2017-04-14T17:11:11.602Z","type":"message"}
{"nick":"dilijev","message":"Basically, the old Yiddish tag (\"ji\") should, according to this test, canonicalize to exactly (and only) the new Yiddish tag.","date":"2017-04-14T17:11:53.871Z","type":"message"}
{"nick":"dilijev","message":"The problem as I see it is that in order to make that transformation you need to have that information in your database.","date":"2017-04-14T17:12:52.055Z","type":"message"}
{"nick":"dilijev","message":"I'm trying to find where it says that this particular step should be taken in canonicalization.","date":"2017-04-14T17:13:08.392Z","type":"message"}
{"nick":"dilijev","message":"I think the more important thing is that your i18n stack either knows about the equivalence and handles either tag, or knows how to handle the canonical tags output from Intl.getCanonicalLocales in such a way that i18n proceeds as planned.","date":"2017-04-14T17:14:23.512Z","type":"message"}
{"nick":"dilijev","message":"The test begs the question, is \"ji\"->\"yi\" truly a necessary transformation for i18n to work correctly and for the tag to be considered to be in canonical form?","date":"2017-04-14T17:15:18.090Z","type":"message"}
{"nick":"dilijev","message":"This also applies to the other language names which have been revised in ISO 639-1 (iw -> he, in -> id)","date":"2017-04-14T17:16:42.215Z","type":"message"}
{"nick":"dilijev","message":"Chrome gives the wrong result here. Firefox gets it correct. Anything using small-icu (i.e. Node) or another database may get it wrong if that information is not in the database","date":"2017-04-14T17:17:30.909Z","type":"message"}
{"nick":"dilijev","message":"Edge (WinGlob) does something weird, not sure what to make of this","date":"2017-04-14T17:17:47.357Z","type":"message"}
{"nick":"dilijev","message":"er, ChakraCore with the Intl.getCanonicalLocales api implemented does something weird when running under the test262-runner anyway","date":"2017-04-14T17:21:02.426Z","type":"message"}
{"nick":"dilijev","message":"It was returning yi-001","date":"2017-04-14T17:21:08.907Z","type":"message"}
{"nick":"dilijev","message":"I'm trying to figure out what those number codes actually mean and whether that should be considered wrong","date":"2017-04-14T17:21:26.492Z","type":"message"}
{"nick":"dilijev","message":"FWIW in the browser, Intl.DateTimeFormat.supportedLocalesOf(['ji','iw','in']) // -> [\"yi\", \"he\", \"id\"]","date":"2017-04-14T17:21:47.668Z","type":"message"}
{"nick":"dilijev","message":"slightly different answer potentially from Intl.getCanonicalLocales() but FWIW running ch.exe directly from the console:","date":"2017-04-14T17:22:51.490Z","type":"message"}
{"nick":"dilijev","message":"Intl.getCanonicalLocales(['ji','iw','in']) // -> [\"yi\", \"he\", \"id\"]","date":"2017-04-14T17:22:59.027Z","type":"message"}
{"nick":"dilijev","message":"So I'm not really sure what I'm seeing now... I was trusting the test262-harness","date":"2017-04-14T17:23:14.107Z","type":"message"}
{"nick":"dilijev","message":"But consider a database which doesn't have this information, \"ji\" might still be considered a tag in canonical form, the same way that \"yy\" is not a real language but is returned from Intl.getCanonicalLocales(\"yy\")","date":"2017-04-14T17:24:47.154Z","type":"message"}
{"nick":"dilijev","message":"Okay so I found a list of region codes on wikipedia. Numeric region subtags come from UN M.49","date":"2017-04-14T17:39:21.718Z","type":"message"}
{"nick":"dilijev","message":"https://en.wikipedia.org/wiki/UN_M.49","date":"2017-04-14T17:39:22.221Z","type":"message"}
{"nick":"dilijev","message":"001 = World, which granted, isn't very specific, but isn't wrong in any meaningful way for yiddish","date":"2017-04-14T17:39:37.369Z","type":"message"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-14T18:13:06.806Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-14T18:23:33.002Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-14T19:26:08.633Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-14T19:34:35.035Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-04-14T20:49:33.990Z","type":"join"}
{"nick":"gskachkov_","reason":"Quit: gskachkov_","date":"2017-04-14T21:34:17.254Z","type":"quit"}
{"nick":"gskachkov_","date":"2017-04-14T21:34:51.775Z","type":"join"}
{"nick":"gskachkov_","reason":"Client Quit","date":"2017-04-14T21:36:27.250Z","type":"quit"}
{"nick":"tcare","reason":"Quit: Connection closed for inactivity","date":"2017-04-14T21:50:05.658Z","type":"quit"}
{"nick":"Bakkot","message":"ljharb / littledan: as I look at it more, I'm no longer 100% convinced that allowing the `#x` shorthand for `this.#x` is actually a good idea.","date":"2017-04-14T22:52:39.219Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: i don't actually care whether we allow it or not; if it's allowed, i'll add a lint rule to eslint/airbnb config to forbid it, because having two ways to type something is bad news bears :-)","date":"2017-04-14T23:53:40.360Z","type":"message"}
{"nick":"ljharb","message":"(unless it's required, in which case, that's fine)","date":"2017-04-14T23:53:50.123Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: one argument i see for disallowing it is, `this.#x === other.#x` is symmetric; `#x === other.#x` isn't","date":"2017-04-14T23:55:34.312Z","type":"message"}
{"nick":"ljharb","message":"also, if i `.call` with a different this, it's not as clear to me that `#x` points to it","date":"2017-04-14T23:55:49.644Z","type":"message"}
{"nick":"Bakkot","message":"mm, the fact that `#x()` would have get the `this` of the object instead of undefined would be confusing maybe","date":"2017-04-14T23:56:41.455Z","type":"message"}
{"nick":"Bakkot","message":"which is an argument against","date":"2017-04-14T23:56:51.785Z","type":"message"}
{"nick":"ljharb","message":"also that, sure","date":"2017-04-14T23:57:29.902Z","type":"message"}
{"nick":"ljharb","message":"and `this.#x.call(other)` might be clearer than `#x.call(other)` given that `#x()` would have the receiver as \"this\"","date":"2017-04-14T23:57:52.325Z","type":"message"}
{"nick":"Bakkot","message":"I think the argument for the shorthand is just that `other.#x` is a *lot* less common than using properties of `this`.","date":"2017-04-14T23:58:10.988Z","type":"message"}
{"nick":"ljharb","message":"sure, but `this.foo` doesn't have a shorthand","date":"2017-04-14T23:58:28.462Z","type":"message"}
{"nick":"Bakkot","message":"yeah.","date":"2017-04-14T23:58:34.267Z","type":"message"}
{"nick":"ljharb","message":"guaranteed people will start yelling for it if `#x` is allowed :-)","date":"2017-04-14T23:58:39.210Z","type":"message"}
{"nick":"ljharb","message":"(not that i know what syntax could possibly work for that)","date":"2017-04-14T23:59:08.450Z","type":"message"}
