{"nick":"cloudshu","message":"bterlson: i noticed that <li> don't have sensible right margins","date":"2017-06-15T00:17:20.910Z","type":"message"}
{"nick":"zsoc","date":"2017-06-15T00:27:46.866Z","type":"join"}
{"nick":"bterlson","message":"cloudshu: who's to say what's sensible to li's???","date":"2017-06-15T00:31:30.689Z","type":"message"}
{"nick":"cloudshu","message":"bterlson: are you saying it needs consensus","date":"2017-06-15T00:34:06.612Z","type":"message"}
{"nick":"bterlson","message":"cloudshu: no, just joking, but what do you mean?","date":"2017-06-15T00:36:55.016Z","type":"message"}
{"nick":"cloudshu","message":"sorry i didn't add enough ???s to convey i was also joking","date":"2017-06-15T00:37:17.645Z","type":"message"}
{"nick":"cloudshu","message":"bterlson: i mean the right margin for text in <li> seems to extend past text in other tags","date":"2017-06-15T00:37:57.276Z","type":"message"}
{"nick":"cloudshu","message":"bterlson: http://i.imgur.com/vAi2yA1.jpg the item under reads-bytes-from","date":"2017-06-15T00:40:19.029Z","type":"message"}
{"nick":"Fishrock123","date":"2017-06-15T00:41:07.035Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 255 seconds","date":"2017-06-15T00:46:09.982Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-06-15T00:51:55.049Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-06-15T00:51:55.234Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-06-15T01:06:55.019Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2017-06-15T01:21:43.349Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-06-15T01:53:51.424Z","type":"join"}
{"nick":"gibson042","date":"2017-06-15T01:58:11.857Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 255 seconds","date":"2017-06-15T02:03:53.868Z","type":"quit"}
{"nick":"gibson042","date":"2017-06-15T02:19:03.578Z","type":"join"}
{"nick":"chicoxyz_","reason":"Remote host closed the connection","date":"2017-06-15T02:35:01.400Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-06-15T02:35:36.329Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 240 seconds","date":"2017-06-15T02:39:38.194Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-06-15T03:07:36.552Z","type":"join"}
{"nick":"chicoxyzzy","date":"2017-06-15T03:54:59.492Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2017-06-15T04:53:14.028Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T05:00:51.135Z","type":"quit"}
{"nick":"abernix","date":"2017-06-15T05:12:44.011Z","type":"join"}
{"nick":"littledan","message":"hey, someone was saying, too bad we won't get `#{...}` for immutable objects if # is taken by private. If a syntax for immutable objects is a goal, how about `%{...}` for it? A nice thing about choosing a token to set off object syntax is, object literals are already an ASI hazard, so we could use an infix operator for it without causing any sort of additional ambiguity. Another option would be `^{...}`","date":"2017-06-15T05:21:31.056Z","type":"message"}
{"nick":"ljharb","message":"just so i understand what the constraints are, can you elaborate on why `${}` wouldn't work, or `>{}`, or another char/identifier/operator?","date":"2017-06-15T05:25:32.369Z","type":"message"}
{"nick":"abernix_","date":"2017-06-15T05:58:21.351Z","type":"join"}
{"nick":"abernix","reason":"Ping timeout: 255 seconds","date":"2017-06-15T06:01:37.049Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T06:17:47.009Z","type":"join"}
{"nick":"gskachkov_","date":"2017-06-15T06:19:22.020Z","type":"join"}
{"nick":"gskachkov","reason":"Read error: Connection reset by peer","date":"2017-06-15T06:19:22.207Z","type":"quit"}
{"nick":"gskachkov_","new_nick":"gskachkov","date":"2017-06-15T06:19:22.207Z","type":"nick"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-06-15T06:23:40.540Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T06:24:47.454Z","type":"join"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-06-15T06:26:14.548Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T06:27:17.575Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T06:33:02.196Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T06:34:45.407Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T06:50:21.809Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T06:51:04.893Z","type":"join"}
{"nick":"abernix","date":"2017-06-15T07:16:07.057Z","type":"join"}
{"nick":"abernix_","reason":"Ping timeout: 240 seconds","date":"2017-06-15T07:18:50.789Z","type":"quit"}
{"nick":"littledan","message":"yeah, i guess an identifier \"as a contextual keyword\" such as $ would work just fine","date":"2017-06-15T07:50:29.208Z","type":"message"}
{"nick":"littledan","message":"I'd worry a little about > because it might not throw an exception if you use it wrong","date":"2017-06-15T07:50:59.617Z","type":"message"}
{"nick":"abernix","reason":"Quit: Bye","date":"2017-06-15T09:33:26.885Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T10:11:30.258Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T10:12:28.849Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-06-15T10:25:10.090Z","type":"quit"}
{"nick":"mylesborins","date":"2017-06-15T10:25:40.687Z","type":"join"}
{"nick":"chicoxyzzy","date":"2017-06-15T10:34:42.257Z","type":"join"}
{"nick":"chicoxyz_","date":"2017-06-15T10:37:27.198Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 240 seconds","date":"2017-06-15T10:40:07.828Z","type":"quit"}
{"nick":"jmdyck","date":"2017-06-15T11:35:05.228Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-06-15T11:43:34.141Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T12:00:48.365Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T12:02:21.007Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-06-15T12:40:16.542Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T13:01:06.664Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T13:02:01.013Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T13:53:35.670Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T13:56:41.769Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T14:39:57.332Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-06-15T15:00:45.779Z","type":"join"}
{"nick":"ljharb","message":"sure, any choice would be ideal to throw if used wrong","date":"2017-06-15T15:04:29.313Z","type":"message"}
{"nick":"gskachkov","date":"2017-06-15T15:32:24.466Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 240 seconds","date":"2017-06-15T15:36:35.466Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T17:27:30.458Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-06-15T17:35:22.860Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T17:52:11.129Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-06-15T18:10:38.369Z","type":"join"}
{"nick":"gskachkov","date":"2017-06-15T18:13:37.022Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T18:48:20.852Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T18:51:12.862Z","type":"join"}
{"nick":"aklein","message":"speaking of things that got deferred, a coworker was bugging me the other day about the fact that Arrays have this whole set of nice methods (map, filter, reduce). But if you switch to use Set you lose access to those. was there ever a concrete proposal about adding such methods for acting on iterators (or iterables)?","date":"2017-06-15T19:05:05.199Z","type":"message"}
{"nick":"aklein","message":"I imagine it gets tied up in some circular dependency with builtin modules and `::`","date":"2017-06-15T19:05:26.318Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T19:05:41.125Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T19:10:19.053Z","type":"join"}
{"nick":"ljharb","message":"aklein: there's not been a concrete proposal. it'd be awesome to add all those methods.","date":"2017-06-15T19:31:29.140Z","type":"message"}
{"nick":"ljharb","message":"i have a proposal in mind that might address it, but it's like a year out before i'll have time to write it up. i'll pitch it to you in july :-)","date":"2017-06-15T19:31:59.785Z","type":"message"}
{"nick":"jeffmo_","message":"ljharb: littledan: Why does private fields limit the ability to use `#{}`? It seems to be technically feasible still -- is it just that it looks too close?","date":"2017-06-15T19:40:37.349Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T19:41:14.561Z","type":"quit"}
{"nick":"gskachkov","date":"2017-06-15T19:41:41.771Z","type":"join"}
{"nick":"jeffmo_","message":"aklein: IIRC that last time that was discussed it was lumped in with the need to apply a holistic \"container\" interface with these methods to *all* containers -- which gets pretty weird pretty quick. For example, what do `keys()` or `sort()` even mean on a Set?","date":"2017-06-15T19:43:54.681Z","type":"message"}
{"nick":"Domenic","message":"So we think ^{...} is OK even though `5 ^ { foo: \"bar\" } === 5`?","date":"2017-06-15T19:48:08.570Z","type":"message"}
{"nick":"Domenic","message":"Hmm no, I get it","date":"2017-06-15T19:48:33.322Z","type":"message"}
{"nick":"Domenic","message":"5 { foo: \"bar\" } is already an ASI hazard so we can use ^","date":"2017-06-15T19:48:50.741Z","type":"message"}
{"nick":"Domenic","message":"aklein: I floated ideas on that front a while ago, in particular adding them to Iterator.prototype","date":"2017-06-15T19:49:25.611Z","type":"message"}
{"nick":"Domenic","message":"Then the syntax becomes something like map.entries().filter(...).map(...).collect(Map)","date":"2017-06-15T19:49:50.637Z","type":"message"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2017-06-15T19:50:00.048Z","type":"quit"}
{"nick":"Domenic","message":"Which is not as nice as map.filter(...).map(...), to be sure","date":"2017-06-15T19:50:01.628Z","type":"message"}
{"nick":"Domenic","message":"jeffmo_: my take would be treat everything as \"array like\" according to their default @@iterator, so maps are \"arrays\" of [k, v] arrays, sets are \"arrays\" of their values, etc.","date":"2017-06-15T19:51:14.534Z","type":"message"}
{"nick":"gskachkov","date":"2017-06-15T19:52:41.006Z","type":"join"}
{"nick":"jeffmo_","message":"Domenic: would someSet.filter() would return an array? Or a set?","date":"2017-06-15T19:53:27.241Z","type":"message"}
{"nick":"Domenic","message":"jeffmo_: a Set seems reasonable","date":"2017-06-15T19:53:45.925Z","type":"message"}
{"nick":"jeffmo_","message":"And someSet.sort() would return an array?","date":"2017-06-15T19:54:02.013Z","type":"message"}
{"nick":"Domenic","message":"No, still a Set","date":"2017-06-15T19:54:07.627Z","type":"message"}
{"nick":"Domenic","message":"Sets are ordered, remember","date":"2017-06-15T19:54:11.513Z","type":"message"}
{"nick":"jeffmo_","message":"oh I didn't know that","date":"2017-06-15T19:54:22.974Z","type":"message"}
{"nick":"Domenic","message":"Yeah they have a deterministic iteration order","date":"2017-06-15T19:54:31.793Z","type":"message"}
{"nick":"Domenic","message":"(same for Maps)","date":"2017-06-15T19:54:42.474Z","type":"message"}
{"nick":"jeffmo_","message":"ok, in that case I guess I can't think of any issue with it at the moment","date":"2017-06-15T19:56:03.521Z","type":"message"}
{"nick":"gskachkov","reason":"Client Quit","date":"2017-06-15T19:57:12.062Z","type":"quit"}
{"nick":"jeffmo_","message":"I guess it sort of implies that any future container types we add probably need to be ordered as well","date":"2017-06-15T19:58:04.953Z","type":"message"}
{"nick":"gskachkov","date":"2017-06-15T19:58:11.917Z","type":"join"}
{"nick":"Bakkot","message":"we tend to get caught up in the design of the thing","date":"2017-06-15T20:00:08.830Z","type":"message"}
{"nick":"Bakkot","message":"e.g. maybe it makes sense for these to be features people implementing other data structures could use, a la c++'s <algorithm>","date":"2017-06-15T20:00:45.350Z","type":"message"}
{"nick":"Bakkot","message":"etc","date":"2017-06-15T20:01:00.794Z","type":"message"}
{"nick":"Domenic","message":"Bakkot: that's where the dependency on :: comes in... without that nobody wants to put stuff in the language","date":"2017-06-15T21:08:03.951Z","type":"message"}
{"nick":"littledan","message":"jeffmo_: Syntactically nothing; it might just be confusing semantically","date":"2017-06-15T21:36:20.897Z","type":"message"}
{"nick":"bterlson","message":"I wish there were a way to do set equality without iterating over the entire set","date":"2017-06-15T22:10:01.501Z","type":"message"}
{"nick":"bterlson","message":"although I guess with ordering equality might be a confusing property of sets?","date":"2017-06-15T22:10:24.262Z","type":"message"}
{"nick":"bterlson","message":"{ equals(orderIsSignificant = false) => boolean } ?","date":"2017-06-15T22:12:10.598Z","type":"message"}
{"nick":"Domenic","message":"That seems reasonable, although I want that for arrays too","date":"2017-06-15T22:14:54.608Z","type":"message"}
{"nick":"Domenic","message":"(Also, { orderIsSignificant: false }, no boolean arguments please.)","date":"2017-06-15T22:15:23.386Z","type":"message"}
{"nick":"bterlson","message":"yeah","date":"2017-06-15T22:17:37.369Z","type":"message"}
{"nick":"bterlson","message":"ok","date":"2017-06-15T22:17:41.331Z","type":"message"}
{"nick":"bterlson","message":"maybe I'll put this together","date":"2017-06-15T22:17:46.487Z","type":"message"}
{"nick":"bterlson","message":"I've implemented set equality probably a dozen times since ES6","date":"2017-06-15T22:17:53.818Z","type":"message"}
{"nick":"bterlson","message":"getting absurd","date":"2017-06-15T22:17:56.338Z","type":"message"}
{"nick":"bterlson","message":"Array seems reasonable too","date":"2017-06-15T22:18:05.646Z","type":"message"}
{"nick":"bterlson","message":"maybe `hasSameItems` or another more descriptive name is in order but that's for later bikeshedding ;)","date":"2017-06-15T22:18:26.847Z","type":"message"}
{"nick":"Domenic","message":"The potential roadblock I see is squatting on the \".equals\" name","date":"2017-06-15T22:21:56.249Z","type":"message"}
{"nick":"Domenic","message":"If we ever want some kind of generic equality protocol (e.g. for Map keys/Set values) that seems like a prime candidate","date":"2017-06-15T22:22:17.409Z","type":"message"}
{"nick":"aklein","message":"gsathya: ^^^ relevant to our discussion the other day","date":"2017-06-15T22:49:59.954Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-06-15T22:50:00.453Z","type":"quit"}
{"nick":"chicoxyz_","reason":"Remote host closed the connection","date":"2017-06-15T23:11:01.929Z","type":"quit"}
{"nick":"chicoxyzzy","date":"2017-06-15T23:11:37.553Z","type":"join"}
{"nick":"chicoxyz_","date":"2017-06-15T23:14:58.191Z","type":"join"}
{"nick":"bradleymeck","date":"2017-06-15T23:16:02.008Z","type":"join"}
{"nick":"chicoxyzzy","reason":"Ping timeout: 240 seconds","date":"2017-06-15T23:16:05.466Z","type":"quit"}
{"nick":"gskachkov","reason":"Ping timeout: 255 seconds","date":"2017-06-15T23:25:34.861Z","type":"quit"}
{"nick":"bterlson","message":"does it though if you will often need to parameterize whether ordering is important?","date":"2017-06-15T23:34:10.958Z","type":"message"}
{"nick":"bterlson","message":"my usage in sets is 100% unordered but for arrays ordered may be the reasonable default","date":"2017-06-15T23:34:43.892Z","type":"message"}
{"nick":"chicoxyz_","reason":"Remote host closed the connection","date":"2017-06-15T23:35:10.008Z","type":"quit"}
{"nick":"bterlson","message":"generic equality protocol would probably use a symbol anyway","date":"2017-06-15T23:35:13.525Z","type":"message"}
{"nick":"bterlson","message":"similar also to `Symbol.matches` for the pattern matching protocol","date":"2017-06-15T23:35:38.044Z","type":"message"}
{"nick":"chicoxy__","date":"2017-06-15T23:37:51.699Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-06-15T23:38:32.135Z","type":"quit"}
{"nick":"Domenic","message":"Well the difference is people might call the generic equality protocol in normal code, not through syntax","date":"2017-06-15T23:39:55.087Z","type":"message"}
{"nick":"bradleymeck","date":"2017-06-15T23:52:32.803Z","type":"join"}
{"nick":"zsoc","reason":"Ping timeout: 268 seconds","date":"2017-06-15T23:53:55.735Z","type":"quit"}
{"nick":"bterlson","message":"Any thoughts on this syntax: MatchExpression :: `match` [no |LineTerminator| here] `(` Expression `)` [no |LineTerminator| here] `{` MatchExpressionClauses `}`","date":"2017-06-15T23:55:28.894Z","type":"message"}
{"nick":"bterlson","message":"hard to disambiguate with calls to a function named `match` but how bad is it really :-P","date":"2017-06-15T23:56:13.450Z","type":"message"}
{"nick":"Domenic","message":"why not reuse switch?","date":"2017-06-15T23:57:19.731Z","type":"message"}
