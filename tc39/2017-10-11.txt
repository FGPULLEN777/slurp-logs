{"nick":"jmdyck1","date":"2017-10-11T00:24:00.005Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2017-10-11T00:42:20.812Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-10-11T00:49:28.389Z","type":"quit"}
{"nick":"Domenic","message":"I think that'll find a method named `call` on the super object and call it with the `this` value","date":"2017-10-11T01:00:42.897Z","type":"message"}
{"nick":"gibson042","date":"2017-10-11T01:05:45.724Z","type":"join"}
{"nick":"bradleymeck","date":"2017-10-11T01:15:14.859Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2017-10-11T01:17:04.099Z","type":"quit"}
{"nick":"caiolima","message":"Domenic: What I'm confused here is that by spec, Function.prototype.call should be receive a function as parameter as well","date":"2017-10-11T01:18:48.116Z","type":"message"}
{"nick":"caiolima","message":"https://tc39.github.io/ecma262/#sec-function.prototype.call","date":"2017-10-11T01:18:49.925Z","type":"message"}
{"nick":"caiolima","message":"\"func\"","date":"2017-10-11T01:19:02.082Z","type":"message"}
{"nick":"Domenic","message":"caiolima: \"When the call method is called ****on an object func***...\"","date":"2017-10-11T01:19:41.999Z","type":"message"}
{"nick":"caiolima","message":"Domenic: In such case, \"super\" is not an object, right?","date":"2017-10-11T01:22:26.314Z","type":"message"}
{"nick":"Domenic","message":"Why not?","date":"2017-10-11T01:22:33.175Z","type":"message"}
{"nick":"caiolima","message":"Domenic: I can't just \"let a = super\"","date":"2017-10-11T01:23:35.443Z","type":"message"}
{"nick":"Domenic","message":"That doesn't have anything to do with it being an object or not","date":"2017-10-11T01:23:44.584Z","type":"message"}
{"nick":"caiolima","message":"Domenic: Ok, but if it is an object, is it Callable?","date":"2017-10-11T01:24:05.454Z","type":"message"}
{"nick":"Domenic","message":"Not all objects are callable","date":"2017-10-11T01:24:13.547Z","type":"message"}
{"nick":"Domenic","message":"Try calling it and find out!","date":"2017-10-11T01:24:22.327Z","type":"message"}
{"nick":"Domenic","message":"Well, no, that won't work","date":"2017-10-11T01:24:27.937Z","type":"message"}
{"nick":"Domenic","message":"I think in this case the super is callable","date":"2017-10-11T01:24:51.519Z","type":"message"}
{"nick":"Domenic","message":"Since it's an instance of B which is an instance of Function so should be callable","date":"2017-10-11T01:25:12.233Z","type":"message"}
{"nick":"Domenic","message":"basically that line is equivalent to Function.prototype.call.call(this, this)","date":"2017-10-11T01:25:52.627Z","type":"message"}
{"nick":"Domenic","message":"Pretty sure that's right","date":"2017-10-11T01:25:59.027Z","type":"message"}
{"nick":"caiolima","message":"Domenic: I see.","date":"2017-10-11T01:26:39.333Z","type":"message"}
{"nick":"Domenic","message":"consider `class B extends D { t() { super.foo(bar); }`. Then it is equivalent to `D.prototype.foo.call(this, bar)`. Just pattern match back into place.","date":"2017-10-11T01:26:56.812Z","type":"message"}
{"nick":"caiolima","message":"No problems them. Just checking if I'm not messing something around","date":"2017-10-11T01:27:11.836Z","type":"message"}
{"nick":"caiolima","message":"then*","date":"2017-10-11T01:27:19.155Z","type":"message"}
{"nick":"Domenic","message":"It's pretty trippy what you're doing :)","date":"2017-10-11T01:27:23.691Z","type":"message"}
{"nick":"caiolima","message":"Domenic: Thanks.","date":"2017-10-11T01:27:30.413Z","type":"message"}
{"nick":"caiolima","message":"Domenic: well...I'm testing if my change on \"super.call\" isn't inserting new bugs","date":"2017-10-11T01:28:48.154Z","type":"message"}
{"nick":"caiolima","message":"basically fixing this bug here: https://bugs.webkit.org/show_bug.cgi?id=177230","date":"2017-10-11T01:29:08.546Z","type":"message"}
{"nick":"rbuckton","reason":"Quit: Connection closed for inactivity","date":"2017-10-11T01:31:28.236Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-10-11T02:11:27.035Z","type":"join"}
{"nick":"spion_","reason":"Ping timeout: 240 seconds","date":"2017-10-11T02:21:05.569Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit:  ","date":"2017-10-11T02:25:12.516Z","type":"quit"}
{"nick":"spion","date":"2017-10-11T02:25:50.749Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-10-11T03:53:50.135Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-10-11T04:35:08.709Z","type":"join"}
{"nick":"jmdyck1","reason":"Quit: Leaving.","date":"2017-10-11T05:01:29.420Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2017-10-11T05:03:11.083Z","type":"quit"}
{"nick":"bathos","message":"is there a mechanism / is there a proposed mechanism for custom pseudoclasses in web components (or something equivalent?) — in some cases, css vars do the trick, but in others it doesn’t work out that way","date":"2017-10-11T05:28:44.889Z","type":"message"}
{"nick":"bathos","message":"oops, wrong channel :x","date":"2017-10-11T05:29:25.483Z","type":"message"}
{"nick":"bathos","reason":"Quit: bathos","date":"2017-10-11T06:29:51.172Z","type":"quit"}
{"nick":"howdoi","date":"2017-10-11T07:50:40.615Z","type":"join"}
