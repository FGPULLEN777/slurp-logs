{"nick":"chapel","reason":"Read error: Operation timed out","date":"2013-05-22T00:19:49.491Z","type":"quit"}
{"nick":"werle","reason":"Quit: Leaving.","date":"2013-05-22T00:23:08.981Z","type":"quit"}
{"nick":"rvagg","message":"Node 0.11 Buffer changes are looking interesting; we might be able to squeeze greater performance out of Buffer passing by completely avoiding another memcpy on the way of LevelDB to V8","date":"2013-05-22T00:25:01.639Z","type":"message"}
{"nick":"no9","reason":"Ping timeout: 264 seconds","date":"2013-05-22T00:27:06.159Z","type":"quit"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-05-22T00:47:10.563Z","type":"quit"}
{"nick":"chapel","date":"2013-05-22T00:49:06.246Z","type":"join"}
{"nick":"ralphtheninja","reason":"Ping timeout: 264 seconds","date":"2013-05-22T00:56:55.289Z","type":"quit"}
{"nick":"ralphtheninja","date":"2013-05-22T00:57:03.339Z","type":"join"}
{"nick":"timoxley","date":"2013-05-22T01:16:15.338Z","type":"join"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-05-22T02:24:56.698Z","type":"quit"}
{"nick":"ralphtheninja","reason":"Ping timeout: 276 seconds","date":"2013-05-22T02:25:22.216Z","type":"quit"}
{"nick":"chapel","reason":"Read error: Operation timed out","date":"2013-05-22T02:38:23.180Z","type":"quit"}
{"nick":"CPartridge","new_nick":"ChrisPartridge","date":"2013-05-22T02:41:18.200Z","type":"nick"}
{"nick":"chapel","date":"2013-05-22T02:51:31.224Z","type":"join"}
{"nick":"owen1","reason":"Ping timeout: 264 seconds","date":"2013-05-22T03:11:19.292Z","type":"quit"}
{"nick":"owen1","date":"2013-05-22T03:26:00.010Z","type":"join"}
{"nick":"timoxley","date":"2013-05-22T04:11:24.974Z","type":"join"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-05-22T04:29:59.353Z","type":"quit"}
{"nick":"timoxley","date":"2013-05-22T04:31:16.357Z","type":"join"}
{"nick":"timoxley","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2013-05-22T05:33:20.426Z","type":"quit"}
{"nick":"brianloveswords_","reason":"Excess Flood","date":"2013-05-22T05:33:50.845Z","type":"quit"}
{"nick":"brianloveswords","date":"2013-05-22T05:34:44.073Z","type":"join"}
{"nick":"Pwnna","date":"2013-05-22T07:07:10.066Z","type":"join"}
{"nick":"Pwnna","reason":"Ping timeout: 245 seconds","date":"2013-05-22T07:16:19.060Z","type":"quit"}
{"nick":"no9","date":"2013-05-22T07:26:42.611Z","type":"join"}
{"nick":"juliangruber","message":"rvagg: I've heard about that too, that will be the missing link between buffer and string performance","date":"2013-05-22T07:33:35.209Z","type":"message"}
{"nick":"chapel","reason":"Ping timeout: 260 seconds","date":"2013-05-22T07:51:43.837Z","type":"quit"}
{"nick":"chapel","date":"2013-05-22T07:53:59.140Z","type":"join"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-05-22T08:01:05.948Z","type":"quit"}
{"nick":"no9","reason":"Read error: Operation timed out","date":"2013-05-22T08:23:58.535Z","type":"quit"}
{"nick":"ralphtheninja","date":"2013-05-22T08:24:26.800Z","type":"join"}
{"nick":"mcollina","date":"2013-05-22T08:45:41.002Z","type":"join"}
{"nick":"ChrisPartridge","reason":"Ping timeout: 252 seconds","date":"2013-05-22T08:55:02.966Z","type":"quit"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2013-05-22T09:26:00.159Z","type":"quit"}
{"nick":"mcollina","date":"2013-05-22T09:45:57.056Z","type":"join"}
{"nick":"dominictarr","date":"2013-05-22T10:13:39.617Z","type":"join"}
{"nick":"dominictarr","reason":"Ping timeout: 256 seconds","date":"2013-05-22T10:20:10.468Z","type":"quit"}
{"nick":"mcollina_","date":"2013-05-22T10:49:47.214Z","type":"join"}
{"nick":"mcollina","reason":"Ping timeout: 252 seconds","date":"2013-05-22T10:53:17.925Z","type":"quit"}
{"nick":"missinglink","date":"2013-05-22T10:54:59.573Z","type":"join"}
{"nick":"missinglink","date":"2013-05-22T10:55:16.059Z","type":"part"}
{"nick":"werle","date":"2013-05-22T14:25:32.902Z","type":"join"}
{"nick":"werle","reason":"Read error: Connection reset by peer","date":"2013-05-22T17:04:36.159Z","type":"quit"}
{"nick":"werle1","date":"2013-05-22T17:04:42.818Z","type":"join"}
{"nick":"st_luke","date":"2013-05-22T17:16:39.989Z","type":"join"}
{"nick":"brianloveswords","reason":"Excess Flood","date":"2013-05-22T17:31:55.634Z","type":"quit"}
{"nick":"brianloveswords","date":"2013-05-22T17:33:48.023Z","type":"join"}
{"nick":"mcollina_","reason":"Ping timeout: 245 seconds","date":"2013-05-22T19:02:59.118Z","type":"quit"}
{"nick":"ralphtheninja","reason":"Ping timeout: 248 seconds","date":"2013-05-22T19:35:33.702Z","type":"quit"}
{"nick":"weetabeex","reason":"*.net *.split","date":"2013-05-22T19:42:44.909Z","type":"quit"}
{"nick":"ralphtheninja","date":"2013-05-22T19:44:01.291Z","type":"join"}
{"nick":"ralphtheninja","reason":"Client Quit","date":"2013-05-22T19:45:14.304Z","type":"quit"}
{"nick":"weetabeex","date":"2013-05-22T19:50:00.139Z","type":"join"}
{"nick":"dominictarr","date":"2013-05-22T19:51:53.275Z","type":"join"}
{"nick":"werle1","reason":"Quit: Leaving.","date":"2013-05-22T20:05:36.579Z","type":"quit"}
{"nick":"werle","date":"2013-05-22T20:06:00.365Z","type":"join"}
{"nick":"weetabeex","reason":"Ping timeout: 264 seconds","date":"2013-05-22T20:43:54.124Z","type":"quit"}
{"nick":"ralphtheninja","date":"2013-05-22T22:36:14.244Z","type":"join"}
{"nick":"brianloveswords","reason":"Excess Flood","date":"2013-05-22T23:13:50.901Z","type":"quit"}
{"nick":"brianloveswords","date":"2013-05-22T23:15:17.998Z","type":"join"}
{"nick":"werle","reason":"Quit: Leaving.","date":"2013-05-22T23:17:08.011Z","type":"quit"}
{"nick":"Raynos","message":"idea!","date":"2013-05-22T23:35:00.335Z","type":"message"}
{"nick":"Raynos","message":"Implement redis API on top of leveldb","date":"2013-05-22T23:35:07.271Z","type":"message"}
{"nick":"CPartridge","date":"2013-05-22T23:46:56.051Z","type":"join"}
{"nick":"chilts","message":"that'll be interesting ... Redis can do atomic things like 'inc' but with leveldb you'd have to read it out and write it back (possible reads in the middle)","date":"2013-05-22T23:47:20.167Z","type":"message"}
{"nick":"chilts","message":"or we just do the API and the write to disk when we know it's correct?","date":"2013-05-22T23:47:30.445Z","type":"message"}
{"nick":"werle","date":"2013-05-22T23:47:34.833Z","type":"join"}
{"nick":"chilts","message":"e.g. inc in memory then write it at intervals?","date":"2013-05-22T23:47:44.217Z","type":"message"}
{"nick":"chilts","message":"same with things like sets and other types","date":"2013-05-22T23:48:05.986Z","type":"message"}
{"nick":"chilts","message":"I think it would end up being something like Redis in Node.js, with LevelDB as the persistance","date":"2013-05-22T23:49:29.675Z","type":"message"}
{"nick":"chilts","message":"Raynos: ^^ thoughts?","date":"2013-05-22T23:49:34.335Z","type":"message"}
{"nick":"CPartridge","new_nick":"ChrisPartridge","date":"2013-05-22T23:50:14.688Z","type":"nick"}
{"nick":"Raynos","message":"chilts: fuck atomic things","date":"2013-05-22T23:51:33.151Z","type":"message"}
{"nick":"Raynos","message":"but you make a good point","date":"2013-05-22T23:51:58.033Z","type":"message"}
{"nick":"Raynos","message":"sounds like I should give up on this idea","date":"2013-05-22T23:52:04.839Z","type":"message"}
{"nick":"chilts","message":"nah, it's an interesting one :)","date":"2013-05-22T23:52:27.726Z","type":"message"}
{"nick":"chilts","message":"Raynos: I'm also using LevelDB for a kind of distributed store where all changes to items are cumulative (e.g. inc: 1) and then you can 'collapse' the changesets occassionally","date":"2013-05-22T23:53:33.652Z","type":"message"}
{"nick":"chilts","message":"seems to work quite well so far","date":"2013-05-22T23:53:39.806Z","type":"message"}
{"nick":"chilts","message":"(as yet unfinished)","date":"2013-05-22T23:53:48.898Z","type":"message"}
{"nick":"rvagg","message":"inc isn't a problem since a single JS thread is the gateway to leveldb so you can handle conflicting writes in between","date":"2013-05-22T23:54:03.742Z","type":"message"}
{"nick":"chilts","message":"so yeah, it's not atomic but just keeps a list of changes for each item","date":"2013-05-22T23:54:04.772Z","type":"message"}
{"nick":"chilts","message":"rvagg: how do you deal with that in your JS code though?","date":"2013-05-22T23:54:27.427Z","type":"message"}
{"nick":"rvagg","message":"you just need to do a bit of caching and checking--but redis does that anyway","date":"2013-05-22T23:54:31.518Z","type":"message"}
{"nick":"rvagg","message":"chilts: you just need to intercept writes","date":"2013-05-22T23:55:01.902Z","type":"message"}
{"nick":"chilts","message":"ah, there was another module that did that, right?","date":"2013-05-22T23:55:14.188Z","type":"message"}
{"nick":"rvagg","message":"there's a couple that are dealing with this now I think","date":"2013-05-22T23:55:25.916Z","type":"message"}
{"nick":"chilts","message":"so they're sequentially done in exactly the same order as .get(), .put() and .batch()?","date":"2013-05-22T23:55:49.245Z","type":"message"}
{"nick":"chilts","message":"as-in, in the same order you call all of those things","date":"2013-05-22T23:56:03.915Z","type":"message"}
{"nick":"rvagg","message":"not quite, there's no guarantees there but you just need to add some data structures to your js and do some checking as you intercept those calls","date":"2013-05-22T23:56:48.274Z","type":"message"}
{"nick":"chilts","message":"ok","date":"2013-05-22T23:57:14.496Z","type":"message"}
{"nick":"rvagg","message":"BUT, if you're doing a put('foo', 100) just after an inc('foo') what would be the expected behaviour? it should go to 100 regardless eh?","date":"2013-05-22T23:57:36.896Z","type":"message"}
{"nick":"rvagg","message":"so all you really need to care about is a protected inc()","date":"2013-05-22T23:57:46.890Z","type":"message"}
{"nick":"werle","reason":"Quit: Leaving.","date":"2013-05-22T23:58:04.431Z","type":"quit"}
{"nick":"rvagg","message":"where multiple calls to the same key before internal leveldb callbacks return do the right thing","date":"2013-05-22T23:58:06.859Z","type":"message"}
{"nick":"rvagg","message":"so just a bit of memory to store in-flight increments and a bit of checking to see if the key being incremented is in-flight","date":"2013-05-22T23:58:25.849Z","type":"message"}
{"nick":"chilts","message":"right, cool","date":"2013-05-22T23:58:35.855Z","type":"message"}
{"nick":"rvagg","message":"having said that, my suspicion is that most devs use atomicity as a crutch to avoid having to think and that much of the time people are doing atomic operations they are not actually needed","date":"2013-05-22T23:59:25.427Z","type":"message"}
{"nick":"rvagg","message":"but devs do love their crutches","date":"2013-05-22T23:59:29.297Z","type":"message"}
