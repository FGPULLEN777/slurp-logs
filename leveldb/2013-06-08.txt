{"nick":"eugeneware","message":"chapel: thanks. I'll check out unid","date":"2013-06-08T00:21:29.928Z","type":"message"}
{"nick":"eugeneware","message":"chapel: looks cool. A GUID type library. awesome.","date":"2013-06-08T00:28:52.412Z","type":"message"}
{"nick":"chapel","message":"eugeneware: a mix of snowflake and mongo objectids","date":"2013-06-08T00:29:22.328Z","type":"message"}
{"nick":"eugeneware","message":"chapel: are you across any of the hyperspace hashing ideas used in hyperdex? Thought it might be cool to implement something like that for levelup","date":"2013-06-08T00:30:39.062Z","type":"message"}
{"nick":"chapel","message":"not familiar with them, what are those?","date":"2013-06-08T00:31:23.376Z","type":"message"}
{"nick":"eugeneware","message":"from http://hyperdex.org/FAQ/: https://gist.github.com/nharbour/00bd9c40acf3a2bca803","date":"2013-06-08T00:44:32.321Z","type":"message"}
{"nick":"thl0","date":"2013-06-08T00:45:51.483Z","type":"join"}
{"nick":"eugeneware","message":"it basically makes searches as fast as hash lookups. pretty cool.","date":"2013-06-08T00:55:04.927Z","type":"message"}
{"nick":"ralphtheninja","reason":"Ping timeout: 264 seconds","date":"2013-06-08T02:08:55.464Z","type":"quit"}
{"nick":"ralphtheninja","date":"2013-06-08T02:10:02.284Z","type":"join"}
{"nick":"ralphtheninja","reason":"Ping timeout: 256 seconds","date":"2013-06-08T02:14:16.018Z","type":"quit"}
{"nick":"thl0","reason":"Remote host closed the connection","date":"2013-06-08T03:11:14.136Z","type":"quit"}
{"nick":"levelbot","message":"[npm] firedup@0.0.8 <http://npm.im/firedup>: A node.js implementation of firebase based on levelup (@nharbour)","date":"2013-06-08T06:41:49.876Z","type":"message"}
{"nick":"levelbot","message":"[npm] firedup@0.0.9 <http://npm.im/firedup>: A node.js implementation of firebase based on levelup (@nharbour)","date":"2013-06-08T07:08:48.809Z","type":"message"}
{"nick":"eugeneware","reason":"Remote host closed the connection","date":"2013-06-08T07:54:27.597Z","type":"quit"}
{"nick":"b4bofitos","reason":"Read error: Connection reset by peer","date":"2013-06-08T08:52:17.024Z","type":"quit"}
{"nick":"babof1tos","date":"2013-06-08T08:54:43.031Z","type":"join"}
{"nick":"eugeneware","date":"2013-06-08T09:04:59.704Z","type":"join"}
{"nick":"eugeneware","reason":"Ping timeout: 260 seconds","date":"2013-06-08T09:12:23.966Z","type":"quit"}
{"nick":"eugeneware","date":"2013-06-08T10:06:52.007Z","type":"join"}
{"nick":"eugeneware","reason":"Client Quit","date":"2013-06-08T10:07:10.419Z","type":"quit"}
{"nick":"eugeneware","date":"2013-06-08T10:08:55.226Z","type":"join"}
{"nick":"eugeneware","reason":"Client Quit","date":"2013-06-08T10:09:07.722Z","type":"quit"}
{"nick":"eugeneware","date":"2013-06-08T10:10:03.996Z","type":"join"}
{"nick":"eugeneware","reason":"Client Quit","date":"2013-06-08T10:10:55.937Z","type":"quit"}
{"nick":"eugeneware","date":"2013-06-08T10:11:36.246Z","type":"join"}
{"nick":"dominictarr","date":"2013-06-08T10:11:43.185Z","type":"join"}
{"nick":"eugeneware","reason":"Client Quit","date":"2013-06-08T10:15:27.432Z","type":"quit"}
{"nick":"eugeneware","date":"2013-06-08T10:17:58.262Z","type":"join"}
{"nick":"eugenewa_","date":"2013-06-08T10:23:33.240Z","type":"join"}
{"nick":"eugeneware","reason":"Quit: Colloquy for iPad - http://colloquy.mobi","date":"2013-06-08T10:30:57.011Z","type":"quit"}
{"nick":"no9","reason":"Ping timeout: 276 seconds","date":"2013-06-08T11:05:01.083Z","type":"quit"}
{"nick":"no9","date":"2013-06-08T11:17:42.075Z","type":"join"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-06-08T11:34:33.153Z","type":"quit"}
{"nick":"ralphtheninja","date":"2013-06-08T12:00:59.256Z","type":"join"}
{"nick":"ralphtheninja","reason":"Remote host closed the connection","date":"2013-06-08T12:33:48.302Z","type":"quit"}
{"nick":"chirino","date":"2013-06-08T12:49:30.264Z","type":"join"}
{"nick":"ralphtheninja","date":"2013-06-08T12:58:51.116Z","type":"join"}
{"nick":"rescrv","message":"eugenewa_: the hyperspace hashing ideas work best for spreading the load across many machines.  It's not the best for local disk accesses.","date":"2013-06-08T13:31:15.894Z","type":"message"}
{"nick":"rescrv","message":"Internally, HyperDex uses many tricks with encoding data into LevelDB","date":"2013-06-08T13:31:30.127Z","type":"message"}
{"nick":"eugenewa_","message":"rescrv: Yeah. I was reading the source. Lots of tricks! I see you're using cityhash for string hashing, and just using int-values for hash values.","date":"2013-06-08T13:32:29.785Z","type":"message"}
{"nick":"rescrv","message":"yeah.  We've got a few more tricks in the pipeline for ints","date":"2013-06-08T13:33:51.532Z","type":"message"}
{"nick":"eugenewa_","message":"I'd like to be able to know that keys that sort closely with each other end up on the same machine, rather than using a regular hash ring and spraying values everywhere?","date":"2013-06-08T13:34:43.197Z","type":"message"}
{"nick":"rescrv","message":"there's no technical reason it cannot be done","date":"2013-06-08T13:35:38.952Z","type":"message"}
{"nick":"rescrv","message":"it's just in our initial implementation, it was easier to assume that the regions of the hyperspace are defined by fixed-sized coordinates","date":"2013-06-08T13:36:02.246Z","type":"message"}
{"nick":"rescrv","message":"we'll likely add support for sorted strings in the future","date":"2013-06-08T13:36:12.552Z","type":"message"}
{"nick":"eugenewa_","message":"i guess it's the same issue with ints in hyperdex, that you need to compress the range of the ints to get a decent hash distribution, otherwise you'll load up more servers than others.","date":"2013-06-08T13:36:46.283Z","type":"message"}
{"nick":"eugenewa_","message":"btw, does hyperdex run on mac? I looked on the download and only saw linux binaries.","date":"2013-06-08T13:37:07.757Z","type":"message"}
{"nick":"eugenewa_","message":"didn't try doing a \"make all\"","date":"2013-06-08T13:37:27.506Z","type":"message"}
{"nick":"eugenewa_","message":"had a look around brew in case there was a formula around for it. couldn't find one.","date":"2013-06-08T13:37:39.634Z","type":"message"}
{"nick":"rescrv","message":"at one point we had a binary installer for Mac, but it's not public yet.  I don't actually have access to a Mac, so I'm relying upon others to help there.","date":"2013-06-08T13:38:04.362Z","type":"message"}
{"nick":"rescrv","message":"https://github.com/seanogden/homebrew-hyperdex","date":"2013-06-08T13:38:06.925Z","type":"message"}
{"nick":"eugenewa_","message":"hoorah!","date":"2013-06-08T13:38:28.446Z","type":"message"}
{"nick":"rescrv","message":"I bet that it's not up to date","date":"2013-06-08T13:38:32.297Z","type":"message"}
{"nick":"rescrv","message":"I can prod sean to update it though","date":"2013-06-08T13:38:38.504Z","type":"message"}
{"nick":"eugenewa_","message":"thanks! I'll give it a whirl.","date":"2013-06-08T13:38:51.942Z","type":"message"}
{"nick":"eugenewa_","message":"btw. great job on hyperdex. Lot's of awesome new ideas. Found it through your mongodb smackdown article :-)","date":"2013-06-08T13:40:23.337Z","type":"message"}
{"nick":"eugenewa_","message":"we were burnt big time with mongodb and problems once the indexes start to exceed memory.","date":"2013-06-08T13:41:02.376Z","type":"message"}
{"nick":"levelbot","message":"[npm] firedup@0.0.10 <http://npm.im/firedup>: A node.js implementation of firebase based on levelup (@nharbour)","date":"2013-06-08T13:48:48.539Z","type":"message"}
{"nick":"rescrv","message":"we were burnt early with MongoDB as well with just getting a proper benchmark of it","date":"2013-06-08T13:49:17.394Z","type":"message"}
{"nick":"eugenewa_","message":"lol. it sounds like it from your blog post. It's linked from wikipedia ...","date":"2013-06-08T13:49:57.225Z","type":"message"}
{"nick":"eugenewa_","message":"your site was down the other day when I was sharing your article... i thought the legal team from 10gen might have got to you!  :-)","date":"2013-06-08T13:51:12.866Z","type":"message"}
{"nick":"rescrv","message":"router upgrades within our ISP","date":"2013-06-08T13:52:12.926Z","type":"message"}
{"nick":"rescrv","message":"I don't think their legal team has a leg to stand on","date":"2013-06-08T13:52:43.822Z","type":"message"}
{"nick":"rescrv","message":"Every claim we make, we have a citation to the code backing it up (privately)","date":"2013-06-08T13:53:30.074Z","type":"message"}
{"nick":"thl0","date":"2013-06-08T13:53:34.485Z","type":"join"}
{"nick":"thl0","reason":"Remote host closed the connection","date":"2013-06-08T13:53:46.002Z","type":"quit"}
{"nick":"rescrv","message":"Their response wasn't to say we were wrong, it was to double-speak around requiring users to know what settings they use","date":"2013-06-08T13:53:50.805Z","type":"message"}
{"nick":"thl0","date":"2013-06-08T13:54:01.015Z","type":"join"}
{"nick":"chirino","reason":"Quit: Computer has gone to sleep.","date":"2013-06-08T13:54:31.500Z","type":"quit"}
{"nick":"eugenewa_","message":"fwiw i think you were very balanced in your article. And the problem with mongo for ages was that the defaults have been really, really bad.","date":"2013-06-08T13:55:29.094Z","type":"message"}
{"nick":"eugenewa_","message":"so they should stop using that line - and just fix the product. some fundamental problems in there.","date":"2013-06-08T13:56:54.583Z","type":"message"}
{"nick":"dominictarr","date":"2013-06-08T13:57:41.154Z","type":"join"}
{"nick":"rescrv","message":"defaults can be fixed.  There's a deeper problem, that's not exclusive to Mongo, with people ignoring 30 years of distributed systems research in favor of gut-driven design.","date":"2013-06-08T13:57:50.134Z","type":"message"}
{"nick":"eugenewa_","message":"yeah. they don't seem to come from the usual database crowd. That's good in some ways - but very dangerous in others.","date":"2013-06-08T13:59:08.826Z","type":"message"}
{"nick":"rescrv","message":"I'm not even looking at the database crowd.  They're a different group from distributed systems folks","date":"2013-06-08T13:59:53.611Z","type":"message"}
{"nick":"eugenewa_","message":"they've done a good job in creating some very developer friendly APIs. Which ticks me off when I see projects like meteor just adopt mongodb/mongoose as the default. sigh.","date":"2013-06-08T14:00:37.546Z","type":"message"}
{"nick":"eugenewa_","message":"so the problem with doing range queries over hyperspace. Is there a way to make sure that the mapping is balanced across a cluster, without having to rebalance the mapping over time? (not sure if i'm using the right terminology here - hyperspace hashing is all new to me)","date":"2013-06-08T14:04:25.510Z","type":"message"}
{"nick":"eugenewa_","message":"if you were splitting a dimension across two servers, then you'd have to keep track of which dimension value roughly divided your active keyspace into half. And every now and then pick a new division and move keys between the servers to balance it all up.","date":"2013-06-08T14:06:19.241Z","type":"message"}
{"nick":"rescrv","message":"eugenewa_: if you assume the distribution of input data is relatively fixed (or changes very slowly/infrequently), rebalancing only needs to happen once.","date":"2013-06-08T14:08:40.183Z","type":"message"}
{"nick":"rescrv","message":"We've not had too many issues with things being unbalanced, mostly because we carefully chose the dimensions of the hyperspace, and caching works wonders to solve problems related to imbalanced access patterns","date":"2013-06-08T14:09:34.993Z","type":"message"}
{"nick":"eugenewa_","message":"that makes a lot of sense.","date":"2013-06-08T14:10:30.068Z","type":"message"}
{"nick":"dominictarr","message":"rescrv: eugenewa_ sound like you where having an interesting conversation","date":"2013-06-08T14:13:18.851Z","type":"message"}
{"nick":"dominictarr","message":"what was the problem with mongo ignoring the 30 years or research?","date":"2013-06-08T14:13:41.226Z","type":"message"}
{"nick":"dominictarr","message":"what did they do?","date":"2013-06-08T14:13:49.910Z","type":"message"}
{"nick":"rescrv","message":"dominictarr: I'm not singling out Mongo, but there's a lot of misinformation out there that either ignores or contradicts the academic literature","date":"2013-06-08T14:15:43.067Z","type":"message"}
{"nick":"rescrv","message":"one thing that people get wrong in all sorts of ways is replication","date":"2013-06-08T14:16:05.177Z","type":"message"}
{"nick":"rescrv","message":"the mongodb-specific piece that frustrates me is they will time-out the replication and assume it worked","date":"2013-06-08T14:16:25.747Z","type":"message"}
{"nick":"dominictarr","message":"that is more like \"eventually inconsistent\"","date":"2013-06-08T14:16:43.442Z","type":"message"}
{"nick":"rescrv","message":"thus, it's hard to do a benchmark where you really push the system and know it really replicated data","date":"2013-06-08T14:16:49.843Z","type":"message"}
{"nick":"rescrv","message":"that's a term I'd rather not use","date":"2013-06-08T14:17:21.549Z","type":"message"}
{"nick":"rescrv","message":"If I ask the system to replicate my data, the system should replicate my data, or tell me it didn't.  Not tell me it may eventually.","date":"2013-06-08T14:17:44.824Z","type":"message"}
{"nick":"rescrv","message":"hold on, afk, will continue this thought","date":"2013-06-08T14:17:52.493Z","type":"message"}
{"nick":"dominictarr","message":"worst of all would be to tell you it did replicate the data, but not replicate all of it.","date":"2013-06-08T14:19:23.451Z","type":"message"}
{"nick":"rescrv","message":"back","date":"2013-06-08T14:20:03.544Z","type":"message"}
{"nick":"rescrv","message":"the node to which you write will set a timeout on the writes to the replicas, and if that timeout expires, assume the write succeeded, telling you it replicated everything everywhere you asked.","date":"2013-06-08T14:20:50.889Z","type":"message"}
{"nick":"rescrv","message":"whether it wrote some or all it's still bad","date":"2013-06-08T14:21:00.743Z","type":"message"}
{"nick":"rescrv","message":"my beef with such things (and eventual consistency), is that specifications are testable statements upon which you can rely","date":"2013-06-08T14:21:37.849Z","type":"message"}
{"nick":"dominictarr","message":"right - it would be better to have a timeout error","date":"2013-06-08T14:21:52.174Z","type":"message"}
{"nick":"rescrv","message":"eventual consistency is not testable","date":"2013-06-08T14:22:25.667Z","type":"message"}
{"nick":"rescrv","message":"If I record a user's interaction with the system over some defined period of time, an eventually consistent system is indistinguishable from an inconsistent system","date":"2013-06-08T14:23:09.216Z","type":"message"}
{"nick":"rescrv","message":"the \"eventual\" property only kicks in at some unspecified point in the future, but because you cannot observe the future until it happens, you cannot claim that the system is eventually consistent and not inconsistent","date":"2013-06-08T14:23:47.472Z","type":"message"}
{"nick":"dominictarr","message":"right - because you respond to that user: okay, got it!","date":"2013-06-08T14:23:47.930Z","type":"message"}
{"nick":"dominictarr","message":"but maybe not all the system got it","date":"2013-06-08T14:24:10.824Z","type":"message"}
{"nick":"rescrv","message":"http://link.springer.com/article/10.1007/BF01782772#page-1","date":"2013-06-08T14:24:18.786Z","type":"message"}
{"nick":"rescrv","message":"the best paper about safety and liveness^","date":"2013-06-08T14:24:29.180Z","type":"message"}
{"nick":"rescrv","message":"I like to think a little more abstractly than that","date":"2013-06-08T14:24:44.141Z","type":"message"}
{"nick":"rescrv","message":"it doesn't matter to me what the system is doing internally.  It matters what I can do with it as a black box.","date":"2013-06-08T14:25:10.154Z","type":"message"}
{"nick":"dominictarr","message":"right","date":"2013-06-08T14:25:35.518Z","type":"message"}
{"nick":"b4bofitos","date":"2013-06-08T14:26:15.229Z","type":"join"}
{"nick":"rescrv","message":"If that black box guarantees \"eventual consistency\", what does that mean for me?  I cannot expect that black box to do anything more for me than another black box that claims to be occasionally inconsistent.","date":"2013-06-08T14:26:21.605Z","type":"message"}
{"nick":"rescrv","message":"As such, the term \"eventually consistent\" doesn't actually increase my knowledge, or let me build anything that's any stronger than I could with the inconsistent black box.","date":"2013-06-08T14:26:47.337Z","type":"message"}
{"nick":"werle","date":"2013-06-08T14:27:02.311Z","type":"join"}
{"nick":"rescrv","message":"Quite informally, you can see that I'm effectively building an equivalence between the two.  Anything I can build on one, I can port to the other, because neither makes a stronger guarantee that I can rely upon for the safety of my application.","date":"2013-06-08T14:27:32.021Z","type":"message"}
{"nick":"babof1tos","reason":"Ping timeout: 276 seconds","date":"2013-06-08T14:27:49.082Z","type":"quit"}
{"nick":"dominictarr","message":"what do you mean by safety?","date":"2013-06-08T14:27:57.456Z","type":"message"}
{"nick":"rescrv","message":"so a safety property is effectively an invariant","date":"2013-06-08T14:28:22.312Z","type":"message"}
{"nick":"dominictarr","message":"something that is true both before and after?","date":"2013-06-08T14:28:40.763Z","type":"message"}
{"nick":"rescrv","message":"the link I gave you above gives a formal definition (if you're into that kind of thing), but it basically specifies a contract upheld by the system that nothing outside the specification will happen","date":"2013-06-08T14:29:43.322Z","type":"message"}
{"nick":"rescrv","message":"For instance, leveldb guarantees that if you do a PUT that succeeds, you will be able to do a GET that reads that latest PUT.  It's a testable safety property because I can trace a program, see its get/put operations, and verify that they upheld the safety property.","date":"2013-06-08T14:30:47.293Z","type":"message"}
{"nick":"dominictarr","message":"right, because the promise is absolute","date":"2013-06-08T14:31:44.575Z","type":"message"}
{"nick":"rescrv","message":"When LevelDB upholds that safety property, it's guaranteeing you that no matter what you do, your program trace will show that the property is upheld","date":"2013-06-08T14:31:49.629Z","type":"message"}
{"nick":"dominictarr","message":"at anypoint after a put returns, you can get that key.","date":"2013-06-08T14:31:56.581Z","type":"message"}
{"nick":"rescrv","message":"but because eventual consistency doesn't make any concrete guarantee, it's not testable.  I cannot look at a trace and say that it's not eventually consistent.","date":"2013-06-08T14:32:21.819Z","type":"message"}
{"nick":"dominictarr","message":"but if it was eventual, then you have the halting problem","date":"2013-06-08T14:32:22.031Z","type":"message"}
{"nick":"dominictarr","message":"maybe you could have a statistical model, that on average it's consistent within N ms","date":"2013-06-08T14:32:58.277Z","type":"message"}
{"nick":"dominictarr","message":"but that would be the best you could do.","date":"2013-06-08T14:33:43.877Z","type":"message"}
{"nick":"rescrv","message":"when it's eventual, you have the problem that you cannot distinguish the inconsistent case from when it is truly consistent.  You then either have to always treat it as inconsistent, and have your application be correct under those conditions, or you have a broken application.","date":"2013-06-08T14:34:33.834Z","type":"message"}
{"nick":"rescrv","message":"Such a statistical model is actually better somewhat.  Let's say that you could guarantee that 99% of requests will be observable within N ms, then you can always wait until N+1 pass.  If your application can tolerate being wrong 1% of the time, you're doing much better than the eventual case.","date":"2013-06-08T14:36:08.284Z","type":"message"}
{"nick":"rescrv","message":"of course you have to make a few extra assumptions there, and they aren't all obvious immediately.","date":"2013-06-08T14:36:44.865Z","type":"message"}
{"nick":"dominictarr","message":"yes, it's definately a more complicated model","date":"2013-06-08T14:39:23.910Z","type":"message"}
{"nick":"dominictarr","message":"instead of making statements about the system that are either true or false","date":"2013-06-08T14:39:41.158Z","type":"message"}
{"nick":"dominictarr","message":"you are forced to make statements that have a probability between 0 and 1","date":"2013-06-08T14:39:59.336Z","type":"message"}
{"nick":"rescrv","message":"If people could get to that point about their systems, I'd be pretty happy.","date":"2013-06-08T14:41:08.711Z","type":"message"}
{"nick":"rescrv","message":"Developers don't understand such a model though.","date":"2013-06-08T14:41:17.974Z","type":"message"}
{"nick":"rescrv","message":"One of the developers of one backend for a large social media site said that no matter how many times they tell their developers about eventual consistency, the devs will still treat it as 100% correct, 100% of the time.","date":"2013-06-08T14:42:12.578Z","type":"message"}
{"nick":"dominictarr","message":"yeah, because otherwise their head hurts","date":"2013-06-08T14:43:58.552Z","type":"message"}
{"nick":"dominictarr","message":"rescrv: what methods do you use to test your systems? I'm searching for ways to be more confidant about async things that I build","date":"2013-06-08T14:44:49.166Z","type":"message"}
{"nick":"rescrv","message":"state machines","date":"2013-06-08T14:49:09.384Z","type":"message"}
{"nick":"rescrv","message":"If you cannot draw the state machine for your async system, you don't understand it","date":"2013-06-08T14:49:20.449Z","type":"message"}
{"nick":"dominictarr","message":"right!","date":"2013-06-08T14:50:04.102Z","type":"message"}
{"nick":"rescrv","message":"each event takes the system from one state to another","date":"2013-06-08T14:50:07.383Z","type":"message"}
{"nick":"rescrv","message":"receive a network message?  dispatch it to make a state transformation","date":"2013-06-08T14:50:20.799Z","type":"message"}
{"nick":"rescrv","message":"the other part is concurrency","date":"2013-06-08T14:50:36.473Z","type":"message"}
{"nick":"dominictarr","message":"I've been experimenting with a way to generate state machines by writing regular (like) expressions","date":"2013-06-08T14:50:51.488Z","type":"message"}
{"nick":"rescrv","message":"I've seen many people go the async route because they want to avoid threads and concurrency","date":"2013-06-08T14:50:53.312Z","type":"message"}
{"nick":"dominictarr","message":"about the events that may occur...","date":"2013-06-08T14:51:20.557Z","type":"message"}
{"nick":"rescrv","message":"async has all of the headache of threads and concurrency, with the only advantage being a possibly speed related because of how threading is done within common operating systems","date":"2013-06-08T14:52:13.265Z","type":"message"}
{"nick":"rescrv","message":"It's not just about that.  Threads and events are equivalent in structure, and it's possible to map a program back and forth between both paradigms.","date":"2013-06-08T14:54:59.445Z","type":"message"}
{"nick":"dominictarr","message":"sure, event loops are a little cleaner abstraction","date":"2013-06-08T14:55:26.738Z","type":"message"}
{"nick":"dominictarr","message":"but the fundamental thing that makes building concurrent systems hard is","date":"2013-06-08T14:55:51.250Z","type":"message"}
{"nick":"dominictarr","message":"state","date":"2013-06-08T14:55:56.555Z","type":"message"}
{"nick":"dominictarr","message":"as you said","date":"2013-06-08T14:56:00.806Z","type":"message"}
{"nick":"rescrv","message":"With threads, the concurrent state is explicit.  Multiple threads access it, and they use a mutex (or other synchronization) to have exactly one thread make a transition on each piece of state at a time.  With an asynchronous model, you need to make sure that the state is left in a valid position such that *any* event that comes in is valid.  I typically find myself writing wait lists for events I couldn't","date":"2013-06-08T14:57:35.214Z","type":"message"}
{"nick":"rescrv","message":"handle yet.  It's just like a mutex, except I'm managing the wait queue, not the kernel.","date":"2013-06-08T14:57:38.088Z","type":"message"}
{"nick":"dominictarr","message":"I can picture that","date":"2013-06-08T14:58:53.285Z","type":"message"}
{"nick":"rescrv","message":"as for actual testing, I prefer end-to-end tests.  Almost all problems I run into are due to cross-layer interaction.  Your messaging layer does buffering, but had an off-by-one, but it only shows up when one thread on another machine sends a whole host of messages.  Most smaller errors are easy to catch with assert statements.","date":"2013-06-08T14:59:59.887Z","type":"message"}
{"nick":"dominictarr","message":"right - one thing I want to acheive with the regular-specs thing is to at least generate a test coverage report on what state transitions where covered","date":"2013-06-08T15:05:56.821Z","type":"message"}
{"nick":"rescrv","message":"In a distributed setting, that's near impossible because of exponential blow-up (unfortunately).","date":"2013-06-08T15:07:03.146Z","type":"message"}
{"nick":"dominictarr","message":"yes, I know, but i'll be able to do that on individual components","date":"2013-06-08T15:08:21.629Z","type":"message"}
{"nick":"dominictarr","message":"and then at least I'll discover bugs in the components before I integrate them","date":"2013-06-08T15:09:00.710Z","type":"message"}
{"nick":"ralphtheninja","reason":"Read error: Operation timed out","date":"2013-06-08T15:09:23.821Z","type":"quit"}
{"nick":"dominictarr","message":"(at which point, it can be pretty hard to even tell which component has the bug)","date":"2013-06-08T15:09:33.723Z","type":"message"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-06-08T15:17:09.745Z","type":"quit"}
{"nick":"dominictarr","date":"2013-06-08T15:20:11.244Z","type":"join"}
{"nick":"brianloveswords","reason":"Excess Flood","date":"2013-06-08T15:52:36.543Z","type":"quit"}
{"nick":"brianloveswords","date":"2013-06-08T15:54:28.475Z","type":"join"}
