{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-08-24T00:00:01.013Z","type":"quit"}
{"nick":"ircretary","date":"2013-08-24T00:00:08.871Z","type":"join"}
{"nick":"isaacs","message":"defunctzombie: so, does bar() happen before foo() is assigned to x, or after?","date":"2013-08-24T00:00:24.326Z","type":"message"}
{"nick":"defunctzombie","message":"after","date":"2013-08-24T00:00:55.488Z","type":"message"}
{"nick":"defunctzombie","message":"doFoo won't return until foo is done","date":"2013-08-24T00:01:01.618Z","type":"message"}
{"nick":"defunctzombie","message":"your calls act blocking","date":"2013-08-24T00:01:11.371Z","type":"message"}
{"nick":"defunctzombie","message":"here is the typical example I give","date":"2013-08-24T00:01:18.650Z","type":"message"}
{"nick":"defunctzombie","message":"var valid = validate_email(email);","date":"2013-08-24T00:01:25.960Z","type":"message"}
{"nick":"defunctzombie","message":"today validate email uses a regex","date":"2013-08-24T00:01:31.907Z","type":"message"}
{"nick":"defunctzombie","message":"tomorrow, I want it to use some http api or some other shit","date":"2013-08-24T00:01:41.185Z","type":"message"}
{"nick":"defunctzombie","message":"my code that uses that validate_email does not care how email is validated","date":"2013-08-24T00:01:52.275Z","type":"message"}
{"nick":"defunctzombie","message":"only that I get true | false","date":"2013-08-24T00:02:01.078Z","type":"message"}
{"nick":"defunctzombie","message":"I don't need to re-architect my app when I decide to change that","date":"2013-08-24T00:02:14.694Z","type":"message"}
{"nick":"defunctzombie","message":"and.. importantly, my error handling gets way simpler","date":"2013-08-24T00:02:27.255Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: I agree about your post when thinking in terms of callbacks for everything, but don't when you have calls that *look* sync since statements after the line will execute after the line aways","date":"2013-08-24T00:03:36.103Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: how the code looks is not important.  what's important is knowing the order of execution in *your program*","date":"2013-08-24T00:04:13.083Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: and the order of execution will be foo();","date":"2013-08-24T00:04:29.926Z","type":"message"}
{"nick":"defunctzombie","message":"then the lines after that assignment","date":"2013-08-24T00:04:35.875Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: so,you'er just saying that if you follow the rules, then the rules are all followed.","date":"2013-08-24T00:04:42.614Z","type":"message"}
{"nick":"isaacs","message":"great.","date":"2013-08-24T00:04:45.652Z","type":"message"}
{"nick":"defunctzombie","message":"...","date":"2013-08-24T00:04:47.979Z","type":"message"}
{"nick":"defunctzombie","message":"no.. I am saying that if you have x = foo();","date":"2013-08-24T00:04:56.735Z","type":"message"}
{"nick":"isaacs","message":"but, i'm telling you, there are cases where sync-looking APIs actually break these rules.","date":"2013-08-24T00:04:57.903Z","type":"message"}
{"nick":"defunctzombie","message":"and foo returns immediately or not it doesn't matter for the case where statements execute after foo() only after foo returns","date":"2013-08-24T00:05:15.351Z","type":"message"}
{"nick":"isaacs","message":"in fact, you asked specifically to be able to enter javascript multiple times concurrently","date":"2013-08-24T00:05:31.973Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: show me real case and not just \"telling me\"","date":"2013-08-24T00:05:33.948Z","type":"message"}
{"nick":"isaacs","message":"which could cause these rules to be broken.","date":"2013-08-24T00:05:36.293Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: I actually found node-fibers which does what I want to play with","date":"2013-08-24T00:06:00.151Z","type":"message"}
{"nick":"isaacs","message":"i don't get the aversion to knowing how your program runs.","date":"2013-08-24T00:06:31.013Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: statements execute in order as you read them","date":"2013-08-24T00:06:31.546Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: it is not an aversion","date":"2013-08-24T00:06:38.895Z","type":"message"}
{"nick":"defunctzombie","message":"you know how it runs","date":"2013-08-24T00:06:48.043Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: how do you do two async things in parallel, then?","date":"2013-08-24T00:06:55.402Z","type":"message"}
{"nick":"defunctzombie","message":"I am simply saying that it doesn't matter at the lowest level","date":"2013-08-24T00:06:55.618Z","type":"message"}
{"nick":"defunctzombie","message":"parallel(thing1, thing2);","date":"2013-08-24T00:07:05.302Z","type":"message"}
{"nick":"gwenbell","reason":"Quit: Lost terminal","date":"2013-08-24T00:07:15.288Z","type":"quit"}
{"nick":"isaacs","message":"defunctzombie: ie, read a file, and also send a request, and then get a notice when they're both done?","date":"2013-08-24T00:07:16.223Z","type":"message"}
{"nick":"defunctzombie","message":"and parallel returns when both done.. or the hundred other ways to do it","date":"2013-08-24T00:07:21.792Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: what's `parallel` in your \"looks sync\" land?","date":"2013-08-24T00:07:40.022Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: ie, if i change my email validator to a  web service","date":"2013-08-24T00:07:48.472Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: and i *also* change my url-validator to a web servic.","date":"2013-08-24T00:07:59.062Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: how can i check *both* the email *and* the url at the same time?","date":"2013-08-24T00:08:07.251Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: without (a) waiting for one to finish before the next runs, or (b) releasing zalgo","date":"2013-08-24T00:08:25.122Z","type":"message"}
{"nick":"isaacs","message":"nb: i dont' need to know which will finish first, necessarily.  just need to know that both are async, and let them do their async bits in parallel.","date":"2013-08-24T00:09:27.921Z","type":"message"}
{"nick":"isaacs","message":"in other words, sometimes you actually don't *want* sleep(), you *want* setTimeout","date":"2013-08-24T00:09:36.397Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: https://gist.github.com/shtylman/6325157","date":"2013-08-24T00:09:48.576Z","type":"message"}
{"nick":"isaacs","message":"(to take the most basic \"looks sync\" example)","date":"2013-08-24T00:09:52.210Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: ok, paste the code for parallel","date":"2013-08-24T00:10:10.970Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: or is that a [native code] thing?","date":"2013-08-24T00:10:19.459Z","type":"message"}
{"nick":"coderzach","reason":"Quit: coderzach","date":"2013-08-24T00:10:47.728Z","type":"quit"}
{"nick":"isaacs","message":"defunctzombie: if parallel(..) is a native thing, then ok, that's your keyword","date":"2013-08-24T00:11:04.210Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: also, if it truly IS running the *javascript* in parallel, then things get super complicated fast.","date":"2013-08-24T00:11:57.799Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: parallel would just setup a \"container\" that allows both calls to run","date":"2013-08-24T00:12:26.022Z","type":"message"}
{"nick":"defunctzombie","message":"it does not run anything in threads","date":"2013-08-24T00:12:33.683Z","type":"message"}
{"nick":"defunctzombie","message":"it is the same async model as node","date":"2013-08-24T00:12:37.802Z","type":"message"}
{"nick":"defunctzombie","message":"when some IO is waiting, some other IO can dispatch","date":"2013-08-24T00:12:46.153Z","type":"message"}
{"nick":"defunctzombie","message":"nothing is any more dangerous here than currently","date":"2013-08-24T00:12:57.663Z","type":"message"}
{"nick":"isaacs","message":"https://gist.github.com/isaacs/6325173","date":"2013-08-24T00:15:22.996Z","type":"message"}
{"nick":"dominictarr","message":"isaacs: I appreciate your position on this \"always be async\" thing","date":"2013-08-24T00:16:04.299Z","type":"message"}
{"nick":"dominictarr","message":"but personally, I try to write code that accepts sync or async","date":"2013-08-24T00:16:27.643Z","type":"message"}
{"nick":"dominictarr","message":"cbs","date":"2013-08-24T00:16:31.130Z","type":"message"}
{"nick":"isaacs","message":"dominictarr: my position is \"either always be sync or always be async\"","date":"2013-08-24T00:16:34.285Z","type":"message"}
{"nick":"dominictarr","message":"yes","date":"2013-08-24T00:16:39.831Z","type":"message"}
{"nick":"dominictarr","message":"I appreciate that.","date":"2013-08-24T00:16:44.131Z","type":"message"}
{"nick":"isaacs","message":"dominictarr: but if something is *usually* in teh cache, then your api should probably be sync","date":"2013-08-24T00:16:53.466Z","type":"message"}
{"nick":"isaacs","message":"dominictarr: and fail crisply on a cache mis","date":"2013-08-24T00:17:01.173Z","type":"message"}
{"nick":"dominictarr","message":"problems like this:","date":"2013-08-24T00:17:33.223Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: updaetd gist to be clearer: https://gist.github.com/isaacs/6325173","date":"2013-08-24T00:18:31.114Z","type":"message"}
{"nick":"dominictarr","message":"stream.write = function (data) { if(this.paused) { this.buffer(data); return false } else { this.emit('data', data); return true } }","date":"2013-08-24T00:18:41.879Z","type":"message"}
{"nick":"mbalho","message":"mikolalysenko: level version in auth-socket is like 1 or 2 months old at this point, i think there were 2 minor versions last month of level","date":"2013-08-24T00:18:49.044Z","type":"message"}
{"nick":"dominictarr","message":"^ there is a \"sync race condition here\"","date":"2013-08-24T00:18:57.527Z","type":"message"}
{"nick":"dominictarr","message":"^ \"sync race condition\" i meant.","date":"2013-08-24T00:19:10.614Z","type":"message"}
{"nick":"isaacs","message":"dominictarr: right, because it can emit either now or later.","date":"2013-08-24T00:20:01.204Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs:","date":"2013-08-24T00:20:12.855Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: your gist, I don't follow it","date":"2013-08-24T00:20:18.375Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: parallel does not mean threaded","date":"2013-08-24T00:20:24.033Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: ok","date":"2013-08-24T00:20:27.743Z","type":"message"}
{"nick":"mbalho","message":"mikolalysenko: to get the profile i think this callback would have to get changed to pass profile also, though 5 arguments seems kinda long https://github.com/maxogden/auth-socket/blob/master/index.js#L24","date":"2013-08-24T00:20:30.540Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: what if hm() does some IO?","date":"2013-08-24T00:20:33.134Z","type":"message"}
{"nick":"dominictarr","message":"isaacs: assuming it's a node EventEmitter","date":"2013-08-24T00:20:33.955Z","type":"message"}
{"nick":"isaacs","message":"dominictarr: yeah","date":"2013-08-24T00:20:44.944Z","type":"message"}
{"nick":"dominictarr","message":"it's sync","date":"2013-08-24T00:20:51.333Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: then that first loop will wait until hm() returns","date":"2013-08-24T00:21:05.455Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: one sec..","date":"2013-08-24T00:21:21.004Z","type":"message"}
{"nick":"defunctzombie","message":"but that will not block the second loops hm from doing IO once it gets there","date":"2013-08-24T00:21:22.151Z","type":"message"}
{"nick":"dominictarr","message":"but I fixed this bug with once for someone who found it with my stream-spec module -","date":"2013-08-24T00:21:28.642Z","type":"message"}
{"nick":"defunctzombie","message":"so execution will be:","date":"2013-08-24T00:21:31.509Z","type":"message"}
{"nick":"defunctzombie","message":"a() will start running","date":"2013-08-24T00:21:36.796Z","type":"message"}
{"nick":"st_luke","reason":"Remote host closed the connection","date":"2013-08-24T00:21:39.179Z","type":"quit"}
{"nick":"defunctzombie","message":"when a gets to a point that it would \"block on IO\" aka the hm function","date":"2013-08-24T00:21:54.082Z","type":"message"}
{"nick":"defunctzombie","message":"then it will give b a chance to start running","date":"2013-08-24T00:22:04.356Z","type":"message"}
{"nick":"defunctzombie","message":"b will do the same","date":"2013-08-24T00:22:12.131Z","type":"message"}
{"nick":"isaacs","message":"https://gist.github.com/isaacs/6325173","date":"2013-08-24T00:22:16.231Z","type":"message"}
{"nick":"isaacs","message":"updated","date":"2013-08-24T00:22:18.332Z","type":"message"}
{"nick":"mikolalysenko","message":"mbalho: hmm, but when would you not want the profile?","date":"2013-08-24T00:22:40.203Z","type":"message"}
{"nick":"Raynos","message":"dominictarr: FFFF sync race condition","date":"2013-08-24T00:22:56.079Z","type":"message"}
{"nick":"mikolalysenko","message":"mbalho: it seems a bit inefficient since you have to hit leveldb/doorknob multiple times","date":"2013-08-24T00:22:56.404Z","type":"message"}
{"nick":"dominictarr","message":"isaacs: bug was: emit('data' ,data) can trigger dest to pause","date":"2013-08-24T00:22:56.623Z","type":"message"}
{"nick":"dominictarr","message":"then return true is a like","date":"2013-08-24T00:23:06.435Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: aren't those infinite loops?","date":"2013-08-24T00:23:10.723Z","type":"message"}
{"nick":"mikolalysenko","message":"mbalho: also it breaks the abstraction in auth-socket to pull that data out...","date":"2013-08-24T00:23:11.911Z","type":"message"}
{"nick":"dominictarr","message":"s/like/lie/","date":"2013-08-24T00:23:17.269Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: no, theyr'e 1e9 loops","date":"2013-08-24T00:23:24.932Z","type":"message"}
{"nick":"defunctzombie","message":"ok.. so","date":"2013-08-24T00:23:30.683Z","type":"message"}
{"nick":"dominictarr","message":"\band the fix is return !this.paused","date":"2013-08-24T00:23:39.537Z","type":"message"}
{"nick":"defunctzombie","message":"b never sets x to 100","date":"2013-08-24T00:23:39.752Z","type":"message"}
{"nick":"defunctzombie","message":"so that assert in b doesn't make sense to me","date":"2013-08-24T00:23:49.261Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: oh, copypasta error, my bad","date":"2013-08-24T00:23:56.231Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: rfresh","date":"2013-08-24T00:23:58.350Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: if hm() yields, it's a one-pass loop, then a throw","date":"2013-08-24T00:24:06.770Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: if hm() doesn't yield, then it runs forever.","date":"2013-08-24T00:24:15.361Z","type":"message"}
{"nick":"isaacs","message":"er, for 1e9 times","date":"2013-08-24T00:24:19.101Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: but my point is the same: it should be EITHER a function that yields, OR a function that does not yield.","date":"2013-08-24T00:24:54.430Z","type":"message"}
{"nick":"defunctzombie","message":"no","date":"2013-08-24T00:24:59.478Z","type":"message"}
{"nick":"defunctzombie","message":"I don't get that from this example at all","date":"2013-08-24T00:25:07.239Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: and, \"parallel\" is your keyword here.","date":"2013-08-24T00:25:07.452Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: dont' get what?","date":"2013-08-24T00:25:23.899Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: that it matters what hm() does?","date":"2013-08-24T00:25:28.839Z","type":"message"}
{"nick":"evbogue","date":"2013-08-24T00:25:57.827Z","type":"part"}
{"nick":"defunctzombie","message":"that you wrote this code using a shared global var","date":"2013-08-24T00:26:03.904Z","type":"message"}
{"nick":"defunctzombie","message":"and what I am saying is that unless the var is within the scope you should assume it can change","date":"2013-08-24T00:26:20.229Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: why would it change?  i'm only writing code that's synchronous","date":"2013-08-24T00:26:35.600Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: it shouldn't be able to change out from under me, that's not how javascript works.","date":"2013-08-24T00:26:47.930Z","type":"message"}
{"nick":"defunctzombie","message":"because you are not the owner of x","date":"2013-08-24T00:26:57.279Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: also, if hm() doesn't yield, it CANT change.","date":"2013-08-24T00:27:00.899Z","type":"message"}
{"nick":"defunctzombie","message":"?","date":"2013-08-24T00:27:02.286Z","type":"message"}
{"nick":"defunctzombie","message":"you can write this same failure in node with callbacks now","date":"2013-08-24T00:27:09.387Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: not like this you can't :)","date":"2013-08-24T00:27:19.829Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: it's pretty obvious that you've got parallelizing code.","date":"2013-08-24T00:27:28.768Z","type":"message"}
{"nick":"mikolalysenko","message":"hmm...  so I just read that post and it is pretty clear to me this isn't a yield vs. callbacks issues","date":"2013-08-24T00:27:48.897Z","type":"message"}
{"nick":"tmcw","date":"2013-08-24T00:27:55.963Z","type":"join"}
{"nick":"isaacs","message":"defunctzombie: and, my claim is, with node style callbacks, if it's *sometimes* sync, and sometimes not, then zalgo","date":"2013-08-24T00:27:56.590Z","type":"message"}
{"nick":"mikolalysenko","message":"it also seems a bit obvious to me.  I mean the main point is that (a; b) is not the same as (a; yield; b)","date":"2013-08-24T00:28:17.643Z","type":"message"}
{"nick":"isaacs","message":"mikolalysenko: yeah, you could translate the entire post to yield, and the same principles all apply","date":"2013-08-24T00:28:18.187Z","type":"message"}
{"nick":"isaacs","message":"mikolalysenko: either your api function yields, or it doesn't.","date":"2013-08-24T00:28:45.192Z","type":"message"}
{"nick":"isaacs","message":"mikolalysenko: butit shouldn't *sometiems* yield, and *sometimes* not","date":"2013-08-24T00:28:54.740Z","type":"message"}
{"nick":"mikolalysenko","message":"well, or it yields in some specific condition and then life gets complicated","date":"2013-08-24T00:28:59.115Z","type":"message"}
{"nick":"isaacs","message":"right","date":"2013-08-24T00:29:05.130Z","type":"message"}
{"nick":"mikolalysenko","message":"since you need to understand those conditions to do get it to do what you want","date":"2013-08-24T00:29:08.625Z","type":"message"}
{"nick":"isaacs","message":"it's actually *easier* to make that mistake with coroutines or fibers","date":"2013-08-24T00:29:35.868Z","type":"message"}
{"nick":"mikolalysenko","message":"I agree though with the general point that yield is a semantic difference in the program, and your interface has to be clear about what conditions it yields under","date":"2013-08-24T00:29:43.831Z","type":"message"}
{"nick":"isaacs","message":"generators have a bit more syntax that makes it less likely","date":"2013-08-24T00:29:51.022Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: I would simply say a, and b are not parallel safe since they use a global","date":"2013-08-24T00:30:02.549Z","type":"message"}
{"nick":"mikolalysenko","message":"well, depends","date":"2013-08-24T00:30:09.025Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: clearly, because if hm() yields, they throw :)","date":"2013-08-24T00:30:17.686Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: it's a bit surprising to me that this bit of javascript could throw","date":"2013-08-24T00:30:33.527Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: why?","date":"2013-08-24T00:30:43.073Z","type":"message"}
{"nick":"st_luke","date":"2013-08-24T00:30:44.160Z","type":"join"}
{"nick":"isaacs","message":"because javascript function calls should block the execution of the program until they return","date":"2013-08-24T00:30:51.087Z","type":"message"}
{"nick":"defunctzombie","message":"why?","date":"2013-08-24T00:31:07.014Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: ask brendan eich","date":"2013-08-24T00:31:18.885Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: this is how javascript works.","date":"2013-08-24T00:31:28.055Z","type":"message"}
{"nick":"defunctzombie","message":"is that stated somewhere?","date":"2013-08-24T00:32:11.559Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: besides section 10 of the ecmascript spec?","date":"2013-08-24T00:32:27.015Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: as an side.. I am speaking more generally than js (since js by default doesn't have coroutines)","date":"2013-08-24T00:32:31.903Z","type":"message"}
{"nick":"defunctzombie","message":"*aside","date":"2013-08-24T00:32:41.400Z","type":"message"}
{"nick":"defunctzombie","message":"if you introduce coroutines, that statement does not have to hold","date":"2013-08-24T00:32:58.992Z","type":"message"}
{"nick":"isaacs","message":"with something like fibers, even though you don't have actual concurrent execution of lines of javascript, you still have the exact same hazards of reentry and coopting","date":"2013-08-24T00:33:01.496Z","type":"message"}
{"nick":"isaacs","message":"and preemption","date":"2013-08-24T00:33:13.125Z","type":"message"}
{"nick":"mikolalysenko","message":"isaacs: it isn't exactly as bad","date":"2013-08-24T00:33:13.516Z","type":"message"}
{"nick":"isaacs","message":"and other non-dipthong double-vowel words","date":"2013-08-24T00:33:22.515Z","type":"message"}
{"nick":"defunctzombie","message":"?","date":"2013-08-24T00:33:30.907Z","type":"message"}
{"nick":"mikolalysenko","message":"you can have atomic blocks with coroutines","date":"2013-08-24T00:33:32.896Z","type":"message"}
{"nick":"mikolalysenko","message":"you don't really get that with threads","date":"2013-08-24T00:33:36.928Z","type":"message"}
{"nick":"defunctzombie","message":"you only give up execution when you want to","date":"2013-08-24T00:33:38.224Z","type":"message"}
{"nick":"defunctzombie","message":"and nothing is modifying x at the same time","date":"2013-08-24T00:33:51.254Z","type":"message"}
{"nick":"isaacs","message":"mikolalysenko: a) you CAN have atomic blocks with threads, that's what mutexes are for, and b) you can only have that with coros if you know you aren't calling anything that might potentially yield.","date":"2013-08-24T00:34:11.795Z","type":"message"}
{"nick":"mikolalysenko","message":"for example, things like producer/consumer queues are trivial in coroutines and take a lot of work to get right using threads","date":"2013-08-24T00:34:12.300Z","type":"message"}
{"nick":"mikolalysenko","message":"mutex doesn't gaurantee atomicity.  it only gaurantees mutual exclusion","date":"2013-08-24T00:34:29.725Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: you don't need a mutex here for x","date":"2013-08-24T00:34:41.808Z","type":"message"}
{"nick":"mikolalysenko","message":"stm is a way to atomicity","date":"2013-08-24T00:34:44.867Z","type":"message"}
{"nick":"isaacs","message":"mikolalysenko: ok, true","date":"2013-08-24T00:34:48.463Z","type":"message"}
{"nick":"defunctzombie","message":"no two things are actually running at once","date":"2013-08-24T00:34:51.192Z","type":"message"}
{"nick":"mikolalysenko","message":"and no one uses it because it is slow and sucks","date":"2013-08-24T00:34:52.165Z","type":"message"}
{"nick":"kriskowal","message":"defunctzombie: clarification: generators are shallow coroutines and do have run-to-completion semantics, broken explicitly on yield expressions. fibers are deep coroutines and can be interrupted implicitly at function call boundaries.","date":"2013-08-24T00:34:53.516Z","type":"message"}
{"nick":"defunctzombie","message":"kriskowal: coroutines are interrupted when it yields in the coro","date":"2013-08-24T00:35:17.922Z","type":"message"}
{"nick":"defunctzombie","message":"the coroutine has to allow itself to be interrupted","date":"2013-08-24T00:35:25.921Z","type":"message"}
{"nick":"defunctzombie","message":"this is a difference","date":"2013-08-24T00:35:31.124Z","type":"message"}
{"nick":"kriskowal","message":"begging a shallow/deep distinction.","date":"2013-08-24T00:35:37.377Z","type":"message"}
{"nick":"defunctzombie","message":"but my point around all of this is not to argue a semantic","date":"2013-08-24T00:35:40.842Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: semantics are exactly what i'm tryiing to argue.  stop making this about syntax.","date":"2013-08-24T00:35:55.474Z","type":"message"}
{"nick":"defunctzombie","message":"it is to say that writing syntax this way is way easier in many many cases","date":"2013-08-24T00:35:57.760Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: I personally think syntax and structure matter","date":"2013-08-24T00:36:12.108Z","type":"message"}
{"nick":"defunctzombie","message":"a lot","date":"2013-08-24T00:36:29.574Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: my point is that, regardless of the syntax, if you are designing api's, and you care about your users' sanity and your own, you will define crisp semantics about which functions yield, and which do not.","date":"2013-08-24T00:36:42.673Z","type":"message"}
{"nick":"kriskowal","message":"the syntax and semantics in this case are both important. the point of deep coroutines is that you can yield at a boundary that does not look like a boundary","date":"2013-08-24T00:36:43.654Z","type":"message"}
{"nick":"isaacs","message":"quite a lot of work went into generators to make them far less likely to release zalgo.","date":"2013-08-24T00:37:07.643Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: generators are boring imho","date":"2013-08-24T00:37:26.892Z","type":"message"}
{"nick":"mbalho","message":"not crampusproof yet to","date":"2013-08-24T00:37:29.215Z","type":"message"}
{"nick":"mbalho","message":"tho*","date":"2013-08-24T00:37:30.863Z","type":"message"}
{"nick":"kriskowal","message":"ah, that would be the cusp of it.","date":"2013-08-24T00:37:48.399Z","type":"message"}
{"nick":"isaacs","message":"crampusproof?","date":"2013-08-24T00:37:56.463Z","type":"message"}
{"nick":"jcrugzz","reason":"Ping timeout: 276 seconds","date":"2013-08-24T00:38:00.781Z","type":"quit"}
{"nick":"isaacs","message":"defunctzombie: i like boring code.","date":"2013-08-24T00:38:03.293Z","type":"message"}
{"nick":"kriskowal","message":"if you think fibers are exciting, you'll get a real thrill out of threads.","date":"2013-08-24T00:38:07.154Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: and for your example of hm(); ... I think that program is very easy to reason about","date":"2013-08-24T00:38:09.584Z","type":"message"}
{"nick":"isaacs","message":"defunctzombie: boring code is easy to deal with.","date":"2013-08-24T00:38:09.963Z","type":"message"}
{"nick":"mikolalysenko","message":"there are a few things coroutines/fibers are nice for, like video games","date":"2013-08-24T00:38:12.219Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: x is global, shit can happen to it haha","date":"2013-08-24T00:38:16.720Z","type":"message"}
{"nick":"tmcw","reason":"Remote host closed the connection","date":"2013-08-24T00:38:29.847Z","type":"quit"}
{"nick":"isaacs","message":"mikolalysenko: i have nothing against coroutines/fibers.  i have a lot against ambiguously synchronous APIs","date":"2013-08-24T00:38:44.759Z","type":"message"}
{"nick":"mikolalysenko","message":"basically any place you have complicated internal states, like parsers or data structure traversals","date":"2013-08-24T00:38:46.474Z","type":"message"}
{"nick":"mikolalysenko","message":"isaacs: ok, then we are in agreement here","date":"2013-08-24T00:38:58.443Z","type":"message"}
{"nick":"mikolalysenko","message":"the main reason I like coroutines is that you can apply structured programming to concurrency","date":"2013-08-24T00:39:47.315Z","type":"message"}
{"nick":"isaacs","message":"i thnk that coros make it easier to release zalgo (vs generators, where yields are shallow)","date":"2013-08-24T00:39:54.971Z","type":"message"}
{"nick":"mikolalysenko","message":"so instead of having things like switch statements you just use loops and so on","date":"2013-08-24T00:39:59.317Z","type":"message"}
{"nick":"mbalho","message":"isaacs: krampus/crampus","date":"2013-08-24T00:40:17.538Z","type":"message"}
{"nick":"kriskowal","message":"i on the other hand do have a problem with deep courtines / fibers. but, isaacs is right that even in that case, you can avoid trouble if every function clearly documents that it will vouchsafe for itself and any function it calls (transitively), they may or may not yield","date":"2013-08-24T00:40:25.311Z","type":"message"}
{"nick":"isaacs","message":"mbalho: the yule devil?","date":"2013-08-24T00:40:39.850Z","type":"message"}
{"nick":"mbalho","message":"that is an anachronistic way to put it but yes","date":"2013-08-24T00:40:54.190Z","type":"message"}
{"nick":"mikolalysenko","message":"isaacs: well, but sometimes you want recursion. for example, if you are say scripting a video game chracter it makes sense to have high level tasks that might yield","date":"2013-08-24T00:41:03.319Z","type":"message"}
{"nick":"defunctzombie","message":"no way a function could verify everything it calls","date":"2013-08-24T00:41:04.361Z","type":"message"}
{"nick":"mikolalysenko","message":"where each yield skips a tick","date":"2013-08-24T00:41:08.251Z","type":"message"}
{"nick":"mikolalysenko","message":"or in a parser you might want to yield after parsing something, and that parsing requires some recursive function call","date":"2013-08-24T00:41:26.577Z","type":"message"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-08-24T00:41:38.693Z","type":"quit"}
{"nick":"mikolalysenko","message":"like walking a tree for example","date":"2013-08-24T00:41:42.911Z","type":"message"}
{"nick":"mikolalysenko","message":"in fact, without recursive yielding the whole concept of yield is a little useless/limited...","date":"2013-08-24T00:42:07.255Z","type":"message"}
{"nick":"defunctzombie","message":"I would be way happier with yield if you could yield inside of functions, etc","date":"2013-08-24T00:42:40.830Z","type":"message"}
{"nick":"defunctzombie","message":"at not just at the top level function*","date":"2013-08-24T00:42:47.381Z","type":"message"}
{"nick":"mikolalysenko","message":"now of course you can make your own stack and basically push/pop and switch states etc...","date":"2013-08-24T00:42:49.399Z","type":"message"}
{"nick":"kriskowal","message":"you can still do that with shallow coroutines. it isn't a limitation on recursion but on boundaries.","date":"2013-08-24T00:42:53.472Z","type":"message"}
{"nick":"defunctzombie","message":"which is just more usless keyword nonsense","date":"2013-08-24T00:42:56.607Z","type":"message"}
{"nick":"mikolalysenko","message":"and this works and is performant, but it is really horrible to write","date":"2013-08-24T00:43:00.596Z","type":"message"}
{"nick":"kriskowal","message":"e.g., yield* nested()","date":"2013-08-24T00:43:19.468Z","type":"message"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-08-24T00:44:16.151Z","type":"quit"}
{"nick":"mikolalysenko","message":"in the end, I'd be happy with a decent coroutine solution, but I've also programmed enough in languages without this feature that it won't bother me much if it never happens","date":"2013-08-24T00:45:17.445Z","type":"message"}
{"nick":"defunctzombie","message":"why not pretend every function call could yield?","date":"2013-08-24T00:45:20.166Z","type":"message"}
{"nick":"mikolalysenko","message":"defunctzombie: because that would be super inefficient","date":"2013-08-24T00:45:30.383Z","type":"message"}
{"nick":"defunctzombie","message":"then you don't need to have yield in front of everything","date":"2013-08-24T00:45:34.563Z","type":"message"}
{"nick":"defunctzombie","message":"mikolalysenko: [citation needed]","date":"2013-08-24T00:45:39.935Z","type":"message"}
{"nick":"mikolalysenko","message":"do you know what it would take to implement a yield for each function?","date":"2013-08-24T00:45:58.550Z","type":"message"}
{"nick":"defunctzombie","message":"I said pretend, it won't actually yield","date":"2013-08-24T00:46:03.701Z","type":"message"}
{"nick":"mikolalysenko","message":"sometimes you might want things to be atomic though","date":"2013-08-24T00:46:39.129Z","type":"message"}
{"nick":"defunctzombie","message":"but it will solve the issue isaacs creates with writing non parallelizing code with globals :)","date":"2013-08-24T00:46:57.014Z","type":"message"}
{"nick":"kriskowal","message":"you want things to be atomic by default or you will have no way to ensure consistency from line to line","date":"2013-08-24T00:47:06.687Z","type":"message"}
{"nick":"mikolalysenko","message":"basically assuming that everything can yield makes the size of your atomic blocks smaller","date":"2013-08-24T00:47:17.255Z","type":"message"}
{"nick":"mikolalysenko","message":"and if you push that to the limit, you get threads","date":"2013-08-24T00:47:23.746Z","type":"message"}
{"nick":"frankblizzard","reason":"Read error: No route to host","date":"2013-08-24T00:47:38.340Z","type":"quit"}
{"nick":"mikolalysenko","message":"large atomic blocks = fewer execution paths = easier to reason about","date":"2013-08-24T00:47:47.293Z","type":"message"}
{"nick":"frankblizzard","date":"2013-08-24T00:48:04.964Z","type":"join"}
{"nick":"mikolalysenko","message":"if you assume everything yields, you end up in race condition city with lots of different possible ways the code can execute","date":"2013-08-24T00:48:28.389Z","type":"message"}
{"nick":"mikolalysenko","message":"you can do it and make it work, but it is a lot more effort","date":"2013-08-24T00:48:37.358Z","type":"message"}
{"nick":"defunctzombie","message":"or you don't","date":"2013-08-24T00:48:54.887Z","type":"message"}
{"nick":"mikolalysenko","message":"larger atomic blocks give you fewer moving pieces and make reasoning about the code easier","date":"2013-08-24T00:48:59.799Z","type":"message"}
{"nick":"defunctzombie","message":"jsut depends how you are storing state","date":"2013-08-24T00:49:00.013Z","type":"message"}
{"nick":"mikolalysenko","message":"well, you said you wanted to pretend that every function yielded","date":"2013-08-24T00:49:12.862Z","type":"message"}
{"nick":"mikolalysenko","message":"if you do that though, then your code is going to split into a lot of little pieces","date":"2013-08-24T00:49:28.759Z","type":"message"}
{"nick":"mikolalysenko","message":"and it is going to be hard to reason through all the different cases where things can slip in between them","date":"2013-08-24T00:49:46.071Z","type":"message"}
{"nick":"isaacs","message":"kriskowal++","date":"2013-08-24T00:50:12.905Z","type":"message"}
{"nick":"isaacs","message":"really, callbacks are sort of like the \"nuclear option\" wrt atomicity","date":"2013-08-24T00:51:01.394Z","type":"message"}
{"nick":"whit537","reason":"Ping timeout: 240 seconds","date":"2013-08-24T00:51:02.550Z","type":"quit"}
{"nick":"isaacs","message":"*everything you can see* is atomic","date":"2013-08-24T00:51:11.184Z","type":"message"}
{"nick":"mikolalysenko","message":"yeah, and yield \"splits the atom\" to strain the metaphor :)","date":"2013-08-24T00:51:39.311Z","type":"message"}
{"nick":"defunctzombie","message":"problem boils down to this for me: https://gist.github.com/shtylman/6325335","date":"2013-08-24T00:53:28.334Z","type":"message"}
{"nick":"kriskowal","message":"this whole conversation is predicted on the notion that the responsibility to ensure that a callback is called in a future turn is on the service provider","date":"2013-08-24T00:53:45.444Z","type":"message"}
{"nick":"defunctzombie","message":"I think you can't assume that personally cause people write shit that breaks","date":"2013-08-24T00:54:20.240Z","type":"message"}
{"nick":"st_luke","reason":"Remote host closed the connection","date":"2013-08-24T00:54:22.985Z","type":"quit"}
{"nick":"defunctzombie","message":"and this whole.. use callbacks appropriately thing is flawed in my mind since this leaves it up to people to do the right thing","date":"2013-08-24T00:54:40.696Z","type":"message"}
{"nick":"defunctzombie","message":"with no system support","date":"2013-08-24T00:54:44.298Z","type":"message"}
{"nick":"defunctzombie","message":"and that is just silly","date":"2013-08-24T00:54:48.938Z","type":"message"}
{"nick":"mikolalysenko","message":"yield doesn't necessarily make it any better.","date":"2013-08-24T00:55:03.402Z","type":"message"}
{"nick":"defunctzombie","message":"the language/runtime/etc should help do the right thing.. or otherwise there is no right hting","date":"2013-08-24T00:55:10.235Z","type":"message"}
{"nick":"mikolalysenko","message":"I mean it might if you had say a type system or something to back it up...","date":"2013-08-24T00:55:13.749Z","type":"message"}
{"nick":"kriskowal","message":"the language and runtime do help by providing coarse atomicity. that does not seem to be the direction you're going.","date":"2013-08-24T00:55:35.539Z","type":"message"}
{"nick":"mikolalysenko","message":"but absent tools to check that a module does what it says it does, you just have to read the code or trust the author","date":"2013-08-24T00:55:41.879Z","type":"message"}
{"nick":"kriskowal","message":"the solution is not in that direction","date":"2013-08-24T00:55:42.095Z","type":"message"}
{"nick":"kriskowal","message":"but rather, a callMeLater(callback) wrapper so you can program defensively","date":"2013-08-24T00:55:57.063Z","type":"message"}
{"nick":"defunctzombie","message":"I think that is silly since now my code is littered with that","date":"2013-08-24T00:56:21.239Z","type":"message"}
{"nick":"defunctzombie","message":"and I view that as a failure of the language/runtime","date":"2013-08-24T00:56:27.684Z","type":"message"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2013-08-24T00:57:33.344Z","type":"quit"}
{"nick":"kriskowal","message":"not sure how you're proposing that the language fix this failure","date":"2013-08-24T00:57:38.864Z","type":"message"}
{"nick":"defunctzombie","message":"callbacks don't stop the above from failing","date":"2013-08-24T00:57:43.731Z","type":"message"}
{"nick":"defunctzombie","message":"https://gist.github.com/shtylman/6325335#file-issue-js-L11-L13","date":"2013-08-24T00:57:50.971Z","type":"message"}
{"nick":"whit537","date":"2013-08-24T00:58:19.542Z","type":"join"}
{"nick":"kriskowal","message":"ah, well. long story short, promises do provide a basis for programming defensively.","date":"2013-08-24T00:58:57.068Z","type":"message"}
{"nick":"defunctzombie","message":"but callbacks do make it explicit and do allow you to wrap what happens","date":"2013-08-24T00:59:25.452Z","type":"message"}
{"nick":"mikolalysenko","message":"ludum dare just started!","date":"2013-08-24T01:00:51.232Z","type":"message"}
{"nick":"defunctzombie","message":"isaacs: I concede that the async looks sync hides that failure too easily... need to think about it more and why it matters","date":"2013-08-24T01:00:53.429Z","type":"message"}
{"nick":"kriskowal","message":"FS.readFile(\"foo.txt\", laterMaybe(callback)) https://gist.github.com/kriskowal/6325381","date":"2013-08-24T01:05:43.735Z","type":"message"}
{"nick":"kriskowal","message":"of course the ability to optimize comes at the cost of defensiveness :P you can probably trust FS.readFile to call back in a future turn","date":"2013-08-24T01:06:22.963Z","type":"message"}
{"nick":"defunctzombie","message":"heh","date":"2013-08-24T01:10:09.528Z","type":"message"}
{"nick":"defunctzombie","message":"I would still prefer fs.readfile('foo.txt'):","date":"2013-08-24T01:10:19.122Z","type":"message"}
{"nick":"defunctzombie","message":"and htat to block","date":"2013-08-24T01:10:23.286Z","type":"message"}
{"nick":"defunctzombie","message":"followup execution","date":"2013-08-24T01:10:30.147Z","type":"message"}
{"nick":"defunctzombie","message":"but need to think more about these seeming implications","date":"2013-08-24T01:10:38.327Z","type":"message"}
{"nick":"kriskowal","message":"and hate that yield too i presume","date":"2013-08-24T01:10:40.876Z","type":"message"}
{"nick":"defunctzombie","message":";)","date":"2013-08-24T01:10:54.361Z","type":"message"}
{"nick":"kriskowal","message":"can't have your cake and eat it in this case","date":"2013-08-24T01:10:56.456Z","type":"message"}
{"nick":"jxson_","date":"2013-08-24T01:11:40.796Z","type":"join"}
{"nick":"jxson_","reason":"Remote host closed the connection","date":"2013-08-24T01:11:51.891Z","type":"quit"}
{"nick":"defunctzombie","message":"kriskowal: I will have my fucking cake and I will enjoy it!","date":"2013-08-24T01:12:40.731Z","type":"message"}
{"nick":"defunctzombie","message":"http://31.media.tumblr.com/tumblr_lhjraxSqCa1qc3yd1o1_400.png","date":"2013-08-24T01:13:17.240Z","type":"message"}
{"nick":"kriskowal","message":"that's fine as long as you're okay with not having it anymore afterward \b.","date":"2013-08-24T01:13:18.863Z","type":"message"}
{"nick":"kriskowal","date":"2013-08-24T01:14:34.210Z","type":"part"}
{"nick":"jxson","reason":"Ping timeout: 264 seconds","date":"2013-08-24T01:15:42.243Z","type":"quit"}
{"nick":"defunctzombie","message":"man.. that was harsh","date":"2013-08-24T01:17:36.480Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 264 seconds","date":"2013-08-24T01:17:38.743Z","type":"quit"}
{"nick":"defunctzombie","message":"so much negativity","date":"2013-08-24T01:17:41.011Z","type":"message"}
{"nick":"jesusabdullah","message":"idk who that kid is but man that's awesome","date":"2013-08-24T01:17:51.644Z","type":"message"}
{"nick":"mikolalysenko","date":"2013-08-24T01:18:06.476Z","type":"join"}
{"nick":"jesusabdullah","message":"okay what did I miss?","date":"2013-08-24T01:18:17.451Z","type":"message"}
{"nick":"jesusabdullah","message":"Let's chill the harsh","date":"2013-08-24T01:18:24.361Z","type":"message"}
{"nick":"defunctzombie","message":"thlorenz: dedupe?","date":"2013-08-24T01:18:29.367Z","type":"message"}
{"nick":"jesusabdullah","message":"oh, promises vs. callbacks?","date":"2013-08-24T01:18:36.666Z","type":"message"}
{"nick":"defunctzombie","message":"jesusabdullah: that is from the movie matilda","date":"2013-08-24T01:18:41.280Z","type":"message"}
{"nick":"defunctzombie","message":"thlorenz: what does it dedupe on?","date":"2013-08-24T01:18:53.800Z","type":"message"}
{"nick":"defunctzombie","message":"thlorenz: same content?","date":"2013-08-24T01:18:58.639Z","type":"message"}
{"nick":"jesusabdullah","message":"why don't I remember this kid?","date":"2013-08-24T01:19:18.840Z","type":"message"}
{"nick":"jesusabdullah","message":"I watched that movie","date":"2013-08-24T01:19:24.063Z","type":"message"}
{"nick":"jesusabdullah","message":"dangit you guys why did you sass away kriskowal :(","date":"2013-08-24T01:19:44.283Z","type":"message"}
{"nick":"kumavis_","reason":"Quit: kumavis_","date":"2013-08-24T01:25:39.479Z","type":"quit"}
{"nick":"frankblizzard","reason":"Remote host closed the connection","date":"2013-08-24T01:27:25.801Z","type":"quit"}
{"nick":"frankblizzard","date":"2013-08-24T01:28:49.840Z","type":"join"}
{"nick":"airportyh","date":"2013-08-24T01:29:43.887Z","type":"join"}
{"nick":"i_m_ca","date":"2013-08-24T01:30:17.473Z","type":"join"}
{"nick":"airportyh","message":"jesusabdullah: ping","date":"2013-08-24T01:30:46.088Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: hwy hwy","date":"2013-08-24T01:34:43.599Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: one sec","date":"2013-08-24T01:34:59.094Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: ok","date":"2013-08-24T01:35:35.393Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: so yeah, remind me again what you have in mind from our conversation on github?","date":"2013-08-24T01:35:59.960Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: the idea was to expose build information on modules, right?","date":"2013-08-24T01:37:04.258Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: yeah, whether browserify succeeded or failed","date":"2013-08-24T01:38:07.090Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: for which packages","date":"2013-08-24T01:38:16.976Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: so that we can make a much better package search index for browserifiable packages","date":"2013-08-24T01:39:05.912Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: because I was thinking about exposing an api for getting metadata about each singular build","date":"2013-08-24T01:39:14.308Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: like, which versions had been built and which hadn't, which ones were available on npm, basically an api that reflects what's on the cache with a dash of what's on npm","date":"2013-08-24T01:39:51.254Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: that's would be cool too, because it would be nice to know which packages people tried to use as well","date":"2013-08-24T01:41:00.243Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: yeah","date":"2013-08-24T01:41:13.865Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: there's an issue or two about this, let's see if I can find them","date":"2013-08-24T01:41:28.718Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: my thought was we use this info not necessarily to whitelist/blacklist, but more as a scoring system","date":"2013-08-24T01:41:49.870Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: for search ranking","date":"2013-08-24T01:41:54.996Z","type":"message"}
{"nick":"jesusabdullah","message":"https://github.com/jesusabdullah/browserify-cdn/issues/24","date":"2013-08-24T01:42:10.813Z","type":"message"}
{"nick":"jibay","reason":"Read error: Connection reset by peer","date":"2013-08-24T01:42:47.085Z","type":"quit"}
{"nick":"jesusabdullah","message":"airportyh: I think that + npm information on some api, like, /metadata/{{bundle}} or some such","date":"2013-08-24T01:43:15.958Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: thoughts?","date":"2013-08-24T01:43:19.763Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: would that be for all versions or just ones in cache?","date":"2013-08-24T01:43:57.291Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: I think Max was thinking all versions, so like if you were already checking the cache you'd just also hit a route on npm and do some merging","date":"2013-08-24T01:44:25.668Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: if you implement one the other is easy to add on later, so like, yeah no worries","date":"2013-08-24T01:44:51.108Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: It would probably just be on the same endpoint, was all I was thinking","date":"2013-08-24T01:45:07.962Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: gotcha","date":"2013-08-24T01:45:22.684Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: if you'd like I can try to show you around the code near the caches","date":"2013-08-24T01:45:53.235Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: please","date":"2013-08-24T01:46:29.982Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: https://github.com/jesusabdullah/browserify-cdn/blob/master/bundler/cache.js So this is the code that generates the cache objects","date":"2013-08-24T01:46:44.132Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: the cache is all stored in leveldb?","date":"2013-08-24T01:47:21.363Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: it wraps a leveldb with ttls and sublevels","date":"2013-08-24T01:47:26.750Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: yeah","date":"2013-08-24T01:47:28.612Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: so the function you end up using starts on line 18 once you generate these","date":"2013-08-24T01:47:50.335Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: \"body\" is the key, \"generate\" is a function that calls back with what the value should be, and that gets stored into the leveldb before the outer callback is called","date":"2013-08-24T01:49:00.380Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: https://github.com/jesusabdullah/browserify-cdn/blob/master/bundler/cache.js#L64-L99 Here is where I actually create the caches, you can see how I configured them there","date":"2013-08-24T01:49:49.264Z","type":"message"}
{"nick":"airportyh","message":"right","date":"2013-08-24T01:50:33.977Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: so the caches expose the db directly, you could just wrap the cache object in something that grabs cache.db and pulls out the proper information when you call to that route","date":"2013-08-24T01:50:49.193Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: I think the hardest part is the queries","date":"2013-08-24T01:51:03.295Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: if you want to take this on I think that would be very cool. I'd PR that in a heartbeat","date":"2013-08-24T01:52:14.128Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: what kind of queries would we send?","date":"2013-08-24T01:52:18.207Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: the one I am most interested is - send a bunch of package@vers, and get back good/bad","date":"2013-08-24T01:52:56.028Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: yeah, basically that's it","date":"2013-08-24T01:53:12.348Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: you can get which semvers have been called for that module","date":"2013-08-24T01:53:27.817Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: you can also get which versions have been successfully built","date":"2013-08-24T01:53:39.556Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: sorry brb","date":"2013-08-24T01:53:49.382Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: there's no store on which ones have failed, that could be really useful for debugging as an aside","date":"2013-08-24T01:54:23.239Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: cause some of those are gonna be browserify-cdn's fault ;)","date":"2013-08-24T01:54:40.252Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: gotcha, okay I'll give this a try","date":"2013-08-24T01:57:45.080Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: awesome!","date":"2013-08-24T01:57:51.048Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: I'm sure it will be great!","date":"2013-08-24T01:57:56.718Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: I like this project","date":"2013-08-24T01:58:27.849Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: my goal is to make browserify/npm more viable for frontend dev","date":"2013-08-24T01:58:46.065Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: me too XD","date":"2013-08-24T01:59:05.645Z","type":"message"}
{"nick":"airportyh","message":"jesusabdullah: gotta go now, baby crying :) ttyl","date":"2013-08-24T01:59:19.196Z","type":"message"}
{"nick":"jesusabdullah","message":"airportyh: I like that I can get browser builds for free","date":"2013-08-24T01:59:22.745Z","type":"message"}
{"nick":"thlorenz","message":"defunctzombie: will explain tomorrow - along with the PR I'm about to make","date":"2013-08-24T01:59:28.032Z","type":"message"}
{"nick":"thlorenz","message":"Domenic_: dedupe is not perfect at this point, but this is all I could do w/ minimal browserify changes","date":"2013-08-24T02:00:01.188Z","type":"message"}
{"nick":"thlorenz","message":"so whatever version it sees first will be used for all future packs that are considered compatible","date":"2013-08-24T02:00:26.027Z","type":"message"}
{"nick":"frankblizzard","reason":"Remote host closed the connection","date":"2013-08-24T02:01:27.687Z","type":"quit"}
{"nick":"jcrugzz","date":"2013-08-24T02:04:17.498Z","type":"join"}
{"nick":"gwenbell","date":"2013-08-24T02:07:51.956Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2013-08-24T02:08:17.691Z","type":"quit"}
{"nick":"airportyh","reason":"Ping timeout: 264 seconds","date":"2013-08-24T02:15:06.289Z","type":"quit"}
{"nick":"soldair","reason":"Quit: Page closed","date":"2013-08-24T02:21:04.365Z","type":"quit"}
{"nick":"airportyh","date":"2013-08-24T02:23:28.759Z","type":"join"}
{"nick":"airportyh","reason":"Client Quit","date":"2013-08-24T02:23:44.915Z","type":"quit"}
{"nick":"thlorenz","date":"2013-08-24T02:34:39.553Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2013-08-24T02:35:56.998Z","type":"quit"}
{"nick":"ednapiranha","date":"2013-08-24T02:41:30.107Z","type":"join"}
{"nick":"gwenbell","reason":"Quit: Lost terminal","date":"2013-08-24T02:46:08.933Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 276 seconds","date":"2013-08-24T02:46:42.642Z","type":"quit"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2013-08-24T02:47:29.284Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-08-24T02:52:19.717Z","type":"join"}
{"nick":"chapel","message":"anyone know the nitty gritty of how browsers handle redirects and passing the referrer?","date":"2013-08-24T03:11:16.449Z","type":"message"}
{"nick":"chapel","message":"I came up with an issue where our site is redirecting mobile users to the mobile site, the referrer is being lost, and I don't know if it is due to the 301 redirect or because its going from www.domain.com to mobile.domain.com","date":"2013-08-24T03:12:04.545Z","type":"message"}
{"nick":"whit537","reason":"Quit: whit537","date":"2013-08-24T03:13:18.196Z","type":"quit"}
{"nick":"mbalho","message":"say i wanted to make a command line utility called `pizza` such that i could \"cat foo.json | pizza\" and have it do stuff with stdin but if i just type pizza i should get the usage/help","date":"2013-08-24T03:20:09.660Z","type":"message"}
{"nick":"kumavis_","date":"2013-08-24T03:20:20.124Z","type":"join"}
{"nick":"mbalho","message":"anyone have a good example of doing this?","date":"2013-08-24T03:20:20.510Z","type":"message"}
{"nick":"jesusabdullah","message":"mbalho: https://github.com/jesusabdullah/exercise-bike","date":"2013-08-24T03:20:41.187Z","type":"message"}
{"nick":"jesusabdullah","message":"mbalho: that was the best I could figure out","date":"2013-08-24T03:20:57.376Z","type":"message"}
{"nick":"mbalho","message":"you have to say ':stdin:' ?","date":"2013-08-24T03:21:28.126Z","type":"message"}
{"nick":"mbalho","message":"ive seen some modules use a hyphen","date":"2013-08-24T03:21:39.759Z","type":"message"}
{"nick":"mbalho","message":"like 'pizza -' would tell it to listen on stdin","date":"2013-08-24T03:21:47.766Z","type":"message"}
{"nick":"isaacs","message":"mbalho: process.stdin.isatty()","date":"2013-08-24T03:24:21.307Z","type":"message"}
{"nick":"isaacs","message":"er, process.stdin.isTTY","date":"2013-08-24T03:24:45.157Z","type":"message"}
{"nick":"mbalho","message":"so if you do \"something | node\" it sets isTTY to true?","date":"2013-08-24T03:25:11.773Z","type":"message"}
{"nick":"mbalho","message":"what other situations cause isTTY to be true","date":"2013-08-24T03:25:17.302Z","type":"message"}
{"nick":"isaacs","message":"mbalho:","date":"2013-08-24T03:25:47.787Z","type":"message"}
{"nick":"isaacs","message":"$ echo '' | node -p '!!process.stdin.isTTY'","date":"2013-08-24T03:25:48.026Z","type":"message"}
{"nick":"isaacs","message":"false","date":"2013-08-24T03:25:48.239Z","type":"message"}
{"nick":"isaacs","message":"$ node -p '!!process.stdin.isTTY'","date":"2013-08-24T03:25:48.239Z","type":"message"}
{"nick":"isaacs","message":"true","date":"2013-08-24T03:25:50.058Z","type":"message"}
{"nick":"isaacs","message":"mbalho: process.stdin.isTTY is true if stdin is a tty","date":"2013-08-24T03:26:01.966Z","type":"message"}
{"nick":"isaacs","message":"mbalho: if you do somethign | node, then isTTY is false","date":"2013-08-24T03:26:16.536Z","type":"message"}
{"nick":"isaacs","message":"mbalho: or if you do node <file.js","date":"2013-08-24T03:26:22.456Z","type":"message"}
{"nick":"isaacs","message":"mbalho: or node <(process)","date":"2013-08-24T03:26:27.017Z","type":"message"}
{"nick":"mbalho","message":"gotcha","date":"2013-08-24T03:26:44.089Z","type":"message"}
{"nick":"isaacs","message":"mbalho: that's how node knows to start the repl or not","date":"2013-08-24T03:26:44.436Z","type":"message"}
{"nick":"substack","message":"or spawn(process.execScript, ['file.js'])","date":"2013-08-24T03:26:52.759Z","type":"message"}
{"nick":"substack","message":"*execPath","date":"2013-08-24T03:27:07.987Z","type":"message"}
{"nick":"isaacs","message":"mbalho: if (process.stdin.isTTY) { usage() } else { doStuff() }","date":"2013-08-24T03:27:12.235Z","type":"message"}
{"nick":"substack","message":"&& argv.file !== '-'","date":"2013-08-24T03:27:35.600Z","type":"message"}
{"nick":"isaacs","message":"substack: well, you can use stdin by default if it's not a TTY","date":"2013-08-24T03:27:52.676Z","type":"message"}
{"nick":"isaacs","message":"substack: like node does.","date":"2013-08-24T03:27:58.344Z","type":"message"}
{"nick":"isaacs","message":"$ echo 'console.log(\"pizza\")' | node","date":"2013-08-24T03:28:09.510Z","type":"message"}
{"nick":"isaacs","message":"pizza","date":"2013-08-24T03:28:09.774Z","type":"message"}
{"nick":"mbalho","message":"pizza\\n","date":"2013-08-24T03:28:18.887Z","type":"message"}
{"nick":"isaacs","message":"$ node <(echo 'console.log(\"pizza\")')","date":"2013-08-24T03:28:28.669Z","type":"message"}
{"nick":"isaacs","message":"pizza","date":"2013-08-24T03:28:28.887Z","type":"message"}
{"nick":"isaacs","message":"$ echo '1+2' | node -p","date":"2013-08-24T03:29:09.914Z","type":"message"}
{"nick":"isaacs","message":"3","date":"2013-08-24T03:29:10.127Z","type":"message"}
{"nick":"mbalho","message":"i hope the next version of node aliases ☃ to process.stdout.write","date":"2013-08-24T03:29:10.833Z","type":"message"}
{"nick":"isaacs","message":"$ echo '1+2' | node -i","date":"2013-08-24T03:29:26.254Z","type":"message"}
{"nick":"isaacs","message":"> 1+2","date":"2013-08-24T03:29:26.467Z","type":"message"}
{"nick":"isaacs","message":"3","date":"2013-08-24T03:29:26.467Z","type":"message"}
{"nick":"isaacs","message":">","date":"2013-08-24T03:29:26.937Z","type":"message"}
{"nick":"mbalho","message":"isaacs: what does -e do?","date":"2013-08-24T03:29:55.983Z","type":"message"}
{"nick":"isaacs","message":"mbalho: -e executes the argument.  -p executes the argument and then prints the result","date":"2013-08-24T03:30:12.552Z","type":"message"}
{"nick":"mbalho","message":"ohhh","date":"2013-08-24T03:30:17.163Z","type":"message"}
{"nick":"mbalho","message":"i thought you needed -pe, didnt know -p did both","date":"2013-08-24T03:30:28.896Z","type":"message"}
{"nick":"isaacs","message":"mbalho: before 0.10, i think, you did","date":"2013-08-24T03:30:38.743Z","type":"message"}
{"nick":"isaacs","message":"maybe before 0.8","date":"2013-08-24T03:30:43.781Z","type":"message"}
{"nick":"isaacs","message":"i forget those olden-times versions","date":"2013-08-24T03:30:49.081Z","type":"message"}
{"nick":"mbalho","message":"☃('pizza')","date":"2013-08-24T03:30:58.427Z","type":"message"}
{"nick":"mbalho","message":"pizza","date":"2013-08-24T03:30:59.401Z","type":"message"}
{"nick":"mbalho","message":"console.log('pizza')","date":"2013-08-24T03:31:01.969Z","type":"message"}
{"nick":"mbalho","message":"pizza\\n","date":"2013-08-24T03:31:03.369Z","type":"message"}
{"nick":"mbalho","message":"♞({\"foo\": \"bar\"})","date":"2013-08-24T03:32:12.600Z","type":"message"}
{"nick":"mbalho","message":"{\"foo\":\"bar\"}","date":"2013-08-24T03:32:14.542Z","type":"message"}
{"nick":"mbalho","message":"console.log({\"foo\": \"bar\"})","date":"2013-08-24T03:32:23.054Z","type":"message"}
{"nick":"mbalho","message":"{ foo: 'bar' }","date":"2013-08-24T03:32:23.467Z","type":"message"}
{"nick":"mbalho","message":"or { foo: 'bar' }\\n rather","date":"2013-08-24T03:32:30.856Z","type":"message"}
{"nick":"mbalho","message":"isaacs: i will pull request snowman and horse aliases to node core ne day","date":"2013-08-24T03:32:49.971Z","type":"message"}
{"nick":"mbalho","message":"one*","date":"2013-08-24T03:32:51.368Z","type":"message"}
{"nick":"mbalho","message":"isaacs: horse being JSON.stringify","date":"2013-08-24T03:32:57.327Z","type":"message"}
{"nick":"isaacs","message":"mbalho: userland","date":"2013-08-24T03:33:24.680Z","type":"message"}
{"nick":"mbalho","message":"but.... the lulz....","date":"2013-08-24T03:33:38.867Z","type":"message"}
{"nick":"isaacs","message":"lulz belong in userland.","date":"2013-08-24T03:33:47.770Z","type":"message"}
{"nick":"mbalho","message":"npm doesnt let be publish obscure unicode names does it?","date":"2013-08-24T03:34:13.986Z","type":"message"}
{"nick":"mbalho","message":"npm ERR! Error: Invalid name: \"♞\"","date":"2013-08-24T03:34:48.035Z","type":"message"}
{"nick":"mbalho","message":"isaacs: http://i.imgur.com/34b6rZp.png works","date":"2013-08-24T03:37:36.718Z","type":"message"}
{"nick":"isaacs","message":"mbalho: yeah, npm doesn't let you publish anything that isn't url-safe.","date":"2013-08-24T03:38:44.828Z","type":"message"}
{"nick":"isaacs","message":"mbalho: anything where encodeURIComponent(name) !== name, failse.","date":"2013-08-24T03:38:58.787Z","type":"message"}
{"nick":"mbalho","message":"o rite","date":"2013-08-24T03:39:28.198Z","type":"message"}
{"nick":"mbalho","message":"isaacs: i get an error when i do module.exports.♞ = 1","date":"2013-08-24T03:40:38.765Z","type":"message"}
{"nick":"mbalho","message":"oh i cant use it as a literal","date":"2013-08-24T03:41:07.486Z","type":"message"}
{"nick":"mbalho","message":"time to bug brendan brb","date":"2013-08-24T03:41:13.915Z","type":"message"}
{"nick":"isaacs","message":"mbalho: yeah, that horse is ILLEGAL","date":"2013-08-24T03:41:29.226Z","type":"message"}
{"nick":"isaacs","message":"NOBODY expects the token: ILLEGAL!","date":"2013-08-24T03:43:18.805Z","type":"message"}
{"nick":"chapel","message":"http://jsperf.com/closure-vs-property/7","date":"2013-08-24T03:43:25.983Z","type":"message"}
{"nick":"isaacs","action":"needs a unicode symbol for \"spanish inquisition\"","date":"2013-08-24T03:43:29.824Z","type":"action"}
{"nick":"mbalho","message":"bah sucks so bad that we dont have unicode literals, pretty sure ruby has that","date":"2013-08-24T03:55:03.709Z","type":"message"}
{"nick":"jcrugzz","message":"mbalho: lol you really want that horse module dont you","date":"2013-08-24T03:56:47.378Z","type":"message"}
{"nick":"mbalho","message":"damn right","date":"2013-08-24T03:57:21.812Z","type":"message"}
{"nick":"i_m_ca","reason":"Ping timeout: 256 seconds","date":"2013-08-24T03:58:54.990Z","type":"quit"}
{"nick":"jesusabdullah","message":"who wouldn't?","date":"2013-08-24T04:02:24.337Z","type":"message"}
{"nick":"kriskowal","date":"2013-08-24T04:07:58.854Z","type":"join"}
{"nick":"mk30_","reason":"Quit: Page closed","date":"2013-08-24T04:13:14.498Z","type":"quit"}
{"nick":"jergason","date":"2013-08-24T04:46:02.610Z","type":"join"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-08-24T04:46:43.778Z","type":"nick"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2013-08-24T04:47:46.218Z","type":"quit"}
{"nick":"jergason","reason":"Remote host closed the connection","date":"2013-08-24T04:55:29.834Z","type":"quit"}
{"nick":"juliangruber","message":"substack: am I right that watchify doesn't play nicely with brfs?","date":"2013-08-24T04:58:13.149Z","type":"message"}
{"nick":"juliangruber","message":"substack: as updated html doesn't trigger a browserify update?","date":"2013-08-24T04:58:25.736Z","type":"message"}
{"nick":"kumavis_","reason":"Quit: kumavis_","date":"2013-08-24T05:07:14.539Z","type":"quit"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-08-24T05:09:26.051Z","type":"nick"}
{"nick":"jcrugzz","message":"if anyone ever has the need to do consistent hashing with multiple redises, there is now a module for that https://github.com/jcrugzz/multi-redis","date":"2013-08-24T05:17:11.856Z","type":"message"}
{"nick":"tilgovi","date":"2013-08-24T05:18:10.018Z","type":"join"}
{"nick":"calvinfo","date":"2013-08-24T05:18:32.378Z","type":"join"}
{"nick":"kumavis_","date":"2013-08-24T05:19:37.536Z","type":"join"}
{"nick":"jesusabdullah","message":"jcrugzz: that's pretty sweet","date":"2013-08-24T05:22:09.568Z","type":"message"}
{"nick":"jcrugzz","message":"jesusabdullah: thanks! it is the same strategy used for the new logging system i implemented. until i convert into something based on multilevel :)","date":"2013-08-24T05:23:44.046Z","type":"message"}
{"nick":"jesusabdullah","message":"gg","date":"2013-08-24T05:28:49.510Z","type":"message"}
{"nick":"kumavis_","reason":"Quit: kumavis_","date":"2013-08-24T05:32:30.132Z","type":"quit"}
{"nick":"kumavis_","date":"2013-08-24T05:36:02.701Z","type":"join"}
{"nick":"chrisdickinson","message":"chapel: is that jsperf link re trevnorris' post?","date":"2013-08-24T05:44:43.486Z","type":"message"}
{"nick":"chapel","message":"chrisdickinson: no mrelph","date":"2013-08-24T05:45:37.758Z","type":"message"}
{"nick":"chrisdickinson","message":"ah","date":"2013-08-24T05:45:50.934Z","type":"message"}
{"nick":"jcrugzz","message":"chrisdickinson: seems similar to the tests you had setup","date":"2013-08-24T05:47:35.538Z","type":"message"}
{"nick":"chrisdickinson","message":"yeah","date":"2013-08-24T05:47:56.578Z","type":"message"}
{"nick":"chapel","message":"chrisdickinson: where is trevnorris' post?","date":"2013-08-24T05:51:45.099Z","type":"message"}
{"nick":"chrisdickinson","message":"http://blog.trevnorris.com/2013/08/long-live-callbacks.html","date":"2013-08-24T05:51:53.336Z","type":"message"}
{"nick":"chrisdickinson","message":"re: the slowdown of the first example: https://gist.github.com/chrisdickinson/7d344ca7454adfd11a15","date":"2013-08-24T05:52:23.900Z","type":"message"}
{"nick":"chrisdickinson","message":"(spoiler: it's because v8 can't inline a function into a loop when that function isn't in the same context as the loop)","date":"2013-08-24T05:52:50.403Z","type":"message"}
{"nick":"jcrugzz","message":"i still await the day that bind will be better optimized","date":"2013-08-24T05:53:31.256Z","type":"message"}
{"nick":"jcrugzz","message":"cause the workaround does not feel as nice xD","date":"2013-08-24T05:53:55.402Z","type":"message"}
{"nick":"chapel","message":"jcrugzz: you're telling me","date":"2013-08-24T05:53:57.022Z","type":"message"}
{"nick":"chapel","message":"bind is super slow","date":"2013-08-24T05:54:00.298Z","type":"message"}
{"nick":"chrisdickinson","message":"how would you optimize it?","date":"2013-08-24T05:54:45.543Z","type":"message"}
{"nick":"jcrugzz","message":"chrisdickinson: i have not dove into v8 land so i couldnt tell you, im assuming its difficult","date":"2013-08-24T05:55:15.159Z","type":"message"}
{"nick":"chrisdickinson","message":"(no matter what, it's turning one function call into two, and changing the arity of the resulting function)","date":"2013-08-24T05:55:36.505Z","type":"message"}
{"nick":"mikolalysenko","message":"chapel:  what is slow about bind?","date":"2013-08-24T05:55:52.379Z","type":"message"}
{"nick":"chrisdickinson","message":"I think it's probably more likely that fat arrow functions'll end up getting optimized","date":"2013-08-24T05:55:56.007Z","type":"message"}
{"nick":"mikolalysenko","message":"actually, I've found that it isn't much worse than using a closure to do the same thing","date":"2013-08-24T05:56:10.199Z","type":"message"}
{"nick":"chapel","message":"mikolalysenko: bind does a lot of things that most people wouldn't do if just using a closure (even emulating bind)","date":"2013-08-24T05:56:31.515Z","type":"message"}
{"nick":"mikolalysenko","message":"I also once tried this thing, but it was crazy and bind ended up being faster anyway:  https://github.com/mikolalysenko/specialize","date":"2013-08-24T05:56:35.546Z","type":"message"}
{"nick":"chapel","message":"since bind has a curry feature","date":"2013-08-24T05:56:37.217Z","type":"message"}
{"nick":"mikolalysenko","message":"in practice I'm not sure it makes much difference...","date":"2013-08-24T05:56:58.750Z","type":"message"}
{"nick":"chapel","message":"in most cases yes, but if it is a hot function, bind is bad","date":"2013-08-24T05:57:13.839Z","type":"message"}
{"nick":"mikolalysenko","message":"if you call bind() in a loop it is bad","date":"2013-08-24T05:57:23.610Z","type":"message"}
{"nick":"mikolalysenko","message":"but calling a bound function is ok","date":"2013-08-24T05:57:28.104Z","type":"message"}
{"nick":"chapel","message":"e.g. one that is being iterated or called thousands or more at a time","date":"2013-08-24T05:57:29.603Z","type":"message"}
{"nick":"chrisdickinson","message":"oh! i bet that's part of it, too! if you're benching bind, the returned function will almost certainly be in a different context than the loop","date":"2013-08-24T05:57:33.678Z","type":"message"}
{"nick":"chrisdickinson","message":"so .bind-generated functions shouldn't be able to be inlined","date":"2013-08-24T05:57:45.916Z","type":"message"}
{"nick":"mikolalysenko","message":"here was the experiment I did:  https://github.com/mikolalysenko/specialize/blob/master/benchmark/ca.js","date":"2013-08-24T05:58:02.775Z","type":"message"}
{"nick":"mikolalysenko","message":"my conclusion was that bind ended up being the fastest way to do that...","date":"2013-08-24T05:58:19.506Z","type":"message"}
{"nick":"jcrugzz","message":"why is v8 able to better optimize https://github.com/spion/async-compare/blob/master/examples/flattened-class.js#L3-L7 ?","date":"2013-08-24T05:58:39.066Z","type":"message"}
{"nick":"mikolalysenko","message":"about on par with manually inlining the arguments","date":"2013-08-24T05:58:40.048Z","type":"message"}
{"nick":"chapel","message":"isaacs on a podcast was complaining about bind in fact","date":"2013-08-24T05:58:40.264Z","type":"message"}
{"nick":"jcrugzz","message":"just becaue its separated out to perform the same functionality?","date":"2013-08-24T05:58:50.897Z","type":"message"}
{"nick":"mikolalysenko","message":"well, here is how I am using it:  https://github.com/mikolalysenko/specialize/blob/master/benchmark/ca.js#L59","date":"2013-08-24T05:59:33.910Z","type":"message"}
{"nick":"chrisdickinson","message":"jcrugzz: because the function being called is https://github.com/spion/async-compare/blob/master/examples/flattened-class.js#L4, with context from the enclosing scope","date":"2013-08-24T05:59:59.641Z","type":"message"}
{"nick":"chrisdickinson","message":"any hot loop calling that function will not be able to inline it","date":"2013-08-24T06:00:14.828Z","type":"message"}
{"nick":"jcrugzz","message":"chrisdickinson: so how exactly does this differ from using the built in .bind()","date":"2013-08-24T06:01:12.383Z","type":"message"}
{"nick":"chrisdickinson","message":"it doesn't","date":"2013-08-24T06:01:19.846Z","type":"message"}
{"nick":"jcrugzz","message":"so its just a misconception that doing this is faster?","date":"2013-08-24T06:01:36.281Z","type":"message"}
{"nick":"chrisdickinson","message":"i.e., that could be part of why bind is slow in benchmarks","date":"2013-08-24T06:01:36.911Z","type":"message"}
{"nick":"chrisdickinson","message":"https://github.com/v8/v8/blob/master/src/hydrogen.cc#L6339-L6345","date":"2013-08-24T06:01:43.502Z","type":"message"}
{"nick":"chrisdickinson","message":"specifically 6343","date":"2013-08-24T06:02:04.094Z","type":"message"}
{"nick":"chapel","message":"a good explanation why bind is slower http://stackoverflow.com/questions/17638305/why-is-bind-slower-than-a-closure","date":"2013-08-24T06:02:29.071Z","type":"message"}
{"nick":"chapel","message":"jcrugzz: your closure based bind is much simpler than native bind","date":"2013-08-24T06:03:41.434Z","type":"message"}
{"nick":"shama","reason":"Remote host closed the connection","date":"2013-08-24T06:05:44.193Z","type":"quit"}
{"nick":"jcrugzz","message":"chapel: but im guessing not by much","date":"2013-08-24T06:05:52.042Z","type":"message"}
{"nick":"chapel","message":"by quite a bit","date":"2013-08-24T06:06:01.198Z","type":"message"}
{"nick":"jcrugzz","message":"using a var self = this; and using a pure closure will always be faster","date":"2013-08-24T06:06:01.799Z","type":"message"}
{"nick":"chapel","message":"native bind has currying, and lots of checks","date":"2013-08-24T06:06:22.192Z","type":"message"}
{"nick":"mikolalysenko","message":"chapel: the benchmark from that stack overflow page isn't very good","date":"2013-08-24T06:06:36.903Z","type":"message"}
{"nick":"mikolalysenko","message":"it just binds the functions and runs them once","date":"2013-08-24T06:06:42.662Z","type":"message"}
{"nick":"chapel","message":"jcrugzz: yes, always faster, just saying to emulate natives bind (as much as is possible) is more complicated","date":"2013-08-24T06:06:49.151Z","type":"message"}
{"nick":"mikolalysenko","message":"so you are really just measuring the overhead of constructing each bound closure, not how efficiently v8 optimizes them","date":"2013-08-24T06:07:03.223Z","type":"message"}
{"nick":"chapel","message":"mikolalysenko: yeah, I've seen better, but the explanation is good","date":"2013-08-24T06:07:03.441Z","type":"message"}
{"nick":"mikolalysenko","message":"not sure I buy it","date":"2013-08-24T06:07:09.931Z","type":"message"}
{"nick":"mikolalysenko","message":"the scope is only related to inlining","date":"2013-08-24T06:07:31.245Z","type":"message"}
{"nick":"mikolalysenko","message":"but that doesn't even matter in that example","date":"2013-08-24T06:07:36.546Z","type":"message"}
{"nick":"mikolalysenko","message":"also if you look at the example I have here:  https://github.com/mikolalysenko/specialize/blob/master/benchmark/ca.js","date":"2013-08-24T06:07:59.027Z","type":"message"}
{"nick":"mikolalysenko","message":"both bind and a closure inline it","date":"2013-08-24T06:08:05.886Z","type":"message"}
{"nick":"mikolalysenko","message":"or at least they get to comparable levels of performance","date":"2013-08-24T06:08:14.015Z","type":"message"}
{"nick":"mikolalysenko","message":"with a slight edge to bind actually in the long run","date":"2013-08-24T06:08:21.213Z","type":"message"}
{"nick":"mikolalysenko","message":"anyway, there are two things:  inlining and partial evaluation","date":"2013-08-24T06:08:50.267Z","type":"message"}
{"nick":"mikolalysenko","message":"inlining only matters when you are binding a function argument","date":"2013-08-24T06:09:00.886Z","type":"message"}
{"nick":"chapel","message":"this is a better test, but not complete emulation http://jsperf.com/bind-vs-jquery-proxy/23","date":"2013-08-24T06:09:06.607Z","type":"message"}
{"nick":"chrisdickinson","message":"jcrugzz: https://gist.github.com/chrisdickinson/7dbab0c37892aca7200d","date":"2013-08-24T06:09:23.298Z","type":"message"}
{"nick":"chrisdickinson","message":"run with node --trace_inlining","date":"2013-08-24T06:09:29.325Z","type":"message"}
{"nick":"mikolalysenko","message":"chapel: that is still not a good benchmark","date":"2013-08-24T06:09:43.813Z","type":"message"}
{"nick":"chapel","message":"how is it any worse than yours?","date":"2013-08-24T06:09:54.954Z","type":"message"}
{"nick":"mikolalysenko","message":"you are just measuring the time required to construct each bound function, not how fast they are","date":"2013-08-24T06:09:56.250Z","type":"message"}
{"nick":"chapel","message":"the 3 at the bottom are saved","date":"2013-08-24T06:10:22.736Z","type":"message"}
{"nick":"chapel","message":"e.g. already bound","date":"2013-08-24T06:10:24.391Z","type":"message"}
{"nick":"chapel","message":"native bind in that case is half as fast as no bind","date":"2013-08-24T06:10:49.602Z","type":"message"}
{"nick":"chapel","message":"and little more than half of custom bind","date":"2013-08-24T06:11:02.070Z","type":"message"}
{"nick":"mikolalysenko","message":"well they are using bind wrong first of all","date":"2013-08-24T06:12:05.775Z","type":"message"}
{"nick":"mikolalysenko","message":"they are setting 1 as the object parameter which is probably screwing something up in the v8 type inference","date":"2013-08-24T06:12:21.387Z","type":"message"}
{"nick":"chrisdickinson","message":"mikolalysenko: it'll just get boxed","date":"2013-08-24T06:12:33.726Z","type":"message"}
{"nick":"chapel","message":"how are they using it wrong?","date":"2013-08-24T06:12:38.229Z","type":"message"}
{"nick":"chapel","message":"a number is an object","date":"2013-08-24T06:12:46.236Z","type":"message"}
{"nick":"dguttman","reason":"Quit: dguttman","date":"2013-08-24T06:13:04.449Z","type":"quit"}
{"nick":"mikolalysenko","message":"yeah, but it is going to be adding a number to an undefined","date":"2013-08-24T06:13:13.115Z","type":"message"}
{"nick":"mikolalysenko","message":"and there is a big penalty for doing that in terms of perf","date":"2013-08-24T06:13:20.901Z","type":"message"}
{"nick":"mikolalysenko","message":"since it is only binding \"this\" not the rest of the arguments","date":"2013-08-24T06:13:34.335Z","type":"message"}
{"nick":"chrisdickinson","message":"mikolalysenko: interesting, the \"warmup\" of manualInline gets inlined, but the main loop doesn't","date":"2013-08-24T06:14:02.929Z","type":"message"}
{"nick":"chapel","message":"mikolalysenko: bind doesn't require arguments to be passed","date":"2013-08-24T06:15:45.519Z","type":"message"}
{"nick":"chapel","message":"not sure your point there?","date":"2013-08-24T06:16:08.309Z","type":"message"}
{"nick":"mikolalysenko","message":"chapel: I think I am just getting a bit tired, this is somewhat confusing","date":"2013-08-24T06:16:42.633Z","type":"message"}
{"nick":"chapel","message":"mikolalysenko: here, I changed it to passing an object as this http://jsperf.com/bind-vs-jquery-proxy/25","date":"2013-08-24T06:16:50.182Z","type":"message"}
{"nick":"chapel","message":"passing a number definitely affect performance","date":"2013-08-24T06:17:09.678Z","type":"message"}
{"nick":"mikolalysenko","message":"wow those numbers are crazy","date":"2013-08-24T06:19:20.613Z","type":"message"}
{"nick":"jcrugzz","message":"as a hypothetical, what would be the performance in a case like https://gist.github.com/jcrugzz/38c08b14d91e4a19f60f if you guys can help me better conceptualize it","date":"2013-08-24T06:19:41.685Z","type":"message"}
{"nick":"chrisdickinson","message":"jcrugzz: from trev's article, he would much rather you make the callback for getData a named function outside of the expression :)","date":"2013-08-24T06:20:48.373Z","type":"message"}
{"nick":"chapel","message":"well, you'll hit the limits of the network layer and or sockets before bind would cause a performance impact there I'd guess","date":"2013-08-24T06:20:56.866Z","type":"message"}
{"nick":"chrisdickinson","message":"yeah","date":"2013-08-24T06:21:01.106Z","type":"message"}
{"nick":"jcrugzz","message":"chrisdickinson: haha of course ;)","date":"2013-08-24T06:21:23.465Z","type":"message"}
{"nick":"chapel","message":"now if you used a custom scope based bind, you'd not have any perf issues","date":"2013-08-24T06:21:38.838Z","type":"message"}
{"nick":"chrisdickinson","message":"jcrugzz: also, the fact that bound functions can't be inlined doesn't really matter in this case, because no matter what the handler you pass to http.createServer will be in a different context than the source of createServer","date":"2013-08-24T06:21:46.520Z","type":"message"}
{"nick":"chapel","message":"yeah","date":"2013-08-24T06:21:58.797Z","type":"message"}
{"nick":"mikolalysenko","message":"I think what it comes down to is that for small functions the overhead of bind() is likely to be pretty large","date":"2013-08-24T06:22:00.354Z","type":"message"}
{"nick":"jcrugzz","message":"chrisdickinson: ok that makes sense","date":"2013-08-24T06:22:08.212Z","type":"message"}
{"nick":"chrisdickinson","message":"i.e., anything you pass in there will not be inlined","date":"2013-08-24T06:22:10.838Z","type":"message"}
{"nick":"chapel","message":"mikolalysenko: for sync hot code yeah definitely","date":"2013-08-24T06:22:18.666Z","type":"message"}
{"nick":"chapel","message":"for actual usage, probably not an issue","date":"2013-08-24T06:22:28.056Z","type":"message"}
{"nick":"chrisdickinson","message":"mikolalysenko: yeah, you double the number of calls and returns, + associated garbage generation for calls","date":"2013-08-24T06:22:32.762Z","type":"message"}
{"nick":"chapel","message":"for a game though, I'd say bind is bad","date":"2013-08-24T06:22:59.410Z","type":"message"}
{"nick":"mikolalysenko","message":"depends where you use it","date":"2013-08-24T06:23:08.234Z","type":"message"}
{"nick":"chapel","message":"mikolalysenko: yes","date":"2013-08-24T06:23:11.898Z","type":"message"}
{"nick":"chapel","message":"if its in any of the main loops or timing critical code, probably not good","date":"2013-08-24T06:23:30.599Z","type":"message"}
{"nick":"mikolalysenko","message":"like you obviously don't want to do bind() on little message handler functions","date":"2013-08-24T06:23:30.815Z","type":"message"}
{"nick":"chapel","message":"anyways, bind is slow, but rarely is it an issue for user code","date":"2013-08-24T06:24:01.694Z","type":"message"}
{"nick":"mikolalysenko","message":"though what is puzzling me is the performance of bind here:","date":"2013-08-24T06:25:00.318Z","type":"message"}
{"nick":"mikolalysenko","message":"https://github.com/mikolalysenko/specialize/blob/master/benchmark/ca.js","date":"2013-08-24T06:25:05.169Z","type":"message"}
{"nick":"mikolalysenko","message":"I just ran this benchmark and here are the times I got:","date":"2013-08-24T06:25:14.380Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for manual inline --- 18687 ms","date":"2013-08-24T06:25:18.382Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for bind() --- 18532 ms","date":"2013-08-24T06:25:18.595Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for closure --- 19303 ms","date":"2013-08-24T06:25:18.595Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for specialize() --- 18613 ms","date":"2013-08-24T06:25:19.415Z","type":"message"}
{"nick":"mikolalysenko","message":"and that is pretty typical, with bind() usually being the fastest","date":"2013-08-24T06:25:31.278Z","type":"message"}
{"nick":"dguttman","date":"2013-08-24T06:25:40.225Z","type":"join"}
{"nick":"mikolalysenko","message":"I remember finding that and getting pretty irritated actually since I was hoping that I could get specialize() to beat bind()","date":"2013-08-24T06:25:52.134Z","type":"message"}
{"nick":"chrisdickinson","message":"mikolalysenko: well, your warm-up loop has deleterious effects on manualInline","date":"2013-08-24T06:26:01.995Z","type":"message"}
{"nick":"mikolalysenko","message":"I can take it out","date":"2013-08-24T06:26:10.111Z","type":"message"}
{"nick":"mikolalysenko","message":"the point of that warmup loop was to account for cache issues which would bias against the first test cases","date":"2013-08-24T06:27:01.447Z","type":"message"}
{"nick":"mikolalysenko","message":"here are the times with no warmup:","date":"2013-08-24T06:27:52.243Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for manual inline --- 18559 ms","date":"2013-08-24T06:27:52.567Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for bind() --- 18468 ms","date":"2013-08-24T06:27:52.784Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for closure --- 19225 ms","date":"2013-08-24T06:27:52.784Z","type":"message"}
{"nick":"mikolalysenko","message":"Time for specialize() --- 18512 ms","date":"2013-08-24T06:27:53.237Z","type":"message"}
{"nick":"mikolalysenko","message":"same story again","date":"2013-08-24T06:27:55.889Z","type":"message"}
{"nick":"chapel","message":"this is the article the original jsperf was from http://mrale.ph/blog/2013/08/14/hidden-classes-vs-jsperf.html?utm_source=javascriptweekly&utm_medium=email","date":"2013-08-24T06:27:58.078Z","type":"message"}
{"nick":"chapel","message":"well my variation of it that is","date":"2013-08-24T06:28:03.351Z","type":"message"}
{"nick":"chrisdickinson","message":"mikolalysenko: yeah, rule gets inlined into updateCA, so manualinline and bind should be about the same","date":"2013-08-24T06:30:13.394Z","type":"message"}
{"nick":"chapel","reason":"\"Textual IRC Client: www.textualapp.com\"","date":"2013-08-24T06:30:17.194Z","type":"part"}
{"nick":"chapel","date":"2013-08-24T06:30:22.911Z","type":"join"}
{"nick":"chrisdickinson","message":"i.e., they're basically the same code","date":"2013-08-24T06:30:26.279Z","type":"message"}
{"nick":"mikolalysenko","message":"yeah","date":"2013-08-24T06:30:33.441Z","type":"message"}
{"nick":"mikolalysenko","message":"so why is the closure version slower?","date":"2013-08-24T06:30:39.639Z","type":"message"}
{"nick":"mikolalysenko","message":"also specialize() basically does the inlining too","date":"2013-08-24T06:30:48.957Z","type":"message"}
{"nick":"mikolalysenko","message":"it is basically a naive partial evaluator for js written in js","date":"2013-08-24T06:31:05.603Z","type":"message"}
{"nick":"chapel","message":"night guys, have a good one","date":"2013-08-24T06:31:39.924Z","type":"message"}
{"nick":"dguttman","reason":"Quit: dguttman","date":"2013-08-24T06:33:59.379Z","type":"quit"}
{"nick":"chrisdickinson","message":"aaah","date":"2013-08-24T06:33:59.632Z","type":"message"}
{"nick":"chrisdickinson","message":"i think i see what might be an issue","date":"2013-08-24T06:34:03.942Z","type":"message"}
{"nick":"chrisdickinson","message":"well, not an issue per se","date":"2013-08-24T06:34:20.537Z","type":"message"}
{"nick":"dguttman","date":"2013-08-24T06:35:33.291Z","type":"join"}
{"nick":"chrisdickinson","message":"but something makes more sense to me. for every run through the bench'd loop, we're doing 0xFFFF * 2 `rule` ops","date":"2013-08-24T06:35:40.499Z","type":"message"}
{"nick":"chrisdickinson","message":"so we do 0xFFFF * 2 * 45000 rule ops -- so if that gets inlined, things get *way* speedier. the actual outer call pales in comparison to that","date":"2013-08-24T06:36:17.075Z","type":"message"}
{"nick":"mikolalysenko","message":"yeah","date":"2013-08-24T06:36:29.885Z","type":"message"}
{"nick":"mikolalysenko","message":"basically it seems to me that all the overhead in bind() is in that constant outer call","date":"2013-08-24T06:36:48.690Z","type":"message"}
{"nick":"chrisdickinson","message":"to see \"bind\" fail you, you just have to call `wolfram30.bind(null)` and pass that in instead of `wolfram30`","date":"2013-08-24T06:36:53.710Z","type":"message"}
{"nick":"chrisdickinson","message":"because then it won't be inline-able","date":"2013-08-24T06:37:15.202Z","type":"message"}
{"nick":"mikolalysenko","message":"I see","date":"2013-08-24T06:37:24.846Z","type":"message"}
{"nick":"dguttman","reason":"Client Quit","date":"2013-08-24T06:37:37.469Z","type":"quit"}
{"nick":"mikolalysenko","message":"but the actual bound result is itself pretty fast...","date":"2013-08-24T06:37:43.568Z","type":"message"}
{"nick":"mikolalysenko","message":"I wonder if bind() does something different than the closure here","date":"2013-08-24T06:37:54.381Z","type":"message"}
{"nick":"mikolalysenko","message":"or if they amount to the same thing after you go through whatever extra rigamarole bind does when you call it","date":"2013-08-24T06:38:18.271Z","type":"message"}
{"nick":"chrisdickinson","message":"bind's inlining of `rule` might be more intelligent than the manual inlining","date":"2013-08-24T06:39:13.464Z","type":"message"}
{"nick":"mikolalysenko","message":"maybe","date":"2013-08-24T06:39:34.575Z","type":"message"}
{"nick":"mikolalysenko","message":"but it also seems more intelligent than what the closure does too","date":"2013-08-24T06:39:53.470Z","type":"message"}
{"nick":"mikolalysenko","message":"ok.  I am going to sleep","date":"2013-08-24T06:42:34.971Z","type":"message"}
{"nick":"chrisdickinson","message":"kk. night!","date":"2013-08-24T06:42:43.509Z","type":"message"}
{"nick":"jcrugzz","message":"night! thanks for the discussion guys, im trying to absorb ;)","date":"2013-08-24T06:43:27.339Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 245 seconds","date":"2013-08-24T06:46:41.669Z","type":"quit"}
{"nick":"stagas","date":"2013-08-24T06:51:54.379Z","type":"join"}
{"nick":"damonoehlman","date":"2013-08-24T06:52:38.539Z","type":"join"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2013-08-24T07:05:29.891Z","type":"quit"}
{"nick":"kumavis_","reason":"Quit: kumavis_","date":"2013-08-24T07:23:38.936Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-08-24T07:52:51.216Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 256 seconds","date":"2013-08-24T07:58:03.077Z","type":"quit"}
{"nick":"calvinfo","date":"2013-08-24T08:06:01.612Z","type":"join"}
{"nick":"calvinfo","reason":"Ping timeout: 276 seconds","date":"2013-08-24T08:11:03.607Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-08-24T08:54:14.290Z","type":"nick"}
{"nick":"jcrugzz","reason":"Ping timeout: 264 seconds","date":"2013-08-24T08:59:30.289Z","type":"quit"}
{"nick":"jibay","date":"2013-08-24T09:03:39.456Z","type":"join"}
{"nick":"nicholas_","date":"2013-08-24T09:18:40.941Z","type":"join"}
{"nick":"nicholasf","reason":"Read error: Connection reset by peer","date":"2013-08-24T09:18:41.151Z","type":"quit"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2013-08-24T09:26:00.516Z","type":"quit"}
{"nick":"mcollina","date":"2013-08-24T09:37:35.233Z","type":"join"}
{"nick":"mcollina","reason":"Read error: No route to host","date":"2013-08-24T09:56:08.981Z","type":"quit"}
{"nick":"dominictarr","date":"2013-08-24T10:00:22.376Z","type":"join"}
{"nick":"mcollina","date":"2013-08-24T10:01:35.925Z","type":"join"}
{"nick":"jcrugzz","date":"2013-08-24T10:04:55.434Z","type":"join"}
{"nick":"dominictarr_","date":"2013-08-24T10:13:15.971Z","type":"join"}
{"nick":"dominictarr_","message":"you can't nest yield?","date":"2013-08-24T10:13:28.361Z","type":"message"}
{"nick":"ins0mnia","date":"2013-08-24T10:15:01.751Z","type":"join"}
{"nick":"dominictarr","reason":"Ping timeout: 245 seconds","date":"2013-08-24T10:16:23.160Z","type":"quit"}
{"nick":"dominictarr_","new_nick":"dominictarr","date":"2013-08-24T10:16:23.724Z","type":"nick"}
{"nick":"mcollina","reason":"Read error: Connection reset by peer","date":"2013-08-24T10:17:52.583Z","type":"quit"}
{"nick":"mcollina_","date":"2013-08-24T10:17:58.760Z","type":"join"}
{"nick":"jibay","reason":"Remote host closed the connection","date":"2013-08-24T10:23:42.681Z","type":"quit"}
{"nick":"dominictarr","message":"jez0990: https://github.com/dominictarr/cspaas","date":"2013-08-24T10:49:04.491Z","type":"message"}
{"nick":"dominictarr","message":"^ push deploy into iframes","date":"2013-08-24T10:49:13.980Z","type":"message"}
{"nick":"dominictarr","message":"aha client side platform as a service","date":"2013-08-24T10:49:25.908Z","type":"message"}
{"nick":"mcollina_","reason":"Read error: Connection reset by peer","date":"2013-08-24T11:18:03.298Z","type":"quit"}
{"nick":"mirkokiefer","date":"2013-08-24T11:18:26.878Z","type":"join"}
{"nick":"ins0mnia","date":"2013-08-24T11:27:36.677Z","type":"part"}
{"nick":"timoxley","date":"2013-08-24T11:29:34.740Z","type":"join"}
{"nick":"stagas","reason":"Ping timeout: 245 seconds","date":"2013-08-24T11:46:48.162Z","type":"quit"}
{"nick":"mirkokiefer","reason":"Quit: mirkokiefer","date":"2013-08-24T12:01:19.081Z","type":"quit"}
{"nick":"whit537","date":"2013-08-24T12:07:33.632Z","type":"join"}
{"nick":"timoxley","reason":"Ping timeout: 264 seconds","date":"2013-08-24T12:12:14.763Z","type":"quit"}
{"nick":"whit537","reason":"Ping timeout: 245 seconds","date":"2013-08-24T12:43:46.636Z","type":"quit"}
{"nick":"mcollina","date":"2013-08-24T12:46:33.180Z","type":"join"}
{"nick":"whit537","date":"2013-08-24T12:47:40.858Z","type":"join"}
{"nick":"whit537","reason":"Quit: whit537","date":"2013-08-24T12:53:54.389Z","type":"quit"}
{"nick":"coderzach","date":"2013-08-24T12:57:10.789Z","type":"join"}
{"nick":"jcrugzz","reason":"Ping timeout: 264 seconds","date":"2013-08-24T12:59:30.341Z","type":"quit"}
{"nick":"yorick","date":"2013-08-24T13:06:51.391Z","type":"join"}
{"nick":"AvianFlu","date":"2013-08-24T13:10:52.988Z","type":"join"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2013-08-24T13:21:27.842Z","type":"quit"}
{"nick":"damonoehlman","reason":"Quit: WeeChat 0.4.1","date":"2013-08-24T13:41:22.027Z","type":"quit"}
{"nick":"yorick","reason":"Remote host closed the connection","date":"2013-08-24T13:41:31.796Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-08-24T13:41:43.160Z","type":"join"}
{"nick":"coderzach","reason":"Quit: coderzach","date":"2013-08-24T13:54:48.958Z","type":"quit"}
{"nick":"coderzach","date":"2013-08-24T14:13:27.600Z","type":"join"}
{"nick":"vitorpacheco","date":"2013-08-24T14:20:41.646Z","type":"join"}
{"nick":"whit537","date":"2013-08-24T14:26:58.652Z","type":"join"}
{"nick":"i_m_ca","date":"2013-08-24T14:35:21.251Z","type":"join"}
{"nick":"cpettitt","date":"2013-08-24T14:39:12.189Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 245 seconds","date":"2013-08-24T14:39:43.160Z","type":"quit"}
{"nick":"i_m_ca","reason":"Ping timeout: 240 seconds","date":"2013-08-24T14:40:30.335Z","type":"quit"}
{"nick":"i_m_ca","date":"2013-08-24T14:41:44.619Z","type":"join"}
{"nick":"mikolalysenko","date":"2013-08-24T15:04:24.656Z","type":"join"}
{"nick":"ednapiranha","date":"2013-08-24T15:06:55.784Z","type":"join"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2013-08-24T15:08:34.443Z","type":"quit"}
{"nick":"cpettitt","reason":"Quit: cpettitt","date":"2013-08-24T15:17:46.061Z","type":"quit"}
{"nick":"thlorenz","date":"2013-08-24T15:25:03.159Z","type":"join"}
{"nick":"dguttman","date":"2013-08-24T15:42:34.139Z","type":"join"}
{"nick":"dguttman","reason":"Client Quit","date":"2013-08-24T15:45:20.561Z","type":"quit"}
{"nick":"dguttman","date":"2013-08-24T15:49:13.357Z","type":"join"}
{"nick":"whit537","reason":"Ping timeout: 276 seconds","date":"2013-08-24T15:57:45.753Z","type":"quit"}
{"nick":"dguttman","reason":"Quit: dguttman","date":"2013-08-24T15:59:55.238Z","type":"quit"}
