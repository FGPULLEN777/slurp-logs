{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-11-01T00:00:01.236Z","type":"quit"}
{"nick":"ircretary","date":"2013-11-01T00:00:10.043Z","type":"join"}
{"nick":"feross","reason":"Quit: feross","date":"2013-11-01T00:00:25.587Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T00:02:52.509Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 246 seconds","date":"2013-11-01T00:07:24.511Z","type":"quit"}
{"nick":"calvinfo","date":"2013-11-01T00:08:03.198Z","type":"join"}
{"nick":"feross","date":"2013-11-01T00:09:04.099Z","type":"join"}
{"nick":"calvinfo","reason":"Ping timeout: 252 seconds","date":"2013-11-01T00:12:48.141Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 99]","date":"2013-11-01T00:16:45.243Z","type":"message"}
{"nick":"jergason","date":"2013-11-01T00:29:41.102Z","type":"join"}
{"nick":"Wraithan","date":"2013-11-01T00:31:13.014Z","type":"join"}
{"nick":"Wraithan","message":"Interesting `#include <cmath>` is not namespace compat but `#include <math.h>`","date":"2013-11-01T00:31:40.913Z","type":"message"}
{"nick":"Wraithan","message":"Which means you can't use cmath with dotc","date":"2013-11-01T00:31:49.618Z","type":"message"}
{"nick":"Wraithan","message":"unless it is in your top level file","date":"2013-11-01T00:32:10.295Z","type":"message"}
{"nick":"calvinfo","date":"2013-11-01T00:38:13.844Z","type":"join"}
{"nick":"calvinfo","reason":"Ping timeout: 264 seconds","date":"2013-11-01T00:42:50.824Z","type":"quit"}
{"nick":"maksimlin","date":"2013-11-01T00:48:34.191Z","type":"join"}
{"nick":"ednapiranha","date":"2013-11-01T00:51:26.537Z","type":"join"}
{"nick":"yorick","reason":"Remote host closed the connection","date":"2013-11-01T00:53:20.459Z","type":"quit"}
{"nick":"jergason","reason":"Quit: jergason","date":"2013-11-01T00:57:58.664Z","type":"quit"}
{"nick":"calvinfo","date":"2013-11-01T01:01:33.823Z","type":"join"}
{"nick":"mikolalysenko","date":"2013-11-01T01:03:22.204Z","type":"join"}
{"nick":"calvinfo","reason":"Ping timeout: 272 seconds","date":"2013-11-01T01:06:31.837Z","type":"quit"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2013-11-01T01:08:50.862Z","type":"quit"}
{"nick":"jiangplus","date":"2013-11-01T01:08:59.848Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 49]","date":"2013-11-01T01:16:45.212Z","type":"message"}
{"nick":"rowbit","message":"substack, pkrumins: Encoders down: 50.57.103.135 (free2)","date":"2013-11-01T01:17:50.918Z","type":"message"}
{"nick":"thlorenz","date":"2013-11-01T01:21:44.509Z","type":"join"}
{"nick":"AvianFlu","date":"2013-11-01T01:21:54.124Z","type":"join"}
{"nick":"Aviaphone","date":"2013-11-01T01:22:54.438Z","type":"join"}
{"nick":"AvianPhone","reason":"Ping timeout: 245 seconds","date":"2013-11-01T01:26:15.190Z","type":"quit"}
{"nick":"thlorenz","reason":"Ping timeout: 252 seconds","date":"2013-11-01T01:26:30.206Z","type":"quit"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2013-11-01T01:27:14.954Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T01:27:42.432Z","type":"join"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2013-11-01T01:27:44.186Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T01:27:50.722Z","type":"join"}
{"nick":"ednapiranha","reason":"Quit: Leaving...","date":"2013-11-01T01:39:02.341Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 24]","date":"2013-11-01T02:16:45.387Z","type":"message"}
{"nick":"thlorenz","date":"2013-11-01T02:22:21.084Z","type":"join"}
{"nick":"rowbit","message":"substack, pkrumins: Encoders down: 50.57.103.135 (free2)","date":"2013-11-01T02:22:21.505Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 268 seconds","date":"2013-11-01T02:27:17.124Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-11-01T02:29:07.077Z","type":"quit"}
{"nick":"AvianFlu","date":"2013-11-01T02:29:38.113Z","type":"join"}
{"nick":"Aviaphone","reason":"Quit: Bye","date":"2013-11-01T02:29:38.114Z","type":"quit"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-11-01T03:04:36.373Z","type":"nick"}
{"nick":"thlorenz","date":"2013-11-01T03:09:45.256Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 15]","date":"2013-11-01T03:16:45.247Z","type":"message"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2013-11-01T03:33:08.519Z","type":"quit"}
{"nick":"jcrugzz","date":"2013-11-01T03:38:20.336Z","type":"join"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2013-11-01T03:38:41.542Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T03:39:07.316Z","type":"join"}
{"nick":"jxson","reason":"Ping timeout: 272 seconds","date":"2013-11-01T03:44:19.252Z","type":"quit"}
{"nick":"jergason","date":"2013-11-01T04:03:10.207Z","type":"join"}
{"nick":"thlorenz","date":"2013-11-01T04:04:41.500Z","type":"join"}
{"nick":"Maciek416","reason":"Remote host closed the connection","date":"2013-11-01T04:09:19.714Z","type":"quit"}
{"nick":"Maciek416","date":"2013-11-01T04:09:54.122Z","type":"join"}
{"nick":"jcrugzz_","date":"2013-11-01T04:10:28.085Z","type":"join"}
{"nick":"jcrugzz","reason":"Ping timeout: 268 seconds","date":"2013-11-01T04:12:44.146Z","type":"quit"}
{"nick":"thlorenz","reason":"Ping timeout: 253 seconds","date":"2013-11-01T04:13:09.165Z","type":"quit"}
{"nick":"Maciek416","reason":"Ping timeout: 268 seconds","date":"2013-11-01T04:14:35.122Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 16]","date":"2013-11-01T04:16:45.135Z","type":"message"}
{"nick":"jcrugzz_","new_nick":"jcrugzz","date":"2013-11-01T04:30:15.924Z","type":"nick"}
{"nick":"shama","date":"2013-11-01T04:44:40.784Z","type":"quit"}
{"nick":"DTrejo","reason":"Remote host closed the connection","date":"2013-11-01T04:56:05.699Z","type":"quit"}
{"nick":"DTrejo","date":"2013-11-01T04:56:38.643Z","type":"join"}
{"nick":"DTrejo","reason":"Ping timeout: 246 seconds","date":"2013-11-01T05:00:42.508Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T05:09:34.465Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 272 seconds","date":"2013-11-01T05:14:15.253Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 17]","date":"2013-11-01T05:16:45.263Z","type":"message"}
{"nick":"sidorares","date":"2013-11-01T05:23:08.882Z","type":"join"}
{"nick":"dguttman","reason":"Quit: dguttman","date":"2013-11-01T05:33:56.052Z","type":"quit"}
{"nick":"dominictarr","date":"2013-11-01T05:39:09.070Z","type":"join"}
{"nick":"rowbit","message":"substack, pkrumins: Encoders down: 50.57.103.135 (free2)","date":"2013-11-01T05:41:51.455Z","type":"message"}
{"nick":"dguttman","date":"2013-11-01T05:48:59.431Z","type":"join"}
{"nick":"dguttman","reason":"Quit: dguttman","date":"2013-11-01T05:53:58.617Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-11-01T05:56:37.820Z","type":"nick"}
{"nick":"mikolalysenko","reason":"Ping timeout: 272 seconds","date":"2013-11-01T06:03:01.221Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T06:10:13.104Z","type":"join"}
{"nick":"dominictarr","message":" ","date":"2013-11-01T06:13:00.478Z","type":"message"}
{"nick":"dominictarr","message":"hey whats up?","date":"2013-11-01T06:13:08.123Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 272 seconds","date":"2013-11-01T06:15:03.258Z","type":"quit"}
{"nick":"rowbit","message":"Daily usage stats: [developer: 14, free: 1641]","date":"2013-11-01T06:16:45.070Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 26]","date":"2013-11-01T06:16:45.550Z","type":"message"}
{"nick":"thlorenz","date":"2013-11-01T06:22:04.424Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 246 seconds","date":"2013-11-01T06:26:27.510Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T06:29:02.863Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 240 seconds","date":"2013-11-01T06:33:24.450Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T06:39:54.744Z","type":"join"}
{"nick":"ralphtheninja","date":"2013-11-01T06:41:34.224Z","type":"join"}
{"nick":"jxson","reason":"Ping timeout: 272 seconds","date":"2013-11-01T06:44:49.282Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-11-01T07:05:46.769Z","type":"quit"}
{"nick":"AvianFlu","date":"2013-11-01T07:06:16.695Z","type":"join"}
{"nick":"AvianFlu","reason":"Ping timeout: 246 seconds","date":"2013-11-01T07:10:33.483Z","type":"quit"}
{"nick":"sidorares","reason":"Quit: sidorares","date":"2013-11-01T07:13:03.313Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 41]","date":"2013-11-01T07:16:45.269Z","type":"message"}
{"nick":"timoxley","message":"dominictarr that \"Again with the modules\" thread is painful","date":"2013-11-01T07:21:39.813Z","type":"message"}
{"nick":"jergason","reason":"Quit: jergason","date":"2013-11-01T07:21:52.717Z","type":"quit"}
{"nick":"timoxley","message":"I might be wrong but it seems those arguing against the npm pattern really understand what they're arguing against other than 'node'.","date":"2013-11-01T07:23:59.219Z","type":"message"}
{"nick":"timoxley","message":"*don't really","date":"2013-11-01T07:24:09.724Z","type":"message"}
{"nick":"ralphtheninja","reason":"Read error: Operation timed out","date":"2013-11-01T07:26:53.791Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T07:29:44.816Z","type":"join"}
{"nick":"Raynos","message":"meh","date":"2013-11-01T07:31:50.853Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 272 seconds","date":"2013-11-01T07:34:45.783Z","type":"quit"}
{"nick":"timoxley","message":"Raynos: it just bothers me, like, node has this pretty solid pattern and everyone's just \"Yeah, well, that's just, like, your opinion, man.\"","date":"2013-11-01T07:38:14.259Z","type":"message"}
{"nick":"Raynos","message":"they seem to think that async loading cant be done","date":"2013-11-01T07:42:49.496Z","type":"message"}
{"nick":"Raynos","message":"or that file size is like really important","date":"2013-11-01T07:42:54.474Z","type":"message"}
{"nick":"timoxley","message":"and completely ignore the benefits of code/dependency encapsulation","date":"2013-11-01T07:45:35.901Z","type":"message"}
{"nick":"dominictarr","message":"timoxley: Raynos and they seem to think that asyncloading is like super important too,","date":"2013-11-01T07:48:39.151Z","type":"message"}
{"nick":"dominictarr","message":"when really, it's a kinda rare case","date":"2013-11-01T07:48:50.855Z","type":"message"}
{"nick":"Raynos","message":"i made a comment about the async loading","date":"2013-11-01T07:49:54.681Z","type":"message"}
{"nick":"Raynos","message":"saying its kind of bloody trivial for the edge case where its important","date":"2013-11-01T07:50:06.177Z","type":"message"}
{"nick":"timoxley","message":"dominictarr and it's also very application specific. I'm not even sure if it should be the responsibility of the import mechanism at all","date":"2013-11-01T07:51:17.654Z","type":"message"}
{"nick":"dominictarr","message":"but really, when you dig into arguments like these you always discover that the sides are actually trying to do different things","date":"2013-11-01T07:51:20.253Z","type":"message"}
{"nick":"dominictarr","message":"timoxley: agreed","date":"2013-11-01T07:51:38.261Z","type":"message"}
{"nick":"dominictarr","message":"we have talked about ways to get browserify to do async loading nicely","date":"2013-11-01T07:51:58.915Z","type":"message"}
{"nick":"dominictarr","message":"like maybe a asyncRequire(['m'], function () { require('m') })","date":"2013-11-01T07:52:57.155Z","type":"message"}
{"nick":"dominictarr","message":"browserify would just have to detect that the code inside async require should not be parsed until after","date":"2013-11-01T07:53:37.996Z","type":"message"}
{"nick":"dominictarr","message":"... or maybe it would be easier to put that in another script","date":"2013-11-01T07:53:54.870Z","type":"message"}
{"nick":"timoxley","message":"yeah","date":"2013-11-01T07:53:59.491Z","type":"message"}
{"nick":"timoxley","message":"async dependency loading: just inject a script element","date":"2013-11-01T07:54:28.097Z","type":"message"}
{"nick":"timoxley","message":"listen for load","date":"2013-11-01T07:54:32.570Z","type":"message"}
{"nick":"timoxley","message":"done.","date":"2013-11-01T07:54:34.525Z","type":"message"}
{"nick":"dominictarr","message":"yeah, that is the way most people do it","date":"2013-11-01T07:55:10.033Z","type":"message"}
{"nick":"dominictarr","message":"it would be nice to have an elegant way to do it, but it's not a pain point.","date":"2013-11-01T07:55:33.760Z","type":"message"}
{"nick":"dominictarr","message":"the biggest reason would be just to make people shutup about it.","date":"2013-11-01T07:55:55.127Z","type":"message"}
{"nick":"timoxley","message":"yeah, sure, package it up so it looks like an import or whatever but it's not a good reason to break compatibility with npm","date":"2013-11-01T07:56:29.335Z","type":"message"}
{"nick":"timoxley","message":"it's like shooting someone over some loose change","date":"2013-11-01T07:57:02.564Z","type":"message"}
{"nick":"timoxley","message":"which is exactly what the stupid es6 module syntax is doing","date":"2013-11-01T07:58:48.638Z","type":"message"}
{"nick":"timoxley","message":"wtf","date":"2013-11-01T07:58:50.164Z","type":"message"}
{"nick":"dominictarr","message":"timoxley: well, that is like getting blood out of a stone","date":"2013-11-01T07:59:49.348Z","type":"message"}
{"nick":"dominictarr","message":"thing is, we will still use bundling for browsers even with es6","date":"2013-11-01T08:00:12.338Z","type":"message"}
{"nick":"dominictarr","message":"because it's the roundtrips that are the expensive thing, not the downloading","date":"2013-11-01T08:00:45.674Z","type":"message"}
{"nick":"timoxley","message":"dominictarr I have a vague memory that was one of the things http2 was trying to solve","date":"2013-11-01T08:05:21.817Z","type":"message"}
{"nick":"timoxley","message":"maybe they're right. maybe by the time all this stuff gets adopted browsers and protocols will be smart enough to avoid those issues","date":"2013-11-01T08:06:13.737Z","type":"message"}
{"nick":"dominictarr","reason":"Ping timeout: 268 seconds","date":"2013-11-01T08:09:32.124Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T08:11:30.280Z","type":"join"}
{"nick":"Raynos","message":"ugh","date":"2013-11-01T08:14:26.535Z","type":"message"}
{"nick":"Raynos","message":"es6 ;/","date":"2013-11-01T08:14:28.550Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 260 seconds","date":"2013-11-01T08:16:16.040Z","type":"quit"}
{"nick":"jiangplus","reason":"Ping timeout: 264 seconds","date":"2013-11-01T08:16:26.854Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 34]","date":"2013-11-01T08:16:45.290Z","type":"message"}
{"nick":"feross","reason":"Quit: feross","date":"2013-11-01T08:19:57.304Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T08:30:35.442Z","type":"join"}
{"nick":"jiangplus","date":"2013-11-01T08:31:34.070Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 246 seconds","date":"2013-11-01T08:36:18.479Z","type":"quit"}
{"nick":"mirkokiefer","date":"2013-11-01T08:41:04.081Z","type":"join"}
{"nick":"chilts_","date":"2013-11-01T08:52:22.160Z","type":"join"}
{"nick":"cubert_","date":"2013-11-01T08:53:58.226Z","type":"join"}
{"nick":"rowbit","message":"substack, pkrumins: Encoders down: 50.57.226.209 (free4)","date":"2013-11-01T08:54:51.970Z","type":"message"}
{"nick":"jaz303_","date":"2013-11-01T08:55:08.858Z","type":"join"}
{"nick":"sidorares","date":"2013-11-01T08:56:48.004Z","type":"join"}
{"nick":"owen1","reason":"*.net *.split","date":"2013-11-01T08:58:34.616Z","type":"quit"}
{"nick":"chilts","reason":"*.net *.split","date":"2013-11-01T08:58:35.455Z","type":"quit"}
{"nick":"cubert","reason":"*.net *.split","date":"2013-11-01T08:58:35.456Z","type":"quit"}
{"nick":"jaz303","reason":"*.net *.split","date":"2013-11-01T08:58:35.666Z","type":"quit"}
{"nick":"cubert_","new_nick":"cubert","date":"2013-11-01T08:58:35.875Z","type":"nick"}
{"nick":"owen1","date":"2013-11-01T09:06:58.782Z","type":"join"}
{"nick":"thlorenz","date":"2013-11-01T09:12:08.786Z","type":"join"}
{"nick":"sidorares","reason":"Quit: sidorares","date":"2013-11-01T09:15:54.322Z","type":"quit"}
{"nick":"rowbit","message":"substack, pkrumins: Encoders down: 173.203.67.76 (free3)","date":"2013-11-01T09:16:22.071Z","type":"message"}
{"nick":"juliangruber","message":"substack: is there a browserify transform that adds NODE_PATH suport?","date":"2013-11-01T09:16:24.164Z","type":"message"}
{"nick":"juliangruber","message":"defunctzombie_zz ^","date":"2013-11-01T09:16:29.711Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 272 seconds","date":"2013-11-01T09:16:43.812Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 39]","date":"2013-11-01T09:16:45.180Z","type":"message"}
{"nick":"feross","date":"2013-11-01T09:19:30.138Z","type":"join"}
{"nick":"jcrugzz","reason":"Ping timeout: 272 seconds","date":"2013-11-01T09:26:19.191Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T09:33:07.938Z","type":"join"}
{"nick":"kevino80","date":"2013-11-01T09:35:33.265Z","type":"join"}
{"nick":"jiangplus","message":"、quit","date":"2013-11-01T09:35:55.264Z","type":"message"}
{"nick":"jiangplus","reason":"Quit: leaving","date":"2013-11-01T09:35:59.519Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 260 seconds","date":"2013-11-01T09:37:55.963Z","type":"quit"}
{"nick":"jcrugzz","date":"2013-11-01T09:52:53.706Z","type":"join"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2013-11-01T09:59:58.511Z","type":"quit"}
{"nick":"kevino80","date":"2013-11-01T10:00:24.944Z","type":"join"}
{"nick":"jcrugzz","reason":"Ping timeout: 246 seconds","date":"2013-11-01T10:01:21.415Z","type":"quit"}
{"nick":"kevino80","reason":"Ping timeout: 272 seconds","date":"2013-11-01T10:05:13.728Z","type":"quit"}
{"nick":"maksimlin","reason":"Quit: ChatZilla 0.9.90.1 [Firefox 25.0/20131028113308]","date":"2013-11-01T10:06:27.732Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T10:12:46.255Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 25]","date":"2013-11-01T10:16:45.251Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 264 seconds","date":"2013-11-01T10:17:38.800Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T10:33:51.829Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 264 seconds","date":"2013-11-01T10:38:38.885Z","type":"quit"}
{"nick":"dominictarr","date":"2013-11-01T11:12:00.431Z","type":"join"}
{"nick":"thlorenz","date":"2013-11-01T11:13:24.365Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 32]","date":"2013-11-01T11:16:45.181Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 256 seconds","date":"2013-11-01T11:17:48.000Z","type":"quit"}
{"nick":"dominictarr","reason":"Ping timeout: 246 seconds","date":"2013-11-01T11:21:30.476Z","type":"quit"}
{"nick":"feross","reason":"Quit: feross","date":"2013-11-01T11:31:33.917Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T11:34:34.537Z","type":"join"}
{"nick":"rowbit","message":"substack, pkrumins: These encoders are STILL down: 50.57.103.135(free2)","date":"2013-11-01T11:36:22.660Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 240 seconds","date":"2013-11-01T11:39:02.541Z","type":"quit"}
{"nick":"dominictarr","date":"2013-11-01T11:48:57.846Z","type":"join"}
{"nick":"dominictarr","reason":"Quit: Lost terminal","date":"2013-11-01T12:04:20.816Z","type":"quit"}
{"nick":"yorick","date":"2013-11-01T12:09:54.190Z","type":"join"}
{"nick":"thlorenz","date":"2013-11-01T12:14:00.432Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 62, free: 10]","date":"2013-11-01T12:16:45.300Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 260 seconds","date":"2013-11-01T12:18:31.931Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T12:35:18.949Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 240 seconds","date":"2013-11-01T12:39:35.059Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T12:43:41.193Z","type":"join"}
{"nick":"kevino80","date":"2013-11-01T12:51:33.658Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2013-11-01T12:53:49.679Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T12:56:10.977Z","type":"join"}
{"nick":"thlorenz_","date":"2013-11-01T12:56:43.744Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2013-11-01T12:57:28.815Z","type":"quit"}
{"nick":"thlorenz_","reason":"Remote host closed the connection","date":"2013-11-01T13:00:35.363Z","type":"quit"}
{"nick":"mirkokiefer","reason":"Quit: mirkokiefer","date":"2013-11-01T13:13:50.290Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 16]","date":"2013-11-01T13:16:45.410Z","type":"message"}
{"nick":"jcrugzz","date":"2013-11-01T13:22:15.178Z","type":"join"}
{"nick":"Maciek416","date":"2013-11-01T13:23:06.750Z","type":"join"}
{"nick":"jcrugzz","reason":"Ping timeout: 265 seconds","date":"2013-11-01T13:27:39.672Z","type":"quit"}
{"nick":"jiangplus","date":"2013-11-01T13:27:41.530Z","type":"join"}
{"nick":"mikolalysenko","date":"2013-11-01T13:36:07.544Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 240 seconds","date":"2013-11-01T13:40:38.586Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T13:57:47.862Z","type":"join"}
{"nick":"thlorenz_","date":"2013-11-01T14:01:41.194Z","type":"join"}
{"nick":"thlorenz","date":"2013-11-01T14:03:18.674Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T14:03:37.837Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 272 seconds","date":"2013-11-01T14:06:15.194Z","type":"quit"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-11-01T14:08:45.557Z","type":"nick"}
{"nick":"defunctzombie","message":"juliangruber: isn't NODE_PATH deprecated?","date":"2013-11-01T14:09:56.931Z","type":"message"}
{"nick":"juliangruber","message":"defunctzombie: doesn't say so here http://nodejs.org/api/modules.html#modules_loading_from_the_global_folders","date":"2013-11-01T14:14:25.588Z","type":"message"}
{"nick":"defunctzombie","message":"juliangruber: do you use this to use local libs?","date":"2013-11-01T14:15:02.894Z","type":"message"}
{"nick":"juliangruber","message":"yes","date":"2013-11-01T14:15:10.056Z","type":"message"}
{"nick":"juliangruber","message":"so I can write require('foo') instead of require('../foo')","date":"2013-11-01T14:15:26.264Z","type":"message"}
{"nick":"juliangruber","message":"because require('node module name') also works from any location in my app","date":"2013-11-01T14:16:45.232Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 12, free: 30]","date":"2013-11-01T14:16:45.448Z","type":"message"}
{"nick":"thlorenz","date":"2013-11-01T14:17:54.341Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T14:18:10.781Z","type":"join"}
{"nick":"defunctzombie","message":"juliangruber: I had a better solution to that was hoping to eventually implement","date":"2013-11-01T14:18:17.108Z","type":"message"}
{"nick":"defunctzombie","message":"juliangruber: it has been vetted by st_luke and isaacs I think","date":"2013-11-01T14:18:29.113Z","type":"message"}
{"nick":"defunctzombie","message":"juliangruber: in the package.json allow a \"file://path/to/local/js/or/folder\" value","date":"2013-11-01T14:18:50.399Z","type":"message"}
{"nick":"defunctzombie","message":"for a dependency","date":"2013-11-01T14:18:56.415Z","type":"message"}
{"nick":"defunctzombie","message":"this would only be allowed for \"private: true\" projects","date":"2013-11-01T14:19:11.906Z","type":"message"}
{"nick":"defunctzombie","message":"but would solve the issue people have of wanting to think about something being a separate module but not yet publishing it as such","date":"2013-11-01T14:19:38.682Z","type":"message"}
{"nick":"defunctzombie","message":"juliangruber: having said that.. I don't think it would be a transform issue.. I think it would be a browser-resolve module issue","date":"2013-11-01T14:20:11.485Z","type":"message"}
{"nick":"defunctzombie","message":"and in turn a resolve module issue","date":"2013-11-01T14:20:21.078Z","type":"message"}
{"nick":"defunctzombie","message":"to lookup in the correct pahts","date":"2013-11-01T14:20:25.581Z","type":"message"}
{"nick":"defunctzombie","message":"*paths","date":"2013-11-01T14:20:27.160Z","type":"message"}
{"nick":"juliangruber","message":"ok I see","date":"2013-11-01T14:21:09.843Z","type":"message"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2013-11-01T14:22:38.209Z","type":"quit"}
{"nick":"kevino80","date":"2013-11-01T14:23:15.404Z","type":"join"}
{"nick":"jaz303_","new_nick":"jaz303","date":"2013-11-01T14:23:32.277Z","type":"nick"}
{"nick":"kevino80","reason":"Read error: Connection reset by peer","date":"2013-11-01T14:23:43.278Z","type":"quit"}
{"nick":"kevino80","date":"2013-11-01T14:24:15.384Z","type":"join"}
{"nick":"thlorenz","date":"2013-11-01T14:25:28.024Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T14:25:46.223Z","type":"join"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2013-11-01T14:29:39.207Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T14:29:59.921Z","type":"join"}
{"nick":"kenperkins","date":"2013-11-01T14:31:14.204Z","type":"join"}
{"nick":"mirkokiefer","date":"2013-11-01T14:31:26.072Z","type":"join"}
{"nick":"AvianFlu","date":"2013-11-01T14:35:10.760Z","type":"join"}
{"nick":"ednapiranha","date":"2013-11-01T14:42:02.747Z","type":"join"}
{"nick":"mirkokiefer","reason":"Quit: mirkokiefer","date":"2013-11-01T14:43:53.504Z","type":"quit"}
{"nick":"rowbit","message":"substack, pkrumins: These encoders are STILL down: 50.57.226.209(free4)","date":"2013-11-01T14:49:53.517Z","type":"message"}
{"nick":"mikolalysenko","message":"sat solvers!  https://github.com/mikolalysenko/2-sat","date":"2013-11-01T14:52:38.188Z","type":"message"}
{"nick":"mikolalysenko","message":"next step is horn sat.  any takers?","date":"2013-11-01T14:52:47.336Z","type":"message"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-11-01T14:53:45.762Z","type":"quit"}
{"nick":"AvianFlu","date":"2013-11-01T14:54:14.943Z","type":"join"}
{"nick":"tmcw","date":"2013-11-01T14:58:12.222Z","type":"join"}
{"nick":"AvianFlu","reason":"Ping timeout: 272 seconds","date":"2013-11-01T14:59:05.891Z","type":"quit"}
{"nick":"dguttman","date":"2013-11-01T14:59:11.314Z","type":"join"}
{"nick":"thlorenz_","date":"2013-11-01T15:02:16.475Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 265 seconds","date":"2013-11-01T15:06:44.805Z","type":"quit"}
{"nick":"rowbit","message":"substack, pkrumins: These encoders are STILL down: 173.203.67.76(free3)","date":"2013-11-01T15:11:23.538Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 260 seconds","date":"2013-11-01T15:13:03.905Z","type":"quit"}
{"nick":"mikolalysenko","date":"2013-11-01T15:14:37.925Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 32]","date":"2013-11-01T15:16:45.338Z","type":"message"}
{"nick":"thlorenz","date":"2013-11-01T15:26:47.521Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T15:28:12.223Z","type":"join"}
{"nick":"jcrugzz","date":"2013-11-01T15:45:06.814Z","type":"join"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2013-11-01T15:45:56.484Z","type":"quit"}
{"nick":"kevino80","date":"2013-11-01T15:46:32.403Z","type":"join"}
{"nick":"kevinswiber","date":"2013-11-01T15:47:11.039Z","type":"join"}
{"nick":"kevino80","reason":"Ping timeout: 272 seconds","date":"2013-11-01T15:51:23.188Z","type":"quit"}
{"nick":"AvianFlu","date":"2013-11-01T15:51:47.751Z","type":"join"}
{"nick":"shama","date":"2013-11-01T15:54:37.760Z","type":"join"}
{"nick":"calvinfo","date":"2013-11-01T15:58:35.835Z","type":"join"}
{"nick":"jcrugzz","reason":"Read error: Connection reset by peer","date":"2013-11-01T16:03:02.504Z","type":"quit"}
{"nick":"jcrugzz","date":"2013-11-01T16:04:54.197Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 260 seconds","date":"2013-11-01T16:09:59.904Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 40]","date":"2013-11-01T16:16:45.235Z","type":"message"}
{"nick":"jergason","date":"2013-11-01T16:16:59.773Z","type":"join"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2013-11-01T16:29:15.755Z","type":"quit"}
{"nick":"st_luke","date":"2013-11-01T16:30:21.497Z","type":"join"}
{"nick":"jcrugzz","reason":"Ping timeout: 260 seconds","date":"2013-11-01T16:34:12.073Z","type":"quit"}
{"nick":"jcrugzz","date":"2013-11-01T16:34:28.399Z","type":"join"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2013-11-01T16:37:15.689Z","type":"quit"}
{"nick":"kenperkins","date":"2013-11-01T16:38:42.658Z","type":"join"}
{"nick":"jiangplus","reason":"Quit: leaving","date":"2013-11-01T16:44:00.436Z","type":"quit"}
{"nick":"kevino80","date":"2013-11-01T16:48:06.943Z","type":"join"}
{"nick":"brianloveswords","reason":"Excess Flood","date":"2013-11-01T16:54:32.855Z","type":"quit"}
{"nick":"brianloveswords","date":"2013-11-01T16:55:57.432Z","type":"join"}
{"nick":"ralphtheninja","date":"2013-11-01T16:57:28.714Z","type":"join"}
{"nick":"DTrejo","date":"2013-11-01T16:58:57.718Z","type":"join"}
{"nick":"calvinfo","date":"2013-11-01T17:01:28.874Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 1, free: 25]","date":"2013-11-01T17:16:45.166Z","type":"message"}
{"nick":"mikolalysenko","date":"2013-11-01T17:16:59.101Z","type":"join"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-11-01T17:18:05.492Z","type":"quit"}
{"nick":"Domenic_","message":"creationix: so yeah, streams work all day tomorrow and Sunday.","date":"2013-11-01T17:20:33.308Z","type":"message"}
{"nick":"Domenic_","message":"I could almost certainly use some help, cuz there's a lot to do","date":"2013-11-01T17:20:49.028Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 240 seconds","date":"2013-11-01T17:21:03.183Z","type":"quit"}
{"nick":"Domenic_","message":"Your experience implementing js-git on top of your streams is pretty valuable","date":"2013-11-01T17:21:20.407Z","type":"message"}
{"nick":"Domenic_","message":"Although it needs to be tempered by a desire for performance, which might mean sacrificing on simplicity or purity.","date":"2013-11-01T17:21:47.517Z","type":"message"}
{"nick":"Domenic_","message":"But I am definitely interested in doing as much via layering of small primitives as is possible","date":"2013-11-01T17:22:26.282Z","type":"message"}
{"nick":"creationix","message":"yay, I have irc again.  It's been a while","date":"2013-11-01T17:23:05.015Z","type":"message"}
{"nick":"thlorenz","message":"Domenic_: maybe there could be a more low level API to allow optimizing for performance and a higher level one for normal use?","date":"2013-11-01T17:23:08.803Z","type":"message"}
{"nick":"creationix","message":"ITC on chromebooks generally sucks","date":"2013-11-01T17:23:09.586Z","type":"message"}
{"nick":"creationix","message":"*IRC","date":"2013-11-01T17:23:12.545Z","type":"message"}
{"nick":"Domenic_","message":"My current thinking is that promise-returning read() is not the lowest level; a sync read() plus a promise-returning wait() [equivalent to node's on('readable')] seems lowest-level","date":"2013-11-01T17:23:26.409Z","type":"message"}
{"nick":"creationix","message":"Domenic_, did you see my latest proposal","date":"2013-11-01T17:23:49.166Z","type":"message"}
{"nick":"creationix","message":"it's somewhat like that","date":"2013-11-01T17:23:49.383Z","type":"message"}
{"nick":"Domenic_","message":"actually I was thinking sync pop() as the name, then read() could be promise-returning","date":"2013-11-01T17:24:04.025Z","type":"message"}
{"nick":"Domenic_","message":"creationix: I'm not sure I did, link please :)","date":"2013-11-01T17:24:12.615Z","type":"message"}
{"nick":"creationix","message":"https://gist.github.com/creationix/6587060","date":"2013-11-01T17:24:15.303Z","type":"message"}
{"nick":"creationix","message":"dominictarr seems to like it.  Also he's started a new thread somewhere.  Let me find it.","date":"2013-11-01T17:24:34.993Z","type":"message"}
{"nick":"thlorenz","message":"Domenic_: pop() would give away implementation details (i.e. its an Array Buffer)","date":"2013-11-01T17:24:41.411Z","type":"message"}
{"nick":"thlorenz","message":"read() as low level and maybe next() as higher level?","date":"2013-11-01T17:25:21.963Z","type":"message"}
{"nick":"Domenic_","message":"thlorenz: well it's supposed to invoke array feels. it pops off the internal buffer, and the think popped is no longer in the internal buffer","date":"2013-11-01T17:25:28.126Z","type":"message"}
{"nick":"Domenic_","message":"thlorenz: that's nice too","date":"2013-11-01T17:25:32.506Z","type":"message"}
{"nick":"Domenic_","message":"although actually I guess I mean shift() not pop","date":"2013-11-01T17:26:00.021Z","type":"message"}
{"nick":"AvianFlu","date":"2013-11-01T17:26:00.643Z","type":"join"}
{"nick":"Domenic_","message":"whatevs, names not horribly important","date":"2013-11-01T17:26:10.003Z","type":"message"}
{"nick":"creationix","message":"basically my interface has a .pull() method that tells the underlying stream I'm ready for data, and then it later calls my .ondata handler","date":"2013-11-01T17:26:10.431Z","type":"message"}
{"nick":"Domenic_","message":"creationix: pull() returns buffer contents?","date":"2013-11-01T17:26:37.302Z","type":"message"}
{"nick":"creationix","message":"no, pull doesn't return anything","date":"2013-11-01T17:26:48.141Z","type":"message"}
{"nick":"Domenic_","message":"I keep seeing \"return input.pull()\" :P","date":"2013-11-01T17:26:56.796Z","type":"message"}
{"nick":"creationix","message":"except maybe return true if it dispatched the data sync","date":"2013-11-01T17:26:57.835Z","type":"message"}
{"nick":"creationix","message":"oh, I tend to tail call","date":"2013-11-01T17:27:05.882Z","type":"message"}
{"nick":"creationix","message":"in hopes tha VMs optimize it","date":"2013-11-01T17:27:13.343Z","type":"message"}
{"nick":"Domenic_","message":"so ondata is zalgo-ish?","date":"2013-11-01T17:27:21.796Z","type":"message"}
{"nick":"creationix","message":"zalgo?","date":"2013-11-01T17:27:31.435Z","type":"message"}
{"nick":"Domenic_","message":"sometimes sync, sometimes async","date":"2013-11-01T17:27:36.619Z","type":"message"}
{"nick":"creationix","message":"I prefer that in my APIs","date":"2013-11-01T17:27:49.556Z","type":"message"}
{"nick":"creationix","message":"it's simpler to implement","date":"2013-11-01T17:27:54.631Z","type":"message"}
{"nick":"creationix","message":"(though harder to consume)","date":"2013-11-01T17:27:58.904Z","type":"message"}
{"nick":"Domenic_","message":"oh, yeah, that's not really ok :-/","date":"2013-11-01T17:28:00.702Z","type":"message"}
{"nick":"creationix","message":"but for a W3C spec, I'm find with all data events being on their own tick","date":"2013-11-01T17:28:19.849Z","type":"message"}
{"nick":"creationix","message":"makes usage a lot simpler","date":"2013-11-01T17:28:25.975Z","type":"message"}
{"nick":"Domenic_","message":"the inherent conflict, as laid out by isaacs, is that read(cb) is an extra nextTick if data is already available, but much simpler. so some kind of readCurrentBufferSync() + tellMeWhenMoreDataIsHereAlwaysAsync(cb) is what you want","date":"2013-11-01T17:28:39.904Z","type":"message"}
{"nick":"Domenic_","message":"with the idea that you only ever call tellMeWhen... once readCurrentBufferSync() returns undefined or something","date":"2013-11-01T17:28:57.695Z","type":"message"}
{"nick":"creationix","message":"the streams2 / go / other platforms way right?","date":"2013-11-01T17:29:03.731Z","type":"message"}
{"nick":"Domenic_","message":"yeah pretty much","date":"2013-11-01T17:29:11.691Z","type":"message"}
{"nick":"creationix","message":"right, that's the idea with .pull() returning true if it was sync","date":"2013-11-01T17:29:21.844Z","type":"message"}
{"nick":"creationix","message":"so you can do while (stream.pull());","date":"2013-11-01T17:29:36.682Z","type":"message"}
{"nick":"Domenic_","message":"tbh, also, moving away from promise-returning read() helps us differentiate from the existing W3C streams proposal (the one with no backpreessure)","date":"2013-11-01T17:29:47.609Z","type":"message"}
{"nick":"creationix","message":"so in the streams1 writable API, there was the write return value and the \"drain\" event","date":"2013-11-01T17:30:47.644Z","type":"message"}
{"nick":"creationix","message":"we could do the same for readable","date":"2013-11-01T17:30:47.859Z","type":"message"}
{"nick":"Domenic_","message":"creationix: if you want to open an issue explaining your proposal (with words :P), especially how it compares to read(cb) and readCurrentBufferSync(), that would be helpful. It sounds slightly different, and there's probably something to learn there.","date":"2013-11-01T17:30:50.594Z","type":"message"}
{"nick":"creationix","message":"read would return undefined if there was no data","date":"2013-11-01T17:30:51.451Z","type":"message"}
{"nick":"creationix","message":"but otherwise return the data sync","date":"2013-11-01T17:30:51.669Z","type":"message"}
{"nick":"creationix","message":"and have \"readable\" event","date":"2013-11-01T17:30:52.595Z","type":"message"}
{"nick":"creationix","message":"(which actually is basically what streams2 does right)","date":"2013-11-01T17:30:54.457Z","type":"message"}
{"nick":"Domenic_","message":"yeah that's the idea i think","date":"2013-11-01T17:31:03.186Z","type":"message"}
{"nick":"creationix","message":"My main goal is to keep confusion out of the bare API","date":"2013-11-01T17:31:27.528Z","type":"message"}
{"nick":"Domenic_","message":"although promises (or cbs) instead of events makes more sense since you really want a one-time notification to start re-reading","date":"2013-11-01T17:31:30.506Z","type":"message"}
{"nick":"creationix","message":"but still have the nessecary primitives","date":"2013-11-01T17:31:34.855Z","type":"message"}
{"nick":"creationix","message":"Domenic_, so in practice, there are cases where callback/promise based read streams are natural and other cases where event handlers are naturan","date":"2013-11-01T17:32:08.175Z","type":"message"}
{"nick":"creationix","message":"*natural","date":"2013-11-01T17:32:10.250Z","type":"message"}
{"nick":"Domenic_","message":"right, yeah, passive data listening being the obvious event case","date":"2013-11-01T17:32:22.494Z","type":"message"}
{"nick":"creationix","message":"hence why node now supports both types","date":"2013-11-01T17:32:28.392Z","type":"message"}
{"nick":"creationix","message":"and not all streams need backpressure","date":"2013-11-01T17:32:49.116Z","type":"message"}
{"nick":"Domenic_","message":"isaacs is pretty insistent (as is most of node core) that making EEs part of the stream abstraction was a mistake","date":"2013-11-01T17:32:51.773Z","type":"message"}
{"nick":"creationix","message":"agreed here","date":"2013-11-01T17:33:00.998Z","type":"message"}
{"nick":"ogd","message":"for perf reasons yes","date":"2013-11-01T17:33:05.751Z","type":"message"}
{"nick":"creationix","message":"though I feel the same way about promises","date":"2013-11-01T17:33:14.732Z","type":"message"}
{"nick":"Domenic_","message":"well if you don't want backpressure I think you'll want something simpler, e.g. a generator of promises or something I think.","date":"2013-11-01T17:33:22.685Z","type":"message"}
{"nick":"creationix","message":"but is promises were a fast primitive in the language itself, that may be different","date":"2013-11-01T17:33:27.954Z","type":"message"}
{"nick":"Domenic_","message":"right, that's the decider, is would they be fast enough. i am hopeful.","date":"2013-11-01T17:33:44.708Z","type":"message"}
{"nick":"creationix","message":"can we use generators in this proposal?","date":"2013-11-01T17:33:54.989Z","type":"message"}
{"nick":"Domenic_","message":"it would be nice to be able to do `while (data = yield stream.read())` though","date":"2013-11-01T17:34:01.493Z","type":"message"}
{"nick":"Domenic_","message":"yes definitely","date":"2013-11-01T17:34:05.509Z","type":"message"}
{"nick":"Domenic_","message":"but it is harder to make use of them than you'd think","date":"2013-11-01T17:34:13.167Z","type":"message"}
{"nick":"Domenic_","message":"because once a generator is \"empty\" it can never become un-empty","date":"2013-11-01T17:34:22.185Z","type":"message"}
{"nick":"creationix","message":"that's the interface I've been pushing for years with lua coroutines and js generators","date":"2013-11-01T17:34:23.933Z","type":"message"}
{"nick":"thlorenz","message":"Domenic_: but now it's a push again","date":"2013-11-01T17:34:25.605Z","type":"message"}
{"nick":"Domenic_","message":"thlorenz: ???","date":"2013-11-01T17:34:35.582Z","type":"message"}
{"nick":"thlorenz","message":"i.e. it'll keep yielding (pushing) values","date":"2013-11-01T17:34:38.312Z","type":"message"}
{"nick":"Domenic_","message":"so e.g. you can't start out with an empty stream that starts filling with data","date":"2013-11-01T17:34:41.599Z","type":"message"}
{"nick":"thlorenz","message":"I'd keep read simple","date":"2013-11-01T17:34:56.673Z","type":"message"}
{"nick":"Domenic_","message":"thlorenz: you have a very weird conception of \"pull\" vs. \"push\", but yeah, I remember from yesterday.","date":"2013-11-01T17:35:11.783Z","type":"message"}
{"nick":"thlorenz","message":"it should by sync and have no (promise, callback, yiedld, future) whatevs API","date":"2013-11-01T17:35:25.525Z","type":"message"}
{"nick":"Domenic_","message":"thlorenz: to me pull vs. push means \"data is buffered until you ask\" vs \"data is thrown at you and you might miss it\"","date":"2013-11-01T17:35:29.482Z","type":"message"}
{"nick":"thlorenz","message":"that's not how it works","date":"2013-11-01T17:35:45.711Z","type":"message"}
{"nick":"Domenic_","message":"thlorenz: well it needs to be async at some level, so you know when new data is available to read synchronously","date":"2013-11-01T17:35:54.888Z","type":"message"}
{"nick":"creationix","message":"Domenic_, not sure I understand the problem?","date":"2013-11-01T17:35:57.767Z","type":"message"}
{"nick":"thlorenz","message":"push buffers data for you if you don't handle it fast enough","date":"2013-11-01T17:35:59.725Z","type":"message"}
{"nick":"rowbit","message":"substack, pkrumins: These encoders are STILL down: 50.57.103.135(free2)","date":"2013-11-01T17:36:24.292Z","type":"message"}
{"nick":"creationix","message":"Domenic_, push can work just fine as long as the stream starts paused","date":"2013-11-01T17:36:27.377Z","type":"message"}
{"nick":"thlorenz","message":"Domenic_:  yes, something to replace on('readable'","date":"2013-11-01T17:36:28.192Z","type":"message"}
{"nick":"creationix","message":"and it stops emitting data the instant you tell it to pause","date":"2013-11-01T17:36:31.443Z","type":"message"}
{"nick":"Domenic_","message":"creationix: well a naive model of streams is a generator of promises. but if you ever call .next() before the previous promise is fulfilled, you kill the generator and can't recover.","date":"2013-11-01T17:36:46.883Z","type":"message"}
{"nick":"creationix","message":"Domenic_, then don't do that?","date":"2013-11-01T17:37:03.701Z","type":"message"}
{"nick":"creationix","message":"in mine I throw an error if that's done","date":"2013-11-01T17:37:12.253Z","type":"message"}
{"nick":"creationix","message":"I only allow one read at a time","date":"2013-11-01T17:37:19.347Z","type":"message"}
{"nick":"Domenic_","message":"creationix: i mean yeah that is part of it. feels fragile though. why use generators at all in that case?","date":"2013-11-01T17:37:36.547Z","type":"message"}
{"nick":"creationix","message":"right, I don't use generators *in* the stream","date":"2013-11-01T17:37:47.867Z","type":"message"}
{"nick":"Domenic_","message":"you can't consume with for of","date":"2013-11-01T17:37:48.886Z","type":"message"}
{"nick":"creationix","message":"I just consume the stream with generators","date":"2013-11-01T17:37:57.011Z","type":"message"}
{"nick":"Domenic_","message":"what does that look like in code","date":"2013-11-01T17:38:04.675Z","type":"message"}
{"nick":"creationix","message":"the stream just returns promises from the read","date":"2013-11-01T17:38:09.123Z","type":"message"}
{"nick":"creationix","message":"while (data = yield stream.read());","date":"2013-11-01T17:38:27.627Z","type":"message"}
{"nick":"Domenic_","message":"sure ok","date":"2013-11-01T17:38:32.172Z","type":"message"}
{"nick":"creationix","message":"and yield goes to gen-run or something that resolves the continuable/promise","date":"2013-11-01T17:38:44.736Z","type":"message"}
{"nick":"Domenic_","message":"i misinterpreted what you meant by \"use generators\" I guess.","date":"2013-11-01T17:38:51.919Z","type":"message"}
{"nick":"substack","message":"Domenic_: events should still be part of the stream api","date":"2013-11-01T17:38:53.798Z","type":"message"}
{"nick":"thlorenz","message":"Domenic_: creationix I stick to my stance that read should never delay - mixing these concepts make things unnec complex","date":"2013-11-01T17:39:05.945Z","type":"message"}
{"nick":"Domenic_","message":"you seem to have meant \"design an API so that it is nice to use when consumers have generators\"","date":"2013-11-01T17:39:10.981Z","type":"message"}
{"nick":"creationix","message":"all of js-git can be used with node style callbacks or continuables","date":"2013-11-01T17:39:15.337Z","type":"message"}
{"nick":"Domenic_","message":"substack: interesting, why.","date":"2013-11-01T17:39:18.492Z","type":"message"}
{"nick":"substack","message":"if I'm consuming a stream I want to know when it's done giving me data","date":"2013-11-01T17:39:20.014Z","type":"message"}
{"nick":"creationix","message":"so you can use generators to consume the streams if you want","date":"2013-11-01T17:39:24.815Z","type":"message"}
{"nick":"substack","message":"this is one thing I really dislike about the current streams","date":"2013-11-01T17:39:30.586Z","type":"message"}
{"nick":"substack","message":"even if you're consuming a stream, you have no way from outside to know when it's done","date":"2013-11-01T17:39:45.360Z","type":"message"}
{"nick":"substack","message":"and that's such a common use-case","date":"2013-11-01T17:39:52.660Z","type":"message"}
{"nick":"Domenic_","message":"substack: sample use case?","date":"2013-11-01T17:39:54.478Z","type":"message"}
{"nick":"creationix","message":"substack, that's what the end event is for right?","date":"2013-11-01T17:40:07.280Z","type":"message"}
{"nick":"substack","message":"a.pipe(b); b.on('end', function () {}) only works if b is in flow mode","date":"2013-11-01T17:40:09.360Z","type":"message"}
{"nick":"substack","message":"er sorry","date":"2013-11-01T17:40:12.424Z","type":"message"}
{"nick":"substack","message":"a.pipe(b); a.on('end', function () {}) only works if a is in flow mode","date":"2013-11-01T17:40:22.620Z","type":"message"}
{"nick":"creationix","message":"oh, pipe right","date":"2013-11-01T17:40:24.009Z","type":"message"}
{"nick":"substack","message":"creationix: only in flow mode","date":"2013-11-01T17:40:32.948Z","type":"message"}
{"nick":"Domenic_","message":"hmm","date":"2013-11-01T17:40:33.900Z","type":"message"}
{"nick":"creationix","message":"when I design stream interfaces I make them simple enough that you don't need pipe","date":"2013-11-01T17:40:43.768Z","type":"message"}
{"nick":"Domenic_","message":"why do you care when a has no more data","date":"2013-11-01T17:40:47.090Z","type":"message"}
{"nick":"substack","message":"having good consistent semantics for \"hangup\" kinds of events would also be really good","date":"2013-11-01T17:40:52.423Z","type":"message"}
{"nick":"substack","message":"for when the stream gets destroyed","date":"2013-11-01T17:40:59.870Z","type":"message"}
{"nick":"substack","message":"to unregister listeners","date":"2013-11-01T17:41:04.699Z","type":"message"}
{"nick":"creationix","message":"js-git streams are readable only and treated like primitive values","date":"2013-11-01T17:41:17.830Z","type":"message"}
{"nick":"substack","message":"Domenic_: because often I want to do something like this:","date":"2013-11-01T17:41:23.316Z","type":"message"}
{"nick":"creationix","message":"you write to things by handing a stream to a sink","date":"2013-11-01T17:41:27.407Z","type":"message"}
{"nick":"jxson","date":"2013-11-01T17:41:30.865Z","type":"join"}
{"nick":"substack","message":"a.pipe(fs.createWriteStream('output.txt')); a.on('end', function () { do the next thing... })","date":"2013-11-01T17:41:40.084Z","type":"message"}
{"nick":"Domenic_","message":"substack: my current plan for that is that the stream constructor gets passed a function to call when the stream is aborted and/or done.","date":"2013-11-01T17:41:51.155Z","type":"message"}
{"nick":"creationix","message":"substack, with js-git style APIs, you do output.sink(input, callback)","date":"2013-11-01T17:42:04.570Z","type":"message"}
{"nick":"creationix","message":"where the callback gets called for error or end of stream","date":"2013-11-01T17:42:14.207Z","type":"message"}
{"nick":"substack","message":"Domenic_: but if I didn't create the stream myself, that doesn't help","date":"2013-11-01T17:42:24.271Z","type":"message"}
{"nick":"Domenic_","message":"substack: yeah.","date":"2013-11-01T17:42:32.887Z","type":"message"}
{"nick":"substack","message":"if I got `a` from some existing function for example","date":"2013-11-01T17:42:35.669Z","type":"message"}
{"nick":"Domenic_","message":"one interface that other languages have I think is a.pipe(b).then(callThisWhenPipingIsOver, callThisIfPipingFails)","date":"2013-11-01T17:42:58.104Z","type":"message"}
{"nick":"substack","message":"Domenic_: what about having a 'close' event that ALWAYS fires when a stream is \"done\"","date":"2013-11-01T17:43:21.452Z","type":"message"}
{"nick":"Domenic_","message":"this output.sink(input) vs. input.pipe(output) thing is curious.","date":"2013-11-01T17:43:24.271Z","type":"message"}
{"nick":"substack","message":"whether done by being destroyed, ended, or errors","date":"2013-11-01T17:43:31.703Z","type":"message"}
{"nick":"Domenic_","message":"substack: the problem is that then streams are EEs and isaacs will be sad.","date":"2013-11-01T17:43:33.783Z","type":"message"}
{"nick":"substack","message":"I think isaacs's \"event emitters are always bad in streams\" is too broad of a prohibition","date":"2013-11-01T17:44:17.468Z","type":"message"}
{"nick":"substack","message":"event emitters are really good for hooking up state changes that are immediate","date":"2013-11-01T17:44:33.186Z","type":"message"}
{"nick":"substack","message":"'data' and 'end' are not immediate was the problem","date":"2013-11-01T17:44:43.482Z","type":"message"}
{"nick":"Domenic_","message":"I am tempted to throw more promises at the problem (stream.end.then(noErrors, thereWereErrors)). That is probably slightly better. But kind of silly also.","date":"2013-11-01T17:44:56.664Z","type":"message"}
{"nick":"substack","message":"but other kinds of events like disconnects and 'close' are","date":"2013-11-01T17:45:01.032Z","type":"message"}
{"nick":"Domenic_","message":"substack: what do you mean by \"immediate\"","date":"2013-11-01T17:45:06.994Z","type":"message"}
{"nick":"substack","message":"events fire immediately","date":"2013-11-01T17:45:26.467Z","type":"message"}
{"nick":"Domenic_","message":"stream.end promise is pretty useful (eg. you can subscribe after the stream is already over) but still feels weird...","date":"2013-11-01T17:45:44.067Z","type":"message"}
{"nick":"substack","message":"but data and EOF fire when you read, which is not immediate","date":"2013-11-01T17:45:45.003Z","type":"message"}
{"nick":"creationix","message":"substack, I'm not sure the stream interface should worry about things like close","date":"2013-11-01T17:45:45.332Z","type":"message"}
{"nick":"creationix","message":"node conflates too much imho","date":"2013-11-01T17:45:45.544Z","type":"message"}
{"nick":"creationix","message":"streams should care about \"data\", \"end\", \"error\", backpressure, reading, writing","date":"2013-11-01T17:45:52.314Z","type":"message"}
{"nick":"substack","message":"Domenic_: will I have to use promises to get at these events :/","date":"2013-11-01T17:46:04.140Z","type":"message"}
{"nick":"substack","message":"because if so the first thing I am going to do is wrap everything in an event emitter so I don't have to look at them ever","date":"2013-11-01T17:46:25.103Z","type":"message"}
{"nick":"Domenic_","message":"substack: one-time events which you often want to subscribe to after they've already fired should generally be promises (e.g. document.ready), so yeah.","date":"2013-11-01T17:46:30.978Z","type":"message"}
{"nick":"Domenic_","message":"substack: that's a shame, feels close-minded of you.","date":"2013-11-01T17:46:42.760Z","type":"message"}
{"nick":"Domenic_","message":"substack: but if something has real EE semantics then of course it'll be an event emitter","date":"2013-11-01T17:46:51.958Z","type":"message"}
{"nick":"creationix","message":"substack, just imagine he says callback when you hear promise","date":"2013-11-01T17:47:07.773Z","type":"message"}
{"nick":"creationix","message":"same behavior","date":"2013-11-01T17:47:08.760Z","type":"message"}
{"nick":"Domenic_","message":"e.g. if it can occur more than once","date":"2013-11-01T17:47:09.894Z","type":"message"}
{"nick":"Domenic_","message":"creationix: yes thanks :)","date":"2013-11-01T17:47:15.795Z","type":"message"}
{"nick":"substack","message":"promises use callbacks","date":"2013-11-01T17:47:26.836Z","type":"message"}
{"nick":"substack","message":"promises are like forcing everybody to use your wonky flow control library","date":"2013-11-01T17:47:41.276Z","type":"message"}
{"nick":"substack","message":"instead of the base thing that every async abstraction has in common","date":"2013-11-01T17:47:56.014Z","type":"message"}
{"nick":"Domenic_","message":"they're like forcing everyone to use weird higher-level primitives like \"functions\" when everyone has this base abstraction of gotos and labels in common.","date":"2013-11-01T17:48:05.484Z","type":"message"}
{"nick":"Domenic_","message":"but let's please set aside our differences on this issue ... it's pretty tangential.","date":"2013-11-01T17:48:26.282Z","type":"message"}
{"nick":"Domenic_","message":"the sematnics are what's important: one-time vs. recurring.","date":"2013-11-01T17:48:36.158Z","type":"message"}
{"nick":"creationix","message":"like I said, don't focus on callback vs promise vs continuable","date":"2013-11-01T17:48:46.145Z","type":"message"}
{"nick":"creationix","message":"they are all the same thing from a design point of view","date":"2013-11-01T17:48:54.322Z","type":"message"}
{"nick":"creationix","message":"I obviously prefer continuables, but whatever","date":"2013-11-01T17:49:04.990Z","type":"message"}
{"nick":"st_luke","date":"2013-11-01T17:49:06.408Z","type":"quit"}
{"nick":"st_luke","date":"2013-11-01T17:49:17.783Z","type":"join"}
{"nick":"substack","message":"streams should just have a way of firing some code when they are done being consumed","date":"2013-11-01T17:49:47.002Z","type":"message"}
{"nick":"substack","message":"because then you can pipe 2 streams together without having had to create them yourself","date":"2013-11-01T17:50:08.135Z","type":"message"}
{"nick":"Domenic_","message":"+1, that is a big takeaway","date":"2013-11-01T17:50:11.956Z","type":"message"}
{"nick":"substack","message":"it's very often to pipe 2 things together and then to want to do something else when that finishes","date":"2013-11-01T17:50:33.064Z","type":"message"}
{"nick":"creationix","message":"substack, so your goal is to know when each piece of a stream chain is done individually?","date":"2013-11-01T17:50:38.564Z","type":"message"}
{"nick":"substack","message":"whatever isaacs says about EEs always being bad","date":"2013-11-01T17:50:44.707Z","type":"message"}
{"nick":"Domenic_","message":"substack: what do you think of a.on('done') vs. a.pipe(b, function (err) { ... })","date":"2013-11-01T17:50:45.257Z","type":"message"}
{"nick":"substack","message":"Domenic_: I think 'done' is cleaner but both would work","date":"2013-11-01T17:51:09.073Z","type":"message"}
{"nick":"substack","message":"the cb arg might get in the way of other arguments to .pipe() like opts","date":"2013-11-01T17:51:43.396Z","type":"message"}
{"nick":"substack","message":"like whatever { end: false } is in the w3 streams","date":"2013-11-01T17:51:56.237Z","type":"message"}
{"nick":"Domenic_","message":"ah wow i totally forgot that w3 streams missed { end: false }","date":"2013-11-01T17:52:40.552Z","type":"message"}
{"nick":"Domenic_","message":"that's an important one","date":"2013-11-01T17:52:42.662Z","type":"message"}
{"nick":"Domenic_","message":"should have busted their balls for that","date":"2013-11-01T17:52:47.064Z","type":"message"}
{"nick":"chrisdickinson","message":"creationix: do your sinks still return continuables?","date":"2013-11-01T17:52:47.285Z","type":"message"}
{"nick":"Domenic_","message":"BTW everyone: W3C streams = current proposal from those two guys = bad. WHATWG streams = my (our) proposal = good","date":"2013-11-01T17:53:13.764Z","type":"message"}
{"nick":"chrisdickinson","message":"(would it be possible to phrase \"end\" as \"output.sink(input).then(…)\" in promise-land?)","date":"2013-11-01T17:53:16.254Z","type":"message"}
{"nick":"Domenic_","message":"chrisdickinson: well the promise version would be equivalent to the function (err) { ... } version I did above","date":"2013-11-01T17:53:37.861Z","type":"message"}
{"nick":"creationix","message":"chrisdickinson, right","date":"2013-11-01T17:53:39.773Z","type":"message"}
{"nick":"Domenic_","message":"but that's different semantics than the on('done')","date":"2013-11-01T17:53:57.088Z","type":"message"}
{"nick":"creationix","message":"WHATWG vs W3C, fight!","date":"2013-11-01T17:54:44.132Z","type":"message"}
{"nick":"Domenic_","message":"(WHATWG = open to anyone, works on real \"living standards\", CC0, mostly GitHub these days; W3C = pay to play, DRM, copyright, copies and pastes WHATWG standards into their repos and then shoves them through this crazy multi-year editor's draft -> working draft -> etc. -> recommendation process.)","date":"2013-11-01T17:55:42.845Z","type":"message"}
{"nick":"chrisdickinson","message":"wouldn't returning a promise give the writable streams / sinks / destinations a single point at which to say \"I'm done\", and \"I had an error\" or \"I was successful\"?","date":"2013-11-01T17:56:13.461Z","type":"message"}
{"nick":"Domenic_","message":"chrisdickinson: not sure, what do you mean more concretely?","date":"2013-11-01T17:56:31.492Z","type":"message"}
{"nick":"creationix","message":"chrisdickinson, that's what I use the continuables","date":"2013-11-01T17:56:33.234Z","type":"message"}
{"nick":"creationix","message":"continuable == promise","date":"2013-11-01T17:56:41.083Z","type":"message"}
{"nick":"chrisdickinson","message":"creationix: right","date":"2013-11-01T17:56:43.469Z","type":"message"}
{"nick":"creationix","message":"I really, *really* like the idea of treating a stream like a primitive","date":"2013-11-01T17:57:14.917Z","type":"message"}
{"nick":"chrisdickinson","message":"was seeing if that would be an amenable way to solve the \"tell me when this stream is done\" problem (vs. making it an eventemitter)","date":"2013-11-01T17:57:20.479Z","type":"message"}
{"nick":"creationix","message":"transforms accept streams and return new streams","date":"2013-11-01T17:57:23.099Z","type":"message"}
{"nick":"creationix","message":"sinks accept streams and return promise for \"done\" or \"error\"","date":"2013-11-01T17:57:38.480Z","type":"message"}
{"nick":"chrisdickinson","message":"and was suggesting promises over continuables since that's the way things seem to be moving in the browser.","date":"2013-11-01T17:57:40.354Z","type":"message"}
{"nick":"chrisdickinson","message":"ok, cool","date":"2013-11-01T17:57:48.130Z","type":"message"}
{"nick":"Domenic_","message":"creationix: Raynos: why do you guys find the idea of sink.accept(source) better than source.pipe(sink)","date":"2013-11-01T17:57:59.046Z","type":"message"}
{"nick":"creationix","message":"Domenic_, because it's less code","date":"2013-11-01T17:58:17.948Z","type":"message"}
{"nick":"creationix","message":"lesss code == less complexity generally","date":"2013-11-01T17:58:26.470Z","type":"message"}
{"nick":"Domenic_","message":"creationix: for who","date":"2013-11-01T17:58:28.439Z","type":"message"}
{"nick":"creationix","message":"everyone","date":"2013-11-01T17:58:41.523Z","type":"message"}
{"nick":"creationix","message":"dest.sink(source) vs source.pipe(sink) is the same code","date":"2013-11-01T17:58:59.302Z","type":"message"}
{"nick":"Domenic_","message":"creationix: be more specific then. how?","date":"2013-11-01T17:59:00.046Z","type":"message"}
{"nick":"creationix","message":"but to implement it, only writable things need to implement sink","date":"2013-11-01T17:59:14.508Z","type":"message"}
{"nick":"creationix","message":"most the links between a source and a dest are transforms","date":"2013-11-01T17:59:30.479Z","type":"message"}
{"nick":"creationix","message":"and they have a different interface","date":"2013-11-01T17:59:35.754Z","type":"message"}
{"nick":"creationix","message":"transform(stream) -> stream","date":"2013-11-01T17:59:41.653Z","type":"message"}
{"nick":"creationix","message":"where sink is sink(stream) -> promise<end/done>","date":"2013-11-01T18:00:01.231Z","type":"message"}
{"nick":"Domenic_","message":"i find node's .pipe really ergonomic","date":"2013-11-01T18:00:04.954Z","type":"message"}
{"nick":"chrisdickinson","message":"anecdotally, using simple-streams (the spec that preceded what creationix linked) was easy to follow, easy to write new transformation streams, and made it easy to encapsulate logic","date":"2013-11-01T18:00:08.570Z","type":"message"}
{"nick":"creationix","message":"all of js-git is still simple-streams for reference","date":"2013-11-01T18:00:50.092Z","type":"message"}
{"nick":"creationix","message":"the new idea is still just an idea","date":"2013-11-01T18:00:50.312Z","type":"message"}
{"nick":"creationix","message":"to try to solve some of the pain points in implementing simple-streams","date":"2013-11-01T18:00:53.291Z","type":"message"}
{"nick":"creationix","message":"in particular error reporting","date":"2013-11-01T18:00:55.488Z","type":"message"}
{"nick":"Domenic_","message":"substack: you love pipe, how do you react to all this talk of dest.sink(source) intead of source.pipe(dest), and gzipTransform(source) vs. source.pipe(new GzipTransform)","date":"2013-11-01T18:01:02.848Z","type":"message"}
{"nick":"creationix","message":"I hate it that I have to wait till the next .read() call to emit an error","date":"2013-11-01T18:01:06.047Z","type":"message"}
{"nick":"Domenic_","message":"creationix: how do errors get emitted in the new idea?","date":"2013-11-01T18:01:27.434Z","type":"message"}
{"nick":"creationix","message":"I agree that source.pipe(dest) is more natural","date":"2013-11-01T18:01:28.717Z","type":"message"}
{"nick":"rxgx","date":"2013-11-01T18:01:39.144Z","type":"join"}
{"nick":"creationix","message":"in the new idea, part of the stream interface is an error event","date":"2013-11-01T18:01:41.395Z","type":"message"}
{"nick":"chrisdickinson","message":"what I found I liked best about it was that it was simple enough to write a stream sans any supporting infrastructure -- vs. node streams, which always involve subclassing or using another library to create a base stream for you.","date":"2013-11-01T18:01:43.454Z","type":"message"}
{"nick":"Domenic_","message":"creationix: would love a promise explanation of the new idea, code is not easy to figure out which parts are profound vs. which are just details.","date":"2013-11-01T18:01:47.259Z","type":"message"}
{"nick":"Domenic_","message":"s/promise/prose","date":"2013-11-01T18:01:54.263Z","type":"message"}
{"nick":"Domenic_","message":"(O_o)","date":"2013-11-01T18:01:58.262Z","type":"message"}
{"nick":"creationix","message":"lol","date":"2013-11-01T18:02:02.974Z","type":"message"}
{"nick":"creationix","message":"chrisdickinson, yes, that was my main goal!","date":"2013-11-01T18:02:21.837Z","type":"message"}
{"nick":"Domenic_","message":"hmm yeah","date":"2013-11-01T18:02:27.436Z","type":"message"}
{"nick":"creationix","message":"simple-streams don't need a library to be usable","date":"2013-11-01T18:02:29.940Z","type":"message"}
{"nick":"Domenic_","message":"everyone uses through anyway","date":"2013-11-01T18:02:35.268Z","type":"message"}
{"nick":"creationix","message":"you just create objects that conform to some simple interface","date":"2013-11-01T18:02:40.425Z","type":"message"}
{"nick":"creationix","message":"I don't","date":"2013-11-01T18:02:46.952Z","type":"message"}
{"nick":"creationix","message":":P","date":"2013-11-01T18:02:48.831Z","type":"message"}
{"nick":"creationix","message":"also remember I'm not node-centric with js-git","date":"2013-11-01T18:03:11.442Z","type":"message"}
{"nick":"creationix","message":"most my platforms are non-node actually","date":"2013-11-01T18:03:15.860Z","type":"message"}
{"nick":"Domenic_","message":"the constructor pattern in whatwg/streams seems to help some, i.e. you will have to subclass less and just use the constructor with different onRead functions instead.","date":"2013-11-01T18:03:26.219Z","type":"message"}
{"nick":"thlorenz_","date":"2013-11-01T18:03:36.428Z","type":"join"}
{"nick":"creationix","message":"Domenic_, ok, so lets start with the bare abstract goals","date":"2013-11-01T18:04:38.209Z","type":"message"}
{"nick":"creationix","message":"1. we want a data stream with back-pressure","date":"2013-11-01T18:04:38.428Z","type":"message"}
{"nick":"creationix","message":"2. we want a way to signal the end of the stream","date":"2013-11-01T18:04:45.124Z","type":"message"}
{"nick":"creationix","message":"3. we want a way for the consumer to notify the source it's done consuming (abort)","date":"2013-11-01T18:04:55.298Z","type":"message"}
{"nick":"creationix","message":"4. we need sane error reporting","date":"2013-11-01T18:05:02.356Z","type":"message"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-11-01T18:05:09.892Z","type":"nick"}
{"nick":"Domenic_","message":"let me add some others that we need, probably not in the base layer:","date":"2013-11-01T18:05:37.831Z","type":"message"}
{"nick":"Domenic_","message":"5. multi-destination pipe","date":"2013-11-01T18:05:43.167Z","type":"message"}
{"nick":"creationix","message":"so we want readable *and* writable interfaces?","date":"2013-11-01T18:05:44.247Z","type":"message"}
{"nick":"creationix","message":"or stick with readable only using sinks for writable?","date":"2013-11-01T18:05:50.966Z","type":"message"}
{"nick":"Domenic_","message":"creationix: definitely want writable. So e.g. <video> tags can implement writable and you can start writing frames to them.","date":"2013-11-01T18:06:17.337Z","type":"message"}
{"nick":"creationix","message":"for file-streaming situations, I like readable-only","date":"2013-11-01T18:06:53.202Z","type":"message"}
{"nick":"creationix","message":"not sure about the <video> case, that's gray","date":"2013-11-01T18:07:01.686Z","type":"message"}
{"nick":"Domenic_","message":"WebWorkers: duplex streams, write data in, read data back out","date":"2013-11-01T18:07:25.233Z","type":"message"}
{"nick":"creationix","message":"to me a duplex stream is just two streams","date":"2013-11-01T18:07:40.891Z","type":"message"}
{"nick":"creationix","message":"they can be the same object if the interfaces don't conflict","date":"2013-11-01T18:07:50.062Z","type":"message"}
{"nick":"creationix","message":"but it's really two streams","date":"2013-11-01T18:07:57.738Z","type":"message"}
{"nick":"Domenic_","message":"Future awesome world (TM): getXHRStream().pipe(webWorkerToDoComplexProcessing).pipe(videoTagStream)","date":"2013-11-01T18:07:59.133Z","type":"message"}
{"nick":"thlorenz_","reason":"Ping timeout: 245 seconds","date":"2013-11-01T18:08:06.199Z","type":"quit"}
{"nick":"Domenic_","message":"creationix: agreed.","date":"2013-11-01T18:08:10.422Z","type":"message"}
{"nick":"chrisdickinson","message":".pipe(webglTexture)?","date":"2013-11-01T18:08:35.360Z","type":"message"}
{"nick":"st_luke","reason":"Read error: Connection reset by peer","date":"2013-11-01T18:08:35.886Z","type":"quit"}
{"nick":"creationix","message":"as far as multi-destination pipe, I think that's just a custom transform","date":"2013-11-01T18:08:37.552Z","type":"message"}
{"nick":"creationix","message":"it shouldn't be part of the core stream API","date":"2013-11-01T18:08:46.987Z","type":"message"}
{"nick":"st_luke","date":"2013-11-01T18:08:57.539Z","type":"join"}
{"nick":"creationix","message":"unix streams don't have that, you use the tee program","date":"2013-11-01T18:09:04.837Z","type":"message"}
{"nick":"Domenic_","message":"creationix: as long as that can be done performantly, seems good.","date":"2013-11-01T18:09:14.624Z","type":"message"}
{"nick":"Domenic_","message":"although the base API will probably have it","date":"2013-11-01T18:09:20.627Z","type":"message"}
{"nick":"Domenic_","message":"but, implemented in terms of a simpler API + a T stream","date":"2013-11-01T18:09:34.349Z","type":"message"}
{"nick":"Domenic_","message":"(both of which will be exposed)","date":"2013-11-01T18:09:39.705Z","type":"message"}
{"nick":"creationix","message":"tee(source, 2) -> [output, output]","date":"2013-11-01T18:09:52.874Z","type":"message"}
{"nick":"creationix","message":"or something like that","date":"2013-11-01T18:09:57.283Z","type":"message"}
{"nick":"Domenic_","message":"I really liked what Raynos did at https://github.com/whatwg/streams/issues/1#issuecomment-27545472","date":"2013-11-01T18:10:29.425Z","type":"message"}
{"nick":"creationix","message":"in js-git I have multiplexers and demultiplexors","date":"2013-11-01T18:10:34.992Z","type":"message"}
{"nick":"creationix","message":"parse(stream) -> { pack: stream, progress: stream, error: stream, line: stream }","date":"2013-11-01T18:10:42.318Z","type":"message"}
{"nick":"creationix","message":"encode({streams...}) -> stream","date":"2013-11-01T18:10:50.760Z","type":"message"}
{"nick":"creationix","message":"all custom connectors","date":"2013-11-01T18:11:03.274Z","type":"message"}
{"nick":"creationix","message":"oh heh, that's the github link I was looking for","date":"2013-11-01T18:11:26.241Z","type":"message"}
{"nick":"creationix","message":"I should have remembered you've seen it","date":"2013-11-01T18:11:35.125Z","type":"message"}
{"nick":"creationix","action":"slaps forehead","date":"2013-11-01T18:11:42.377Z","type":"action"}
{"nick":"creationix","message":"so basically, include some generic helpers as builting","date":"2013-11-01T18:12:35.964Z","type":"message"}
{"nick":"creationix","message":"*builtins","date":"2013-11-01T18:12:39.866Z","type":"message"}
{"nick":"creationix","message":"I'm find with that","date":"2013-11-01T18:12:42.994Z","type":"message"}
{"nick":"creationix","message":"as long as they are truly generic *and* useful","date":"2013-11-01T18:12:58.051Z","type":"message"}
{"nick":"Domenic_","message":"we are trying to make this as much \"extensible web\" as possible","date":"2013-11-01T18:13:41.623Z","type":"message"}
{"nick":"Domenic_","message":"it's a bit tricksy because the community hasn't finished experimenting and settled on something perfect yet","date":"2013-11-01T18:13:57.412Z","type":"message"}
{"nick":"Domenic_","message":"so we can't just rubber-stamp node streams and say \"good to go\"","date":"2013-11-01T18:14:08.718Z","type":"message"}
{"nick":"Domenic_","message":"but we want streams as a low-level primitive, not just a magic part of XHR and a magic part of web filesystem APIs and so on","date":"2013-11-01T18:14:34.508Z","type":"message"}
{"nick":"Domenic_","message":"and to be most useable by others who are building their own custom streams, yeah, small useful and generic helpers that compose the higher-level API that we want to expose","date":"2013-11-01T18:15:15.718Z","type":"message"}
{"nick":"creationix","message":"yes","date":"2013-11-01T18:15:52.643Z","type":"message"}
{"nick":"creationix","message":"since we still haven't found the perfect API, I say we should err on the side of simple","date":"2013-11-01T18:15:52.643Z","type":"message"}
{"nick":"creationix","message":"better to do too little than too much","date":"2013-11-01T18:15:55.277Z","type":"message"}
{"nick":"Domenic_","message":"yeah. modulo the fact that we need to actually solve all the problems.","date":"2013-11-01T18:16:21.429Z","type":"message"}
{"nick":"creationix","message":"pipe in streams1 was unusable for voxer, so they never used it and had a custom pipe","date":"2013-11-01T18:16:29.118Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 5, free: 34]","date":"2013-11-01T18:16:45.390Z","type":"message"}
{"nick":"creationix","message":"which problems should we optimize for","date":"2013-11-01T18:16:49.125Z","type":"message"}
{"nick":"Domenic_","message":"would still really like a creationix vs. substack fight on source.pipe(dest) vs. dest.sink(source). maybe with commentary from isaacs.","date":"2013-11-01T18:16:54.127Z","type":"message"}
{"nick":"creationix","message":"dominictarr likes .pipe too I think","date":"2013-11-01T18:17:16.129Z","type":"message"}
{"nick":"chrisdickinson","action":"too","date":"2013-11-01T18:17:29.434Z","type":"action"}
{"nick":"creationix","message":"I like it, I just can't justify the complexity it entails to implement","date":"2013-11-01T18:17:34.018Z","type":"message"}
{"nick":"creationix","message":"I hate APIs that require me to use complex tools","date":"2013-11-01T18:17:43.271Z","type":"message"}
{"nick":"Domenic_","message":"creationix: all of node's use cases + https://dvcs.w3.org/hg/streams-api/raw-file/tip/Overview.htm#consumers seems like a start.","date":"2013-11-01T18:17:56.627Z","type":"message"}
{"nick":"chrisdickinson","message":"is it still a matter of `dest.sink(transformC(transformB(transformA(source))))`?","date":"2013-11-01T18:18:10.160Z","type":"message"}
{"nick":"Domenic_","message":"why is .sink easier to implement than .pipe","date":"2013-11-01T18:18:16.402Z","type":"message"}
{"nick":"chrisdickinson","message":"(re the `sink` version?)","date":"2013-11-01T18:18:17.913Z","type":"message"}
{"nick":"creationix","message":"chrisdickinson, that's the simple way, yes","date":"2013-11-01T18:18:52.033Z","type":"message"}
{"nick":"creationix","message":"pure functional programming","date":"2013-11-01T18:18:59.056Z","type":"message"}
{"nick":"creationix","message":"parallels map functions","date":"2013-11-01T18:19:05.452Z","type":"message"}
{"nick":"creationix","message":"var object = JSON.parse(json)","date":"2013-11-01T18:19:13.767Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: i'm more insistent than that.  I maintain that EEs should not be in node *at all*","date":"2013-11-01T18:19:15.440Z","type":"message"}
{"nick":"Domenic_","message":"creationix: how do transform functions work with non-chunkwise transforms (e.g. gzip)","date":"2013-11-01T18:19:30.612Z","type":"message"}
{"nick":"creationix","message":"var messageStream = websocket.parse(inputStream)","date":"2013-11-01T18:19:32.584Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: event emission *as such* is almost always a bad idea, and node *way* overuses it","date":"2013-11-01T18:19:33.032Z","type":"message"}
{"nick":"Domenic_","message":"creationix: maybe they are more like .flatMap than they are like .map?","date":"2013-11-01T18:19:45.208Z","type":"message"}
{"nick":"creationix","message":"Domenic_, it's higher level","date":"2013-11-01T18:19:53.757Z","type":"message"}
{"nick":"creationix","message":"you consume a stream and return a stream","date":"2013-11-01T18:20:01.238Z","type":"message"}
{"nick":"Domenic_","message":"creationix: I guess I should look at the gist's examples.","date":"2013-11-01T18:20:09.998Z","type":"message"}
{"nick":"creationix","message":"there is no constraint that events in the source stream must match 1:1 with the output stream","date":"2013-11-01T18:20:15.703Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: so how do you solve cases like passive data listening or \"tell me when the stream is done so i can clean up.\"","date":"2013-11-01T18:20:36.709Z","type":"message"}
{"nick":"creationix","message":"passive data listening, by definition is event based","date":"2013-11-01T18:21:19.139Z","type":"message"}
{"nick":"creationix","message":"but you don't need multiple listeners","date":"2013-11-01T18:21:27.021Z","type":"message"}
{"nick":"creationix","message":".ondata = function () {} is fine","date":"2013-11-01T18:21:29.326Z","type":"message"}
{"nick":"Domenic_","message":"mehhhhh","date":"2013-11-01T18:21:53.608Z","type":"message"}
{"nick":"creationix","message":"it","date":"2013-11-01T18:22:05.201Z","type":"message"}
{"nick":"creationix","message":"it's a lot simpler *and* faster than inheriting from some EE library and routing every event through the library code","date":"2013-11-01T18:22:22.276Z","type":"message"}
{"nick":"creationix","message":"but that's like continuable vs promise vs node-callback","date":"2013-11-01T18:22:44.832Z","type":"message"}
{"nick":"creationix","message":"it's the same behavior","date":"2013-11-01T18:22:48.119Z","type":"message"}
{"nick":"creationix","message":"also with .ondata = fn, you can short-circuit stuff","date":"2013-11-01T18:23:17.081Z","type":"message"}
{"nick":"creationix","message":"like use a reference from 3 layers deep","date":"2013-11-01T18:23:26.770Z","type":"message"}
{"nick":"creationix","message":"no routing needed at all","date":"2013-11-01T18:23:27.817Z","type":"message"}
{"nick":"Domenic_","message":"hmmmmm","date":"2013-11-01T18:23:32.903Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: agree/disagree?","date":"2013-11-01T18:23:47.904Z","type":"message"}
{"nick":"isaacs","message":"i don't like .ondata=function","date":"2013-11-01T18:24:25.942Z","type":"message"}
{"nick":"isaacs","message":"either","date":"2013-11-01T18:24:27.334Z","type":"message"}
{"nick":"isaacs","message":"i'm *less* offended by .ondata(function)","date":"2013-11-01T18:24:44.168Z","type":"message"}
{"nick":"isaacs","message":"one problem with .on('data',fn) and .ondata=fn is that it's not discoverable","date":"2013-11-01T18:24:58.402Z","type":"message"}
{"nick":"isaacs","message":"and you have this stateful side-effecty change, for something that should be idempotent","date":"2013-11-01T18:25:17.581Z","type":"message"}
{"nick":"creationix","message":"right, it's terribly awkward to use .ondata = fn","date":"2013-11-01T18:25:43.839Z","type":"message"}
{"nick":"creationix","message":"it's the most simple/performant option I think","date":"2013-11-01T18:25:44.471Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: by that do you mean flowing vs. non-flowing mode?","date":"2013-11-01T18:25:51.712Z","type":"message"}
{"nick":"creationix","message":"so .ondata(fn) would internally set this._ondata = fn or something right?","date":"2013-11-01T18:26:24.927Z","type":"message"}
{"nick":"creationix","message":"or would it support multiple listeners?","date":"2013-11-01T18:26:29.724Z","type":"message"}
{"nick":"creationix","message":"the problem my new interface has is I have no way of knowing when .ondata and .onerror were set","date":"2013-11-01T18:28:25.568Z","type":"message"}
{"nick":"creationix","message":"I assume they set it right away (same tick), but that's tricky","date":"2013-11-01T18:28:37.766Z","type":"message"}
{"nick":"creationix","message":"and fragile","date":"2013-11-01T18:28:40.543Z","type":"message"}
{"nick":"isaacs","message":"creationix: .ondata(fn) is like Raynos's Event thing","date":"2013-11-01T18:28:43.652Z","type":"message"}
{"nick":"isaacs","message":"creationix: this.ondata = new Event();","date":"2013-11-01T18:28:54.258Z","type":"message"}
{"nick":"creationix","message":"haven't seen that","date":"2013-11-01T18:29:04.706Z","type":"message"}
{"nick":"isaacs","message":"creationix: yeah","date":"2013-11-01T18:29:07.661Z","type":"message"}
{"nick":"isaacs","message":"creationix: it is still brittle","date":"2013-11-01T18:29:12.542Z","type":"message"}
{"nick":"isaacs","message":"the Observer pattern is only good if the observer is strictly JUST an observer, and not a Consumer","date":"2013-11-01T18:29:26.704Z","type":"message"}
{"nick":"isaacs","message":"this is what sucks about node's \"evented\" io","date":"2013-11-01T18:29:36.790Z","type":"message"}
{"nick":"isaacs","message":"and this, really, is why i get annoyed at most people who criticize node.  they don't cut deep enough.","date":"2013-11-01T18:29:56.093Z","type":"message"}
{"nick":"isaacs","message":"in order to truly have crippling criticism, you have to know a system so well you fall in love with it.","date":"2013-11-01T18:30:20.380Z","type":"message"}
{"nick":"isaacs","message":"and most trolls dont' ahve the grit to do the work, or the empathy and compassion required to fall in love with something that deeply that you can shape your mind to it, and feel where it's broken","date":"2013-11-01T18:30:54.919Z","type":"message"}
{"nick":"Domenic_","message":"haha aww <3","date":"2013-11-01T18:31:02.494Z","type":"message"}
{"nick":"Domenic_","message":"Ender's Game-esque","date":"2013-11-01T18:31:16.907Z","type":"message"}
{"nick":"isaacs","message":"yeah, but without the militarism or homophobia","date":"2013-11-01T18:31:25.978Z","type":"message"}
{"nick":"isaacs","message":";)","date":"2013-11-01T18:31:29.479Z","type":"message"}
{"nick":"isaacs","message":"i'm wiling to bet that nearly *every* system is deeply flawed.  when people don't cop to their systems' flaws, either they're liars, or they don't know what they're talking about.","date":"2013-11-01T18:32:11.549Z","type":"message"}
{"nick":"isaacs","message":"because all computers are shit.","date":"2013-11-01T18:32:24.458Z","type":"message"}
{"nick":"isaacs","message":"it's just that some systems are better in certain circumstances at not showing their flaws.","date":"2013-11-01T18:32:41.278Z","type":"message"}
{"nick":"creationix","action":"pretty much agrees with isaacs","date":"2013-11-01T18:32:50.772Z","type":"action"}
{"nick":"creationix","message":"isaacs, would it be a terrible mistake to have pull-streams only for whatwg streams?","date":"2013-11-01T18:34:29.651Z","type":"message"}
{"nick":"creationix","message":"it sure simplifies things","date":"2013-11-01T18:34:29.869Z","type":"message"}
{"nick":"creationix","message":"stream.read() -> promise<value/end/error>","date":"2013-11-01T18:34:33.928Z","type":"message"}
{"nick":"creationix","message":"stream.write(data/end) -> promise<written/error>","date":"2013-11-01T18:34:48.355Z","type":"message"}
{"nick":"Domenic_","message":"two arguments have me moving back in favor of sync readCurrentBuffer","date":"2013-11-01T18:35:15.605Z","type":"message"}
{"nick":"Domenic_","message":"one is, the extra nextTick.","date":"2013-11-01T18:35:30.881Z","type":"message"}
{"nick":"Domenic_","message":"(if data is already available)","date":"2013-11-01T18:35:37.302Z","type":"message"}
{"nick":"creationix","message":"I know bruno has been pushing this style for a long time using node-fibers and streamline transforms","date":"2013-11-01T18:36:11.304Z","type":"message"}
{"nick":"creationix","message":"are promises slow if the data is already available?","date":"2013-11-01T18:36:25.910Z","type":"message"}
{"nick":"creationix","message":"or are we going with A+ which assumes nextTick?","date":"2013-11-01T18:36:26.126Z","type":"message"}
{"nick":"creationix","message":"(continuable promises, for example, don't have this guarantee)","date":"2013-11-01T18:36:37.945Z","type":"message"}
{"nick":"Domenic_","message":"the other is, write streams already need a dual API of .write(data) -> promise<written/error> PLUS .tellMeWhenReadyToWriteMore() -> promise","date":"2013-11-01T18:36:38.542Z","type":"message"}
{"nick":"Domenic_","message":"yeah ES6 promises guarantee end-of-microtask","date":"2013-11-01T18:36:51.121Z","type":"message"}
{"nick":"Domenic_","message":"which is pretty damn fast, but, meh, we're at a pretty low-level, probably should be careful","date":"2013-11-01T18:37:13.589Z","type":"message"}
{"nick":"Domenic_","message":"but to finish the thought","date":"2013-11-01T18:37:18.946Z","type":"message"}
{"nick":"creationix","message":"why do writable streams still need \"writable\"?","date":"2013-11-01T18:37:27.164Z","type":"message"}
{"nick":"creationix","message":"if you have a promise for write, it can block till writable","date":"2013-11-01T18:37:35.441Z","type":"message"}
{"nick":"Domenic_","message":"creationix: um, hmm. But, node .write() already has a callback, but also has 'drained' event, right?","date":"2013-11-01T18:38:08.276Z","type":"message"}
{"nick":"creationix","message":"that's because the callback is rarely used","date":"2013-11-01T18:38:22.995Z","type":"message"}
{"nick":"creationix","message":"and write has a sync return value","date":"2013-11-01T18:38:28.313Z","type":"message"}
{"nick":"creationix","message":"the \"drained\" is to go along with the return value to write","date":"2013-11-01T18:38:43.226Z","type":"message"}
{"nick":"Domenic_","message":"what is the callback communicating anyway...","date":"2013-11-01T18:38:53.375Z","type":"message"}
{"nick":"creationix","message":"the readable parallel is sync read with \"readable\" event","date":"2013-11-01T18:39:03.638Z","type":"message"}
{"nick":"Domenic_","message":"yes","date":"2013-11-01T18:39:17.897Z","type":"message"}
{"nick":"creationix","message":"I think it communicates drained, not sure exactly","date":"2013-11-01T18:39:26.709Z","type":"message"}
{"nick":"Domenic_","message":"i think this is important knowledge :)","date":"2013-11-01T18:39:38.505Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: halp, what does the callback to .write() actually do","date":"2013-11-01T18:39:48.316Z","type":"message"}
{"nick":"creationix","message":"my point is most node code I've seen doesn't use or rely on that callback","date":"2013-11-01T18:39:55.473Z","type":"message"}
{"nick":"creationix","message":"it's quite optional and unused in my experience","date":"2013-11-01T18:40:02.676Z","type":"message"}
{"nick":"Domenic_","message":"most node code doesn't rely on anything but .pipe ;)","date":"2013-11-01T18:40:30.618Z","type":"message"}
{"nick":"creationix","message":"right, but that's another level","date":"2013-11-01T18:40:43.674Z","type":"message"}
{"nick":"Domenic_","message":"bah i have to lunch","date":"2013-11-01T18:40:50.553Z","type":"message"}
{"nick":"Domenic_","message":"be back in 20-ish","date":"2013-11-01T18:40:55.651Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2013-11-01T18:40:58.485Z","type":"message"}
{"nick":"creationix","action":"is writing up ideas in a gist for easier reading...","date":"2013-11-01T18:52:26.789Z","type":"action"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-11-01T18:59:02.438Z","type":"nick"}
{"nick":"defunctzombie","message":"substack: ping","date":"2013-11-01T19:00:10.007Z","type":"message"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2013-11-01T19:09:12.454Z","type":"quit"}
{"nick":"thlorenz","message":"defunctzombie: substack I just removed an entire feature from browser-pack and no tests failed","date":"2013-11-01T19:12:56.949Z","type":"message"}
{"nick":"defunctzombie","message":"amazing","date":"2013-11-01T19:13:05.414Z","type":"message"}
{"nick":"thlorenz","message":"the PRs are gonna be forthcoming within the hour though","date":"2013-11-01T19:13:12.461Z","type":"message"}
{"nick":"defunctzombie","message":"thlorenz: means one of two things... useless feature or we don't test enough hahhaha","date":"2013-11-01T19:13:20.575Z","type":"message"}
{"nick":"thlorenz","message":"defunctzombie: scary actually -- how dit that make it in","date":"2013-11-01T19:13:22.996Z","type":"message"}
{"nick":"thlorenz","message":"defunctzombie: it actually changed behavior, but didn't work fully , so not useless ;)","date":"2013-11-01T19:13:53.855Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 2, free: 32]","date":"2013-11-01T19:16:45.180Z","type":"message"}
{"nick":"kevinswiber","reason":"Remote host closed the connection","date":"2013-11-01T19:16:53.815Z","type":"quit"}
{"nick":"defunctzombie","message":"well, deleting code is always good","date":"2013-11-01T19:20:26.105Z","type":"message"}
{"nick":"defunctzombie","message":"so +1 for that","date":"2013-11-01T19:20:32.802Z","type":"message"}
{"nick":"thlorenz","message":":)","date":"2013-11-01T19:20:59.385Z","type":"message"}
{"nick":"thlorenz","message":"substack: defunctzombie: https://github.com/substack/node-browserify/pull/512 and https://github.com/substack/browser-pack/pull/24","date":"2013-11-01T19:23:46.377Z","type":"message"}
{"nick":"defunctzombie","message":"thlorenz: if nomap is set","date":"2013-11-01T19:24:31.584Z","type":"message"}
{"nick":"defunctzombie","message":"thlorenz: will that mean the duplicate won't have a source map?","date":"2013-11-01T19:24:40.731Z","type":"message"}
{"nick":"thlorenz","message":"yep, browserify sets it","date":"2013-11-01T19:24:41.118Z","type":"message"}
{"nick":"defunctzombie","message":"if you get an error in it.. what will happen?","date":"2013-11-01T19:24:49.188Z","type":"message"}
{"nick":"thlorenz","message":"you won't need it","date":"2013-11-01T19:24:50.796Z","type":"message"}
{"nick":"defunctzombie","message":"will we not have good debug info?","date":"2013-11-01T19:24:54.018Z","type":"message"}
{"nick":"thlorenz","message":"how?","date":"2013-11-01T19:24:56.465Z","type":"message"}
{"nick":"thlorenz","message":"it's just a generated require","date":"2013-11-01T19:25:04.027Z","type":"message"}
{"nick":"defunctzombie","message":"oh.. cause it always load the other one","date":"2013-11-01T19:25:05.972Z","type":"message"}
{"nick":"defunctzombie","message":"gotcha!","date":"2013-11-01T19:25:08.032Z","type":"message"}
{"nick":"defunctzombie","message":"cool stuff","date":"2013-11-01T19:25:09.966Z","type":"message"}
{"nick":"thlorenz","message":":)","date":"2013-11-01T19:25:11.971Z","type":"message"}
{"nick":"defunctzombie","message":"I like the nomap flag much better","date":"2013-11-01T19:25:15.297Z","type":"message"}
{"nick":"defunctzombie","message":"than the other name you had","date":"2013-11-01T19:25:17.851Z","type":"message"}
{"nick":"defunctzombie","message":"more generic","date":"2013-11-01T19:25:24.004Z","type":"message"}
{"nick":"thlorenz","message":"yep, it's more generic","date":"2013-11-01T19:25:25.470Z","type":"message"}
{"nick":"thlorenz","message":":)","date":"2013-11-01T19:25:26.466Z","type":"message"}
{"nick":"mikolalysenko","date":"2013-11-01T19:46:15.460Z","type":"join"}
{"nick":"tilgovi","date":"2013-11-01T19:47:47.169Z","type":"join"}
{"nick":"substack","message":"thlorenz: that commit is from https://github.com/substack/browser-pack/commit/45b153aa1c3035ff346f04776176ce1b82fe3ab4","date":"2013-11-01T19:48:06.479Z","type":"message"}
{"nick":"substack","message":"https://github.com/substack/browser-pack/pull/17","date":"2013-11-01T19:49:17.676Z","type":"message"}
{"nick":"substack","message":"https://github.com/substack/node-browserify/issues/465","date":"2013-11-01T19:49:23.869Z","type":"message"}
{"nick":"substack","message":"thlorenz: please put those lines back","date":"2013-11-01T19:49:28.784Z","type":"message"}
{"nick":"substack","message":"unless that issue can be addressed","date":"2013-11-01T19:49:46.667Z","type":"message"}
{"nick":"thlorenz","message":"substack: has been addressed: https://github.com/substack/node-browserify/issues/497#issuecomment-27446743","date":"2013-11-01T19:50:58.367Z","type":"message"}
{"nick":"thlorenz","message":"ef4 who put it there told me to remove it ;)","date":"2013-11-01T19:51:15.623Z","type":"message"}
{"nick":"thlorenz","message":"substack: and this: https://github.com/substack/node-browserify/issues/465 is a duplicate of the issue I just linked","date":"2013-11-01T19:51:49.265Z","type":"message"}
{"nick":"thlorenz","message":"I'm surprised: https://github.com/substack/browser-pack/pull/17 made it in substack","date":"2013-11-01T19:52:25.894Z","type":"message"}
{"nick":"timoxley","reason":"Remote host closed the connection","date":"2013-11-01T19:52:31.832Z","type":"quit"}
{"nick":"thlorenz","message":"I mean its sloppy, no tests, indentation messed up and only made the issue harder to repro instead of fixing it","date":"2013-11-01T19:52:56.521Z","type":"message"}
{"nick":"timoxley","date":"2013-11-01T19:53:06.183Z","type":"join"}
{"nick":"creationix","message":"what is a good way to emit events for streams?","date":"2013-11-01T19:55:01.931Z","type":"message"}
{"nick":"rxgx","reason":"Quit: timeout","date":"2013-11-01T19:55:15.436Z","type":"quit"}
{"nick":"creationix","message":"I've been using bare .ondata = fn references","date":"2013-11-01T19:55:20.124Z","type":"message"}
{"nick":"creationix","message":"which is very simple and fast, but it has it's problems too","date":"2013-11-01T19:55:24.913Z","type":"message"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2013-11-01T19:55:51.737Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T19:56:18.795Z","type":"join"}
{"nick":"substack","message":"thlorenz: ok great!","date":"2013-11-01T19:56:43.103Z","type":"message"}
{"nick":"substack","message":"just making sure that we weren't regressing over any old issues","date":"2013-11-01T19:56:54.340Z","type":"message"}
{"nick":"timoxley","reason":"Ping timeout: 245 seconds","date":"2013-11-01T19:57:16.264Z","type":"quit"}
{"nick":"defunctzombie","message":"thlorenz: substack: I think the new tests added will prevent that for this case in the future.","date":"2013-11-01T19:58:38.766Z","type":"message"}
{"nick":"Domenic_","message":"creationix: .setDataListener(fn) seems like a slightly nicer bikeshed.","date":"2013-11-01T19:58:48.835Z","type":"message"}
{"nick":"thlorenz","message":"substack: yeah I was a bit worried at first too, since I didn't know exactly why that seenSourceFiles thing was in there","date":"2013-11-01T19:58:49.057Z","type":"message"}
{"nick":"defunctzombie","message":"thlorenz: substack the fact that other fix had no tests makes it scary","date":"2013-11-01T19:58:52.121Z","type":"message"}
{"nick":"thlorenz","message":"which is why I got the confirmation on the issue","date":"2013-11-01T19:58:56.834Z","type":"message"}
{"nick":"thlorenz","message":"defunctzombie: yeah, but I got at least confirmation from author that it was attempt to fix same issue","date":"2013-11-01T19:59:28.797Z","type":"message"}
{"nick":"defunctzombie","message":"yep","date":"2013-11-01T20:00:25.061Z","type":"message"}
{"nick":"jxson","reason":"Ping timeout: 240 seconds","date":"2013-11-01T20:00:27.716Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T20:00:46.474Z","type":"join"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2013-11-01T20:01:41.702Z","type":"quit"}
{"nick":"creationix","message":"Domenic_, I'll use something like that in my examples then.  I don't want the events to distract","date":"2013-11-01T20:02:05.583Z","type":"message"}
{"nick":"kevino80","date":"2013-11-01T20:02:17.114Z","type":"join"}
{"nick":"Domenic_","message":"creationix: yeah seems reasonable.","date":"2013-11-01T20:02:21.825Z","type":"message"}
{"nick":"creationix","message":"Domenic_, the writeup in progress is at https://gist.github.com/creationix/7270104","date":"2013-11-01T20:02:45.168Z","type":"message"}
{"nick":"creationix","message":"Domenic_, should \"end\" events be held back if a stream is paused?","date":"2013-11-01T20:03:52.328Z","type":"message"}
{"nick":"creationix","message":"they don't need backpressure","date":"2013-11-01T20:03:56.982Z","type":"message"}
{"nick":"creationix","message":"there is only one","date":"2013-11-01T20:04:00.565Z","type":"message"}
{"nick":"creationix","message":"same for error events","date":"2013-11-01T20:04:21.556Z","type":"message"}
{"nick":"creationix","message":"I don't like queueing them","date":"2013-11-01T20:04:30.309Z","type":"message"}
{"nick":"creationix","message":"causes late error notifications","date":"2013-11-01T20:04:36.082Z","type":"message"}
{"nick":"Domenic_","message":"creationix: seems like they should... if i pause, i don't want anything to happen until i resume","date":"2013-11-01T20:04:41.311Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: the cb to write() is called when either the write is successful or failed","date":"2013-11-01T20:04:50.012Z","type":"message"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2013-11-01T20:05:01.653Z","type":"quit"}
{"nick":"Domenic_","message":"isaacs: to the underlying data sink, you mean","date":"2013-11-01T20:05:06.216Z","type":"message"}
{"nick":"jxson","date":"2013-11-01T20:05:27.370Z","type":"join"}
{"nick":"isaacs","message":"Domenic_: yeah","date":"2013-11-01T20:05:48.758Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: but it's... weird.","date":"2013-11-01T20:05:58.503Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: what is the difference between waiting for the cb to call back with success and waiting for 'drain'","date":"2013-11-01T20:06:02.019Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: 'drain' will only be emitted if the write() returned false","date":"2013-11-01T20:06:15.802Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: write(cb) MAY call the cb as early as nextTick","date":"2013-11-01T20:06:25.598Z","type":"message"}
{"nick":"creationix","message":"Domenic_, right, the question is should \"pause\" affect *all* events or just the \"data\" events that need the backpressure?","date":"2013-11-01T20:06:26.402Z","type":"message"}
{"nick":"creationix","message":"I would prefer if they only paused data events","date":"2013-11-01T20:06:26.614Z","type":"message"}
{"nick":"creationix","message":"also I like to group \"end\" and \"error\" into the same handler for simplicity","date":"2013-11-01T20:06:33.619Z","type":"message"}
{"nick":"isaacs","message":"creationix: 'end' events also need backpressure!","date":"2013-11-01T20:06:43.381Z","type":"message"}
{"nick":"creationix","message":"\"error\" is just a special case of \"end\", there won't be more data after it","date":"2013-11-01T20:06:44.768Z","type":"message"}
{"nick":"Domenic_","message":"creationix: I feel like if it's named pause it should pass all events.","date":"2013-11-01T20:06:48.318Z","type":"message"}
{"nick":"Domenic_","message":"s/pass/pause","date":"2013-11-01T20:06:52.216Z","type":"message"}
{"nick":"mikolalysenko","message":"one more step closer to prolog.js:  https://github.com/mikolalysenko/horn-sat","date":"2013-11-01T20:06:55.437Z","type":"message"}
{"nick":"creationix","message":"isaacs, why?","date":"2013-11-01T20:07:00.619Z","type":"message"}
{"nick":"kevino80","reason":"Ping timeout: 272 seconds","date":"2013-11-01T20:07:09.864Z","type":"quit"}
{"nick":"isaacs","message":"creationix: well, consider the case of an empty stream","date":"2013-11-01T20:07:15.576Z","type":"message"}
{"nick":"creationix","message":"isaacs, I'm also proposing that all streams start paused","date":"2013-11-01T20:07:42.063Z","type":"message"}
{"nick":"isaacs","message":"creationix: createServer((req,res)=>{ setTimeout(() => { req.pipe(upstream); upstream.pipe(res); }) })","date":"2013-11-01T20:08:01.459Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: so, the reason for the callback vs. 'drain' separation is if you need to know ASAP whether your write succeeded. otherwise you could just have the callback delay success notification until the drain has already happened. seem right?","date":"2013-11-01T20:08:19.781Z","type":"message"}
{"nick":"isaacs","message":"creationix: if req emits 'end' right away, you miss it, and upstream never gets ended","date":"2013-11-01T20:08:20.467Z","type":"message"}
{"nick":"creationix","message":"right, but that's a special case, not a general case","date":"2013-11-01T20:08:37.279Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: this is another case where we could make some epistemic decisions","date":"2013-11-01T20:08:45.030Z","type":"message"}
{"nick":"creationix","message":"the initial pause can be a hard pause that pauses everything","date":"2013-11-01T20:08:53.674Z","type":"message"}
{"nick":"isaacs","message":"creationix: well, sure, if you consider HTTP GET a special case of streams","date":"2013-11-01T20:08:59.081Z","type":"message"}
{"nick":"creationix","message":"but later pauses only pause data","date":"2013-11-01T20:09:00.369Z","type":"message"}
{"nick":"isaacs","message":"creationix: imo, GET is a pretty common streaming case","date":"2013-11-01T20:09:08.058Z","type":"message"}
{"nick":"creationix","message":"isaacs, no, I mean there is a difference between setup and flow-control","date":"2013-11-01T20:09:18.303Z","type":"message"}
{"nick":"isaacs","message":"creationix: in streams3, 'end' is not emitted until you read() *past* the EOF chunk","date":"2013-11-01T20:09:24.176Z","type":"message"}
{"nick":"creationix","message":"setup is done once and nothing should emit till setup is done","date":"2013-11-01T20:09:29.852Z","type":"message"}
{"nick":"isaacs","action":"sounds the \"COMPLICATIONS\" horn","date":"2013-11-01T20:09:41.511Z","type":"action"}
{"nick":"isaacs","message":"creationix: so, you're back to the wonky nutso stuff we have in node, with flowing=(true/false/null)","date":"2013-11-01T20:10:17.299Z","type":"message"}
{"nick":"jxson","reason":"Ping timeout: 272 seconds","date":"2013-11-01T20:10:25.225Z","type":"quit"}
{"nick":"creationix","message":"setup is the reason that .ondata =fn is a problem","date":"2013-11-01T20:10:30.433Z","type":"message"}
{"nick":"isaacs","message":"yeah","date":"2013-11-01T20:10:35.777Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: ah i see we have the same unnecessary-nextTick problem. if we counted on the cb to notify us when it was safe to write again, we couldn't write twice in quick succession, we'd need to wait a tick between writes.","date":"2013-11-01T20:10:44.935Z","type":"message"}
{"nick":"isaacs","message":"also the reason that \"evented\" is a problem","date":"2013-11-01T20:10:45.158Z","type":"message"}
{"nick":"creationix","message":"I still don't see why would want to buffer \"end\" and \"error\" events once a stream had started","date":"2013-11-01T20:11:37.184Z","type":"message"}
{"nick":"creationix","message":"they have listeners and there will only be one ever","date":"2013-11-01T20:11:45.834Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: right","date":"2013-11-01T20:11:54.872Z","type":"message"}
{"nick":"creationix","message":"the issue with data events is that there are many","date":"2013-11-01T20:11:55.343Z","type":"message"}
{"nick":"creationix","message":"hence the need for back-pressure","date":"2013-11-01T20:12:03.331Z","type":"message"}
{"nick":"isaacs","message":"creationix: i'd suggest that read() should be required to get the 'end' event to happen","date":"2013-11-01T20:12:21.107Z","type":"message"}
{"nick":"isaacs","message":"even if \"end event\" is just \"that time when read(cb) calls the cb with null\" or something","date":"2013-11-01T20:12:36.237Z","type":"message"}
{"nick":"isaacs","message":"i'd like to stop speaking in \"events\" actually","date":"2013-11-01T20:12:52.131Z","type":"message"}
{"nick":"isaacs","message":"that's THE problem with node streams","date":"2013-11-01T20:12:57.124Z","type":"message"}
{"nick":"creationix","message":"but they are events of a sort","date":"2013-11-01T20:13:18.782Z","type":"message"}
{"nick":"creationix","message":"things that happen over time","date":"2013-11-01T20:13:28.667Z","type":"message"}
{"nick":"isaacs","message":"creationix: yes, but \"events\" means a thing","date":"2013-11-01T20:13:31.444Z","type":"message"}
{"nick":"creationix","message":"right, I don't want EE","date":"2013-11-01T20:13:40.247Z","type":"message"}
{"nick":"creationix","message":"way too much power and complication","date":"2013-11-01T20:13:45.715Z","type":"message"}
{"nick":"isaacs","message":"creationix: exactly.  and .onf=fn is still EE, effectively","date":"2013-11-01T20:13:55.421Z","type":"message"}
{"nick":"isaacs","message":"just simpler impl","date":"2013-11-01T20:13:57.584Z","type":"message"}
{"nick":"isaacs","message":"but still bad (in some ways worse)","date":"2013-11-01T20:14:04.651Z","type":"message"}
{"nick":"creationix","message":".read(onData, onEndOrError)?","date":"2013-11-01T20:14:21.088Z","type":"message"}
{"nick":"creationix","message":"or .read(function (err, data) { .. }) with special sigil for EOS","date":"2013-11-01T20:14:47.829Z","type":"message"}
{"nick":"Domenic_","message":"^ that is my current design, but it has the unnecessary-nextTick \"problem.\"","date":"2013-11-01T20:15:06.175Z","type":"message"}
{"nick":"creationix","message":"I just worry about the recursive problem with that if you allow sync callback","date":"2013-11-01T20:15:34.585Z","type":"message"}
{"nick":"creationix","message":"and the performance proglem with nextTick","date":"2013-11-01T20:15:34.806Z","type":"message"}
{"nick":"creationix","message":"right","date":"2013-11-01T20:15:35.021Z","type":"message"}
{"nick":"creationix","message":"it's certainly the simplest solution","date":"2013-11-01T20:15:43.654Z","type":"message"}
{"nick":"isaacs","message":"creationix: sync callback releases zalgo.  no.","date":"2013-11-01T20:15:46.858Z","type":"message"}
{"nick":"creationix","message":"what basically what simple-streams in js-git are","date":"2013-11-01T20:15:52.619Z","type":"message"}
{"nick":"creationix","message":"but is has real issues that have driven me crazy","date":"2013-11-01T20:15:52.831Z","type":"message"}
{"nick":"isaacs","message":"creationix: the only way to do that is to guarantee nextTick","date":"2013-11-01T20:15:54.834Z","type":"message"}
{"nick":"isaacs","message":"creationix: yes, it drives EVERYONE crazy","date":"2013-11-01T20:16:05.140Z","type":"message"}
{"nick":"creationix","message":"What if you could return value *or* promise","date":"2013-11-01T20:16:13.983Z","type":"message"}
{"nick":"isaacs","message":"creationix: when zalgo reaches his dark pony tentacles into our world, no one's sanity is safe.","date":"2013-11-01T20:16:25.035Z","type":"message"}
{"nick":"isaacs","message":"creationix: no, \"promise or value\" is zalgo","date":"2013-11-01T20:16:31.731Z","type":"message"}
{"nick":"isaacs","message":"just as zalgo as \"cb now or later\"","date":"2013-11-01T20:16:38.437Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 20]","date":"2013-11-01T20:16:45.134Z","type":"message"}
{"nick":"creationix","message":"no, my issues with simple-streams is not sync callbaks","date":"2013-11-01T20:16:55.456Z","type":"message"}
{"nick":"creationix","message":"it's having to buffer error and end events","date":"2013-11-01T20:16:59.731Z","type":"message"}
{"nick":"creationix","message":"especially error events","date":"2013-11-01T20:17:02.139Z","type":"message"}
{"nick":"tmcw","reason":"Remote host closed the connection","date":"2013-11-01T20:17:10.723Z","type":"quit"}
{"nick":"isaacs","message":"if we were talking about a language with native coros, and syntax for wrapped values that let them be treated just like regular values (ie, E-rights), then we could talk.","date":"2013-11-01T20:17:20.019Z","type":"message"}
{"nick":"isaacs","message":"creationix: yeah, buffering error events sucks big time.","date":"2013-11-01T20:17:29.313Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: please explain why it sucks big time","date":"2013-11-01T20:17:40.293Z","type":"message"}
{"nick":"Domenic_","message":"it seems fine to me","date":"2013-11-01T20:17:48.492Z","type":"message"}
{"nick":"creationix","message":"ok, so assuming you're willing to accept the performance hit is containing zalgo...","date":"2013-11-01T20:17:49.501Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: when an error occurs, you should emit it now, and probably crash, or at least throw that stream away","date":"2013-11-01T20:17:58.013Z","type":"message"}
{"nick":"isaacs","message":"creationix: read my zalgo post: http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony","date":"2013-11-01T20:18:25.980Z","type":"message"}
{"nick":"creationix","message":"Domenic_, do suppose I have a transform that has N:M relationship between input and output","date":"2013-11-01T20:18:30.023Z","type":"message"}
{"nick":"isaacs","message":"creationix: i'm willing to accept the performance hit RATHER than release zalgo","date":"2013-11-01T20:18:37.994Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: really? i mean, if the HTTP response cuts off in the middle, sure i should get notified if i'm piping that somewhere, but if I didn't pipe it anywhere yet, it seems fine not to tell me until the piping happens","date":"2013-11-01T20:18:38.831Z","type":"message"}
{"nick":"creationix","message":"Domenic_, happens *all* the time with protocol parsers","date":"2013-11-01T20:18:40.434Z","type":"message"}
{"nick":"creationix","message":"Domenic_, right, no events should fire if the stream hasn't been turned on","date":"2013-11-01T20:19:06.605Z","type":"message"}
{"nick":"isaacs","message":"creationix: but, if we assume that releasing zalgo is off the table, because we are sane, then really, it's trading a cleaner API for a perf hit.","date":"2013-11-01T20:19:09.098Z","type":"message"}
{"nick":"creationix","message":"and by turned on, I mean there are active event listeners","date":"2013-11-01T20:19:16.787Z","type":"message"}
{"nick":"isaacs","message":"creationix: the cleaner API is desirable.","date":"2013-11-01T20:19:17.209Z","type":"message"}
{"nick":"isaacs","message":"creationix: simpler to implement, etc.","date":"2013-11-01T20:19:27.533Z","type":"message"}
{"nick":"isaacs","message":"creationix: and, if the perf hit is rare, then it's worthwhile.","date":"2013-11-01T20:19:42.359Z","type":"message"}
{"nick":"creationix","message":"isaacs, by cleaner do you mean read() -> promise<value/end/error>/.","date":"2013-11-01T20:19:51.590Z","type":"message"}
{"nick":"Domenic_","message":"well ok. but what if i consumed three chunks and the fifth chunk is a buffered error. why is it bad to save that error until i try to consume?","date":"2013-11-01T20:19:55.781Z","type":"message"}
{"nick":"isaacs","message":"creationix: i mean read(function(value/end, error){})","date":"2013-11-01T20:20:11.438Z","type":"message"}
{"nick":"isaacs","message":"but yes","date":"2013-11-01T20:20:12.348Z","type":"message"}
{"nick":"creationix","message":"late errors are a royal pain","date":"2013-11-01T20:20:28.996Z","type":"message"}
{"nick":"creationix","message":"isaacs, right same thing.  When I say \"promise\" I mean all the syntax variants","date":"2013-11-01T20:20:42.129Z","type":"message"}
{"nick":"isaacs","message":"creationix: ok.","date":"2013-11-01T20:20:50.720Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: when errors happen you want to handle them asap, generally","date":"2013-11-01T20:21:01.067Z","type":"message"}
{"nick":"rxgx","date":"2013-11-01T20:21:13.779Z","type":"join"}
{"nick":"creationix","message":"I don't actually like or use promises","date":"2013-11-01T20:21:27.459Z","type":"message"}
{"nick":"Domenic_","message":"why. i don't care about the second half of the http request data (yet, or ever). why should i have that error pushed at me.","date":"2013-11-01T20:21:29.981Z","type":"message"}
{"nick":"creationix","message":"Domenic_, so on late errors..","date":"2013-11-01T20:21:38.398Z","type":"message"}
{"nick":"tmcw","date":"2013-11-01T20:21:40.544Z","type":"join"}
{"nick":"creationix","message":"in js-git I've had several real bugs that were terribly hard to track down because of late errors","date":"2013-11-01T20:21:56.444Z","type":"message"}
{"nick":"creationix","message":"suppose I'm implementing a protocol parser and I have a state-machine","date":"2013-11-01T20:22:10.965Z","type":"message"}
{"nick":"creationix","message":"I implement it one step at a time","date":"2013-11-01T20:22:14.719Z","type":"message"}
{"nick":"creationix","message":"when means there might not be the next READ to trigger the queued error","date":"2013-11-01T20:22:29.939Z","type":"message"}
{"nick":"creationix","message":"so it just hangs and I don't know why till I implement the next step blindly","date":"2013-11-01T20:22:39.885Z","type":"message"}
{"nick":"rxgx","reason":"Client Quit","date":"2013-11-01T20:22:47.354Z","type":"quit"}
{"nick":"creationix","message":"also it greatly complicates my event queues if I have multiple types of events to queue","date":"2013-11-01T20:22:55.205Z","type":"message"}
{"nick":"creationix","message":"if it's just data events it's much easier","date":"2013-11-01T20:23:00.381Z","type":"message"}
{"nick":"creationix","message":"in practice, I consider \"end\" and \"error\" two variants of the same event","date":"2013-11-01T20:23:28.270Z","type":"message"}
{"nick":"creationix","message":"it means there won't be anything else from this stream ever","date":"2013-11-01T20:23:34.463Z","type":"message"}
{"nick":"creationix","message":"the value tells me why","date":"2013-11-01T20:23:39.688Z","type":"message"}
{"nick":"timoxley","date":"2013-11-01T20:23:43.159Z","type":"join"}
{"nick":"creationix","message":"either it was EOS or the socket disconnected or something else","date":"2013-11-01T20:23:48.243Z","type":"message"}
{"nick":"creationix","message":"But yeah, there have been multiple times that my process silently died with no error when the cause was an Error instance stuck in some queue waiting for a read that never came","date":"2013-11-01T20:24:49.824Z","type":"message"}
{"nick":"timoxley","reason":"Read error: Connection reset by peer","date":"2013-11-01T20:25:00.848Z","type":"quit"}
{"nick":"creationix","message":"to me that's also Zalgo","date":"2013-11-01T20:25:02.613Z","type":"message"}
{"nick":"timoxley","date":"2013-11-01T20:25:33.674Z","type":"join"}
{"nick":"Domenic_","message":"isaacs: do you agree?","date":"2013-11-01T20:26:28.988Z","type":"message"}
{"nick":"isaacs","message":"creationix: i dunno, that's definitely some madness-inducing shit, but i'm not sure it's zalgo.  some other demon, for sure :)","date":"2013-11-01T20:26:44.493Z","type":"message"}
{"nick":"isaacs","message":"creationix: the thing about Zalgo is that in induces craziness even when everything's \"working\"","date":"2013-11-01T20:27:07.513Z","type":"message"}
{"nick":"creationix","message":"for me it's more maddening than sync callbacks","date":"2013-11-01T20:27:14.886Z","type":"message"}
{"nick":"creationix","message":"I've rarely ever been bitten by sync callbacks and I use them all the time","date":"2013-11-01T20:27:25.664Z","type":"message"}
{"nick":"isaacs","message":"creationix: you are lucky :)","date":"2013-11-01T20:27:33.081Z","type":"message"}
{"nick":"creationix","message":"maybe it's because of where my strengths are","date":"2013-11-01T20:27:45.378Z","type":"message"}
{"nick":"creationix","message":"not everyone thinks like me","date":"2013-11-01T20:27:49.316Z","type":"message"}
{"nick":"isaacs","message":"creationix: i've had to debug some gnarly production node stuff, where things are happening in the completely wrong order, and traced it to some zalgo stuff","date":"2013-11-01T20:28:01.575Z","type":"message"}
{"nick":"creationix","message":"back in the early node days I would literally dream in callbaks","date":"2013-11-01T20:28:03.293Z","type":"message"}
{"nick":"isaacs","message":"creationix: most of your code is mostly yours","date":"2013-11-01T20:28:19.417Z","type":"message"}
{"nick":"creationix","message":"yeah, out-of-order is nasty","date":"2013-11-01T20:28:20.980Z","type":"message"}
{"nick":"creationix","message":"isaacs, yep","date":"2013-11-01T20:28:25.939Z","type":"message"}
{"nick":"creationix","message":"that's why I use mostly my code.  I understand it","date":"2013-11-01T20:28:41.765Z","type":"message"}
{"nick":"creationix","message":"anyway, I'm find with not allowing sync callbacks","date":"2013-11-01T20:28:59.989Z","type":"message"}
{"nick":"isaacs","message":"creationix: zalgo is worst when it's person X's app, running on a framework written by person Y, on top of some bit of Node, which is like a hodgepodge of ryah, me, bnoordhuis, bert, tj, et al","date":"2013-11-01T20:29:06.220Z","type":"message"}
{"nick":"isaacs","message":"zalgo callbacks are only acceptable in purely declarative languages","date":"2013-11-01T20:29:42.265Z","type":"message"}
{"nick":"creationix","message":"isaacs, right, and my perspective is writing nasty nested statemachines for all kinds of crypto and git stuff by myself","date":"2013-11-01T20:29:44.412Z","type":"message"}
{"nick":"timoxley","reason":"Ping timeout: 245 seconds","date":"2013-11-01T20:29:46.298Z","type":"quit"}
{"nick":"isaacs","message":"creationix: your js is usually almost purely declarative","date":"2013-11-01T20:29:55.583Z","type":"message"}
{"nick":"isaacs","message":"btw: node-glob is HEAVILY zalgo under the hood","date":"2013-11-01T20:30:18.877Z","type":"message"}
{"nick":"isaacs","message":"but the exposed API is very carefully zalgo-containing","date":"2013-11-01T20:30:31.551Z","type":"message"}
{"nick":"creationix","message":"right, to avoid zalgo","date":"2013-11-01T20:30:38.028Z","type":"message"}
{"nick":"creationix","message":"never assume order","date":"2013-11-01T20:30:38.247Z","type":"message"}
{"nick":"creationix","message":"so isaacs, Domenic_ do you agree that \"end\" and \"error\" are two values of the same thing?","date":"2013-11-01T20:31:14.474Z","type":"message"}
{"nick":"creationix","message":"or are they fundamentally different?","date":"2013-11-01T20:31:21.563Z","type":"message"}
{"nick":"isaacs","message":"creationix: yes, i think that they are similar","date":"2013-11-01T20:31:34.006Z","type":"message"}
{"nick":"Domenic_","message":"creationix: I don't really know what the implications of that statement are, so I'm afraid to say yes.","date":"2013-11-01T20:31:43.384Z","type":"message"}
{"nick":"isaacs","message":"creationix: in fact, you could just define some specific kind of sigil, and let it have different states or whatever.","date":"2013-11-01T20:31:47.540Z","type":"message"}
{"nick":"isaacs","message":"creationix: one of my earlier sketches of a non-EE readable had a `stream.error` field, and if you called stream.read() and stream.error is set, it'd just return that error, forever.","date":"2013-11-01T20:32:18.560Z","type":"message"}
{"nick":"isaacs","message":"so, a stream in an error state is a \"stream of error objects\" until the error is cleared.","date":"2013-11-01T20:32:39.810Z","type":"message"}
{"nick":"creationix","message":"in simple streams I encode \"end\" as (falsy, undefined), \"error\" as (truthy, doesntmatter) and \"data\" as (falsy, not-undefined)","date":"2013-11-01T20:32:42.725Z","type":"message"}
{"nick":"Domenic_","message":"it's not great for object streams to reserve special sigils (like undefined)","date":"2013-11-01T20:33:14.282Z","type":"message"}
{"nick":"isaacs","message":"creationix: node streams use `null` s teh sigil","date":"2013-11-01T20:33:16.381Z","type":"message"}
{"nick":"isaacs","message":"but yeah, it's nicer to object streams to not have some value be \"end\"","date":"2013-11-01T20:33:31.116Z","type":"message"}
{"nick":"Domenic_","message":"the only real way to do that is with a separate \"state\" property, or with { done, value } tuples.","date":"2013-11-01T20:33:31.343Z","type":"message"}
{"nick":"creationix","message":"Domenic_, but really, \"undefined\" as a stream value?","date":"2013-11-01T20:33:35.162Z","type":"message"}
{"nick":"isaacs","message":"creationix: yes.","date":"2013-11-01T20:33:42.193Z","type":"message"}
{"nick":"creationix","message":"of course all my streams are either data streams (binary/string) or object streams","date":"2013-11-01T20:34:03.713Z","type":"message"}
{"nick":"isaacs","message":"creationix: imagine if you have a stream of objects, and most of them have \"name\" fields, and you want to convert that to a stream of names.","date":"2013-11-01T20:34:07.347Z","type":"message"}
{"nick":"creationix","message":"undefined is never a value","date":"2013-11-01T20:34:10.107Z","type":"message"}
{"nick":"isaacs","message":"creationix: \"undefined\" isa value","date":"2013-11-01T20:34:12.231Z","type":"message"}
{"nick":"isaacs","message":"creationix: it means \"this object doesn't have a name\"","date":"2013-11-01T20:34:19.109Z","type":"message"}
{"nick":"isaacs","message":"creationix: in fact, it may even be EXACTLY what yor'e looking for","date":"2013-11-01T20:34:28.823Z","type":"message"}
{"nick":"creationix","message":"isaacs, true, I could see that","date":"2013-11-01T20:34:34.625Z","type":"message"}
{"nick":"isaacs","message":"(speaking from experience using null/undefined in node, and causing some headaches for people)","date":"2013-11-01T20:34:41.830Z","type":"message"}
{"nick":"creationix","message":"but there are other ways to encode","date":"2013-11-01T20:34:51.505Z","type":"message"}
{"nick":"isaacs","message":"you could do the sync read() + state approach, and have read() thrwo on error.","date":"2013-11-01T20:35:26.912Z","type":"message"}
{"nick":"isaacs","message":"try { data = s.read() } catch (er) { ohnoes }","date":"2013-11-01T20:35:50.361Z","type":"message"}
{"nick":"isaacs","message":"but.. ugh.","date":"2013-11-01T20:35:55.825Z","type":"message"}
{"nick":"creationix","message":"dominictarr does \"end\" == (true), \"error\" == (other-truthy), \"data\" == (falsy, data)","date":"2013-11-01T20:35:58.486Z","type":"message"}
{"nick":"tilgovi","message":"having trouble with browserify's b.require() API. the result doesn't seem to create a require() function on the page","date":"2013-11-01T20:36:12.717Z","type":"message"}
{"nick":"creationix","message":"yeah, that's nasty, unless you're cool with exceptions like in domains","date":"2013-11-01T20:36:16.169Z","type":"message"}
{"nick":"tilgovi","message":"anyone familiar?","date":"2013-11-01T20:36:23.240Z","type":"message"}
{"nick":"thlorenz","message":"tilgovi: do you have sample code somewhere?","date":"2013-11-01T20:36:37.840Z","type":"message"}
{"nick":"isaacs","message":"creationix: well, it means that you have to wrap EVERY call to read() in a try/catch","date":"2013-11-01T20:36:40.170Z","type":"message"}
{"nick":"tilgovi","message":"thlorenz: I would have to extract it a bit","date":"2013-11-01T20:36:55.199Z","type":"message"}
{"nick":"tilgovi","message":"just wondering if I'm doing anything immediately wrong.","date":"2013-11-01T20:37:01.932Z","type":"message"}
{"nick":"thlorenz","message":"tilgovi: just make a quick gist -- then we can help you","date":"2013-11-01T20:37:12.239Z","type":"message"}
{"nick":"Domenic_","message":"isaacs: that seems equivalent to read(cb) in terms of how it forces you to handle errors","date":"2013-11-01T20:37:20.179Z","type":"message"}
{"nick":"tilgovi","message":"I can try","date":"2013-11-01T20:37:20.393Z","type":"message"}
{"nick":"creationix","message":"honestly, this encoding problem is one of the reasons I'm looking for something other than simple-streams","date":"2013-11-01T20:37:26.077Z","type":"message"}
{"nick":"aslant","date":"2013-11-01T20:37:32.705Z","type":"join"}
{"nick":"creationix","message":"if you have seperate ondata and onend handlers, it's very clear","date":"2013-11-01T20:37:36.156Z","type":"message"}
{"nick":"tilgovi","message":"there's just a lot more going on","date":"2013-11-01T20:37:36.380Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: yeah","date":"2013-11-01T20:37:53.058Z","type":"message"}
{"nick":"creationix","message":"ondata will be called zero or more times, and onend is the continuation","date":"2013-11-01T20:37:58.770Z","type":"message"}
{"nick":"isaacs","message":"Domenic_: but, at least, there's no \"error\" sigil","date":"2013-11-01T20:38:00.339Z","type":"message"}
{"nick":"feross","date":"2013-11-01T20:38:02.229Z","type":"join"}
{"nick":"creationix","message":"which may or may not have an error","date":"2013-11-01T20:38:05.111Z","type":"message"}
{"nick":"creationix","message":"ok, new question, how important is it to be able to change the data handler on the fly?","date":"2013-11-01T20:39:28.754Z","type":"message"}
{"nick":"tilgovi","message":"a thlorenz, while you're here","date":"2013-11-01T20:39:47.488Z","type":"message"}
{"nick":"creationix","message":"suppose I want function a to handle data for a few chunks, but later I want to switch it?","date":"2013-11-01T20:39:50.345Z","type":"message"}
{"nick":"tilgovi","message":"I had some problems with source-map-combine (I think it was combine, and not convert)","date":"2013-11-01T20:40:15.713Z","type":"message"}
{"nick":"tilgovi","message":"yeah, combine. if the input has a source map already, you only take the first source","date":"2013-11-01T20:40:29.106Z","type":"message"}
{"nick":"tilgovi","message":"would you like a PR to fix that?","date":"2013-11-01T20:40:32.004Z","type":"message"}
{"nick":"thlorenz","message":"tilgovi: could you file an issue?","date":"2013-11-01T20:40:38.809Z","type":"message"}
{"nick":"tilgovi","message":"sure","date":"2013-11-01T20:40:42.834Z","type":"message"}
{"nick":"tilgovi","message":"at least then it's not lost","date":"2013-11-01T20:40:48.154Z","type":"message"}
{"nick":"thlorenz","message":"tilgovi: I like PRs that fix things :) as long as they come with tests","date":"2013-11-01T20:41:04.435Z","type":"message"}
{"nick":"tilgovi","message":"speaking of, if you're on browser-pack, I just submitted one such","date":"2013-11-01T20:41:19.442Z","type":"message"}
{"nick":"creationix","message":"isaacs, I know, declarative, closure based streams!","date":"2013-11-01T20:48:07.512Z","type":"message"}
{"nick":"creationix","message":"force everyone to think like me","date":"2013-11-01T20:48:20.246Z","type":"message"}
{"nick":"creationix","message":";)","date":"2013-11-01T20:48:25.193Z","type":"message"}
{"nick":"isaacs","message":"creationix: declarative closure based streams is not a bad idea.","date":"2013-11-01T20:48:33.159Z","type":"message"}
{"nick":"isaacs","message":"creationix: sketch it up","date":"2013-11-01T20:48:36.220Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2013-11-01T20:48:38.729Z","type":"message"}
{"nick":"isaacs","message":"creationix: but without sigils, or events","date":"2013-11-01T20:48:50.481Z","type":"message"}
{"nick":"isaacs","message":"creationix: the problem usually is that closures are often very hard to optimize","date":"2013-11-01T20:49:05.920Z","type":"message"}
{"nick":"isaacs","message":"creationix: classy oop approaches are easier to get your head around, especially if your head is V8 or SpiderMonkey","date":"2013-11-01T20:49:30.220Z","type":"message"}
{"nick":"rowbit","message":"substack, pkrumins: These encoders are STILL down: 50.57.226.209(free4)","date":"2013-11-01T20:49:54.710Z","type":"message"}
{"nick":"creationix","message":"isaacs, right, I get a lot of push back about performance any time I mention that style","date":"2013-11-01T20:50:51.510Z","type":"message"}
{"nick":"creationix","message":"and the annoying this is that V8 and others *could* optimize for it if they wanted to.  But they don't because nobody writes that style.  Nobody writes that style because they don't optimize for it.","date":"2013-11-01T20:51:16.181Z","type":"message"}
{"nick":"Raynos","message":"creationix: whats the encoding problem?","date":"2013-11-01T20:51:28.151Z","type":"message"}
{"nick":"isaacs","message":"creationix: well, that's not the only reason :)","date":"2013-11-01T20:51:33.229Z","type":"message"}
{"nick":"creationix","message":"isaacs, and it's not the way programming is generally taught","date":"2013-11-01T20:51:54.878Z","type":"message"}
{"nick":"isaacs","message":"creationix: but it's still useful to sketch, even if it's just an example, and we then refactor its Good Parts back to a classy api","date":"2013-11-01T20:51:56.388Z","type":"message"}
{"nick":"creationix","message":"most people start with C++ and Java classes","date":"2013-11-01T20:52:01.278Z","type":"message"}
{"nick":"isaacs","message":"creationix: i've been doing functionals and closures for a long time.  part of the thing that sucks about it in production is that your state is too hidden","date":"2013-11-01T20:52:22.208Z","type":"message"}
{"nick":"isaacs","message":"it's TOO encapsulated :)","date":"2013-11-01T20:52:25.577Z","type":"message"}
{"nick":"creationix","message":"yeah, it's pretty private","date":"2013-11-01T20:52:34.709Z","type":"message"}
{"nick":"isaacs","message":"and tooling hasn't caught up well","date":"2013-11-01T20:52:37.508Z","type":"message"}
{"nick":"creationix","message":"both feature and problem","date":"2013-11-01T20:52:46.172Z","type":"message"}
{"nick":"isaacs","message":"plus, it's way too easy to leak large amounts of memory","date":"2013-11-01T20:52:51.127Z","type":"message"}
{"nick":"isaacs","message":"all FP languages have this problem, but most advocates are resistant to talking about it","date":"2013-11-01T20:53:09.455Z","type":"message"}
{"nick":"creationix","message":"actually I tend to leak less because there tend to not be cycles","date":"2013-11-01T20:53:26.298Z","type":"message"}
{"nick":"creationix","message":"break a reference one way and there aren't others to worry about","date":"2013-11-01T20:53:26.507Z","type":"message"}
{"nick":"creationix","message":"also I don't tend to write huge programs","date":"2013-11-01T20:53:41.019Z","type":"message"}
{"nick":"isaacs","message":"creationix: but it's hard to read a program and easily grok how much is being held by what","date":"2013-11-01T20:53:50.756Z","type":"message"}
{"nick":"creationix","message":"right","date":"2013-11-01T20:53:57.882Z","type":"message"}
{"nick":"isaacs","message":"when you see an object with a zillion members, you go \"Oh... hm.  That's probably not great.\"","date":"2013-11-01T20:54:14.168Z","type":"message"}
{"nick":"creationix","message":"isaacs, you've seen my sink interface right?","date":"2013-11-01T20:54:14.567Z","type":"message"}
{"nick":"creationix","message":"sink(readable, callback)","date":"2013-11-01T20:54:34.094Z","type":"message"}
{"nick":"isaacs","message":"creationix: i thought you just had the normal kind, with the faucet and the little thingie to open the drain...?","date":"2013-11-01T20:54:39.487Z","type":"message"}
{"nick":"creationix","message":"actually the faucet is not part of the sink","date":"2013-11-01T20:55:31.142Z","type":"message"}
{"nick":"creationix","message":"that's more like a transform","date":"2013-11-01T20:55:31.358Z","type":"message"}
{"nick":"creationix","message":"the sink only consumes/drains","date":"2013-11-01T20:55:31.358Z","type":"message"}
{"nick":"creationix","message":"hmm, not sure my closure idea was a good one","date":"2013-11-01T20:57:22.753Z","type":"message"}
{"nick":"creationix","message":"streams have too much surface area on both sides","date":"2013-11-01T20:57:32.467Z","type":"message"}
{"nick":"creationix","message":"both producer and consumer need to initiate communication on their own at various times","date":"2013-11-01T20:57:52.246Z","type":"message"}
{"nick":"st_luke","reason":"Remote host closed the connection","date":"2013-11-01T21:01:18.418Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T21:02:59.876Z","type":"join"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2013-11-01T21:05:01.711Z","type":"quit"}
{"nick":"jxson","date":"2013-11-01T21:05:08.785Z","type":"join"}
{"nick":"thlorenz_","date":"2013-11-01T21:05:29.483Z","type":"join"}
{"nick":"creationix","message":"Domenic_, ok, so abstractly producer needs to send consumer (DATA, END, ERROR) and consumer needs to send producer (PAUSE, RESUME, ABORT, ERROR)","date":"2013-11-01T21:07:19.277Z","type":"message"}
{"nick":"creationix","message":"I think END/ERROR can be combined into just END and ABORT/ERROR into just ABORT.","date":"2013-11-01T21:09:04.632Z","type":"message"}
{"nick":"thlorenz_","reason":"Ping timeout: 245 seconds","date":"2013-11-01T21:09:46.206Z","type":"quit"}
{"nick":"rowbit","message":"substack, pkrumins: These encoders are STILL down: 173.203.67.76(free3)","date":"2013-11-01T21:11:24.708Z","type":"message"}
{"nick":"feross","reason":"Quit: feross","date":"2013-11-01T21:15:12.893Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 18]","date":"2013-11-01T21:16:45.251Z","type":"message"}
{"nick":"Raynos","message":"creationix: Agreed, { DATA, END } + { PAUSE, RESUME, ABORT }","date":"2013-11-01T21:17:02.579Z","type":"message"}
{"nick":"timoxley","date":"2013-11-01T21:26:20.948Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 246 seconds","date":"2013-11-01T21:31:12.484Z","type":"quit"}
{"nick":"timoxley","reason":"Ping timeout: 289 seconds","date":"2013-11-01T21:31:30.212Z","type":"quit"}
{"nick":"creationix","message":"Raynos, it's finally starting to become clear","date":"2013-11-01T21:32:06.374Z","type":"message"}
{"nick":"creationix","message":"still not sure what's the best concrete syntax though","date":"2013-11-01T21:32:06.374Z","type":"message"}
{"nick":"creationix","message":"event handlers are ugly","date":"2013-11-01T21:32:06.374Z","type":"message"}
{"nick":"creationix","message":"but this is truly two-way communication","date":"2013-11-01T21:32:06.374Z","type":"message"}
{"nick":"rowbit","message":"substack, pkrumins: Encoders down: 173.203.67.76 (free3)","date":"2013-11-01T21:33:54.806Z","type":"message"}
{"nick":"calvinfo","date":"2013-11-01T21:34:35.222Z","type":"join"}
{"nick":"Raynos","message":"creationix: https://gist.github.com/Raynos/7272324","date":"2013-11-01T21:35:11.360Z","type":"message"}
{"nick":"Raynos","message":"that's the simplest possible API i can think of to achieve it","date":"2013-11-01T21:35:20.813Z","type":"message"}
{"nick":"Raynos","message":"creationix: I forgot about errors","date":"2013-11-01T21:39:06.987Z","type":"message"}
{"nick":"Raynos","message":"creationix: so more like https://gist.github.com/Raynos/7272324","date":"2013-11-01T21:42:31.380Z","type":"message"}
{"nick":"Raynos","message":"which just exploded in surface area","date":"2013-11-01T21:42:36.327Z","type":"message"}
{"nick":"defunctzombie","message":"substack: does testling support server stuff yet?","date":"2013-11-01T21:45:32.604Z","type":"message"}
{"nick":"mikolalysenko","date":"2013-11-01T21:46:34.512Z","type":"join"}
{"nick":"jcrugzz","new_nick":"jcrugzz|afk","date":"2013-11-01T21:46:39.019Z","type":"nick"}
{"nick":"feross","date":"2013-11-01T21:47:52.658Z","type":"join"}
{"nick":"creationix","message":"Raynos, here is my take.  One with no helpers and one with setup functions https://gist.github.com/creationix/7270104#minimalist","date":"2013-11-01T21:48:38.402Z","type":"message"}
{"nick":"creationix","message":"hmm, I should adda  pipe example","date":"2013-11-01T21:49:06.104Z","type":"message"}
{"nick":"creationix","message":"wow, that was easy","date":"2013-11-01T21:52:11.961Z","type":"message"}
{"nick":"creationix","message":"I sure love this symmetry","date":"2013-11-01T21:52:15.401Z","type":"message"}
{"nick":"creationix","message":"Domenic_, isaacs check this out^","date":"2013-11-01T21:52:35.158Z","type":"message"}
{"nick":"creationix","message":"Raynos, as much as I love the readable-only-using-sinks idea, it's been hard to use in practice","date":"2013-11-01T21:53:51.585Z","type":"message"}
{"nick":"creationix","message":"and with this simple, symmetric interface for readable and writable, piping them together is super cheap.","date":"2013-11-01T21:54:13.848Z","type":"message"}
{"nick":"Domenic_","message":"creationix: that is pretty interesting. those TODOs seem somewhat crucial, but, I guess they'd be parameters to the makeReadable/makeWritable?","date":"2013-11-01T21:54:24.803Z","type":"message"}
{"nick":"creationix","message":"right, I left out a lot of implementation details","date":"2013-11-01T21:54:47.945Z","type":"message"}
{"nick":"creationix","message":"based on my experience, it shouldn't be any worse than any of the other interfaces I've tried.","date":"2013-11-01T21:55:32.510Z","type":"message"}
{"nick":"creationix","message":"and for substack's concern of being notified when the pipe is done, it can simply take a third param that taps into both readable.abort and writable.end and notifies when one of them happens.","date":"2013-11-01T21:57:11.253Z","type":"message"}
{"nick":"Domenic_","message":"creationix: I don't quite get the correspondence between the first set of object literals and the things returned by your functions.","date":"2013-11-01T21:57:14.019Z","type":"message"}
{"nick":"creationix","message":"Domenic_, so in the first set, I just left placeholders for the event handlers","date":"2013-11-01T21:57:33.909Z","type":"message"}
{"nick":"creationix","message":"in the second I replaced them with a setup function that accepts the two functions","date":"2013-11-01T21:57:50.692Z","type":"message"}
{"nick":"creationix","message":"I like the second better, it's cleaner","date":"2013-11-01T21:58:03.116Z","type":"message"}
{"nick":"creationix","message":"and gives a place to hook init code","date":"2013-11-01T21:58:10.737Z","type":"message"}
{"nick":"Domenic_","message":"the second and the first use completely different property names","date":"2013-11-01T21:58:14.215Z","type":"message"}
{"nick":"Raynos","message":"creationix: I think ERROR & FINISH are important too","date":"2013-11-01T21:58:34.025Z","type":"message"}
{"nick":"creationix","message":"Domenic_, readable in the first has {onwrite, onend, flow, abort} the second has {produce, flow, abort{","date":"2013-11-01T21:59:15.063Z","type":"message"}
{"nick":"creationix","message":"onwrite,onend is replaced with produce(onwrite, onend)","date":"2013-11-01T21:59:27.866Z","type":"message"}
{"nick":"Domenic_","message":"creationix: so the first is just confusing then.","date":"2013-11-01T21:59:41.543Z","type":"message"}
{"nick":"Domenic_","message":"i think i see","date":"2013-11-01T22:00:01.906Z","type":"message"}
{"nick":"Raynos","message":"creationix: do you have examples of where readable-only-using-sinks is hard in practice?","date":"2013-11-01T22:00:11.423Z","type":"message"}
{"nick":"Raynos","message":"creationix: I've found it very clean for writing filters & transforms","date":"2013-11-01T22:00:21.208Z","type":"message"}
{"nick":"Domenic_","message":"so produce is not actually a method you would call as a consumer","date":"2013-11-01T22:00:27.312Z","type":"message"}
{"nick":"Raynos","message":"or is it a hard in practice because of closures and ffs we need more OOP for performance","date":"2013-11-01T22:00:37.297Z","type":"message"}
{"nick":"creationix","message":"Raynos, don't I have that?","date":"2013-11-01T22:00:53.563Z","type":"message"}
{"nick":"creationix","message":"Domenic_, perhaps in docs I should put the common properties first so it's more obvious","date":"2013-11-01T22:00:53.563Z","type":"message"}
{"nick":"creationix","message":"Raynos, right, it's clean for most stuff","date":"2013-11-01T22:01:13.640Z","type":"message"}
{"nick":"creationix","message":"Raynos, but nasty complicated for certain cases","date":"2013-11-01T22:01:17.779Z","type":"message"}
{"nick":"Domenic_","message":"creationix: I think the promise constructor-like pattern I use in the whatwg/streams readme makes this much clearer","date":"2013-11-01T22:01:22.136Z","type":"message"}
{"nick":"Domenic_","message":"i.e. new ReadableStream(function onRead(push, end, error) { ... })","date":"2013-11-01T22:01:36.836Z","type":"message"}
{"nick":"creationix","message":"in js-git where I'm writing protocol commands to negotiate pack-file contents it's a mess","date":"2013-11-01T22:01:41.574Z","type":"message"}
{"nick":"Raynos","message":"creationix: you dont explain how active is bad","date":"2013-11-01T22:01:48.240Z","type":"message"}
{"nick":"creationix","message":"Domenic_, which syntax?  I can adjust I think","date":"2013-11-01T22:02:39.415Z","type":"message"}
{"nick":"Domenic_","message":"creationix: from what I am gathering produce is qualitatively different from flow and abort; you would do `new ReadableStream(function produce(onWrite, onEnd) { ... }) and the resulting object would have .flow and .abort","date":"2013-11-01T22:02:43.923Z","type":"message"}
{"nick":"Raynos","message":"creationix: what makes it a mess ?","date":"2013-11-01T22:03:00.881Z","type":"message"}
{"nick":"creationix","message":"Domenic_, yes!","date":"2013-11-01T22:03:04.860Z","type":"message"}
{"nick":"creationix","message":"Domenic_, both readable and writable need to accept callbacks at setup and return handles","date":"2013-11-01T22:03:24.290Z","type":"message"}
{"nick":"creationix","message":"constructor is probably a lot cleaner for this","date":"2013-11-01T22:03:31.735Z","type":"message"}
{"nick":"Domenic_","message":"creationix: awesome, that sounds nice.","date":"2013-11-01T22:03:33.799Z","type":"message"}
{"nick":"creationix","message":"Plus with constructors you could inherit a tiny pipe helper if you wanted","date":"2013-11-01T22:03:55.603Z","type":"message"}
{"nick":"Domenic_","message":"it seems like the correct way to do \"privileged access to internal operations\" as opposed to Node's \"derive a class and overwrite underscored-methods\"","date":"2013-11-01T22:04:09.128Z","type":"message"}
{"nick":"creationix","message":"though binding would be a problem","date":"2013-11-01T22:04:11.838Z","type":"message"}
{"nick":"creationix","message":"Raynos, it's kinda hard to explain because it's been several weeks","date":"2013-11-01T22:04:51.940Z","type":"message"}
{"nick":"creationix","message":"Raynos, but basically it's cases where I'm writing data to a filter that eventually goes to a TCP sink","date":"2013-11-01T22:05:30.947Z","type":"message"}
{"nick":"creationix","message":"but I write the data based on program events, not based on some other input stream","date":"2013-11-01T22:05:31.162Z","type":"message"}
{"nick":"creationix","message":"like state machine outputs in some protocol logic","date":"2013-11-01T22:05:34.333Z","type":"message"}
{"nick":"thlorenz_","date":"2013-11-01T22:06:06.722Z","type":"join"}
{"nick":"creationix","message":"Domenic_, ok, I'll write a constructor version.  That should be a lot cleaner...","date":"2013-11-01T22:06:16.571Z","type":"message"}
{"nick":"thlorenz_","reason":"Ping timeout: 245 seconds","date":"2013-11-01T22:10:26.645Z","type":"quit"}
{"nick":"creationix","message":"Domenic_, what about instead of passing in (onWrite, onEnd) we pass in an object containing {write,end} so that \"this\" scope can be preserved without creating bound functions?","date":"2013-11-01T22:10:45.739Z","type":"message"}
{"nick":"creationix","message":"the less functions we create the better","date":"2013-11-01T22:10:45.950Z","type":"message"}
{"nick":"creationix","message":"also they could update their write function dynamically and we'd get the update","date":"2013-11-01T22:10:54.106Z","type":"message"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2013-11-01T22:11:39.092Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-11-01T22:12:32.337Z","type":"quit"}
{"nick":"Maciek416","reason":"Remote host closed the connection","date":"2013-11-01T22:14:19.492Z","type":"quit"}
{"nick":"Maciek416","date":"2013-11-01T22:14:51.728Z","type":"join"}
{"nick":"Domenic_","message":"creationix: hmm probably good? not sure i completely understand but worth looking at.","date":"2013-11-01T22:15:36.305Z","type":"message"}
{"nick":"Domenic_","message":"creationix: unfortunately i think i have to stop paying attention to IRC for a while, running out of steam for the day and lots of real-job work still to do :(","date":"2013-11-01T22:16:03.878Z","type":"message"}
{"nick":"creationix","message":"Domenic_, ok, take care","date":"2013-11-01T22:16:35.838Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 9, free: 19]","date":"2013-11-01T22:16:45.227Z","type":"message"}
{"nick":"Domenic_","message":"creationix: you too, very fruitful day I feel. really looking forward to being able to work on this stuff tomorrow for reals.","date":"2013-11-01T22:17:01.691Z","type":"message"}
{"nick":"Maciek416_","date":"2013-11-01T22:17:19.499Z","type":"join"}
{"nick":"tmcw","date":"2013-11-01T22:17:24.462Z","type":"quit"}
{"nick":"Maciek416","reason":"Ping timeout: 240 seconds","date":"2013-11-01T22:19:11.719Z","type":"quit"}
{"nick":"Maciek416_","new_nick":"Maciek416","date":"2013-11-01T22:26:04.903Z","type":"nick"}
{"nick":"timoxley","date":"2013-11-01T22:27:03.777Z","type":"join"}
{"nick":"timoxley","reason":"Ping timeout: 272 seconds","date":"2013-11-01T22:31:55.729Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T22:42:31.552Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 246 seconds","date":"2013-11-01T22:50:39.471Z","type":"quit"}
{"nick":"thlorenz","date":"2013-11-01T22:55:36.741Z","type":"join"}
{"nick":"DTrejo","reason":"Remote host closed the connection","date":"2013-11-01T23:15:07.767Z","type":"quit"}
{"nick":"DTrejo","date":"2013-11-01T23:15:43.967Z","type":"join"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 1, free: 25]","date":"2013-11-01T23:16:45.273Z","type":"message"}
{"nick":"DTrejo","reason":"Ping timeout: 240 seconds","date":"2013-11-01T23:19:53.515Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-11-01T23:20:09.637Z","type":"nick"}
{"nick":"AvianFlu","date":"2013-11-01T23:23:11.355Z","type":"join"}
{"nick":"AvianFlu_","date":"2013-11-01T23:23:31.244Z","type":"join"}
{"nick":"AvianFlu_","reason":"Remote host closed the connection","date":"2013-11-01T23:24:09.470Z","type":"quit"}
{"nick":"AvianFlu","reason":"Ping timeout: 240 seconds","date":"2013-11-01T23:27:33.745Z","type":"quit"}
{"nick":"ralphtheninja","reason":"Quit: leaving","date":"2013-11-01T23:27:39.704Z","type":"quit"}
{"nick":"timoxley","date":"2013-11-01T23:27:46.217Z","type":"join"}
{"nick":"feross","reason":"Quit: feross","date":"2013-11-01T23:31:00.304Z","type":"quit"}
{"nick":"DTrejo","date":"2013-11-01T23:32:22.141Z","type":"join"}
{"nick":"timoxley","reason":"Ping timeout: 272 seconds","date":"2013-11-01T23:32:27.188Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 260 seconds","date":"2013-11-01T23:36:04.083Z","type":"quit"}
{"nick":"DTrejo","reason":"Ping timeout: 272 seconds","date":"2013-11-01T23:37:25.866Z","type":"quit"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2013-11-01T23:39:16.894Z","type":"quit"}
{"nick":"cianomaidin","date":"2013-11-01T23:41:10.830Z","type":"join"}
{"nick":"yorick","reason":"Remote host closed the connection","date":"2013-11-01T23:42:04.210Z","type":"quit"}
{"nick":"feross","date":"2013-11-01T23:52:44.834Z","type":"join"}
{"nick":"Raynos","message":"spion: see answers :D","date":"2013-11-01T23:59:09.782Z","type":"message"}
