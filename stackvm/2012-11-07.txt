{"nick":"Raynos","message":"https://gist.github.com/4028488","date":"2012-11-07T00:07:34.418Z","type":"message"}
{"nick":"dominictarr","message":"yay, it's another control flow lib!","date":"2012-11-07T00:09:36.214Z","type":"message"}
{"nick":"thatguydan","date":"2012-11-07T00:09:52.801Z","type":"join"}
{"nick":"dominictarr","message":"but this is exactly the one I would use, if I used CF libs","date":"2012-11-07T00:10:10.461Z","type":"message"}
{"nick":"dominictarr","message":"also, nice gimmick.","date":"2012-11-07T00:10:25.781Z","type":"message"}
{"nick":"Raynos","message":"you dont really need sugar for sequential flows","date":"2012-11-07T00:16:10.350Z","type":"message"}
{"nick":"Raynos","message":"but for do x related things in parallel and aggregate results","date":"2012-11-07T00:16:20.320Z","type":"message"}
{"nick":"Raynos","message":"its a pain to do it manually","date":"2012-11-07T00:16:24.147Z","type":"message"}
{"nick":"dominictarr","message":"yeah.","date":"2012-11-07T00:17:22.793Z","type":"message"}
{"nick":"dominictarr","message":"normally I just do","date":"2012-11-07T00:17:28.610Z","type":"message"}
{"nick":"dominictarr","message":"var n = expected","date":"2012-11-07T00:17:40.157Z","type":"message"}
{"nick":"dominictarr","message":"then cb = function (err, null) {if(!--n) return; ...}","date":"2012-11-07T00:18:05.913Z","type":"message"}
{"nick":"Raynos","message":"yeah that shit sucks","date":"2012-11-07T00:19:40.245Z","type":"message"}
{"nick":"substack","message":"thinking I should be using convoy-stream for secure-peer but it's not obvious how to use it for what I want","date":"2012-11-07T00:20:28.734Z","type":"message"}
{"nick":"dominictarr","message":"substack, secure peer was exactly the use case I had in mind writing convoy stream.","date":"2012-11-07T00:20:59.724Z","type":"message"}
{"nick":"substack","message":"convoy-stream isn't behaving as I might expect","date":"2012-11-07T00:21:17.529Z","type":"message"}
{"nick":"dominictarr","message":"you'd create a first stream, and use (say) dnode to exchange DH, and then end the first stream, and then return create a second stream and encrypt that using the DH key","date":"2012-11-07T00:22:37.630Z","type":"message"}
{"nick":"dominictarr","message":"substack, can you show me your code?","date":"2012-11-07T00:22:49.745Z","type":"message"}
{"nick":"substack","message":"yes I get conceptually what it's supposed to do","date":"2012-11-07T00:23:25.486Z","type":"message"}
{"nick":"substack","message":"https://gist.github.com/4028657","date":"2012-11-07T00:23:38.936Z","type":"message"}
{"nick":"substack","message":"this does nothing ^","date":"2012-11-07T00:23:42.896Z","type":"message"}
{"nick":"substack","message":"or when I header.write() same thing","date":"2012-11-07T00:24:31.409Z","type":"message"}
{"nick":"substack","message":"how do I make this module do things","date":"2012-11-07T00:24:43.505Z","type":"message"}
{"nick":"dominictarr","message":"it's duplex","date":"2012-11-07T00:24:44.967Z","type":"message"}
{"nick":"dominictarr","message":"you have to attach the convoy to another instance","date":"2012-11-07T00:25:08.012Z","type":"message"}
{"nick":"dominictarr","message":"h.write('hello') -> _h.on('data',...)","date":"2012-11-07T00:25:35.693Z","type":"message"}
{"nick":"dominictarr","message":"where _h is the corrisponding stream on the second convoy","date":"2012-11-07T00:25:54.545Z","type":"message"}
{"nick":"dominictarr","message":"substack, ^^","date":"2012-11-07T00:26:02.159Z","type":"message"}
{"nick":"substack","message":"what","date":"2012-11-07T00:26:26.925Z","type":"message"}
{"nick":"substack","message":"but I haven't written that part yet","date":"2012-11-07T00:26:33.206Z","type":"message"}
{"nick":"substack","message":"I don't want to design the whole thing up-front","date":"2012-11-07T00:26:43.966Z","type":"message"}
{"nick":"substack","message":"I pretty much just want to give a module an array of streams and whenever the input writes a .end() it will skip to the next stream","date":"2012-11-07T00:27:50.620Z","type":"message"}
{"nick":"dominictarr","message":"like this https://gist.github.com/4028683","date":"2012-11-07T00:27:51.218Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 8, free: 21]","date":"2012-11-07T00:27:56.782Z","type":"message"}
{"nick":"substack","message":"dominictarr: what is going on","date":"2012-11-07T00:28:35.324Z","type":"message"}
{"nick":"substack","message":"you have var header = ... twice","date":"2012-11-07T00:28:41.973Z","type":"message"}
{"nick":"substack","message":"I'm not sold on this api","date":"2012-11-07T00:29:15.448Z","type":"message"}
{"nick":"dominictarr","message":"fixed","date":"2012-11-07T00:29:19.673Z","type":"message"}
{"nick":"substack","message":"are convoy streams meant to be 1:1 with createStream()?","date":"2012-11-07T00:30:13.336Z","type":"message"}
{"nick":"substack","message":"1 convoy() for each createStream()","date":"2012-11-07T00:30:32.603Z","type":"message"}
{"nick":"dominictarr","message":"no, each createStream() instance is packed into the convoy","date":"2012-11-07T00:30:36.968Z","type":"message"}
{"nick":"dominictarr","message":"with a length delimeted framing","date":"2012-11-07T00:30:47.902Z","type":"message"}
{"nick":"substack","message":"why do you need separate calls to convoy()?","date":"2012-11-07T00:30:54.866Z","type":"message"}
{"nick":"dominictarr","message":"because there needs to be two convoys","date":"2012-11-07T00:31:07.899Z","type":"message"}
{"nick":"dominictarr","message":"one either side of the network","date":"2012-11-07T00:31:14.271Z","type":"message"}
{"nick":"dominictarr","message":"or, reading a file the origininal one wrote.","date":"2012-11-07T00:31:26.801Z","type":"message"}
{"nick":"substack","message":"this api is not ideal","date":"2012-11-07T00:32:20.256Z","type":"message"}
{"nick":"dominictarr","message":"what would you prefer?","date":"2012-11-07T00:32:38.087Z","type":"message"}
{"nick":"substack","message":"not sure yet","date":"2012-11-07T00:33:24.060Z","type":"message"}
{"nick":"substack","message":"but convoy is far too unintuitive","date":"2012-11-07T00:33:31.060Z","type":"message"}
{"nick":"substack","message":"for what it does","date":"2012-11-07T00:33:38.381Z","type":"message"}
{"nick":"mike-d","message":"substack, domonictarr: since node streams are like unix streams and are used to implement pipes like \"who | sort | lpr\", where does the a.pipe(b).pipe(a) pattern come in, is that node specific? ( I understand the duplex pattern, just wondering if this is a node disconnect from unix pipes or am I missing something )  \u001c","date":"2012-11-07T00:35:26.751Z","type":"message"}
{"nick":"dominictarr","message":"okay, well, you could do something simpler maybe","date":"2012-11-07T00:35:38.544Z","type":"message"}
{"nick":"dominictarr","message":"substack, also see this https://gist.github.com/dominictarr/header-stream","date":"2012-11-07T00:35:42.913Z","type":"message"}
{"nick":"substack","message":"mike-d: it's something you can't really do with unix pipes","date":"2012-11-07T00:36:19.273Z","type":"message"}
{"nick":"substack","message":"unless you write a program","date":"2012-11-07T00:36:27.630Z","type":"message"}
{"nick":"dominictarr","message":"mike-d, `SOURC.pipe(DEST)` === `SOURCE | DEST`","date":"2012-11-07T00:36:36.314Z","type":"message"}
{"nick":"dominictarr","message":"oops reading your question again","date":"2012-11-07T00:36:56.830Z","type":"message"}
{"nick":"dominictarr","message":"mike-d, I understand that there IS a way to do duplex pipes in bash... but it's not easy.","date":"2012-11-07T00:37:37.220Z","type":"message"}
{"nick":"dominictarr","message":"here it is","date":"2012-11-07T00:38:33.100Z","type":"message"}
{"nick":"dominictarr","message":"http://www.gnu.org/software/bash/manual/html_node/Coprocesses.html","date":"2012-11-07T00:38:33.753Z","type":"message"}
{"nick":"mike-d","message":"I have been writing a new stream from the ground up, looking at the C api and src.pipe(dest) seems to be the only thing node streams have in common with posix","date":"2012-11-07T00:38:44.606Z","type":"message"}
{"nick":"tomshreds","reason":"Ping timeout: 260 seconds","date":"2012-11-07T00:39:54.640Z","type":"quit"}
{"nick":"dominictarr","message":"mike-d, duplex streams are more a pattern than an API.","date":"2012-11-07T00:42:26.045Z","type":"message"}
{"nick":"dominictarr","message":"you could still do them in C","date":"2012-11-07T00:42:35.223Z","type":"message"}
{"nick":"mike-d","message":"domonictarr: right and also thanks for the link...","date":"2012-11-07T00:43:16.691Z","type":"message"}
{"nick":"substack","message":"dominictarr: here's what I'm thinking for a convoy api https://gist.github.com/4028785","date":"2012-11-07T00:45:07.768Z","type":"message"}
{"nick":"substack","message":"when the current stream emits an end it just goes to the next one","date":"2012-11-07T00:45:30.924Z","type":"message"}
{"nick":"dominictarr","message":"substack, right. that is not that far from what I have","date":"2012-11-07T00:46:28.130Z","type":"message"}
{"nick":"dominictarr","message":"just iterate over the array, call header.createStream() and pipe it to that stream in the array...","date":"2012-11-07T00:46:52.357Z","type":"message"}
{"nick":"substack","message":"but with the current design why would I need multiple convoy objects?","date":"2012-11-07T00:46:57.819Z","type":"message"}
{"nick":"dominictarr","message":"the second convoy object is on the other side of the network","date":"2012-11-07T00:47:20.136Z","type":"message"}
{"nick":"dominictarr","message":"but you where logging output from the inner stream,","date":"2012-11-07T00:47:35.816Z","type":"message"}
{"nick":"dominictarr","message":"either log from outer stream","date":"2012-11-07T00:47:44.166Z","type":"message"}
{"nick":"substack","message":"I need to use a convoy stream on both sides?","date":"2012-11-07T00:47:51.059Z","type":"message"}
{"nick":"dominictarr","message":"yup","date":"2012-11-07T00:47:54.927Z","type":"message"}
{"nick":"substack","message":"ok this won't work then","date":"2012-11-07T00:47:58.942Z","type":"message"}
{"nick":"substack","message":"I thought this module did something different from what I had in mind","date":"2012-11-07T00:48:42.444Z","type":"message"}
{"nick":"dominictarr","message":"the point is to be able to recreate the boundries of the streams, not just contatenate them.","date":"2012-11-07T00:48:43.318Z","type":"message"}
{"nick":"dominictarr","message":"do you want something more like this https://npmjs.org/package/kat","date":"2012-11-07T00:49:25.556Z","type":"message"}
{"nick":"substack","message":"I just want to shift what the pipe endpoint is","date":"2012-11-07T00:49:26.863Z","type":"message"}
{"nick":"substack","message":"with buffering","date":"2012-11-07T00:49:32.629Z","type":"message"}
{"nick":"substack","message":"I don't want concatenation","date":"2012-11-07T00:49:52.598Z","type":"message"}
{"nick":"dominictarr","message":"hmm, can you elaborate on \"shift what the pipe endpoint is\" ?","date":"2012-11-07T00:50:21.477Z","type":"message"}
{"nick":"substack","message":"I want to pipe into es.split() but then be able to take that off and pipe somewhere else","date":"2012-11-07T00:50:30.001Z","type":"message"}
{"nick":"substack","message":"I only want to buffer newlines for the start of it","date":"2012-11-07T00:50:42.052Z","type":"message"}
{"nick":"substack","message":"but then I want to turn the machinery off","date":"2012-11-07T00:50:52.185Z","type":"message"}
{"nick":"substack","message":"and pipe directly","date":"2012-11-07T00:50:55.788Z","type":"message"}
{"nick":"dominictarr","message":"right, yeah, I have thought about this. for the last stream you don't need framing anymore","date":"2012-11-07T00:51:18.637Z","type":"message"}
{"nick":"substack","message":"I don't see the utility of framing at all for what I'm envisioning","date":"2012-11-07T00:51:46.652Z","type":"message"}
{"nick":"dominictarr","message":"what do you think of http://npm.im/header-stream","date":"2012-11-07T00:52:22.145Z","type":"message"}
{"nick":"substack","message":"I'm more looking for a convenience library for switching stream endpoints","date":"2012-11-07T00:52:28.976Z","type":"message"}
{"nick":"substack","message":"so I can switch between different streaming parsers","date":"2012-11-07T00:52:36.556Z","type":"message"}
{"nick":"substack","message":"and so I can shift back into raw mode","date":"2012-11-07T00:52:42.048Z","type":"message"}
{"nick":"dominictarr","message":"right, so you'd need to parse the stream endpoint your self","date":"2012-11-07T00:53:03.890Z","type":"message"}
{"nick":"substack","message":"I looked at header-stream but there's not much there to evaluate it","date":"2012-11-07T00:53:27.151Z","type":"message"}
{"nick":"substack","message":"only that test and the source itself","date":"2012-11-07T00:53:32.847Z","type":"message"}
{"nick":"dominictarr","message":"convoy is a way of doing that, but it implements a particular way of packaging the stream","date":"2012-11-07T00:54:13.532Z","type":"message"}
{"nick":"dominictarr","message":"I also have this https://github.com/dominictarr/client-reloader which uses header-stream","date":"2012-11-07T00:54:29.609Z","type":"message"}
{"nick":"substack","message":"ok I'll write a module for what I have in mind","date":"2012-11-07T00:54:32.998Z","type":"message"}
{"nick":"dominictarr","message":"this stuff isn't documented yet though, just writing this because I need it for my cascadia demos.","date":"2012-11-07T00:54:54.965Z","type":"message"}
{"nick":"_sorensen","reason":"Ping timeout: 244 seconds","date":"2012-11-07T00:55:47.199Z","type":"quit"}
{"nick":"substack","message":"I'm thinking more like a hose that you can plug into different things","date":"2012-11-07T00:55:50.747Z","type":"message"}
{"nick":"substack","message":"without having to go and get a new hose","date":"2012-11-07T00:55:58.919Z","type":"message"}
{"nick":"mike-d","message":"dominictarr: the C imp is very clean, read(int, void *, size_t); and write(int, const void *, size_t); found in unistd.h and the pipe/fd takes care of the buffering, I do see a need for pause() and resume() in node that act on the src stream, but I really like the unix way so i'm coding a new stream and just adding pipe() for the wiring","date":"2012-11-07T00:56:17.812Z","type":"message"}
{"nick":"dominictarr","message":"mike-d, have you seen isaacs/readable-stream ?","date":"2012-11-07T00:57:03.049Z","type":"message"}
{"nick":"substack","message":"mike-d: pause() and resume() aren't needed in the new stream implementation in node","date":"2012-11-07T00:57:04.943Z","type":"message"}
{"nick":"substack","message":"it's the same as the read() and write() calls","date":"2012-11-07T00:57:16.240Z","type":"message"}
{"nick":"dominictarr","message":"like, a huge bunch of work has gone into this. going and inventing a new thing is silly because you won't be able to use anyone's modules,","date":"2012-11-07T00:57:55.849Z","type":"message"}
{"nick":"dominictarr","message":"and they won't be able to use yours.","date":"2012-11-07T00:58:02.976Z","type":"message"}
{"nick":"mike-d","message":"if you don't have a read call, which in my current imp, I dont, so I use pause resume, yes, I looked at isaacs new streams","date":"2012-11-07T00:58:31.150Z","type":"message"}
{"nick":"substack","message":"calling this thing next-stream","date":"2012-11-07T00:58:36.233Z","type":"message"}
{"nick":"maks","reason":"Quit: Page closed","date":"2012-11-07T01:00:04.756Z","type":"quit"}
{"nick":"mike-d","message":"right now I only have pipe, write, pause, resume… and the base Stream constructor takes the read function which can have multiple args","date":"2012-11-07T01:00:59.935Z","type":"message"}
{"nick":"mike-d","message":"I ditched read because something has to kick off the stream, which is the first call to write","date":"2012-11-07T01:01:50.486Z","type":"message"}
{"nick":"mike-d","message":"dominictarr, substack: this is the api, https://gist.github.com/4028874","date":"2012-11-07T01:07:20.909Z","type":"message"}
{"nick":"substack","message":"mike-d: have you seen https://github.com/dominictarr/through ?","date":"2012-11-07T01:08:21.196Z","type":"message"}
{"nick":"mike-d","message":"substack: yes, looked at dominics and yours plus isaacs quite a bit","date":"2012-11-07T01:10:44.786Z","type":"message"}
{"nick":"dominictarr","message":"I gotta go! catch you dudes later","date":"2012-11-07T01:11:47.758Z","type":"message"}
{"nick":"dominictarr","reason":"Ping timeout: 252 seconds","date":"2012-11-07T01:17:18.483Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 34]","date":"2012-11-07T01:27:56.776Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-11-07T01:37:24.666Z","type":"quit"}
{"nick":"st_luke","date":"2012-11-07T01:51:49.798Z","type":"join"}
{"nick":"dominictarr","date":"2012-11-07T02:01:41.487Z","type":"join"}
{"nick":"mikeal","date":"2012-11-07T02:02:10.068Z","type":"join"}
{"nick":"substack","message":"dominictarr: I realized that it makes much more sense to only just use through for this","date":"2012-11-07T02:05:57.575Z","type":"message"}
{"nick":"substack","message":"the other abstractions don't fit very well","date":"2012-11-07T02:06:03.580Z","type":"message"}
{"nick":"dominictarr","message":"hmm, what about duplex?","date":"2012-11-07T02:06:19.647Z","type":"message"}
{"nick":"substack","message":"and the one I had in mind to make it easier actually would be really difficult since messages could be split at boundaries","date":"2012-11-07T02:06:36.800Z","type":"message"}
{"nick":"dominictarr","message":"right, that is why I put framing into convoy","date":"2012-11-07T02:06:57.651Z","type":"message"}
{"nick":"dominictarr","message":"if you only need framing for the handshake it's easier, because you can just use line seperated json.","date":"2012-11-07T02:07:29.889Z","type":"message"}
{"nick":"substack","message":"I just want to grab a line","date":"2012-11-07T02:07:44.121Z","type":"message"}
{"nick":"substack","message":"and then I want it to be regular tcp","date":"2012-11-07T02:07:51.738Z","type":"message"}
{"nick":"dominictarr","message":"1 line?","date":"2012-11-07T02:08:29.228Z","type":"message"}
{"nick":"substack","message":"yes","date":"2012-11-07T02:08:34.518Z","type":"message"}
{"nick":"dominictarr","message":"header-stream does exactly that.","date":"2012-11-07T02:08:55.736Z","type":"message"}
{"nick":"substack","message":"was also looking at header-stream","date":"2012-11-07T02:09:11.211Z","type":"message"}
{"nick":"substack","message":"no examples :(","date":"2012-11-07T02:09:15.195Z","type":"message"}
{"nick":"dominictarr","message":"I'll write a quick example ... although, I must confess that I just used monkeypatching","date":"2012-11-07T02:09:31.447Z","type":"message"}
{"nick":"substack","message":"oh so the other part","date":"2012-11-07T02:09:57.355Z","type":"message"}
{"nick":"substack","message":"was it's not obvious how I should go about returning a duplex stream while simultaneously using header-stream","date":"2012-11-07T02:10:20.918Z","type":"message"}
{"nick":"substack","message":"I've run into this before","date":"2012-11-07T02:10:26.008Z","type":"message"}
{"nick":"substack","message":"where I want to stick a writable stream on the front of something but maintain the api of the endpoint","date":"2012-11-07T02:11:02.206Z","type":"message"}
{"nick":"substack","message":"mixing streams with stream methods doesn't compose well","date":"2012-11-07T02:11:11.777Z","type":"message"}
{"nick":"fotoverite","date":"2012-11-07T02:11:57.503Z","type":"join"}
{"nick":"substack","message":"ok I have something working","date":"2012-11-07T02:17:22.455Z","type":"message"}
{"nick":"substack","message":"did sec.on('pipe', function () { sec.writeHead() })","date":"2012-11-07T02:17:31.648Z","type":"message"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2012-11-07T02:18:31.212Z","type":"quit"}
{"nick":"dominictarr","message":"substack, put the writeHead in next tick.","date":"2012-11-07T02:18:34.553Z","type":"message"}
{"nick":"Raynos","message":"NEW RULE","date":"2012-11-07T02:19:50.037Z","type":"message"}
{"nick":"LOUDBOT","message":"WHO PUT ENTER RIGHT NEXT TO THE BACKSPACE SERIOUSLY","date":"2012-11-07T02:19:51.056Z","type":"message"}
{"nick":"Raynos","message":"ALL COMPLEX CODE HAS TO BE WRITTEN IN CAPSLOCK SCRIPT","date":"2012-11-07T02:19:57.544Z","type":"message"}
{"nick":"LOUDBOT","message":"ACHIEVEMENT UNLOCKED: EVEN NUMBERS","date":"2012-11-07T02:19:57.981Z","type":"message"}
{"nick":"dominictarr","message":"because pipe is emitted before the whole pipeline is connected.","date":"2012-11-07T02:20:00.230Z","type":"message"}
{"nick":"dominictarr","message":"ALSO; UGLY HACKS MUST BE FORMATTED UGLY","date":"2012-11-07T02:20:29.571Z","type":"message"}
{"nick":"LOUDBOT","message":"AND NO IT WASN'T A SOCK","date":"2012-11-07T02:20:30.136Z","type":"message"}
{"nick":"dominictarr","message":"RAYNOS, WE SHOULD USE YOUR RULE IN OUR NKO THING","date":"2012-11-07T02:21:40.982Z","type":"message"}
{"nick":"LOUDBOT","message":"JUMPSTART YOUR CAREER WITH NUDE PICS POSTED TO FOUR CHANNEL","date":"2012-11-07T02:21:41.640Z","type":"message"}
{"nick":"Raynos","message":"dominictarr: that's why your code looks ugly?","date":"2012-11-07T02:21:46.611Z","type":"message"}
{"nick":"dominictarr","message":"AN UGLY PROBLEM CALLS FOR AN UGLY SOLUTION","date":"2012-11-07T02:22:31.643Z","type":"message"}
{"nick":"LOUDBOT","message":"THE CREEPS WERE LOOKING AT THE WINDOWS BECAUSE SUPER MOP-TOP WAS PLAYING THE DRUMS! ULTRA-BEAN WAS PLAYING THE TRUMPETS!!!","date":"2012-11-07T02:22:32.353Z","type":"message"}
{"nick":"tphummel","reason":"Quit: tphummel","date":"2012-11-07T02:22:35.537Z","type":"quit"}
{"nick":"AvianFlu","message":"OH MY GOD TOO MANY CAPS I DON'T UNDERSTAND WHAT'S GOING ON","date":"2012-11-07T02:22:48.787Z","type":"message"}
{"nick":"LOUDBOT","message":"BRICKS I SAY","date":"2012-11-07T02:22:49.498Z","type":"message"}
{"nick":"AvianFlu","message":"OH YES.  OF COURSE IT'S BRICKS.","date":"2012-11-07T02:22:58.082Z","type":"message"}
{"nick":"LOUDBOT","message":"YOU ARE ONLY LYING TO YOURSELF.  UNDO THAT SHIT AND TRY AGAIN.","date":"2012-11-07T02:22:58.505Z","type":"message"}
{"nick":"AvianFlu","message":"WHAT THE HELL YOU JUST SAID IT WAS BRICKS!","date":"2012-11-07T02:23:08.667Z","type":"message"}
{"nick":"LOUDBOT","message":"THE NEXT PERSON TO TYPE IN CAPS WILL SUFFER","date":"2012-11-07T02:23:09.023Z","type":"message"}
{"nick":"Raynos","message":"I SUFFER","date":"2012-11-07T02:23:15.898Z","type":"message"}
{"nick":"LOUDBOT","message":"\"CUNT NUGGET SON OF A BITCH GYPSY\"","date":"2012-11-07T02:23:16.291Z","type":"message"}
{"nick":"Raynos","message":":D","date":"2012-11-07T02:23:20.419Z","type":"message"}
{"nick":"dominictarr","message":"BREAKING NEWS \"LOUDBOT\" PASSES TURING TEST","date":"2012-11-07T02:24:12.597Z","type":"message"}
{"nick":"LOUDBOT","message":"ALMOST DONE, GO ON WITHOUT ME","date":"2012-11-07T02:24:13.161Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-11-07T02:24:19.406Z","type":"quit"}
{"nick":"dominictarr","message":"substack, some example code in the header-stream/README","date":"2012-11-07T02:25:07.978Z","type":"message"}
{"nick":"substack","message":"sweet","date":"2012-11-07T02:27:32.661Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 13]","date":"2012-11-07T02:27:56.674Z","type":"message"}
{"nick":"st_luke","message":"one great thing about living in new york is that you learn you don't really miss anything at all by staying in and writing code","date":"2012-11-07T02:32:56.160Z","type":"message"}
{"nick":"anoemi","date":"2012-11-07T02:33:38.494Z","type":"join"}
{"nick":"dominictarr","reason":"Ping timeout: 252 seconds","date":"2012-11-07T02:45:33.472Z","type":"quit"}
{"nick":"dominictarr","date":"2012-11-07T02:49:14.148Z","type":"join"}
{"nick":"mikeal","date":"2012-11-07T02:54:28.594Z","type":"join"}
{"nick":"Raynos","message":"st_luke: come to the bay","date":"2012-11-07T02:58:15.789Z","type":"message"}
{"nick":"Raynos","message":"there's tons of coding parties here","date":"2012-11-07T02:58:27.409Z","type":"message"}
{"nick":"Raynos","message":"Actually I don't think I've ever been to a coding party","date":"2012-11-07T02:58:37.859Z","type":"message"}
{"nick":"mikeal","reason":"Ping timeout: 255 seconds","date":"2012-11-07T02:58:59.480Z","type":"quit"}
{"nick":"Raynos","message":"maxogden: have you been to coding parties?","date":"2012-11-07T03:00:48.325Z","type":"message"}
{"nick":"mikeal","date":"2012-11-07T03:02:01.471Z","type":"join"}
{"nick":"dominictarr","message":"I have","date":"2012-11-07T03:02:15.296Z","type":"message"}
{"nick":"substack","message":"time for tacos","date":"2012-11-07T03:04:59.755Z","type":"message"}
{"nick":"substack","action":"made a giant vat of ingredients","date":"2012-11-07T03:05:17.716Z","type":"action"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-11-07T03:16:01.617Z","type":"quit"}
{"nick":"dominictarr","reason":"Ping timeout: 246 seconds","date":"2012-11-07T03:19:32.063Z","type":"quit"}
{"nick":"pikpik","reason":"Changing host","date":"2012-11-07T03:20:19.992Z","type":"quit"}
{"nick":"pikpik","date":"2012-11-07T03:20:20.122Z","type":"join"}
{"nick":"pikpik","reason":"Changing host","date":"2012-11-07T03:20:20.492Z","type":"quit"}
{"nick":"pikpik","date":"2012-11-07T03:20:20.622Z","type":"join"}
{"nick":"jibay_","reason":"Quit: Leaving","date":"2012-11-07T03:27:32.879Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 3, free: 17]","date":"2012-11-07T03:27:56.742Z","type":"message"}
{"nick":"tphummel","date":"2012-11-07T03:36:20.584Z","type":"join"}
{"nick":"tphummel","reason":"Quit: tphummel","date":"2012-11-07T03:43:43.433Z","type":"quit"}
{"nick":"mikeal","date":"2012-11-07T03:46:11.561Z","type":"join"}
{"nick":"mikeal","reason":"Ping timeout: 255 seconds","date":"2012-11-07T03:52:05.359Z","type":"quit"}
{"nick":"st_luke","message":"Raynos: yes, I need to spend some more time in the bay area.","date":"2012-11-07T03:55:41.685Z","type":"message"}
{"nick":"Raynos","message":"dominictarr: when your down here we should throw some","date":"2012-11-07T03:56:35.824Z","type":"message"}
{"nick":"Raynos","message":"In joyent's offices cc isaacs","date":"2012-11-07T03:56:44.026Z","type":"message"}
{"nick":"mikeal","date":"2012-11-07T04:18:14.647Z","type":"join"}
{"nick":"mikeal","reason":"Ping timeout: 260 seconds","date":"2012-11-07T04:27:50.431Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 35]","date":"2012-11-07T04:27:56.736Z","type":"message"}
{"nick":"mikeal","date":"2012-11-07T04:28:51.762Z","type":"join"}
{"nick":"anoemi","reason":"Quit: anoemi","date":"2012-11-07T04:40:17.737Z","type":"quit"}
{"nick":"rowbit","message":"Daily usage stats: [developer: 35, free: 988]","date":"2012-11-07T05:27:56.693Z","type":"message"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 64]","date":"2012-11-07T05:27:58.331Z","type":"message"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2012-11-07T05:31:02.369Z","type":"quit"}
{"nick":"tphummel","date":"2012-11-07T05:34:51.513Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-11-07T05:36:08.293Z","type":"quit"}
{"nick":"tphummel","reason":"Client Quit","date":"2012-11-07T05:38:49.186Z","type":"quit"}
{"nick":"mikeal","date":"2012-11-07T05:40:15.630Z","type":"join"}
{"nick":"tphummel","date":"2012-11-07T05:44:44.746Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2012-11-07T05:45:05.488Z","type":"quit"}
{"nick":"tphummel","reason":"Client Quit","date":"2012-11-07T05:45:11.203Z","type":"quit"}
{"nick":"shykes","new_nick":"zz_shykes","date":"2012-11-07T05:47:18.564Z","type":"nick"}
{"nick":"mikeal","date":"2012-11-07T06:04:47.545Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2012-11-07T06:05:50.541Z","type":"quit"}
{"nick":"zz_shykes","new_nick":"shykes","date":"2012-11-07T06:06:19.298Z","type":"nick"}
{"nick":"shykes","new_nick":"zz_shykes","date":"2012-11-07T06:08:55.253Z","type":"nick"}
{"nick":"tphummel","date":"2012-11-07T06:20:59.607Z","type":"join"}
{"nick":"tphummel","reason":"Client Quit","date":"2012-11-07T06:23:27.453Z","type":"quit"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 69]","date":"2012-11-07T06:27:56.604Z","type":"message"}
{"nick":"mikeal","date":"2012-11-07T06:28:38.194Z","type":"join"}
{"nick":"fotoverite","reason":"Read error: Connection reset by peer","date":"2012-11-07T06:29:59.686Z","type":"quit"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-11-07T06:41:01.310Z","type":"quit"}
{"nick":"mikeal","date":"2012-11-07T06:47:36.275Z","type":"join"}
{"nick":"substack","message":"ok blarg this works https://github.com/substack/rsa-unpack","date":"2012-11-07T06:58:43.165Z","type":"message"}
{"nick":"substack","message":"if only core crypto just let me create a DiffieHellman instance directly from a PEM","date":"2012-11-07T06:59:05.701Z","type":"message"}
{"nick":"thatguydan","reason":"Quit: thatguydan","date":"2012-11-07T06:59:18.889Z","type":"quit"}
{"nick":"substack","message":"I still can't seem to create DH objects even with decoded PEMs :(","date":"2012-11-07T07:07:58.464Z","type":"message"}
{"nick":"zz_shykes","new_nick":"shykes","date":"2012-11-07T07:18:48.608Z","type":"nick"}
{"nick":"substack","message":"hmmm I might need to decode the public key to get p and g","date":"2012-11-07T07:22:40.045Z","type":"message"}
{"nick":"substack","message":"looks like that's what DiffieHellman can be initialized with","date":"2012-11-07T07:22:53.428Z","type":"message"}
{"nick":"substack","message":"it's really crap that I can't just make a DiffieHellman object directly","date":"2012-11-07T07:23:13.820Z","type":"message"}
{"nick":"substack","message":"since it has setters for the public and private keys","date":"2012-11-07T07:23:25.645Z","type":"message"}
{"nick":"shykes","new_nick":"zz_shykes","date":"2012-11-07T07:24:00.260Z","type":"nick"}
{"nick":"rowbit","message":"Hourly usage stats: [developer: 0, free: 18]","date":"2012-11-07T07:27:56.690Z","type":"message"}
{"nick":"zz_shykes","new_nick":"shykes","date":"2012-11-07T07:29:47.286Z","type":"nick"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-11-07T07:50:41.858Z","type":"quit"}
{"nick":"shykes","new_nick":"zz_shykes","date":"2012-11-07T07:54:52.211Z","type":"nick"}
