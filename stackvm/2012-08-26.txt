{"nick":"dominictarr","date":"2012-08-26T00:03:34.164Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-08-26T00:16:24.517Z","type":"quit"}
{"nick":"mikeal","date":"2012-08-26T00:24:11.126Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-08-26T00:29:47.764Z","type":"quit"}
{"nick":"Raynos","message":"dominictarr: most crdt examples are broken","date":"2012-08-26T00:30:18.176Z","type":"message"}
{"nick":"Raynos","message":"for example the complex todo example","date":"2012-08-26T00:30:25.621Z","type":"message"}
{"nick":"Raynos","message":"does not sync between two browsers","date":"2012-08-26T00:30:30.344Z","type":"message"}
{"nick":"dominictarr","message":"oh, I just need to push.","date":"2012-08-26T00:30:35.537Z","type":"message"}
{"nick":"dominictarr","message":"I was doing a talk the other day, and then I suddenly realized that the examples where old, and I fixed them, but there was no internet at the time to I didn't push.","date":"2012-08-26T00:31:23.261Z","type":"message"}
{"nick":"Raynos","message":"oh cool","date":"2012-08-26T00:31:42.768Z","type":"message"}
{"nick":"Raynos","message":"I made a delta stream PR","date":"2012-08-26T00:31:45.354Z","type":"message"}
{"nick":"Raynos","message":"https://github.com/Raynos/delta-stream#diagram","date":"2012-08-26T00:33:06.271Z","type":"message"}
{"nick":"Raynos","message":"I started using my whiteboard to illustrate program flow through streams","date":"2012-08-26T00:33:15.503Z","type":"message"}
{"nick":"dominictarr","message":"crdt@2.1.1 !","date":"2012-08-26T00:34:12.961Z","type":"message"}
{"nick":"dominictarr","message":"sweet!","date":"2012-08-26T00:34:44.478Z","type":"message"}
{"nick":"dominictarr","message":"you need to write a little bit bigger,","date":"2012-08-26T00:35:56.282Z","type":"message"}
{"nick":"dominictarr","message":"or move the text closer so that you can get the camera in closer.","date":"2012-08-26T00:36:15.424Z","type":"message"}
{"nick":"dominictarr","message":"Raynos, just reading your delta-stream code...","date":"2012-08-26T00:40:31.328Z","type":"message"}
{"nick":"Raynos","message":"it uses an inverted stream","date":"2012-08-26T00:40:57.151Z","type":"message"}
{"nick":"dominictarr","message":"where does inverted.other get used?","date":"2012-08-26T00:41:01.453Z","type":"message"}
{"nick":"Raynos","message":"in the observable","date":"2012-08-26T00:41:12.875Z","type":"message"}
{"nick":"Raynos","message":"https://github.com/Raynos/delta-stream/blob/master/interfaces/observable.js#L68","date":"2012-08-26T00:41:23.082Z","type":"message"}
{"nick":"Raynos","message":"if you have a better idea of how to do a delta stream let me know","date":"2012-08-26T00:42:56.278Z","type":"message"}
{"nick":"dominictarr","message":"oh, it was ap that I wasn't familiar with","date":"2012-08-26T00:45:26.271Z","type":"message"}
{"nick":"ryan_stevens","reason":"Quit: Leaving.","date":"2012-08-26T00:48:32.469Z","type":"quit"}
{"nick":"AvianFlu","reason":"Quit: AvianFlu","date":"2012-08-26T00:50:20.776Z","type":"quit"}
{"nick":"dominictarr","message":"Raynos, can you create a DeltaStream from an observable?","date":"2012-08-26T00:54:56.323Z","type":"message"}
{"nick":"dominictarr","message":"can I just go DeltaStream.fromObservable(crdtRow) ?","date":"2012-08-26T00:55:47.035Z","type":"message"}
{"nick":"Raynos","message":"dominictarr: Yes. that's the idea","date":"2012-08-26T00:58:40.811Z","type":"message"}
{"nick":"Raynos","message":"dominictarr: but crdtRow does not comply to the observable interface","date":"2012-08-26T00:59:01.844Z","type":"message"}
{"nick":"dominictarr","message":"whats it missing?","date":"2012-08-26T00:59:16.346Z","type":"message"}
{"nick":"Raynos","message":"I can put some logic in DeltaStream","date":"2012-08-26T00:59:19.278Z","type":"message"}
{"nick":"Raynos","message":"good question","date":"2012-08-26T01:00:02.175Z","type":"message"}
{"nick":"dominictarr","message":"A well defined Observable is a good idea, if Row doesn't follow it, I'll add what it needs.","date":"2012-08-26T01:00:18.772Z","type":"message"}
{"nick":"Raynos","message":"https://github.com/Raynos/delta-stream/blob/master/interfaces/observable.js#L85","date":"2012-08-26T01:00:31.570Z","type":"message"}
{"nick":"Raynos","message":"https://github.com/Raynos/delta-stream/blob/master/interfaces/observable.js#L81","date":"2012-08-26T01:00:38.831Z","type":"message"}
{"nick":"dominictarr","message":"it has set, get & toJSON","date":"2012-08-26T01:01:49.878Z","type":"message"}
{"nick":"dominictarr","message":"I don't see whats missing?","date":"2012-08-26T01:02:05.424Z","type":"message"}
{"nick":"Raynos","message":"propagating the source property through","date":"2012-08-26T01:02:26.670Z","type":"message"}
{"nick":"Raynos","message":"if you dont then you create infinite figure of 8 loops","date":"2012-08-26T01:02:34.304Z","type":"message"}
{"nick":"Raynos","message":"a delta stream must reject incoming writes which propagated from itself","date":"2012-08-26T01:02:53.756Z","type":"message"}
{"nick":"Raynos","message":"I thought about making the crdt.Row match the observable interface, it was harder then just adding a createStream function","date":"2012-08-26T01:06:04.779Z","type":"message"}
{"nick":"dominictarr","message":"Raynos, got it. It shouldn't be that hard. it's just a matter of getting the source from the Doc. basically the Doc handles emitting the events, and the history and stuff","date":"2012-08-26T01:08:16.808Z","type":"message"}
{"nick":"Raynos","message":"note","date":"2012-08-26T01:09:08.845Z","type":"message"}
{"nick":"Raynos","message":"that no other observable like thing i know about in front end js","date":"2012-08-26T01:09:18.204Z","type":"message"}
{"nick":"Raynos","message":"has this notion of source","date":"2012-08-26T01:09:22.376Z","type":"message"}
{"nick":"Raynos","message":"so maybe the infinite loop problem should be solved differently","date":"2012-08-26T01:09:48.771Z","type":"message"}
{"nick":"dominictarr","message":"good point. that is because it assumes that the changes are being made directly on it.","date":"2012-08-26T01:12:39.816Z","type":"message"}
{"nick":"Raynos","message":"yeah almost every other observable","date":"2012-08-26T01:12:52.711Z","type":"message"}
{"nick":"Raynos","message":"has no notion of syncing up observables from different streams","date":"2012-08-26T01:13:01.370Z","type":"message"}
{"nick":"dominictarr","message":"or in different layers of the application.","date":"2012-08-26T01:13:19.171Z","type":"message"}
{"nick":"dominictarr","message":"actually, I think this is a good idea though.","date":"2012-08-26T01:13:40.207Z","type":"message"}
{"nick":"dominictarr","message":"the thing that first got me interested in this distributed realtime stuff was wanting to model observables syncronized with view observables.","date":"2012-08-26T01:14:45.683Z","type":"message"}
{"nick":"dominictarr","message":"I realized that really, it should just be layers, with change events propagating from the view to the database","date":"2012-08-26T01:15:18.475Z","type":"message"}
{"nick":"Raynos","message":":D","date":"2012-08-26T01:15:51.652Z","type":"message"}
{"nick":"Raynos","message":"not change events propagating","date":"2012-08-26T01:15:57.316Z","type":"message"}
{"nick":"Raynos","message":"streams of deltas","date":"2012-08-26T01:16:00.276Z","type":"message"}
{"nick":"Raynos","message":"pipign directly from a database","date":"2012-08-26T01:16:05.228Z","type":"message"}
{"nick":"Raynos","message":"into a things into a view","date":"2012-08-26T01:16:10.332Z","type":"message"}
{"nick":"Raynos","message":"and then of course events & input are just a stream of deltas","date":"2012-08-26T01:16:20.186Z","type":"message"}
{"nick":"dominictarr","message":"a delta is a change event though, isn't it?","date":"2012-08-26T01:16:24.996Z","type":"message"}
{"nick":"Raynos","message":"which go in reverse from a view to the database","date":"2012-08-26T01:16:27.248Z","type":"message"}
{"nick":"Raynos","message":"Yeah a delta is a change event","date":"2012-08-26T01:16:33.860Z","type":"message"}
{"nick":"Raynos","message":"I prefer to think in streams because streams propagate trivially","date":"2012-08-26T01:16:42.592Z","type":"message"}
{"nick":"Raynos","message":"there is no eventEmitter.pipe(otherEventEmitter)","date":"2012-08-26T01:16:51.520Z","type":"message"}
{"nick":"Raynos","message":"maybe I should write that","date":"2012-08-26T01:16:54.729Z","type":"message"}
{"nick":"dominictarr","message":"substack wrote that the other day","date":"2012-08-26T01:17:08.999Z","type":"message"}
{"nick":"Raynos","message":"emitStream(eventEmitter).pipe(emitStream(otherEventEmitter))","date":"2012-08-26T01:17:14.265Z","type":"message"}
{"nick":"Raynos","message":"i dont like emitStream because it json encodes shit for me. which is like wtf","date":"2012-08-26T01:17:31.632Z","type":"message"}
{"nick":"dominictarr","message":"... it uses JSONStream","date":"2012-08-26T01:17:48.688Z","type":"message"}
{"nick":"Raynos","message":"I want to emit real references to real objects","date":"2012-08-26T01:18:08.918Z","type":"message"}
{"nick":"Raynos","message":"emitStream is cool for cross process but silly for in process","date":"2012-08-26T01:18:19.746Z","type":"message"}
{"nick":"Raynos","message":"because it destroys references","date":"2012-08-26T01:18:23.279Z","type":"message"}
{"nick":"Raynos","message":"which makes it useless for implementing list-stream","date":"2012-08-26T01:18:30.687Z","type":"message"}
{"nick":"dominictarr","message":"why do you need references for list-stream?","date":"2012-08-26T01:19:06.685Z","type":"message"}
{"nick":"Raynos","message":"because it's useless if your crdt.Set gets an add event with JSON.parse(JSON.stringify(row))","date":"2012-08-26T01:19:38.824Z","type":"message"}
{"nick":"Raynos","message":"it ruins the point","date":"2012-08-26T01:19:42.549Z","type":"message"}
{"nick":"Raynos","message":"set.createListStream().pipe(sortaInstance)","date":"2012-08-26T01:20:10.647Z","type":"message"}
{"nick":"Raynos","message":"thats what I'm imagining","date":"2012-08-26T01:20:16.478Z","type":"message"}
{"nick":"Raynos","message":"then sorta should be a list stream that listens on add / remove events","date":"2012-08-26T01:20:36.357Z","type":"message"}
{"nick":"dominictarr","message":"yeah, it still wants to beable to listen to events on the row.","date":"2012-08-26T01:24:59.046Z","type":"message"}
{"nick":"Raynos","message":"exactly","date":"2012-08-26T01:25:44.679Z","type":"message"}
{"nick":"Raynos","message":"which is ruined if you serialize / deserialize the row","date":"2012-08-26T01:25:51.912Z","type":"message"}
{"nick":"dominictarr","message":"but maybe you want to handle this differently. I think sorta is more basic than what crdt-set is capable of.","date":"2012-08-26T01:25:53.428Z","type":"message"}
{"nick":"Raynos","message":"sorta should still be a list stream","date":"2012-08-26T01:26:04.562Z","type":"message"}
{"nick":"Raynos","message":"and rows in the sorta callback should be delta streams","date":"2012-08-26T01:26:13.644Z","type":"message"}
{"nick":"dominictarr","message":"lets say sorta is for something like a twitter stream","date":"2012-08-26T01:26:29.933Z","type":"message"}
{"nick":"dominictarr","message":"you could just have updates as new messages with a known id","date":"2012-08-26T01:26:46.055Z","type":"message"}
{"nick":"Raynos","message":":/","date":"2012-08-26T01:27:08.823Z","type":"message"}
{"nick":"dominictarr","message":"and a delete is just an update where {__delete: true} is added.","date":"2012-08-26T01:27:09.181Z","type":"message"}
{"nick":"dominictarr","message":"(merged in)","date":"2012-08-26T01:27:13.629Z","type":"message"}
{"nick":"Raynos","message":"that ruins the point of a list stream","date":"2012-08-26T01:27:15.631Z","type":"message"}
{"nick":"Raynos","message":"yes you can model a list stream as a delta stream","date":"2012-08-26T01:27:21.651Z","type":"message"}
{"nick":"Raynos","message":"but a list stream is supposed to have semantic value in terms of add and remove messages","date":"2012-08-26T01:27:41.030Z","type":"message"}
{"nick":"dominictarr","message":"for crdt.Seq there is alot more stuff, like reordering the stream, moving elements,","date":"2012-08-26T01:27:58.347Z","type":"message"}
{"nick":"Raynos","message":"not { uuid: newAddedValue } and { thatUuid: { __delete: true } }","date":"2012-08-26T01:28:05.442Z","type":"message"}
{"nick":"Raynos","message":"maybe I should model list-stream based on Seq","date":"2012-08-26T01:28:27.387Z","type":"message"}
{"nick":"Raynos","message":"so you can pipe Seq into a sorta instance","date":"2012-08-26T01:28:32.883Z","type":"message"}
{"nick":"Raynos","message":"and move shit around in the Seq and the sorta updates","date":"2012-08-26T01:28:39.438Z","type":"message"}
{"nick":"Raynos","message":"without all the sorta bullshit of manual updates","date":"2012-08-26T01:28:46.790Z","type":"message"}
{"nick":"dominictarr","message":"I don't know, maybe list-stream doesn't want to be a stream.","date":"2012-08-26T01:28:51.426Z","type":"message"}
{"nick":"Raynos","message":":(","date":"2012-08-26T01:29:00.362Z","type":"message"}
{"nick":"Raynos","message":"but everything has to be a stream","date":"2012-08-26T01:29:04.716Z","type":"message"}
{"nick":"Raynos","message":"how else can we compose modules","date":"2012-08-26T01:29:11.191Z","type":"message"}
{"nick":"Raynos","message":"compose(seq, sorta) sucks. seq.createStream().pipe(sorta) wins","date":"2012-08-26T01:29:28.499Z","type":"message"}
{"nick":"dominictarr","message":"not _everything_ is a stream.","date":"2012-08-26T01:29:35.644Z","type":"message"}
{"nick":"Raynos","message":"I agree","date":"2012-08-26T01:29:52.462Z","type":"message"}
{"nick":"Raynos","message":"list-stream feels harder to do, delta-stream makes sense","date":"2012-08-26T01:30:00.049Z","type":"message"}
{"nick":"dominictarr","message":"the things that make sense as streams are good.","date":"2012-08-26T01:30:07.664Z","type":"message"}
{"nick":"Raynos","message":"but I need some kind of way to implement compose(seq, sorta)","date":"2012-08-26T01:30:11.261Z","type":"message"}
{"nick":"dominictarr","message":"but like loops, and recursion don't make sense as streams, for example.","date":"2012-08-26T01:30:27.089Z","type":"message"}
{"nick":"dominictarr","message":"you wouldn't want a graph traversal stream.","date":"2012-08-26T01:30:51.460Z","type":"message"}
{"nick":"dominictarr","message":"I mean, you probably could force these things into a stream... but It wouldn't make them easier to do.","date":"2012-08-26T01:31:21.077Z","type":"message"}
{"nick":"Raynos","message":"I agree","date":"2012-08-26T01:34:52.250Z","type":"message"}
{"nick":"Raynos","message":"but I need another way to compose things","date":"2012-08-26T01:34:57.685Z","type":"message"}
{"nick":"Raynos","message":"I feel like we need more things like delta-stream and have people comply with them","date":"2012-08-26T01:35:17.311Z","type":"message"}
{"nick":"dominictarr","message":"the old-fashioned way to compose things: glue code","date":"2012-08-26T01:40:04.941Z","type":"message"}
{"nick":"Raynos","message":":(","date":"2012-08-26T01:41:30.741Z","type":"message"}
{"nick":"dominictarr","message":"you can use automatic glue code, if there is a class of things that have a given interface.","date":"2012-08-26T01:41:32.192Z","type":"message"}
{"nick":"Raynos","message":"i dont like glue code","date":"2012-08-26T01:41:33.491Z","type":"message"}
{"nick":"Raynos","message":"actually I hate glue code","date":"2012-08-26T01:41:37.007Z","type":"message"}
{"nick":"Raynos","message":"thats why I like streams","date":"2012-08-26T01:41:48.920Z","type":"message"}
{"nick":"Raynos","message":"the thing thats the most pain in the ass ever","date":"2012-08-26T01:41:54.853Z","type":"message"}
{"nick":"Raynos","message":"is glueing other people's code when they have weird interfaces","date":"2012-08-26T01:42:08.393Z","type":"message"}
{"nick":"dominictarr","message":"like, say... \"taking a series of input events, and producing a series of output events\"","date":"2012-08-26T01:42:08.664Z","type":"message"}
{"nick":"Raynos","message":"like sorta","date":"2012-08-26T01:42:10.270Z","type":"message"}
{"nick":"Raynos","message":"thats a duplex stream","date":"2012-08-26T01:42:21.323Z","type":"message"}
{"nick":"Raynos","message":"or a through stream","date":"2012-08-26T01:42:24.275Z","type":"message"}
{"nick":"dominictarr","message":"yeah, streams are like automatic glue","date":"2012-08-26T01:42:45.505Z","type":"message"}
{"nick":"dominictarr","message":"I guess there are other patterns, too like things that are just async callbacks. but then, it's pretty rare that the result of one function is exactly what you need for the input of another.","date":"2012-08-26T01:44:06.690Z","type":"message"}
{"nick":"Raynos","message":"well async callbacks are cool","date":"2012-08-26T01:45:42.513Z","type":"message"}
{"nick":"Raynos","message":"when you use things like composite.async","date":"2012-08-26T01:45:47.152Z","type":"message"}
{"nick":"Raynos","message":"or iterators","date":"2012-08-26T01:45:50.303Z","type":"message"}
{"nick":"Raynos","message":"to glue those together","date":"2012-08-26T01:45:54.241Z","type":"message"}
{"nick":"dominictarr","message":"the key is to be disiplined about being consistent, where a single interface is possible.","date":"2012-08-26T01:51:02.437Z","type":"message"}
{"nick":"Raynos","message":"substack: how do you feel about making non js files in browserify just default to exportify?","date":"2012-08-26T01:51:36.202Z","type":"message"}
{"nick":"dominictarr","message":"another good example is assertion functions with the actual argument first, and the optional message last","date":"2012-08-26T01:51:59.244Z","type":"message"}
{"nick":"Raynos","message":"Yeah :)","date":"2012-08-26T01:52:38.565Z","type":"message"}
{"nick":"Raynos","message":"and (err, data)","date":"2012-08-26T01:52:43.049Z","type":"message"}
{"nick":"Raynos","message":"and callback last","date":"2012-08-26T01:52:49.247Z","type":"message"}
{"nick":"dominictarr","message":"and other various event names and stuff. that is why I always copy an interface from core or a popular project if there is something close","date":"2012-08-26T01:56:39.941Z","type":"message"}
{"nick":"dominictarr","message":"to what I want.","date":"2012-08-26T01:56:45.025Z","type":"message"}
{"nick":"Raynos","message":"yeah thats cool","date":"2012-08-26T01:56:56.801Z","type":"message"}
{"nick":"dominictarr","message":"also, then you can say \"just like request\" in the docs","date":"2012-08-26T01:57:03.156Z","type":"message"}
{"nick":"dominictarr","message":"and reuse their documentation.","date":"2012-08-26T01:57:25.869Z","type":"message"}
{"nick":"wiwillia","reason":"Ping timeout: 276 seconds","date":"2012-08-26T01:59:12.011Z","type":"quit"}
{"nick":"dominictarr","message":"hey, catch you later! I'm off to bed","date":"2012-08-26T02:00:30.103Z","type":"message"}
{"nick":"Raynos","message":"Cool","date":"2012-08-26T02:02:10.784Z","type":"message"}
{"nick":"dominictarr","reason":"Ping timeout: 276 seconds","date":"2012-08-26T02:05:41.995Z","type":"quit"}
{"nick":"wiwillia","date":"2012-08-26T02:06:02.844Z","type":"join"}
{"nick":"substack","message":"Raynos: I don't want to make browserify too different from how node works","date":"2012-08-26T02:26:22.805Z","type":"message"}
{"nick":"substack","message":"since browserify is about using node modules in the browser","date":"2012-08-26T02:26:30.257Z","type":"message"}
{"nick":"Raynos","message":"substack: I'm doing `require(\"./thing.html\")` and `require(\"./thing.svg\")`","date":"2012-08-26T02:26:50.056Z","type":"message"}
{"nick":"Raynos","message":"right now it just throws a cannot find module exception","date":"2012-08-26T02:26:59.615Z","type":"message"}
{"nick":"Raynos","message":"I don't think changing that exception to just doing exportify logic is bad","date":"2012-08-26T02:27:09.428Z","type":"message"}
{"nick":"Raynos","message":"heck it might even be a good feature for node's require","date":"2012-08-26T02:27:32.707Z","type":"message"}
{"nick":"Raynos","message":"they already have special logic for json","date":"2012-08-26T02:27:39.140Z","type":"message"}
{"nick":"substack","message":"what if doing fs.readFileSync() were captured instead?","date":"2012-08-26T02:27:57.504Z","type":"message"}
{"nick":"substack","message":"at the same time, I want browserify to be getting smaller, not larger","date":"2012-08-26T02:28:29.393Z","type":"message"}
{"nick":"Raynos","message":"substack: https://github.com/Raynos/browserify-server/blob/master/lib/browserify.js#L94","date":"2012-08-26T02:29:22.274Z","type":"message"}
{"nick":"Raynos","message":"5 lines added html & svg require support for my purposes","date":"2012-08-26T02:29:34.642Z","type":"message"}
{"nick":"Raynos","message":"even just hard coding html, svg & mathml instead of anything else would be good enough","date":"2012-08-26T02:30:10.567Z","type":"message"}
{"nick":"substack","message":"this should be enabled with a switch I think","date":"2012-08-26T02:30:25.570Z","type":"message"}
{"nick":"Raynos","message":"agreed","date":"2012-08-26T02:30:32.147Z","type":"message"}
{"nick":"Raynos","message":"but its super useful as an alternative to yarnify that doesnt do css prefixery","date":"2012-08-26T02:30:57.732Z","type":"message"}
{"nick":"substack","message":"and it should be all file types not presently registered with an extension","date":"2012-08-26T02:31:07.232Z","type":"message"}
{"nick":"Raynos","message":"that's fine","date":"2012-08-26T02:32:55.679Z","type":"message"}
{"nick":"Raynos","message":"do you want to do it or shall I PR ?","date":"2012-08-26T02:33:20.240Z","type":"message"}
{"nick":"substack","message":"you should PR it","date":"2012-08-26T02:33:40.158Z","type":"message"}
{"nick":"substack","message":"--file-ext or whichevs","date":"2012-08-26T02:34:55.399Z","type":"message"}
{"nick":"Raynos","message":"substack: https://github.com/substack/node-resolve/blob/master/index.js#L48 do I need to patch resolve too?","date":"2012-08-26T02:35:32.436Z","type":"message"}
{"nick":"Raynos","message":"I guess I would only need that to make `require(\"./foo\")` load foo.html","date":"2012-08-26T02:36:02.082Z","type":"message"}
{"nick":"wiwillia","reason":"Ping timeout: 264 seconds","date":"2012-08-26T03:20:14.781Z","type":"quit"}
{"nick":"st_luke","reason":"Remote host closed the connection","date":"2012-08-26T03:30:21.955Z","type":"quit"}
{"nick":"ryan_stevens","date":"2012-08-26T04:09:06.972Z","type":"join"}
{"nick":"AvianFlu","date":"2012-08-26T04:22:44.815Z","type":"join"}
{"nick":"Raynos","message":"Crazy streams : https://gist.github.com/3474040 Are these too specific / niche to be turned into modules?","date":"2012-08-26T04:25:28.877Z","type":"message"}
{"nick":"substack","message":"release first, ask questions later","date":"2012-08-26T04:25:58.611Z","type":"message"}
{"nick":"Raynos","message":"they feel like application logic encapsulated in a stream","date":"2012-08-26T04:27:57.680Z","type":"message"}
{"nick":"Raynos","message":"so it's like \"app logic isn't a module\" vs \"all streams are modules\"","date":"2012-08-26T04:28:08.411Z","type":"message"}
{"nick":"substack","message":"an arrow keys stream seems rad","date":"2012-08-26T04:29:52.429Z","type":"message"}
{"nick":"Raynos","message":":D","date":"2012-08-26T04:30:40.696Z","type":"message"}
{"nick":"Raynos","message":"maybe i should generalize that stream","date":"2012-08-26T04:30:56.259Z","type":"message"}
{"nick":"Raynos","message":"Ok","date":"2012-08-26T04:31:06.229Z","type":"message"}
{"nick":"Raynos","message":"gimme 5. OSing","date":"2012-08-26T04:31:10.831Z","type":"message"}
{"nick":"substack","message":"var arrows = arrowStream(); process.stdin.pipe(arrows); arrows.on('up', fn); arrows.on('down', fn) ...","date":"2012-08-26T04:31:40.575Z","type":"message"}
{"nick":"substack","message":"arrows could internally do .on('pipe') to check if the input source is a tty and if it is set raw mode on it","date":"2012-08-26T04:32:29.132Z","type":"message"}
{"nick":"Raynos","message":"oh","date":"2012-08-26T04:32:38.209Z","type":"message"}
{"nick":"substack","message":"and re-bind ^C to process.exit if there isn't already a listener","date":"2012-08-26T04:32:43.299Z","type":"message"}
{"nick":"Raynos","message":"I was writing this for the browser","date":"2012-08-26T04:32:47.789Z","type":"message"}
{"nick":"Raynos","message":"not for TTY","date":"2012-08-26T04:32:56.453Z","type":"message"}
{"nick":"substack","message":"same code could work for both!","date":"2012-08-26T04:33:07.335Z","type":"message"}
{"nick":"Raynos","message":"not really, you need something to listen on event listeners in the browser :P","date":"2012-08-26T04:33:30.737Z","type":"message"}
{"nick":"Raynos","message":"but I know what you mean","date":"2012-08-26T04:33:50.151Z","type":"message"}
{"nick":"Raynos","message":"I wonder whether I can create an event stream","date":"2012-08-26T04:34:00.444Z","type":"message"}
{"nick":"Raynos","message":"emitStream(ever(window)).pipe(arrows)","date":"2012-08-26T04:34:24.464Z","type":"message"}
{"nick":"Raynos","message":"but that would be MADNESS","date":"2012-08-26T04:34:37.987Z","type":"message"}
{"nick":"Raynos","message":"substack: make `emitStream(ever(window))` just work :D","date":"2012-08-26T04:34:54.919Z","type":"message"}
{"nick":"substack","message":"it would be more fitting to have a separate module that took non-data events and remapped them to 'data'","date":"2012-08-26T04:34:56.527Z","type":"message"}
{"nick":"Raynos","message":"I agree","date":"2012-08-26T04:35:14.087Z","type":"message"}
{"nick":"substack","message":"remapStream(ever(window), 'keydown').pipe(through(function (ev) { return Buffer([ ev.keyCode ]) })).pipe(arrows)","date":"2012-08-26T04:36:58.108Z","type":"message"}
{"nick":"substack","message":"or perhaps not remapStream but dataStream","date":"2012-08-26T04:37:35.486Z","type":"message"}
{"nick":"substack","message":"some such name","date":"2012-08-26T04:37:43.670Z","type":"message"}
{"nick":"substack","message":"emitData","date":"2012-08-26T04:37:54.803Z","type":"message"}
{"nick":"substack","message":"or wait through doesn't care about return values, substitute this.emit('data', x)","date":"2012-08-26T04:38:57.294Z","type":"message"}
{"nick":"substack","message":"or mapSync does it that way","date":"2012-08-26T04:39:22.217Z","type":"message"}
{"nick":"Raynos","message":":)","date":"2012-08-26T04:41:36.074Z","type":"message"}
{"nick":"Raynos","message":"yeah","date":"2012-08-26T04:41:43.559Z","type":"message"}
{"nick":"Raynos","message":"is that abusing streams or writing poetry?","date":"2012-08-26T04:41:59.962Z","type":"message"}
{"nick":"ryan_stevens","reason":"Quit: Leaving.","date":"2012-08-26T05:38:39.716Z","type":"quit"}
{"nick":"substack","message":"Raynos: arrow-keys should take the element you want to listen to as an optional arg","date":"2012-08-26T06:04:18.827Z","type":"message"}
{"nick":"Raynos","message":"why?","date":"2012-08-26T06:04:31.920Z","type":"message"}
{"nick":"Raynos","message":"I dont see the motivation for local arrow keys","date":"2012-08-26T06:04:47.728Z","type":"message"}
{"nick":"Raynos","message":"substack: https://github.com/substack/sorta/issues/1","date":"2012-08-26T06:12:10.606Z","type":"message"}
{"nick":"Raynos","message":"the idea is `crdtRow.createStream().pipe(sortaRow)`","date":"2012-08-26T06:12:32.592Z","type":"message"}
{"nick":"substack","message":"seems good","date":"2012-08-26T06:13:49.309Z","type":"message"}
{"nick":"substack","message":"I don't like the \"observable\" terminology though","date":"2012-08-26T06:14:07.845Z","type":"message"}
{"nick":"substack","message":"too design-patterny","date":"2012-08-26T06:14:22.122Z","type":"message"}
{"nick":"substack","message":"because it's an event emitter, not an \"observable\"","date":"2012-08-26T06:15:05.601Z","type":"message"}
{"nick":"Raynos","message":"Yeah it's not a good name","date":"2012-08-26T06:15:29.758Z","type":"message"}
{"nick":"substack","message":"it's not obvious what an \"observable\" should be and the term has lots of OOP pattern baggage from java","date":"2012-08-26T06:15:32.884Z","type":"message"}
{"nick":"Raynos","message":"event emitter doesn't have enough meaning","date":"2012-08-26T06:15:34.416Z","type":"message"}
{"nick":"Raynos","message":"if you know a better name feel free to","date":"2012-08-26T06:15:46.341Z","type":"message"}
{"nick":"Raynos","message":"deltaEmitter ? :D","date":"2012-08-26T06:15:48.911Z","type":"message"}
{"nick":"Raynos","message":"changeEmitter","date":"2012-08-26T06:15:51.609Z","type":"message"}
{"nick":"Raynos","message":"changelet","date":"2012-08-26T06:15:55.261Z","type":"message"}
{"nick":"substack","message":"the first too are good","date":"2012-08-26T06:16:28.084Z","type":"message"}
{"nick":"substack","message":"changelet sounds a bit silly","date":"2012-08-26T06:16:34.368Z","type":"message"}
{"nick":"Raynos","message":"xd","date":"2012-08-26T06:16:42.804Z","type":"message"}
{"nick":"substack","message":"or just .emitter()","date":"2012-08-26T06:16:53.420Z","type":"message"}
{"nick":"Raynos","message":"oh","date":"2012-08-26T06:16:57.412Z","type":"message"}
{"nick":"Raynos","message":"I like that idea","date":"2012-08-26T06:17:00.150Z","type":"message"}
{"nick":"substack","message":"or .createEmitter()","date":"2012-08-26T06:17:02.587Z","type":"message"}
{"nick":"Raynos","message":"but I still want the get / set methods","date":"2012-08-26T06:17:06.672Z","type":"message"}
{"nick":"substack","message":".createDelta()?","date":"2012-08-26T06:17:26.095Z","type":"message"}
{"nick":"substack","message":"something with delta in the name is good if it has get/set","date":"2012-08-26T06:17:35.275Z","type":"message"}
{"nick":"Raynos","message":"I see","date":"2012-08-26T06:17:40.188Z","type":"message"}
{"nick":"substack","message":"then people will know to expect that they get a delta object and not just a vanilla emitter","date":"2012-08-26T06:17:58.770Z","type":"message"}
{"nick":"Raynos","message":"I'll go rename all references to observable to delta","date":"2012-08-26T06:18:04.611Z","type":"message"}
{"nick":"substack","message":"rad","date":"2012-08-26T06:18:09.807Z","type":"message"}
{"nick":"substack","message":"this would make sorta much more composable","date":"2012-08-26T06:19:07.036Z","type":"message"}
{"nick":"Raynos","message":"and its done","date":"2012-08-26T06:24:19.561Z","type":"message"}
{"nick":"Raynos","message":"yeah for sure.","date":"2012-08-26T06:24:28.353Z","type":"message"}
{"nick":"Raynos","message":"I'm already liking delta-stream. I keep writing complex modules and then realize \"hey I can represent this as a delta stream!\"","date":"2012-08-26T06:24:49.523Z","type":"message"}
{"nick":"Raynos","message":"https://github.com/Raynos/shooter-game/blob/master/player/index.js#L19","date":"2012-08-26T06:25:21.949Z","type":"message"}
{"nick":"Raynos","message":"For example, both widget & input are delta stream compliant","date":"2012-08-26T06:25:28.619Z","type":"message"}
{"nick":"Raynos","message":"So my player object is a duplex stream that emits deltas (x & y position from arrow keys) and reads deltas (x & y position to render)","date":"2012-08-26T06:25:50.705Z","type":"message"}
{"nick":"substack","message":"putting delta-stream in my lxjs list","date":"2012-08-26T06:26:23.292Z","type":"message"}
{"nick":"Raynos","message":"o/","date":"2012-08-26T06:26:43.197Z","type":"message"}
{"nick":"Raynos","message":"i want to create a similar thing called list-stream","date":"2012-08-26T06:26:52.050Z","type":"message"}
{"nick":"Raynos","message":"which represents addition and removal of a list rather then deltas of change on a thing","date":"2012-08-26T06:27:04.848Z","type":"message"}
{"nick":"Raynos","message":"so you can do listStream.pipe(sorta(...))","date":"2012-08-26T06:27:11.366Z","type":"message"}
{"nick":"Raynos","message":"or someCrdtSetorSeq.createStream().pipe(sorta(...))","date":"2012-08-26T06:27:32.833Z","type":"message"}
{"nick":"Raynos","message":"or someListStream.pipe(someListUIThingy())","date":"2012-08-26T06:27:42.535Z","type":"message"}
{"nick":"substack","message":"aren't streams already lists?","date":"2012-08-26T06:29:20.020Z","type":"message"}
{"nick":"Raynos","message":"they lack removal events","date":"2012-08-26T06:31:00.646Z","type":"message"}
{"nick":"Raynos","message":"{ __delete: true } or something is a hack","date":"2012-08-26T06:31:08.976Z","type":"message"}
{"nick":"substack","message":"oh so delta-stream is for objects","date":"2012-08-26T06:31:19.224Z","type":"message"}
{"nick":"substack","message":"and this would be for lists","date":"2012-08-26T06:31:29.766Z","type":"message"}
{"nick":"Raynos","message":"yeah","date":"2012-08-26T06:31:34.915Z","type":"message"}
{"nick":"substack","message":"you could just have a single 'splice' event","date":"2012-08-26T06:31:39.699Z","type":"message"}
{"nick":"substack","message":"splice can do everything","date":"2012-08-26T06:31:43.331Z","type":"message"}
{"nick":"Raynos","message":"although I dont know how to make list stream work","date":"2012-08-26T06:31:43.529Z","type":"message"}
{"nick":"Raynos","message":"splice can?","date":"2012-08-26T06:31:50.227Z","type":"message"}
{"nick":"substack","message":"splice can do inserts and deletes","date":"2012-08-26T06:32:00.484Z","type":"message"}
{"nick":"substack","message":"at the same time even","date":"2012-08-26T06:32:17.648Z","type":"message"}
{"nick":"Raynos","message":"well Ideally I want a stream format of crdt.Seq","date":"2012-08-26T06:32:20.955Z","type":"message"}
{"nick":"substack","message":"in fact you might as well just call it splice-stream","date":"2012-08-26T06:32:21.150Z","type":"message"}
{"nick":"Raynos","message":"yeah splice stream makes sense","date":"2012-08-26T06:32:32.561Z","type":"message"}
{"nick":"Raynos","message":"I will look into that later","date":"2012-08-26T06:32:38.450Z","type":"message"}
{"nick":"Raynos","message":"then sorta doesn't have to do sorting logic :P","date":"2012-08-26T06:32:46.200Z","type":"message"}
{"nick":"Raynos","message":"it just has to accept splice events","date":"2012-08-26T06:32:53.346Z","type":"message"}
{"nick":"Raynos","message":"and re-order the DOM","date":"2012-08-26T06:32:56.345Z","type":"message"}
{"nick":"substack","message":"> var xs = [10,2,3,40]; xs.splice(1,2,20,30); xs","date":"2012-08-26T06:33:09.399Z","type":"message"}
{"nick":"substack","message":"[ 10, 20, 30, 40 ]","date":"2012-08-26T06:33:09.601Z","type":"message"}
{"nick":"substack","message":"yep!","date":"2012-08-26T06:33:34.139Z","type":"message"}
{"nick":"substack","message":"but something would need to handle generating the splice stream","date":"2012-08-26T06:33:44.699Z","type":"message"}
{"nick":"substack","message":"sort-stream","date":"2012-08-26T06:33:56.027Z","type":"message"}
{"nick":"substack","message":"takes a cdrt stream of updates and an optional comparison function, returns an ordered splice stream","date":"2012-08-26T06:34:31.451Z","type":"message"}
{"nick":"Raynos","message":"well","date":"2012-08-26T06:34:47.848Z","type":"message"}
{"nick":"Raynos","message":"cdrt.Seq","date":"2012-08-26T06:34:51.134Z","type":"message"}
{"nick":"Raynos","message":"is a sorted sequence of things","date":"2012-08-26T06:34:55.239Z","type":"message"}
{"nick":"substack","message":"aha awesome","date":"2012-08-26T06:35:13.242Z","type":"message"}
{"nick":"substack","action":"needs to mess with cdrt more","date":"2012-08-26T06:35:20.560Z","type":"action"}
{"nick":"Raynos","message":"yeah :)","date":"2012-08-26T06:35:41.022Z","type":"message"}
{"nick":"substack","message":"really starting to look like all the guts of a streaming data-bound realtime system are all here","date":"2012-08-26T06:35:51.033Z","type":"message"}
{"nick":"Raynos","message":"but thanks for the splice-stream idea","date":"2012-08-26T06:35:53.645Z","type":"message"}
{"nick":"Raynos","message":"substack: Did I show you discovery-network ?","date":"2012-08-26T06:36:09.345Z","type":"message"}
{"nick":"substack","message":"the hard part will be building higher-level abstractions that tie these lower-level abstractions together","date":"2012-08-26T06:36:29.327Z","type":"message"}
{"nick":"Raynos","message":"Its the p2p component of the streaming data-bound realtime p2p system","date":"2012-08-26T06:36:36.135Z","type":"message"}
{"nick":"Raynos","message":"nah","date":"2012-08-26T06:36:46.790Z","type":"message"}
{"nick":"Raynos","message":"tieing the lower level abstractions together is trivial","date":"2012-08-26T06:36:54.558Z","type":"message"}
{"nick":"Raynos","message":"you just pipe them","date":"2012-08-26T06:36:57.336Z","type":"message"}
{"nick":"Raynos","message":"PIPE ALL THE THINGS","date":"2012-08-26T06:36:59.726Z","type":"message"}
{"nick":"LOUDBOT","message":"PEEKABOO< I CAN SEE YOU, AND I KNOW WHAT YOU DO.","date":"2012-08-26T06:37:00.349Z","type":"message"}
{"nick":"substack","message":"discovery of all these modules is difficult","date":"2012-08-26T06:37:15.763Z","type":"message"}
{"nick":"substack","message":"requires making youtube vids about how to tie them all together","date":"2012-08-26T06:37:27.595Z","type":"message"}
{"nick":"Raynos","message":"Agreed","date":"2012-08-26T06:37:29.486Z","type":"message"}
{"nick":"substack","message":"and blog posts","date":"2012-08-26T06:37:34.774Z","type":"message"}
{"nick":"Raynos","message":"I recommend they just come in here","date":"2012-08-26T06:37:41.292Z","type":"message"}
{"nick":"substack","message":"stream handbook","date":"2012-08-26T06:37:43.404Z","type":"message"}
{"nick":"Raynos","message":"and ask how to do it","date":"2012-08-26T06:37:43.597Z","type":"message"}
{"nick":"Raynos","message":"or read the source code","date":"2012-08-26T06:37:46.305Z","type":"message"}
{"nick":"Raynos","message":"of some of my apps","date":"2012-08-26T06:37:49.934Z","type":"message"}
{"nick":"Raynos","message":"https://github.com/Raynos/dn-leaderboard/blob/master/package.json#L19 https://github.com/Raynos/shooter-game/blob/master/package.json#L19","date":"2012-08-26T06:38:10.945Z","type":"message"}
{"nick":"substack","message":"should have a stream-handbook project on github for all of these","date":"2012-08-26T06:38:12.599Z","type":"message"}
{"nick":"Raynos","message":"package.json is the discovery mechanism","date":"2012-08-26T06:38:16.253Z","type":"message"}
{"nick":"Raynos","message":"I did the same with npm-www & isaacs.","date":"2012-08-26T06:38:37.248Z","type":"message"}
{"nick":"Raynos","message":"I read his dependencies list and looked every single one up","date":"2012-08-26T06:38:44.634Z","type":"message"}
{"nick":"Raynos","message":"did the same with the dependencies of express & connect","date":"2012-08-26T06:38:53.130Z","type":"message"}
{"nick":"substack","message":"should put something in the stream handbook about that","date":"2012-08-26T06:39:27.216Z","type":"message"}
{"nick":"Raynos","message":"yeah","date":"2012-08-26T06:47:02.443Z","type":"message"}
{"nick":"Raynos","message":"http://4866.localtunnel.com/","date":"2012-08-26T06:47:23.023Z","type":"message"}
{"nick":"Raynos","message":"Primitive collision detection ftw","date":"2012-08-26T06:47:27.277Z","type":"message"}
{"nick":"Raynos","message":"Collision detection get. Next shooting & multiplayer","date":"2012-08-26T06:47:49.472Z","type":"message"}
{"nick":"substack","message":"nice","date":"2012-08-26T06:48:42.666Z","type":"message"}
{"nick":"Raynos","message":"multiplayer should be trivial once I put all the delta-streams into a crdt doc and synchronize those with discovery network","date":"2012-08-26T06:49:57.055Z","type":"message"}
{"nick":"Raynos","message":"that should be like 10 minutes of code","date":"2012-08-26T06:50:07.974Z","type":"message"}
{"nick":"substack","message":"https://github.com/substack/stream-handbook","date":"2012-08-26T07:25:31.455Z","type":"message"}
{"nick":"substack","message":"initial outline","date":"2012-08-26T07:26:52.444Z","type":"message"}
{"nick":"Raynos","message":"substack: nice","date":"2012-08-26T07:39:03.168Z","type":"message"}
{"nick":"Raynos","message":"incoming PR with more streams","date":"2012-08-26T07:39:06.913Z","type":"message"}
