{"nick":"ircretary","reason":"Remote host closed the connection","date":"2014-12-16T00:00:00.916Z","type":"quit"}
{"nick":"ircretary","date":"2014-12-16T00:00:09.681Z","type":"join"}
{"nick":"tilgovi","reason":"Ping timeout: 272 seconds","date":"2014-12-16T00:01:05.867Z","type":"quit"}
{"nick":"contrahax","reason":"Quit: Sleeping","date":"2014-12-16T00:10:12.448Z","type":"quit"}
{"nick":"ednapiranha","reason":"Quit: Leaving...","date":"2014-12-16T00:12:31.099Z","type":"quit"}
{"nick":"contrahax","date":"2014-12-16T00:13:25.269Z","type":"join"}
{"nick":"tilgovi","date":"2014-12-16T00:23:37.154Z","type":"join"}
{"nick":"collypops","reason":"Quit: Zzz","date":"2014-12-16T00:42:22.291Z","type":"quit"}
{"nick":"rockbot__","reason":"Remote host closed the connection","date":"2014-12-16T00:44:20.107Z","type":"quit"}
{"nick":"collypops","date":"2014-12-16T00:45:40.645Z","type":"join"}
{"nick":"h0ke","date":"2014-12-16T00:46:41.201Z","type":"join"}
{"nick":"collypops","reason":"Remote host closed the connection","date":"2014-12-16T00:48:17.814Z","type":"quit"}
{"nick":"quijote","date":"2014-12-16T00:49:02.780Z","type":"join"}
{"nick":"collypops","date":"2014-12-16T00:49:02.780Z","type":"join"}
{"nick":"h0ke","reason":"Ping timeout: 240 seconds","date":"2014-12-16T00:51:17.216Z","type":"quit"}
{"nick":"quijote","reason":"Ping timeout: 245 seconds","date":"2014-12-16T00:53:34.569Z","type":"quit"}
{"nick":"contrahax","reason":"Quit: Sleeping","date":"2014-12-16T00:57:00.356Z","type":"quit"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-12-16T00:59:44.328Z","type":"quit"}
{"nick":"rockbot__","date":"2014-12-16T01:01:28.405Z","type":"join"}
{"nick":"rockbot__","reason":"Remote host closed the connection","date":"2014-12-16T01:22:19.973Z","type":"quit"}
{"nick":"stagas","reason":"Ping timeout: 250 seconds","date":"2014-12-16T01:25:12.303Z","type":"quit"}
{"nick":"warbrett","reason":"Remote host closed the connection","date":"2014-12-16T01:28:30.039Z","type":"quit"}
{"nick":"rockbot__","date":"2014-12-16T01:37:36.436Z","type":"join"}
{"nick":"anandthakker","reason":"Quit: anandthakker","date":"2014-12-16T01:39:07.670Z","type":"quit"}
{"nick":"rockbot__","reason":"Remote host closed the connection","date":"2014-12-16T01:42:19.576Z","type":"quit"}
{"nick":"quijote","date":"2014-12-16T01:50:20.289Z","type":"join"}
{"nick":"quijote","reason":"Ping timeout: 260 seconds","date":"2014-12-16T01:55:09.021Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: thealphanerd","date":"2014-12-16T02:01:05.230Z","type":"quit"}
{"nick":"phated","date":"2014-12-16T02:06:04.460Z","type":"join"}
{"nick":"substack","message":"e/win 28","date":"2014-12-16T02:12:56.545Z","type":"message"}
{"nick":"zv","reason":"Ping timeout: 245 seconds","date":"2014-12-16T02:15:42.701Z","type":"quit"}
{"nick":"warbrett","date":"2014-12-16T02:16:13.057Z","type":"join"}
{"nick":"warbrett","reason":"Remote host closed the connection","date":"2014-12-16T02:24:11.201Z","type":"quit"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-12-16T02:24:59.670Z","type":"quit"}
{"nick":"contrahax","date":"2014-12-16T02:33:24.548Z","type":"join"}
{"nick":"jxson_","date":"2014-12-16T02:41:40.183Z","type":"join"}
{"nick":"pfraze","reason":"Quit: Leaving","date":"2014-12-16T02:44:22.194Z","type":"quit"}
{"nick":"phated","date":"2014-12-16T02:44:46.728Z","type":"join"}
{"nick":"jxson","reason":"Ping timeout: 258 seconds","date":"2014-12-16T02:44:52.653Z","type":"quit"}
{"nick":"thealphanerd","date":"2014-12-16T02:45:32.605Z","type":"join"}
{"nick":"jxson_","reason":"Ping timeout: 258 seconds","date":"2014-12-16T02:46:24.719Z","type":"quit"}
{"nick":"h0ke","date":"2014-12-16T02:49:18.436Z","type":"join"}
{"nick":"domanic","date":"2014-12-16T02:50:08.297Z","type":"join"}
{"nick":"quijote","date":"2014-12-16T02:50:50.253Z","type":"join"}
{"nick":"thealphanerd","reason":"Quit: thealphanerd","date":"2014-12-16T02:52:59.494Z","type":"quit"}
{"nick":"h0ke","reason":"Ping timeout: 265 seconds","date":"2014-12-16T02:54:03.065Z","type":"quit"}
{"nick":"quijote","reason":"Ping timeout: 260 seconds","date":"2014-12-16T02:55:49.051Z","type":"quit"}
{"nick":"domanic","reason":"Ping timeout: 250 seconds","date":"2014-12-16T03:04:52.263Z","type":"quit"}
{"nick":"Mso150","date":"2014-12-16T03:12:20.761Z","type":"join"}
{"nick":"Mso150","reason":"Ping timeout: 245 seconds","date":"2014-12-16T03:30:42.679Z","type":"quit"}
{"nick":"Mso150","date":"2014-12-16T03:34:03.620Z","type":"join"}
{"nick":"warbrett","date":"2014-12-16T03:34:46.514Z","type":"join"}
{"nick":"warbrett","reason":"Ping timeout: 264 seconds","date":"2014-12-16T03:39:24.332Z","type":"quit"}
{"nick":"contrahax","date":"2014-12-16T03:40:56.278Z","type":"quit"}
{"nick":"contrahax","date":"2014-12-16T03:42:20.722Z","type":"join"}
{"nick":"therealkoopa","reason":"Remote host closed the connection","date":"2014-12-16T03:46:41.875Z","type":"quit"}
{"nick":"quijote","date":"2014-12-16T03:51:36.752Z","type":"join"}
{"nick":"pfraze","date":"2014-12-16T03:51:53.808Z","type":"join"}
{"nick":"Mso150","reason":"Ping timeout: 264 seconds","date":"2014-12-16T03:56:17.851Z","type":"quit"}
{"nick":"quijote","reason":"Ping timeout: 255 seconds","date":"2014-12-16T03:56:22.521Z","type":"quit"}
{"nick":"michaelrhodes","date":"2014-12-16T03:58:39.706Z","type":"join"}
{"nick":"sindresorhus_","new_nick":"sindresorhus","date":"2014-12-16T03:58:46.469Z","type":"nick"}
{"nick":"sindresorhus","new_nick":"Guest31951","date":"2014-12-16T03:59:16.468Z","type":"nick"}
{"nick":"therealkoopa","date":"2014-12-16T04:00:13.097Z","type":"join"}
{"nick":"warbrett","date":"2014-12-16T04:04:28.789Z","type":"join"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-12-16T04:05:33.467Z","type":"quit"}
{"nick":"anvaka","date":"2014-12-16T04:05:56.684Z","type":"join"}
{"nick":"warbrett","reason":"Remote host closed the connection","date":"2014-12-16T04:07:43.229Z","type":"quit"}
{"nick":"pfraze","reason":"Quit: Leaving","date":"2014-12-16T04:30:22.452Z","type":"quit"}
{"nick":"ellell","reason":"Ping timeout: 244 seconds","date":"2014-12-16T04:34:36.985Z","type":"quit"}
{"nick":"ellell","date":"2014-12-16T04:34:55.088Z","type":"join"}
{"nick":"karissa","reason":"Ping timeout: 244 seconds","date":"2014-12-16T04:35:02.668Z","type":"quit"}
{"nick":"mafintosh","reason":"Ping timeout: 244 seconds","date":"2014-12-16T04:35:02.853Z","type":"quit"}
{"nick":"tobie","reason":"Ping timeout: 244 seconds","date":"2014-12-16T04:35:02.854Z","type":"quit"}
{"nick":"karissa","date":"2014-12-16T04:35:26.256Z","type":"join"}
{"nick":"hackygolucky","reason":"Ping timeout: 244 seconds","date":"2014-12-16T04:35:33.722Z","type":"quit"}
{"nick":"therealkoopa","reason":"Remote host closed the connection","date":"2014-12-16T04:36:01.093Z","type":"quit"}
{"nick":"wa7son","reason":"Ping timeout: 244 seconds","date":"2014-12-16T04:36:05.090Z","type":"quit"}
{"nick":"wa7son","date":"2014-12-16T04:38:06.747Z","type":"join"}
{"nick":"hackygolucky__","date":"2014-12-16T04:38:14.324Z","type":"join"}
{"nick":"mafintosh","date":"2014-12-16T04:39:11.020Z","type":"join"}
{"nick":"tobie","date":"2014-12-16T04:39:22.168Z","type":"join"}
{"nick":"rockbot__","date":"2014-12-16T04:43:01.607Z","type":"join"}
{"nick":"rockbot__","reason":"Read error: Connection reset by peer","date":"2014-12-16T04:44:56.688Z","type":"quit"}
{"nick":"rockbo___","date":"2014-12-16T04:44:58.247Z","type":"join"}
{"nick":"quijote","date":"2014-12-16T04:52:26.865Z","type":"join"}
{"nick":"h0ke","date":"2014-12-16T04:53:32.240Z","type":"join"}
{"nick":"quijote","reason":"Ping timeout: 245 seconds","date":"2014-12-16T04:56:57.648Z","type":"quit"}
{"nick":"h0ke","reason":"Ping timeout: 240 seconds","date":"2014-12-16T05:01:49.366Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T05:05:47.294Z","type":"join"}
{"nick":"h0ke","date":"2014-12-16T05:09:58.390Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 265 seconds","date":"2014-12-16T05:10:50.071Z","type":"quit"}
{"nick":"phated","date":"2014-12-16T05:16:07.636Z","type":"join"}
{"nick":"warbrett","date":"2014-12-16T05:18:14.553Z","type":"join"}
{"nick":"phated","reason":"Ping timeout: 245 seconds","date":"2014-12-16T05:21:04.589Z","type":"quit"}
{"nick":"warbrett","reason":"Ping timeout: 240 seconds","date":"2014-12-16T05:22:17.214Z","type":"quit"}
{"nick":"knownasilya","reason":"Quit: Connection closed for inactivity","date":"2014-12-16T05:24:00.614Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T05:30:50.476Z","type":"join"}
{"nick":"rockbo___","reason":"Remote host closed the connection","date":"2014-12-16T05:34:56.187Z","type":"quit"}
{"nick":"therealkoopa","reason":"Ping timeout: 250 seconds","date":"2014-12-16T05:35:14.276Z","type":"quit"}
{"nick":"anvaka","reason":"Remote host closed the connection","date":"2014-12-16T05:40:37.024Z","type":"quit"}
{"nick":"anvaka","date":"2014-12-16T05:41:11.690Z","type":"join"}
{"nick":"anvaka","reason":"Ping timeout: 258 seconds","date":"2014-12-16T05:45:25.746Z","type":"quit"}
{"nick":"thealphanerd","date":"2014-12-16T05:48:55.357Z","type":"join"}
{"nick":"quijote","date":"2014-12-16T05:53:09.273Z","type":"join"}
{"nick":"quijote","reason":"Ping timeout: 260 seconds","date":"2014-12-16T05:57:49.010Z","type":"quit"}
{"nick":"YsenGrimm","reason":"Ping timeout: 250 seconds","date":"2014-12-16T06:05:08.485Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T06:06:33.731Z","type":"join"}
{"nick":"YsenGrimm","date":"2014-12-16T06:06:53.505Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 256 seconds","date":"2014-12-16T06:11:32.538Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T06:14:57.066Z","type":"join"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2014-12-16T06:15:51.265Z","type":"quit"}
{"nick":"therealkoopa","reason":"Ping timeout: 272 seconds","date":"2014-12-16T06:19:49.818Z","type":"quit"}
{"nick":"phated","date":"2014-12-16T06:22:27.411Z","type":"join"}
{"nick":"h0ke","reason":"Remote host closed the connection","date":"2014-12-16T06:38:21.473Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T06:40:29.979Z","type":"join"}
{"nick":"h0ke","date":"2014-12-16T06:41:22.992Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 258 seconds","date":"2014-12-16T06:45:13.795Z","type":"quit"}
{"nick":"h0ke","reason":"Ping timeout: 272 seconds","date":"2014-12-16T06:46:25.834Z","type":"quit"}
{"nick":"quijote","date":"2014-12-16T06:53:56.329Z","type":"join"}
{"nick":"DamonOehlman","reason":"Ping timeout: 258 seconds","date":"2014-12-16T06:58:15.793Z","type":"quit"}
{"nick":"quijote","reason":"Ping timeout: 265 seconds","date":"2014-12-16T06:58:37.070Z","type":"quit"}
{"nick":"Maciek416","reason":"Remote host closed the connection","date":"2014-12-16T07:04:23.605Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T07:06:37.731Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 256 seconds","date":"2014-12-16T07:13:18.551Z","type":"quit"}
{"nick":"jxson","date":"2014-12-16T07:19:31.506Z","type":"join"}
{"nick":"peutetre","date":"2014-12-16T07:29:03.566Z","type":"join"}
{"nick":"nickleefly","date":"2014-12-16T07:33:09.109Z","type":"join"}
{"nick":"DamonOehlman","date":"2014-12-16T07:33:25.305Z","type":"join"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-12-16T07:41:06.536Z","type":"quit"}
{"nick":"DamonOehlman","reason":"Ping timeout: 250 seconds","date":"2014-12-16T07:43:56.261Z","type":"quit"}
{"nick":"contrahax","new_nick":"_contrahax","date":"2014-12-16T07:46:27.030Z","type":"nick"}
{"nick":"djcoin","date":"2014-12-16T07:51:45.545Z","type":"join"}
{"nick":"quijote","date":"2014-12-16T07:54:41.686Z","type":"join"}
{"nick":"quijote","reason":"Ping timeout: 264 seconds","date":"2014-12-16T07:59:48.502Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T08:06:36.052Z","type":"join"}
{"nick":"robertkowalski","reason":"Ping timeout: 272 seconds","date":"2014-12-16T08:08:07.858Z","type":"quit"}
{"nick":"robertkowalski","date":"2014-12-16T08:08:16.380Z","type":"join"}
{"nick":"ITPro","date":"2014-12-16T08:09:35.156Z","type":"join"}
{"nick":"h0ke","date":"2014-12-16T08:10:33.626Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 264 seconds","date":"2014-12-16T08:11:17.906Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: thealphanerd","date":"2014-12-16T08:11:49.298Z","type":"quit"}
{"nick":"h0ke","reason":"Ping timeout: 240 seconds","date":"2014-12-16T08:14:37.283Z","type":"quit"}
{"nick":"quijote","date":"2014-12-16T08:18:21.702Z","type":"join"}
{"nick":"therealkoopa","date":"2014-12-16T08:20:49.857Z","type":"join"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2014-12-16T08:23:55.517Z","type":"quit"}
{"nick":"therealkoopa","reason":"Ping timeout: 245 seconds","date":"2014-12-16T08:25:17.671Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T08:39:41.782Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 245 seconds","date":"2014-12-16T08:44:24.629Z","type":"quit"}
{"nick":"anandthakker","date":"2014-12-16T08:55:19.841Z","type":"join"}
{"nick":"aulait","reason":"Excess Flood","date":"2014-12-16T08:58:49.924Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T09:02:01.506Z","type":"join"}
{"nick":"aulait","date":"2014-12-16T09:10:15.488Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 240 seconds","date":"2014-12-16T09:10:37.997Z","type":"quit"}
{"nick":"Mso150","date":"2014-12-16T09:10:39.838Z","type":"join"}
{"nick":"h0ke","date":"2014-12-16T09:13:55.032Z","type":"join"}
{"nick":"h0ke","reason":"Ping timeout: 264 seconds","date":"2014-12-16T09:19:05.846Z","type":"quit"}
{"nick":"michaelrhodes","reason":"Quit: Leaving.","date":"2014-12-16T09:20:04.595Z","type":"quit"}
{"nick":"quijote","reason":"Ping timeout: 255 seconds","date":"2014-12-16T09:23:58.554Z","type":"quit"}
{"nick":"stagas","date":"2014-12-16T09:29:07.791Z","type":"join"}
{"nick":"thealphanerd","date":"2014-12-16T09:45:20.669Z","type":"join"}
{"nick":"substack","message":"mikolalysenko_: do you have any ideas about spatial partitioning schemes that minimize seeks to non-contiguous data?","date":"2014-12-16T10:20:32.389Z","type":"message"}
{"nick":"substack","message":"in my case thinking up something that will work well with bittorrent for delivery","date":"2014-12-16T10:21:09.140Z","type":"message"}
{"nick":"quijote","date":"2014-12-16T10:21:19.228Z","type":"join"}
{"nick":"quijote","reason":"Ping timeout: 260 seconds","date":"2014-12-16T10:25:41.032Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T10:29:33.703Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 244 seconds","date":"2014-12-16T10:35:09.472Z","type":"quit"}
{"nick":"anandthakker","message":"substack: saw your tweet…  k-d does seem like a reasonable bet for this.  do you have reservations?","date":"2014-12-16T10:35:36.922Z","type":"message"}
{"nick":"substack","message":"anandthakker: it looks like I would have to do a log scan of x and a log scan of y","date":"2014-12-16T10:37:43.092Z","type":"message"}
{"nick":"substack","message":"and the locality for that is probably not great","date":"2014-12-16T10:37:49.114Z","type":"message"}
{"nick":"substack","message":"I was looking at hilbert and z-order curves for this too","date":"2014-12-16T10:38:13.302Z","type":"message"}
{"nick":"substack","message":"I could also just divide features into an ordinary grid with a hash for coarse lookups","date":"2014-12-16T10:39:14.841Z","type":"message"}
{"nick":"substack","message":"or a quadtree","date":"2014-12-16T10:39:17.829Z","type":"message"}
{"nick":"substack","message":"but quadtrees didn't seem to index very well","date":"2014-12-16T10:39:43.413Z","type":"message"}
{"nick":"substack","message":"but I guess even with a kd tree that is only a log number of extra updates","date":"2014-12-16T10:44:28.794Z","type":"message"}
{"nick":"anandthakker","message":"huh, hilbert and z-order curves would be a fascinating approach to explore… although somehow my instinct is that it’s gonna be hard to beat the kd tree","date":"2014-12-16T10:44:38.958Z","type":"message"}
{"nick":"substack","message":"and I could even hash the topmost nodes","date":"2014-12-16T10:44:44.497Z","type":"message"}
{"nick":"anandthakker","message":"yah","date":"2014-12-16T10:45:07.855Z","type":"message"}
{"nick":"substack","message":"ok I'll give this a spin","date":"2014-12-16T10:45:34.190Z","type":"message"}
{"nick":"substack","message":"at the very least I'll have a sandbox up soonish to try different indexing schemes","date":"2014-12-16T10:45:45.432Z","type":"message"}
{"nick":"anandthakker","message":"just curious, what kind of data is this?","date":"2014-12-16T10:45:45.615Z","type":"message"}
{"nick":"substack","message":"maps","date":"2014-12-16T10:45:50.749Z","type":"message"}
{"nick":"substack","message":"I want to stream open street maps data directly from bittorrent on-demand","date":"2014-12-16T10:46:07.692Z","type":"message"}
{"nick":"substack","message":"using torrent-stream and later webtorrent","date":"2014-12-16T10:46:19.976Z","type":"message"}
{"nick":"anandthakker","message":"oh, that is excellent","date":"2014-12-16T10:46:28.378Z","type":"message"}
{"nick":"substack","message":"without needing to fetch the entire file","date":"2014-12-16T10:46:31.697Z","type":"message"}
{"nick":"anandthakker","message":"yeah","date":"2014-12-16T10:46:35.510Z","type":"message"}
{"nick":"substack","message":"so you can make ad-hoc extracts really easily","date":"2014-12-16T10:46:37.954Z","type":"message"}
{"nick":"quijote","date":"2014-12-16T10:46:55.244Z","type":"join"}
{"nick":"substack","message":"right now the data isn't indexed at all","date":"2014-12-16T10:46:56.609Z","type":"message"}
{"nick":"anandthakker","message":"it would be amazing to use that for landsat data too","date":"2014-12-16T10:47:00.619Z","type":"message"}
{"nick":"substack","message":"but it is up on bittorrent as xml and protobuf","date":"2014-12-16T10:47:07.381Z","type":"message"}
{"nick":"substack","message":"yep! once the basic approach works you can layer whatever kind of data you want overtop","date":"2014-12-16T10:47:23.376Z","type":"message"}
{"nick":"substack","message":"I also remember mikola did something cool with a voronoi-looking thing for fast (x,y) lookups","date":"2014-12-16T10:49:20.366Z","type":"message"}
{"nick":"substack","message":"but I can't seem to find it","date":"2014-12-16T10:49:27.228Z","type":"message"}
{"nick":"anandthakker","message":"hmm","date":"2014-12-16T10:50:17.810Z","type":"message"}
{"nick":"anandthakker","message":"that’s interesting, but isn’t the map data in tiles?","date":"2014-12-16T10:50:50.906Z","type":"message"}
{"nick":"substack","message":"the map data in open street maps is all vectors","date":"2014-12-16T10:51:01.932Z","type":"message"}
{"nick":"anandthakker","message":"ah","date":"2014-12-16T10:51:13.696Z","type":"message"}
{"nick":"substack","message":"I want to keep it as vectors because that will take up much less space and network","date":"2014-12-16T10:51:22.480Z","type":"message"}
{"nick":"anandthakker","message":"yeah.  not to mention it’s probably better to consume anyway","date":"2014-12-16T10:51:58.714Z","type":"message"}
{"nick":"substack","message":"boundary cases make it a little trickier but I can use polygon clipping if the shapes are too large","date":"2014-12-16T10:51:59.367Z","type":"message"}
{"nick":"substack","message":"or just use different indexes for differently-sized shapes","date":"2014-12-16T10:52:12.092Z","type":"message"}
{"nick":"substack","message":"tmpvar already whipped up a pretty good clipping lib","date":"2014-12-16T10:52:32.476Z","type":"message"}
{"nick":"anandthakker","message":"hmmm.  i’m starting to be intrigued byt he voronoi idea...","date":"2014-12-16T10:52:40.395Z","type":"message"}
{"nick":"anandthakker","message":"voronoi-tree?","date":"2014-12-16T10:52:49.090Z","type":"message"}
{"nick":"anandthakker","message":"oh nice — i actually could use that polygon clipping thing for some geometry stuff i’m working on","date":"2014-12-16T10:54:00.873Z","type":"message"}
{"nick":"anandthakker","message":"substack: actually wouldn’t the k-d/quad tree idea handle different sizes naturally?","date":"2014-12-16T10:57:44.187Z","type":"message"}
{"nick":"substack","message":"https://www.npmjs.com/package/polygon.clip","date":"2014-12-16T10:57:46.940Z","type":"message"}
{"nick":"substack","message":"anandthakker: I don't think it would, since kd trees are meant to handle points not bounding volumes or polygons","date":"2014-12-16T10:58:42.338Z","type":"message"}
{"nick":"substack","message":"but one thing I could do is subdivide all line segments greater than a threshold distance","date":"2014-12-16T10:59:15.137Z","type":"message"}
{"nick":"substack","message":"then I would only need to cast out that threshold distance when looking at a region to ensure that I wouldn't get lines intersecting the viewport","date":"2014-12-16T11:00:09.726Z","type":"message"}
{"nick":"anandthakker","message":"the nodes of the tree are points, but they determine 2 regions (or 4 for quadtree), right?  seems like that means it’s straightforward to generalize kd to index 2-d items by the  smallest containing region","date":"2014-12-16T11:04:24.475Z","type":"message"}
{"nick":"anandthakker","message":"oh unless you’re still trying to avoid the log lookup","date":"2014-12-16T11:05:21.734Z","type":"message"}
{"nick":"substack","message":"that's true if I already have the log lookup","date":"2014-12-16T11:08:21.211Z","type":"message"}
{"nick":"substack","message":"that would be a good place to do the checks for larger geometries","date":"2014-12-16T11:08:30.047Z","type":"message"}
{"nick":"substack","message":"that's sort of what rtrees do","date":"2014-12-16T11:08:43.463Z","type":"message"}
{"nick":"substack","message":"but the balancing on those seems quite complicated plus the additional space","date":"2014-12-16T11:08:56.446Z","type":"message"}
{"nick":"quijote","reason":"Ping timeout: 260 seconds","date":"2014-12-16T11:13:17.009Z","type":"quit"}
{"nick":"anandthakker","message":"(ARGH: from your link to tmpvar, i found his vec2, line2, circle2… having just wasted time making my own (crappy) ones.  i wish finding good packages was a bit easier.)","date":"2014-12-16T11:14:38.743Z","type":"message"}
{"nick":"anandthakker","message":"(but anyway thanks ;), it’ll be nice to swap those in.)","date":"2014-12-16T11:15:04.793Z","type":"message"}
{"nick":"substack","message":"vec2 isn't a great idea see https://github.com/tmpvar/polygon.clip.js/issues/7","date":"2014-12-16T11:16:16.385Z","type":"message"}
{"nick":"h0ke","date":"2014-12-16T11:16:47.885Z","type":"join"}
{"nick":"substack","message":"much better to keep the data structures as native arrays or typed arrays","date":"2014-12-16T11:17:07.997Z","type":"message"}
{"nick":"anandthakker","message":"oh, interesting.  cool.","date":"2014-12-16T11:18:03.094Z","type":"message"}
{"nick":"anandthakker","message":"hmm, alas the line and circle use vec2, also","date":"2014-12-16T11:21:02.362Z","type":"message"}
{"nick":"h0ke","reason":"Ping timeout: 245 seconds","date":"2014-12-16T11:21:57.640Z","type":"quit"}
{"nick":"substack","message":"I wonder if there is a better coordinate system I can translate wgs 84 into","date":"2014-12-16T11:24:45.581Z","type":"message"}
{"nick":"substack","message":"to handle the distortion at the poles better","date":"2014-12-16T11:24:54.672Z","type":"message"}
{"nick":"krl","message":"substack: http://oliverstickers.com/earth-octahedron.html","date":"2014-12-16T11:26:42.514Z","type":"message"}
{"nick":"krl","message":":)","date":"2014-12-16T11:26:44.270Z","type":"message"}
{"nick":"therealkoopa","date":"2014-12-16T11:27:09.759Z","type":"join"}
{"nick":"stagas","reason":"Quit: Bye","date":"2014-12-16T11:27:11.523Z","type":"quit"}
{"nick":"anandthakker","message":"lol","date":"2014-12-16T11:29:18.284Z","type":"message"}
{"nick":"Mso150","reason":"Read error: Connection reset by peer","date":"2014-12-16T11:32:18.120Z","type":"quit"}
{"nick":"therealkoopa","reason":"Ping timeout: 256 seconds","date":"2014-12-16T11:33:24.519Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: thealphanerd","date":"2014-12-16T11:38:27.564Z","type":"quit"}
{"nick":"quijote","date":"2014-12-16T11:39:14.476Z","type":"join"}
{"nick":"quijote","reason":"Ping timeout: 250 seconds","date":"2014-12-16T11:43:34.274Z","type":"quit"}
{"nick":"hemanth","date":"2014-12-16T12:09:06.572Z","type":"join"}
{"nick":"oldskirt_","date":"2014-12-16T12:11:13.821Z","type":"join"}
{"nick":"oldskirt","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:14:27.697Z","type":"quit"}
{"nick":"ins0mnia","reason":"Read error: Connection reset by peer","date":"2014-12-16T12:15:24.142Z","type":"quit"}
{"nick":"owenb____","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:15:25.970Z","type":"quit"}
{"nick":"jden","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:16:18.782Z","type":"quit"}
{"nick":"ELLIOTTCABLE","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:16:18.782Z","type":"quit"}
{"nick":"trevnorris","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:16:51.803Z","type":"quit"}
{"nick":"Guest31951","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:16:51.803Z","type":"quit"}
{"nick":"sindresorhus","date":"2014-12-16T12:18:11.037Z","type":"join"}
{"nick":"owenb____","date":"2014-12-16T12:18:22.877Z","type":"join"}
{"nick":"ELLIOTTCABLE","date":"2014-12-16T12:18:38.909Z","type":"join"}
{"nick":"trevnorris","date":"2014-12-16T12:18:58.978Z","type":"join"}
{"nick":"karissa_","date":"2014-12-16T12:19:56.969Z","type":"join"}
{"nick":"jden","date":"2014-12-16T12:20:06.054Z","type":"join"}
{"nick":"karissa","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:20:11.492Z","type":"quit"}
{"nick":"andreypopp_","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:20:11.492Z","type":"quit"}
{"nick":"Raynos","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:20:11.675Z","type":"quit"}
{"nick":"karissa_","new_nick":"karissa","date":"2014-12-16T12:20:16.594Z","type":"nick"}
{"nick":"jbenet","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:20:30.845Z","type":"quit"}
{"nick":"addisonj","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:20:31.028Z","type":"quit"}
{"nick":"insertcoffee","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:20:31.609Z","type":"quit"}
{"nick":"jbenet","date":"2014-12-16T12:20:51.274Z","type":"join"}
{"nick":"therealkoopa","date":"2014-12-16T12:20:56.025Z","type":"join"}
{"nick":"tanepiper___","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:21:03.495Z","type":"quit"}
{"nick":"insertcoffee","date":"2014-12-16T12:21:18.674Z","type":"join"}
{"nick":"Raynos","date":"2014-12-16T12:21:18.871Z","type":"join"}
{"nick":"andreypopp_","date":"2014-12-16T12:21:43.667Z","type":"join"}
{"nick":"addisonj","date":"2014-12-16T12:21:53.826Z","type":"join"}
{"nick":"nrw","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:22:14.304Z","type":"quit"}
{"nick":"rvagg","reason":"Ping timeout: 260 seconds","date":"2014-12-16T12:22:21.175Z","type":"quit"}
{"nick":"nrw","date":"2014-12-16T12:23:46.313Z","type":"join"}
{"nick":"gorhgorh_","date":"2014-12-16T12:23:59.537Z","type":"join"}
{"nick":"rvagg","date":"2014-12-16T12:25:35.992Z","type":"join"}
{"nick":"tanepiper___","date":"2014-12-16T12:25:55.808Z","type":"join"}
{"nick":"jaz303_","date":"2014-12-16T12:29:27.287Z","type":"join"}
{"nick":"gorhgorh","reason":"*.net *.split","date":"2014-12-16T12:31:15.163Z","type":"quit"}
{"nick":"gausby","reason":"*.net *.split","date":"2014-12-16T12:31:15.163Z","type":"quit"}
{"nick":"jaz303","reason":"*.net *.split","date":"2014-12-16T12:31:15.163Z","type":"quit"}
{"nick":"nickleefly","reason":"Quit: Connection closed for inactivity","date":"2014-12-16T12:40:31.285Z","type":"quit"}
{"nick":"gausby","date":"2014-12-16T12:48:54.449Z","type":"join"}
{"nick":"therealkoopa","reason":"Ping timeout: 272 seconds","date":"2014-12-16T12:49:19.819Z","type":"quit"}
{"nick":"therealkoopa","date":"2014-12-16T12:50:49.477Z","type":"join"}
{"nick":"hemanth","reason":"Quit: This computer has gone to sleep","date":"2014-12-16T12:54:25.846Z","type":"quit"}
{"nick":"hemanth","date":"2014-12-16T12:55:19.459Z","type":"join"}
{"nick":"gorhgorh_","reason":"Quit: leaving","date":"2014-12-16T13:11:03.314Z","type":"quit"}
{"nick":"gorhgorh","date":"2014-12-16T13:11:28.288Z","type":"join"}
{"nick":"toddself_zz","new_nick":"toddself","date":"2014-12-16T13:25:42.815Z","type":"nick"}
{"nick":"toddself","date":"2014-12-16T13:25:50.942Z","type":"quit"}
{"nick":"knownasilya","date":"2014-12-16T13:50:24.187Z","type":"join"}
{"nick":"therealk_","date":"2014-12-16T14:21:45.968Z","type":"join"}
{"nick":"hemanth_","date":"2014-12-16T14:22:23.476Z","type":"join"}
{"nick":"tmpvar___","date":"2014-12-16T14:22:28.825Z","type":"join"}
{"nick":"toddself","date":"2014-12-16T14:22:48.865Z","type":"join"}
{"nick":"mikolalysenko_","message":"substack:  you can use a range tree","date":"2014-12-16T14:24:21.907Z","type":"message"}
{"nick":"mikolalysenko_","message":"substack: or turn whatever data structure you like into a b-tree by expanding it out a couple of levels","date":"2014-12-16T14:24:47.162Z","type":"message"}
{"nick":"hemanth","reason":"*.net *.split","date":"2014-12-16T14:30:13.307Z","type":"quit"}
{"nick":"therealkoopa","reason":"*.net *.split","date":"2014-12-16T14:30:13.307Z","type":"quit"}
{"nick":"tmpvar__","reason":"*.net *.split","date":"2014-12-16T14:30:13.854Z","type":"quit"}
{"nick":"tmpvar___","new_nick":"tmpvar__","date":"2014-12-16T14:30:22.188Z","type":"nick"}
{"nick":"hemanth_","reason":"Quit: This computer has gone to sleep","date":"2014-12-16T14:30:58.968Z","type":"quit"}
{"nick":"mikolalysenko_","message":"so, I'd probably use either an r-tree or a range tree","date":"2014-12-16T14:31:56.994Z","type":"message"}
{"nick":"mikolalysenko_","message":"re coordinates on a sphere, I think using 3d coordinates is a better solution","date":"2014-12-16T14:38:08.599Z","type":"message"}
{"nick":"mikolalysenko_","message":"at least for nearest neighbor / bounding circle queries","date":"2014-12-16T14:38:33.839Z","type":"message"}
{"nick":"mikolalysenko_","message":"you can reformulate the problem of locating all points in a great circle as intersecting the points with a halfspace","date":"2014-12-16T14:39:14.051Z","type":"message"}
{"nick":"krl","message":"mikolalysenko_: interesting!","date":"2014-12-16T14:42:11.631Z","type":"message"}
{"nick":"krl","message":"i've been thinking about doing basic geolocation stuff, and 3d coordinates sound like a very interesting approach","date":"2014-12-16T14:42:31.138Z","type":"message"}
{"nick":"mikolalysenko_","message":"what sort of queries are you interested in doing?","date":"2014-12-16T14:42:47.342Z","type":"message"}
{"nick":"mikolalysenko_","message":"like closest point, knn, circle range?","date":"2014-12-16T14:42:59.968Z","type":"message"}
{"nick":"krl","message":"circle range","date":"2014-12-16T14:43:05.417Z","type":"message"}
{"nick":"krl","message":"+ closest","date":"2014-12-16T14:43:10.626Z","type":"message"}
{"nick":"mikolalysenko_","message":"ah, then here is what you do","date":"2014-12-16T14:43:13.284Z","type":"message"}
{"nick":"mikolalysenko_","message":"take the points on the earth, map them to the spherical 3d coordinate","date":"2014-12-16T14:43:26.907Z","type":"message"}
{"nick":"mikolalysenko_","message":"then compute the convex hull","date":"2014-12-16T14:43:30.512Z","type":"message"}
{"nick":"mikolalysenko_","message":"then you can answer each of these queries in log(n) time overhead (+ number of returned items for halfspace) by reducing them to a linear programming query","date":"2014-12-16T14:44:03.017Z","type":"message"}
{"nick":"krl","message":"another restraint: starting with zero points, and having low insertion cost","date":"2014-12-16T14:44:08.904Z","type":"message"}
{"nick":"mikolalysenko_","message":"which you can solve using dobkin-kirkpatrick","date":"2014-12-16T14:44:10.497Z","type":"message"}
{"nick":"mikolalysenko_","message":"I wouldn't bother doing incremental insertion","date":"2014-12-16T14:44:20.999Z","type":"message"}
{"nick":"mikolalysenko_","message":"just do it in a batch","date":"2014-12-16T14:44:25.516Z","type":"message"}
{"nick":"krl","message":"not possible in this case","date":"2014-12-16T14:44:30.833Z","type":"message"}
{"nick":"mikolalysenko_","message":"why not?","date":"2014-12-16T14:44:37.732Z","type":"message"}
{"nick":"krl","message":"because it's for people registering their position","date":"2014-12-16T14:44:51.050Z","type":"message"}
{"nick":"krl","message":"and i want to start small, and be able to scale","date":"2014-12-16T14:44:58.689Z","type":"message"}
{"nick":"mikolalysenko_","message":"so you can use techniques like log structured merging","date":"2014-12-16T14:45:04.530Z","type":"message"}
{"nick":"mikolalysenko_","message":"where you build a pool of data structures, then merge them together when they get filled up","date":"2014-12-16T14:45:19.174Z","type":"message"}
{"nick":"hemanth","date":"2014-12-16T14:45:30.653Z","type":"join"}
{"nick":"mikolalysenko_","message":"I have a video about this, one second","date":"2014-12-16T14:45:40.929Z","type":"message"}
{"nick":"krl","message":"i had been thinking of starting with a quadtree tetrahedon, and do subdivisions","date":"2014-12-16T14:45:42.000Z","type":"message"}
{"nick":"substack","message":"cool thanks!","date":"2014-12-16T14:45:57.912Z","type":"message"}
{"nick":"mikolalysenko_","message":"first part of this should cover it:  https://www.youtube.com/watch?v=QUQ6FT8gTMU&list=PLESnaHRvLM-72xIXf8dL2EOqN8UgAZMj7&index=18","date":"2014-12-16T14:46:07.108Z","type":"message"}
{"nick":"krl","message":"with 3d-coordinates, an octtree might work as well","date":"2014-12-16T14:46:28.271Z","type":"message"}
{"nick":"substack","message":"have been reading papers and poking at osm extract scripts all night","date":"2014-12-16T14:46:31.048Z","type":"message"}
{"nick":"krl","message":"or just bsp","date":"2014-12-16T14:46:53.835Z","type":"message"}
{"nick":"mikolalysenko_","message":"well, bsp might not be very fast","date":"2014-12-16T14:47:02.248Z","type":"message"}
{"nick":"mikolalysenko_","message":"though you can speed up location using fingering","date":"2014-12-16T14:47:11.374Z","type":"message"}
{"nick":"mikolalysenko_","message":"also quadtrees are not great for point location","date":"2014-12-16T14:47:18.022Z","type":"message"}
{"nick":"mikolalysenko_","message":"you need to at least apply compression to them","date":"2014-12-16T14:47:28.330Z","type":"message"}
{"nick":"mikolalysenko_","message":"are you trying to locate points in regions, or locate closest points to query points?","date":"2014-12-16T14:47:42.752Z","type":"message"}
{"nick":"mikolalysenko_","message":"these are different problems","date":"2014-12-16T14:47:46.913Z","type":"message"}
{"nick":"krl","message":"1. locate the point closest to point A","date":"2014-12-16T14:47:59.585Z","type":"message"}
{"nick":"krl","message":"2. locate the 10 points closest to point A","date":"2014-12-16T14:48:15.430Z","type":"message"}
{"nick":"krl","message":"i guess that's what i need","date":"2014-12-16T14:48:22.882Z","type":"message"}
{"nick":"mikolalysenko_","message":"ok","date":"2014-12-16T14:48:26.461Z","type":"message"}
{"nick":"mikolalysenko_","message":"if you want to get something working asap, you can try this library:  https://github.com/mikolalysenko/static-kdtree","date":"2014-12-16T14:48:46.927Z","type":"message"}
{"nick":"mikolalysenko_","message":"it is static, but that shouldn't stop you","date":"2014-12-16T14:48:54.008Z","type":"message"}
{"nick":"mikolalysenko_","message":"what you do is you merge the data structures together","date":"2014-12-16T14:49:03.345Z","type":"message"}
{"nick":"mikolalysenko_","message":"basically you have a list of trees, run the query on those trees independently and then merge the results","date":"2014-12-16T14:49:29.485Z","type":"message"}
{"nick":"mikolalysenko_","message":"if you get too many trees, then you combine them","date":"2014-12-16T14:49:39.879Z","type":"message"}
{"nick":"krl","message":"i'm thinking of building this on ethereum","date":"2014-12-16T14:50:17.688Z","type":"message"}
{"nick":"krl","message":"so it has to be really cheap, and can't really have expensive edge cases","date":"2014-12-16T14:50:32.839Z","type":"message"}
{"nick":"mikolalysenko_","message":"so I would not bother building the index and storing that in ethereum","date":"2014-12-16T14:50:48.152Z","type":"message"}
{"nick":"mikolalysenko_","message":"if your data set is small enough brute force might be ok","date":"2014-12-16T14:51:05.312Z","type":"message"}
{"nick":"mikolalysenko_","message":"however I don't have a good mental model of what is expensive in ethereum and what is cheap, since I haven't studied it carefully yet","date":"2014-12-16T14:51:43.891Z","type":"message"}
{"nick":"mikolalysenko_","message":"if it is like a normal distributed system, then I would say just build the index separately","date":"2014-12-16T14:52:05.954Z","type":"message"}
{"nick":"mikolalysenko_","message":"or build multiple indices and merge results","date":"2014-12-16T14:52:13.928Z","type":"message"}
{"nick":"mikolalysenko_","message":"but I think it is a little weird in that computations are billed by the operation or something, which is strange to me","date":"2014-12-16T14:52:35.912Z","type":"message"}
{"nick":"krl","message":"the idea relies on having all positions stored in a datastructure on ethereum","date":"2014-12-16T14:52:43.656Z","type":"message"}
{"nick":"krl","message":"it's a strange new world for suer","date":"2014-12-16T14:52:57.021Z","type":"message"}
{"nick":"krl","message":"sure","date":"2014-12-16T14:52:58.219Z","type":"message"}
{"nick":"mikolalysenko_","message":"can you perform random access in this data structure cheaply?","date":"2014-12-16T14:53:20.067Z","type":"message"}
{"nick":"mikolalysenko_","message":"or are accesses performed in bulk","date":"2014-12-16T14:53:34.556Z","type":"message"}
{"nick":"krl","message":"it's basically a key-value store","date":"2014-12-16T14:53:39.284Z","type":"message"}
{"nick":"mikolalysenko_","message":"ok","date":"2014-12-16T14:53:47.226Z","type":"message"}
{"nick":"krl","message":"for each program running in the net","date":"2014-12-16T14:53:48.020Z","type":"message"}
{"nick":"mikolalysenko_","message":"are programs billed by wall-clock time, or by the number of cycles in some ethereum vm?","date":"2014-12-16T14:54:41.569Z","type":"message"}
{"nick":"mikolalysenko_","message":"so if I access data in ethereum which is local, is that cheaper than accessing data on a remote machine?","date":"2014-12-16T14:54:59.126Z","type":"message"}
{"nick":"krl","message":"cycles","date":"2014-12-16T14:56:36.374Z","type":"message"}
{"nick":"krl","message":"also, no remote access possible","date":"2014-12-16T14:56:46.743Z","type":"message"}
{"nick":"mikolalysenko_","message":"is the key value store mutable or immutable?","date":"2014-12-16T14:57:26.311Z","type":"message"}
{"nick":"krl","message":"mutable from the view of the current transaction","date":"2014-12-16T14:58:03.852Z","type":"message"}
{"nick":"mikolalysenko_","message":"ok, and are these points ever deleted, or are they only inserted?","date":"2014-12-16T14:58:27.947Z","type":"message"}
{"nick":"krl","message":"they could be deleted","date":"2014-12-16T14:58:54.507Z","type":"message"}
{"nick":"krl","message":"but it's not a hard requirement","date":"2014-12-16T14:59:04.380Z","type":"message"}
{"nick":"krl","message":"they probably should though","date":"2014-12-16T14:59:13.063Z","type":"message"}
{"nick":"krl","message":"no use having lots of bad points sticking around","date":"2014-12-16T14:59:21.570Z","type":"message"}
{"nick":"krl","message":"also, you get credits back by freeing up space","date":"2014-12-16T14:59:35.313Z","type":"message"}
{"nick":"mikolalysenko_","message":"interesting","date":"2014-12-16T15:01:19.956Z","type":"message"}
{"nick":"mikolalysenko_","message":"you could maybe use some sort of dynamic convex hull algorithm here","date":"2014-12-16T15:01:30.232Z","type":"message"}
{"nick":"mikolalysenko_","message":"which would probably work, but it might be complicated","date":"2014-12-16T15:01:38.607Z","type":"message"}
{"nick":"mikolalysenko_","message":"though I am now wondering if the fact that all points live on a sphere can be used to simplify it a bit","date":"2014-12-16T15:02:00.742Z","type":"message"}
{"nick":"krl","message":"mikolalysenko_: thanks for the github link btw, saved it","date":"2014-12-16T15:02:18.442Z","type":"message"}
{"nick":"mikolalysenko_","message":"a compressed octree could also work","date":"2014-12-16T15:02:46.505Z","type":"message"}
{"nick":"mikolalysenko_","message":"though that is more useful for approximate nearest neighbor queries","date":"2014-12-16T15:03:24.518Z","type":"message"}
{"nick":"mikolalysenko_","message":"but it might be good enough for this purpose","date":"2014-12-16T15:03:30.920Z","type":"message"}
{"nick":"mikolalysenko_","message":"you could try this:  https://www.ics.uci.edu/~eppstein/pubs/EppGooSun-SoCG-05.pdf","date":"2014-12-16T15:03:42.483Z","type":"message"}
{"nick":"krl","message":"compressed means?","date":"2014-12-16T15:03:50.518Z","type":"message"}
{"nick":"toddself","new_nick":"toddself_zz","date":"2014-12-16T15:04:27.073Z","type":"nick"}
{"nick":"krl","message":"ah, it says in the pdf","date":"2014-12-16T15:05:07.140Z","type":"message"}
{"nick":"mikolalysenko_","message":"one problem with quadtrees is that they get to big","date":"2014-12-16T15:05:07.326Z","type":"message"}
{"nick":"krl","message":"thx","date":"2014-12-16T15:05:09.554Z","type":"message"}
{"nick":"mikolalysenko_","message":"specifically the height of a quadtree is about log(spread)","date":"2014-12-16T15:05:27.009Z","type":"message"}
{"nick":"mikolalysenko_","message":"where spread is the ratio of the distance between the farthest pair of points and the closest pair","date":"2014-12-16T15:05:39.312Z","type":"message"}
{"nick":"mikolalysenko_","message":"also log(spread) > log(n)","date":"2014-12-16T15:05:56.137Z","type":"message"}
{"nick":"mikolalysenko_","message":"which means that stuff which takes log(spread) time is going to be slow","date":"2014-12-16T15:06:19.696Z","type":"message"}
{"nick":"mikolalysenko_","message":"in the worst case, log(spread) can be infinite","date":"2014-12-16T15:06:27.544Z","type":"message"}
{"nick":"mikolalysenko_","message":"best case it hits about log(n) (for uniformly distributed points)","date":"2014-12-16T15:06:49.987Z","type":"message"}
{"nick":"mikolalysenko_","message":"compressed quadtrees solve this problem by removing empty nodes in the tree","date":"2014-12-16T15:08:22.031Z","type":"message"}
{"nick":"mikolalysenko_","message":"kind of like how patricia/radix tries compress tries down","date":"2014-12-16T15:08:31.450Z","type":"message"}
{"nick":"krl","message":"i see","date":"2014-12-16T15:08:46.161Z","type":"message"}
{"nick":"mikolalysenko_","message":"you can basically think of a compressed quadtree as something like a compressed trie encoding of a quadtree","date":"2014-12-16T15:08:48.042Z","type":"message"}
{"nick":"krl","message":"yes i was worried that i would run into splits that would just create loads of empty nodes","date":"2014-12-16T15:09:00.814Z","type":"message"}
{"nick":"krl","message":"with lots of points in one place","date":"2014-12-16T15:09:09.870Z","type":"message"}
{"nick":"mikolalysenko_","message":"exactly","date":"2014-12-16T15:09:15.361Z","type":"message"}
{"nick":"peutetre","reason":"Ping timeout: 256 seconds","date":"2014-12-16T15:09:18.554Z","type":"quit"}
{"nick":"mikolalysenko_","message":"so one perspective on quadtrees is that they are actually tries on z-order interleavings of the bits of the points","date":"2014-12-16T15:09:39.797Z","type":"message"}
{"nick":"mikolalysenko_","message":"here is a wiki page with pictures:  https://en.wikipedia.org/wiki/Z-order_curve","date":"2014-12-16T15:09:55.802Z","type":"message"}
{"nick":"mikolalysenko_","message":"compressed quadtrees then are the same as crit-bit tries on these z-order interleavings","date":"2014-12-16T15:10:14.620Z","type":"message"}
{"nick":"toddself_zz","new_nick":"toddself","date":"2014-12-16T15:11:05.493Z","type":"nick"}
{"nick":"krl","message":"i think i heard of like 2 new trees in this conversation :D","date":"2014-12-16T15:17:02.313Z","type":"message"}
{"nick":"pfraze","date":"2014-12-16T15:17:42.765Z","type":"join"}
{"nick":"mikolalysenko_","message":"there are other ways to solve this though, but they might not work so well in ethereum","date":"2014-12-16T15:18:24.204Z","type":"message"}
{"nick":"krl","message":"at this time i just want something simple that actually scales reasonably","date":"2014-12-16T15:18:50.274Z","type":"message"}
{"nick":"mikolalysenko_","message":"compressed octree might be the easiest solution","date":"2014-12-16T15:19:09.894Z","type":"message"}
{"nick":"mikolalysenko_","message":"but the best solution would be a dynamic convex hull + point location structure","date":"2014-12-16T15:19:35.126Z","type":"message"}
{"nick":"mikolalysenko_","message":"another possibility is just binning the points","date":"2014-12-16T15:20:23.637Z","type":"message"}
{"nick":"mikolalysenko_","message":"make a grid of all points on the surface of the earth and then just search in some adjacent bins","date":"2014-12-16T15:20:53.612Z","type":"message"}
{"nick":"mikolalysenko_","message":"getting the bin size right is the trick though","date":"2014-12-16T15:21:07.717Z","type":"message"}
{"nick":"mikolalysenko_","message":"can you use c++ in ethereum?","date":"2014-12-16T15:22:11.527Z","type":"message"}
{"nick":"mikolalysenko_","message":"if so this data structure would work:  http://doc.cgal.org/latest/Convex_hull_3/#Convex_hull_3Dynamic","date":"2014-12-16T15:22:21.029Z","type":"message"}
{"nick":"mikolalysenko_","message":"though generally making things dynamic if you only care about queries is a lot of extra headache and maybe not worth it","date":"2014-12-16T15:23:12.172Z","type":"message"}
{"nick":"mikolalysenko_","message":"having fast/small static data structures and merging results tends to perform better in practice","date":"2014-12-16T15:23:35.625Z","type":"message"}
{"nick":"tmpvar__","reason":"Changing host","date":"2014-12-16T15:24:54.193Z","type":"quit"}
{"nick":"tmpvar__","date":"2014-12-16T15:24:54.379Z","type":"join"}
{"nick":"krl","message":"mikolalysenko_: no c++","date":"2014-12-16T15:27:47.408Z","type":"message"}
{"nick":"krl","message":"they use custom bytecode","date":"2014-12-16T15:27:57.916Z","type":"message"}
{"nick":"krl","message":"and you really need domain specific languages with zero overhead","date":"2014-12-16T15:28:23.467Z","type":"message"}
{"nick":"krl","message":"but \"all points\" on the surface of earth?","date":"2014-12-16T15:28:39.639Z","type":"message"}
{"nick":"krl","message":"that's an infinite amount afaik ;)","date":"2014-12-16T15:28:52.839Z","type":"message"}
{"nick":"mikolalysenko_","message":"well, given the adversarial programming environment it might be better to just do something really simple and get on with it","date":"2014-12-16T15:29:23.520Z","type":"message"}
{"nick":"mikolalysenko_","message":"I think that compressed octree is a good bet","date":"2014-12-16T15:29:40.301Z","type":"message"}
{"nick":"mikolalysenko_","message":"it should give acceptable performance and is relatively easy to implement in either static/dynamic forms","date":"2014-12-16T15:30:45.943Z","type":"message"}
{"nick":"krl","message":"i'm starting to think so too","date":"2014-12-16T15:31:01.294Z","type":"message"}
{"nick":"krl","message":"never thought about using 3d coordinates, thanks for the idea!","date":"2014-12-16T15:31:26.741Z","type":"message"}
{"nick":"krl","message":"i'll look at the skip structure too","date":"2014-12-16T15:31:38.861Z","type":"message"}
{"nick":"krl","message":"not sure if it's needed","date":"2014-12-16T15:31:48.226Z","type":"message"}
{"nick":"mikolalysenko_","message":"skip is only needed if you want dynamic","date":"2014-12-16T15:32:09.453Z","type":"message"}
{"nick":"krl","message":"dynamic in what sense?","date":"2014-12-16T15:35:14.208Z","type":"message"}
{"nick":"mikolalysenko_","message":"dynamic means point set changes (that is you want to insert/delete points)","date":"2014-12-16T15:37:04.896Z","type":"message"}
{"nick":"krl","message":"yes i do","date":"2014-12-16T15:39:04.321Z","type":"message"}
{"nick":"krl","message":"but you don't need skips for that","date":"2014-12-16T15:39:09.618Z","type":"message"}
{"nick":"krl","message":"i just realized noone implemented sin/cos/tan in EVM yet :D","date":"2014-12-16T15:40:08.973Z","type":"message"}
{"nick":"mikolalysenko_","message":"ah, you are right","date":"2014-12-16T15:41:22.818Z","type":"message"}
{"nick":"mikolalysenko_","message":"just spaced out a bit, trying to do 2 things at once","date":"2014-12-16T15:41:39.348Z","type":"message"}
{"nick":"krl","message":"actually, that's not a problem at all","date":"2014-12-16T15:41:55.208Z","type":"message"}
{"nick":"krl","message":"that does not need to happen at the evm level","date":"2014-12-16T15:42:03.144Z","type":"message"}
{"nick":"krl","message":"you can just submit your points as 3d coords","date":"2014-12-16T15:42:12.478Z","type":"message"}
{"nick":"krl","message":"and check the distance to origo, not to allow points in the sky or below ground","date":"2014-12-16T15:42:29.059Z","type":"message"}
{"nick":"krl","message":"*phew* ;)","date":"2014-12-16T15:42:58.730Z","type":"message"}
{"nick":"mikolalysenko_","message":"getting the distance right can be a bit tricky though","date":"2014-12-16T15:45:19.881Z","type":"message"}
{"nick":"mikolalysenko_","message":"since it needs a square root and a divide","date":"2014-12-16T15:46:07.024Z","type":"message"}
{"nick":"mikolalysenko_","message":"though I am now wondering if you can side step this using homogeneous coordinates","date":"2014-12-16T15:46:22.267Z","type":"message"}
{"nick":"CoderPuppy","date":"2014-12-16T15:46:26.677Z","type":"join"}
{"nick":"mikolalysenko_","message":"alternatively, you could just use fp and round it","date":"2014-12-16T15:46:43.920Z","type":"message"}
{"nick":"Maciek416","date":"2014-12-16T15:47:43.485Z","type":"join"}
{"nick":"cpup","reason":"Ping timeout: 256 seconds","date":"2014-12-16T15:48:24.546Z","type":"quit"}
{"nick":"krl","message":"fp?","date":"2014-12-16T15:50:08.981Z","type":"message"}
{"nick":"krl","message":"no need for rounding, word size is 256 bit :)","date":"2014-12-16T15:50:21.499Z","type":"message"}
{"nick":"mikolalysenko_","message":"you still need to round since square roots are irrational","date":"2014-12-16T15:51:36.201Z","type":"message"}
{"nick":"mikolalysenko_","message":"or you can use galois extensions, but it gets messy","date":"2014-12-16T15:51:48.702Z","type":"message"}
{"nick":"krl","message":"oh, square root might be the problem yes","date":"2014-12-16T15:55:54.673Z","type":"message"}
{"nick":"mikolalysenko_","message":"you can use oriented projective geometry, but not sure how this would work with octrees","date":"2014-12-16T15:57:08.095Z","type":"message"}
