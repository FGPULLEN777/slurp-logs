{"nick":"ircretary","date":"2014-04-21T00:00:09.497Z","type":"join"}
{"nick":"rakm","reason":"Quit: Connection closed for inactivity","date":"2014-04-21T00:06:08.827Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 16]","date":"2014-04-21T00:26:51.984Z","type":"message"}
{"nick":"AvianPhone","reason":"Remote host closed the connection","date":"2014-04-21T00:28:58.815Z","type":"quit"}
{"nick":"AvianFlu","date":"2014-04-21T00:29:27.834Z","type":"join"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2014-04-21T00:30:31.832Z","type":"quit"}
{"nick":"thlorenz","date":"2014-04-21T00:36:58.714Z","type":"join"}
{"nick":"kumavis","date":"2014-04-21T00:37:53.727Z","type":"join"}
{"nick":"contraha_","reason":"Quit: Sleeping","date":"2014-04-21T00:38:17.045Z","type":"quit"}
{"nick":"contraha_","date":"2014-04-21T00:39:53.554Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-04-21T00:41:53.260Z","type":"quit"}
{"nick":"thlorenz","date":"2014-04-21T00:42:13.015Z","type":"join"}
{"nick":"ednapiranha","date":"2014-04-21T00:45:51.649Z","type":"join"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2014-04-21T01:04:25.941Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 25]","date":"2014-04-21T01:26:52.028Z","type":"message"}
{"nick":"taterbase","date":"2014-04-21T01:31:58.077Z","type":"join"}
{"nick":"wolfeidau","date":"2014-04-21T01:40:37.129Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2014-04-21T02:02:47.283Z","type":"quit"}
{"nick":"wolfeidau","date":"2014-04-21T02:15:28.746Z","type":"join"}
{"nick":"kumavis","reason":"Ping timeout: 250 seconds","date":"2014-04-21T02:18:13.559Z","type":"quit"}
{"nick":"kumavis","date":"2014-04-21T02:20:29.508Z","type":"join"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 14]","date":"2014-04-21T02:26:51.914Z","type":"message"}
{"nick":"jxson","date":"2014-04-21T02:29:00.863Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-04-21T02:49:06.881Z","type":"quit"}
{"nick":"kumavis","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2014-04-21T02:54:55.223Z","type":"quit"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-04-21T03:09:38.071Z","type":"quit"}
{"nick":"kumavis","date":"2014-04-21T03:10:02.725Z","type":"join"}
{"nick":"thlorenz","date":"2014-04-21T03:13:50.547Z","type":"join"}
{"nick":"kriskowal","date":"2014-04-21T03:18:11.984Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-04-21T03:20:43.805Z","type":"quit"}
{"nick":"kumavis","reason":"Ping timeout: 250 seconds","date":"2014-04-21T03:25:23.389Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 15]","date":"2014-04-21T03:26:51.865Z","type":"message"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2014-04-21T03:36:52.136Z","type":"quit"}
{"nick":"kumavis","date":"2014-04-21T03:37:34.749Z","type":"join"}
{"nick":"phated","date":"2014-04-21T03:46:59.315Z","type":"join"}
{"nick":"jxson","date":"2014-04-21T03:52:19.001Z","type":"join"}
{"nick":"ednapiranha","date":"2014-04-21T03:55:17.515Z","type":"join"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-04-21T04:08:30.730Z","type":"quit"}
{"nick":"rowbit1","message":"substack, pkrumins: These encoders are STILL down: 50.56.27.70(dev-ie6-1), 50.57.171.229(dev-ie6-2), 184.106.99.27(dev-ie7-3)","date":"2014-04-21T04:12:50.768Z","type":"message"}
{"nick":"dguttman","date":"2014-04-21T04:21:04.517Z","type":"join"}
{"nick":"dguttman","reason":"Client Quit","date":"2014-04-21T04:24:07.652Z","type":"quit"}
{"nick":"jxson","reason":"Remote host closed the connection","date":"2014-04-21T04:24:46.378Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 21]","date":"2014-04-21T04:26:51.992Z","type":"message"}
{"nick":"dguttman","date":"2014-04-21T04:34:32.616Z","type":"join"}
{"nick":"mikolalysenko","reason":"Quit: Lost terminal","date":"2014-04-21T04:42:47.813Z","type":"quit"}
{"nick":"phated","date":"2014-04-21T04:46:35.450Z","type":"join"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-04-21T04:46:48.127Z","type":"quit"}
{"nick":"dguttman","reason":"Quit: dguttman","date":"2014-04-21T05:00:21.354Z","type":"quit"}
{"nick":"dominic_","date":"2014-04-21T05:03:51.164Z","type":"join"}
{"nick":"ednapiranha","reason":"Quit: Leaving...","date":"2014-04-21T05:04:30.157Z","type":"quit"}
{"nick":"kirbysayshi","reason":"Quit: Leaving...","date":"2014-04-21T05:25:52.291Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 23]","date":"2014-04-21T05:26:51.898Z","type":"message"}
{"nick":"contraha_","reason":"Quit: Sleeping","date":"2014-04-21T05:31:16.293Z","type":"quit"}
{"nick":"phated","date":"2014-04-21T05:35:10.693Z","type":"join"}
{"nick":"Maciek416","reason":"Remote host closed the connection","date":"2014-04-21T05:46:39.500Z","type":"quit"}
{"nick":"contraha_","date":"2014-04-21T05:54:49.406Z","type":"join"}
{"nick":"thealphanerd","date":"2014-04-21T05:59:37.106Z","type":"join"}
{"nick":"thealphanerd","reason":"Client Quit","date":"2014-04-21T05:59:55.050Z","type":"quit"}
{"nick":"thealphanerd","date":"2014-04-21T06:00:11.775Z","type":"join"}
{"nick":"fotoverite","reason":"Quit: fotoverite","date":"2014-04-21T06:07:30.011Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: thealphanerd","date":"2014-04-21T06:13:01.403Z","type":"quit"}
{"nick":"rowbit1","message":"Daily usage stats: [developer: 10, free: 436]","date":"2014-04-21T06:26:51.808Z","type":"message"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 1, free: 26]","date":"2014-04-21T06:26:52.017Z","type":"message"}
{"nick":"dominic_","reason":"Ping timeout: 240 seconds","date":"2014-04-21T06:28:26.868Z","type":"quit"}
{"nick":"brianloveswords","date":"2014-04-21T06:33:00.562Z","type":"join"}
{"nick":"thealphanerd","date":"2014-04-21T06:37:40.478Z","type":"join"}
{"nick":"ins0mnia","date":"2014-04-21T06:52:50.517Z","type":"join"}
{"nick":"jiangplu1","reason":"Quit: leaving","date":"2014-04-21T07:10:06.514Z","type":"quit"}
{"nick":"jiangplus","date":"2014-04-21T07:10:20.717Z","type":"join"}
{"nick":"kumavis","reason":"Ping timeout: 252 seconds","date":"2014-04-21T07:24:09.574Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 1, free: 26]","date":"2014-04-21T07:26:52.108Z","type":"message"}
{"nick":"Maciek416","date":"2014-04-21T07:35:26.927Z","type":"join"}
{"nick":"Maciek416","reason":"Ping timeout: 240 seconds","date":"2014-04-21T07:39:38.911Z","type":"quit"}
{"nick":"brianloveswords","reason":"Quit: Computer has gone to sleep.","date":"2014-04-21T07:41:33.295Z","type":"quit"}
{"nick":"addisonj","reason":"Quit: Connection closed for inactivity","date":"2014-04-21T08:00:43.354Z","type":"quit"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-04-21T08:01:41.179Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: thealphanerd","date":"2014-04-21T08:19:18.844Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 4, free: 46]","date":"2014-04-21T08:26:51.981Z","type":"message"}
{"nick":"contraha_","reason":"Quit: Sleeping","date":"2014-04-21T08:56:57.822Z","type":"quit"}
{"nick":"Maciek416","date":"2014-04-21T09:24:15.896Z","type":"join"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 1, free: 86]","date":"2014-04-21T09:26:51.906Z","type":"message"}
{"nick":"Maciek416","reason":"Ping timeout: 240 seconds","date":"2014-04-21T09:28:26.836Z","type":"quit"}
{"nick":"yorick","date":"2014-04-21T09:46:28.878Z","type":"join"}
{"nick":"dominic_","date":"2014-04-21T10:05:30.395Z","type":"join"}
{"nick":"rowbit1","message":"substack, pkrumins: These encoders are STILL down: 50.56.27.70(dev-ie6-1), 50.57.171.229(dev-ie6-2), 184.106.99.27(dev-ie7-3)","date":"2014-04-21T10:12:51.291Z","type":"message"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 45]","date":"2014-04-21T10:26:51.986Z","type":"message"}
{"nick":"AvianFlu","date":"2014-04-21T10:38:24.102Z","type":"join"}
{"nick":"taterbase","reason":"Quit: Connection closed for inactivity","date":"2014-04-21T11:00:45.133Z","type":"quit"}
{"nick":"Maciek416","date":"2014-04-21T11:13:03.756Z","type":"join"}
{"nick":"_matt","date":"2014-04-21T11:14:40.222Z","type":"join"}
{"nick":"Maciek416","reason":"Ping timeout: 240 seconds","date":"2014-04-21T11:17:30.698Z","type":"quit"}
{"nick":"_matt","reason":"Client Quit","date":"2014-04-21T11:17:53.580Z","type":"quit"}
{"nick":"calvinmetcalf","date":"2014-04-21T11:21:13.630Z","type":"join"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 27]","date":"2014-04-21T11:26:52.111Z","type":"message"}
{"nick":"dominic_","message":"feross: hey, when do you get to budapest?","date":"2014-04-21T11:55:56.342Z","type":"message"}
{"nick":"fotoverite","date":"2014-04-21T12:00:26.131Z","type":"join"}
{"nick":"phated","date":"2014-04-21T12:02:12.303Z","type":"join"}
{"nick":"phated","reason":"Ping timeout: 255 seconds","date":"2014-04-21T12:07:02.601Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 46]","date":"2014-04-21T12:26:52.059Z","type":"message"}
{"nick":"kenperkins","reason":"Ping timeout: 240 seconds","date":"2014-04-21T12:50:42.723Z","type":"quit"}
{"nick":"kenperkins","date":"2014-04-21T12:54:43.520Z","type":"join"}
{"nick":"thlorenz","date":"2014-04-21T12:58:40.680Z","type":"join"}
{"nick":"Maciek416","date":"2014-04-21T13:01:57.225Z","type":"join"}
{"nick":"Maciek416","reason":"Ping timeout: 264 seconds","date":"2014-04-21T13:06:53.252Z","type":"quit"}
{"nick":"dominic_","reason":"Ping timeout: 276 seconds","date":"2014-04-21T13:21:15.226Z","type":"quit"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-04-21T13:22:06.166Z","type":"quit"}
{"nick":"kevino80","date":"2014-04-21T13:23:59.488Z","type":"join"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 46]","date":"2014-04-21T13:26:52.092Z","type":"message"}
{"nick":"rwaldron","message":"A Johnny-Five user just filed an issue with an error that I've never seen before: https://github.com/rwaldron/johnny-five/issues/325","date":"2014-04-21T13:31:03.929Z","type":"message"}
{"nick":"rwaldron","message":"I searched joyent/node issues for anything similar and came up with nothing.","date":"2014-04-21T13:31:16.061Z","type":"message"}
{"nick":"ednapiranha","date":"2014-04-21T13:31:44.445Z","type":"join"}
{"nick":"thlorenz","date":"2014-04-21T13:34:15.933Z","type":"join"}
{"nick":"yorick","message":"rwaldron: something is calling something that isn't a function, apparently","date":"2014-04-21T13:36:34.087Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 240 seconds","date":"2014-04-21T13:42:38.388Z","type":"quit"}
{"nick":"mbrevoort","reason":"Remote host closed the connection","date":"2014-04-21T13:43:03.852Z","type":"quit"}
{"nick":"pfraze","date":"2014-04-21T13:45:36.874Z","type":"join"}
{"nick":"pfraze","reason":"Ping timeout: 252 seconds","date":"2014-04-21T13:56:56.862Z","type":"quit"}
{"nick":"pfraze_","date":"2014-04-21T13:57:02.209Z","type":"join"}
{"nick":"pfraze","date":"2014-04-21T13:59:39.778Z","type":"join"}
{"nick":"thlorenz","date":"2014-04-21T14:01:28.236Z","type":"join"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2014-04-21T14:02:31.341Z","type":"quit"}
{"nick":"pfraze_","reason":"Ping timeout: 276 seconds","date":"2014-04-21T14:02:51.154Z","type":"quit"}
{"nick":"Maciek416","date":"2014-04-21T14:11:37.865Z","type":"join"}
{"nick":"brianloveswords","date":"2014-04-21T14:17:45.949Z","type":"join"}
{"nick":"rwaldron","message":"yorick right, in node.cc, not at the JS layer... the latter is easy to debug","date":"2014-04-21T14:20:18.724Z","type":"message"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 1, free: 49]","date":"2014-04-21T14:26:51.961Z","type":"message"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2014-04-21T14:38:22.873Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2014-04-21T14:39:11.938Z","type":"nick"}
{"nick":"mbrevoort","date":"2014-04-21T14:56:30.055Z","type":"join"}
{"nick":"addisonj","date":"2014-04-21T15:04:32.497Z","type":"join"}
{"nick":"shama","date":"2014-04-21T15:08:54.545Z","type":"join"}
{"nick":"mikolalysenko","date":"2014-04-21T15:16:40.192Z","type":"join"}
{"nick":"kevino80","date":"2014-04-21T15:22:21.835Z","type":"join"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 60]","date":"2014-04-21T15:26:52.095Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2014-04-21T15:29:01.670Z","type":"nick"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2014-04-21T15:51:14.044Z","type":"quit"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2014-04-21T16:05:58.440Z","type":"quit"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-04-21T16:09:34.984Z","type":"quit"}
{"nick":"rowbit1","message":"substack, pkrumins: These encoders are STILL down: 50.56.27.70(dev-ie6-1), 50.57.171.229(dev-ie6-2), 184.106.99.27(dev-ie7-3)","date":"2014-04-21T16:12:52.322Z","type":"message"}
{"nick":"ednapiranha","date":"2014-04-21T16:13:13.261Z","type":"join"}
{"nick":"taterbase","date":"2014-04-21T16:16:24.698Z","type":"join"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2014-04-21T16:17:29.685Z","type":"nick"}
{"nick":"mikolalysenko","reason":"Ping timeout: 276 seconds","date":"2014-04-21T16:25:51.171Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 45]","date":"2014-04-21T16:26:52.048Z","type":"message"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2014-04-21T16:31:06.675Z","type":"quit"}
{"nick":"fotoverite","reason":"Quit: fotoverite","date":"2014-04-21T16:41:00.288Z","type":"quit"}
{"nick":"ednapiranha","date":"2014-04-21T16:41:29.116Z","type":"join"}
{"nick":"gozala","date":"2014-04-21T16:44:22.498Z","type":"join"}
{"nick":"kumavis","date":"2014-04-21T16:45:24.430Z","type":"join"}
{"nick":"phated","date":"2014-04-21T16:45:52.479Z","type":"join"}
{"nick":"AvianFlu","date":"2014-04-21T16:52:16.714Z","type":"join"}
{"nick":"phated","reason":"Ping timeout: 264 seconds","date":"2014-04-21T16:52:29.228Z","type":"quit"}
{"nick":"ednapiranha","reason":"Quit: Leaving...","date":"2014-04-21T16:53:14.676Z","type":"quit"}
{"nick":"ednapiranha","date":"2014-04-21T16:55:03.410Z","type":"join"}
{"nick":"thlorenz","date":"2014-04-21T16:56:35.270Z","type":"join"}
{"nick":"dguttman","date":"2014-04-21T16:56:51.520Z","type":"join"}
{"nick":"tilgovi","date":"2014-04-21T16:58:19.734Z","type":"join"}
{"nick":"thlorenz_","date":"2014-04-21T17:00:28.413Z","type":"join"}
{"nick":"kumavis","reason":"Read error: Connection reset by peer","date":"2014-04-21T17:00:30.915Z","type":"quit"}
{"nick":"kevino80","date":"2014-04-21T17:00:38.008Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 240 seconds","date":"2014-04-21T17:00:50.701Z","type":"quit"}
{"nick":"kumavis","date":"2014-04-21T17:00:58.787Z","type":"join"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2014-04-21T17:12:20.654Z","type":"quit"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2014-04-21T17:13:39.798Z","type":"quit"}
{"nick":"kumavis","reason":"Ping timeout: 240 seconds","date":"2014-04-21T17:17:14.782Z","type":"quit"}
{"nick":"rowbit1","message":"/!\\ New profesh signup from \"Robert Hurst. Plan: 50_testling_ci_plan. $50/month. Cash money!","date":"2014-04-21T17:19:22.518Z","type":"message"}
{"nick":"kumavis","date":"2014-04-21T17:19:50.764Z","type":"join"}
{"nick":"dominic_","date":"2014-04-21T17:23:04.371Z","type":"join"}
{"nick":"fotoverite","date":"2014-04-21T17:23:24.222Z","type":"join"}
{"nick":"thealphanerd","date":"2014-04-21T17:26:12.169Z","type":"join"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 0, free: 34]","date":"2014-04-21T17:26:52.365Z","type":"message"}
{"nick":"phated","date":"2014-04-21T17:30:35.426Z","type":"join"}
{"nick":"jxson","date":"2014-04-21T17:30:58.779Z","type":"join"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-04-21T17:38:35.795Z","type":"quit"}
{"nick":"ednapira_","date":"2014-04-21T17:43:19.361Z","type":"join"}
{"nick":"ednapira_","new_nick":"ednapiranha_","date":"2014-04-21T17:43:43.800Z","type":"nick"}
{"nick":"rowbit1","message":"substack, pkrumins: testling server android (osx, browserling1 user) is down!","date":"2014-04-21T17:44:19.528Z","type":"message"}
{"nick":"rowbit1","message":"substack, pkrumins: testling server safari6 (osx, browserling1 user) is down!","date":"2014-04-21T17:44:19.737Z","type":"message"}
{"nick":"rowbit1","message":"substack, pkrumins: testling server iphone6, ipad6 (osx, browserling1 user) is down!","date":"2014-04-21T17:44:20.481Z","type":"message"}
{"nick":"kenperkins","date":"2014-04-21T17:47:29.367Z","type":"join"}
{"nick":"pfraze","reason":"Ping timeout: 252 seconds","date":"2014-04-21T17:54:32.815Z","type":"quit"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2014-04-21T17:55:04.460Z","type":"quit"}
{"nick":"wolfeidau","date":"2014-04-21T17:55:33.129Z","type":"join"}
{"nick":"phated","date":"2014-04-21T17:56:03.199Z","type":"join"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2014-04-21T18:05:21.087Z","type":"quit"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2014-04-21T18:05:57.536Z","type":"nick"}
{"nick":"kenperkins","date":"2014-04-21T18:08:30.668Z","type":"join"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2014-04-21T18:16:06.590Z","type":"quit"}
{"nick":"jjjohnny","message":"dominic_: yodel","date":"2014-04-21T18:24:17.372Z","type":"message"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 1, free: 38]","date":"2014-04-21T18:26:52.087Z","type":"message"}
{"nick":"dominic_","message":"jjjohnny: GOATDB is about to get a big push","date":"2014-04-21T18:27:57.310Z","type":"message"}
{"nick":"dominic_","message":"not just a readme","date":"2014-04-21T18:28:05.333Z","type":"message"}
{"nick":"dominic_","message":"but now an honest to god goat themed database written in javascript","date":"2014-04-21T18:28:25.135Z","type":"message"}
{"nick":"ednapiranha_","new_nick":"ednapiranha","date":"2014-04-21T18:37:55.989Z","type":"nick"}
{"nick":"anoemi_","date":"2014-04-21T18:43:04.453Z","type":"join"}
{"nick":"anoemi_","reason":"Remote host closed the connection","date":"2014-04-21T18:45:44.591Z","type":"quit"}
{"nick":"jjjohnny","message":"lol","date":"2014-04-21T18:46:59.576Z","type":"message"}
{"nick":"jjjohnny","message":"dominic_: whats it do","date":"2014-04-21T18:47:13.489Z","type":"message"}
{"nick":"contraha_","date":"2014-04-21T18:47:35.374Z","type":"join"}
{"nick":"jjjohnny","message":"on the subject of dbs","date":"2014-04-21T18:47:42.853Z","type":"message"}
{"nick":"jjjohnny","message":"what is the equivalent of a bitcoin like backend w/o the hashing and stuff","date":"2014-04-21T18:48:04.426Z","type":"message"}
{"nick":"jjjohnny","message":"honest to goat god goat themed database","date":"2014-04-21T18:48:45.720Z","type":"message"}
{"nick":"dominic_","message":"jjjohnny: stores your data safely until you want to get it agoin","date":"2014-04-21T18:48:46.990Z","type":"message"}
{"nick":"jjjohnny","message":"so all gets are also deletes","date":"2014-04-21T18:49:23.094Z","type":"message"}
{"nick":"dominic_","message":"haha","date":"2014-04-21T18:50:32.212Z","type":"message"}
{"nick":"dominic_","message":"you should post an issue if you are seeing that behavior","date":"2014-04-21T18:50:49.048Z","type":"message"}
{"nick":"dominic_","message":"it's also 3x faster than level!","date":"2014-04-21T18:51:05.483Z","type":"message"}
{"nick":"dominic_","message":"(to npm install)","date":"2014-04-21T18:51:11.119Z","type":"message"}
{"nick":"jjjohnny","message":"haha","date":"2014-04-21T18:51:33.319Z","type":"message"}
{"nick":"jjjohnny","message":"so its not a level backed db","date":"2014-04-21T18:52:38.635Z","type":"message"}
{"nick":"dominic_","message":"nope. just some files.","date":"2014-04-21T18:55:00.189Z","type":"message"}
{"nick":"dominic_","message":"it's backed with kiddb, json-logdb and json-sst","date":"2014-04-21T18:55:26.548Z","type":"message"}
{"nick":"dominic_","message":"goatdb just brings those together and implements compaction","date":"2014-04-21T18:55:45.384Z","type":"message"}
{"nick":"jjjohnny","message":"a kid is a young goat!","date":"2014-04-21T18:55:58.245Z","type":"message"}
{"nick":"dominic_","message":"exactly.","date":"2014-04-21T18:56:12.924Z","type":"message"}
{"nick":"dominic_","message":"jjjohnny: kiddb is also pretty goatscale.","date":"2014-04-21T18:56:41.982Z","type":"message"}
{"nick":"jjjohnny","action":"is a capricorn","date":"2014-04-21T18:57:01.702Z","type":"action"}
{"nick":"dominic_","message":"and also has a leveldown subset","date":"2014-04-21T18:57:03.626Z","type":"message"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2014-04-21T18:57:36.012Z","type":"quit"}
{"nick":"jjjohnny","message":"goats are one o my animal people","date":"2014-04-21T18:57:36.739Z","type":"message"}
{"nick":"jjjohnny","message":"dominic_: when are we gonna get distributed with these dbs","date":"2014-04-21T18:59:09.244Z","type":"message"}
{"nick":"dominic_","message":"jjjohnny: I had a pet goat once or twice","date":"2014-04-21T19:00:32.228Z","type":"message"}
{"nick":"dominic_","message":"brb, eats","date":"2014-04-21T19:00:57.702Z","type":"message"}
{"nick":"jjjohnny","message":"data _data __data","date":"2014-04-21T19:03:58.469Z","type":"message"}
{"nick":"jjjohnny","message":"the new album by Tony Toni Tone","date":"2014-04-21T19:04:21.604Z","type":"message"}
{"nick":"jxson_","date":"2014-04-21T19:06:06.676Z","type":"join"}
{"nick":"dominic_","reason":"Ping timeout: 276 seconds","date":"2014-04-21T19:06:24.109Z","type":"quit"}
{"nick":"jxson","reason":"Ping timeout: 240 seconds","date":"2014-04-21T19:07:54.746Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [free: 8]","date":"2014-04-21T19:26:51.956Z","type":"message"}
{"nick":"peutetre","date":"2014-04-21T19:28:11.785Z","type":"join"}
{"nick":"mbrevoort","reason":"Remote host closed the connection","date":"2014-04-21T19:31:09.038Z","type":"quit"}
{"nick":"pfraze","date":"2014-04-21T19:35:17.863Z","type":"join"}
{"nick":"nfroidure","reason":"Quit: Ex-Chat","date":"2014-04-21T19:42:26.794Z","type":"quit"}
{"nick":"kevino80","date":"2014-04-21T19:50:39.964Z","type":"join"}
{"nick":"kevino80","reason":"Ping timeout: 240 seconds","date":"2014-04-21T19:54:50.682Z","type":"quit"}
{"nick":"kenperkins","date":"2014-04-21T19:57:44.381Z","type":"join"}
{"nick":"kenperkins","reason":"Client Quit","date":"2014-04-21T19:58:46.375Z","type":"quit"}
{"nick":"defunctzombie","message":"Raynos: you can probably start with some of the things I did there, but I will say that the \"tcp wrap\" stuff from node is really not that heavyweight","date":"2014-04-21T20:02:12.073Z","type":"message"}
{"nick":"defunctzombie","message":"you aren't gonna get many wins doing anything else... lots of the cost actually comes from the c++/js barrier","date":"2014-04-21T20:02:41.855Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: I want a lowe level interface","date":"2014-04-21T20:04:04.183Z","type":"message"}
{"nick":"Raynos","message":"I think ill play with your thing","date":"2014-04-21T20:04:07.774Z","type":"message"}
{"nick":"Raynos","message":"opening an issue now","date":"2014-04-21T20:04:10.355Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: let me know if you have questions","date":"2014-04-21T20:04:17.757Z","type":"message"}
{"nick":"defunctzombie","message":"I haven't had time to poke at it recently","date":"2014-04-21T20:04:24.374Z","type":"message"}
{"nick":"defunctzombie","message":"but it should be the lowest level interface","date":"2014-04-21T20:04:32.873Z","type":"message"}
{"nick":"defunctzombie","message":"tho maybe you could make a lower one","date":"2014-04-21T20:04:38.783Z","type":"message"}
{"nick":"defunctzombie","message":"I tried to be low level thin right on top of libuv","date":"2014-04-21T20:04:47.921Z","type":"message"}
{"nick":"peutetre","reason":"Quit: peutetre","date":"2014-04-21T20:06:16.563Z","type":"quit"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2014-04-21T20:08:12.160Z","type":"quit"}
{"nick":"contraha_","reason":"Ping timeout: 252 seconds","date":"2014-04-21T20:08:24.281Z","type":"quit"}
{"nick":"peutetre","date":"2014-04-21T20:09:38.451Z","type":"join"}
{"nick":"Raynos","message":"defunctzombie: https://github.com/defunctzombie/libuv.js/issues/3","date":"2014-04-21T20:11:27.246Z","type":"message"}
{"nick":"Raynos","message":"the thing that is confusing about it is the methods instead of uv function calls","date":"2014-04-21T20:11:45.571Z","type":"message"}
{"nick":"ogd","message":"calvinmetcalf: ahh https://github.com/AppGeo/coati is cool, i did some npm searching yesterday but it didnt come up","date":"2014-04-21T20:12:03.658Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: https://github.com/defunctzombie/libuv.js/blob/master/test/tcp.js#L16","date":"2014-04-21T20:12:28.518Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: oh, I see","date":"2014-04-21T20:12:33.242Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: yea.. this is kinda where I make libuv.js less \"thin\"","date":"2014-04-21T20:12:48.999Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: is there a performance reason for these methods or is it just \"this is nicer\"","date":"2014-04-21T20:13:04.478Z","type":"message"}
{"nick":"defunctzombie","message":"because I gotta unwrap things properly","date":"2014-04-21T20:13:05.261Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: hm.. I think there may be a casting reason","date":"2014-04-21T20:13:22.946Z","type":"message"}
{"nick":"defunctzombie","message":"also nicer was certainly a factor","date":"2014-04-21T20:13:50.089Z","type":"message"}
{"nick":"calvinmetcalf","message":"odg slowly I'm getting all my coworkers to do nothing but browserify streams for all projects","date":"2014-04-21T20:14:00.761Z","type":"message"}
{"nick":"defunctzombie","message":"the reason it isn't like that in c","date":"2014-04-21T20:14:02.319Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: is cause c doesn't have a \"class\" concept","date":"2014-04-21T20:14:16.176Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: so I might make a PR / fix to to expose this lowe level interface","date":"2014-04-21T20:14:25.678Z","type":"message"}
{"nick":"Raynos","message":"i personally find static functions nicer then methods & classes (FP influence)","date":"2014-04-21T20:14:39.425Z","type":"message"}
{"nick":"defunctzombie","message":"sure, except when what you can pass in is very limited","date":"2014-04-21T20:14:52.977Z","type":"message"}
{"nick":"defunctzombie","message":"as in this case","date":"2014-04-21T20:14:55.872Z","type":"message"}
{"nick":"defunctzombie","message":"I think a free function also means more checks","date":"2014-04-21T20:15:01.697Z","type":"message"}
{"nick":"defunctzombie","message":"on the arguments","date":"2014-04-21T20:15:09.299Z","type":"message"}
{"nick":"defunctzombie","message":"and then you still have to uwrap them","date":"2014-04-21T20:15:16.789Z","type":"message"}
{"nick":"ogd","message":"calvinmetcalf: nice","date":"2014-04-21T20:15:22.165Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: i see the .bind() method as a partially applied uv_tcp_bind with a handle argument","date":"2014-04-21T20:15:41.332Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: it leads to dirtier interfaces cause this isn't data transformation","date":"2014-04-21T20:15:41.332Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: I agree with the free function approach when it is meant to work on data like things","date":"2014-04-21T20:16:01.074Z","type":"message"}
{"nick":"ogd","message":"calvinmetcalf: check out filereader-stream and websocket-stream if you havent already. i wish XHR actually streamed :/","date":"2014-04-21T20:16:03.202Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: the main reason I want this is I want a simple 1-1 brain dead transformation of libuv C examples","date":"2014-04-21T20:16:06.828Z","type":"message"}
{"nick":"defunctzombie","message":"but in this case the \"handle\" is actually the state","date":"2014-04-21T20:16:10.275Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: yea","date":"2014-04-21T20:16:14.327Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: I thought about going that route","date":"2014-04-21T20:16:20.103Z","type":"message"}
{"nick":"Raynos","message":"ill play with it and see how it comes out","date":"2014-04-21T20:16:26.699Z","type":"message"}
{"nick":"defunctzombie","message":"and maybe it is worth it.. but then I kinda decided that was actually detrimental","date":"2014-04-21T20:16:31.515Z","type":"message"}
{"nick":"defunctzombie","message":"cause js is not C","date":"2014-04-21T20:16:35.853Z","type":"message"}
{"nick":"Raynos","message":"maybe, but libuv.js should not have the opinions","date":"2014-04-21T20:16:51.363Z","type":"message"}
{"nick":"defunctzombie","message":"yea, try it","date":"2014-04-21T20:16:51.785Z","type":"message"}
{"nick":"defunctzombie","message":"I agree","date":"2014-04-21T20:16:59.097Z","type":"message"}
{"nick":"Raynos","message":"i think there is another thing called libuv-for-js that has an idiomatic js interface for libuv","date":"2014-04-21T20:17:06.916Z","type":"message"}
{"nick":"defunctzombie","message":"but translating to another language sometimes means changing the idiom","date":"2014-04-21T20:17:23.443Z","type":"message"}
{"nick":"Raynos","message":"also 1-1 transformation means the documentation is read libuv.h & libuv book :D","date":"2014-04-21T20:17:30.238Z","type":"message"}
{"nick":"calvinmetcalf","message":"ogd: server sent events!","date":"2014-04-21T20:17:31.261Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: kinda... there are always differences","date":"2014-04-21T20:17:43.571Z","type":"message"}
{"nick":"calvinmetcalf","message":"you could totally stream those","date":"2014-04-21T20:17:44.395Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: for example, buffer","date":"2014-04-21T20:17:48.350Z","type":"message"}
{"nick":"defunctzombie","message":"I am using ArrayBuffers","date":"2014-04-21T20:17:52.717Z","type":"message"}
{"nick":"defunctzombie","message":"and not libuv buffer","date":"2014-04-21T20:17:58.752Z","type":"message"}
{"nick":"defunctzombie","message":"so there are little things here and there.","date":"2014-04-21T20:18:09.722Z","type":"message"}
{"nick":"defunctzombie","message":"by all means tear it apart","date":"2014-04-21T20:18:14.169Z","type":"message"}
{"nick":"Raynos","message":"sure, that's fine","date":"2014-04-21T20:18:16.162Z","type":"message"}
{"nick":"ogd","message":"calvinmetcalf: oh yea i havent tested to see if it's truly streaming e.g. does xhr buffer the entire response body","date":"2014-04-21T20:18:22.272Z","type":"message"}
{"nick":"defunctzombie","message":"see if you can make something you like","date":"2014-04-21T20:18:24.781Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: btw how does your require interface work ?","date":"2014-04-21T20:18:27.208Z","type":"message"}
{"nick":"defunctzombie","message":"this was meant ot be a starting point","date":"2014-04-21T20:18:30.625Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: there is a bootstrap script","date":"2014-04-21T20:18:39.917Z","type":"message"}
{"nick":"ogd","message":"calvinmetcalf: maybe it just re-connects every once in a while as a ghetto way of clearing the buffer","date":"2014-04-21T20:18:47.490Z","type":"message"}
{"nick":"defunctzombie","message":"https://github.com/defunctzombie/libuv.js/blob/master/Makefile#L18","date":"2014-04-21T20:18:55.762Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: which basically creates a global","date":"2014-04-21T20:19:12.452Z","type":"message"}
{"nick":"defunctzombie","message":"https://github.com/defunctzombie/libuv.js/blob/master/test/support/bootstrap.js","date":"2014-04-21T20:19:20.430Z","type":"message"}
{"nick":"defunctzombie","message":"and then runs the script in that context","date":"2014-04-21T20:19:40.322Z","type":"message"}
{"nick":"defunctzombie","message":"https://github.com/defunctzombie/libuv.js/blob/master/test/support/bootstrap.js#L55-L56","date":"2014-04-21T20:19:45.348Z","type":"message"}
{"nick":"kevino80","date":"2014-04-21T20:19:52.420Z","type":"join"}
{"nick":"calvinmetcalf","message":"ogd I'm talking about http://www.html5rocks.com/en/tutorials/eventsource/basics/","date":"2014-04-21T20:20:02.007Z","type":"message"}
{"nick":"ogd","message":"calvinmetcalf: yea but it uses xhr under the hood right","date":"2014-04-21T20:20:12.225Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: is test/support/bootstrap and uv/lib/bootstrap the same ?","date":"2014-04-21T20:20:39.362Z","type":"message"}
{"nick":"calvinmetcalf","message":"it's implementation specific I'm pretty sure, but i","date":"2014-04-21T20:20:49.199Z","type":"message"}
{"nick":"ogd","message":"calvinmetcalf: i just wonder if the implementation of eventSource is 'true' streaming or if they have to do the same ghetto hacks to fake streams on top of xhr2","date":"2014-04-21T20:20:51.094Z","type":"message"}
{"nick":"calvinmetcalf","message":"ogd not","date":"2014-04-21T20:21:01.720Z","type":"message"}
{"nick":"calvinmetcalf","message":"sure","date":"2014-04-21T20:21:03.671Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: hm.. yes.. I think at one point I was gonna have it be compiled into the \"uv(1)\" runner","date":"2014-04-21T20:21:17.437Z","type":"message"}
{"nick":"calvinmetcalf","message":"but I've actually got to roll","date":"2014-04-21T20:21:18.587Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: it might be slightly different.. it has been a while :)","date":"2014-04-21T20:21:39.494Z","type":"message"}
{"nick":"Raynos","message":"defunctzombie: so the one in test is the real one :)","date":"2014-04-21T20:21:55.485Z","type":"message"}
{"nick":"defunctzombie","message":"Raynos: the \"uv\" runner was hacked together just for tests at first","date":"2014-04-21T20:22:02.518Z","type":"message"}
{"nick":"defunctzombie","message":"and not quite meant to be the real \"shell\"","date":"2014-04-21T20:22:18.646Z","type":"message"}
{"nick":"rowbit1","message":"/!\\ ATTENTION: (default-local) paid account successfully upgraded /!\\","date":"2014-04-21T20:28:33.744Z","type":"message"}
{"nick":"rowbit1","message":"/!\\ ATTENTION: (default-local) maureen@... successfully signed up for developer browserling plan ($20). Cash money! /!\\","date":"2014-04-21T20:28:33.954Z","type":"message"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2014-04-21T20:28:35.177Z","type":"quit"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 2, free: 23]","date":"2014-04-21T20:29:09.448Z","type":"message"}
{"nick":"ogd","message":"lol wut https://twitter.com/Paul_Kinlan/status/458301141454180353","date":"2014-04-21T20:29:18.867Z","type":"message"}
{"nick":"ogd","message":"google peeps be cray cray","date":"2014-04-21T20:29:27.992Z","type":"message"}
{"nick":"chapel","message":"those of you that went to nodeconf last year, did you sleep in the dorms?","date":"2014-04-21T20:30:03.836Z","type":"message"}
{"nick":"chapel","message":"wondering about the beds, how sturdy they are","date":"2014-04-21T20:30:14.685Z","type":"message"}
{"nick":"chapel","action":"is a big guy so its a concern of mine","date":"2014-04-21T20:30:23.184Z","type":"action"}
{"nick":"ogd","message":"chapel: i would guess they are 'single' sized, not super thick mattresses but still mattresses (e.g. not cots)","date":"2014-04-21T20:31:10.727Z","type":"message"}
{"nick":"chapel","message":"sure, what type of frames?","date":"2014-04-21T20:31:22.732Z","type":"message"}
{"nick":"chapel","message":"meta/wood?","date":"2014-04-21T20:31:25.153Z","type":"message"}
{"nick":"ogd","message":"chapel: ummm i cant really remember...","date":"2014-04-21T20:31:37.540Z","type":"message"}
{"nick":"chapel","message":"no worries","date":"2014-04-21T20:31:43.045Z","type":"message"}
{"nick":"ogd","message":"i dont remember thinking they were flimsy though","date":"2014-04-21T20:31:46.738Z","type":"message"}
{"nick":"chapel","message":"I'll ping mikeal about it","date":"2014-04-21T20:32:50.578Z","type":"message"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2014-04-21T20:42:31.311Z","type":"nick"}
{"nick":"Raynos","message":"defunctzombie: do you do the bit where a tcp wrap in libuv.js gets GC'd and you free the libuv C stuff ?","date":"2014-04-21T20:50:05.192Z","type":"message"}
{"nick":"peutetre","reason":"Quit: peutetre","date":"2014-04-21T20:53:44.643Z","type":"quit"}
{"nick":"ednapiranha","date":"2014-04-21T20:55:55.101Z","type":"join"}
{"nick":"mbrevoort","date":"2014-04-21T20:57:36.632Z","type":"join"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-04-21T20:59:10.330Z","type":"quit"}
{"nick":"phated","date":"2014-04-21T20:59:51.222Z","type":"join"}
{"nick":"mbrevoort","reason":"Remote host closed the connection","date":"2014-04-21T20:59:52.301Z","type":"quit"}
{"nick":"rxgx","date":"2014-04-21T21:11:10.469Z","type":"join"}
{"nick":"No9","reason":"Quit: Gone to join the choir invisibule","date":"2014-04-21T21:17:10.580Z","type":"quit"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2014-04-21T21:17:39.232Z","type":"quit"}
{"nick":"kevino80","reason":"Remote host closed the connection","date":"2014-04-21T21:19:56.462Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2014-04-21T21:20:04.684Z","type":"quit"}
{"nick":"jesusabdullah","reason":"Ping timeout: 240 seconds","date":"2014-04-21T21:22:02.737Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: thealphanerd","date":"2014-04-21T21:22:53.824Z","type":"quit"}
{"nick":"mbrevoort","date":"2014-04-21T21:28:35.290Z","type":"join"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 11, free: 37]","date":"2014-04-21T21:29:09.511Z","type":"message"}
{"nick":"phated","reason":"Remote host closed the connection","date":"2014-04-21T21:29:37.588Z","type":"quit"}
{"nick":"Domenic_","message":"creationix: I want to be able to store undefined in the stream...","date":"2014-04-21T21:37:09.644Z","type":"message"}
{"nick":"Domenic_","message":"creationix: .wait(onReady) always calls onReady async?","date":"2014-04-21T21:37:57.455Z","type":"message"}
{"nick":"creationix","message":"Domenic_ I'm here","date":"2014-04-21T21:40:48.142Z","type":"message"}
{"nick":"Domenic_","message":"creationix: see above questions :)","date":"2014-04-21T21:40:59.225Z","type":"message"}
{"nick":"Raynos","message":"hi","date":"2014-04-21T21:41:03.605Z","type":"message"}
{"nick":"creationix","message":"I'm using a new irc client, it didn't load the backlog","date":"2014-04-21T21:41:16.228Z","type":"message"}
{"nick":"Domenic_","message":"17:37:09 <Domenic_> creationix: I want to be able to store undefined in the stream...","date":"2014-04-21T21:41:51.529Z","type":"message"}
{"nick":"Domenic_","message":"17:37:57 <Domenic_> creationix: .wait(onReady) always calls onReady async?","date":"2014-04-21T21:41:51.739Z","type":"message"}
{"nick":"Raynos","message":"Domenic_: not being able to store `undefined` in the stream is kind of ok","date":"2014-04-21T21:41:54.189Z","type":"message"}
{"nick":"Raynos","message":"JSON.stringify does not stringify undefined","date":"2014-04-21T21:42:05.476Z","type":"message"}
{"nick":"creationix","message":"the top stream interface allows anything to be in the stream","date":"2014-04-21T21:42:13.151Z","type":"message"}
{"nick":"Domenic_","message":"JSON.stringify doesn't allow lots of things ;)","date":"2014-04-21T21:42:21.545Z","type":"message"}
{"nick":"creationix","message":"it's my existing transform interface that doesn't allow it","date":"2014-04-21T21:42:22.105Z","type":"message"}
{"nick":"Domenic_","message":"ok i think i see","date":"2014-04-21T21:42:47.039Z","type":"message"}
{"nick":"Domenic_","message":"that's not very important anyway, seems easily fixable","date":"2014-04-21T21:42:54.465Z","type":"message"}
{"nick":"Domenic_","message":"but does .wait(onReady) always call onReady async?","date":"2014-04-21T21:43:01.620Z","type":"message"}
{"nick":"creationix","message":"I'm just showing the transform as an example of how to interface with my existing code","date":"2014-04-21T21:43:08.867Z","type":"message"}
{"nick":"creationix","message":"I would think wait(onReady) is always async","date":"2014-04-21T21:43:24.831Z","type":"message"}
{"nick":"creationix","message":"since I batch updates with the queue","date":"2014-04-21T21:43:39.625Z","type":"message"}
{"nick":"Raynos","message":"i think .wait is continuable based with is zalgo","date":"2014-04-21T21:43:43.850Z","type":"message"}
{"nick":"Raynos","message":"unless creationix uses non zalgo continuables :P","date":"2014-04-21T21:43:44.068Z","type":"message"}
{"nick":"Domenic_","message":"so that seems to run into a problem that i am having with whatwg/streams currently","date":"2014-04-21T21:43:47.900Z","type":"message"}
{"nick":"creationix","message":"simple-streams used zalgo-continuables very heavily","date":"2014-04-21T21:43:58.316Z","type":"message"}
{"nick":"creationix","message":"these two experiments are non-zalgo","date":"2014-04-21T21:44:04.084Z","type":"message"}
{"nick":"Domenic_","message":"namely let's say you do .wait(onReady) but then in the same tick someone pushes into the stream","date":"2014-04-21T21:44:26.943Z","type":"message"}
{"nick":"ogd","message":"http://img.shields.io/badge/Made%20with%20freedom%20in-USA-blue.svg?style=flat","date":"2014-04-21T21:44:38.228Z","type":"message"}
{"nick":"creationix","message":"Domenic_ right, this style is pretty resistant to that kind of issue","date":"2014-04-21T21:44:54.265Z","type":"message"}
{"nick":"Domenic_","message":"creationix: I don't understand how, please help :)","date":"2014-04-21T21:45:05.076Z","type":"message"}
{"nick":"creationix","message":"ok, so onReady will always have true for it's resolved value as long as there *may* be more items in the queue","date":"2014-04-21T21:45:44.658Z","type":"message"}
{"nick":"creationix","message":"if it resolves to false, then there can never be more items","date":"2014-04-21T21:45:58.468Z","type":"message"}
{"nick":"Domenic_","message":"ok but","date":"2014-04-21T21:46:11.019Z","type":"message"}
{"nick":"Domenic_","message":"the problem is that i want to let downstream people process anything pushed to the stream within the same tick","date":"2014-04-21T21:46:21.510Z","type":"message"}
{"nick":"Domenic_","message":"which seems hard if the downstream people are doing .wait(thenProcessStuff)","date":"2014-04-21T21:46:37.687Z","type":"message"}
{"nick":"creationix","message":"downstream first looks for items in the queue, they only call wait after consuming everything they want","date":"2014-04-21T21:47:00.775Z","type":"message"}
{"nick":"Domenic_","message":"so the problem is not really solved","date":"2014-04-21T21:47:14.098Z","type":"message"}
{"nick":"creationix","message":"what's the problem?","date":"2014-04-21T21:47:23.196Z","type":"message"}
{"nick":"Domenic_","message":"the problem is that it's easy to consume all the stuff in the queue, but then the stream pushes some stuff in the same tick, and you miss out on that until the next tick","date":"2014-04-21T21:47:48.171Z","type":"message"}
{"nick":"Domenic_","message":"because after consuming everything you set up a wait() listener","date":"2014-04-21T21:47:58.687Z","type":"message"}
{"nick":"Domenic_","message":"node side-steps this with sync event emitters","date":"2014-04-21T21:48:15.480Z","type":"message"}
{"nick":"creationix","message":"well, you could look again in nextTick if you wanted","date":"2014-04-21T21:48:19.271Z","type":"message"}
{"nick":"Domenic_","message":"zalgo callbacks will also work for this","date":"2014-04-21T21:48:20.512Z","type":"message"}
{"nick":"Domenic_","message":"yeah i thought about going down that path, wasn't sure it was great. there's still a nextTick delay at every step in the chain I believe","date":"2014-04-21T21:48:48.375Z","type":"message"}
{"nick":"creationix","message":"well, if you allow the producer to resolve the continuable zalgo style, then it can notify the consumer in the same tick","date":"2014-04-21T21:49:18.442Z","type":"message"}
{"nick":"Domenic_","message":"yeah, but then, zalgo :(","date":"2014-04-21T21:50:04.303Z","type":"message"}
{"nick":"creationix","message":"btw, I noticed that google rewrote their TCP APIs to be push style with pause/resume instead of pull-style","date":"2014-04-21T21:50:14.214Z","type":"message"}
{"nick":"creationix","message":"(for chrome packaged apps)","date":"2014-04-21T21:50:19.337Z","type":"message"}
{"nick":"Domenic_","message":"i think push style is the only way to solve this","date":"2014-04-21T21:50:26.497Z","type":"message"}
{"nick":"Domenic_","message":"without zalgo","date":"2014-04-21T21:50:28.767Z","type":"message"}
{"nick":"Domenic_","message":"because push style means you give it to the consumer as soon as you get it","date":"2014-04-21T21:50:39.699Z","type":"message"}
{"nick":"creationix","message":"so that's a very well understood pattern and very fast","date":"2014-04-21T21:50:41.799Z","type":"message"}
{"nick":"creationix","message":"you just need the added complexity of pause/resume","date":"2014-04-21T21:50:51.520Z","type":"message"}
{"nick":"creationix","message":"and trust the consumer to do the right thing","date":"2014-04-21T21:50:57.149Z","type":"message"}
{"nick":"Domenic_","message":"i am going to try push style as the base layer","date":"2014-04-21T21:50:57.420Z","type":"message"}
{"nick":"creationix","message":"also push works very well with my transforms","date":"2014-04-21T21:51:09.830Z","type":"message"}
{"nick":"Domenic_","message":"and then wrap up the base layer in a buffered pull interface","date":"2014-04-21T21:51:12.369Z","type":"message"}
{"nick":"creationix","message":"(since they are push)","date":"2014-04-21T21:51:14.699Z","type":"message"}
{"nick":"creationix","message":"that's essentially what I do in my apps","date":"2014-04-21T21:51:27.906Z","type":"message"}
{"nick":"creationix","message":"I write the bulk of the logic in sync push transforms","date":"2014-04-21T21:51:35.755Z","type":"message"}
{"nick":"creationix","message":"there are easy and simple","date":"2014-04-21T21:51:39.359Z","type":"message"}
{"nick":"creationix","message":"and as long as they are all sync, I can manage back-pressure externally","date":"2014-04-21T21:51:49.441Z","type":"message"}
{"nick":"creationix","message":"and they compose really well too","date":"2014-04-21T21:51:57.448Z","type":"message"}
{"nick":"Domenic_","message":"if you are willing to read a long rambly ramble written by me at 4am yesterday coming to that conclusion it's https://github.com/whatwg/streams/issues/24#issuecomment-40921444","date":"2014-04-21T21:51:59.195Z","type":"message"}
{"nick":"Domenic_","message":"i want to present a ReadableStream that has the same auto-buffering, pull-style ergonomics as Node","date":"2014-04-21T21:52:14.315Z","type":"message"}
{"nick":"Domenic_","message":"but I wanted to explain the buffering as var bufferedRS = baseRS.pipeThrough(buffererTransform)","date":"2014-04-21T21:52:39.079Z","type":"message"}
{"nick":"creationix","message":"so my second experiment in that gist is closer to node style (streams 2)","date":"2014-04-21T21:52:39.728Z","type":"message"}
{"nick":"creationix","message":"are your transforms sync or async?","date":"2014-04-21T21:53:13.586Z","type":"message"}
{"nick":"phated","date":"2014-04-21T21:53:15.384Z","type":"join"}
{"nick":"Domenic_","message":"this particular transform would be sync","date":"2014-04-21T21:53:27.431Z","type":"message"}
{"nick":"creationix","message":"sync transforms are ones that never touch their input data or emit anything after they return","date":"2014-04-21T21:53:38.650Z","type":"message"}
{"nick":"Domenic_","message":"this entire journey i found myself on the last few days is how to make sync transforms fast","date":"2014-04-21T21:53:40.326Z","type":"message"}
{"nick":"creationix","message":"yeah, most binary protocol parsers are just sync state-machines","date":"2014-04-21T21:53:54.572Z","type":"message"}
{"nick":"creationix","message":"I love to push as much complexity into that format since it's simple and easy to compose","date":"2014-04-21T21:54:10.651Z","type":"message"}
{"nick":"Domenic_","message":"your second gist seems to be almost exactly what whatwg/streams does right now","date":"2014-04-21T21:54:13.860Z","type":"message"}
{"nick":"Domenic_","message":"but it presumably has the same problem","date":"2014-04-21T21:54:17.850Z","type":"message"}
{"nick":"creationix","message":"yeah, I didn't really like the second one","date":"2014-04-21T21:54:27.422Z","type":"message"}
{"nick":"creationix","message":"so gozala has been pushing for push-style the whole time right?","date":"2014-04-21T21:54:46.149Z","type":"message"}
{"nick":"Domenic_","message":"no","date":"2014-04-21T21:54:48.938Z","type":"message"}
{"nick":"Domenic_","message":"he has been pushing for goroutines","date":"2014-04-21T21:54:52.887Z","type":"message"}
{"nick":"creationix","message":"I guess I never understood his interface then","date":"2014-04-21T21:55:00.884Z","type":"message"}
{"nick":"gozala","message":"creationix: I have being using push based for FRP stuff","date":"2014-04-21T21:55:23.212Z","type":"message"}
{"nick":"Domenic_","message":"it is higher-level. it is as if you only had passthrough streams","date":"2014-04-21T21:55:25.379Z","type":"message"}
{"nick":"gozala","message":"currently I’m trying to push CSP channels","date":"2014-04-21T21:55:34.474Z","type":"message"}
{"nick":"gozala","message":"that are both push & pull","date":"2014-04-21T21:55:42.103Z","type":"message"}
{"nick":"creationix","message":"gozala, ahh, that's what I'm rembering then.  It was very FRP","date":"2014-04-21T21:55:46.395Z","type":"message"}
{"nick":"creationix","message":"I must say though, this one made me happy https://gist.github.com/creationix/11155884#file-stream-chunks-js-L7-L10","date":"2014-04-21T21:56:22.540Z","type":"message"}
{"nick":"gozala","message":"creationix: the beauty of SCP channels is that you can do both push or pull","date":"2014-04-21T21:56:23.832Z","type":"message"}
{"nick":"gozala","message":"which makes them nice fit for either","date":"2014-04-21T21:56:32.704Z","type":"message"}
{"nick":"chrisdickinson","message":"creationix: are the top and bottom files related?","date":"2014-04-21T21:56:52.395Z","type":"message"}
{"nick":"creationix","message":"chrisdickinson: no","date":"2014-04-21T21:57:04.394Z","type":"message"}
{"nick":"chrisdickinson","message":"hah, okay","date":"2014-04-21T21:57:08.850Z","type":"message"}
{"nick":"gozala","message":"creationix: which in fact are super close to your min-streams","date":"2014-04-21T21:57:11.306Z","type":"message"}
{"nick":"chrisdickinson","message":"what ended up being the problem with simple-streams?","date":"2014-04-21T21:57:50.269Z","type":"message"}
{"nick":"gozala","message":"creationix: you can see details here: https://github.com/Gozala/streams/blob/master/Examples.md","date":"2014-04-21T21:57:51.026Z","type":"message"}
{"nick":"creationix","message":"chrisdickinson: there are a few edge cases that are really painful.  But that's mostly from trying to use read streams to write to sinks","date":"2014-04-21T21:58:21.004Z","type":"message"}
{"nick":"gozala","message":"creationix: CSP channels are the ones used intensively by go, rust, concurrent ml and core.async","date":"2014-04-21T21:58:38.594Z","type":"message"}
{"nick":"chrisdickinson","message":"ah","date":"2014-04-21T21:58:40.056Z","type":"message"}
{"nick":"creationix","message":"I've discovered that my code fits into two common patterns.  One is push-style sync transforms","date":"2014-04-21T21:58:55.717Z","type":"message"}
{"nick":"creationix","message":"for every input event there are 0 or more output events that happen in sync","date":"2014-04-21T21:59:05.219Z","type":"message"}
{"nick":"gozala","message":"creationix: in fact I wanted to talk to you about this, but never managed to get hold of you","date":"2014-04-21T21:59:08.988Z","type":"message"}
{"nick":"creationix","message":"The other kind of logic I have is things like the inner app in a server that reacts to events and emits events, but the relationship is less tightly couples and async","date":"2014-04-21T22:00:55.652Z","type":"message"}
{"nick":"creationix","message":"for these having separate readable and writable interfaces is ideal","date":"2014-04-21T22:01:07.992Z","type":"message"}
{"nick":"thlorenz_","reason":"Remote host closed the connection","date":"2014-04-21T22:02:07.278Z","type":"quit"}
{"nick":"thlorenz","date":"2014-04-21T22:02:43.241Z","type":"join"}
{"nick":"jjjohnny","message":"PROJECT MANAGER DRIVEN DEVELOPMENT","date":"2014-04-21T22:03:46.070Z","type":"message"}
{"nick":"LOUDBOT","message":"IT'S CALLED THE CARPAL TUNNEL, IT COVERS MOST OF THE DISTANCE TO PORKTON IN 3 MINUTES BY BOAT","date":"2014-04-21T22:03:46.656Z","type":"message"}
{"nick":"creationix","message":"gozala: your pipe example looks a lot like my original continuable based r/w streams","date":"2014-04-21T22:04:19.301Z","type":"message"}
{"nick":"gozala","message":"creationix: that is why I wanted to talk to you :)","date":"2014-04-21T22:04:36.652Z","type":"message"}
{"nick":"gozala","message":"also arguably put and take are very similar to your read and write","date":"2014-04-21T22:04:51.183Z","type":"message"}
{"nick":"creationix","message":"my simple one is read() => item, write() => done","date":"2014-04-21T22:05:17.982Z","type":"message"}
{"nick":"creationix","message":"where => means returns a continuable/promise or accepts a callback-last node style","date":"2014-04-21T22:05:39.764Z","type":"message"}
{"nick":"gozala","message":"creationix: yes it’s just given that we have promises now in standard","date":"2014-04-21T22:06:12.162Z","type":"message"}
{"nick":"creationix","message":"gozala: I have a question about your JS.  I didn't know about this technique:","date":"2014-04-21T22:06:14.968Z","type":"message"}
{"nick":"creationix","message":"    while (chunk = yield input.take(), chunk !== void(0)) {","date":"2014-04-21T22:06:15.726Z","type":"message"}
{"nick":"gozala","message":"I don’t think it’s worth pursuing continuables","date":"2014-04-21T22:06:22.375Z","type":"message"}
{"nick":"creationix","message":"so what's the order of actions here with the yield and the comma operator","date":"2014-04-21T22:06:33.433Z","type":"message"}
{"nick":"chrisdickinson","message":"input.take(), yield, chunk assign, chunk compare","date":"2014-04-21T22:06:58.986Z","type":"message"}
{"nick":"gozala","message":"creationix: it’s like grouping of multiple statements","date":"2014-04-21T22:06:59.746Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 255 seconds","date":"2014-04-21T22:07:20.585Z","type":"quit"}
{"nick":"creationix","message":"chrisdickinson: that makes sense.","date":"2014-04-21T22:07:22.743Z","type":"message"}
{"nick":"gozala","message":"var x = (chunk =yield input.take(), chunk !== void(0)","date":"2014-04-21T22:07:30.735Z","type":"message"}
{"nick":"creationix","message":"that's much clearer than how I've been writing it I think. ((chunk = yield input.take()) !== void(0))","date":"2014-04-21T22:08:03.697Z","type":"message"}
{"nick":"chrisdickinson","message":"using void to ensure a \"clean\" undefined? or for line length?","date":"2014-04-21T22:09:57.413Z","type":"message"}
{"nick":"creationix","message":"I just use undefined personally","date":"2014-04-21T22:10:07.388Z","type":"message"}
{"nick":"chrisdickinson","message":"i tend to as well","date":"2014-04-21T22:10:26.843Z","type":"message"}
{"nick":"AvianFlu","date":"2014-04-21T22:10:49.447Z","type":"join"}
{"nick":"phated_","date":"2014-04-21T22:11:41.434Z","type":"join"}
{"nick":"creationix","message":"gozala: so a goroutine is like a generator or a coroutine right?","date":"2014-04-21T22:12:07.739Z","type":"message"}
{"nick":"ednapiranha","date":"2014-04-21T22:12:30.449Z","type":"join"}
{"nick":"gozala","message":"creationix: yeah they just run them as separate tasks","date":"2014-04-21T22:12:38.947Z","type":"message"}
{"nick":"rowbit1","message":"substack, pkrumins: These encoders are STILL down: 50.56.27.70(dev-ie6-1), 50.57.171.229(dev-ie6-2), 184.106.99.27(dev-ie7-3)","date":"2014-04-21T22:12:52.968Z","type":"message"}
{"nick":"creationix","message":"but it looks like they don't even start till end of tick, or is this multi-threaded?","date":"2014-04-21T22:13:01.108Z","type":"message"}
{"nick":"gozala","message":"creationix: are you referring to go ?","date":"2014-04-21T22:13:21.090Z","type":"message"}
{"nick":"creationix","message":"right","date":"2014-04-21T22:13:26.162Z","type":"message"}
{"nick":"creationix","message":"https://gobyexample.com/goroutines","date":"2014-04-21T22:13:31.142Z","type":"message"}
{"nick":"gozala","message":"in go you can choose weather you wanna use threads or lightweight tasks","date":"2014-04-21T22:13:36.057Z","type":"message"}
{"nick":"creationix","message":"I guess it doesn't matter because you don't share mutable state between them","date":"2014-04-21T22:13:57.646Z","type":"message"}
{"nick":"brianloveswords","reason":"Quit: Computer has gone to sleep.","date":"2014-04-21T22:14:03.900Z","type":"quit"}
{"nick":"gozala","message":"creationix: they communicate via channels","date":"2014-04-21T22:14:16.499Z","type":"message"}
{"nick":"phated","reason":"Ping timeout: 240 seconds","date":"2014-04-21T22:14:26.750Z","type":"quit"}
{"nick":"gozala","message":"which provide certain guarantees","date":"2014-04-21T22:14:32.070Z","type":"message"}
{"nick":"creationix","message":"right, that's like talking between the main frame and a web worker right?","date":"2014-04-21T22:14:43.428Z","type":"message"}
{"nick":"gozala","message":"creationix: yeah it’s message passing but a lot lighter","date":"2014-04-21T22:15:02.628Z","type":"message"}
{"nick":"creationix","message":"oh, is it like rust where you can transfer ownership?","date":"2014-04-21T22:15:31.083Z","type":"message"}
{"nick":"creationix","message":"(though webworkers have that too for binary data)","date":"2014-04-21T22:15:43.238Z","type":"message"}
{"nick":"gozala","message":"creationix: well in go you don’t need to transfer ownership","date":"2014-04-21T22:15:55.377Z","type":"message"}
{"nick":"gozala","message":"but yeah it’s similar","date":"2014-04-21T22:15:58.962Z","type":"message"}
{"nick":"gozala","message":"rust also has channels for IO and communication between tasks","date":"2014-04-21T22:16:12.415Z","type":"message"}
{"nick":"gozala","message":"creationix: I believe go is less strict though","date":"2014-04-21T22:16:22.297Z","type":"message"}
{"nick":"gozala","message":"because you can just access task enclosed variables","date":"2014-04-21T22:16:35.713Z","type":"message"}
{"nick":"gozala","message":"like channels","date":"2014-04-21T22:16:48.570Z","type":"message"}
{"nick":"gozala","message":"so you could put and take from them","date":"2014-04-21T22:16:53.399Z","type":"message"}
{"nick":"creationix","message":"gozala:, ok so in this example https://gobyexample.com/channels is the \"ping\" being pushed from the goroutine into the main task?","date":"2014-04-21T22:17:17.574Z","type":"message"}
{"nick":"gozala","message":"creationix: if you’re interested I found this to be the best introduction to cap style channels https://vimeo.com/49718712","date":"2014-04-21T22:17:34.282Z","type":"message"}
{"nick":"creationix","message":"and then the main task is pulling it out?","date":"2014-04-21T22:17:34.492Z","type":"message"}
{"nick":"gozala","message":"creationix: ping is send to a messages channel","date":"2014-04-21T22:18:02.927Z","type":"message"}
{"nick":"gozala","message":"and then main task takes message from messages channel","date":"2014-04-21T22:18:31.612Z","type":"message"}
{"nick":"creationix","message":"ok, so it's a shared message queue","date":"2014-04-21T22:18:33.663Z","type":"message"}
{"nick":"creationix","message":"does it support back-pressure then?","date":"2014-04-21T22:18:40.143Z","type":"message"}
{"nick":"gozala","message":"creationix: it does","date":"2014-04-21T22:18:50.991Z","type":"message"}
{"nick":"gozala","message":"it provides a lot more powerful task coordination than just back pressure","date":"2014-04-21T22:19:11.960Z","type":"message"}
{"nick":"gozala","message":"back pressure comes for free","date":"2014-04-21T22:19:28.706Z","type":"message"}
{"nick":"creationix","message":"interesting","date":"2014-04-21T22:19:36.507Z","type":"message"}
{"nick":"gozala","message":"creationix: I’d suggest skimming through https://github.com/Gozala/streams/blob/master/Examples.md","date":"2014-04-21T22:19:53.305Z","type":"message"}
{"nick":"gozala","message":"I explain how that coordination works","date":"2014-04-21T22:20:04.334Z","type":"message"}
{"nick":"creationix","message":"so your channels are a lot like go channels?","date":"2014-04-21T22:20:21.029Z","type":"message"}
{"nick":"gozala","message":"and how buffering allows you to make task coordination more flexible","date":"2014-04-21T22:20:28.467Z","type":"message"}
{"nick":"gozala","message":"like high low watermark stuff","date":"2014-04-21T22:20:37.272Z","type":"message"}
{"nick":"addisonj","reason":"Quit: Connection closed for inactivity","date":"2014-04-21T22:20:43.074Z","type":"quit"}
{"nick":"creationix","message":"so it's more like setting a buffer-size for the queue and back-pressure it baked in?","date":"2014-04-21T22:21:14.495Z","type":"message"}
{"nick":"gozala","message":"creationix: essentially they are the same","date":"2014-04-21T22:21:24.133Z","type":"message"}
{"nick":"gozala","message":"although I’d say they’re more closer to rusts implementation","date":"2014-04-21T22:21:36.835Z","type":"message"}
{"nick":"gozala","message":"creationix: that’s in most primitive case","date":"2014-04-21T22:21:58.956Z","type":"message"}
{"nick":"gozala","message":"creationix: but it’s more powerful","date":"2014-04-21T22:22:06.712Z","type":"message"}
{"nick":"gozala","message":"because you can provide your own buffer","date":"2014-04-21T22:22:14.398Z","type":"message"}
{"nick":"gozala","message":"that can have it’s own strategies for bufferring","date":"2014-04-21T22:22:24.086Z","type":"message"}
{"nick":"gozala","message":"creationix: take a look at this section","date":"2014-04-21T22:22:39.088Z","type":"message"}
{"nick":"gozala","message":"https://github.com/Gozala/streams/blob/master/Examples.md#bufferring-strategies","date":"2014-04-21T22:22:39.867Z","type":"message"}
{"nick":"gozala","message":"creationix: you can define aggregating buffers","date":"2014-04-21T22:22:52.767Z","type":"message"}
{"nick":"gozala","message":"or never overflowing buffers","date":"2014-04-21T22:23:04.409Z","type":"message"}
{"nick":"gozala","message":"or even the ones that do compression","date":"2014-04-21T22:23:11.405Z","type":"message"}
{"nick":"gozala","message":"creationix: key point is that channels are for transferring data between tasks","date":"2014-04-21T22:23:35.621Z","type":"message"}
{"nick":"gozala","message":"while buffers are for buffering data transferred by channels","date":"2014-04-21T22:23:48.591Z","type":"message"}
{"nick":"gozala","message":"because you separated those concerns everything becomes more composable and a lot more configurable","date":"2014-04-21T22:24:20.282Z","type":"message"}
{"nick":"gozala","message":"creationix: as a side benefit you can do stuff like this too","date":"2014-04-21T22:24:46.985Z","type":"message"}
{"nick":"gozala","message":"http://talks.golang.org/2012/concurrency.slide#50","date":"2014-04-21T22:24:47.900Z","type":"message"}
{"nick":"gozala","message":"which is coordinate many different tasks and cancel out ones that failed the race","date":"2014-04-21T22:25:21.224Z","type":"message"}
{"nick":"gozala","message":"creationix: expressing anything similar with node streams will be really hard","date":"2014-04-21T22:26:07.979Z","type":"message"}
{"nick":"creationix","message":"so the way I've been doing it is having the buffer be a transform","date":"2014-04-21T22:26:36.244Z","type":"message"}
{"nick":"creationix","message":"but I see that's rather one-directional","date":"2014-04-21T22:26:47.378Z","type":"message"}
{"nick":"rowbit1","message":"substack, pkrumins: A developer is waiting in the queue for explorer/7.0","date":"2014-04-21T22:26:53.291Z","type":"message"}
{"nick":"gozala","message":"creationix: well the think is buffer is task bound an can have completely sync stateful API","date":"2014-04-21T22:27:28.512Z","type":"message"}
{"nick":"gozala","message":"while channels are non stateful and likely async","date":"2014-04-21T22:27:47.646Z","type":"message"}
{"nick":"brianloveswords","date":"2014-04-21T22:27:51.205Z","type":"join"}
{"nick":"gozala","message":"creationix: I would imagine with transform you would loose this separation","date":"2014-04-21T22:28:13.165Z","type":"message"}
{"nick":"gozala","message":"creationix: also note that there are cases where shared buffer comes handy","date":"2014-04-21T22:28:32.312Z","type":"message"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 11, free: 37]","date":"2014-04-21T22:29:09.449Z","type":"message"}
{"nick":"gozala","message":"creationix: it also could be that I don’t really understand what transform is","date":"2014-04-21T22:30:02.921Z","type":"message"}
{"nick":"creationix","message":"it's pretty simple.  for each item that comes in, 0 or more items will go out","date":"2014-04-21T22:30:36.020Z","type":"message"}
{"nick":"creationix","message":"wait, nevermind, sync transforms can't be buffers","date":"2014-04-21T22:31:22.237Z","type":"message"}
{"nick":"creationix","message":"it was the pull-style transforms from before that could be buffers","date":"2014-04-21T22:31:32.175Z","type":"message"}
{"nick":"gozala","message":"creationix: I guess what I mean I’m not sure how one would express something like this","date":"2014-04-21T22:31:50.251Z","type":"message"}
{"nick":"gozala","message":"https://github.com/Gozala/streams/blob/master/Examples.md#aggregators","date":"2014-04-21T22:31:50.962Z","type":"message"}
{"nick":"creationix","message":"they would pull from their source trying to reach the high-watermark while at the same time their consumer is pulling items out of them","date":"2014-04-21T22:32:04.512Z","type":"message"}
{"nick":"gozala","message":"creationix: Assuming that ByteBuffer is provided by platform it can be super optimised","date":"2014-04-21T22:32:27.632Z","type":"message"}
{"nick":"gozala","message":"creationix: yeah I guess you could do that","date":"2014-04-21T22:33:44.967Z","type":"message"}
{"nick":"gozala","message":"but then it’s just more piping","date":"2014-04-21T22:34:02.597Z","type":"message"}
{"nick":"gozala","message":"and less composable","date":"2014-04-21T22:34:11.112Z","type":"message"}
{"nick":"gozala","message":"and suddenly you bound your streams to be inherently stateful","date":"2014-04-21T22:34:31.564Z","type":"message"}
{"nick":"gozala","message":"while this makes buffering strategy completely independent problem","date":"2014-04-21T22:34:55.618Z","type":"message"}
{"nick":"gozala","message":"creationix: in other words suddenly your domain becomes just stating weather you are full or empty given the specific state","date":"2014-04-21T22:35:37.464Z","type":"message"}
{"nick":"creationix","message":"yep","date":"2014-04-21T22:36:24.848Z","type":"message"}
{"nick":"gozala","message":"and I hope that bunch of Buffers for Binary data can be provided by platform so it’s a lot faster","date":"2014-04-21T22:36:32.214Z","type":"message"}
{"nick":"gozala","message":"creationix: like C++ can write directly into it without talking to JS at all","date":"2014-04-21T22:36:49.079Z","type":"message"}
{"nick":"creationix","message":"I care mostly about object streams","date":"2014-04-21T22:37:04.245Z","type":"message"}
{"nick":"creationix","message":"but I could see how that helps binary streams","date":"2014-04-21T22:37:10.513Z","type":"message"}
{"nick":"gozala","message":"creationix: there are uses for that in object stream to actually","date":"2014-04-21T22:37:40.141Z","type":"message"}
{"nick":"gozala","message":"creationix: you can have something like State buffer","date":"2014-04-21T22:37:50.573Z","type":"message"}
{"nick":"gozala","message":"that batches up all the diffs","date":"2014-04-21T22:38:36.912Z","type":"message"}
{"nick":"gozala","message":"and on take returns combined version","date":"2014-04-21T22:38:56.910Z","type":"message"}
{"nick":"gozala","message":"internally reusing data structures","date":"2014-04-21T22:39:05.932Z","type":"message"}
{"nick":"gozala","message":"So in simple case it can be treated as a queue size","date":"2014-04-21T22:39:28.051Z","type":"message"}
{"nick":"gozala","message":"but in some cases you can optimise it better","date":"2014-04-21T22:39:50.667Z","type":"message"}
{"nick":"creationix","message":"I switched IRC clients, that one was driving me crazy","date":"2014-04-21T22:42:06.978Z","type":"message"}
{"nick":"jlord","message":"ogd: just saw your comment from daaayyyz ago.","date":"2014-04-21T22:42:09.138Z","type":"message"}
{"nick":"gozala","message":"creationix: so I’d be interested in your feedback","date":"2014-04-21T22:43:20.923Z","type":"message"}
{"nick":"feross","message":"dominic_: i arrive on april 22, nighttime","date":"2014-04-21T22:43:23.204Z","type":"message"}
{"nick":"gozala","message":"and constructive criticism","date":"2014-04-21T22:43:31.345Z","type":"message"}
{"nick":"gozala","message":"creationix: I have being trying to address issues or provide examples for things that ppl seem to think it can’t address","date":"2014-04-21T22:44:04.757Z","type":"message"}
{"nick":"creationix","message":"gozala: mostly I'm having trouble understanding what it is","date":"2014-04-21T22:44:42.003Z","type":"message"}
{"nick":"gozala","message":"creationix: it’s just a queue of takes & puts","date":"2014-04-21T22:45:11.060Z","type":"message"}
{"nick":"feross","message":"ircretary help","date":"2014-04-21T22:45:16.204Z","type":"message"}
{"nick":"ircretary","message":"feross: I'm not sure what to do with that command.  Ask for help in PM.","date":"2014-04-21T22:45:17.190Z","type":"message"}
{"nick":"gozala","message":"that channel connects","date":"2014-04-21T22:45:18.412Z","type":"message"}
{"nick":"creationix","message":"can the consumer be notified when items are put in the queue?","date":"2014-04-21T22:45:39.288Z","type":"message"}
{"nick":"gozala","message":"if you can be more specific, I can try addressing it in readme","date":"2014-04-21T22:45:42.245Z","type":"message"}
{"nick":"gozala","message":"creationix: well consumer does not needs to know that","date":"2014-04-21T22:46:00.260Z","type":"message"}
{"nick":"gozala","message":"consumer just says input.take()","date":"2014-04-21T22:46:09.265Z","type":"message"}
{"nick":"feross","message":"tell dominic_ i arrive in budapest april 22, late, like 10pm","date":"2014-04-21T22:46:14.308Z","type":"message"}
{"nick":"feross","message":"tell dominic i arrive in budapest april 22, late, like 10pm","date":"2014-04-21T22:46:20.257Z","type":"message"}
{"nick":"gozala","message":"and the result of it is an operation","date":"2014-04-21T22:46:24.199Z","type":"message"}
{"nick":"gozala","message":"that is either pending or complete","date":"2014-04-21T22:46:29.335Z","type":"message"}
{"nick":"creationix","message":"gozala: what if I take and there is nothing there?","date":"2014-04-21T22:46:30.065Z","type":"message"}
{"nick":"feross","message":"ircretary: tell dominic_ i arrive in budapest april 22, late, like 10pm","date":"2014-04-21T22:46:34.452Z","type":"message"}
{"nick":"ircretary","message":"feross: I'll be sure to tell dominic_","date":"2014-04-21T22:46:35.254Z","type":"message"}
{"nick":"jjjohnny","message":"ircretary bomb feross","date":"2014-04-21T22:46:36.811Z","type":"message"}
{"nick":"ircretary","message":"jjjohnny: Sorry, that requires admin access.","date":"2014-04-21T22:46:37.705Z","type":"message"}
{"nick":"gozala","message":"creationix: so that would be a pending case","date":"2014-04-21T22:46:48.888Z","type":"message"}
{"nick":"feross","message":"ircretary: tell dominic i arrive in budapest april 22, late, like 10pm","date":"2014-04-21T22:46:50.509Z","type":"message"}
{"nick":"ircretary","message":"feross: I'll be sure to tell dominic","date":"2014-04-21T22:46:51.146Z","type":"message"}
{"nick":"gozala","message":"and in such case take.isPending() => true","date":"2014-04-21T22:47:05.244Z","type":"message"}
{"nick":"feross","message":"jjjohnny: lol what’s that?","date":"2014-04-21T22:47:07.273Z","type":"message"}
{"nick":"gozala","message":"and you can do take.then(….)","date":"2014-04-21T22:47:13.052Z","type":"message"}
{"nick":"gozala","message":"creationix: assuming that take = input.take()","date":"2014-04-21T22:47:22.887Z","type":"message"}
{"nick":"gozala","message":"if take.isPending() => false","date":"2014-04-21T22:47:33.909Z","type":"message"}
{"nick":"gozala","message":"you can unbox it via take.valueOf()","date":"2014-04-21T22:47:54.012Z","type":"message"}
{"nick":"gozala","message":"if it’s pending it’s going to throw","date":"2014-04-21T22:48:02.384Z","type":"message"}
{"nick":"gozala","message":"creationix: result of output.put(x) is also operation with the same interface","date":"2014-04-21T22:48:30.577Z","type":"message"}
{"nick":"creationix","message":"does it pend till the consumer gets the message?","date":"2014-04-21T22:48:49.953Z","type":"message"}
{"nick":"gozala","message":"creationix: if you take from closed channel","date":"2014-04-21T22:48:54.042Z","type":"message"}
{"nick":"gozala","message":"than it will complete to undefined","date":"2014-04-21T22:49:03.915Z","type":"message"}
{"nick":"gozala","message":"creationix: that depends on a channel","date":"2014-04-21T22:49:25.714Z","type":"message"}
{"nick":"gozala","message":"unbufferred channels block on put and take","date":"2014-04-21T22:49:34.479Z","type":"message"}
{"nick":"gozala","message":"meaning if I put it will be blocked until corresponding take","date":"2014-04-21T22:49:43.811Z","type":"message"}
{"nick":"gozala","message":"and vice versa","date":"2014-04-21T22:49:48.567Z","type":"message"}
{"nick":"creationix","message":"ok, so it resolves when the buffer is ready for more","date":"2014-04-21T22:49:53.585Z","type":"message"}
{"nick":"mbrevoort","reason":"Remote host closed the connection","date":"2014-04-21T22:49:55.398Z","type":"quit"}
{"nick":"gozala","message":"for bufferred channels, puts  won’t block until buffer is full","date":"2014-04-21T22:50:08.718Z","type":"message"}
{"nick":"gozala","message":"after that it will start blocking and queuing put operations","date":"2014-04-21T22:50:23.183Z","type":"message"}
{"nick":"gozala","message":"until there is a take releasing some space in the buffer","date":"2014-04-21T22:50:31.831Z","type":"message"}
{"nick":"taterbase","reason":"Quit: Connection closed for inactivity","date":"2014-04-21T22:50:45.163Z","type":"quit"}
{"nick":"gozala","message":"creationix: well once x is moved to buffer, which is when it’s ready","date":"2014-04-21T22:50:58.112Z","type":"message"}
{"nick":"creationix","message":"so where do transforms go?","date":"2014-04-21T22:51:16.825Z","type":"message"}
{"nick":"gozala","message":"creationix: what is transforms ? combinator functions ?","date":"2014-04-21T22:51:33.407Z","type":"message"}
{"nick":"creationix","message":"I have a stream that speaks raw binary chunks and I want to parse some binary protocol and get objects","date":"2014-04-21T22:51:44.132Z","type":"message"}
{"nick":"gozala","message":"creationix: like map / filter stuff ?","date":"2014-04-21T22:51:46.904Z","type":"message"}
{"nick":"creationix","message":"and when I write objects to it I want encoded binary stuff to come out","date":"2014-04-21T22:51:58.130Z","type":"message"}
{"nick":"creationix","message":"a simple example is transform between newline separated JSON and objects","date":"2014-04-21T22:52:12.288Z","type":"message"}
{"nick":"taterbase","date":"2014-04-21T22:52:20.276Z","type":"join"}
{"nick":"creationix","message":"the parser will need to scan for newlines and parse and emit once it finds a whole line","date":"2014-04-21T22:52:29.437Z","type":"message"}
{"nick":"creationix","message":"the encoder is a simple map of JSON.stringify + \"\\n\"","date":"2014-04-21T22:52:42.971Z","type":"message"}
{"nick":"gozala","message":"creationix: do you want me to write that ?","date":"2014-04-21T22:52:57.087Z","type":"message"}
{"nick":"gozala","message":"creationix: it should be very simple","date":"2014-04-21T22:53:07.319Z","type":"message"}
{"nick":"creationix","message":"well, where does that fit conceptually?","date":"2014-04-21T22:53:07.319Z","type":"message"}
{"nick":"creationix","message":"does it go in the buffer?","date":"2014-04-21T22:53:14.061Z","type":"message"}
{"nick":"gozala","message":"creationix: depends on use case I guess","date":"2014-04-21T22:53:33.858Z","type":"message"}
{"nick":"gozala","message":"it could into either one","date":"2014-04-21T22:53:42.267Z","type":"message"}
{"nick":"ins0mnia","reason":"Ping timeout: 276 seconds","date":"2014-04-21T22:53:54.027Z","type":"quit"}
{"nick":"gozala","message":"creationix: I’d say probably don’t put it into buffer","date":"2014-04-21T22:54:08.492Z","type":"message"}
{"nick":"jesusabdullah","date":"2014-04-21T22:54:24.464Z","type":"join"}
{"nick":"gozala","message":"buffers is mainly for storage and chunking","date":"2014-04-21T22:54:30.449Z","type":"message"}
{"nick":"kanzure","message":"is there anything like this except it also works between \"watching sessions\" for speedups? https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md","date":"2014-04-21T22:54:31.486Z","type":"message"}
{"nick":"kanzure","message":"maybe something that stores some state in a temp file somewhere","date":"2014-04-21T22:54:39.770Z","type":"message"}
{"nick":"creationix","message":"ok, so buffers are primarily good for controlling high-low water-marks","date":"2014-04-21T22:54:40.430Z","type":"message"}
{"nick":"gozala","message":"creationix: so what I would say","date":"2014-04-21T22:55:03.943Z","type":"message"}
{"nick":"gozala","message":"I would have buffer that aggregates data","date":"2014-04-21T22:55:12.142Z","type":"message"}
{"nick":"gozala","message":"and take on it returns a chunk","date":"2014-04-21T22:55:17.684Z","type":"message"}
{"nick":"gozala","message":"which is from new line to new line","date":"2014-04-21T22:55:23.315Z","type":"message"}
{"nick":"gozala","message":"creationix: LineBuffer(byteSize)","date":"2014-04-21T22:55:36.694Z","type":"message"}
{"nick":"gozala","message":"and then I would have var channel = new Channel(new LineBuffer())","date":"2014-04-21T22:56:04.584Z","type":"message"}
{"nick":"gozala","message":"map(channel.input, JSON.parse)","date":"2014-04-21T22:56:19.884Z","type":"message"}
{"nick":"creationix","message":"what's byteSize do?","date":"2014-04-21T22:56:20.253Z","type":"message"}
{"nick":"gozala","message":"creationix: high water mark","date":"2014-04-21T22:56:30.879Z","type":"message"}
{"nick":"gozala","message":"if it has more than that amount of bytes stored","date":"2014-04-21T22:56:44.042Z","type":"message"}
{"nick":"gozala","message":"buffer.isFull() will be true","date":"2014-04-21T22:56:49.019Z","type":"message"}
{"nick":"creationix","message":"ok, so combined buffer and re-framer","date":"2014-04-21T22:56:49.985Z","type":"message"}
{"nick":"creationix","message":"what if a single line is larger than the byteSize?","date":"2014-04-21T22:57:20.238Z","type":"message"}
{"nick":"gozala","message":"creationix: Yes! reframing is a good word for it, thanks!","date":"2014-04-21T22:57:30.367Z","type":"message"}
{"nick":"creationix","message":"you'll just need custom code to keep asking for more if there isn't at least one newline?","date":"2014-04-21T22:57:36.273Z","type":"message"}
{"nick":"ogd","message":"feels really good to npm publish from the transbay tube","date":"2014-04-21T22:57:43.055Z","type":"message"}
{"nick":"gozala","message":"creationix: it can overflow it’ll just start pushing back","date":"2014-04-21T22:57:47.960Z","type":"message"}
{"nick":"gozala","message":"creationix: well you define your isFull such that","date":"2014-04-21T22:58:05.947Z","type":"message"}
{"nick":"creationix","message":"ogd: how's that working for you","date":"2014-04-21T22:58:16.365Z","type":"message"}
{"nick":"gozala","message":"this.buffer.byteSyze > this.limit && hasNewLine(this.buffer)","date":"2014-04-21T22:58:35.101Z","type":"message"}
{"nick":"gozala","message":"creationix: ^","date":"2014-04-21T22:58:44.164Z","type":"message"}
{"nick":"creationix","message":"gozala: ok, that's what I figured","date":"2014-04-21T22:58:45.034Z","type":"message"}
{"nick":"creationix","message":"so that example was pretty easy since the JSON part is a simple mapping","date":"2014-04-21T22:59:02.778Z","type":"message"}
{"nick":"creationix","message":"just need to reframe on the incoming stream","date":"2014-04-21T22:59:11.427Z","type":"message"}
{"nick":"creationix","message":"but what about a more complex one that didn't have newlines and required a streaming JSON parser to know when one object ended and another started?","date":"2014-04-21T22:59:34.188Z","type":"message"}
{"nick":"creationix","message":"most of the binary protocols I deal with are like that.  They require state-machine logic to know where things end","date":"2014-04-21T22:59:59.151Z","type":"message"}
{"nick":"gozala","message":"creationix: creationix I think buffer should take care only of storing data and framing","date":"2014-04-21T23:00:00.725Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2014-04-21T23:00:04.916Z","type":"message"}
{"nick":"gozala","message":"there rest should be handled by tasks","date":"2014-04-21T23:00:07.349Z","type":"message"}
{"nick":"creationix","message":"so the task would pull from the TCP socket and push to the object buffer then?","date":"2014-04-21T23:00:26.952Z","type":"message"}
{"nick":"gozala","message":"creationix: well socket channel and object channel","date":"2014-04-21T23:01:00.960Z","type":"message"}
{"nick":"creationix","message":"right, that's what I mean","date":"2014-04-21T23:01:07.596Z","type":"message"}
{"nick":"creationix","message":"that's an interesting way to look at the problem","date":"2014-04-21T23:02:08.687Z","type":"message"}
{"nick":"creationix","message":"instead of pipes and filters you have tasks and buffers","date":"2014-04-21T23:02:15.019Z","type":"message"}
{"nick":"creationix","message":"I wonder how efficient that is","date":"2014-04-21T23:02:32.980Z","type":"message"}
{"nick":"gozala","message":"creationix: the cool thing is we can make channels transferable","date":"2014-04-21T23:02:36.946Z","type":"message"}
{"nick":"gozala","message":"and actually have tasks be workers","date":"2014-04-21T23:02:42.224Z","type":"message"}
{"nick":"creationix","message":"I wish node had native workers","date":"2014-04-21T23:03:13.573Z","type":"message"}
{"nick":"creationix","message":"it's silly for things like crypto and zlib to be async on threads","date":"2014-04-21T23:03:30.800Z","type":"message"}
{"nick":"gozala","message":"creationix: the beauty of channels is that they let you compose problems concurrently","date":"2014-04-21T23:03:34.152Z","type":"message"}
{"nick":"creationix","message":"instead we should just have generic workers that run on threads","date":"2014-04-21T23:03:39.937Z","type":"message"}
{"nick":"gozala","message":"and switching parallelism switch becomes separate decision","date":"2014-04-21T23:03:47.746Z","type":"message"}
{"nick":"creationix","message":"right, I saw the video :)","date":"2014-04-21T23:03:54.460Z","type":"message"}
{"nick":"gozala","message":"creationix: this also lets producers and consumers decide between pull vs push","date":"2014-04-21T23:04:36.054Z","type":"message"}
{"nick":"creationix","message":"the one thing I really like about this approach is it allows non-linear systems","date":"2014-04-21T23:04:48.653Z","type":"message"}
{"nick":"gozala","message":"based on their own merits and not forcing each other to agree","date":"2014-04-21T23:04:50.661Z","type":"message"}
{"nick":"creationix","message":"pipe chains are quite linear","date":"2014-04-21T23:04:56.417Z","type":"message"}
{"nick":"gozala","message":"creationix: well I think interface is also lot more simpler that what streams have","date":"2014-04-21T23:05:36.958Z","type":"message"}
{"nick":"creationix","message":"node streams are insane","date":"2014-04-21T23:05:47.054Z","type":"message"}
{"nick":"gozala","message":"also you make same tick / next tick decision separate form your implementation","date":"2014-04-21T23:05:57.798Z","type":"message"}
{"nick":"creationix","message":"I know why they are what they are, but it's still craazy","date":"2014-04-21T23:05:58.401Z","type":"message"}
{"nick":"gozala","message":"if you use something like spawn","date":"2014-04-21T23:06:04.727Z","type":"message"}
{"nick":"gozala","message":"creationix: also as you pointed out non of this needs promises","date":"2014-04-21T23:06:29.116Z","type":"message"}
{"nick":"creationix","message":"so the library sits in the channel","date":"2014-04-21T23:06:32.585Z","type":"message"}
{"nick":"creationix","message":"and the user implements buffers and tasks?","date":"2014-04-21T23:06:40.067Z","type":"message"}
{"nick":"gozala","message":"creationix: I don’t get it sorry ?","date":"2014-04-21T23:07:15.858Z","type":"message"}
{"nick":"creationix","message":"for this system to work, you need to implement a Channel library right?","date":"2014-04-21T23:07:34.380Z","type":"message"}
{"nick":"creationix","message":"since there is a fair amount of logic that needs to go there","date":"2014-04-21T23:07:44.151Z","type":"message"}
{"nick":"creationix","message":"that's where you encode the conventions?","date":"2014-04-21T23:07:50.809Z","type":"message"}
{"nick":"gozala","message":"well it’s implemented it’s pretty simple actually","date":"2014-04-21T23:07:54.272Z","type":"message"}
{"nick":"gozala","message":"creationix: I’m trying to push it for web standard instead of streams","date":"2014-04-21T23:08:16.749Z","type":"message"}
{"nick":"creationix","message":"so a streaming XHR would expose a channel for TCP chunks then?","date":"2014-04-21T23:08:45.204Z","type":"message"}
{"nick":"gozala","message":"so ref implementation of this is https://www.npmjs.org/package/channel","date":"2014-04-21T23:08:51.814Z","type":"message"}
{"nick":"creationix","message":"and UI events would be readable channels?","date":"2014-04-21T23:08:54.076Z","type":"message"}
{"nick":"gozala","message":"creationix: that would be great","date":"2014-04-21T23:09:36.806Z","type":"message"}
{"nick":"gozala","message":"but for now I’m just hoping to convince everyone that it is better than streams as they are proposed","date":"2014-04-21T23:09:58.196Z","type":"message"}
{"nick":"gozala","message":"creationix: I also hope that channels could be send over workers or frames","date":"2014-04-21T23:10:18.236Z","type":"message"}
{"nick":"creationix","message":"right, that should be pretty easy","date":"2014-04-21T23:10:29.333Z","type":"message"}
{"nick":"gozala","message":"if you use one of the provided buffers","date":"2014-04-21T23:10:32.234Z","type":"message"}
{"nick":"creationix","message":"like postMessage","date":"2014-04-21T23:10:36.169Z","type":"message"}
{"nick":"gozala","message":"creationix: yeah so buffer would have to do the data serialisation / parsing","date":"2014-04-21T23:11:00.813Z","type":"message"}
{"nick":"gozala","message":"so it would have to be coming form platform","date":"2014-04-21T23:11:07.774Z","type":"message"}
{"nick":"creationix","message":"would the websocket interface be a special buffer or a task behind the scenes that implemented the framing/deframing protocol?","date":"2014-04-21T23:11:46.949Z","type":"message"}
{"nick":"gozala","message":"creationix: you could also use this for reactive bindings stuff that ppl have being interested in","date":"2014-04-21T23:11:58.265Z","type":"message"}
{"nick":"gozala","message":"creationix: it obviously could, but I have not done thinking that far ahead to be honest","date":"2014-04-21T23:12:45.698Z","type":"message"}
{"nick":"Raynos","message":"what are framing/deframing tasks ?","date":"2014-04-21T23:12:50.103Z","type":"message"}
{"nick":"Raynos","message":"compared to buffer ?","date":"2014-04-21T23:12:53.053Z","type":"message"}
{"nick":"creationix","message":"well, websocket is a binary protocol","date":"2014-04-21T23:13:13.381Z","type":"message"}
{"nick":"gozala","message":"Raynos: put(chunk) does not correspond to take() => chunk","date":"2014-04-21T23:13:26.706Z","type":"message"}
{"nick":"gozala","message":"because buffer does re-framing","date":"2014-04-21T23:13:35.905Z","type":"message"}
{"nick":"gozala","message":"creationix: I think it really going to be implementors choice","date":"2014-04-21T23:14:01.100Z","type":"message"}
{"nick":"gozala","message":"which should be opaque for the user","date":"2014-04-21T23:14:11.104Z","type":"message"}
{"nick":"gozala","message":"and not matter","date":"2014-04-21T23:14:17.452Z","type":"message"}
{"nick":"gozala","message":"where the framing happens","date":"2014-04-21T23:14:23.681Z","type":"message"}
{"nick":"creationix","message":"yeah I guess it doesn't matter what the browser does internally","date":"2014-04-21T23:14:24.187Z","type":"message"}
{"nick":"gozala","message":"creationix: I mean when you get an input port","date":"2014-04-21T23:14:37.658Z","type":"message"}
{"nick":"creationix","message":"though for my case, I'm implementing HTTP and websocket in userspac","date":"2014-04-21T23:14:38.045Z","type":"message"}
{"nick":"gozala","message":"you don’t know what it uses as buffer","date":"2014-04-21T23:14:48.448Z","type":"message"}
{"nick":"creationix","message":"so channels are readable, writable, or both?","date":"2014-04-21T23:15:12.170Z","type":"message"}
{"nick":"gozala","message":"so for consumer it’s indifferent weather it happens on a taks or in a buffer","date":"2014-04-21T23:15:28.777Z","type":"message"}
{"nick":"gozala","message":"creationix: var { input, output } = new Channel()","date":"2014-04-21T23:15:49.939Z","type":"message"}
{"nick":"gozala","message":"creationix: output.put(x)","date":"2014-04-21T23:15:59.436Z","type":"message"}
{"nick":"gozala","message":"creationix: input.take() => x","date":"2014-04-21T23:16:05.055Z","type":"message"}
{"nick":"creationix","message":"but they could be the same object right?","date":"2014-04-21T23:16:16.990Z","type":"message"}
{"nick":"gozala","message":"creationix: yes","date":"2014-04-21T23:16:25.682Z","type":"message"}
{"nick":"gozala","message":"creationix: go and core.async have channel that has both put and take","date":"2014-04-21T23:16:38.914Z","type":"message"}
{"nick":"gozala","message":"creationix: rust has different ports","date":"2014-04-21T23:16:45.395Z","type":"message"}
{"nick":"Raynos","message":"gozala: I meant it sounds like creationix is talking about special buffer & task as different things","date":"2014-04-21T23:16:53.505Z","type":"message"}
{"nick":"gozala","message":"creationix: use case for rust is that you can transfer ownership of each port independent of each other","date":"2014-04-21T23:17:03.631Z","type":"message"}
{"nick":"creationix","message":"Raynos: I'm just trying to figure out the best place to do binary protocol logic","date":"2014-04-21T23:17:16.480Z","type":"message"}
{"nick":"gozala","message":"which also makes sense in case of content policities stuff","date":"2014-04-21T23:17:19.040Z","type":"message"}
{"nick":"creationix","message":"gozala: right","date":"2014-04-21T23:17:48.258Z","type":"message"}
{"nick":"ednapiranha","reason":"Remote host closed the connection","date":"2014-04-21T23:18:02.450Z","type":"quit"}
{"nick":"creationix","message":"so the reason I'm thinking about streams today is I need to work on that part of js-git for the talk I'm giving Saturday","date":"2014-04-21T23:18:11.908Z","type":"message"}
{"nick":"addisonj","date":"2014-04-21T23:18:15.735Z","type":"join"}
{"nick":"creationix","message":"I'm not happy with simple-streams","date":"2014-04-21T23:18:16.581Z","type":"message"}
{"nick":"gozala","message":"creationix: so I after talking to rust ppl I switched to { input, output }","date":"2014-04-21T23:18:21.510Z","type":"message"}
{"nick":"creationix","message":"I like that too, it's just that we don't have destructing yet.","date":"2014-04-21T23:18:48.149Z","type":"message"}
{"nick":"gozala","message":"Raynos: creationix well buffers and tasks are diff","date":"2014-04-21T23:19:17.727Z","type":"message"}
{"nick":"gozala","message":"creationix: library itself is coded without destructuring","date":"2014-04-21T23:19:28.474Z","type":"message"}
{"nick":"gozala","message":"it’s not that bad actually","date":"2014-04-21T23:19:32.091Z","type":"message"}
{"nick":"gozala","message":"creationix: cause  usually you need either one or the other","date":"2014-04-21T23:19:46.670Z","type":"message"}
{"nick":"rxgx","reason":"Quit: Connection closed for inactivity","date":"2014-04-21T23:20:01.981Z","type":"quit"}
{"nick":"gozala","message":"creationix: also in most cases you want some transform anyhow that I would define as","date":"2014-04-21T23:20:14.716Z","type":"message"}
{"nick":"Raynos","message":"gozala: so what is a \"task\" ?","date":"2014-04-21T23:22:08.223Z","type":"message"}
{"nick":"gozala","message":"creationix: https://gist.github.com/Gozala/11159926","date":"2014-04-21T23:23:43.638Z","type":"message"}
{"nick":"Raynos","message":"gozala: a task is a name for a `map` or `transform` function ?","date":"2014-04-21T23:24:36.763Z","type":"message"}
{"nick":"gozala","message":"creationix: usually you move data between input & output","date":"2014-04-21T23:24:44.122Z","type":"message"}
{"nick":"gozala","message":"Raynos: well by task I mean unit of code running concurrently","date":"2014-04-21T23:25:03.036Z","type":"message"}
{"nick":"creationix","message":"that looks really expensive for a simple transform","date":"2014-04-21T23:25:09.298Z","type":"message"}
{"nick":"gozala","message":"creationix: you mean one function call ?","date":"2014-04-21T23:26:16.556Z","type":"message"}
{"nick":"gozala","message":"Raynos: so I think of producer and consumer as a separate tasks","date":"2014-04-21T23:26:41.532Z","type":"message"}
{"nick":"creationix","message":"ok, so transform() is one-time cost","date":"2014-04-21T23:26:57.065Z","type":"message"}
{"nick":"gozala","message":"Raynos: every generator is also a task","date":"2014-04-21T23:26:58.646Z","type":"message"}
{"nick":"creationix","message":"takes a channel and returns a new one","date":"2014-04-21T23:27:06.812Z","type":"message"}
{"nick":"Raynos","message":"you might need a less general name then task","date":"2014-04-21T23:27:46.948Z","type":"message"}
{"nick":"Raynos","message":"i kind of get what you mean","date":"2014-04-21T23:27:51.314Z","type":"message"}
{"nick":"gozala","message":"creationix: I mean you can use it to avoid destructuring :)","date":"2014-04-21T23:27:56.163Z","type":"message"}
{"nick":"creationix","message":"gozala: in your map, you're just putting to output without checking for back-pressure right?","date":"2014-04-21T23:28:33.468Z","type":"message"}
{"nick":"gozala","message":"Raynos: I’m calling it a task in  a sense task.js calls them","date":"2014-04-21T23:28:36.892Z","type":"message"}
{"nick":"gozala","message":"in go it’s go routine","date":"2014-04-21T23:28:41.488Z","type":"message"}
{"nick":"gozala","message":"and in rust it’s also called task","date":"2014-04-21T23:28:50.769Z","type":"message"}
{"nick":"rowbit1","message":"Hourly usage stats: [developer: 1, free: 24]","date":"2014-04-21T23:29:09.450Z","type":"message"}
{"nick":"gozala","message":"creationix: you right just fixed that","date":"2014-04-21T23:29:17.828Z","type":"message"}
{"nick":"gozala","message":":)","date":"2014-04-21T23:29:18.850Z","type":"message"}
{"nick":"creationix","message":"ok, so map is a gopher that runs to one side, grabs an item, transforms it and puts it on the other side","date":"2014-04-21T23:29:57.724Z","type":"message"}
{"nick":"creationix","message":"pipe + map in one","date":"2014-04-21T23:30:10.753Z","type":"message"}
{"nick":"creationix","message":"so everything between two channels needs to do it's own pumping","date":"2014-04-21T23:30:35.268Z","type":"message"}
{"nick":"gozala","message":"creationix: as long as they wanna respect back pressure","date":"2014-04-21T23:31:02.435Z","type":"message"}
{"nick":"gozala","message":"creationix: sometimes you just queue up and don’t care","date":"2014-04-21T23:31:18.536Z","type":"message"}
{"nick":"gozala","message":"like if all my data is local there is no point on trying to pause / resume","date":"2014-04-21T23:31:41.300Z","type":"message"}
{"nick":"creationix","message":"right, but that's up to the buffer, not the task right?","date":"2014-04-21T23:31:42.737Z","type":"message"}
{"nick":"gozala","message":"creationix: no it’s up to a task","date":"2014-04-21T23:31:58.188Z","type":"message"}
{"nick":"gozala","message":"so map without yield there","date":"2014-04-21T23:32:04.573Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2014-04-21T23:32:14.333Z","type":"message"}
{"nick":"gozala","message":"was basically pumping data as fast is was coming","date":"2014-04-21T23:32:22.713Z","type":"message"}
{"nick":"creationix","message":"but you have to yield on take :P","date":"2014-04-21T23:32:32.035Z","type":"message"}
{"nick":"gozala","message":"not caring about weather data is queued or bufferred","date":"2014-04-21T23:32:32.786Z","type":"message"}
{"nick":"Raynos","message":"you can also implement transform reducers style","date":"2014-04-21T23:32:58.945Z","type":"message"}
{"nick":"gozala","message":"creationix: year or implement high order function that deals with that","date":"2014-04-21T23:33:00.743Z","type":"message"}
{"nick":"Raynos","message":"instead of pumping into a second channel","date":"2014-04-21T23:33:03.994Z","type":"message"}
{"nick":"Raynos","message":"just monkey wrap take() or put()","date":"2014-04-21T23:33:09.838Z","type":"message"}
{"nick":"gozala","message":"Raynos: no, please","date":"2014-04-21T23:33:20.628Z","type":"message"}
{"nick":"gozala","message":"creationix: creationix but yeah you could","date":"2014-04-21T23:33:36.274Z","type":"message"}
{"nick":"creationix","message":"so my transforms are very composable.  I could just compose several of them in a single transform","date":"2014-04-21T23:34:01.823Z","type":"message"}
{"nick":"creationix","message":"which is what I do now with simple-streams.  I much prefer composing at the transform level where it's a simple function","date":"2014-04-21T23:34:56.063Z","type":"message"}
{"nick":"Raynos","message":"https://gist.github.com/Raynos/b30f65c86150dd30ae25","date":"2014-04-21T23:35:03.808Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2014-04-21T23:36:45.386Z","type":"nick"}
{"nick":"gozala","message":"creationix: well isn’t that what map filter do in my combinators examples ?","date":"2014-04-21T23:38:35.618Z","type":"message"}
{"nick":"gozala","message":"they are all functions that take source & config","date":"2014-04-21T23:38:52.904Z","type":"message"}
{"nick":"gozala","message":"and return transformed source","date":"2014-04-21T23:38:57.250Z","type":"message"}
{"nick":"gozala","message":"creationix: you could also go OOP way if you want to","date":"2014-04-21T23:39:34.246Z","type":"message"}
{"nick":"gozala","message":"creationix: you could do this","date":"2014-04-21T23:43:18.499Z","type":"message"}
{"nick":"gozala","message":"https://gist.github.com/Gozala/11160381","date":"2014-04-21T23:43:18.952Z","type":"message"}
{"nick":"creationix","message":"interesting.  Not my style, but cleaner than I expected it to be","date":"2014-04-21T23:44:26.900Z","type":"message"}
{"nick":"yorick","reason":"Remote host closed the connection","date":"2014-04-21T23:45:35.623Z","type":"quit"}
{"nick":"gozala","message":"creationix: although to be fare going through the .then will have a tick delay","date":"2014-04-21T23:45:48.841Z","type":"message"}
{"nick":"thealphanerd","date":"2014-04-21T23:46:08.305Z","type":"join"}
{"nick":"gozala","message":"creationix: but it’s really matter of adding if checks","date":"2014-04-21T23:46:19.447Z","type":"message"}
{"nick":"gozala","message":"creationix: In fact I have being talking about Promise.isPending(promise)","date":"2014-04-21T23:47:06.159Z","type":"message"}
{"nick":"gozala","message":"and promise.unbox() stuff with diff ppl","date":"2014-04-21T23:47:28.229Z","type":"message"}
{"nick":"gozala","message":"and had some positive reactions","date":"2014-04-21T23:47:54.451Z","type":"message"}
{"nick":"gozala","message":"creationix: so if that ends up happening my Operation hack won’t be even necessary","date":"2014-04-21T23:48:21.377Z","type":"message"}
{"nick":"creationix","message":"ES6 promises are basically A+ right?","date":"2014-04-21T23:49:44.789Z","type":"message"}
{"nick":"gozala","message":"creationix: I believe so","date":"2014-04-21T23:50:00.131Z","type":"message"}
{"nick":"gozala","message":"creationix: but it’s just if we think you should be able to ask stream if data is readable now","date":"2014-04-21T23:50:22.910Z","type":"message"}
{"nick":"gozala","message":"there is no reason why you should not be able to do the same with promise","date":"2014-04-21T23:50:33.010Z","type":"message"}
{"nick":"gozala","message":"the reasons why you would want to do that are same","date":"2014-04-21T23:51:35.100Z","type":"message"}
{"nick":"creationix","message":"so .then wouldn't be zalgo, but you could get same-tick data if you checked for it.","date":"2014-04-21T23:55:36.106Z","type":"message"}
{"nick":"gozala","message":"creationix: yeah","date":"2014-04-21T23:59:39.795Z","type":"message"}
{"nick":"gozala","message":"so then would always defer to next tick","date":"2014-04-21T23:59:53.425Z","type":"message"}
