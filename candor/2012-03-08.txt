{"nick":"phuu","date":"2012-03-08T00:19:42.175Z","type":"join"}
{"nick":"mmalecki","new_nick":"mmalecki[zzz]","date":"2012-03-08T00:26:22.166Z","type":"nick"}
{"nick":"phuu","reason":"Quit: phuu","date":"2012-03-08T00:41:08.596Z","type":"quit"}
{"nick":"alejandromg","date":"2012-03-08T01:42:02.423Z","type":"join"}
{"nick":"bradleymeck","date":"2012-03-08T03:36:31.739Z","type":"join"}
{"nick":"bradleymeck","reason":"Ping timeout: 276 seconds","date":"2012-03-08T04:22:51.719Z","type":"quit"}
{"nick":"bradleymeck","date":"2012-03-08T04:39:07.779Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: Leaving","date":"2012-03-08T04:54:30.016Z","type":"quit"}
{"nick":"alejandromg","reason":"Quit: leaving","date":"2012-03-08T05:35:37.038Z","type":"quit"}
{"nick":"indutny_sleeping","message":"creationix: heya","date":"2012-03-08T05:56:12.834Z","type":"message"}
{"nick":"indutny_sleeping","message":"creationix: https://github.com/indutny/candor/blob/master/test/test-api.cc","date":"2012-03-08T05:56:14.277Z","type":"message"}
{"nick":"indutny_sleeping","message":"it works now :)","date":"2012-03-08T05:56:16.864Z","type":"message"}
{"nick":"indutny_sleeping","message":"next step - objects api","date":"2012-03-08T05:56:24.905Z","type":"message"}
{"nick":"creationix","message":"wohoo","date":"2012-03-08T05:56:29.033Z","type":"message"}
{"nick":"creationix","message":"wait, that's a native function","date":"2012-03-08T05:57:40.122Z","type":"message"}
{"nick":"indutny_sleeping","message":"yes :D","date":"2012-03-08T05:57:43.363Z","type":"message"}
{"nick":"piscisaureus__","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2012-03-08T05:57:45.333Z","type":"quit"}
{"nick":"indutny_sleeping","message":"you can reenter candor from C++","date":"2012-03-08T05:57:52.543Z","type":"message"}
{"nick":"creationix","message":"nice","date":"2012-03-08T05:57:53.012Z","type":"message"}
{"nick":"indutny_sleeping","message":"it's a little bit verbose now (especially stuff with a Handle)","date":"2012-03-08T05:58:10.463Z","type":"message"}
{"nick":"indutny_sleeping","message":"I'll figure out how to simplify API later","date":"2012-03-08T05:58:23.023Z","type":"message"}
{"nick":"creationix","message":"what's \"Arguments& argv\" mean","date":"2012-03-08T05:58:28.975Z","type":"message"}
{"nick":"creationix","message":"my C++ is pretty weak","date":"2012-03-08T05:58:33.048Z","type":"message"}
{"nick":"piscisaureus_","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2012-03-08T05:58:51.056Z","type":"quit"}
{"nick":"indutny_sleeping","message":"creationix: that means that argv was passed as pointer, but should be used dereferenced","date":"2012-03-08T05:58:59.603Z","type":"message"}
{"nick":"creationix","message":"does C have that?","date":"2012-03-08T05:59:08.128Z","type":"message"}
{"nick":"creationix","message":"or just C++?","date":"2012-03-08T05:59:13.489Z","type":"message"}
{"nick":"indutny_sleeping","message":"i.e. instead of (*argv)[0] you can do argv[0]","date":"2012-03-08T05:59:20.301Z","type":"message"}
{"nick":"creationix","message":"PHP has that strangly","date":"2012-03-08T05:59:26.496Z","type":"message"}
{"nick":"indutny_sleeping","message":"C have it, but C have no classes","date":"2012-03-08T05:59:27.931Z","type":"message"}
{"nick":"indutny_sleeping","message":"well, at least C API is still possible","date":"2012-03-08T05:59:45.539Z","type":"message"}
{"nick":"creationix","message":"totally","date":"2012-03-08T05:59:59.353Z","type":"message"}
{"nick":"creationix","message":"why is the \"__$gc()\" in there","date":"2012-03-08T06:01:04.813Z","type":"message"}
{"nick":"creationix","message":"just testing the gc?","date":"2012-03-08T06:01:12.816Z","type":"message"}
{"nick":"indutny_sleeping","message":"yes","date":"2012-03-08T06:02:38.377Z","type":"message"}
{"nick":"indutny_sleeping","message":"stack is wierd when C++ called candor that called C++ that called candor","date":"2012-03-08T06:02:58.235Z","type":"message"}
{"nick":"indutny_sleeping","message":":","date":"2012-03-08T06:02:59.256Z","type":"message"}
{"nick":"indutny_sleeping","message":":D","date":"2012-03-08T06:03:00.488Z","type":"message"}
{"nick":"indutny_sleeping","message":"though, that's just sanity test","date":"2012-03-08T06:03:13.683Z","type":"message"}
{"nick":"indutny_sleeping","message":"at least it isn't crashing","date":"2012-03-08T06:03:19.054Z","type":"message"}
{"nick":"indutny_sleeping","new_nick":"indutny","date":"2012-03-08T06:05:26.585Z","type":"nick"}
{"nick":"indutny","message":"creationix: ok, objects are working","date":"2012-03-08T06:10:41.145Z","type":"message"}
{"nick":"indutny","message":"pushing update","date":"2012-03-08T06:10:42.715Z","type":"message"}
{"nick":"indutny","message":"creationix: refresh https://github.com/indutny/candor/blob/master/test/test-api.cc","date":"2012-03-08T06:11:02.826Z","type":"message"}
{"nick":"indutny","message":"creationix: please \"wrap\" in Handle all stuff that you don't want to GCed","date":"2012-03-08T06:12:18.272Z","type":"message"}
{"nick":"creationix","message":"cool, I'll test it out","date":"2012-03-08T06:16:29.007Z","type":"message"}
{"nick":"creationix","message":"just implemented enough luvmonkey to have a tcp echo server","date":"2012-03-08T06:16:42.553Z","type":"message"}
{"nick":"creationix","message":"now to see if I can get there in candor","date":"2012-03-08T06:16:48.199Z","type":"message"}
{"nick":"creationix","message":"or maybe just the timer example","date":"2012-03-08T06:16:54.374Z","type":"message"}
{"nick":"creationix","message":"it's easier","date":"2012-03-08T06:16:55.687Z","type":"message"}
{"nick":"indutny","message":"heh","date":"2012-03-08T06:17:19.358Z","type":"message"}
{"nick":"creationix","message":"https://github.com/creationix/luvmonkey/blob/master/test-tcp.js","date":"2012-03-08T06:17:20.942Z","type":"message"}
{"nick":"creationix","message":"not sure what API I'll use","date":"2012-03-08T06:17:26.062Z","type":"message"}
{"nick":"creationix","message":"maybe just expose the uv api","date":"2012-03-08T06:17:30.826Z","type":"message"}
{"nick":"creationix","message":"it's C","date":"2012-03-08T06:17:32.421Z","type":"message"}
{"nick":"creationix","message":"candor is C-like","date":"2012-03-08T06:17:35.310Z","type":"message"}
{"nick":"indutny","message":"heh","date":"2012-03-08T06:18:11.407Z","type":"message"}
{"nick":"indutny","message":"API should be much faster than v8's one","date":"2012-03-08T06:18:54.425Z","type":"message"}
{"nick":"indutny","message":"less stuff is happening here","date":"2012-03-08T06:19:08.165Z","type":"message"}
{"nick":"creationix","message":"and if you think your API is verbose, try SpiderMonkey","date":"2012-03-08T06:19:17.104Z","type":"message"}
{"nick":"creationix","message":"https://github.com/creationix/luvmonkey/blob/master/src/luv_stream.c","date":"2012-03-08T06:19:17.847Z","type":"message"}
{"nick":"creationix","message":"and that's with select macros to ease the pain","date":"2012-03-08T06:19:38.454Z","type":"message"}
{"nick":"indutny","message":"omg","date":"2012-03-08T06:19:53.442Z","type":"message"}
{"nick":"indutny","message":"ok, I take my words back then :D","date":"2012-03-08T06:20:09.113Z","type":"message"}
{"nick":"creationix","message":"ok, time to go down the candor.io rabbit hole","date":"2012-03-08T06:21:49.341Z","type":"message"}
{"nick":"creationix","message":"we'll see how far I get before conling out","date":"2012-03-08T06:21:56.348Z","type":"message"}
{"nick":"indutny","message":"ok :)","date":"2012-03-08T06:22:14.390Z","type":"message"}
{"nick":"creationix","message":"I think there is something off in your makefile","date":"2012-03-08T06:22:51.148Z","type":"message"}
{"nick":"creationix","message":"I forgot to do  a \"make clean\" before rebuilding","date":"2012-03-08T06:23:03.232Z","type":"message"}
{"nick":"indutny","message":"aah","date":"2012-03-08T06:23:07.549Z","type":"message"}
{"nick":"creationix","message":"and \"make test\" segfaulted\"","date":"2012-03-08T06:23:11.317Z","type":"message"}
{"nick":"indutny","message":"make -B ARCH=x64","date":"2012-03-08T06:23:11.607Z","type":"message"}
{"nick":"indutny","message":"I'll move to gyp soon","date":"2012-03-08T06:23:18.268Z","type":"message"}
{"nick":"indutny","message":"so for now, please do -B","date":"2012-03-08T06:23:28.319Z","type":"message"}
{"nick":"indutny","message":"it'll rebuild everything from scratch","date":"2012-03-08T06:23:33.118Z","type":"message"}
{"nick":"indutny","message":"\"I'm developing the Candor language\" <- is that correct","date":"2012-03-08T06:23:50.559Z","type":"message"}
{"nick":"indutny","message":"?","date":"2012-03-08T06:23:51.528Z","type":"message"}
{"nick":"indutny","message":"I mean grammar","date":"2012-03-08T06:23:55.977Z","type":"message"}
{"nick":"creationix","message":"it's a noun","date":"2012-03-08T06:24:12.246Z","type":"message"}
{"nick":"creationix","message":"replace it with \"ruby\"","date":"2012-03-08T06:24:16.519Z","type":"message"}
{"nick":"creationix","message":"does it sound right","date":"2012-03-08T06:24:20.829Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T06:24:24.767Z","type":"message"}
{"nick":"indutny","message":"no \"the/a/an\" in Russian, so it's always a problem to me","date":"2012-03-08T06:24:48.927Z","type":"message"}
{"nick":"indutny","message":"going to attract some people by creating a card on geekli.st","date":"2012-03-08T06:25:04.518Z","type":"message"}
{"nick":"indutny","message":"ok, I'll remove `the`","date":"2012-03-08T06:25:20.725Z","type":"message"}
{"nick":"creationix","message":"you english seems pretty good to me","date":"2012-03-08T06:25:23.852Z","type":"message"}
{"nick":"indutny","message":"thank you","date":"2012-03-08T06:25:33.725Z","type":"message"}
{"nick":"creationix","message":"luvit has a very active russian contributor","date":"2012-03-08T06:25:45.046Z","type":"message"}
{"nick":"creationix","message":"and sometimes I can't make sense of his bug reports","date":"2012-03-08T06:25:51.789Z","type":"message"}
{"nick":"creationix","message":"of course, I'm sure his english is better than my russian","date":"2012-03-08T06:26:18.770Z","type":"message"}
{"nick":"creationix","message":"though to be fair, I am fluent in spanish","date":"2012-03-08T06:26:38.646Z","type":"message"}
{"nick":"creationix","message":"(or used to be atleast)","date":"2012-03-08T06:26:46.518Z","type":"message"}
{"nick":"indutny","message":":)","date":"2012-03-08T06:27:19.846Z","type":"message"}
{"nick":"indutny","message":"http://geekli.st/indutny/im-developing-candor-language","date":"2012-03-08T06:27:23.616Z","type":"message"}
{"nick":"creationix","message":"hmm deps/candor/include/candor.h:4:27: fatal error: utils.h: No such file or directory","date":"2012-03-08T06:27:41.310Z","type":"message"}
{"nick":"indutny","message":"ooops","date":"2012-03-08T06:27:58.215Z","type":"message"}
{"nick":"indutny","message":"not good","date":"2012-03-08T06:28:03.705Z","type":"message"}
{"nick":"indutny","message":"fixed","date":"2012-03-08T06:30:07.932Z","type":"message"}
{"nick":"creationix","message":"alright, got compile errors, but I think it's just an api you changed","date":"2012-03-08T06:31:19.631Z","type":"message"}
{"nick":"creationix","message":"the include seems good now","date":"2012-03-08T06:31:22.703Z","type":"message"}
{"nick":"indutny","message":"cool!","date":"2012-03-08T06:31:30.378Z","type":"message"}
{"nick":"creationix","message":"I see Function::New doesn't need the Isolate* anymore","date":"2012-03-08T06:33:21.449Z","type":"message"}
{"nick":"creationix","message":"hmm, still have a parser bug","date":"2012-03-08T06:34:24.766Z","type":"message"}
{"nick":"indutny","message":"creationix: nothing needs it now","date":"2012-03-08T06:34:25.323Z","type":"message"}
{"nick":"creationix","message":"but it's getting better","date":"2012-03-08T06:34:36.577Z","type":"message"}
{"nick":"indutny","message":"creationix: huh, can you post source?","date":"2012-03-08T06:34:38.593Z","type":"message"}
{"nick":"creationix","message":"\"return nil\\n// nill is default\\n\"","date":"2012-03-08T06:34:54.309Z","type":"message"}
{"nick":"indutny","message":"hm...","date":"2012-03-08T06:35:10.983Z","type":"message"}
{"nick":"indutny","message":"ok, let me check","date":"2012-03-08T06:35:14.022Z","type":"message"}
{"nick":"creationix","message":"note the trailing newline","date":"2012-03-08T06:35:15.436Z","type":"message"}
{"nick":"indutny","message":"yeaah, I see","date":"2012-03-08T06:36:00.362Z","type":"message"}
{"nick":"indutny","message":"fixed","date":"2012-03-08T06:37:57.520Z","type":"message"}
{"nick":"creationix","message":"perfect","date":"2012-03-08T06:40:24.121Z","type":"message"}
{"nick":"creationix","message":"now to implement print()","date":"2012-03-08T06:40:28.290Z","type":"message"}
{"nick":"creationix","message":"basic I/O ftw","date":"2012-03-08T06:40:34.921Z","type":"message"}
{"nick":"creationix","message":"and I can write a colored data dumper in candor","date":"2012-03-08T06:40:50.765Z","type":"message"}
{"nick":"creationix","message":"maked debugging much easier","date":"2012-03-08T06:40:54.922Z","type":"message"}
{"nick":"creationix","message":"*makes","date":"2012-03-08T06:40:57.467Z","type":"message"}
{"nick":"indutny","message":"haha","date":"2012-03-08T06:41:40.455Z","type":"message"}
{"nick":"indutny","message":"is there anything that blocks you now?","date":"2012-03-08T06:43:17.733Z","type":"message"}
{"nick":"creationix","message":"not that I know","date":"2012-03-08T06:44:07.901Z","type":"message"}
{"nick":"hij1nx","date":"2012-03-08T06:44:17.791Z","type":"join"}
{"nick":"creationix","message":"so on returns","date":"2012-03-08T06:44:43.835Z","type":"message"}
{"nick":"creationix","message":"use HandleScope for Functions and Objects","date":"2012-03-08T06:44:53.267Z","type":"message"}
{"nick":"creationix","message":"and always return something","date":"2012-03-08T06:44:57.698Z","type":"message"}
{"nick":"creationix","message":"even a Nil instance","date":"2012-03-08T06:45:02.201Z","type":"message"}
{"nick":"creationix","message":"?","date":"2012-03-08T06:45:02.995Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T06:46:43.538Z","type":"message"}
{"nick":"creationix","message":"when should I use Handle?","date":"2012-03-08T06:46:55.570Z","type":"message"}
{"nick":"indutny","message":"for every value that should not be GCed in that scope","date":"2012-03-08T06:47:10.098Z","type":"message"}
{"nick":"creationix","message":"ok, so most values then","date":"2012-03-08T06:47:24.468Z","type":"message"}
{"nick":"indutny","message":"but if you ain't calling any candor function - you can just omit it","date":"2012-03-08T06:47:28.708Z","type":"message"}
{"nick":"indutny","message":"GC may happen only in candor-land","date":"2012-03-08T06:47:37.527Z","type":"message"}
{"nick":"indutny","message":"so no need to worry about it in C++ if you're not going to reenter candor from this function","date":"2012-03-08T06:47:52.164Z","type":"message"}
{"nick":"creationix","message":"so to create a global context, I would do:","date":"2012-03-08T06:48:11.195Z","type":"message"}
{"nick":"creationix","message":"Handle<Object> global(Object::New());","date":"2012-03-08T06:48:11.806Z","type":"message"}
{"nick":"creationix","message":"?","date":"2012-03-08T06:48:12.705Z","type":"message"}
{"nick":"creationix","message":"and then use that when doing script->Call()","date":"2012-03-08T06:48:37.643Z","type":"message"}
{"nick":"creationix","message":"(where `script` is the compiled file)","date":"2012-03-08T06:48:50.549Z","type":"message"}
{"nick":"creationix","message":"hmm, is the context of a function considered in the GC tree, or does it need to be a handle","date":"2012-03-08T06:49:39.747Z","type":"message"}
{"nick":"creationix","message":"and properties I put on that object don't need to be Handle's themselves assuming the main object is safe?","date":"2012-03-08T06:50:22.381Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T06:52:33.604Z","type":"message"}
{"nick":"indutny","message":"better it to be handle","date":"2012-03-08T06:52:58.000Z","type":"message"}
{"nick":"indutny","message":"if object is safe - properties are safe too","date":"2012-03-08T06:53:12.662Z","type":"message"}
{"nick":"indutny","message":"script->Call(*global, ...) for your case","date":"2012-03-08T06:53:25.520Z","type":"message"}
{"nick":"creationix","message":"right, just figured that out","date":"2012-03-08T06:54:19.537Z","type":"message"}
{"nick":"creationix","message":"one sugar that would be real nice is overload ->Get and ->Set to use const char* for keys","date":"2012-03-08T06:54:40.051Z","type":"message"}
{"nick":"creationix","message":"in C++ code they are usually strings","date":"2012-03-08T06:54:52.771Z","type":"message"}
{"nick":"creationix","message":"s/use/accept/","date":"2012-03-08T06:55:13.200Z","type":"message"}
{"nick":"indutny","message":"yes, I know","date":"2012-03-08T06:55:42.016Z","type":"message"}
{"nick":"indutny","message":"it's just easier to do it this way now","date":"2012-03-08T06:55:51.476Z","type":"message"}
{"nick":"creationix","message":"no problem","date":"2012-03-08T06:56:03.609Z","type":"message"}
{"nick":"creationix","message":"do keys need to be handles?","date":"2012-03-08T06:56:09.537Z","type":"message"}
{"nick":"creationix","message":"or can I just use a String*","date":"2012-03-08T06:56:19.312Z","type":"message"}
{"nick":"creationix","message":"assuming global is safe (it's a handle)","date":"2012-03-08T06:57:15.358Z","type":"message"}
{"nick":"creationix","message":"can I do","date":"2012-03-08T06:57:17.343Z","type":"message"}
{"nick":"creationix","message":"global->Set(String::New(\"print\", 5), Function::New(Print));","date":"2012-03-08T06:57:17.841Z","type":"message"}
{"nick":"indutny","message":"hm...","date":"2012-03-08T06:59:45.142Z","type":"message"}
{"nick":"indutny","message":"yes, you can","date":"2012-03-08T06:59:50.551Z","type":"message"}
{"nick":"creationix","message":"hmm, something isn't working","date":"2012-03-08T07:01:26.080Z","type":"message"}
{"nick":"creationix","message":"when I call my native function from candor, the script just returns with nil","date":"2012-03-08T07:01:38.631Z","type":"message"}
{"nick":"creationix","message":"the C function is never called","date":"2012-03-08T07:01:46.140Z","type":"message"}
{"nick":"indutny","message":"have you added scope?","date":"2012-03-08T07:02:03.528Z","type":"message"}
{"nick":"indutny","message":"`scope print`","date":"2012-03-08T07:02:07.597Z","type":"message"}
{"nick":"indutny","message":"haven't tested global replacement, to be honest :(","date":"2012-03-08T07:02:28.441Z","type":"message"}
{"nick":"creationix","message":"when I call my native function from candor, the script just returns with nil","date":"2012-03-08T07:04:08.039Z","type":"message"}
{"nick":"creationix","message":"ahh, sorry","date":"2012-03-08T07:04:12.117Z","type":"message"}
{"nick":"indutny","message":"no runtime errors :D","date":"2012-03-08T07:04:22.566Z","type":"message"}
{"nick":"indutny","message":"so if you do `a()` and a is not function, just nill will be returned","date":"2012-03-08T07:04:39.966Z","type":"message"}
{"nick":"creationix","message":"I see","date":"2012-03-08T07:04:54.137Z","type":"message"}
{"nick":"creationix","message":"yeah, print is nil","date":"2012-03-08T07:04:56.680Z","type":"message"}
{"nick":"creationix","message":"even with \"scope print\\nreturn print\"","date":"2012-03-08T07:05:07.372Z","type":"message"}
{"nick":"indutny","message":"hm...","date":"2012-03-08T07:05:11.573Z","type":"message"}
{"nick":"indutny","message":"one second, I'll test it","date":"2012-03-08T07:05:24.182Z","type":"message"}
{"nick":"creationix","message":"hmm, ->Set only accepts strings","date":"2012-03-08T07:09:14.208Z","type":"message"}
{"nick":"creationix","message":"as the key","date":"2012-03-08T07:09:18.977Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T07:10:40.596Z","type":"message"}
{"nick":"indutny","message":"for now","date":"2012-03-08T07:10:42.254Z","type":"message"}
{"nick":"creationix","message":"itoa it is","date":"2012-03-08T07:10:46.678Z","type":"message"}
{"nick":"creationix","message":"I'm adding args to the environment","date":"2012-03-08T07:10:56.007Z","type":"message"}
{"nick":"indutny","message":"ah, i see what happened","date":"2012-03-08T07:10:59.332Z","type":"message"}
{"nick":"indutny","message":"root register is borked","date":"2012-03-08T07:11:14.856Z","type":"message"}
{"nick":"indutny","message":"or even worse","date":"2012-03-08T07:12:27.725Z","type":"message"}
{"nick":"indutny","message":"one second","date":"2012-03-08T07:15:12.751Z","type":"message"}
{"nick":"indutny","message":"ok, fixed it","date":"2012-03-08T07:15:50.479Z","type":"message"}
{"nick":"indutny","message":"rolling out update","date":"2012-03-08T07:16:10.089Z","type":"message"}
{"nick":"indutny","message":"creationix: fixed https://github.com/indutny/candor/commit/52602215d2a76635f3d0f762848da5cebcfa3c9b","date":"2012-03-08T07:17:03.880Z","type":"message"}
{"nick":"creationix","message":"why is it wrapped in return () {}","date":"2012-03-08T07:19:57.271Z","type":"message"}
{"nick":"creationix","message":"is that required?","date":"2012-03-08T07:20:02.974Z","type":"message"}
{"nick":"indutny","message":"creationix: for testing, yes","date":"2012-03-08T07:21:19.373Z","type":"message"}
{"nick":"indutny","message":"creationix: code is running in some sort of \"emulated\" function","date":"2012-03-08T07:21:55.998Z","type":"message"}
{"nick":"indutny","message":"and FUN_TEST is running code in default global context (empty)","date":"2012-03-08T07:22:13.163Z","type":"message"}
{"nick":"creationix","message":"ok, it's working now","date":"2012-03-08T07:23:09.103Z","type":"message"}
{"nick":"creationix","message":"I just had trouble pulling the latest code","date":"2012-03-08T07:23:15.277Z","type":"message"}
{"nick":"creationix","message":"my makefile was reverting the submodule or something","date":"2012-03-08T07:23:21.637Z","type":"message"}
{"nick":"creationix","message":"ok, I now have a print function","date":"2012-03-08T07:23:33.278Z","type":"message"}
{"nick":"creationix","message":"hello world in candor.io!","date":"2012-03-08T07:23:37.876Z","type":"message"}
{"nick":"indutny","message":"cool! :)","date":"2012-03-08T07:23:39.920Z","type":"message"}
{"nick":"indutny","message":"can I build it?","date":"2012-03-08T07:23:44.910Z","type":"message"}
{"nick":"creationix","message":"ok, just pushed","date":"2012-03-08T07:24:33.158Z","type":"message"}
{"nick":"creationix","message":"so scope is always required","date":"2012-03-08T07:24:57.092Z","type":"message"}
{"nick":"creationix","message":"even for context globals","date":"2012-03-08T07:25:01.488Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T07:25:10.509Z","type":"message"}
{"nick":"creationix","message":"well, that makes linting easier","date":"2012-03-08T07:25:16.888Z","type":"message"}
{"nick":"creationix","message":"now I need type coercion","date":"2012-03-08T07:26:30.780Z","type":"message"}
{"nick":"indutny","message":"it is here","date":"2012-03-08T07:26:40.560Z","type":"message"}
{"nick":"creationix","message":"print(1) dies because print() expects a string","date":"2012-03-08T07:26:42.482Z","type":"message"}
{"nick":"indutny","message":"ah in C++ land","date":"2012-03-08T07:26:53.199Z","type":"message"}
{"nick":"creationix","message":"canio: src/api.cc:113: T* candor::Value::As() [with T = candor::String]: Assertion `Is<T>()' failed.","date":"2012-03-08T07:27:00.658Z","type":"message"}
{"nick":"indutny","message":"/usr/bin/ranlib: file: uv.a(ares_strdup.o) has no symbols","date":"2012-03-08T07:27:57.422Z","type":"message"}
{"nick":"indutny","message":"/usr/bin/ranlib: file: uv.a(ares_writev.o) has no symbols","date":"2012-03-08T07:27:57.620Z","type":"message"}
{"nick":"indutny","message":"/usr/bin/ranlib: file: uv.a(inet_ntop.o) has no symbols","date":"2012-03-08T07:27:58.218Z","type":"message"}
{"nick":"indutny","message":"crap","date":"2012-03-08T07:27:59.608Z","type":"message"}
{"nick":"indutny","message":"can't build candor.io","date":"2012-03-08T07:28:03.887Z","type":"message"}
{"nick":"indutny","message":"is make ARCH=x64 correct way to do it?","date":"2012-03-08T07:28:10.281Z","type":"message"}
{"nick":"indutny","message":"aah, that's oc","date":"2012-03-08T07:28:52.193Z","type":"message"}
{"nick":"indutny","message":"s/oc/ok","date":"2012-03-08T07:28:53.962Z","type":"message"}
{"nick":"creationix","message":"I just leave ARCH out","date":"2012-03-08T07:29:00.716Z","type":"message"}
{"nick":"creationix","message":"my machine is x86_64 nativly","date":"2012-03-08T07:29:10.880Z","type":"message"}
{"nick":"indutny","message":"ok, so you have few errors","date":"2012-03-08T07:29:56.842Z","type":"message"}
{"nick":"indutny","message":"like %lld","date":"2012-03-08T07:29:59.011Z","type":"message"}
{"nick":"indutny","message":"and char < 0x80","date":"2012-03-08T07:30:05.701Z","type":"message"}
{"nick":"indutny","message":"char type is signed","date":"2012-03-08T07:30:10.270Z","type":"message"}
{"nick":"creationix","message":"I see","date":"2012-03-08T07:30:46.376Z","type":"message"}
{"nick":"indutny","message":"what is -lrt?","date":"2012-03-08T07:32:08.560Z","type":"message"}
{"nick":"indutny","message":"I think OSX doesn't have posix runtime extensions","date":"2012-03-08T07:32:35.709Z","type":"message"}
{"nick":"indutny","message":"hahahha","date":"2012-03-08T07:33:04.488Z","type":"message"}
{"nick":"indutny","message":"it works!","date":"2012-03-08T07:33:06.128Z","type":"message"}
{"nick":"indutny","message":"omg","date":"2012-03-08T07:33:06.788Z","type":"message"}
{"nick":"indutny","message":"can't beleive it","date":"2012-03-08T07:33:10.438Z","type":"message"}
{"nick":"indutny","message":"well, almost works :D","date":"2012-03-08T07:33:36.668Z","type":"message"}
{"nick":"creationix","message":":)","date":"2012-03-08T07:33:46.539Z","type":"message"}
{"nick":"creationix","message":"so you're on a mac?","date":"2012-03-08T07:33:51.237Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T07:34:23.417Z","type":"message"}
{"nick":"creationix","message":"it looks like sizeof, typeof, and keysof aren't implemented yet","date":"2012-03-08T07:34:45.151Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T07:34:53.467Z","type":"message"}
{"nick":"creationix","message":"also we need a C++ API for getting the keys of an object","date":"2012-03-08T07:34:55.935Z","type":"message"}
{"nick":"creationix","message":"that should be easy I imagine","date":"2012-03-08T07:35:01.858Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T07:35:17.587Z","type":"message"}
{"nick":"indutny","message":"also it crashes in JIT code","date":"2012-03-08T07:35:24.355Z","type":"message"}
{"nick":"indutny","message":"not good :D","date":"2012-03-08T07:35:25.775Z","type":"message"}
{"nick":"creationix","message":"yeah, jit is hard","date":"2012-03-08T07:35:34.708Z","type":"message"}
{"nick":"indutny","message":"ok, I think I fixed it","date":"2012-03-08T07:36:24.266Z","type":"message"}
{"nick":"indutny","message":"creationix: can you update to upstream?","date":"2012-03-08T07:37:16.654Z","type":"message"}
{"nick":"indutny","message":"ah, nvm","date":"2012-03-08T07:37:22.497Z","type":"message"}
{"nick":"indutny","message":"I can do it locally","date":"2012-03-08T07:37:26.043Z","type":"message"}
{"nick":"creationix","message":"right","date":"2012-03-08T07:37:49.637Z","type":"message"}
{"nick":"creationix","message":"just watch out, it's tricky","date":"2012-03-08T07:37:57.382Z","type":"message"}
{"nick":"creationix","message":"\"git checkout master\" in the submodule before pulling","date":"2012-03-08T07:38:10.555Z","type":"message"}
{"nick":"indutny","message":"I'm not pulling","date":"2012-03-08T07:38:20.612Z","type":"message"}
{"nick":"indutny","message":"git fetch","date":"2012-03-08T07:38:22.332Z","type":"message"}
{"nick":"indutny","message":"git ff origin/master","date":"2012-03-08T07:38:27.592Z","type":"message"}
{"nick":"creationix","message":"and \"git add deps\" from the root","date":"2012-03-08T07:38:32.755Z","type":"message"}
{"nick":"indutny","message":"ok, I haven't fixed it","date":"2012-03-08T07:38:35.342Z","type":"message"}
{"nick":"creationix","message":"sometimes the makefile reverts my checkout to an older tag","date":"2012-03-08T07:38:56.111Z","type":"message"}
{"nick":"indutny","message":"aah","date":"2012-03-08T07:39:16.081Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T07:39:30.334Z","type":"message"}
{"nick":"indutny","message":"ok, no segfaults now","date":"2012-03-08T07:40:40.538Z","type":"message"}
{"nick":"indutny","message":"only assertion fail","date":"2012-03-08T07:40:45.748Z","type":"message"}
{"nick":"indutny","message":"time for type coercing","date":"2012-03-08T07:41:30.168Z","type":"message"}
{"nick":"creationix","message":"I can segfault it","date":"2012-03-08T07:42:49.987Z","type":"message"}
{"nick":"creationix","message":"\"scope print\\nprint(\"\" + 1)\"","date":"2012-03-08T07:42:51.114Z","type":"message"}
{"nick":"creationix","message":"but if I do 'scope print\\na = \"\" + 1\\nprint(a)' it's fine","date":"2012-03-08T07:43:19.346Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T07:43:49.834Z","type":"message"}
{"nick":"indutny","message":"ok, added ToString","date":"2012-03-08T07:43:53.683Z","type":"message"}
{"nick":"indutny","message":"will fix that segfault later","date":"2012-03-08T07:43:59.363Z","type":"message"}
{"nick":"indutny","message":"gtg","date":"2012-03-08T07:43:59.993Z","type":"message"}
{"nick":"creationix","message":"thanks","date":"2012-03-08T07:44:13.439Z","type":"message"}
{"nick":"creationix","message":"we'll see how far I get","date":"2012-03-08T07:44:16.802Z","type":"message"}
{"nick":"creationix","message":"also it's almost 2am here","date":"2012-03-08T07:44:24.889Z","type":"message"}
{"nick":"creationix","message":"I should sleep soon","date":"2012-03-08T07:44:30.194Z","type":"message"}
{"nick":"indutny","message":"creationix: sleep ight man","date":"2012-03-08T08:53:21.855Z","type":"message"}
{"nick":"indutny","message":"s/ight/tight","date":"2012-03-08T08:53:25.005Z","type":"message"}
{"nick":"hij1nx","reason":"Quit: hij1nx","date":"2012-03-08T08:57:07.248Z","type":"quit"}
{"nick":"phuu","date":"2012-03-08T09:02:07.783Z","type":"join"}
{"nick":"indutny","message":"creationix: fixed that segfault","date":"2012-03-08T09:08:59.680Z","type":"message"}
{"nick":"indutny","new_nick":"indutny_away","date":"2012-03-08T09:09:44.157Z","type":"nick"}
{"nick":"phuu","message":"hey - if I want to get involved in this project, what's the best way to get started?","date":"2012-03-08T09:12:49.071Z","type":"message"}
{"nick":"indutny_away","message":"phuu: take a look at TODO","date":"2012-03-08T09:13:06.040Z","type":"message"}
{"nick":"indutny_away","message":"phuu: you can try making functions - objects, it's very important and should be simple enough to get started with","date":"2012-03-08T09:13:38.951Z","type":"message"}
{"nick":"indutny_away","message":"phuu: but I gtg now","date":"2012-03-08T09:13:43.140Z","type":"message"}
{"nick":"indutny_away","message":"sorry","date":"2012-03-08T09:13:47.249Z","type":"message"}
{"nick":"phuu","message":"np, thanks","date":"2012-03-08T09:13:59.228Z","type":"message"}
{"nick":"phuu","reason":"Read error: Connection reset by peer","date":"2012-03-08T09:52:16.887Z","type":"quit"}
{"nick":"indutny_away","message":"back","date":"2012-03-08T11:25:16.331Z","type":"message"}
{"nick":"indutny_away","new_nick":"indutny","date":"2012-03-08T11:25:18.666Z","type":"nick"}
{"nick":"mmalecki[zzz]","new_nick":"mmalecki","date":"2012-03-08T12:57:02.063Z","type":"nick"}
{"nick":"piscisaureus_","date":"2012-03-08T13:16:41.403Z","type":"join"}
{"nick":"hij1nx","date":"2012-03-08T14:50:03.068Z","type":"join"}
{"nick":"hij1nx","reason":"Client Quit","date":"2012-03-08T14:51:17.457Z","type":"quit"}
{"nick":"hij1nx","date":"2012-03-08T14:51:41.121Z","type":"join"}
{"nick":"indutny","message":"whoa","date":"2012-03-08T15:21:51.260Z","type":"message"}
{"nick":"indutny","message":"anyone around?","date":"2012-03-08T15:21:54.030Z","type":"message"}
{"nick":"indutny","message":"gc is using two spaces now","date":"2012-03-08T15:22:26.161Z","type":"message"}
{"nick":"indutny","message":"should be much faster than it was","date":"2012-03-08T15:22:30.763Z","type":"message"}
{"nick":"creationix","message":"morning","date":"2012-03-08T15:48:35.559Z","type":"message"}
{"nick":"indutny","message":"morning","date":"2012-03-08T16:06:09.408Z","type":"message"}
{"nick":"creationix","message":"is there a way to wrap objects","date":"2012-03-08T16:06:51.863Z","type":"message"}
{"nick":"creationix","message":"or do we not need that","date":"2012-03-08T16:06:58.609Z","type":"message"}
{"nick":"creationix","message":"by objects I mean c structs","date":"2012-03-08T16:07:05.765Z","type":"message"}
{"nick":"creationix","message":"and C++ class instances","date":"2012-03-08T16:07:10.867Z","type":"message"}
{"nick":"indutny","message":"no","date":"2012-03-08T16:07:37.049Z","type":"message"}
{"nick":"indutny","message":"probably we need this","date":"2012-03-08T16:07:47.730Z","type":"message"}
{"nick":"creationix","message":"also, when you get a change, a C++ API for getting the keys of an object would be great","date":"2012-03-08T16:07:52.743Z","type":"message"}
{"nick":"creationix","message":"I'm trying to implement libuv timers","date":"2012-03-08T16:08:02.902Z","type":"message"}
{"nick":"indutny","message":"cool!","date":"2012-03-08T16:08:10.179Z","type":"message"}
{"nick":"indutny","message":"I'm in the middle of refactoring","date":"2012-03-08T16:08:26.359Z","type":"message"}
{"nick":"indutny","message":"moving stubs out of fullgen into code-space.cc","date":"2012-03-08T16:08:34.431Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2012-03-08T16:09:39.575Z","type":"message"}
{"nick":"indutny","message":"then I'll switch on keys and wrapping","date":"2012-03-08T16:09:41.228Z","type":"message"}
{"nick":"indutny","message":"I think I'll add new heap type","date":"2012-03-08T16:10:23.715Z","type":"message"}
{"nick":"indutny","message":"for wrapped objects","date":"2012-03-08T16:10:26.686Z","type":"message"}
{"nick":"indutny","message":"Like cptr","date":"2012-03-08T16:10:31.591Z","type":"message"}
{"nick":"creationix","message":"in lua they are called cdata","date":"2012-03-08T16:10:34.182Z","type":"message"}
{"nick":"indutny","message":"oh, great","date":"2012-03-08T16:10:38.507Z","type":"message"}
{"nick":"creationix","message":"I think sm calls them the same thing","date":"2012-03-08T16:10:41.981Z","type":"message"}
{"nick":"creationix","message":"not sure","date":"2012-03-08T16:10:42.775Z","type":"message"}
{"nick":"indutny","message":"not sure how that will be removed on GC","date":"2012-03-08T16:10:55.346Z","type":"message"}
{"nick":"indutny","message":"ah, I know","date":"2012-03-08T16:11:19.165Z","type":"message"}
{"nick":"indutny","message":"they may be embedded into heap values","date":"2012-03-08T16:11:27.618Z","type":"message"}
{"nick":"indutny","message":"whole structure","date":"2012-03-08T16:11:31.255Z","type":"message"}
{"nick":"indutny","message":"btw, there're simple hack to get your thing work :)","date":"2012-03-08T16:11:46.140Z","type":"message"}
{"nick":"creationix","message":"what's that?","date":"2012-03-08T16:11:53.061Z","type":"message"}
{"nick":"indutny","message":"create a string with contents of object","date":"2012-03-08T16:11:55.275Z","type":"message"}
{"nick":"creationix","message":"hah, void* in a string","date":"2012-03-08T16:12:10.848Z","type":"message"}
{"nick":"indutny","message":"and just reinterpret_cast string's value","date":"2012-03-08T16:12:12.013Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T16:12:13.744Z","type":"message"}
{"nick":"indutny","message":"or in int","date":"2012-03-08T16:12:19.426Z","type":"message"}
{"nick":"creationix","message":"ugly, but yes, works for now","date":"2012-03-08T16:12:21.460Z","type":"message"}
{"nick":"indutny","message":"you can use numbers","date":"2012-03-08T16:12:23.114Z","type":"message"}
{"nick":"indutny","message":"better string","date":"2012-03-08T16:12:32.135Z","type":"message"}
{"nick":"indutny","message":"because GC will remove them","date":"2012-03-08T16:12:43.323Z","type":"message"}
{"nick":"creationix","message":"how stable is the number representation","date":"2012-03-08T16:12:45.671Z","type":"message"}
{"nick":"indutny","message":"no no, don't use numbers","date":"2012-03-08T16:12:52.143Z","type":"message"}
{"nick":"creationix","message":"ok, so no pointers, but actual values in strings","date":"2012-03-08T16:13:14.209Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T16:13:18.163Z","type":"message"}
{"nick":"indutny","message":"how much is that a hack?","date":"2012-03-08T16:13:29.840Z","type":"message"}
{"nick":"creationix","message":"ok, that works.  just dangrous","date":"2012-03-08T16:13:37.285Z","type":"message"}
{"nick":"indutny","message":"why?","date":"2012-03-08T16:13:42.352Z","type":"message"}
{"nick":"creationix","message":"since there is zero type saftey","date":"2012-03-08T16:13:45.200Z","type":"message"}
{"nick":"indutny","message":"values in heap are immutable","date":"2012-03-08T16:13:54.663Z","type":"message"}
{"nick":"indutny","message":"with exception to objects","date":"2012-03-08T16:13:58.951Z","type":"message"}
{"nick":"indutny","message":"so you can't change your string's contents","date":"2012-03-08T16:14:09.252Z","type":"message"}
{"nick":"indutny","message":"from candor","date":"2012-03-08T16:14:11.881Z","type":"message"}
{"nick":"creationix","message":"you can't","date":"2012-03-08T16:14:14.841Z","type":"message"}
{"nick":"indutny","message":"so no real danger","date":"2012-03-08T16:14:26.154Z","type":"message"}
{"nick":"indutny","message":"but that's a little bit hacky, yeah","date":"2012-03-08T16:14:37.639Z","type":"message"}
{"nick":"creationix","message":"but one string could be a uv_timer_t and another could be a uv_tcp_t","date":"2012-03-08T16:14:57.021Z","type":"message"}
{"nick":"indutny","message":"creationix: yeah","date":"2012-03-08T16:15:07.329Z","type":"message"}
{"nick":"creationix","message":"and if they pass in a uv_tcp_t when I typecast it to a uv_timer_t","date":"2012-03-08T16:15:10.081Z","type":"message"}
{"nick":"creationix","message":"then bad things happen","date":"2012-03-08T16:15:14.076Z","type":"message"}
{"nick":"indutny","message":"creationix: that's not good","date":"2012-03-08T16:15:23.086Z","type":"message"}
{"nick":"creationix","message":"maybe cdata can be just like string, except has an immutable type tag","date":"2012-03-08T16:15:56.862Z","type":"message"}
{"nick":"creationix","message":"that's a short string or number","date":"2012-03-08T16:16:04.462Z","type":"message"}
{"nick":"creationix","message":"probably number since it's only used from C++","date":"2012-03-08T16:16:14.235Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T16:16:24.316Z","type":"message"}
{"nick":"indutny","message":"that's a good news","date":"2012-03-08T16:16:28.473Z","type":"message"}
{"nick":"indutny","message":"I'll need to extend switches in few places","date":"2012-03-08T16:16:39.139Z","type":"message"}
{"nick":"indutny","message":"and implement API","date":"2012-03-08T16:16:42.928Z","type":"message"}
{"nick":"creationix","message":"the api for cdata in lua is really nice","date":"2012-03-08T16:19:35.797Z","type":"message"}
{"nick":"creationix","message":"you tell lua to allocate X bytes and give it an optional metatype","date":"2012-03-08T16:19:58.093Z","type":"message"}
{"nick":"creationix","message":"lua mallocs it for you and gives you both the value and the char*","date":"2012-03-08T16:20:19.979Z","type":"message"}
{"nick":"creationix","message":"lucikly libuv allows you to do your own malloc","date":"2012-03-08T16:20:38.876Z","type":"message"}
{"nick":"creationix","message":"not all c libs to though","date":"2012-03-08T16:20:43.295Z","type":"message"}
{"nick":"creationix","message":"so we also need a way to embed pointers","date":"2012-03-08T16:20:53.444Z","type":"message"}
{"nick":"creationix","message":"and need a gc hook so we can manually free and cleanup what the pointer is pointing to","date":"2012-03-08T16:21:08.768Z","type":"message"}
{"nick":"creationix","message":"in lua these are called light userdata","date":"2012-03-08T16:21:20.844Z","type":"message"}
{"nick":"indutny","message":"you can use C++ classes","date":"2012-03-08T16:21:25.995Z","type":"message"}
{"nick":"creationix","message":"cdata is called userdata","date":"2012-03-08T16:21:27.279Z","type":"message"}
{"nick":"indutny","message":"ah no","date":"2012-03-08T16:21:30.491Z","type":"message"}
{"nick":"creationix","message":"I'll use the string hack till you have something safer","date":"2012-03-08T16:22:12.614Z","type":"message"}
{"nick":"creationix","message":"but eventually we'll also need a way to store pointers and have gc hooks for cleanup","date":"2012-03-08T16:22:26.585Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T16:23:45.674Z","type":"message"}
{"nick":"creationix","message":"in v8 and sm you have to create a full class and implement some cleanup or gc interface on the class","date":"2012-03-08T16:23:47.380Z","type":"message"}
{"nick":"creationix","message":"that's way too much effort for many cases where I just want a callback","date":"2012-03-08T16:24:04.909Z","type":"message"}
{"nick":"indutny","message":"I think I figured out how to do that","date":"2012-03-08T16:24:05.113Z","type":"message"}
{"nick":"creationix","message":":)","date":"2012-03-08T16:24:35.275Z","type":"message"}
{"nick":"creationix","message":"quick question","date":"2012-03-08T16:25:15.786Z","type":"message"}
{"nick":"indutny","message":"I'll need to introduce Weak references","date":"2012-03-08T16:25:16.179Z","type":"message"}
{"nick":"creationix","message":"yeah, I think that's how the lua C api does it","date":"2012-03-08T16:25:36.158Z","type":"message"}
{"nick":"creationix","message":"I don't use the pointer api in lua since libuv doesn't need it","date":"2012-03-08T16:25:48.039Z","type":"message"}
{"nick":"creationix","message":"ok, so I'm creating an object in a function","date":"2012-03-08T16:26:06.892Z","type":"message"}
{"nick":"creationix","message":"do I need to use a Handle on the object and return that handle?","date":"2012-03-08T16:26:55.748Z","type":"message"}
{"nick":"creationix","message":"or is there something like ScopeClose","date":"2012-03-08T16:27:05.986Z","type":"message"}
{"nick":"indutny","message":"no","date":"2012-03-08T16:27:11.075Z","type":"message"}
{"nick":"creationix","message":"or whatever it was called i nv8","date":"2012-03-08T16:27:12.804Z","type":"message"}
{"nick":"indutny","message":"just return it :)","date":"2012-03-08T16:27:17.993Z","type":"message"}
{"nick":"indutny","message":"it should work fine","date":"2012-03-08T16:27:24.324Z","type":"message"}
{"nick":"creationix","message":":)","date":"2012-03-08T16:27:34.740Z","type":"message"}
{"nick":"creationix","message":"alright, I'll return an object with \"cdata\" and \"type\" properties","date":"2012-03-08T16:27:49.220Z","type":"message"}
{"nick":"indutny","message":"hehe","date":"2012-03-08T16:27:55.804Z","type":"message"}
{"nick":"indutny","message":"sounds like a plan","date":"2012-03-08T16:28:00.419Z","type":"message"}
{"nick":"creationix","message":"it's safe as long as people don't replace the string manually from candor","date":"2012-03-08T16:28:01.253Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T16:28:10.964Z","type":"message"}
{"nick":"creationix","message":"then replace it with safer cdata values when you have those","date":"2012-03-08T16:28:20.139Z","type":"message"}
{"nick":"creationix","message":"I guess the nice thing about using a string as the type is it could make introspection easier","date":"2012-03-08T16:28:46.756Z","type":"message"}
{"nick":"creationix","message":"typeof can return that string","date":"2012-03-08T16:28:55.499Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T16:29:34.212Z","type":"message"}
{"nick":"creationix","message":"just a simple const char*","date":"2012-03-08T16:29:40.542Z","type":"message"}
{"nick":"indutny","message":"probably that is a good way to do that","date":"2012-03-08T16:29:44.101Z","type":"message"}
{"nick":"creationix","message":"shouldn't be much overhead","date":"2012-03-08T16:29:44.304Z","type":"message"}
{"nick":"creationix","message":"and length I guess","date":"2012-03-08T16:29:49.728Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-08T16:29:57.108Z","type":"message"}
{"nick":"creationix","message":"cool, that would be great","date":"2012-03-08T16:30:06.192Z","type":"message"}
{"nick":"indutny","message":"8 byte tag + 8 byte length + data","date":"2012-03-08T16:30:06.771Z","type":"message"}
{"nick":"indutny","message":"oh, and hash","date":"2012-03-08T16:30:11.050Z","type":"message"}
{"nick":"indutny","message":"8 bytes","date":"2012-03-08T16:30:12.475Z","type":"message"}
{"nick":"creationix","message":"so a string is data + length","date":"2012-03-08T16:30:33.699Z","type":"message"}
{"nick":"indutny","message":"data + hash + length","date":"2012-03-08T16:31:19.779Z","type":"message"}
{"nick":"indutny","message":"and tag","date":"2012-03-08T16:31:24.647Z","type":"message"}
{"nick":"creationix","message":"maybe tag can stay a number","date":"2012-03-08T16:35:02.347Z","type":"message"}
{"nick":"creationix","message":"but provide a C++ way to register new tag ids","date":"2012-03-08T16:35:10.639Z","type":"message"}
{"nick":"creationix","message":"and associate them with strings","date":"2012-03-08T16:35:13.668Z","type":"message"}
{"nick":"creationix","message":"then you don't need the actual string in the cdata instance","date":"2012-03-08T16:35:20.881Z","type":"message"}
{"nick":"indutny","message":"yes, but that won't work with classes","date":"2012-03-08T16:36:49.943Z","type":"message"}
{"nick":"indutny","message":"destructor won't be called","date":"2012-03-08T16:36:59.451Z","type":"message"}
{"nick":"indutny","message":"you don't need it for uv bindings though","date":"2012-03-08T16:37:12.413Z","type":"message"}
{"nick":"creationix","message":"yeah, I think they are two different use cases","date":"2012-03-08T16:37:34.083Z","type":"message"}
{"nick":"creationix","message":"one where the vm manages the memory","date":"2012-03-08T16:37:42.007Z","type":"message"}
{"nick":"creationix","message":"and one where the C++ binding author does","date":"2012-03-08T16:37:48.956Z","type":"message"}
{"nick":"creationix","message":"one interesting thing about libuv","date":"2012-03-08T16:38:23.154Z","type":"message"}
{"nick":"creationix","message":"structs \"inherit\"","date":"2012-03-08T16:38:30.025Z","type":"message"}
{"nick":"creationix","message":"actually they are just massive unions","date":"2012-03-08T16:38:39.155Z","type":"message"}
{"nick":"creationix","message":"but it's safe to use a uv_stream_t as a uv_handle_t for example","date":"2012-03-08T16:38:53.660Z","type":"message"}
{"nick":"creationix","message":"since uv_handle_t is a \"parent\" to uv_stream_t","date":"2012-03-08T16:39:05.738Z","type":"message"}
{"nick":"creationix","message":"in luvit you're given a hidden prototype object to attach to cdata instances","date":"2012-03-08T16:39:39.694Z","type":"message"}
{"nick":"creationix","message":"and I have {isHandle:true,isStream:true,isTcp:true} for tcp instances","date":"2012-03-08T16:39:55.752Z","type":"message"}
{"nick":"creationix","message":"and when I get the value, I check for is* for the type I'm expecting","date":"2012-03-08T16:40:05.857Z","type":"message"}
{"nick":"creationix","message":"we don't want to do prototypes so that won't work","date":"2012-03-08T16:40:20.243Z","type":"message"}
{"nick":"indutny","message":"yes, I know","date":"2012-03-08T16:41:20.116Z","type":"message"}
{"nick":"indutny","message":"that's cool thing about uv","date":"2012-03-08T16:41:37.887Z","type":"message"}
{"nick":"creationix","message":"hmm, how do I malloc a string of variable size?","date":"2012-03-08T16:42:16.938Z","type":"message"}
{"nick":"creationix","message":"(char*)malloc(size) ?","date":"2012-03-08T16:42:28.213Z","type":"message"}
{"nick":"creationix","message":"will candor free that properly when the string get's GCed","date":"2012-03-08T16:42:39.577Z","type":"message"}
{"nick":"creationix","message":"does this look sane? https://gist.github.com/a0dd83511d7d75005a80","date":"2012-03-08T16:46:53.645Z","type":"message"}
{"nick":"creationix","message":"(creating a uv_timer_t instance for candor)","date":"2012-03-08T16:47:03.272Z","type":"message"}
{"nick":"indutny","message":"huh","date":"2012-03-08T16:51:12.423Z","type":"message"}
{"nick":"indutny","message":"aah, well","date":"2012-03-08T16:51:45.794Z","type":"message"}
{"nick":"indutny","message":"much simplier here","date":"2012-03-08T16:51:50.773Z","type":"message"}
{"nick":"indutny","message":"you're responsible for your app's memory","date":"2012-03-08T16:51:59.834Z","type":"message"}
{"nick":"indutny","message":"candor will copy value passed to String::New into heap","date":"2012-03-08T16:52:08.173Z","type":"message"}
{"nick":"indutny","message":"so just reinterpret_cast your uv_timer_t","date":"2012-03-08T16:52:15.532Z","type":"message"}
{"nick":"indutny","message":"like","date":"2012-03-08T16:52:27.153Z","type":"message"}
{"nick":"indutny","message":"uv_timer_t t;","date":"2012-03-08T16:52:32.153Z","type":"message"}
{"nick":"indutny","message":"String::New(reinterpret_cast<char*>(&t), sizeof(t))","date":"2012-03-08T16:52:42.503Z","type":"message"}
{"nick":"creationix","message":"hmm, so there are two instances of my struct in ram","date":"2012-03-08T16:56:17.635Z","type":"message"}
{"nick":"creationix","message":"one local and one on the heap","date":"2012-03-08T16:56:21.623Z","type":"message"}
{"nick":"indutny","message":"oooh","date":"2012-03-08T16:57:08.510Z","type":"message"}
{"nick":"indutny","message":"righto","date":"2012-03-08T16:57:10.297Z","type":"message"}
{"nick":"indutny","message":"that's not good","date":"2012-03-08T16:57:24.876Z","type":"message"}
{"nick":"indutny","message":"you should do that only after you initialized t","date":"2012-03-08T16:57:39.546Z","type":"message"}
{"nick":"creationix","message":"I want candor to allocate it on the heap for me and give me the pointer","date":"2012-03-08T16:57:42.155Z","type":"message"}
{"nick":"indutny","message":"and do not use 't' after that","date":"2012-03-08T16:57:48.615Z","type":"message"}
{"nick":"creationix","message":"I guess we can do that for the cdata api","date":"2012-03-08T16:57:49.415Z","type":"message"}
{"nick":"creationix","message":"right","date":"2012-03-08T16:57:53.519Z","type":"message"}
{"nick":"creationix","message":"I'll make sure to use the heap version","date":"2012-03-08T16:58:01.290Z","type":"message"}
{"nick":"indutny","message":"everything with cleanup then","date":"2012-03-08T16:58:09.136Z","type":"message"}
{"nick":"creationix","message":"indutny, something isn't working in my function","date":"2012-03-08T17:09:19.109Z","type":"message"}
{"nick":"creationix","message":"I think I'm getting nil when I return *timer","date":"2012-03-08T17:09:27.070Z","type":"message"}
{"nick":"creationix","message":"(timer is Handle<Object>)","date":"2012-03-08T17:09:32.262Z","type":"message"}
{"nick":"creationix","message":"can you confirm returning objects from native functions works? or am I doing something wrong?","date":"2012-03-08T17:10:13.068Z","type":"message"}
{"nick":"creationix","message":"updated the gist https://gist.github.com/a0dd83511d7d75005a80","date":"2012-03-08T17:11:12.897Z","type":"message"}
{"nick":"indutny","message":"hm...","date":"2012-03-08T17:13:26.970Z","type":"message"}
{"nick":"indutny","message":"that looks good","date":"2012-03-08T17:14:20.827Z","type":"message"}
{"nick":"indutny","message":"I'll check it later","date":"2012-03-08T17:14:25.381Z","type":"message"}
{"nick":"indutny","message":"yeah, finished refactor","date":"2012-03-08T17:15:06.012Z","type":"message"}
{"nick":"creationix","message":":)","date":"2012-03-08T17:20:13.923Z","type":"message"}
{"nick":"indutny","message":"ok, there's a bug","date":"2012-03-08T17:23:10.712Z","type":"message"}
{"nick":"indutny","message":"or not","date":"2012-03-08T17:26:59.827Z","type":"message"}
{"nick":"indutny","message":"it works","date":"2012-03-08T17:27:01.112Z","type":"message"}
{"nick":"indutny","message":"you're probably doing something wrong on candor side","date":"2012-03-08T17:27:12.727Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2012-03-08T17:29:31.676Z","type":"message"}
{"nick":"creationix","message":"I need to run some errands, you'll probably be asleep when I get back","date":"2012-03-08T17:29:42.611Z","type":"message"}
{"nick":"creationix","message":"see you tomorrow","date":"2012-03-08T17:29:51.205Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T17:30:28.263Z","type":"message"}
{"nick":"indutny","message":"see you","date":"2012-03-08T17:30:29.701Z","type":"message"}
{"nick":"creationix","message":"hmm, doesn't seem to build on my atom netbook","date":"2012-03-08T17:37:48.553Z","type":"message"}
{"nick":"creationix","message":"32-bit cpu","date":"2012-03-08T17:37:51.914Z","type":"message"}
{"nick":"creationix","message":"actually, it builds, but segfaults instantly on start","date":"2012-03-08T17:38:02.476Z","type":"message"}
{"nick":"indutny","message":"how it builds?","date":"2012-03-08T17:39:02.153Z","type":"message"}
{"nick":"indutny","message":"it shouldn't","date":"2012-03-08T17:39:05.613Z","type":"message"}
{"nick":"indutny","message":"no ia32 support so far","date":"2012-03-08T17:39:10.943Z","type":"message"}
{"nick":"indutny","message":"it can't :D","date":"2012-03-08T17:39:29.849Z","type":"message"}
{"nick":"indutny","message":"creationix: can you run it through GDB?","date":"2012-03-08T17:39:43.253Z","type":"message"}
{"nick":"indutny","message":"probably there're some illegal instruction","date":"2012-03-08T17:39:58.903Z","type":"message"}
{"nick":"indutny","message":"gdb candor.io","date":"2012-03-08T17:40:21.611Z","type":"message"}
{"nick":"indutny","message":"run test.can","date":"2012-03-08T17:40:24.589Z","type":"message"}
{"nick":"creationix","message":"lol","date":"2012-03-08T17:40:57.305Z","type":"message"}
{"nick":"creationix","message":"that stack trace is worthless","date":"2012-03-08T17:41:02.098Z","type":"message"}
{"nick":"creationix","message":"6 steps with random addresses in ?? ()","date":"2012-03-08T17:41:13.089Z","type":"message"}
{"nick":"indutny","message":"heh","date":"2012-03-08T17:41:23.798Z","type":"message"}
{"nick":"indutny","message":"ok what' the last address?","date":"2012-03-08T17:41:27.897Z","type":"message"}
{"nick":"indutny","message":"what's*","date":"2012-03-08T17:41:33.374Z","type":"message"}
{"nick":"indutny","message":"(I'll add gdbjit support soon)","date":"2012-03-08T17:41:44.831Z","type":"message"}
{"nick":"creationix","message":"https://gist.github.com/099c39c1abe3288e67b1","date":"2012-03-08T17:42:42.936Z","type":"message"}
{"nick":"indutny","message":"disas 0x00403000 0x00403100","date":"2012-03-08T17:43:17.246Z","type":"message"}
{"nick":"indutny","message":"please","date":"2012-03-08T17:43:19.196Z","type":"message"}
{"nick":"indutny","message":"or disas 0x00403000,+0x100","date":"2012-03-08T17:43:27.115Z","type":"message"}
{"nick":"indutny","message":"that depends on your gdb version","date":"2012-03-08T17:43:36.095Z","type":"message"}
{"nick":"creationix","message":"updated gist","date":"2012-03-08T17:48:26.686Z","type":"message"}
{"nick":"creationix","message":"I think I got it all","date":"2012-03-08T17:48:33.703Z","type":"message"}
{"nick":"creationix","message":"it was paginated across several pages","date":"2012-03-08T17:48:38.744Z","type":"message"}
{"nick":"indutny","message":"omg","date":"2012-03-08T17:48:45.111Z","type":"message"}
{"nick":"indutny","message":"that code doesn't look like candor","date":"2012-03-08T17:49:26.160Z","type":"message"}
{"nick":"indutny","message":"aah","date":"2012-03-08T17:49:41.819Z","type":"message"}
{"nick":"indutny","message":"no","date":"2012-03-08T17:49:42.762Z","type":"message"}
{"nick":"indutny","message":"it is","date":"2012-03-08T17:49:43.502Z","type":"message"}
{"nick":"indutny","message":"haha","date":"2012-03-08T17:49:50.703Z","type":"message"}
{"nick":"indutny","message":"it's x64 code","date":"2012-03-08T17:50:02.999Z","type":"message"}
{"nick":"indutny","message":"disassembled with i386 assembler","date":"2012-03-08T17:50:16.243Z","type":"message"}
{"nick":"indutny","message":"so nothing to catch there","date":"2012-03-08T17:50:21.839Z","type":"message"}
{"nick":"creationix","message":"ahh","date":"2012-03-08T17:50:33.705Z","type":"message"}
{"nick":"creationix","message":"oh well","date":"2012-03-08T17:50:39.355Z","type":"message"}
{"nick":"creationix","message":"you'll have to add i386 and arm later I guess","date":"2012-03-08T17:50:55.766Z","type":"message"}
{"nick":"creationix","message":"or do you have a non-jit mode that's portable?","date":"2012-03-08T17:51:19.880Z","type":"message"}
{"nick":"indutny","message":"no","date":"2012-03-08T17:53:04.505Z","type":"message"}
{"nick":"indutny","message":"only jit","date":"2012-03-08T17:53:05.895Z","type":"message"}
{"nick":"indutny","message":"I'll implement i386 later","date":"2012-03-08T17:53:16.634Z","type":"message"}
{"nick":"indutny","message":"btw, important thing now","date":"2012-03-08T17:53:21.611Z","type":"message"}
{"nick":"indutny","message":"if you understand gyp","date":"2012-03-08T17:53:26.831Z","type":"message"}
{"nick":"indutny","message":"would be cool to move from Makefile to it","date":"2012-03-08T17:53:35.832Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: yt?","date":"2012-03-08T17:56:27.310Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: can you please help me with gyp?","date":"2012-03-08T17:59:15.285Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: I'm really not so deep into it","date":"2012-03-08T17:59:22.475Z","type":"message"}
{"nick":"creationix","message":"I sortof know gyp","date":"2012-03-08T18:02:06.036Z","type":"message"}
{"nick":"creationix","message":"not well though","date":"2012-03-08T18:02:08.862Z","type":"message"}
{"nick":"indutny","message":"creationix: great!","date":"2012-03-08T18:20:36.210Z","type":"message"}
{"nick":"indutny","message":"creationix: can you try porting it to gyp why you'll get some time?","date":"2012-03-08T18:20:47.239Z","type":"message"}
{"nick":"creationix","message":"I don't like using gyp for tiny vms","date":"2012-03-08T18:21:01.784Z","type":"message"}
{"nick":"creationix","message":"it adds a python dependency","date":"2012-03-08T18:21:08.041Z","type":"message"}
{"nick":"creationix","message":"but I guess there are worse problems","date":"2012-03-08T18:21:13.564Z","type":"message"}
{"nick":"creationix","message":"luvit has both gyp and standard makefile","date":"2012-03-08T18:21:27.894Z","type":"message"}
{"nick":"creationix","message":"keeping both build systems in sync is a pain","date":"2012-03-08T18:21:33.157Z","type":"message"}
{"nick":"creationix","message":"but it's nice when I'm building on some box without python to just use make","date":"2012-03-08T18:21:46.641Z","type":"message"}
{"nick":"creationix","message":"mostly arm devices","date":"2012-03-08T18:21:58.153Z","type":"message"}
{"nick":"creationix","message":"I wish there was somethine like gyp that generated portable makefiles","date":"2012-03-08T18:22:39.609Z","type":"message"}
{"nick":"creationix","message":"so you could generate on a linux desktop with python and use the generated makefile on an arm tablet","date":"2012-03-08T18:22:57.510Z","type":"message"}
{"nick":"creationix","message":"ahh, found the problem in my timer function","date":"2012-03-08T18:26:44.635Z","type":"message"}
{"nick":"creationix","message":"uv->Set(String::New(\"newTimer\", 3), Function::New(NewTimer));","date":"2012-03-08T18:27:00.307Z","type":"message"}
{"nick":"creationix","message":"I don't think 3 is the right length","date":"2012-03-08T18:27:05.915Z","type":"message"}
{"nick":"creationix","message":"and since calling a nil function just returns nil","date":"2012-03-08T18:27:24.712Z","type":"message"}
{"nick":"creationix","message":"it looked like the function was getting run, but returning nil","date":"2012-03-08T18:27:31.691Z","type":"message"}
{"nick":"indutny","message":"heh","date":"2012-03-08T18:28:19.379Z","type":"message"}
{"nick":"indutny","message":"creationix: I think gyp would solve many problems of make","date":"2012-03-08T18:28:39.912Z","type":"message"}
{"nick":"indutny","message":"like partial rebuilds","date":"2012-03-08T18:28:44.319Z","type":"message"}
{"nick":"indutny","message":"they do not work now","date":"2012-03-08T18:28:46.873Z","type":"message"}
{"nick":"creationix","message":"right","date":"2012-03-08T18:28:49.874Z","type":"message"}
{"nick":"creationix","message":"well, I guess I'm ok with using gyp","date":"2012-03-08T18:29:05.694Z","type":"message"}
{"nick":"creationix","message":"especially since we don't have an arm port anyway","date":"2012-03-08T18:29:12.592Z","type":"message"}
{"nick":"indutny","message":"so if you'll have minute, would be great to have a gyp for it","date":"2012-03-08T18:29:13.986Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2012-03-08T18:29:16.812Z","type":"message"}
{"nick":"creationix","message":"anything with a 64bit cpu can probably handle having python installed","date":"2012-03-08T18:29:23.391Z","type":"message"}
{"nick":"indutny","message":"hehe ;)","date":"2012-03-08T18:29:29.848Z","type":"message"}
{"nick":"indutny","message":"that's right","date":"2012-03-08T18:29:39.765Z","type":"message"}
{"nick":"creationix","message":"I barely know gyp","date":"2012-03-08T18:30:09.168Z","type":"message"}
{"nick":"creationix","message":"maybe I can try tonight","date":"2012-03-08T18:30:12.182Z","type":"message"}
{"nick":"indutny","message":"cool! :)","date":"2012-03-08T18:30:32.313Z","type":"message"}
{"nick":"indutny","message":"going to watch film with my wife","date":"2012-03-08T18:30:38.252Z","type":"message"}
{"nick":"indutny","message":"ttyl, man","date":"2012-03-08T18:30:40.382Z","type":"message"}
{"nick":"indutny","message":"thank you","date":"2012-03-08T18:30:41.682Z","type":"message"}
{"nick":"indutny","new_nick":"indutny_away","date":"2012-03-08T18:30:44.715Z","type":"nick"}
{"nick":"creationix","message":"It seems that you can't scope in arguments","date":"2012-03-08T19:03:20.828Z","type":"message"}
{"nick":"creationix","message":"this call never happens https://github.com/creationix/candor.io/blob/master/test.can#L10","date":"2012-03-08T19:05:08.776Z","type":"message"}
{"nick":"creationix","message":"but the line after it executes if I put a print there","date":"2012-03-08T19:05:17.408Z","type":"message"}
{"nick":"creationix","message":"and if I manually copy the argument to a local var, then it segfaults when calling the callback https://gist.github.com/a81b1423b715563a590e","date":"2012-03-08T19:06:46.611Z","type":"message"}
{"nick":"creationix","message":"anyway, I'm off to work on other stuff","date":"2012-03-08T19:07:01.969Z","type":"message"}
{"nick":"creationix","message":"btw, this whole nothing is an error is hard to debug","date":"2012-03-08T19:08:36.693Z","type":"message"}
{"nick":"creationix","message":"I can't wait till we add static analysis of undefined variable access","date":"2012-03-08T19:08:48.677Z","type":"message"}
{"nick":"creationix","message":"that would catch 90% of my mistakes","date":"2012-03-08T19:08:53.564Z","type":"message"}
{"nick":"creationix","message":"and then better syntax error reporting","date":"2012-03-08T19:09:32.759Z","type":"message"}
{"nick":"indutny_away","message":"scoping arguments","date":"2012-03-08T20:40:39.625Z","type":"message"}
{"nick":"indutny_away","message":"interesting","date":"2012-03-08T20:40:41.892Z","type":"message"}
{"nick":"indutny_away","message":"ok, that's definitely not it","date":"2012-03-08T20:43:33.901Z","type":"message"}
{"nick":"indutny_away","message":"ah wai","date":"2012-03-08T20:43:42.330Z","type":"message"}
{"nick":"indutny_away","message":"wait*","date":"2012-03-08T20:43:44.759Z","type":"message"}
{"nick":"indutny_away","message":"no, it works","date":"2012-03-08T20:45:30.627Z","type":"message"}
{"nick":"creationix","message":"did I do something wrong?","date":"2012-03-08T20:48:39.883Z","type":"message"}
{"nick":"creationix","message":"hmm, I can't call callback in the function that get's it directly","date":"2012-03-08T20:51:25.583Z","type":"message"}
{"nick":"creationix","message":"mystery function","date":"2012-03-08T21:00:49.099Z","type":"message"}
{"nick":"creationix","message":"Is<Function>(),  Is<Object>() and Is<Nil>() are all false","date":"2012-03-08T21:01:20.293Z","type":"message"}
{"nick":"creationix","message":"but when I call ToString() on it, it returns an empty string","date":"2012-03-08T21:01:31.517Z","type":"message"}
{"nick":"creationix","message":"Is<String> is false too","date":"2012-03-08T21:02:30.258Z","type":"message"}
{"nick":"creationix","message":"nevermind","date":"2012-03-08T21:04:45.267Z","type":"message"}
{"nick":"creationix","message":"but in my C code","date":"2012-03-08T21:04:47.177Z","type":"message"}
{"nick":"creationix","message":"callback is nil","date":"2012-03-08T21:04:54.660Z","type":"message"}
{"nick":"creationix","message":"though I'm not sure how","date":"2012-03-08T21:05:20.995Z","type":"message"}
{"nick":"creationix","message":"it's the first arg and I'm passing in a function literal","date":"2012-03-08T21:05:29.851Z","type":"message"}
{"nick":"creationix","message":"yep definitely a bug passing functions as arguments","date":"2012-03-08T21:12:06.746Z","type":"message"}
{"nick":"creationix","message":"if I pass any function (script generated or C generated) as an argument (at any position), it's suddenly nil in the function body","date":"2012-03-08T21:12:43.410Z","type":"message"}
{"nick":"indutny_away","message":"ok","date":"2012-03-08T21:15:57.167Z","type":"message"}
{"nick":"indutny_away","message":"I'll test it tomorrow","date":"2012-03-08T21:16:01.180Z","type":"message"}
{"nick":"indutny_away","message":"ttyl","date":"2012-03-08T21:16:05.497Z","type":"message"}
{"nick":"indutny_away","new_nick":"indutny_sleeping","date":"2012-03-08T21:16:09.145Z","type":"nick"}
{"nick":"indutny_sleeping","message":"sorry","date":"2012-03-08T21:16:10.017Z","type":"message"}
{"nick":"indutny_sleeping","message":"going to sleep now","date":"2012-03-08T21:16:12.292Z","type":"message"}
{"nick":"creationix","message":"good night","date":"2012-03-08T21:23:03.370Z","type":"message"}
{"nick":"hij1nx","reason":"Quit: hij1nx","date":"2012-03-08T22:29:39.985Z","type":"quit"}
{"nick":"hij1nx","date":"2012-03-08T23:36:06.781Z","type":"join"}
