{"nick":"indutny","message":"creationix: evening, yt?","date":"2012-03-22T00:42:44.215Z","type":"message"}
{"nick":"creationix","message":"yep","date":"2012-03-22T00:43:09.234Z","type":"message"}
{"nick":"indutny","message":"creationix: so the problem with cdata is that it's a string internally","date":"2012-03-22T00:43:27.380Z","type":"message"}
{"nick":"indutny","message":"that means that your data resides in the heap too","date":"2012-03-22T00:43:35.639Z","type":"message"}
{"nick":"indutny","message":"and your data may be moved","date":"2012-03-22T00:43:41.595Z","type":"message"}
{"nick":"creationix","message":"moving is fine as long as the bits move with it","date":"2012-03-22T00:43:53.408Z","type":"message"}
{"nick":"creationix","message":"I don't think the struct cares where it's base address is","date":"2012-03-22T00:44:08.373Z","type":"message"}
{"nick":"indutny","message":"I don't think that moving is fine for candor.io","date":"2012-03-22T00:44:10.213Z","type":"message"}
{"nick":"indutny","message":"suppose you've a cdata at some addr","date":"2012-03-22T00:44:32.458Z","type":"message"}
{"nick":"piscisaureus_","reason":"Ping timeout: 248 seconds","date":"2012-03-22T00:44:33.951Z","type":"quit"}
{"nick":"hij1nx","date":"2012-03-22T00:44:44.379Z","type":"join"}
{"nick":"indutny","message":"and an async action that will read that struct after some time","date":"2012-03-22T00:44:44.932Z","type":"message"}
{"nick":"indutny","message":"you'll store pointer to that structure into libuv's queue","date":"2012-03-22T00:45:00.474Z","type":"message"}
{"nick":"indutny","message":"and once libuv will finish it's job - it'll load that pointer, cast object and run callback","date":"2012-03-22T00:45:18.471Z","type":"message"}
{"nick":"creationix","message":"true","date":"2012-03-22T00:45:22.235Z","type":"message"}
{"nick":"creationix","message":"well than we shouldn't be moving the cdata","date":"2012-03-22T00:45:44.133Z","type":"message"}
{"nick":"indutny","message":"that's what I hadn't considered before","date":"2012-03-22T00:45:45.697Z","type":"message"}
{"nick":"creationix","message":"allocate it outside th heap maybe","date":"2012-03-22T00:45:50.706Z","type":"message"}
{"nick":"indutny","message":"hm...","date":"2012-03-22T00:45:55.242Z","type":"message"}
{"nick":"creationix","message":"if cdata can't be used for anything than pointers, what good is it","date":"2012-03-22T00:46:12.022Z","type":"message"}
{"nick":"creationix","message":"(meaning the alloc properties of it)","date":"2012-03-22T00:46:24.613Z","type":"message"}
{"nick":"indutny","message":"it can be used for structures","date":"2012-03-22T00:46:25.397Z","type":"message"}
{"nick":"indutny","message":"but that depends on your usage","date":"2012-03-22T00:46:33.024Z","type":"message"}
{"nick":"creationix","message":"in lua I do the same thing and haven't hit any issues","date":"2012-03-22T00:46:54.086Z","type":"message"}
{"nick":"creationix","message":"I'll bet they don't move the cdata","date":"2012-03-22T00:47:04.797Z","type":"message"}
{"nick":"indutny","message":"having the actual bytes in external storage will require adding weak callback for each created cdata","date":"2012-03-22T00:47:06.209Z","type":"message"}
{"nick":"creationix","message":"true, but if I store a pointer to the struct I'll have to register a weak callback myself","date":"2012-03-22T00:47:41.140Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-22T00:47:54.704Z","type":"message"}
{"nick":"indutny","message":"true too","date":"2012-03-22T00:48:02.454Z","type":"message"}
{"nick":"indutny","message":"ok, gtg","date":"2012-03-22T00:53:54.863Z","type":"message"}
{"nick":"indutny","message":"I'll think about it today","date":"2012-03-22T00:54:01.628Z","type":"message"}
{"nick":"indutny","message":"ttyl","date":"2012-03-22T01:04:56.379Z","type":"message"}
{"nick":"indutny","message":"creationix: fixed most of your issues","date":"2012-03-22T01:12:15.802Z","type":"message"}
{"nick":"indutny","new_nick":"indutny_away","date":"2012-03-22T01:12:19.484Z","type":"nick"}
{"nick":"creationix","message":"indutny_away, thanks","date":"2012-03-22T01:13:16.285Z","type":"message"}
{"nick":"alejandromg","date":"2012-03-22T01:22:10.999Z","type":"join"}
{"nick":"karterk","date":"2012-03-22T01:47:31.719Z","type":"join"}
{"nick":"creationix","message":"indutny_away, one issue is still there","date":"2012-03-22T01:48:34.932Z","type":"message"}
{"nick":"creationix","message":"I should have filed it as it's own issue, not as part of the : issue","date":"2012-03-22T01:48:44.641Z","type":"message"}
{"nick":"creationix","message":"I'll file a new one","date":"2012-03-22T01:48:50.110Z","type":"message"}
{"nick":"karterk","reason":"Remote host closed the connection","date":"2012-03-22T03:10:58.371Z","type":"quit"}
{"nick":"karterk","date":"2012-03-22T03:34:31.720Z","type":"join"}
{"nick":"alejandromg","reason":"Quit: leaving","date":"2012-03-22T05:57:25.096Z","type":"quit"}
{"nick":"alejandr1mg","date":"2012-03-22T06:20:54.763Z","type":"join"}
{"nick":"alejandr1mg","reason":"Quit: leaving","date":"2012-03-22T06:38:39.394Z","type":"quit"}
{"nick":"indutny_away","reason":"Ping timeout: 250 seconds","date":"2012-03-22T09:54:47.244Z","type":"quit"}
{"nick":"indutny","date":"2012-03-22T10:01:05.266Z","type":"join"}
{"nick":"karterk","reason":"Remote host closed the connection","date":"2012-03-22T12:15:31.513Z","type":"quit"}
{"nick":"indutny","message":"creationix: fixed!","date":"2012-03-22T12:27:50.876Z","type":"message"}
{"nick":"indutny","message":":)","date":"2012-03-22T12:27:51.529Z","type":"message"}
{"nick":"karterk","date":"2012-03-22T12:47:10.354Z","type":"join"}
{"nick":"creationix","message":"indutny, mornin","date":"2012-03-22T12:52:32.752Z","type":"message"}
{"nick":"indutny","message":"creationix: mornin","date":"2012-03-22T12:52:42.927Z","type":"message"}
{"nick":"creationix","message":"testing fix now","date":"2012-03-22T12:53:48.253Z","type":"message"}
{"nick":"indutny","message":"cool","date":"2012-03-22T12:53:54.314Z","type":"message"}
{"nick":"indutny","date":"2012-03-22T12:54:00.666Z","type":"part"}
{"nick":"indutny","date":"2012-03-22T12:54:01.487Z","type":"join"}
{"nick":"indutny","message":"brb","date":"2012-03-22T12:54:42.246Z","type":"message"}
{"nick":"indutny","reason":"Quit: Leaving.","date":"2012-03-22T12:54:45.509Z","type":"quit"}
{"nick":"indutny","date":"2012-03-22T12:55:37.380Z","type":"join"}
{"nick":"indutny","message":"back","date":"2012-03-22T12:55:41.878Z","type":"message"}
{"nick":"indutny","message":"creationix: candor.io works fine locally (net.can example)","date":"2012-03-22T13:01:17.701Z","type":"message"}
{"nick":"indutny","message":"logging output is seems to be correct","date":"2012-03-22T13:01:33.219Z","type":"message"}
{"nick":"indutny","message":"oh, btw","date":"2012-03-22T13:01:34.543Z","type":"message"}
{"nick":"indutny","message":"let me open a PR for you","date":"2012-03-22T13:01:41.550Z","type":"message"}
{"nick":"indutny","message":"I've removed Arguments class","date":"2012-03-22T13:01:45.584Z","type":"message"}
{"nick":"creationix","message":"I see","date":"2012-03-22T13:01:48.782Z","type":"message"}
{"nick":"creationix","message":"I was trying to fix that","date":"2012-03-22T13:01:53.386Z","type":"message"}
{"nick":"indutny","message":"creationix: done, https://github.com/creationix/candor.io/pull/2/files","date":"2012-03-22T13:03:16.043Z","type":"message"}
{"nick":"creationix","message":"much prettier, I like the new API","date":"2012-03-22T13:03:51.245Z","type":"message"}
{"nick":"indutny","message":"heh","date":"2012-03-22T13:04:11.985Z","type":"message"}
{"nick":"creationix","message":"I don't know why, but Value*[] makes more sense to me than Arguments","date":"2012-03-22T13:05:09.411Z","type":"message"}
{"nick":"indutny","message":"to me too","date":"2012-03-22T13:05:25.701Z","type":"message"}
{"nick":"indutny","message":"it wasn't possible before","date":"2012-03-22T13:05:32.537Z","type":"message"}
{"nick":"indutny","message":"i did some hack to implement that","date":"2012-03-22T13:05:41.406Z","type":"message"}
{"nick":"indutny","message":"pushing variables to stack in natural order now","date":"2012-03-22T13:05:53.137Z","type":"message"}
{"nick":"indutny","message":"creationix: how is it going?","date":"2012-03-22T13:21:31.117Z","type":"message"}
{"nick":"piscisaureus_","date":"2012-03-22T13:22:00.194Z","type":"join"}
{"nick":"creationix","message":"good, but need to go eat breakfast with family","date":"2012-03-22T13:24:07.313Z","type":"message"}
{"nick":"creationix","message":"saved my changes","date":"2012-03-22T13:25:34.354Z","type":"message"}
{"nick":"indutny","message":":)","date":"2012-03-22T13:25:40.267Z","type":"message"}
{"nick":"indutny","message":"cool","date":"2012-03-22T13:25:41.517Z","type":"message"}
{"nick":"creationix","message":"alright, net.can is working","date":"2012-03-22T13:54:04.688Z","type":"message"}
{"nick":"creationix","message":"with a very node-like API","date":"2012-03-22T13:54:21.021Z","type":"message"}
{"nick":"creationix","message":"now I need to find a way to have script modules built-in","date":"2012-03-22T13:54:31.145Z","type":"message"}
{"nick":"creationix","message":"indutny, so what should I do about the moving structs?","date":"2012-03-22T14:08:01.961Z","type":"message"}
{"nick":"karterk","reason":"Remote host closed the connection","date":"2012-03-22T14:18:58.639Z","type":"quit"}
{"nick":"karterk","date":"2012-03-22T14:21:56.519Z","type":"join"}
{"nick":"karterk","reason":"Remote host closed the connection","date":"2012-03-22T14:29:16.039Z","type":"quit"}
{"nick":"karterk","date":"2012-03-22T15:45:49.764Z","type":"join"}
{"nick":"mmalecki[zzz]","new_nick":"mmalecki","date":"2012-03-22T15:58:18.536Z","type":"nick"}
{"nick":"indutny","reason":"Ping timeout: 252 seconds","date":"2012-03-22T16:34:43.732Z","type":"quit"}
{"nick":"mmalecki","new_nick":"mmalecki[brb]","date":"2012-03-22T16:50:57.294Z","type":"nick"}
{"nick":"indutny","date":"2012-03-22T17:31:07.780Z","type":"join"}
{"nick":"indutny","date":"2012-03-22T17:31:09.562Z","type":"part"}
{"nick":"indutny","date":"2012-03-22T17:31:14.151Z","type":"join"}
{"nick":"indutny","message":"creationix: you should allocate data in user-managable heap","date":"2012-03-22T17:43:44.120Z","type":"message"}
{"nick":"indutny","message":"i.e with malloc/new","date":"2012-03-22T17:43:47.110Z","type":"message"}
{"nick":"mmalecki[brb]","new_nick":"mmalecki","date":"2012-03-22T17:44:29.426Z","type":"nick"}
{"nick":"creationix","message":"indutny, right","date":"2012-03-22T17:44:49.395Z","type":"message"}
{"nick":"indutny","message":"so use CWrapper","date":"2012-03-22T17:46:13.649Z","type":"message"}
{"nick":"indutny","message":"create class","date":"2012-03-22T17:46:31.389Z","type":"message"}
{"nick":"indutny","message":"let me think","date":"2012-03-22T17:46:54.069Z","type":"message"}
{"nick":"hij1nx","reason":"Quit: hij1nx","date":"2012-03-22T17:55:38.181Z","type":"quit"}
{"nick":"alejandromg","date":"2012-03-22T18:02:39.554Z","type":"join"}
{"nick":"piscisaureus_","reason":"Ping timeout: 246 seconds","date":"2012-03-22T18:18:06.984Z","type":"quit"}
{"nick":"indutny","message":"creationix: yt?","date":"2012-03-22T18:26:55.562Z","type":"message"}
{"nick":"creationix","message":"sorry, I was fixing c9 stuff","date":"2012-03-22T18:27:13.857Z","type":"message"}
{"nick":"creationix","message":"yeah, I have a class","date":"2012-03-22T18:27:16.967Z","type":"message"}
{"nick":"indutny","message":"np","date":"2012-03-22T18:27:17.474Z","type":"message"}
{"nick":"creationix","message":"inherits from CWrapper","date":"2012-03-22T18:27:20.890Z","type":"message"}
{"nick":"indutny","message":"so, I tried subclassing from class that inherits from CWrapper","date":"2012-03-22T18:27:33.809Z","type":"message"}
{"nick":"indutny","message":"https://github.com/indutny/candor/commit/c08e05092b5707881faad79e49a5abe833844ea7","date":"2012-03-22T18:27:38.735Z","type":"message"}
{"nick":"indutny","message":"and it works fine","date":"2012-03-22T18:27:41.890Z","type":"message"}
{"nick":"indutny","message":"are you sure you're doing class A : public B {} instead of class A : B {}","date":"2012-03-22T18:27:58.644Z","type":"message"}
{"nick":"creationix","message":"indutny, https://gist.github.com/673906bbce33c8a1c67e","date":"2012-03-22T18:28:33.751Z","type":"message"}
{"nick":"indutny","message":"what if you'll make properties public","date":"2012-03-22T18:29:11.982Z","type":"message"}
{"nick":"indutny","message":"?","date":"2012-03-22T18:29:34.290Z","type":"message"}
{"nick":"creationix","message":"I didn't like what I was doing before because it was too much code","date":"2012-03-22T18:29:42.597Z","type":"message"}
{"nick":"creationix","message":"I needed C wrappers for all the C++ methods","date":"2012-03-22T18:29:50.058Z","type":"message"}
{"nick":"creationix","message":"since Function::New() and all the libuv callbacks need normal static functions","date":"2012-03-22T18:30:08.566Z","type":"message"}
{"nick":"indutny","message":"just use static functions","date":"2012-03-22T18:30:36.038Z","type":"message"}
{"nick":"indutny","message":"as you use in node","date":"2012-03-22T18:30:39.384Z","type":"message"}
{"nick":"indutny","message":"class A : public CWrapper {","date":"2012-03-22T18:30:49.435Z","type":"message"}
{"nick":"creationix","message":"right, my new approach is to use this new class in place of vanilla CData","date":"2012-03-22T18:30:57.892Z","type":"message"}
{"nick":"indutny","message":"static Value* New();","date":"2012-03-22T18:31:01.046Z","type":"message"}
{"nick":"indutny","message":"kk","date":"2012-03-22T18:31:19.306Z","type":"message"}
{"nick":"creationix","message":"well static C++ function or flat C functions, it's all the same, just in a different plce","date":"2012-03-22T18:31:46.829Z","type":"message"}
{"nick":"creationix","message":"so I'm having trouble compiling this code","date":"2012-03-22T18:32:46.278Z","type":"message"}
{"nick":"creationix","message":"and also there is a design flaw where objects never get GCed","date":"2012-03-22T18:32:57.347Z","type":"message"}
{"nick":"indutny","message":"huh?","date":"2012-03-22T18:33:04.458Z","type":"message"}
{"nick":"creationix","message":"so in https://gist.github.com/673906bbce33c8a1c67e","date":"2012-03-22T18:33:17.035Z","type":"message"}
{"nick":"creationix","message":"from candor I need an object that's a clone of the prototype object and also contains a cdata property","date":"2012-03-22T18:33:41.515Z","type":"message"}
{"nick":"creationix","message":"where cdata is the Wrap() version of this class","date":"2012-03-22T18:33:52.475Z","type":"message"}
{"nick":"creationix","message":"but I want a way to ensure the object is referenced sometimes","date":"2012-03-22T18:34:18.152Z","type":"message"}
{"nick":"creationix","message":"like when there is a pending callback that needs it","date":"2012-03-22T18:34:26.528Z","type":"message"}
{"nick":"indutny","message":"ah","date":"2012-03-22T18:34:38.247Z","type":"message"}
{"nick":"creationix","message":"so I thought I would put a handle in my class","date":"2012-03-22T18:34:43.214Z","type":"message"}
{"nick":"indutny","message":"you need some sort of weak reference then","date":"2012-03-22T18:34:46.680Z","type":"message"}
{"nick":"creationix","message":"Handle<Object>","date":"2012-03-22T18:34:47.699Z","type":"message"}
{"nick":"creationix","message":"I need a weak reference and refcounting on it","date":"2012-03-22T18:35:03.638Z","type":"message"}
{"nick":"creationix","message":"so I can make it strong or weak depending on the count","date":"2012-03-22T18:35:13.338Z","type":"message"}
{"nick":"indutny","message":"ok","date":"2012-03-22T18:36:44.099Z","type":"message"}
{"nick":"indutny","message":"I'll implement that","date":"2012-03-22T18:36:48.009Z","type":"message"}
{"nick":"creationix","message":"refcount for handles?","date":"2012-03-22T18:36:57.827Z","type":"message"}
{"nick":"indutny","message":"I think, yes","date":"2012-03-22T18:38:05.214Z","type":"message"}
{"nick":"creationix","message":"that would be awesome","date":"2012-03-22T18:40:26.746Z","type":"message"}
{"nick":"creationix","message":"add ref, remove ref, and get number of refs, when it's 0, the handle is weak","date":"2012-03-22T18:41:08.828Z","type":"message"}
{"nick":"creationix","message":"maybe default to 1 to keep current behavior","date":"2012-03-22T18:41:19.451Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-22T18:42:19.483Z","type":"message"}
{"nick":"indutny","message":"default should be 1","date":"2012-03-22T18:42:24.928Z","type":"message"}
{"nick":"creationix","message":"there is another way","date":"2012-03-22T18:47:49.017Z","type":"message"}
{"nick":"creationix","message":"instead of implementing a refcount system inside handle","date":"2012-03-22T18:47:56.970Z","type":"message"}
{"nick":"karterk","reason":"Remote host closed the connection","date":"2012-03-22T18:48:03.914Z","type":"quit"}
{"nick":"creationix","message":"just put a hook on the weakcallback where I can return true and it won't be collected","date":"2012-03-22T18:48:14.084Z","type":"message"}
{"nick":"creationix","message":"then I can implement the refcount or other logic inside my class","date":"2012-03-22T18:48:30.729Z","type":"message"}
{"nick":"creationix","message":"maybe I just have a list of pending callbacks and I check is the list is non-empty","date":"2012-03-22T18:48:52.549Z","type":"message"}
{"nick":"creationix","message":"indutny, ^^","date":"2012-03-22T18:49:12.529Z","type":"message"}
{"nick":"indutny","message":"that'll add complexity to GC","date":"2012-03-22T18:49:43.364Z","type":"message"}
{"nick":"creationix","message":"yeah, I wasn't sure how flexible the logic in there was","date":"2012-03-22T18:49:59.099Z","type":"message"}
{"nick":"indutny","message":"and waste CPU time on calling your callbacks","date":"2012-03-22T18:50:10.449Z","type":"message"}
{"nick":"creationix","message":"right","date":"2012-03-22T18:50:32.147Z","type":"message"}
{"nick":"creationix","message":"so at a minimum I need a way to set a handle weak or strong","date":"2012-03-22T18:50:54.717Z","type":"message"}
{"nick":"creationix","message":"bonus points if there is a refcount system too","date":"2012-03-22T18:51:02.768Z","type":"message"}
{"nick":"creationix","message":"but if not, I can just set it weak and strong manually and do my own refcount","date":"2012-03-22T18:51:13.531Z","type":"message"}
{"nick":"indutny","message":"ok","date":"2012-03-22T18:51:27.812Z","type":"message"}
{"nick":"hij1nx","date":"2012-03-22T18:51:57.297Z","type":"join"}
{"nick":"hij1nx","reason":"Remote host closed the connection","date":"2012-03-22T18:54:32.605Z","type":"quit"}
{"nick":"hij1nx","date":"2012-03-22T18:59:36.321Z","type":"join"}
{"nick":"indutny","message":"creationix: done","date":"2012-03-22T19:01:35.835Z","type":"message"}
{"nick":"indutny","message":"https://github.com/indutny/candor/commit/06c7d124bfb7e615b16ec78e2ba24ef30f01cb22","date":"2012-03-22T19:01:45.347Z","type":"message"}
{"nick":"creationix","message":"indutny, ok, so by default there is a count of 1 and I have to call Unref to make it weak?","date":"2012-03-22T19:04:55.951Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-22T19:05:03.235Z","type":"message"}
{"nick":"indutny","message":"creationix: how does it looks? is API fine?","date":"2012-03-22T19:11:44.630Z","type":"message"}
{"nick":"creationix","message":"I think so","date":"2012-03-22T19:12:30.798Z","type":"message"}
{"nick":"creationix","message":"my code is completely busted right now","date":"2012-03-22T19:12:35.590Z","type":"message"}
{"nick":"creationix","message":"I hadn't finished integrating my new class in","date":"2012-03-22T19:12:47.741Z","type":"message"}
{"nick":"creationix","message":"and now I'm getting strange errors after updating","date":"2012-03-22T19:12:56.734Z","type":"message"}
{"nick":"creationix","message":"canio: src/api.cc:208: bool candor::Value::Is() [with T = candor::String]: Assertion `!HValue::Cast(addr())->IsSoftGCMarked() && !HValue::Cast(addr())->IsGCMarked()' failed.","date":"2012-03-22T19:13:24.192Z","type":"message"}
{"nick":"creationix","message":"hmm, so \"this\" in my class isn't a stable pointer","date":"2012-03-22T19:17:47.717Z","type":"message"}
{"nick":"creationix","message":"since that's what the cdata points to","date":"2012-03-22T19:17:52.899Z","type":"message"}
{"nick":"creationix","message":"but my Handle<Object> member is","date":"2012-03-22T19:18:13.132Z","type":"message"}
{"nick":"creationix","message":"?","date":"2012-03-22T19:18:24.603Z","type":"message"}
{"nick":"creationix","message":"and Unwrap will let go of the object no matter how many refs there are right?","date":"2012-03-22T19:19:43.924Z","type":"message"}
{"nick":"indutny","reason":"Read error: Connection timed out","date":"2012-03-22T19:26:11.058Z","type":"quit"}
{"nick":"indutny","date":"2012-03-22T19:29:27.501Z","type":"join"}
{"nick":"indutny","message":"sorry","date":"2012-03-22T19:29:32.416Z","type":"message"}
{"nick":"indutny","message":"reconnected","date":"2012-03-22T19:29:36.752Z","type":"message"}
{"nick":"creationix","message":"I'm trying to use templates","date":"2012-03-22T19:49:07.590Z","type":"message"}
{"nick":"creationix","message":"but it's not linking","date":"2012-03-22T19:49:10.627Z","type":"message"}
{"nick":"indutny","message":"templates in your code?","date":"2012-03-22T19:49:28.232Z","type":"message"}
{"nick":"indutny","message":"you'll need to put declarations in .cc file","date":"2012-03-22T19:49:42.143Z","type":"message"}
{"nick":"indutny","message":"https://github.com/indutny/candor/blob/master/src/api.cc#L29-43","date":"2012-03-22T19:49:53.976Z","type":"message"}
{"nick":"indutny","message":"creationix: like that ^","date":"2012-03-22T19:49:59.421Z","type":"message"}
{"nick":"creationix","message":"so I have this template function https://github.com/creationix/candor.io/blob/master/src/luv.h","date":"2012-03-22T19:51:10.342Z","type":"message"}
{"nick":"creationix","message":"and I use it like https://github.com/creationix/candor.io/blob/master/src/luv_timer.cc#L32","date":"2012-03-22T19:51:29.528Z","type":"message"}
{"nick":"creationix","message":"so I just need to declare it up top in luc_timer.cc so the code gets generated?","date":"2012-03-22T19:51:44.641Z","type":"message"}
{"nick":"indutny","message":"better in luv.cc","date":"2012-03-22T19:51:57.979Z","type":"message"}
{"nick":"creationix","message":"for all the types I'll use","date":"2012-03-22T19:52:35.027Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-22T19:52:37.483Z","type":"message"}
{"nick":"creationix","message":"good idea","date":"2012-03-22T19:52:39.833Z","type":"message"}
{"nick":"indutny","message":"and luv.o will contain compiled functions which linker is requesting","date":"2012-03-22T19:52:52.127Z","type":"message"}
{"nick":"indutny","message":"that's just how it works","date":"2012-03-22T19:52:59.385Z","type":"message"}
{"nick":"indutny","message":":)","date":"2012-03-22T19:53:01.840Z","type":"message"}
{"nick":"creationix","message":"kuje template uv_handle_t* UVData::ObjectTo<uv_handle_t>();","date":"2012-03-22T19:53:24.197Z","type":"message"}
{"nick":"creationix","message":"s/kuje/like/","date":"2012-03-22T19:53:33.998Z","type":"message"}
{"nick":"creationix","message":"well, with the proper argument signature","date":"2012-03-22T19:54:58.105Z","type":"message"}
{"nick":"creationix","message":"seems to work","date":"2012-03-22T19:54:59.884Z","type":"message"}
{"nick":"creationix","message":"alright, it's compiling, but segfaulting like crazy","date":"2012-03-22T19:55:39.070Z","type":"message"}
{"nick":"creationix","message":"heh, my uv_timer_t* is 0x10","date":"2012-03-22T19:56:58.687Z","type":"message"}
{"nick":"creationix","message":"that's an awfully small pointer value","date":"2012-03-22T19:57:09.202Z","type":"message"}
{"nick":"creationix","message":"C++ template variables can't be put in a printf somehow can they?","date":"2012-03-22T19:59:53.075Z","type":"message"}
{"nick":"kohai","message":"C has 14 beers","date":"2012-03-22T19:59:53.272Z","type":"message"}
{"nick":"indutny","message":"heh","date":"2012-03-22T19:59:54.420Z","type":"message"}
{"nick":"creationix","message":"like #foo in C macros","date":"2012-03-22T20:00:06.998Z","type":"message"}
{"nick":"indutny","message":"what's a template variable?","date":"2012-03-22T20:00:07.596Z","type":"message"}
{"nick":"creationix","message":"<T>","date":"2012-03-22T20:00:10.649Z","type":"message"}
{"nick":"creationix","message":"the T","date":"2012-03-22T20:00:11.733Z","type":"message"}
{"nick":"indutny","message":"what is T?","date":"2012-03-22T20:00:25.241Z","type":"message"}
{"nick":"creationix","message":"which is later uv_timer_t","date":"2012-03-22T20:00:26.153Z","type":"message"}
{"nick":"indutny","message":"I think no, but I don't really know","date":"2012-03-22T20:00:45.956Z","type":"message"}
{"nick":"indutny","message":"0x10","date":"2012-03-22T20:01:49.527Z","type":"message"}
{"nick":"indutny","message":"nice :)","date":"2012-03-22T20:01:51.111Z","type":"message"}
{"nick":"creationix","message":"yeah, the real value is something like 0xc59460","date":"2012-03-22T20:02:41.339Z","type":"message"}
{"nick":"creationix","message":"I messed up somewhere in all the pointers to pointers","date":"2012-03-22T20:02:50.604Z","type":"message"}
{"nick":"indutny","message":":)","date":"2012-03-22T20:03:25.942Z","type":"message"}
{"nick":"piscisaureus_","date":"2012-03-22T20:04:35.689Z","type":"join"}
{"nick":"indutny","message":"btw, why malloc and not new?","date":"2012-03-22T20:06:51.374Z","type":"message"}
{"nick":"creationix","message":"how do I use new?","date":"2012-03-22T20:06:59.387Z","type":"message"}
{"nick":"creationix","message":"the size is a variable","date":"2012-03-22T20:07:12.712Z","type":"message"}
{"nick":"creationix","message":"passed in","date":"2012-03-22T20:07:16.393Z","type":"message"}
{"nick":"indutny","message":"new char[var]","date":"2012-03-22T20:07:37.306Z","type":"message"}
{"nick":"indutny","message":"and convert it","date":"2012-03-22T20:07:42.352Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2012-03-22T20:07:44.781Z","type":"message"}
{"nick":"creationix","message":"is char always 8 bit?","date":"2012-03-22T20:07:55.685Z","type":"message"}
{"nick":"creationix","message":"or is int8_t safer","date":"2012-03-22T20:08:02.748Z","type":"message"}
{"nick":"indutny","message":"you can safely do char[var]","date":"2012-03-22T20:08:16.839Z","type":"message"}
{"nick":"indutny","message":"it's always 8bit","date":"2012-03-22T20:08:20.135Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2012-03-22T20:08:22.511Z","type":"message"}
{"nick":"indutny","message":"AFAIK","date":"2012-03-22T20:08:26.615Z","type":"message"}
{"nick":"indutny","message":"so, basically","date":"2012-03-22T20:08:34.110Z","type":"message"}
{"nick":"indutny","message":"I'm debugging your code atm","date":"2012-03-22T20:08:40.210Z","type":"message"}
{"nick":"creationix","message":":)","date":"2012-03-22T20:09:13.140Z","type":"message"}
{"nick":"creationix","message":"yay, no more stdlib.h","date":"2012-03-22T20:09:18.525Z","type":"message"}
{"nick":"indutny","message":"and it's receiving UVData object that wasn't created","date":"2012-03-22T20:09:31.453Z","type":"message"}
{"nick":"indutny","message":"oh, that's odd","date":"2012-03-22T20:10:32.314Z","type":"message"}
{"nick":"creationix","message":"I think my ObjectTo<T> is wrong","date":"2012-03-22T20:10:35.146Z","type":"message"}
{"nick":"creationix","message":"I should use CWrapper::Unwrap","date":"2012-03-22T20:11:10.996Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-22T20:11:24.370Z","type":"message"}
{"nick":"indutny","message":"creationix: what should VoidToObject do?","date":"2012-03-22T20:12:39.250Z","type":"message"}
{"nick":"indutny","message":"and why're you using a handle here?","date":"2012-03-22T20:12:45.529Z","type":"message"}
{"nick":"creationix","message":"it's for async callbacks","date":"2012-03-22T20:12:49.016Z","type":"message"}
{"nick":"creationix","message":"the ->data pointer in libuv structs and requests is a Handle<Object>*","date":"2012-03-22T20:13:05.256Z","type":"message"}
{"nick":"creationix","message":"It should take the void* and give back the Object*","date":"2012-03-22T20:13:22.172Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-22T20:13:29.515Z","type":"message"}
{"nick":"indutny","message":"but why is a Handle here?","date":"2012-03-22T20:13:33.456Z","type":"message"}
{"nick":"creationix","message":"because objects move","date":"2012-03-22T20:13:44.074Z","type":"message"}
{"nick":"indutny","message":"err","date":"2012-03-22T20:14:08.709Z","type":"message"}
{"nick":"indutny","message":"you should store Handle inside class then","date":"2012-03-22T20:14:15.622Z","type":"message"}
{"nick":"creationix","message":"what should libuv point to","date":"2012-03-22T20:14:58.889Z","type":"message"}
{"nick":"creationix","message":"I can't point to the class instance","date":"2012-03-22T20:15:26.292Z","type":"message"}
{"nick":"creationix","message":"it will move just like my uv_handle_t structs were moving before","date":"2012-03-22T20:15:41.282Z","type":"message"}
{"nick":"indutny","message":"class won't move","date":"2012-03-22T20:16:14.463Z","type":"message"}
{"nick":"indutny","message":"it's allocated with new","date":"2012-03-22T20:16:25.425Z","type":"message"}
{"nick":"creationix","message":"the instance will","date":"2012-03-22T20:16:26.026Z","type":"message"}
{"nick":"indutny","message":"no","date":"2012-03-22T20:16:28.993Z","type":"message"}
{"nick":"indutny","message":"cdata contains pointer to the class","date":"2012-03-22T20:16:41.102Z","type":"message"}
{"nick":"creationix","message":"ahh, CWrapper handles this for me","date":"2012-03-22T20:17:01.853Z","type":"message"}
{"nick":"creationix","message":"that's why my handmade unwrapper was wrong","date":"2012-03-22T20:17:08.713Z","type":"message"}
{"nick":"creationix","message":"ok, then I should give uv a pointer to the class","date":"2012-03-22T20:17:33.930Z","type":"message"}
{"nick":"creationix","message":"and do straight typecast from void* to UVData*","date":"2012-03-22T20:17:44.718Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2012-03-22T20:18:12.136Z","type":"message"}
{"nick":"creationix","message":"ok, pushed fixes","date":"2012-03-22T20:21:06.138Z","type":"message"}
{"nick":"creationix","message":"it's working mostly now","date":"2012-03-22T20:21:10.209Z","type":"message"}
{"nick":"creationix","message":"but I'","date":"2012-03-22T20:21:11.706Z","type":"message"}
{"nick":"creationix","message":"I'l still crashing on the same libuv assert as before when my structs were moving","date":"2012-03-22T20:21:23.163Z","type":"message"}
{"nick":"indutny","message":"hm...","date":"2012-03-22T20:21:50.953Z","type":"message"}
{"nick":"creationix","message":"or maybe the moving wasn't the cause of the trouble","date":"2012-03-22T20:22:26.599Z","type":"message"}
{"nick":"creationix","message":"let me refactor tcp and stream to use this new class too","date":"2012-03-22T20:22:38.945Z","type":"message"}
{"nick":"indutny","message":"that's what I was afraid of :)","date":"2012-03-22T20:22:40.959Z","type":"message"}
{"nick":"creationix","message":"and see if the tcp echo server gets fixed","date":"2012-03-22T20:22:45.865Z","type":"message"}
{"nick":"indutny","message":"Assertion failed: (!(handle->flags & UV_CLOSED)), function uv__finish_close, file src/unix/core.c, line 237.","date":"2012-03-22T20:22:52.949Z","type":"message"}
{"nick":"creationix","message":"that one I'm pretty sure is caused by moving structs","date":"2012-03-22T20:22:54.639Z","type":"message"}
{"nick":"creationix","message":"yep, I've had that issue in test-timer for a long time","date":"2012-03-22T20:23:18.400Z","type":"message"}
{"nick":"creationix","message":"no clue what's causing it","date":"2012-03-22T20:23:21.356Z","type":"message"}
{"nick":"creationix","message":"only calling close on the first timer object does it","date":"2012-03-22T20:23:29.974Z","type":"message"}
{"nick":"creationix","message":"the second one is fine","date":"2012-03-22T20:23:36.179Z","type":"message"}
{"nick":"indutny","message":"interesting","date":"2012-03-22T20:23:50.680Z","type":"message"}
{"nick":"creationix","message":"another unrelated weirdness, simple calling require in an empty candor script makes the libuv event loop block","date":"2012-03-22T20:24:18.092Z","type":"message"}
{"nick":"creationix","message":"even if it's a non uv module like string","date":"2012-03-22T20:24:26.121Z","type":"message"}
{"nick":"creationix","message":"try it, create a script with just 'global.prettyPrint(require\"string\"))'","date":"2012-03-22T20:24:59.226Z","type":"message"}
{"nick":"creationix","message":"but just 'global.prettyPrint(require)' is fine","date":"2012-03-22T20:25:23.498Z","type":"message"}
{"nick":"indutny","message":"one sec","date":"2012-03-22T20:25:23.942Z","type":"message"}
{"nick":"indutny","message":"odd","date":"2012-03-22T20:26:38.171Z","type":"message"}
{"nick":"indutny","message":"how is that related to uv?","date":"2012-03-22T20:26:42.868Z","type":"message"}
{"nick":"creationix","message":"no clue","date":"2012-03-22T20:26:53.976Z","type":"message"}
{"nick":"creationix","message":"but the process does hang","date":"2012-03-22T20:26:59.008Z","type":"message"}
{"nick":"alejandromg","reason":"Ping timeout: 260 seconds","date":"2012-03-22T20:27:12.314Z","type":"quit"}
{"nick":"creationix","message":"I don't even execute the modules till the first time they are required","date":"2012-03-22T20:27:22.231Z","type":"message"}
{"nick":"creationix","message":"it's just dormant code in the executable before that","date":"2012-03-22T20:27:30.405Z","type":"message"}
{"nick":"creationix","message":"and the prototypes are generated on the first time they are requested","date":"2012-03-22T20:27:42.067Z","type":"message"}
{"nick":"indutny","message":"k","date":"2012-03-22T20:27:55.404Z","type":"message"}
{"nick":"indutny","message":"I'll consider that tomorrow","date":"2012-03-22T20:27:59.890Z","type":"message"}
{"nick":"creationix","message":"so all of luv_* should be executed at all","date":"2012-03-22T20:28:00.091Z","type":"message"}
{"nick":"indutny","message":"going to sleep now","date":"2012-03-22T20:28:05.755Z","type":"message"}
{"nick":"indutny","message":"ttyl","date":"2012-03-22T20:28:07.298Z","type":"message"}
{"nick":"creationix","message":"*shouldn't","date":"2012-03-22T20:28:09.770Z","type":"message"}
{"nick":"indutny","new_nick":"indutny_sleeping","date":"2012-03-22T20:28:09.971Z","type":"nick"}
{"nick":"creationix","message":"ok, get some rest","date":"2012-03-22T20:28:12.661Z","type":"message"}
{"nick":"creationix","message":"yep, that fixed the tcp echo server","date":"2012-03-22T20:35:49.741Z","type":"message"}
{"nick":"indutny_sleeping","reason":"Read error: Connection timed out","date":"2012-03-22T20:52:34.000Z","type":"quit"}
{"nick":"indutny","date":"2012-03-22T20:59:27.290Z","type":"join"}
{"nick":"piscisaureus_","reason":"Ping timeout: 246 seconds","date":"2012-03-22T21:07:41.677Z","type":"quit"}
{"nick":"alejandromg","date":"2012-03-22T21:11:09.609Z","type":"join"}
{"nick":"alejandromg","reason":"Read error: Connection reset by peer","date":"2012-03-22T21:25:27.783Z","type":"quit"}
{"nick":"alejandromg","date":"2012-03-22T21:26:50.170Z","type":"join"}
{"nick":"creationix","message":"who needs python anyway :P","date":"2012-03-22T22:33:59.050Z","type":"message"}
{"nick":"creationix","message":"https://github.com/creationix/candor.io/commit/074b0223e3cf344427c9e5e518e57f06616ee05f","date":"2012-03-22T22:33:59.900Z","type":"message"}
{"nick":"alejandromg","reason":"Quit: #freenode","date":"2012-03-22T22:54:34.234Z","type":"quit"}
{"nick":"tilgovi","date":"2012-03-22T23:41:57.482Z","type":"join"}
{"nick":"tilgovi","reason":"Remote host closed the connection","date":"2012-03-22T23:59:23.233Z","type":"quit"}
