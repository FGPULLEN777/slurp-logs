{"nick":"d10n-work","reason":"Quit: Connection closed for inactivity","date":"2016-06-08T00:01:21.192Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-08T00:01:58.020Z","type":"join"}
{"nick":"m_gol","date":"2016-06-08T00:03:49.964Z","type":"join"}
{"nick":"bengo","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T00:14:05.993Z","type":"quit"}
{"nick":"bengo","date":"2016-06-08T00:25:58.302Z","type":"join"}
{"nick":"nuizzy","reason":"Quit: nuizzy","date":"2016-06-08T00:31:09.502Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T00:37:06.179Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T00:37:06.363Z","type":"part"}
{"nick":"bengo","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T00:51:10.829Z","type":"quit"}
{"nick":"BombStrike","reason":"Ping timeout: 240 seconds","date":"2016-06-08T00:58:41.220Z","type":"quit"}
{"nick":"BombStrike","date":"2016-06-08T01:04:09.239Z","type":"join"}
{"nick":"SomeKittens","date":"2016-06-08T01:36:40.207Z","type":"join"}
{"nick":"Lee1092","date":"2016-06-08T01:49:04.219Z","type":"join"}
{"nick":"indexzero__","date":"2016-06-08T03:23:53.232Z","type":"quit"}
{"nick":"indexzero","date":"2016-06-08T03:24:20.930Z","type":"join"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-06-08T03:27:06.701Z","type":"quit"}
{"nick":"sankha","reason":"Ping timeout: 240 seconds","date":"2016-06-08T03:43:21.255Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-08T03:43:23.440Z","type":"join"}
{"nick":"sankha","date":"2016-06-08T03:52:56.197Z","type":"join"}
{"nick":"thefourtheye___","date":"2016-06-08T03:56:03.010Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T04:12:26.815Z","type":"quit"}
{"nick":"addaleax","date":"2016-06-08T04:15:49.076Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T04:25:33.347Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T04:25:33.531Z","type":"part"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T04:45:56.384Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T04:55:02.009Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T04:55:02.192Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-08T04:55:14.702Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T04:55:14.886Z","type":"part"}
{"nick":"dbevenius|away","new_nick":"dbevenius","date":"2016-06-08T04:57:01.921Z","type":"nick"}
{"nick":"BridgeAR","date":"2016-06-08T05:03:34.705Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T05:08:37.905Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T05:08:38.088Z","type":"part"}
{"nick":"sankha","date":"2016-06-08T05:17:39.295Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 276 seconds","date":"2016-06-08T05:19:24.706Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T05:24:28.709Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T05:24:28.893Z","type":"part"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T05:26:41.814Z","type":"quit"}
{"nick":"sankha","date":"2016-06-08T05:33:33.652Z","type":"join"}
{"nick":"lpin","date":"2016-06-08T05:33:38.918Z","type":"join"}
{"nick":"seishun","date":"2016-06-08T05:42:20.371Z","type":"join"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-06-08T06:18:16.309Z","type":"quit"}
{"nick":"alrra","date":"2016-06-08T06:31:42.109Z","type":"join"}
{"nick":"mcollina","date":"2016-06-08T06:38:51.410Z","type":"join"}
{"nick":"yuval","date":"2016-06-08T06:39:44.208Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T06:40:51.349Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T06:40:51.533Z","type":"part"}
{"nick":"seishun","reason":"Ping timeout: 250 seconds","date":"2016-06-08T06:53:37.822Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T06:59:32.128Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T06:59:32.311Z","type":"part"}
{"nick":"addaleax","reason":"Ping timeout: 264 seconds","date":"2016-06-08T07:35:16.045Z","type":"quit"}
{"nick":"zz_r04r","new_nick":"r04r","date":"2016-06-08T07:40:13.502Z","type":"nick"}
{"nick":"SomeKittens","reason":"Quit: Connection closed for inactivity","date":"2016-06-08T07:44:19.476Z","type":"quit"}
{"nick":"yuval","reason":"Quit: leaving","date":"2016-06-08T07:44:21.695Z","type":"quit"}
{"nick":"yuval","date":"2016-06-08T07:44:43.126Z","type":"join"}
{"nick":"addaleax","date":"2016-06-08T07:59:54.074Z","type":"join"}
{"nick":"riju","date":"2016-06-08T08:11:06.229Z","type":"join"}
{"nick":"saghul_","date":"2016-06-08T08:40:10.180Z","type":"join"}
{"nick":"BridgeAR","date":"2016-06-08T08:51:45.370Z","type":"join"}
{"nick":"whitlockjc","reason":"Ping timeout: 240 seconds","date":"2016-06-08T08:52:01.226Z","type":"quit"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T08:55:03.298Z","type":"quit"}
{"nick":"BridgeAR","reason":"Client Quit","date":"2016-06-08T08:55:14.895Z","type":"quit"}
{"nick":"sankha","date":"2016-06-08T08:55:21.495Z","type":"join"}
{"nick":"BridgeAR","date":"2016-06-08T08:56:07.279Z","type":"join"}
{"nick":"whitlockjc","date":"2016-06-08T08:57:39.366Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 260 seconds","date":"2016-06-08T09:02:25.372Z","type":"quit"}
{"nick":"dbevenius","new_nick":"dbevenius|lunch","date":"2016-06-08T09:03:58.130Z","type":"nick"}
{"nick":"nodejs-gh","date":"2016-06-08T09:29:23.427Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T09:29:23.611Z","type":"part"}
{"nick":"seishun","date":"2016-06-08T09:35:21.444Z","type":"join"}
{"nick":"seishun","message":"dumb question: why is FastBuffer needed at all? couldn't Buffer inherit directly from Uint8Array?","date":"2016-06-08T09:36:10.129Z","type":"message"}
{"nick":"konobi","message":"rvagg: do the devtools list still include that git bisect functionality that tjf got working?","date":"2016-06-08T09:39:28.133Z","type":"message"}
{"nick":"konobi","message":"seishun: it's to do with memory pooling","date":"2016-06-08T09:39:53.221Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-06-08T09:43:12.030Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T09:43:12.214Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-08T09:43:22.164Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T09:43:22.384Z","type":"part"}
{"nick":"asap_","date":"2016-06-08T09:43:43.443Z","type":"join"}
{"nick":"seishun","message":"konobi: any more details?","date":"2016-06-08T09:43:43.695Z","type":"message"}
{"nick":"asap_","message":"Hi","date":"2016-06-08T09:43:47.267Z","type":"message"}
{"nick":"asap_","message":"i need help","date":"2016-06-08T09:43:51.949Z","type":"message"}
{"nick":"addaleax","message":"seishun: I think the only real difference is that Buffer(n) currently returns slices from the allocPool, and FastBuffer does not","date":"2016-06-08T09:44:31.885Z","type":"message"}
{"nick":"asap_","message":"function readBlob() { \tvar fs = require('fs'); \tconst js = require('./common.js'); \tconst electron=require('electron'); \tvar data=\"\"; try{ \t \tloc=\"Revenue.xml\"; \t if(file.fd!=null) {   \t f=fs.readFileSync(xmlpathlocal + seprator + locfilename,'utf8');     \talert(\"ok\"+f);  \talert(js.decode_data(window.atob(f))); \tparser = new DOMParser(); \tj=js.decode_data(window.atob(f));  \txmlDoc = parser.parseFromString(j,\"text/xml\");  \tx = xmlDoc.g","date":"2016-06-08T09:44:34.191Z","type":"message"}
{"nick":"asap_","message":"is there any way to wait a function while its using createwrite stream","date":"2016-06-08T09:45:04.044Z","type":"message"}
{"nick":"dbevenius|lunch","new_nick":"dbevenius","date":"2016-06-08T09:46:04.374Z","type":"nick"}
{"nick":"seishun","message":"addaleax: couldn't FastBuffer optionally return slices from allocPool?","date":"2016-06-08T09:46:17.738Z","type":"message"}
{"nick":"asap_","message":"i am not using buffer","date":"2016-06-08T09:46:51.701Z","type":"message"}
{"nick":"asap_","message":"I am using createwritestream","date":"2016-06-08T09:47:02.069Z","type":"message"}
{"nick":"addaleax","message":"asap_: sounds like you may want to peek into #node.js rather than here?","date":"2016-06-08T09:47:15.124Z","type":"message"}
{"nick":"pol123456","date":"2016-06-08T09:47:28.067Z","type":"join"}
{"nick":"asap_","message":"no","date":"2016-06-08T09:48:34.996Z","type":"message"}
{"nick":"asap_","message":"i am try to fetch a data from server and writing it into a local file then reading the same file","date":"2016-06-08T09:49:11.312Z","type":"message"}
{"nick":"asap_","message":"can you suggest me some working way","date":"2016-06-08T09:49:20.262Z","type":"message"}
{"nick":"addaleax","message":"seishun: https://github.com/nodejs/node/pull/6893#issuecomment-224402924 and below… I guess it could, but I see the point Trevor is making there","date":"2016-06-08T09:49:39.287Z","type":"message"}
{"nick":"seishun","message":"asap_: this channel is for node core development, #node.js is for node.js questions","date":"2016-06-08T09:50:11.345Z","type":"message"}
{"nick":"asap_","message":"sorry I just began","date":"2016-06-08T09:50:51.016Z","type":"message"}
{"nick":"asap_","message":"can you guide me","date":"2016-06-08T09:50:56.047Z","type":"message"}
{"nick":"seishun","message":"addaleax: that seems to address something else","date":"2016-06-08T09:51:50.807Z","type":"message"}
{"nick":"addaleax","message":"seishun: Well, .alloc() uses FastBuffer internally (in all cases)… Or maybe I am misunderstanding your original question?","date":"2016-06-08T09:54:14.707Z","type":"message"}
{"nick":"seishun","message":"addaleax: I'm basically asking why Buffer and FastBuffer need to be separate","date":"2016-06-08T09:55:09.217Z","type":"message"}
{"nick":"konobi","message":"seishun: new buffers are mapped to unused sections of the memory pool and unmarked accordingly... this avoids some severe overhead with malloc() on some platforms.","date":"2016-06-08T09:57:12.546Z","type":"message"}
{"nick":"seishun","message":"I mean, why couldn't Buffer be defined like: class Buffer extends Uint8Array { constructor(args){ /* same logic as the current Buffer construction, with calls to `new FastBuffer` replaced with `super ( ... )` */  } }","date":"2016-06-08T10:04:57.975Z","type":"message"}
{"nick":"konobi","message":"because then memory allocation is out of your handles","date":"2016-06-08T10:05:24.885Z","type":"message"}
{"nick":"konobi","message":"*hands","date":"2016-06-08T10:05:31.646Z","type":"message"}
{"nick":"addaleax","message":"hmmm not sure that’s true, nothing would stop us from creating slices of the allocPool with that","date":"2016-06-08T10:06:15.219Z","type":"message"}
{"nick":"seishun","message":"indeed","date":"2016-06-08T10:06:39.673Z","type":"message"}
{"nick":"addaleax","message":"but one thing that would definitely change in that case (although one can certainly work around it) is that `Buffer(n)` without the `new` wouldn’t work","date":"2016-06-08T10:06:41.944Z","type":"message"}
{"nick":"seishun","message":"if (!(this instanceof Buffer)) return new Buffer(arguments)","date":"2016-06-08T10:07:27.161Z","type":"message"}
{"nick":"addaleax","message":"seishun: heh, yeah, would be cool if that worked, but that’s no longer possible with ES6 classes","date":"2016-06-08T10:08:18.914Z","type":"message"}
{"nick":"seishun","message":"oh, TIL","date":"2016-06-08T10:09:36.247Z","type":"message"}
{"nick":"seishun","message":"was Buffer always callable without new, or is it an artifact of recent refactors?","date":"2016-06-08T10:10:35.676Z","type":"message"}
{"nick":"addaleax","message":"hm, quick check with nvm says it works at least since v0.6","date":"2016-06-08T10:11:21.440Z","type":"message"}
{"nick":"seishun","message":"I see","date":"2016-06-08T10:11:29.726Z","type":"message"}
{"nick":"JakeSays","reason":"Ping timeout: 244 seconds","date":"2016-06-08T10:16:09.964Z","type":"quit"}
{"nick":"rnchamberlain","date":"2016-06-08T10:16:26.479Z","type":"join"}
{"nick":"addaleax","message":"seishun: since it’s in your head too right now… do we actually need Buffer.prototype.slice anymore?","date":"2016-06-08T10:21:03.968Z","type":"message"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T10:21:44.235Z","type":"quit"}
{"nick":"sankha","date":"2016-06-08T10:22:29.386Z","type":"join"}
{"nick":"BridgeAR","date":"2016-06-08T10:22:58.758Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T10:26:50.665Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T10:26:50.849Z","type":"part"}
{"nick":"seishun","message":"addaleax: not if the logic is exactly the same as TypedArray.prototype.slice","date":"2016-06-08T10:27:32.064Z","type":"message"}
{"nick":"seishun","message":"it seems to be","date":"2016-06-08T10:30:05.105Z","type":"message"}
{"nick":"addaleax","message":"oh, it isn’t sorry… but it’s confusing ôo","date":"2016-06-08T10:31:01.228Z","type":"message"}
{"nick":"addaleax","message":"Uint8Array#slice copies, but Buffer#slice doesn’t","date":"2016-06-08T10:31:17.607Z","type":"message"}
{"nick":"asap_","reason":"Quit: Page closed","date":"2016-06-08T10:31:22.823Z","type":"quit"}
{"nick":"seishun","message":"oh","date":"2016-06-08T10:31:56.285Z","type":"message"}
{"nick":"addaleax","message":"and Uint8Array#subarray() applied to a Buffer does not return a Buffer","date":"2016-06-08T10:31:57.219Z","type":"message"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T10:32:33.111Z","type":"quit"}
{"nick":"seishun","message":"should it?","date":"2016-06-08T10:32:49.995Z","type":"message"}
{"nick":"konobi","message":"i suppose it could be cast somehow","date":"2016-06-08T10:33:52.131Z","type":"message"}
{"nick":"addaleax","message":"mh, I’m think it’s worth doing that… there’s a cost to changing the prototype, if you’re thinking about that","date":"2016-06-08T10:34:39.593Z","type":"message"}
{"nick":"konobi","message":"seishun: but yeah... using new() without a memory pool was slow","date":"2016-06-08T10:34:42.308Z","type":"message"}
{"nick":"konobi","message":"since they have the fun of living in c++ space too","date":"2016-06-08T10:35:38.118Z","type":"message"}
{"nick":"seishun","message":"I'm still not sure why map() returns a Buffer per the spec. SpeciesConstructor should return defaultConstructor since Buffer doesn't have a species property","date":"2016-06-08T10:36:20.495Z","type":"message"}
{"nick":"seishun","message":"http://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map","date":"2016-06-08T10:36:29.807Z","type":"message"}
{"nick":"konobi","message":"node's buffer came out of node, not a spec.","date":"2016-06-08T10:38:04.232Z","type":"message"}
{"nick":"addaleax","message":"konobi: well, Uint8Array#map does come from V8","date":"2016-06-08T10:38:36.507Z","type":"message"}
{"nick":"konobi","message":"sure, but it wasn't around when node started","date":"2016-06-08T10:39:04.876Z","type":"message"}
{"nick":"addaleax","message":"true :)","date":"2016-06-08T10:39:27.436Z","type":"message"}
{"nick":"addaleax","message":"seishun: https://github.com/nodejs/node/blob/d9e0d8b810d8b7dfc668563fde2933954e4042be/deps/v8/src/js/runtime.js#L88","date":"2016-06-08T10:40:30.376Z","type":"message"}
{"nick":"addaleax","message":"I’d read that as „because V8 wants it to be that way“","date":"2016-06-08T10:41:26.380Z","type":"message"}
{"nick":"konobi","message":"sounds about right for early node/v8 days","date":"2016-06-08T10:42:29.024Z","type":"message"}
{"nick":"sankha","date":"2016-06-08T10:52:03.409Z","type":"join"}
{"nick":"sankha","reason":"Ping timeout: 258 seconds","date":"2016-06-08T10:56:37.186Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-06-08T10:59:00.287Z","type":"join"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-06-08T10:59:05.329Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: farewell for now","date":"2016-06-08T10:59:24.942Z","type":"quit"}
{"nick":"thealphanerd","date":"2016-06-08T10:59:55.462Z","type":"join"}
{"nick":"asap","date":"2016-06-08T11:00:33.439Z","type":"join"}
{"nick":"johnDoe111","date":"2016-06-08T11:00:34.908Z","type":"join"}
{"nick":"asap","message":"help me","date":"2016-06-08T11:00:37.807Z","type":"message"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-06-08T11:00:59.245Z","type":"quit"}
{"nick":"addaleax","message":"asap: I still think #node.js would be a better place","date":"2016-06-08T11:01:32.309Z","type":"message"}
{"nick":"addaleax","message":"asap: or https://github.com/nodejs/help if you prefer that","date":"2016-06-08T11:01:43.159Z","type":"message"}
{"nick":"johnDoe111","date":"2016-06-08T11:10:38.565Z","type":"join"}
{"nick":"riju","reason":"Quit: Leaving","date":"2016-06-08T11:11:53.272Z","type":"quit"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-06-08T11:13:31.012Z","type":"quit"}
{"nick":"sankha","date":"2016-06-08T11:14:30.201Z","type":"join"}
{"nick":"johnDoe111","date":"2016-06-08T11:22:17.503Z","type":"join"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-06-08T11:23:18.515Z","type":"quit"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T11:29:50.659Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-06-08T11:30:27.223Z","type":"join"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-06-08T11:30:28.307Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-06-08T11:30:51.162Z","type":"join"}
{"nick":"sankha","date":"2016-06-08T11:31:42.275Z","type":"join"}
{"nick":"rnchamberlain","reason":"Ping timeout: 250 seconds","date":"2016-06-08T11:36:44.456Z","type":"quit"}
{"nick":"johnDoe111^","date":"2016-06-08T11:43:07.408Z","type":"join"}
{"nick":"johnDoe111^","reason":"Remote host closed the connection","date":"2016-06-08T11:43:08.662Z","type":"quit"}
{"nick":"johnDoe111^","date":"2016-06-08T11:45:42.228Z","type":"join"}
{"nick":"johnDoe111^","reason":"Remote host closed the connection","date":"2016-06-08T11:46:00.474Z","type":"quit"}
{"nick":"johnDoe111","reason":"Ping timeout: 244 seconds","date":"2016-06-08T11:51:14.005Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T11:59:56.154Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T11:59:56.334Z","type":"part"}
{"nick":"seishun","message":"Buffer[Symbol.species] === Buffer","date":"2016-06-08T12:04:36.695Z","type":"message"}
{"nick":"seishun","message":"now I'm even more confused","date":"2016-06-08T12:04:40.652Z","type":"message"}
{"nick":"seishun","message":"why does it work?","date":"2016-06-08T12:04:45.207Z","type":"message"}
{"nick":"addaleax","message":"seishun: Because that’s a getter that comes from the Uint8Array’s prototype chain","date":"2016-06-08T12:05:14.205Z","type":"message"}
{"nick":"addaleax","message":"(that does just `return this`)","date":"2016-06-08T12:05:32.084Z","type":"message"}
{"nick":"addaleax","message":"I was confused, too :D","date":"2016-06-08T12:05:39.486Z","type":"message"}
{"nick":"seishun","message":"ah","date":"2016-06-08T12:05:58.261Z","type":"message"}
{"nick":"seishun","message":"\"Return the this value.\"","date":"2016-06-08T12:06:08.850Z","type":"message"}
{"nick":"addaleax","message":"is that a quote from the spec or something…?","date":"2016-06-08T12:06:40.585Z","type":"message"}
{"nick":"addaleax","message":"I don’t know if it’s supposed to do this, btw, just that it currently does","date":"2016-06-08T12:07:00.642Z","type":"message"}
{"nick":"seishun","message":"it is","date":"2016-06-08T12:08:00.522Z","type":"message"}
{"nick":"johnDoe111","date":"2016-06-08T12:08:08.421Z","type":"join"}
{"nick":"seishun","message":"http://www.ecma-international.org/ecma-262/6.0/#sec-get-%typedarray%-@@species","date":"2016-06-08T12:08:08.421Z","type":"message"}
{"nick":"addaleax","message":"huh, fun","date":"2016-06-08T12:08:44.256Z","type":"message"}
{"nick":"seishun","message":">but apparently setting Symbol.species is not even necessary","date":"2016-06-08T12:10:36.476Z","type":"message"}
{"nick":"seishun","message":"you'd still need to set it if you wanted to prevent it from calling the deprecated constructor, wouldn't you?","date":"2016-06-08T12:10:55.029Z","type":"message"}
{"nick":"johnDoe111^","date":"2016-06-08T12:12:48.308Z","type":"join"}
{"nick":"addaleax","message":"seishun: ah, yes, you’re right","date":"2016-06-08T12:15:44.261Z","type":"message"}
{"nick":"seishun","reason":"Quit: Page closed","date":"2016-06-08T12:16:45.861Z","type":"quit"}
{"nick":"addaleax","message":"maybe one can get around all that in some way","date":"2016-06-08T12:17:04.549Z","type":"message"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2016-06-08T12:35:20.764Z","type":"nick"}
{"nick":"nodejs-gh","date":"2016-06-08T12:38:53.476Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T12:38:53.696Z","type":"part"}
{"nick":"rvagg","message":"\"species\" is such a horrible name, it's like they're not even pretending that they were out of options for a sensible name because of clashes with existing usage in userland or the spec","date":"2016-06-08T12:41:37.423Z","type":"message"}
{"nick":"asap","reason":"Quit: Page closed","date":"2016-06-08T12:52:59.814Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-08T12:55:32.849Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T13:00:03.122Z","type":"quit"}
{"nick":"17SAAEG7U","date":"2016-06-08T13:00:20.473Z","type":"join"}
{"nick":"17SAAEG7U","reason":"Remote host closed the connection","date":"2016-06-08T13:03:06.782Z","type":"quit"}
{"nick":"italoacasas","date":"2016-06-08T13:09:02.552Z","type":"join"}
{"nick":"sankha","date":"2016-06-08T13:11:56.926Z","type":"join"}
{"nick":"sgimeno","date":"2016-06-08T13:17:15.380Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T13:18:03.432Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T13:18:03.615Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-08T13:18:19.144Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T13:18:19.324Z","type":"part"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T13:23:05.908Z","type":"quit"}
{"nick":"washt","date":"2016-06-08T13:35:05.350Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T13:39:27.914Z","type":"quit"}
{"nick":"sankha","date":"2016-06-08T13:40:56.227Z","type":"join"}
{"nick":"italoacasas","date":"2016-06-08T13:43:17.357Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T13:52:37.130Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T13:52:37.310Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-08T13:52:58.418Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T13:52:58.598Z","type":"part"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-06-08T14:10:44.223Z","type":"quit"}
{"nick":"addaleax","reason":"Ping timeout: 250 seconds","date":"2016-06-08T14:10:47.136Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-08T14:12:15.704Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-08T14:12:51.289Z","type":"quit"}
{"nick":"johnDoe111","reason":"Ping timeout: 244 seconds","date":"2016-06-08T14:32:15.264Z","type":"quit"}
{"nick":"jasnell_","date":"2016-06-08T14:45:45.473Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-08T14:48:33.145Z","type":"quit"}
{"nick":"yuval","reason":"Quit: leaving","date":"2016-06-08T14:52:30.036Z","type":"quit"}
{"nick":"washt","message":"I've been using node for the past couple of months and am looking for a mentor for my first contribution. Am I in the right place?","date":"2016-06-08T14:57:46.370Z","type":"message"}
{"nick":"dbevenius","new_nick":"dbevenius|away","date":"2016-06-08T14:58:55.884Z","type":"nick"}
{"nick":"sankha","date":"2016-06-08T15:03:53.700Z","type":"join"}
{"nick":"jbergstroem","message":"washt: Absolutely. I would suggest that you file a PR using the template provided and go from there","date":"2016-06-08T15:06:14.735Z","type":"message"}
{"nick":"addaleax","date":"2016-06-08T15:07:52.819Z","type":"join"}
{"nick":"JakeSays","date":"2016-06-08T15:20:15.149Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T15:30:37.073Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T15:30:37.254Z","type":"part"}
{"nick":"washt","message":"jbergstroem: I should clarify. I am looking good first contribution to start. Issues on GH with this label seem to be stale.","date":"2016-06-08T15:30:57.474Z","type":"message"}
{"nick":"jbergstroem","message":"oh","date":"2016-06-08T15:31:04.165Z","type":"message"}
{"nick":"jbergstroem","message":"stale you say","date":"2016-06-08T15:31:11.473Z","type":"message"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-06-08T15:36:18.085Z","type":"quit"}
{"nick":"jbergstroem","message":"washt: hard to know where you feel proficient but if you check newer issues you usually get a bit of everything; be it low hanging fruit or stuff people put up just to not forget about it (read: me)","date":"2016-06-08T15:36:26.580Z","type":"message"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2016-06-08T15:48:13.211Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T15:52:01.104Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T15:52:01.285Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-08T15:52:19.713Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T15:52:19.893Z","type":"part"}
{"nick":"pol123456","reason":"Remote host closed the connection","date":"2016-06-08T16:21:44.503Z","type":"quit"}
{"nick":"jasnell_","reason":"Remote host closed the connection","date":"2016-06-08T16:26:50.468Z","type":"quit"}
{"nick":"ljharb","message":"rvagg: \"species\" is what it's called in smalltalk, which is where the concept originated","date":"2016-06-08T16:28:50.910Z","type":"message"}
{"nick":"washt","message":"jbergstroem: thanks!","date":"2016-06-08T16:31:07.509Z","type":"message"}
{"nick":"jasnell","date":"2016-06-08T16:32:12.916Z","type":"join"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-06-08T16:42:03.603Z","type":"quit"}
{"nick":"thefourtheye___","reason":"Quit: Connection closed for inactivity","date":"2016-06-08T16:50:32.991Z","type":"quit"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T16:58:02.428Z","type":"quit"}
{"nick":"lanceball","new_nick":"lance|afk","date":"2016-06-08T16:58:44.275Z","type":"nick"}
{"nick":"qard","date":"2016-06-08T16:58:46.545Z","type":"join"}
{"nick":"saghul_","date":"2016-06-08T17:02:16.105Z","type":"join"}
{"nick":"qard","reason":"Read error: Connection reset by peer","date":"2016-06-08T17:02:52.801Z","type":"quit"}
{"nick":"nuizzy","date":"2016-06-08T17:05:11.107Z","type":"join"}
{"nick":"italoacasas","date":"2016-06-08T17:08:31.196Z","type":"join"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-06-08T17:08:46.696Z","type":"quit"}
{"nick":"seishun","date":"2016-06-08T17:13:40.370Z","type":"join"}
{"nick":"seishun","message":"so, regarding calling Buffer without `new`... could we just export a dummy function that calls the real Buffer constructor that properly inherits from Uint8Array?","date":"2016-06-08T17:17:02.637Z","type":"message"}
{"nick":"addaleax","message":"seishun: I don’t know if that’s possible to integrate with `instanceof Buffer`…","date":"2016-06-08T17:17:39.613Z","type":"message"}
{"nick":"addaleax","message":"I think there’s a good chance you’d basically end up in the current Buffer/FastBuffer situation","date":"2016-06-08T17:17:59.287Z","type":"message"}
{"nick":"seishun","message":"instanceof just looks for Buffer.prototype somewhere in [[Prototype]] chain, right?","date":"2016-06-08T17:18:05.112Z","type":"message"}
{"nick":"bradleymeck","date":"2016-06-08T17:18:06.971Z","type":"join"}
{"nick":"addaleax","message":"I think so","date":"2016-06-08T17:18:55.578Z","type":"message"}
{"nick":"seishun","message":"so just do DummyBuffer.prototype = Buffer.prototype","date":"2016-06-08T17:19:02.074Z","type":"message"}
{"nick":"addaleax","message":"Hm yeah, might work…","date":"2016-06-08T17:19:32.597Z","type":"message"}
{"nick":"seishun","message":"bonus: the dummy function could be hard-deprecated without affecting Buffer#map and other inherited methods","date":"2016-06-08T17:20:05.167Z","type":"message"}
{"nick":"addaleax","message":"we’d probably still want to guarantee buffer.constructor === Buffer","date":"2016-06-08T17:20:48.156Z","type":"message"}
{"nick":"seishun","message":"hmm","date":"2016-06-08T17:21:12.890Z","type":"message"}
{"nick":"seishun","message":"that's a bit more complicated","date":"2016-06-08T17:22:03.029Z","type":"message"}
{"nick":"addaleax","message":"yeah, I think this is where one doesn’t get any further without Symbol.species","date":"2016-06-08T17:23:07.329Z","type":"message"}
{"nick":"seishun","message":"Symbol.species would help only with deprecation right?","date":"2016-06-08T17:24:41.129Z","type":"message"}
{"nick":"seishun","message":"as in, it wouldn't help clean up the complicated mess buffer.js currently is","date":"2016-06-08T17:24:58.689Z","type":"message"}
{"nick":"addaleax","message":"no, it would probably not make anything less complicated :D","date":"2016-06-08T17:25:15.772Z","type":"message"}
{"nick":"addaleax","message":"but yeah, I think with that you could actually do the deprecation","date":"2016-06-08T17:25:45.464Z","type":"message"}
{"nick":"addaleax","message":"as in, Buffer[Symbol.species] = FastBuffer might do enough magic for it all to work","date":"2016-06-08T17:26:02.829Z","type":"message"}
{"nick":"addaleax","message":"(I have not tried that out yet, though)","date":"2016-06-08T17:26:21.273Z","type":"message"}
{"nick":"bradleymeck","reason":"Ping timeout: 244 seconds","date":"2016-06-08T17:26:32.977Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-06-08T17:27:39.171Z","type":"join"}
{"nick":"bengo","date":"2016-06-08T17:34:28.906Z","type":"join"}
{"nick":"seishun","message":"now to figure out why subarray returns Uint8Array","date":"2016-06-08T17:36:41.613Z","type":"message"}
{"nick":"indutny","message":"seishun: of Buffer?","date":"2016-06-08T17:39:23.725Z","type":"message"}
{"nick":"indutny","message":"seishun: Buffer is Uint8Array","date":"2016-06-08T17:39:30.090Z","type":"message"}
{"nick":"seishun","message":"indutny: but Buffer#map returns Buffer","date":"2016-06-08T17:39:54.229Z","type":"message"}
{"nick":"seishun","message":"anyway figuring this out was easy https://github.com/nodejs/node/blob/d9e0d8b810d8b7dfc668563fde2933954e4042be/deps/v8/src/js/typedarray.js#L303-L304","date":"2016-06-08T17:40:07.197Z","type":"message"}
{"nick":"indutny","message":"who konsw!","date":"2016-06-08T17:40:09.855Z","type":"message"}
{"nick":"indutny","message":"knows*","date":"2016-06-08T17:40:13.179Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2016-06-08T17:40:26.078Z","type":"message"}
{"nick":"addaleax","message":"heh, that I did _not_ expect :D","date":"2016-06-08T17:40:44.477Z","type":"message"}
{"nick":"seishun","message":">or standardize the fix","date":"2016-06-08T17:42:43.068Z","type":"message"}
{"nick":"seishun","message":"why fix your implementation if you can just fix the standard instead? :D","date":"2016-06-08T17:43:23.180Z","type":"message"}
{"nick":"addaleax","message":"did you look into the mentioned bug?","date":"2016-06-08T17:45:02.510Z","type":"message"}
{"nick":"addaleax","message":"https://bugs.chromium.org/p/v8/issues/detail?id=4665","date":"2016-06-08T17:45:22.949Z","type":"message"}
{"nick":"addaleax","message":"it’s actually pretty node.js-related","date":"2016-06-08T17:45:31.683Z","type":"message"}
{"nick":"bengo","reason":"Ping timeout: 258 seconds","date":"2016-06-08T17:47:33.225Z","type":"quit"}
{"nick":"washt","reason":"Ping timeout: 260 seconds","date":"2016-06-08T17:48:35.384Z","type":"quit"}
{"nick":"washt","date":"2016-06-08T17:55:12.376Z","type":"join"}
{"nick":"johnDoe111","date":"2016-06-08T17:55:41.454Z","type":"join"}
{"nick":"seishun","message":"okay, so I assume trevnorris is aware of this","date":"2016-06-08T18:02:01.153Z","type":"message"}
{"nick":"trevnorris","message":"are we talking about needing to use \"class Buffer extends Uint8Array\", thus forcing the need to use \"new\", for compat w/ Uint8Array.prototype methods?","date":"2016-06-08T18:04:11.313Z","type":"message"}
{"nick":"addaleax","message":"nah, just about why .subarray() doesn’t conform to the spec and return a Buffer","date":"2016-06-08T18:05:05.545Z","type":"message"}
{"nick":"trevnorris","message":"ah, yeah. that thing.","date":"2016-06-08T18:05:28.444Z","type":"message"}
{"nick":"trevnorris","message":"but it's also important b/c users can't currently do \"class Foo extends Buffer\"","date":"2016-06-08T18:05:42.341Z","type":"message"}
{"nick":"trevnorris","message":"(there's an existing open ticket for that)","date":"2016-06-08T18:06:03.672Z","type":"message"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2016-06-08T18:07:14.739Z","type":"quit"}
{"nick":"johnDoe111","reason":"Ping timeout: 244 seconds","date":"2016-06-08T18:09:46.161Z","type":"quit"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2016-06-08T18:10:08.225Z","type":"nick"}
{"nick":"bengo","date":"2016-06-08T18:10:57.456Z","type":"join"}
{"nick":"Lee1092","reason":"Quit: Connection closed for inactivity","date":"2016-06-08T18:13:09.037Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T18:20:48.184Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T18:20:48.185Z","type":"part"}
{"nick":"jasnell","date":"2016-06-08T18:42:41.341Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T18:44:03.119Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T18:44:03.299Z","type":"part"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-08T18:47:18.773Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-08T18:49:18.087Z","type":"join"}
{"nick":"washt","reason":"Ping timeout: 276 seconds","date":"2016-06-08T18:56:27.341Z","type":"quit"}
{"nick":"washt","date":"2016-06-08T18:57:28.990Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T18:58:13.123Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T18:58:13.303Z","type":"part"}
{"nick":"washt","reason":"Client Quit","date":"2016-06-08T19:01:22.956Z","type":"quit"}
{"nick":"thealphanerd","message":"hey ofrobots you around to help with some changes to the inspector_agent?","date":"2016-06-08T19:07:33.955Z","type":"message"}
{"nick":"rueben_","date":"2016-06-08T19:12:33.659Z","type":"join"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T19:18:49.173Z","type":"quit"}
{"nick":"italoacasas","date":"2016-06-08T19:22:35.351Z","type":"join"}
{"nick":"seishun","message":"trevnorris: could you clarify what problems would `class Buffer extends Uint8Array` solve that can't be solved in any other way?","date":"2016-06-08T19:27:01.040Z","type":"message"}
{"nick":"seishun","message":"or maybe I should ask this on github","date":"2016-06-08T19:27:10.483Z","type":"message"}
{"nick":"rueben_","reason":"Quit: Ex-Chat","date":"2016-06-08T19:33:28.195Z","type":"quit"}
{"nick":"rueben_","date":"2016-06-08T19:33:41.397Z","type":"join"}
{"nick":"trevnorris","message":"seishun: it solves all the problems in the most direct way. out of curiosity, would symbol species fix the current inability to extend Buffer?","date":"2016-06-08T19:34:09.380Z","type":"message"}
{"nick":"BridgeAR","reason":"Ping timeout: 260 seconds","date":"2016-06-08T19:34:17.712Z","type":"quit"}
{"nick":"trevnorris","message":"oh, also, we can't deprecate Buffer b/c users need to be able to extend it.","date":"2016-06-08T19:34:27.868Z","type":"message"}
{"nick":"joshgav","date":"2016-06-08T19:36:21.964Z","type":"join"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T19:38:12.424Z","type":"quit"}
{"nick":"kenansulayman","reason":"Max SendQ exceeded","date":"2016-06-08T19:38:44.427Z","type":"quit"}
{"nick":"joshgav_","date":"2016-06-08T19:39:11.440Z","type":"join"}
{"nick":"italoacasas","date":"2016-06-08T19:39:24.614Z","type":"join"}
{"nick":"joshgav_","reason":"Client Quit","date":"2016-06-08T19:39:29.207Z","type":"quit"}
{"nick":"kenansulayman","date":"2016-06-08T19:39:42.568Z","type":"join"}
{"nick":"kenansulayman","new_nick":"Guest3535","date":"2016-06-08T19:40:06.132Z","type":"nick"}
{"nick":"ofrobots","message":"thealphanerd: I'm available now","date":"2016-06-08T19:41:35.712Z","type":"message"}
{"nick":"thealphanerd","message":"howdy!","date":"2016-06-08T19:41:41.094Z","type":"message"}
{"nick":"thealphanerd","message":"trying to dig into https://github.com/nodejs/node/issues/7227","date":"2016-06-08T19:42:09.558Z","type":"message"}
{"nick":"thealphanerd","message":"https://github.com/nodejs/node/issues/7227#issuecomment-224703186 is a good summary of where I am at right now","date":"2016-06-08T19:42:22.749Z","type":"message"}
{"nick":"rueben_","reason":"Quit: Ex-Chat","date":"2016-06-08T19:42:36.226Z","type":"quit"}
{"nick":"italoacasas","reason":"Client Quit","date":"2016-06-08T19:42:49.361Z","type":"quit"}
{"nick":"rueben_","date":"2016-06-08T19:43:31.338Z","type":"join"}
{"nick":"thealphanerd","message":"TLDR; SendTargentsListResponse prints the wrong response. There are a few changes that need to be made.. but one of them is printing the port. Since it is a static function it does not have access to the instance and can't get port_.","date":"2016-06-08T19:44:00.896Z","type":"message"}
{"nick":"italoacasas","date":"2016-06-08T19:44:05.284Z","type":"join"}
{"nick":"thealphanerd","message":"I'm trying to figure out how to propagate that data","date":"2016-06-08T19:44:25.505Z","type":"message"}
{"nick":"seishun","message":"trevnorris: what prevents extending Buffer now?","date":"2016-06-08T19:45:52.773Z","type":"message"}
{"nick":"martfors","date":"2016-06-08T19:46:17.997Z","type":"join"}
{"nick":"trevnorris","message":"seishun: any user defined methods in the class disappear after construction","date":"2016-06-08T19:46:53.702Z","type":"message"}
{"nick":"rueben_","reason":"Read error: Connection reset by peer","date":"2016-06-08T19:47:34.615Z","type":"quit"}
{"nick":"rueben_","date":"2016-06-08T19:48:31.497Z","type":"join"}
{"nick":"seishun","message":"trevnorris: I guess that's because Buffer redirects to Buffer.from or Buffer.alloc?","date":"2016-06-08T19:49:47.812Z","type":"message"}
{"nick":"trevnorris","message":"was like this before the new API","date":"2016-06-08T19:55:59.660Z","type":"message"}
{"nick":"trevnorris","message":"has to do w/ how we're messing w/ the prototype","date":"2016-06-08T19:56:10.229Z","type":"message"}
{"nick":"seishun","message":"right, before the new API it still did `new Uint8Array`","date":"2016-06-08T19:57:15.100Z","type":"message"}
{"nick":"ofrobots","message":"thealphanerd: There is only one caller of GetTargentsListResponse [sic], which itself has a single caller.","date":"2016-06-08T19:58:39.195Z","type":"message"}
{"nick":"ofrobots","message":"Maybe you add the port as an argument to GetTargentsListResponse and to RespondToGet?","date":"2016-06-08T19:59:08.991Z","type":"message"}
{"nick":"thealphanerd","message":"that's what I'm planning to do","date":"2016-06-08T19:59:18.383Z","type":"message"}
{"nick":"ofrobots","message":"sounds good!","date":"2016-06-08T19:59:24.420Z","type":"message"}
{"nick":"thealphanerd","message":"but since those are all static they do not have access to port_","date":"2016-06-08T19:59:27.508Z","type":"message"}
{"nick":"thealphanerd","message":"so I'm trying to figure out how to get the port from the handle","date":"2016-06-08T19:59:39.832Z","type":"message"}
{"nick":"ofrobots","message":"ah gotcha","date":"2016-06-08T19:59:50.273Z","type":"message"}
{"nick":"rueben_","reason":"Quit: Ex-Chat","date":"2016-06-08T20:00:12.328Z","type":"quit"}
{"nick":"rueben_","date":"2016-06-08T20:00:23.641Z","type":"join"}
{"nick":"seishun","message":"the only way to fix that is to not override `this` by returning an object from the constructor","date":"2016-06-08T20:00:38.482Z","type":"message"}
{"nick":"ofrobots","message":"thealphanerd: you do have the agent available in OnInspectorHandshakeIO","date":"2016-06-08T20:01:11.255Z","type":"message"}
{"nick":"ofrobots","message":"use agent->port_?","date":"2016-06-08T20:01:19.704Z","type":"message"}
{"nick":"thealphanerd","message":"ahhh","date":"2016-06-08T20:01:33.625Z","type":"message"}
{"nick":"thealphanerd","message":"ok awesome!","date":"2016-06-08T20:01:35.920Z","type":"message"}
{"nick":"thealphanerd","message":"this was exactly what I was hoping could be solved easily :P","date":"2016-06-08T20:01:45.389Z","type":"message"}
{"nick":"seishun","message":"trevnorris: so you want to write `class B extends Buffer { }`, then do `var b = new B(12)` and get an instance of B? I don't think that's compatible with using pooled allocation","date":"2016-06-08T20:06:34.066Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-06-08T20:12:34.381Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T20:12:34.562Z","type":"part"}
{"nick":"thealphanerd","message":"ofrobots https://github.com/nodejs/node/pull/7232","date":"2016-06-08T20:14:05.049Z","type":"message"}
{"nick":"seishun","message":"in any case, extending Buffer and calling `super` implicitly or explicitly means calling a deprecated constructor. So if we want to support extending Buffer we need to un-deprecate new Buffer(int)","date":"2016-06-08T20:15:51.190Z","type":"message"}
{"nick":"seishun","message":"tbh I don't see much use case to extending Buffers anyway. Seems really ugly and can be replaced with just wrapping a buffer","date":"2016-06-08T20:17:54.837Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 250 seconds","date":"2016-06-08T20:24:48.635Z","type":"quit"}
{"nick":"seishun","date":"2016-06-08T20:38:47.983Z","type":"join"}
{"nick":"bengo","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2016-06-08T20:42:21.805Z","type":"quit"}
{"nick":"trevnorris","message":"seishun: it wouldn't pool. the data allocation is passed to Uint8Array, then v8 does magic to make it look like Buffer. that part works today.","date":"2016-06-08T20:44:47.464Z","type":"message"}
{"nick":"trevnorris","message":"and it's not a deprecated constructor, and it's not your word on whether it should be extended or not. we've had issues posted about this.","date":"2016-06-08T20:45:29.210Z","type":"message"}
{"nick":"trevnorris","message":"the usage Buffer(arrayBuffer[, offset[, length ]]) was explicitly introduced so the constructor would be compatible with Uint8Array.","date":"2016-06-08T20:46:13.249Z","type":"message"}
{"nick":"trevnorris","message":"*note, deprecated as in Buffer will not be a function one day in the future.","date":"2016-06-08T20:46:30.944Z","type":"message"}
{"nick":"seishun","message":"deprecated as in deprecated in the docs","date":"2016-06-08T20:47:08.879Z","type":"message"}
{"nick":"trevnorris","message":"sure, yeah. only in docs.","date":"2016-06-08T20:47:24.413Z","type":"message"}
{"nick":"BridgeAR","date":"2016-06-08T20:48:36.232Z","type":"join"}
{"nick":"mcollina","date":"2016-06-08T20:50:01.950Z","type":"join"}
{"nick":"seishun","message":"not sure what you mean by \"it wouldn't pool\". It does pool currently","date":"2016-06-08T20:50:19.504Z","type":"message"}
{"nick":"trevnorris","message":"sorry. in the rewrite it wouldn't pool. it would also zero fill (doesn't do) and would require new (doesn't now)","date":"2016-06-08T20:52:44.942Z","type":"message"}
{"nick":"trevnorris","message":"all that other magic is left up to .from() and such.","date":"2016-06-08T20:53:12.508Z","type":"message"}
{"nick":"trevnorris","message":"the reason extended Buffer can pool today is from black magic. source should be changed to be a simple \"class Buffer extends Uint8Array\"","date":"2016-06-08T20:54:43.429Z","type":"message"}
{"nick":"seishun","message":"even if it's deprecated only in docs, don't you think careful users will avoid using it, and by extension, avoid extending Buffer?","date":"2016-06-08T21:00:58.053Z","type":"message"}
{"nick":"trevnorris","message":"no.","date":"2016-06-08T21:01:07.667Z","type":"message"}
{"nick":"trevnorris","message":"users want to extend their own class with all the Buffer goodies. and this is how it's done in es6.","date":"2016-06-08T21:01:36.629Z","type":"message"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T21:04:29.041Z","type":"quit"}
{"nick":"trevnorris","message":"also, if the Buffer constructor goes through all the necessary changes (require \"new\", always zero-fill, never pool, remove old allowed arguments such as strings) then it isn't really the same thing, and can most likely be brought back from deprecation.","date":"2016-06-08T21:07:35.763Z","type":"message"}
{"nick":"seishun","message":"ok, so perhaps we could hard-deprecate construction without `new` and old arguments first","date":"2016-06-08T21:08:45.606Z","type":"message"}
{"nick":"trevnorris","message":"sure thing. ah yeah. didn't think to lead off this way. so hard deprecation now, not with the plan to remove but to replace with the necessary changes. you'd be cool w/ that?","date":"2016-06-08T21:11:29.702Z","type":"message"}
{"nick":"italoacasas","date":"2016-06-08T21:13:28.805Z","type":"join"}
{"nick":"seishun","message":"wait, you mean hard deprecation for what? If you mean construction without \"new\", I thought the plan was to remove that eventually?","date":"2016-06-08T21:13:47.639Z","type":"message"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T21:21:33.072Z","type":"quit"}
{"nick":"italoacasas","date":"2016-06-08T21:21:59.236Z","type":"join"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2016-06-08T21:24:25.854Z","type":"quit"}
{"nick":"mcollina","date":"2016-06-08T21:24:47.467Z","type":"join"}
{"nick":"italoacasas","reason":"Client Quit","date":"2016-06-08T21:24:59.923Z","type":"quit"}
{"nick":"italoacasas","date":"2016-06-08T21:27:21.223Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T21:30:52.721Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T21:30:52.902Z","type":"part"}
{"nick":"seishun","reason":"Ping timeout: 250 seconds","date":"2016-06-08T21:40:38.533Z","type":"quit"}
{"nick":"lanceball","new_nick":"lance|afk","date":"2016-06-08T21:50:19.069Z","type":"nick"}
{"nick":"italoacasas","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-06-08T21:50:20.782Z","type":"quit"}
{"nick":"rueben_","reason":"Ping timeout: 240 seconds","date":"2016-06-08T21:53:41.166Z","type":"quit"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2016-06-08T21:59:57.161Z","type":"quit"}
{"nick":"martfors","reason":"Quit: Leaving","date":"2016-06-08T22:00:24.975Z","type":"quit"}
{"nick":"saghul_","date":"2016-06-08T22:04:46.554Z","type":"join"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-06-08T22:13:52.761Z","type":"quit"}
{"nick":"italoacasas","date":"2016-06-08T22:25:36.875Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T22:29:07.164Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T22:29:07.345Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-08T22:54:34.009Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T22:54:34.190Z","type":"part"}
{"nick":"r04r","new_nick":"zz_r04r","date":"2016-06-08T23:04:42.458Z","type":"nick"}
{"nick":"alrra","reason":"Quit: Connection closed for inactivity","date":"2016-06-08T23:12:46.089Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T23:26:22.395Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T23:26:22.755Z","type":"part"}
{"nick":"BridgeAR","reason":"Ping timeout: 240 seconds","date":"2016-06-08T23:28:01.278Z","type":"quit"}
{"nick":"BridgeAR","date":"2016-06-08T23:33:01.034Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T23:33:10.033Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T23:33:10.214Z","type":"part"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-06-08T23:38:31.074Z","type":"quit"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-06-08T23:40:45.205Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-08T23:41:23.108Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-08T23:41:23.286Z","type":"part"}
{"nick":"BridgeAR","reason":"Ping timeout: 264 seconds","date":"2016-06-08T23:46:40.045Z","type":"quit"}
{"nick":"BridgeAR","date":"2016-06-08T23:54:07.594Z","type":"join"}
{"nick":"rueben","date":"2016-06-08T23:56:28.784Z","type":"join"}
