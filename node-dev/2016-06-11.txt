{"nick":"r04r","new_nick":"zz_r04r","date":"2016-06-11T00:00:41.735Z","type":"nick"}
{"nick":"washt","reason":"Ping timeout: 258 seconds","date":"2016-06-11T00:01:17.181Z","type":"quit"}
{"nick":"kenansul-","reason":"Excess Flood","date":"2016-06-11T00:07:19.489Z","type":"quit"}
{"nick":"mcollina","date":"2016-06-11T00:07:21.228Z","type":"join"}
{"nick":"kenansulayman","date":"2016-06-11T00:09:33.498Z","type":"join"}
{"nick":"kenansulayman","new_nick":"Guest47115","date":"2016-06-11T00:09:56.950Z","type":"nick"}
{"nick":"mcollina","reason":"Ping timeout: 240 seconds","date":"2016-06-11T00:11:41.190Z","type":"quit"}
{"nick":"netsin","date":"2016-06-11T00:25:03.439Z","type":"join"}
{"nick":"jiggangalator","date":"2016-06-11T00:25:19.983Z","type":"join"}
{"nick":"Guest47115","reason":"Read error: Connection reset by peer","date":"2016-06-11T00:31:51.435Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-11T00:49:27.024Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T00:49:27.208Z","type":"part"}
{"nick":"johnDoe111","date":"2016-06-11T00:50:41.508Z","type":"join"}
{"nick":"johnDoe111","reason":"Ping timeout: 276 seconds","date":"2016-06-11T00:55:24.314Z","type":"quit"}
{"nick":"mcollina","date":"2016-06-11T01:03:32.016Z","type":"join"}
{"nick":"mcollina","reason":"Ping timeout: 244 seconds","date":"2016-06-11T01:07:49.956Z","type":"quit"}
{"nick":"likewhoa","reason":"Remote host closed the connection","date":"2016-06-11T01:08:49.615Z","type":"quit"}
{"nick":"joshgav","reason":"Ping timeout: 246 seconds","date":"2016-06-11T01:12:39.134Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-06-11T01:28:25.153Z","type":"join"}
{"nick":"johnDoe111","reason":"Ping timeout: 244 seconds","date":"2016-06-11T01:32:37.964Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-11T01:34:40.302Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-11T01:39:15.822Z","type":"quit"}
{"nick":"jiggangalator","reason":"Quit: Leaving","date":"2016-06-11T01:43:22.896Z","type":"quit"}
{"nick":"mcollina","date":"2016-06-11T02:04:57.947Z","type":"join"}
{"nick":"mcollina","reason":"Ping timeout: 244 seconds","date":"2016-06-11T02:09:18.971Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-06-11T02:37:43.127Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T02:37:43.348Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-11T02:37:54.699Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T02:37:54.882Z","type":"part"}
{"nick":"Lee1092","date":"2016-06-11T03:04:46.005Z","type":"join"}
{"nick":"johnDoe111","date":"2016-06-11T03:04:55.955Z","type":"join"}
{"nick":"johnDoe111","reason":"Ping timeout: 260 seconds","date":"2016-06-11T03:09:12.698Z","type":"quit"}
{"nick":"sankha","date":"2016-06-11T03:25:16.219Z","type":"join"}
{"nick":"jasnell","date":"2016-06-11T03:36:03.713Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-11T03:41:27.782Z","type":"quit"}
{"nick":"thefourtheye___","reason":"Quit: Connection closed for inactivity","date":"2016-06-11T04:20:34.340Z","type":"quit"}
{"nick":"BombStrike","reason":"Ping timeout: 240 seconds","date":"2016-06-11T04:23:41.225Z","type":"quit"}
{"nick":"Meow-J","reason":"Quit: Connection closed for inactivity","date":"2016-06-11T04:28:53.086Z","type":"quit"}
{"nick":"BombStrike","date":"2016-06-11T04:30:02.093Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T04:45:54.020Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T04:45:54.204Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-06-11T04:46:04.055Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T04:46:04.239Z","type":"part"}
{"nick":"sankha_","date":"2016-06-11T04:50:21.423Z","type":"join"}
{"nick":"sankha","reason":"Read error: Connection reset by peer","date":"2016-06-11T04:50:21.424Z","type":"quit"}
{"nick":"sankha_","reason":"Remote host closed the connection","date":"2016-06-11T04:57:12.436Z","type":"quit"}
{"nick":"sankha","date":"2016-06-11T04:58:12.415Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T04:58:49.691Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-06-11T04:58:49.874Z","type":"part"}
{"nick":"johnDoe111","date":"2016-06-11T05:06:21.516Z","type":"join"}
{"nick":"johnDoe111","reason":"Ping timeout: 276 seconds","date":"2016-06-11T05:11:30.320Z","type":"quit"}
{"nick":"Meow-J","date":"2016-06-11T05:21:23.204Z","type":"join"}
{"nick":"likewhoa","date":"2016-06-11T05:33:19.965Z","type":"join"}
{"nick":"jasnell","date":"2016-06-11T05:37:39.231Z","type":"join"}
{"nick":"lpin","date":"2016-06-11T05:41:51.399Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-11T05:41:55.509Z","type":"quit"}
{"nick":"robbyoconnor","reason":"Read error: Connection reset by peer","date":"2016-06-11T06:14:18.959Z","type":"quit"}
{"nick":"robbyoconnor","date":"2016-06-11T06:14:54.313Z","type":"join"}
{"nick":"robbyoconnor","reason":"Client Quit","date":"2016-06-11T06:14:58.511Z","type":"quit"}
{"nick":"alrra","date":"2016-06-11T06:39:44.023Z","type":"join"}
{"nick":"pudymody","date":"2016-06-11T06:53:04.325Z","type":"join"}
{"nick":"pudymody","reason":"Quit: Leaving","date":"2016-06-11T07:07:24.667Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-11T07:14:43.848Z","type":"join"}
{"nick":"johnDoe111","date":"2016-06-11T07:18:49.548Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-11T07:18:59.496Z","type":"quit"}
{"nick":"johnDoe111","reason":"Ping timeout: 276 seconds","date":"2016-06-11T07:25:24.292Z","type":"quit"}
{"nick":"matheusmoreira","date":"2016-06-11T07:26:52.468Z","type":"join"}
{"nick":"thefourtheye___","date":"2016-06-11T07:30:26.027Z","type":"join"}
{"nick":"mcollina","date":"2016-06-11T07:33:09.107Z","type":"join"}
{"nick":"matheusmoreira","message":"Hello! I was wondering if there are any news regarding PR #2133: https://github.com/nodejs/node/pull/2133","date":"2016-06-11T07:42:15.425Z","type":"message"}
{"nick":"matheusmoreira","message":"Fishrock123 mentioned a meta-tracking issue for the feature but it appears none have been created, and so I came here","date":"2016-06-11T07:43:33.858Z","type":"message"}
{"nick":"joshontheweb","date":"2016-06-11T07:46:03.164Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-11T08:11:11.478Z","type":"quit"}
{"nick":"addaleax","date":"2016-06-11T08:11:58.043Z","type":"join"}
{"nick":"sankha","date":"2016-06-11T08:12:10.220Z","type":"join"}
{"nick":"zz_r04r","new_nick":"r04r","date":"2016-06-11T08:12:59.032Z","type":"nick"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2016-06-11T08:13:37.759Z","type":"quit"}
{"nick":"sankha","reason":"Ping timeout: 240 seconds","date":"2016-06-11T08:16:33.920Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-11T08:22:01.116Z","type":"join"}
{"nick":"sankha","date":"2016-06-11T08:24:20.368Z","type":"join"}
{"nick":"joshontheweb","reason":"Quit: Computer has gone to sleep.","date":"2016-06-11T08:24:44.684Z","type":"quit"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-11T08:26:35.543Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-11T08:30:15.885Z","type":"join"}
{"nick":"joshontheweb","date":"2016-06-11T09:11:41.209Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 250 seconds","date":"2016-06-11T09:14:41.461Z","type":"quit"}
{"nick":"jasnell","date":"2016-06-11T09:16:46.691Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-11T09:25:42.810Z","type":"quit"}
{"nick":"sankha","date":"2016-06-11T09:27:57.884Z","type":"join"}
{"nick":"ilkka_","reason":"Quit: MAS server restart.","date":"2016-06-11T09:37:16.674Z","type":"quit"}
{"nick":"ilkka_","date":"2016-06-11T09:38:27.272Z","type":"join"}
{"nick":"johnDoe111","date":"2016-06-11T09:58:03.195Z","type":"join"}
{"nick":"johnDoe111","reason":"Ping timeout: 244 seconds","date":"2016-06-11T10:02:03.967Z","type":"quit"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-06-11T10:07:43.222Z","type":"quit"}
{"nick":"seishun","date":"2016-06-11T10:11:32.408Z","type":"join"}
{"nick":"seishun","message":"hey addaleax","date":"2016-06-11T10:34:25.334Z","type":"message"}
{"nick":"addaleax","message":"seishun: hi, what’s up? :)","date":"2016-06-11T10:34:45.304Z","type":"message"}
{"nick":"seishun","message":"so I was thinking, do we actually need to guarantee buffer.constructor == Buffer? http.Client doesn't for instance","date":"2016-06-11T10:35:45.707Z","type":"message"}
{"nick":"seishun","message":"although that thing is so ancient it's not even documented anymore","date":"2016-06-11T10:36:00.509Z","type":"message"}
{"nick":"thealphanerd","reason":"Quit: farewell for now","date":"2016-06-11T10:37:00.031Z","type":"quit"}
{"nick":"seishun","message":"as an experiment, I commented out the \"FastBuffer.prototype.constructor = Buffer;\" line and ran test, and only got failures caused by util.inspect returning a string with \"FastBuffer\" instead of \"Buffer\"","date":"2016-06-11T10:37:07.191Z","type":"message"}
{"nick":"thealphanerd","date":"2016-06-11T10:37:30.732Z","type":"join"}
{"nick":"seishun","message":"so I renamed Buffer into DummyBuffer and FastBuffer into Buffer and now all tests pass","date":"2016-06-11T10:37:48.006Z","type":"message"}
{"nick":"addaleax","message":"hm","date":"2016-06-11T10:38:49.094Z","type":"message"}
{"nick":"addaleax","message":"I guess the more important guarantee that we are making is that buffer instanceof Buffer still holds","date":"2016-06-11T10:39:05.820Z","type":"message"}
{"nick":"addaleax","message":"and that still does, right?","date":"2016-06-11T10:39:18.205Z","type":"message"}
{"nick":"seishun","message":"let me double check... (although I'm quite sure there are tests for that)","date":"2016-06-11T10:39:43.008Z","type":"message"}
{"nick":"seishun","message":"yeah it does","date":"2016-06-11T10:40:15.781Z","type":"message"}
{"nick":"addaleax","message":"Okay, I guess that would be possible in a semver-major change then","date":"2016-06-11T10:40:41.867Z","type":"message"}
{"nick":"seishun","message":"although apparently we're still blocked by 0.10 and 0.12 not having the new API though","date":"2016-06-11T10:41:59.961Z","type":"message"}
{"nick":"addaleax","message":"If you’re talking about Buffer.from & Buffer.alloc*, v4.x doesn’t have that yet either","date":"2016-06-11T10:42:27.296Z","type":"message"}
{"nick":"seishun","message":"yeah","date":"2016-06-11T10:42:44.226Z","type":"message"}
{"nick":"addaleax","message":"what would be the way to create Buffers you have in mind?","date":"2016-06-11T10:43:42.112Z","type":"message"}
{"nick":"addaleax","message":"like, what would be the goal relaxing the buffer.constructor === Buffer constraint?","date":"2016-06-11T10:44:03.739Z","type":"message"}
{"nick":"seishun","message":"hard-deprecating the old API","date":"2016-06-11T10:44:47.639Z","type":"message"}
{"nick":"seishun","message":"which is the first step towards user-extendable Buffer","date":"2016-06-11T10:45:07.651Z","type":"message"}
{"nick":"addaleax","message":"so what you’re having in mind is making the `Buffer` global that’s visible to userspace a deprecated wrapper around the “real” `Buffer`… right?","date":"2016-06-11T10:47:19.215Z","type":"message"}
{"nick":"seishun","message":"yep","date":"2016-06-11T10:47:41.665Z","type":"message"}
{"nick":"addaleax","message":"sounds feasible that way, yes","date":"2016-06-11T10:49:28.891Z","type":"message"}
{"nick":"addaleax","message":"but I guess that won’t happen at least until v8, right?","date":"2016-06-11T10:50:49.148Z","type":"message"}
{"nick":"seishun","message":"I'm not sure why people are mentioning v8.0 specifically","date":"2016-06-11T10:52:38.106Z","type":"message"}
{"nick":"seishun","message":"if we're waiting for EOL of 0.10 and 0.12, then it's whatever first major version to come out in 2017, isn't it?","date":"2016-06-11T10:53:32.094Z","type":"message"}
{"nick":"addaleax","message":"which would be v8, no?","date":"2016-06-11T10:54:45.211Z","type":"message"}
{"nick":"addaleax","message":"as in, v7 in October 2016 and v8 in April 2017","date":"2016-06-11T10:55:18.929Z","type":"message"}
{"nick":"matheusmoreira","reason":"Ping timeout: 250 seconds","date":"2016-06-11T10:55:28.469Z","type":"quit"}
{"nick":"BridgeAR","date":"2016-06-11T10:57:06.066Z","type":"join"}
{"nick":"seishun","message":"oh, I see now","date":"2016-06-11T10:57:12.845Z","type":"message"}
{"nick":"seishun","message":"well that means users won't be able to extend Buffer at least until October 2017","date":"2016-06-11T10:57:58.686Z","type":"message"}
{"nick":"addaleax","message":"i'm actually not sure how that's supposed to work in general","date":"2016-06-11T10:58:42.375Z","type":"message"}
{"nick":"seishun","message":"what exactly?","date":"2016-06-11T10:58:56.346Z","type":"message"}
{"nick":"addaleax","message":"like, if we're basically sticking to Buffer.from and Buffer.alloc, how are they supposed to extend the return value?","date":"2016-06-11T10:59:07.492Z","type":"message"}
{"nick":"addaleax","message":"or will they need their own versions of .from & the .alloc*s?","date":"2016-06-11T10:59:25.501Z","type":"message"}
{"nick":"seishun","message":"it seems the idea is that Buffer constructor would be un-deprecated and just call super(args...)","date":"2016-06-11T11:00:42.704Z","type":"message"}
{"nick":"seishun","message":"which means no string constructor, no construction without `new`, no pooling","date":"2016-06-11T11:01:24.582Z","type":"message"}
{"nick":"addaleax","message":"if those are the requirements, then yes, I guess it’s October 2017","date":"2016-06-11T11:03:00.201Z","type":"message"}
{"nick":"addaleax","message":"maybe I’m forgetting something, but the only thing that stops us from doing class Buffer extends Uint8Array { … } is that it would require `new`, right?","date":"2016-06-11T11:04:07.598Z","type":"message"}
{"nick":"seishun","message":"it depends. If we don't care whether Buffer can be extended, then pretty much yes","date":"2016-06-11T11:07:57.181Z","type":"message"}
{"nick":"seishun","message":"If we do, then we need to remove pooling and rewrite the string constructor, since it's currently done in C++ and overrides `this`","date":"2016-06-11T11:08:51.516Z","type":"message"}
{"nick":"seishun","message":"at least that's my understanding","date":"2016-06-11T11:08:58.449Z","type":"message"}
{"nick":"seishun","message":"*rewrite in JS","date":"2016-06-11T11:09:22.226Z","type":"message"}
{"nick":"addaleax","message":"Somewhat, yes, but not entirely… I think we could get by by using super() to get a slice of the pool in basically all cases","date":"2016-06-11T11:11:50.177Z","type":"message"}
{"nick":"addaleax","message":"for the string constructor that would mean splitting byte length counting + actually writing the string into two separate calls to C++, one before and one after super()","date":"2016-06-11T11:12:20.678Z","type":"message"}
{"nick":"BridgeAR","reason":"Quit: Leaving.","date":"2016-06-11T11:12:26.127Z","type":"quit"}
{"nick":"BridgeAR","date":"2016-06-11T11:13:07.176Z","type":"join"}
{"nick":"addaleax","message":"and it would be quite the rewrite of Buffer construction in general","date":"2016-06-11T11:13:09.193Z","type":"message"}
{"nick":"seishun","message":"super() would allocate new memory, not sure how you could get a slice of the pool that way","date":"2016-06-11T11:13:15.901Z","type":"message"}
{"nick":"addaleax","message":"super(n) would allocate new memory","date":"2016-06-11T11:13:36.975Z","type":"message"}
{"nick":"addaleax","message":"super(arrayBufferInstance, byteOffset, length) does not","date":"2016-06-11T11:13:44.787Z","type":"message"}
{"nick":"addaleax","message":"right?","date":"2016-06-11T11:13:54.995Z","type":"message"}
{"nick":"addaleax","message":"or does it?","date":"2016-06-11T11:14:01.522Z","type":"message"}
{"nick":"seishun","message":"I think that copies","date":"2016-06-11T11:14:09.352Z","type":"message"}
{"nick":"addaleax","message":"just tried it… I think it does not","date":"2016-06-11T11:14:49.355Z","type":"message"}
{"nick":"addaleax","message":"> a = new Uint8Array([1,2,3]); b = new Uint8Array(a.buffer, 0, 1); a[0] = 0xff; b","date":"2016-06-11T11:15:19.517Z","type":"message"}
{"nick":"addaleax","message":"Uint8Array [ 255 ]","date":"2016-06-11T11:15:21.010Z","type":"message"}
{"nick":"seishun","message":"indeed","date":"2016-06-11T11:16:41.737Z","type":"message"}
{"nick":"pol123456","date":"2016-06-11T11:19:50.453Z","type":"join"}
{"nick":"addaleax","message":"you don’t happen to know what super() is syntactic sugar for, do you?","date":"2016-06-11T11:22:39.688Z","type":"message"}
{"nick":"seishun","message":"no, but I can look it up","date":"2016-06-11T11:22:58.373Z","type":"message"}
{"nick":"seishun","message":"isn't it just parentClass.apply(this, args)?","date":"2016-06-11T11:26:11.129Z","type":"message"}
{"nick":"addaleax","message":"makes sense, yep","date":"2016-06-11T11:26:21.849Z","type":"message"}
{"nick":"addaleax","message":"but that doesn’t seem to work with these freshly subclassable native types :/","date":"2016-06-11T11:27:55.180Z","type":"message"}
{"nick":"addaleax","message":"Uint8Array.apply(this, [n]); // -> TypeError: Constructor Uint8Array requires 'new'","date":"2016-06-11T11:28:12.006Z","type":"message"}
{"nick":"addaleax","message":"soo… magic? :D","date":"2016-06-11T11:28:25.214Z","type":"message"}
{"nick":"seishun","message":"well, it calls [[Construct]] directly","date":"2016-06-11T11:29:04.141Z","type":"message"}
{"nick":"seishun","message":"so, not exactly syntactic sugar","date":"2016-06-11T11:29:47.941Z","type":"message"}
{"nick":"addaleax","message":"TIL…","date":"2016-06-11T11:30:50.620Z","type":"message"}
{"nick":"addaleax","message":"i’m just thinking, if our possible API goals are deprecating the old Buffer construction and making Buffer extensible, and they unavoidably clash, I think I might prefer dropping the deprecation","date":"2016-06-11T11:31:33.037Z","type":"message"}
{"nick":"addaleax","message":"instead of waiting a few years","date":"2016-06-11T11:31:39.207Z","type":"message"}
{"nick":"seishun","message":"fair enough, but that would mean duplicating construction from string and pooling for backward compatibility","date":"2016-06-11T11:36:15.285Z","type":"message"}
{"nick":"BridgeAR","reason":"Ping timeout: 258 seconds","date":"2016-06-11T11:50:27.175Z","type":"quit"}
{"nick":"addaleax","message":"I guess so, yes…","date":"2016-06-11T11:56:10.436Z","type":"message"}
{"nick":"johnDoe111","date":"2016-06-11T11:59:52.227Z","type":"join"}
{"nick":"johnDoe111","reason":"Ping timeout: 244 seconds","date":"2016-06-11T12:03:59.962Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 240 seconds","date":"2016-06-11T12:06:21.261Z","type":"quit"}
{"nick":"sankha","date":"2016-06-11T12:08:04.557Z","type":"join"}
{"nick":"sankha","reason":"Ping timeout: 276 seconds","date":"2016-06-11T12:12:42.297Z","type":"quit"}
{"nick":"seishun","date":"2016-06-11T12:20:10.086Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 240 seconds","date":"2016-06-11T12:36:21.152Z","type":"quit"}
{"nick":"seishun","date":"2016-06-11T12:36:59.181Z","type":"join"}
{"nick":"BridgeAR","date":"2016-06-11T12:38:42.975Z","type":"join"}
{"nick":"hswolff","reason":"Quit: ZNC - http://znc.in","date":"2016-06-11T12:57:51.193Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-06-11T13:00:57.972Z","type":"join"}
{"nick":"Lee1092","reason":"Quit: Connection closed for inactivity","date":"2016-06-11T13:03:10.145Z","type":"quit"}
{"nick":"johnDoe111","reason":"Ping timeout: 260 seconds","date":"2016-06-11T13:05:22.701Z","type":"quit"}
{"nick":"joshontheweb","reason":"Ping timeout: 244 seconds","date":"2016-06-11T13:56:58.318Z","type":"quit"}
{"nick":"joshonth_","date":"2016-06-11T13:57:10.662Z","type":"join"}
{"nick":"kenansulayman","date":"2016-06-11T14:08:48.332Z","type":"join"}
{"nick":"sankha","date":"2016-06-11T14:09:18.483Z","type":"join"}
{"nick":"kenansulayman","new_nick":"Guest18887","date":"2016-06-11T14:09:22.985Z","type":"nick"}
{"nick":"joshonth_","reason":"Ping timeout: 258 seconds","date":"2016-06-11T14:30:41.226Z","type":"quit"}
{"nick":"joshontheweb","date":"2016-06-11T14:31:00.917Z","type":"join"}
{"nick":"joshgav","date":"2016-06-11T14:38:08.816Z","type":"join"}
{"nick":"joshontheweb","reason":"Ping timeout: 240 seconds","date":"2016-06-11T14:42:01.277Z","type":"quit"}
{"nick":"joshontheweb","date":"2016-06-11T14:45:00.351Z","type":"join"}
{"nick":"bradleymeck","date":"2016-06-11T14:45:15.240Z","type":"join"}
{"nick":"joshonth_","date":"2016-06-11T14:55:02.967Z","type":"join"}
{"nick":"joshontheweb","reason":"Read error: Connection reset by peer","date":"2016-06-11T14:55:03.686Z","type":"quit"}
{"nick":"pol123456","reason":"Quit: Leaving","date":"2016-06-11T15:04:10.508Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-06-11T15:13:34.913Z","type":"join"}
{"nick":"ilbonte","date":"2016-06-11T15:14:55.047Z","type":"join"}
{"nick":"johnDoe111","reason":"Ping timeout: 260 seconds","date":"2016-06-11T15:20:07.703Z","type":"quit"}
{"nick":"mcollina","date":"2016-06-11T15:22:20.122Z","type":"join"}
{"nick":"ilbonte","reason":"Quit: Leaving","date":"2016-06-11T15:39:01.459Z","type":"quit"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2016-06-11T15:41:29.679Z","type":"quit"}
