{"nick":"marthinal","reason":"Quit: This computer has gone to sleep","date":"2017-12-14T00:08:56.058Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-14T00:48:48.491Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T01:01:21.173Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T01:01:21.280Z","type":"part"}
{"nick":"apapirovski","date":"2017-12-14T02:29:16.416Z","type":"join"}
{"nick":"mylesborins","reason":"*.net *.split","date":"2017-12-14T02:32:41.212Z","type":"quit"}
{"nick":"sergiocrisostomo","reason":"*.net *.split","date":"2017-12-14T02:32:41.740Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T02:33:58.678Z","type":"quit"}
{"nick":"mylesborins","date":"2017-12-14T02:36:25.771Z","type":"join"}
{"nick":"sergiocrisostomo","date":"2017-12-14T02:36:25.839Z","type":"join"}
{"nick":"bradleymeck","message":"TimothyGu: that issue can be fixed, it isn't really a limitation just a bu","date":"2017-12-14T02:41:25.665Z","type":"message"}
{"nick":"bradleymeck","message":"g","date":"2017-12-14T02:41:26.592Z","type":"message"}
{"nick":"TimothyGu","message":"bradleymeck: I called for ways to fix that in the ticket; no one commented about it","date":"2017-12-14T02:42:05.380Z","type":"message"}
{"nick":"bradleymeck","message":"i didn't see it / i've been in and out of surgery for past couple months so :shrug:","date":"2017-12-14T02:42:31.533Z","type":"message"}
{"nick":"TimothyGu","message":"in fact addaleax, benjamingr, and Qard said they prefer lexical scoped variables in REPL to be overwritable","date":"2017-12-14T02:43:00.435Z","type":"message"}
{"nick":"TimothyGu","message":"bradleymeck: awh I hope it went well.","date":"2017-12-14T02:43:17.165Z","type":"message"}
{"nick":"bradleymeck","message":"we can make that work too","date":"2017-12-14T02:43:34.569Z","type":"message"}
{"nick":"bradleymeck","message":"but they should become global properties, thats weird","date":"2017-12-14T02:43:46.582Z","type":"message"}
{"nick":"bradleymeck","message":"though I might suggest we move to v8::CompileFunctionInContext and just check for `return` statement usage","date":"2017-12-14T02:44:44.020Z","type":"message"}
{"nick":"TimothyGu","message":"also the transform basically changes all the const/let's in the transformed text to global assignment","date":"2017-12-14T02:44:49.653Z","type":"message"}
{"nick":"bradleymeck","message":"yes, thats basically what I'm going to undo","date":"2017-12-14T02:45:02.197Z","type":"message"}
{"nick":"bradleymeck","message":"I can fix it with `with` or v8::CompileFunctionInContext","date":"2017-12-14T02:45:13.172Z","type":"message"}
{"nick":"bradleymeck","message":"`with` however causes problems with `\"use strict\"`","date":"2017-12-14T02:45:38.916Z","type":"message"}
{"nick":"TimothyGu","message":"can you elaborate? take `const x = await 0` how would you transform that to with","date":"2017-12-14T02:45:53.391Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: ~ same as https://github.com/nodejs/node/pull/17285#issuecomment-351533959","date":"2017-12-14T02:46:42.538Z","type":"message"}
{"nick":"bradleymeck","message":"though using the C++ API will be better and avoid a call to `eval`","date":"2017-12-14T02:46:58.051Z","type":"message"}
{"nick":"TimothyGu","message":"bradleymeck: you do realize that the C++ API is literally the same thing as adding (function () { and }) thru JS right?","date":"2017-12-14T02:48:42.532Z","type":"message"}
{"nick":"TimothyGu","message":"and how would you treat const x = 0 \\r x = await 0?","date":"2017-12-14T02:49:38.099Z","type":"message"}
{"nick":"TimothyGu","message":"maybe I'm just not understanding the with thing fully","date":"2017-12-14T02:50:15.883Z","type":"message"}
{"nick":"bradleymeck","message":"x = await 0 is an error since I'll have made a const binding on the env record by that point","date":"2017-12-14T02:51:18.622Z","type":"message"}
{"nick":"bradleymeck","message":"the C++ API isn't exactly the same since it does have lexical variable injection","date":"2017-12-14T02:51:36.116Z","type":"message"}
{"nick":"bradleymeck","message":"you could `let x = await 0` and it would work fine under the rules i'm trying to gather in https://github.com/bmeck/js-repl-goal","date":"2017-12-14T02:52:20.527Z","type":"message"}
{"nick":"bradleymeck","message":"but if you  just assign to an immutable binding, that should fail","date":"2017-12-14T02:52:37.345Z","type":"message"}
{"nick":"bradleymeck","message":"why would it not fail if you declared it const?","date":"2017-12-14T02:52:46.482Z","type":"message"}
{"nick":"bradleymeck","message":"redeclare it","date":"2017-12-14T02:52:53.842Z","type":"message"}
{"nick":"TimothyGu","message":"because when the first statement executes x will be a const","date":"2017-12-14T02:53:46.666Z","type":"message"}
{"nick":"bradleymeck","message":"and so the binding is declared immutable","date":"2017-12-14T02:54:05.200Z","type":"message"}
{"nick":"TimothyGu","message":"yeah","date":"2017-12-14T02:54:09.385Z","type":"message"}
{"nick":"bradleymeck","message":"so, x = 0 on subsequent lines should fail","date":"2017-12-14T02:54:21.286Z","type":"message"}
{"nick":"TimothyGu","message":"but the transform that's going to be active for the second statement will translate the assignment to a Object.defineProperty","date":"2017-12-14T02:54:41.520Z","type":"message"}
{"nick":"TimothyGu","message":"I'm talking about the transform you made in https://github.com/nodejs/node/pull/17285#issuecomment-351533959","date":"2017-12-14T02:54:50.757Z","type":"message"}
{"nick":"bradleymeck","message":"const would not have a get/set, it is a value type non-live binding","date":"2017-12-14T02:55:19.005Z","type":"message"}
{"nick":"bradleymeck","message":"it would be a different descriptor type, with `{value, writable: false, configurable: true}`","date":"2017-12-14T02:55:45.524Z","type":"message"}
{"nick":"bradleymeck","message":"we could also implement it with get/set if we want a better custom error like \"REPL variable was declared `const`, you can redefine the variable using `let` or `var`\"","date":"2017-12-14T02:56:50.690Z","type":"message"}
{"nick":"bradleymeck","message":"that might even be preferable?","date":"2017-12-14T02:57:11.267Z","type":"message"}
{"nick":"TimothyGu","message":"So what you are saying is that we should either have all const (await or not) be immutable bindings, or all const be mutable?","date":"2017-12-14T02:58:26.405Z","type":"message"}
{"nick":"bradleymeck","message":"neither of those really","date":"2017-12-14T03:02:33.666Z","type":"message"}
{"nick":"bradleymeck","message":"i'm saying const bindings should always be immutable yes, but I am saying you can replace the binding with a new one (mutable or immutable)","date":"2017-12-14T03:02:59.377Z","type":"message"}
{"nick":"bradleymeck","message":"I'm still gathering exact use case details, but at the very least globals should not be created","date":"2017-12-14T03:04:15.135Z","type":"message"}
{"nick":"bradleymeck","message":"it gets really strange, `const x = 1;` makes a mutable global and never does lexical stuff, but `const x = 1; const x = 2;` is a syntax error, which acts like it was a real binding","date":"2017-12-14T03:05:46.267Z","type":"message"}
{"nick":"TimothyGu","message":"in any case - patch welcome","date":"2017-12-14T03:08:20.231Z","type":"message"}
{"nick":"bradleymeck","message":"sorry, `const x = 1;` does make a lexical binding, `const x = 1; await 0` is the global","date":"2017-12-14T03:08:32.723Z","type":"message"}
{"nick":"bradleymeck","message":"yup, will PR once I finish checking stuff","date":"2017-12-14T03:08:52.624Z","type":"message"}
{"nick":"d10n-work","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T03:34:33.068Z","type":"quit"}
{"nick":"apapirovski","reason":"Quit: Leaving...","date":"2017-12-14T03:35:42.395Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-14T04:13:40.013Z","type":"quit"}
{"nick":"BridgeAR","date":"2017-12-14T04:27:16.238Z","type":"join"}
{"nick":"not-an-aardvark","date":"2017-12-14T04:38:29.485Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T04:42:36.856Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T04:42:37.043Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T04:46:55.382Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T04:46:55.530Z","type":"part"}
{"nick":"dave0x6d","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T05:04:26.727Z","type":"quit"}
{"nick":"dave0x6d","date":"2017-12-14T05:32:17.136Z","type":"join"}
{"nick":"floatleft","reason":"Read error: Connection reset by peer","date":"2017-12-14T05:35:50.337Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-14T05:36:02.556Z","type":"join"}
{"nick":"howdoi","date":"2017-12-14T06:03:44.131Z","type":"join"}
{"nick":"sgimeno","reason":"Ping timeout: 255 seconds","date":"2017-12-14T06:17:53.123Z","type":"quit"}
{"nick":"sgimeno","date":"2017-12-14T06:18:37.809Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T06:26:03.165Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T06:26:03.165Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T06:26:22.197Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T06:26:22.424Z","type":"part"}
{"nick":"BridgeAR","reason":"Quit: Leaving.","date":"2017-12-14T06:38:40.644Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T06:57:58.315Z","type":"quit"}
{"nick":"marthinal","date":"2017-12-14T07:26:17.276Z","type":"join"}
{"nick":"marthinal","reason":"Client Quit","date":"2017-12-14T07:28:10.597Z","type":"quit"}
{"nick":"marthinal","date":"2017-12-14T07:30:41.563Z","type":"join"}
{"nick":"marthinal","reason":"Quit: This computer has gone to sleep","date":"2017-12-14T07:50:08.566Z","type":"quit"}
{"nick":"DavidCai","date":"2017-12-14T07:56:13.013Z","type":"join"}
{"nick":"dave0x6d","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T08:01:54.506Z","type":"quit"}
{"nick":"marthinal","date":"2017-12-14T08:14:22.523Z","type":"join"}
{"nick":"marthinal","reason":"Client Quit","date":"2017-12-14T08:15:37.788Z","type":"quit"}
{"nick":"marthinal","date":"2017-12-14T08:19:03.995Z","type":"join"}
{"nick":"marthinal","reason":"Quit: This computer has gone to sleep","date":"2017-12-14T08:25:54.574Z","type":"quit"}
{"nick":"marthinal","date":"2017-12-14T08:42:16.733Z","type":"join"}
{"nick":"dave0x6d","date":"2017-12-14T08:47:40.283Z","type":"join"}
{"nick":"marthinal","reason":"Quit: This computer has gone to sleep","date":"2017-12-14T08:51:10.274Z","type":"quit"}
{"nick":"marthinal","date":"2017-12-14T08:52:36.069Z","type":"join"}
{"nick":"marthinal","reason":"Client Quit","date":"2017-12-14T08:52:36.138Z","type":"quit"}
{"nick":"seishun","date":"2017-12-14T09:43:13.427Z","type":"join"}
{"nick":"DavidCai","reason":"Ping timeout: 260 seconds","date":"2017-12-14T10:06:40.039Z","type":"quit"}
{"nick":"BridgeAR","date":"2017-12-14T10:32:49.328Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T10:35:40.828Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T10:35:41.137Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T10:51:40.803Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T10:51:40.872Z","type":"part"}
{"nick":"dave0x6d","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T10:51:54.252Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-12-14T11:25:07.371Z","type":"quit"}
{"nick":"mylesborins","date":"2017-12-14T11:25:38.095Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T11:31:16.663Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T11:31:16.771Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T12:08:17.747Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T12:08:17.855Z","type":"part"}
{"nick":"floatleft","reason":"Ping timeout: 256 seconds","date":"2017-12-14T12:14:44.093Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-14T12:15:15.059Z","type":"join"}
{"nick":"floatleft","reason":"Ping timeout: 240 seconds","date":"2017-12-14T12:21:57.786Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-14T12:22:08.567Z","type":"join"}
{"nick":"BridgeAR","reason":"Quit: Leaving.","date":"2017-12-14T12:29:46.303Z","type":"quit"}
{"nick":"ZeZu","reason":"Ping timeout: 264 seconds","date":"2017-12-14T12:48:22.332Z","type":"quit"}
{"nick":"ZeZu","date":"2017-12-14T12:50:50.913Z","type":"join"}
{"nick":"bradleymeck","date":"2017-12-14T13:02:29.428Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-14T13:15:01.263Z","type":"quit"}
{"nick":"floatleft","reason":"Read error: Connection reset by peer","date":"2017-12-14T13:35:49.595Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-14T13:36:04.751Z","type":"join"}
{"nick":"floatleft","reason":"Ping timeout: 260 seconds","date":"2017-12-14T13:40:21.657Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-14T13:40:36.578Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T13:43:37.090Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T13:43:37.195Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T13:44:50.432Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T13:44:50.501Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T13:45:00.091Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T13:45:00.092Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T13:45:14.830Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T13:45:15.098Z","type":"part"}
{"nick":"bradleymeck","date":"2017-12-14T14:12:20.945Z","type":"join"}
{"nick":"apapirovski","date":"2017-12-14T14:22:47.272Z","type":"join"}
{"nick":"apapirovski","reason":"Remote host closed the connection","date":"2017-12-14T14:26:28.147Z","type":"quit"}
{"nick":"nodejs-gh","date":"2017-12-14T14:27:41.456Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T14:27:41.605Z","type":"part"}
{"nick":"apapirovski","date":"2017-12-14T14:45:58.497Z","type":"join"}
{"nick":"bradleymeck","message":"TimothyGu: it isn't complete/working but the idea is there for REPL stuff in https://github.com/bmeck/node/commit/42e8c0e33273c35d4d70e5ff5e232a1b4cceb383","date":"2017-12-14T14:51:01.726Z","type":"message"}
{"nick":"bradleymeck","message":"found a couple more oddities","date":"2017-12-14T14:51:06.710Z","type":"message"}
{"nick":"bradleymeck","message":"not super happy about using hygenic identifier generation... but it seems worthwil","date":"2017-12-14T14:51:38.803Z","type":"message"}
{"nick":"bradleymeck","message":"e","date":"2017-12-14T14:51:40.726Z","type":"message"}
{"nick":"floatleft","reason":"Ping timeout: 256 seconds","date":"2017-12-14T14:55:39.489Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-14T14:56:25.717Z","type":"join"}
{"nick":"maclover7","message":"FYI: the github bot appears to be completely down right now, tracking issue is https://github.com/nodejs/build/issues/1045","date":"2017-12-14T15:01:25.123Z","type":"message"}
{"nick":"apapirovski","message":"A bunch of our test systems are also down, including all of the Windows ones","date":"2017-12-14T15:27:24.102Z","type":"message"}
{"nick":"evanlucas","date":"2017-12-14T15:28:20.238Z","type":"join"}
{"nick":"AtumT","date":"2017-12-14T16:16:35.234Z","type":"join"}
{"nick":"mhdawson","message":"See issue for more info, but all of our rackspace machines are currently suspended","date":"2017-12-14T16:41:20.087Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-14T16:42:51.043Z","type":"quit"}
{"nick":"apapirovski","message":"mhdawson: yep, saw that. thanks for following up on it!","date":"2017-12-14T16:50:02.232Z","type":"message"}
{"nick":"nodejs-gh","date":"2017-12-14T17:14:04.495Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T17:14:04.599Z","type":"part"}
{"nick":"ChALkeR","reason":"Ping timeout: 272 seconds","date":"2017-12-14T17:19:38.152Z","type":"quit"}
{"nick":"reydelcompas","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T17:34:27.810Z","type":"quit"}
{"nick":"lpin","date":"2017-12-14T17:36:15.273Z","type":"join"}
{"nick":"ChALkeR","date":"2017-12-14T17:45:02.746Z","type":"join"}
{"nick":"BridgeAR","date":"2017-12-14T17:47:49.449Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T17:48:49.467Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T17:48:49.616Z","type":"part"}
{"nick":"bradleymeck","date":"2017-12-14T17:53:44.393Z","type":"join"}
{"nick":"obensource","reason":"Ping timeout: 255 seconds","date":"2017-12-14T18:11:35.100Z","type":"quit"}
{"nick":"nodejs-gh","date":"2017-12-14T18:14:07.181Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T18:14:07.249Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T18:17:47.654Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T18:17:47.722Z","type":"part"}
{"nick":"d10n-work","date":"2017-12-14T18:18:16.341Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T18:18:25.459Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T18:18:25.639Z","type":"part"}
{"nick":"apapirovski","reason":"Remote host closed the connection","date":"2017-12-14T18:57:33.203Z","type":"quit"}
{"nick":"apapirovski","date":"2017-12-14T18:58:08.363Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T18:59:30.731Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T18:59:30.732Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T19:01:30.487Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T19:01:31.362Z","type":"part"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2017-12-14T19:02:10.229Z","type":"quit"}
{"nick":"bradleymeck","message":"TimothyGu: is the intention of your stuff to await the completion value as well if `await` is in the REPL input?","date":"2017-12-14T19:04:56.861Z","type":"message"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2017-12-14T19:06:04.495Z","type":"quit"}
{"nick":"AtumT","date":"2017-12-14T19:07:25.494Z","type":"join"}
{"nick":"AtumT_","date":"2017-12-14T19:19:11.581Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2017-12-14T19:19:45.292Z","type":"quit"}
{"nick":"apapirovski","reason":"Remote host closed the connection","date":"2017-12-14T19:25:14.044Z","type":"quit"}
{"nick":"bradleymeck","message":"does anyone know what REPLServer.lines is supposed to represent","date":"2017-12-14T19:25:45.552Z","type":"message"}
{"nick":"bradleymeck","message":"the history it looks like?","date":"2017-12-14T19:25:53.699Z","type":"message"}
{"nick":"dave0x6d","date":"2017-12-14T19:39:08.607Z","type":"join"}
{"nick":"apapirovski","date":"2017-12-14T19:44:18.503Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 248 seconds","date":"2017-12-14T19:54:09.409Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-12-14T19:59:41.185Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T20:04:52.153Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T20:04:52.222Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T20:25:24.451Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T20:25:24.451Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-14T20:38:21.221Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T20:38:21.290Z","type":"part"}
{"nick":"TimothyGu","message":"bradleymeck: yes that is my intention","date":"2017-12-14T20:58:51.412Z","type":"message"}
{"nick":"bradleymeck","message":"ok, will have to change https://github.com/bmeck/js-repl-goal","date":"2017-12-14T20:59:09.660Z","type":"message"}
{"nick":"TimothyGu","message":"but only for things like \"await promise\" not \"const func = async () => { await 0; }\" if that's what you're referring to","date":"2017-12-14T20:59:14.465Z","type":"message"}
{"nick":"bradleymeck","message":"I was trying to avoid auto unboxing thenables","date":"2017-12-14T20:59:18.888Z","type":"message"}
{"nick":"bradleymeck","message":"my branch is like 90% done but races around pausing are confusing me","date":"2017-12-14T20:59:56.353Z","type":"message"}
{"nick":"TimothyGu","message":"so this is more of a spec question, but is it impossible for the return value of any await to have a then property?","date":"2017-12-14T20:59:59.385Z","type":"message"}
{"nick":"TimothyGu","message":"yeah pausing is the main difficult part","date":"2017-12-14T21:00:08.659Z","type":"message"}
{"nick":"bradleymeck","message":"yea, it is impossible for any promise to resolve to a thenable","date":"2017-12-14T21:00:30.493Z","type":"message"}
{"nick":"bradleymeck","message":"including await","date":"2017-12-14T21:00:35.840Z","type":"message"}
{"nick":"TimothyGu","message":"heh","date":"2017-12-14T21:00:44.345Z","type":"message"}
{"nick":"bradleymeck","message":"so I would prefer not to unbox","date":"2017-12-14T21:01:01.464Z","type":"message"}
{"nick":"srl295","date":"2017-12-14T21:01:06.348Z","type":"join"}
{"nick":"bradleymeck","message":"so I could actually have thenables set to `_`","date":"2017-12-14T21:01:15.905Z","type":"message"}
{"nick":"TimothyGu","message":"so how does import() work with \"then\"-named export then?","date":"2017-12-14T21:01:32.627Z","type":"message"}
{"nick":"bradleymeck","message":"some weird stuff happens with `export function then() {}` too","date":"2017-12-14T21:01:34.994Z","type":"message"}
{"nick":"TimothyGu","message":"forgive my pun","date":"2017-12-14T21:01:46.036Z","type":"message"}
{"nick":"bradleymeck","message":"import returns the result of calling the thenable module namespace","date":"2017-12-14T21:01:49.111Z","type":"message"}
{"nick":"bradleymeck","message":"so `export async function then() {return 'yolo'}` will have an `import('./oh-god-why') === 'yolo'`","date":"2017-12-14T21:02:19.875Z","type":"message"}
{"nick":"bradleymeck","message":"await import*","date":"2017-12-14T21:02:25.527Z","type":"message"}
{"nick":"TimothyGu","message":"that's sad","date":"2017-12-14T21:02:32.269Z","type":"message"}
{"nick":"TimothyGu","message":"we should inform linter makers to catch that","date":"2017-12-14T21:02:53.782Z","type":"message"}
{"nick":"bradleymeck","message":"you can effectively ban dynaic imports of your module though ;p","date":"2017-12-14T21:02:55.816Z","type":"message"}
{"nick":"bradleymeck","message":"dynamic","date":"2017-12-14T21:03:06.047Z","type":"message"}
{"nick":"TimothyGu","message":"that's true","date":"2017-12-14T21:03:13.407Z","type":"message"}
{"nick":"bradleymeck","message":"so... I prefer leaving it boxed","date":"2017-12-14T21:03:15.172Z","type":"message"}
{"nick":"bradleymeck","message":"but i can change my branch to unbox","date":"2017-12-14T21:03:22.414Z","type":"message"}
{"nick":"TimothyGu","message":"so what kind of boxed thing do you get?","date":"2017-12-14T21:04:10.239Z","type":"message"}
{"nick":"TimothyGu","message":"you said promise can't contain an object with \"then\"","date":"2017-12-14T21:04:24.397Z","type":"message"}
{"nick":"bradleymeck","message":"single item array https://github.com/bmeck/node/blob/env-record-repl-await/lib/internal/repl/await.js#L240","date":"2017-12-14T21:04:49.207Z","type":"message"}
{"nick":"TimothyGu","message":"ah","date":"2017-12-14T21:05:08.630Z","type":"message"}
{"nick":"bradleymeck","message":"gets unboxed by repl server as property access instead of using a resolve mechanism","date":"2017-12-14T21:05:08.631Z","type":"message"}
{"nick":"TimothyGu","message":"I think I'd prefer it to be unboxed then, closer to what you actually get with await in an async function","date":"2017-12-14T21:05:37.363Z","type":"message"}
{"nick":"bradleymeck","message":"that means you can never have a repl result that has a .then function","date":"2017-12-14T21:05:54.231Z","type":"message"}
{"nick":"TimothyGu","message":"yup","date":"2017-12-14T21:06:14.974Z","type":"message"}
{"nick":"bradleymeck","message":"so no promises","date":"2017-12-14T21:06:20.775Z","type":"message"}
{"nick":"bradleymeck","message":"I also removed the only act async if `await` is in the input","date":"2017-12-14T21:06:39.077Z","type":"message"}
{"nick":"TimothyGu","message":"I wouldn't expect \"await promise\" to give me me another promise in the first place","date":"2017-12-14T21:06:45.658Z","type":"message"}
{"nick":"bradleymeck","message":"await promise won't give you a promise","date":"2017-12-14T21:06:56.226Z","type":"message"}
{"nick":"bradleymeck","message":"this is about the completion values","date":"2017-12-14T21:07:04.456Z","type":"message"}
{"nick":"bradleymeck","message":"`> Promise.resolve(1)`","date":"2017-12-14T21:07:14.925Z","type":"message"}
{"nick":"TimothyGu","message":"oh","date":"2017-12-14T21:07:25.007Z","type":"message"}
{"nick":"bradleymeck","message":"I'm stating that `_` should be a promise","date":"2017-12-14T21:07:27.684Z","type":"message"}
{"nick":"TimothyGu","message":"yes to that","date":"2017-12-14T21:07:45.482Z","type":"message"}
{"nick":"bradleymeck","message":"okies","date":"2017-12-14T21:07:49.849Z","type":"message"}
{"nick":"TimothyGu","message":"I thought we were talking about the results of await all along lol","date":"2017-12-14T21:08:05.795Z","type":"message"}
{"nick":"bradleymeck","message":"ah","date":"2017-12-14T21:08:29.749Z","type":"message"}
{"nick":"TimothyGu","message":"\"I also removed the only act async if `await` is in the input\" why's that?","date":"2017-12-14T21:09:27.350Z","type":"message"}
{"nick":"bradleymeck","message":"things get super weird if the input acts diff","date":"2017-12-14T21:09:40.796Z","type":"message"}
{"nick":"bradleymeck","message":"compare `> if (true) 1;` and `> if (true) await 1;`","date":"2017-12-14T21:10:00.596Z","type":"message"}
{"nick":"bradleymeck","message":"both should have _ === 1","date":"2017-12-14T21:10:11.061Z","type":"message"}
{"nick":"bradleymeck","message":"but only the first does","date":"2017-12-14T21:10:17.570Z","type":"message"}
{"nick":"TimothyGu","message":"I didn't realize that","date":"2017-12-14T21:10:32.213Z","type":"message"}
{"nick":"TimothyGu","message":"probably because I never use _","date":"2017-12-14T21:10:40.130Z","type":"message"}
{"nick":"bradleymeck","message":"it would be lots more code to maintain 2 diff timings","date":"2017-12-14T21:10:42.530Z","type":"message"}
{"nick":"TimothyGu","message":"*always forget to*","date":"2017-12-14T21:10:45.933Z","type":"message"}
{"nick":"TimothyGu","message":"right","date":"2017-12-14T21:10:49.276Z","type":"message"}
{"nick":"TimothyGu","message":"it seems like \"if (true) await 1;\" currently returns \"undefined\"","date":"2017-12-14T21:12:07.675Z","type":"message"}
{"nick":"TimothyGu","message":"that looks like a bug","date":"2017-12-14T21:12:10.757Z","type":"message"}
{"nick":"bradleymeck","message":"i've got it fixed","date":"2017-12-14T21:13:04.357Z","type":"message"}
{"nick":"bradleymeck","message":"just need tests fixed","date":"2017-12-14T21:13:07.954Z","type":"message"}
{"nick":"bradleymeck","message":"due to timing change and tests relying on sync side effects","date":"2017-12-14T21:13:22.715Z","type":"message"}
{"nick":"TimothyGu","message":"k. I'll leave you to it \"then\"","date":"2017-12-14T21:13:38.637Z","type":"message"}
{"nick":"TimothyGu","message":"sorry","date":"2017-12-14T21:13:40.998Z","type":"message"}
{"nick":"bradleymeck","message":"heh","date":"2017-12-14T21:14:25.596Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: what I have you here, do you know why / how a line could get eval'd even though the repl is paused?","date":"2017-12-14T21:18:02.723Z","type":"message"}
{"nick":"bradleymeck","message":"it looks like if the input is closed it skips over the pause check?","date":"2017-12-14T21:18:16.727Z","type":"message"}
{"nick":"floatleft","reason":"Ping timeout: 268 seconds","date":"2017-12-14T21:18:29.142Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-14T21:18:41.550Z","type":"join"}
{"nick":"bradleymeck","message":"i think the pause check could be in eval maybe?","date":"2017-12-14T21:20:19.155Z","type":"message"}
{"nick":"devsnek","date":"2017-12-14T21:23:36.026Z","type":"join"}
{"nick":"bradleymeck","action":"waves","date":"2017-12-14T21:33:26.267Z","type":"action"}
{"nick":"bradleymeck","message":"also, why does repl have more tests than module?","date":"2017-12-14T21:34:23.184Z","type":"message"}
{"nick":"TimothyGu","message":"bradleymeck: sorry","date":"2017-12-14T21:36:34.707Z","type":"message"}
{"nick":"TimothyGu","message":"the pause thing is strictly for getting input","date":"2017-12-14T21:36:53.868Z","type":"message"}
{"nick":"TimothyGu","message":"as i'm trying to simulate synchronous blocking for async waiting","date":"2017-12-14T21:37:20.823Z","type":"message"}
{"nick":"TimothyGu","message":"i'm not sure how you can eval a line when the repl is paused though, if you're not even allowed to type Enter","date":"2017-12-14T21:38:19.385Z","type":"message"}
{"nick":"TimothyGu","message":"no clue about the last question","date":"2017-12-14T21:38:27.644Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: cat x | node -i","date":"2017-12-14T21:38:37.077Z","type":"message"}
{"nick":"bradleymeck","message":"since it isn't a tty it appears to go through","date":"2017-12-14T21:38:52.744Z","type":"message"}
{"nick":"TimothyGu","message":"argh","date":"2017-12-14T21:38:59.642Z","type":"message"}
{"nick":"bradleymeck","message":"adding another check inside eval was easy enough","date":"2017-12-14T21:39:02.509Z","type":"message"}
{"nick":"evanlucas","reason":"Remote host closed the connection","date":"2017-12-14T21:49:06.785Z","type":"quit"}
{"nick":"devsnek","message":"bradleymeck, TimothyGu: any thoughts on a situation like this? (https://gc.gy/ʕ.png)","date":"2017-12-14T21:55:01.189Z","type":"message"}
{"nick":"devsnek","message":"performing a simple link like this would require creating a new context and hooking it, not to mention people already have to deal with instantiation","date":"2017-12-14T21:55:13.578Z","type":"message"}
{"nick":"bradleymeck","message":"my irc client can't handle the unicode in the link","date":"2017-12-14T21:55:27.719Z","type":"message"}
{"nick":"devsnek","message":"whoops","date":"2017-12-14T21:55:39.638Z","type":"message"}
{"nick":"devsnek","message":"https://i.imgur.com/bXlmm8k.png","date":"2017-12-14T21:56:37.187Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: what about it?","date":"2017-12-14T21:57:06.676Z","type":"message"}
{"nick":"bradleymeck","message":"seems correct","date":"2017-12-14T21:57:23.432Z","type":"message"}
{"nick":"devsnek","message":"there is suddenly a lot of bootstrap around seemingly simple tasks (i'm looking at this from an api design perspective)","date":"2017-12-14T21:58:00.761Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: nothing about ESM is simple","date":"2017-12-14T21:58:22.280Z","type":"message"}
{"nick":"bradleymeck","message":"i have tons of questions about all sorts of edge cases on exposing too much to userland","date":"2017-12-14T21:58:44.388Z","type":"message"}
{"nick":"TimothyGu","message":"yeah that's the intended affect. guybedford's proposal will help reduce the boilerplate though, but I don't think that should be the *only* API available","date":"2017-12-14T21:58:48.353Z","type":"message"}
{"nick":"bradleymeck","message":"like the url property being able to be set directly can get really bad","date":"2017-12-14T21:59:01.956Z","type":"message"}
{"nick":"devsnek","message":"guybedford's proposal?","date":"2017-12-14T21:59:14.609Z","type":"message"}
{"nick":"bradleymeck","message":"there are cases where collisions can occur but those are scary already","date":"2017-12-14T21:59:18.384Z","type":"message"}
{"nick":"TimothyGu","message":"https://github.com/nodejs/node/pull/17560#issuecomment-351843998","date":"2017-12-14T21:59:24.245Z","type":"message"}
{"nick":"TimothyGu","message":"I'm writing a response to it right now","date":"2017-12-14T21:59:33.305Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: i'm not sure I like the `load` method","date":"2017-12-14T22:00:07.454Z","type":"message"}
{"nick":"bradleymeck","message":"as long as it is idempotent though I think it should be fine","date":"2017-12-14T22:00:38.366Z","type":"message"}
{"nick":"TimothyGu","message":"it's too high level for my use case","date":"2017-12-14T22:00:49.483Z","type":"message"}
{"nick":"bradleymeck","message":"I don't think it will work for cycles","date":"2017-12-14T22:01:17.353Z","type":"message"}
{"nick":"devsnek","message":"with the lower-level api that i'm slowly shifting towards, perhaps i should just throw out using the loader and make people use linking?","date":"2017-12-14T22:03:59.949Z","type":"message"}
{"nick":"devsnek","message":"i feel like that starts to expose things too much though","date":"2017-12-14T22:04:06.054Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: my branch pretty much solves all of https://github.com/bmeck/js-repl-goal except import once I iron out timing tests , so please review sometime","date":"2017-12-14T22:04:38.215Z","type":"message"}
{"nick":"bradleymeck","message":"I won't be done til mid next week at this rate though","date":"2017-12-14T22:04:46.725Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: if you look at how weird the ModuleJob stuff is, I'm not sure I want people to use that usually","date":"2017-12-14T22:05:18.440Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: linking was my initial proposal lol","date":"2017-12-14T22:05:31.667Z","type":"message"}
{"nick":"bradleymeck","message":"we also need to not use promises for completion values / return values if things can have a .then","date":"2017-12-14T22:05:47.558Z","type":"message"}
{"nick":"devsnek","message":"yeah i made evaluate sync, it was only async 'cuz before it checked instantiation","date":"2017-12-14T22:06:23.342Z","type":"message"}
{"nick":"TimothyGu","message":"bradleymeck, devsnek: what are your thoughts on exposing two APIs","date":"2017-12-14T22:07:53.609Z","type":"message"}
{"nick":"devsnek","message":"Module.createLoader sounds ok to me","date":"2017-12-14T22:08:10.586Z","type":"message"}
{"nick":"devsnek","message":"good idea for a high level api","date":"2017-12-14T22:08:25.425Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: it should stay async in future safety of top level await","date":"2017-12-14T22:09:11.705Z","type":"message"}
{"nick":"bradleymeck","message":"neither node nor browsers are using the TopLevelModuleJob as specced","date":"2017-12-14T22:09:36.812Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: I'm fine as long as I can't mix them","date":"2017-12-14T22:09:56.230Z","type":"message"}
{"nick":"devsnek","message":"do async functions ignore thenables","date":"2017-12-14T22:10:02.584Z","type":"message"}
{"nick":"TimothyGu","message":"bradleymeck: makes sense","date":"2017-12-14T22:10:17.986Z","type":"message"}
{"nick":"bradleymeck","message":"all async resolution mechanisms use thenables","date":"2017-12-14T22:10:19.996Z","type":"message"}
{"nick":"bradleymeck","message":"so you cannot return a thenable from an async function, it always is resolved","date":"2017-12-14T22:10:38.174Z","type":"message"}
{"nick":"devsnek","message":"thats what i thought... how can evaluate safely be async then","date":"2017-12-14T22:10:43.420Z","type":"message"}
{"nick":"bradleymeck","message":"tons of ways, easiest way is single item array https://github.com/bmeck/node/blob/env-record-repl-await/lib/internal/repl/await.js#L240","date":"2017-12-14T22:11:33.270Z","type":"message"}
{"nick":"ljharb","message":"until someone adds Array.prototype.then :-p","date":"2017-12-14T22:11:56.341Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: gah yea,","date":"2017-12-14T22:12:06.615Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: use {completion: ..., __proto__: null} to avoid ljharbs comment","date":"2017-12-14T22:12:23.624Z","type":"message"}
{"nick":"ljharb","message":"^ that works","date":"2017-12-14T22:12:32.070Z","type":"message"}
{"nick":"bradleymeck","action":"has to go fix some code now","date":"2017-12-14T22:12:43.872Z","type":"action"}
{"nick":"ljharb","message":"lol","date":"2017-12-14T22:12:46.129Z","type":"message"}
{"nick":"devsnek","message":"haha","date":"2017-12-14T22:12:49.716Z","type":"message"}
{"nick":"ljharb","message":"but at that point, you might as well make a real primitive","date":"2017-12-14T22:12:55.139Z","type":"message"}
{"nick":"ljharb","message":"like Promise, but sync","date":"2017-12-14T22:12:59.086Z","type":"message"}
{"nick":"ljharb","message":"(like Maybe or whatever)","date":"2017-12-14T22:13:03.089Z","type":"message"}
{"nick":"TimothyGu","message":"is __proto__ annex B tho","date":"2017-12-14T22:13:04.143Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: it isnt sync though","date":"2017-12-14T22:13:10.284Z","type":"message"}
{"nick":"ljharb","message":"TimothyGu: yes","date":"2017-12-14T22:13:11.079Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: the completion part is async but the wrapper record would be synchronously inspectable","date":"2017-12-14T22:13:22.329Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: annex b is the on JS mode in reality","date":"2017-12-14T22:13:27.845Z","type":"message"}
{"nick":"bradleymeck","message":"v8 doesn't even have a way to turn it off","date":"2017-12-14T22:13:38.662Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: iow `function Wrapper(result) { return { result, __proto__: null }; }` eve","date":"2017-12-14T22:13:51.265Z","type":"message"}
{"nick":"ljharb","message":"n","date":"2017-12-14T22:13:52.418Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: we can sync inspect promises in node core already","date":"2017-12-14T22:13:52.418Z","type":"message"}
{"nick":"ljharb","message":"ah","date":"2017-12-14T22:13:55.294Z","type":"message"}
{"nick":"TimothyGu","message":"right… just wasnt sure if we wanted to rely on it","date":"2017-12-14T22:14:02.808Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: It is never going away so... :shrug:","date":"2017-12-14T22:14:26.545Z","type":"message"}
{"nick":"ljharb","message":"TimothyGu: `Object.create(null, { completion: { value: completion } })` if you want to avoid annex b, but yeah it's not really ever going away","date":"2017-12-14T22:14:34.565Z","type":"message"}
{"nick":"bradleymeck","message":"but that means we need cached fn refs :(","date":"2017-12-14T22:14:51.165Z","type":"message"}
{"nick":"devsnek","message":"you guys have gone over my head at this point :D","date":"2017-12-14T22:14:52.011Z","type":"message"}
{"nick":"ljharb","message":"you always need cached fn refs ¯\\_(ツ)_/¯","date":"2017-12-14T22:15:19.441Z","type":"message"}
{"nick":"ljharb","message":"that node's historically super sloppy and insecure doesn't change that","date":"2017-12-14T22:15:27.683Z","type":"message"}
{"nick":"ljharb","message":"if you want to make it easier, feel free to make a proposal for a method extraction/call-binding operator, i'll heartily endorse it","date":"2017-12-14T22:15:53.225Z","type":"message"}
{"nick":"ljharb","message":"i'm uncomfortable with pipeline hitting stage 2 before such a proposal exists anways","date":"2017-12-14T22:16:22.765Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: specs are fun :)","date":"2017-12-14T22:16:47.767Z","type":"message"}
{"nick":"TimothyGu","message":"and yeah I'd prefer Object.create","date":"2017-12-14T22:17:29.625Z","type":"message"}
{"nick":"devsnek","message":"so this wrapper","date":"2017-12-14T22:17:54.604Z","type":"message"}
{"nick":"TimothyGu","message":"ljharb: how would you go about fortifying the core? V8 extras? caching every intrinsic before use?","date":"2017-12-14T22:18:03.120Z","type":"message"}
{"nick":"ljharb","message":"TimothyGu: the latter, without a doubt","date":"2017-12-14T22:18:17.908Z","type":"message"}
{"nick":"ljharb","message":"TimothyGu: and then you could even build linter rules and/or a babel transform to require it","date":"2017-12-14T22:18:29.169Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: see the weirdness of https://github.com/nodejs/node/blob/master/lib/internal/safe_globals.js and keep adding to it","date":"2017-12-14T22:18:41.561Z","type":"message"}
{"nick":"ljharb","message":"(it'd have lots of false positives, so maybe not worth it)","date":"2017-12-14T22:18:45.084Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: unfortunately you have to do more odd things for Map/Set/Weakset to make them work properly :(","date":"2017-12-14T22:19:10.110Z","type":"message"}
{"nick":"bradleymeck","message":"well pretty much all ES6+ builtins...","date":"2017-12-14T22:19:27.463Z","type":"message"}
{"nick":"ljharb","message":"many more","date":"2017-12-14T22:19:30.335Z","type":"message"}
{"nick":"bradleymeck","message":"yea some old ones too","date":"2017-12-14T22:19:36.851Z","type":"message"}
{"nick":"ljharb","message":"even just locking down call/bind/apply tho would be huge","date":"2017-12-14T22:19:47.484Z","type":"message"}
{"nick":"ljharb","message":"the rest are much easier to fix once those three are assured","date":"2017-12-14T22:19:55.143Z","type":"message"}
{"nick":"TimothyGu","message":"For some reason I prefer ReflectCall(SetProtoHas, set, \"afds\") than having frozen safe*","date":"2017-12-14T22:20:07.959Z","type":"message"}
{"nick":"ljharb","message":"(\"locking down\" === \"requiring a safe pattern to use them\")","date":"2017-12-14T22:20:08.344Z","type":"message"}
{"nick":"TimothyGu","message":"ReflectApply*","date":"2017-12-14T22:20:16.701Z","type":"message"}
{"nick":"ljharb","message":"yeah you can't freeze the builtins","date":"2017-12-14T22:20:19.114Z","type":"message"}
{"nick":"devsnek","message":"ArrayMap = Function.call(Array.prototype.map)","date":"2017-12-14T22:20:31.206Z","type":"message"}
{"nick":"devsnek","message":"but for every prototype method of builtins used in the core","date":"2017-12-14T22:20:39.528Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: basically yeah","date":"2017-12-14T22:21:08.225Z","type":"message"}
{"nick":"ljharb","message":"`Function.call.bind(Array.prototype.map)`","date":"2017-12-14T22:21:10.471Z","type":"message"}
{"nick":"ljharb","message":"and yes, for every builtin","date":"2017-12-14T22:21:14.251Z","type":"message"}
{"nick":"TimothyGu","message":"V8 extras provides an efficient function for uncurrying this","date":"2017-12-14T22:21:37.157Z","type":"message"}
{"nick":"TimothyGu","message":"called... uncurryThis","date":"2017-12-14T22:21:45.794Z","type":"message"}
{"nick":"TimothyGu","message":"that's what I'm using here: https://github.com/nodejs/node/blob/master/lib/internal/util/types.js#L5-L12","date":"2017-12-14T22:22:01.491Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 248 seconds","date":"2017-12-14T22:22:56.040Z","type":"quit"}
{"nick":"devsnek","message":"so back to the async thing, the only way to safely return the value we want is to return an object with result or completion","date":"2017-12-14T22:24:30.244Z","type":"message"}
{"nick":"devsnek","message":"or whatever other name","date":"2017-12-14T22:24:36.820Z","type":"message"}
{"nick":"devsnek","message":"and without a prototype so no one can mess with it","date":"2017-12-14T22:25:20.135Z","type":"message"}
{"nick":"ljharb","message":"right","date":"2017-12-14T22:25:41.597Z","type":"message"}
{"nick":"TimothyGu","message":"preferably frozen with Object.freeze too","date":"2017-12-14T22:26:13.705Z","type":"message"}
{"nick":"devsnek","message":"slightly unfortunate, ok","date":"2017-12-14T22:26:14.731Z","type":"message"}
{"nick":"TimothyGu","message":"just aside, we should be using Object.freeze a lot more in core","date":"2017-12-14T22:26:47.057Z","type":"message"}
{"nick":"devsnek","message":"like on the exports of builtin modules perhaps","date":"2017-12-14T22:27:05.972Z","type":"message"}
{"nick":"ljharb","message":"TimothyGu: it doesn't need to be frozen unless it's user-observable","date":"2017-12-14T22:27:16.961Z","type":"message"}
{"nick":"devsnek","message":"or at least freezing existing properties on them, allowing new ones","date":"2017-12-14T22:28:02.289Z","type":"message"}
{"nick":"TimothyGu","message":"ljharb: that's what I was referring to","date":"2017-12-14T22:28:10.875Z","type":"message"}
{"nick":"TimothyGu","message":"like the recent push to have util.format.specifiers array","date":"2017-12-14T22:28:21.025Z","type":"message"}
{"nick":"devsnek","message":"oh that reminds me","date":"2017-12-14T22:28:29.700Z","type":"message"}
{"nick":"devsnek","message":"i was thinking of something util.inspect.ignore","date":"2017-12-14T22:29:10.169Z","type":"message"}
{"nick":"devsnek","message":"an array of keys to ignore on the object","date":"2017-12-14T22:29:19.805Z","type":"message"}
{"nick":"Jim-","date":"2017-12-14T22:34:11.334Z","type":"join"}
{"nick":"d10n-work","reason":"Quit: Connection closed for inactivity","date":"2017-12-14T22:34:45.712Z","type":"quit"}
{"nick":"Jim-","message":"hey there -- I'm terribly sorry to bug anyone, and I realize this may be a bit off-topic, but seeing as this is the only JS-related development channel I know of related to V8, I was wondering if I could ask if anyone's attempted to build V8 on windows recently from scratch","date":"2017-12-14T22:35:18.912Z","type":"message"}
{"nick":"devsnek","message":"what does \"from scratch\" mean","date":"2017-12-14T22:35:35.472Z","type":"message"}
{"nick":"Jim-","message":"just from nothing, clone/fetch, build","date":"2017-12-14T22:35:50.439Z","type":"message"}
{"nick":"Jim-","message":"on windows, specifically","date":"2017-12-14T22:35:54.173Z","type":"message"}
{"nick":"devsnek","message":"so using the existing build setup","date":"2017-12-14T22:36:07.412Z","type":"message"}
{"nick":"Jim-","message":"I'm specifically stuck on the \"fetch v8\" step via depot_tools","date":"2017-12-14T22:36:37.648Z","type":"message"}
{"nick":"Jim-","message":"I suppose if you're willing to entertain my issue I may as well get it set up again","date":"2017-12-14T22:36:55.393Z","type":"message"}
{"nick":"seishun","date":"2017-12-14T22:38:02.760Z","type":"join"}
{"nick":"Jim-","message":"https://github.com/v8/v8/wiki/Building-from-Source -- the \"fetch v8\" step here is where I get stuck, it has some sort of python build error when I do this","date":"2017-12-14T22:38:18.375Z","type":"message"}
{"nick":"TimothyGu","message":"Jim-: do you remember the error message?","date":"2017-12-14T22:38:33.350Z","type":"message"}
{"nick":"TimothyGu","message":"also there's a #v8 but I don't think anyone is actually active on there. Twitter usually works better lol","date":"2017-12-14T22:38:55.801Z","type":"message"}
{"nick":"Jim-","message":"let me try to build it real quick again, should have had this ready before asking someone","date":"2017-12-14T22:39:03.087Z","type":"message"}
{"nick":"ljharb","message":"devsnek: `util.inspect` is the core thing, you wouldn't really want a global list of ignored keys","date":"2017-12-14T22:39:06.134Z","type":"message"}
{"nick":"ljharb","message":"or do you mean a symbol","date":"2017-12-14T22:39:24.549Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i'd expect someone who wants to ignore keys to define a `[util.inspect.custom]` function that ignores the keys they want","date":"2017-12-14T22:39:30.220Z","type":"message"}
{"nick":"devsnek","message":"yea i meant a symbol","date":"2017-12-14T22:39:43.809Z","type":"message"}
{"nick":"ljharb","message":"\"custom\" gives full control over the inspection; adding more complexity seems unhelpful in light of that","date":"2017-12-14T22:40:19.759Z","type":"message"}
{"nick":"ljharb","message":"(\"inspect\" gives full control too)","date":"2017-12-14T22:40:38.587Z","type":"message"}
{"nick":"devsnek","message":"using util.inspect.custom lost the constructor name and i didn't want to use a string since there are quite a few props","date":"2017-12-14T22:40:47.646Z","type":"message"}
{"nick":"devsnek","message":"but thats probably a me problem not a node problem","date":"2017-12-14T22:41:00.241Z","type":"message"}
{"nick":"ljharb","message":"? what constructor name?","date":"2017-12-14T22:41:33.749Z","type":"message"}
{"nick":"ljharb","message":"oh like the `this`?","date":"2017-12-14T22:41:43.597Z","type":"message"}
{"nick":"devsnek","message":"aye","date":"2017-12-14T22:41:54.543Z","type":"message"}
{"nick":"ljharb","message":"`this.contructor.name` should work inside that function","date":"2017-12-14T22:41:59.223Z","type":"message"}
{"nick":"ljharb","message":"it should be called like `obj.inspect()` / `obj[util.inspect.custom]()` which would preserve the receiver","date":"2017-12-14T22:42:13.232Z","type":"message"}
{"nick":"devsnek","message":"oh sorry i misunderstood you","date":"2017-12-14T22:42:23.463Z","type":"message"}
{"nick":"devsnek","message":"i meant like uh","date":"2017-12-14T22:42:26.761Z","type":"message"}
{"nick":"devsnek","message":"class X {}","date":"2017-12-14T22:42:30.941Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2017-12-14T22:42:35.128Z","type":"message"}
{"nick":"devsnek","message":"util.inspect(new X) => `X {}`","date":"2017-12-14T22:42:41.790Z","type":"message"}
{"nick":"ljharb","message":"`class X { [util.inspect.custom]() { return this.constructor.name; } }`","date":"2017-12-14T22:42:48.576Z","type":"message"}
{"nick":"ljharb","message":"that will inspect as \"X\"","date":"2017-12-14T22:42:51.926Z","type":"message"}
{"nick":"devsnek","message":"but what if you want to return a filtered object","date":"2017-12-14T22:43:04.721Z","type":"message"}
{"nick":"ljharb","message":"(ofc in that case it'd be better to hardcode it as \"X\" rather than looking up the constructor property)","date":"2017-12-14T22:43:07.664Z","type":"message"}
{"nick":"ljharb","message":"devsnek: then you do that?","date":"2017-12-14T22:43:15.893Z","type":"message"}
{"nick":"ljharb","message":"`class X { [util.inspect.custom]() { return util.inspect({ ...filteredObject, constructor: { name:  }); } }`","date":"2017-12-14T22:43:55.518Z","type":"message"}
{"nick":"ljharb","message":"* name: 'X', with all the ) closed (hit enter too soon)","date":"2017-12-14T22:44:06.599Z","type":"message"}
{"nick":"ljharb","message":"but something like that","date":"2017-12-14T22:44:08.317Z","type":"message"}
{"nick":"devsnek","message":"thats the solution i arrived at","date":"2017-12-14T22:44:16.692Z","type":"message"}
{"nick":"ljharb","message":"there's nothing you can't do with `.inspect` or .custom","date":"2017-12-14T22:44:21.836Z","type":"message"}
{"nick":"devsnek","message":"i guess i'm just complaining :)","date":"2017-12-14T22:44:24.860Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2017-12-14T22:44:26.633Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: also I think technically you should handle ctx.recurseTimes in your custom inspection function too","date":"2017-12-14T22:45:28.411Z","type":"message"}
{"nick":"TimothyGu","message":"like https://github.com/nodejs/node/blob/master/lib/internal/url.js#L336-L337","date":"2017-12-14T22:45:51.120Z","type":"message"}
{"nick":"floatleft","reason":"Ping timeout: 256 seconds","date":"2017-12-14T22:45:59.516Z","type":"quit"}
{"nick":"TimothyGu","message":"I understand if you get too grossed out though","date":"2017-12-14T22:46:01.788Z","type":"message"}
{"nick":"floatleft","date":"2017-12-14T22:46:19.174Z","type":"join"}
{"nick":"TimothyGu","message":"and also I think the constructor property might need to be on filteredObject's prototype","date":"2017-12-14T22:46:30.407Z","type":"message"}
{"nick":"devsnek","message":"yeah thats kinda what i'm implementing at this point","date":"2017-12-14T22:46:36.291Z","type":"message"}
{"nick":"devsnek","message":"basically i just wanted to get rid of some symbols on a class so users can't see the inner implementation of things","date":"2017-12-14T22:47:06.602Z","type":"message"}
{"nick":"TimothyGu","message":"and if u just return an object, util.inspect will be called automatically on that object; usually there's no need to call util.inspect by yourself","date":"2017-12-14T22:47:24.997Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: oh. in that case you can just make the symbols not enumerable","date":"2017-12-14T22:47:41.292Z","type":"message"}
{"nick":"devsnek","message":"aren't they already not enumerable?","date":"2017-12-14T22:48:02.463Z","type":"message"}
{"nick":"TimothyGu","message":"they are enumerable by default","date":"2017-12-14T22:48:42.459Z","type":"message"}
{"nick":"TimothyGu","message":"just not shown in Object.keys, because Object.keys only return strings in the first place","date":"2017-12-14T22:48:58.247Z","type":"message"}
{"nick":"devsnek","message":"i was about to mention object.keys","date":"2017-12-14T22:49:11.235Z","type":"message"}
{"nick":"devsnek","message":"heh","date":"2017-12-14T22:49:14.487Z","type":"message"}
{"nick":"devsnek","message":"thats where my misunderstanding came from i guess","date":"2017-12-14T22:49:30.252Z","type":"message"}
{"nick":"TimothyGu","message":"you can try (sym = Symbol(), Object.getOwnPropertyDescriptor({ [sym]: 2 }, sym))","date":"2017-12-14T22:49:41.951Z","type":"message"}
{"nick":"TimothyGu","message":"{ value: 2, writable: true, enumerable: true, configurable: true }","date":"2017-12-14T22:49:51.510Z","type":"message"}
{"nick":"TimothyGu","message":"in this sense there's nothing different between symbols and strings","date":"2017-12-14T22:50:09.648Z","type":"message"}
{"nick":"TimothyGu","message":"also I don't think this is the first time it came up","date":"2017-12-14T22:50:18.804Z","type":"message"}
{"nick":"TimothyGu","message":"ljharb: would TC39 entertain the idea of having a Map/Set.prototype.freeze?","date":"2017-12-14T22:50:40.474Z","type":"message"}
{"nick":"TimothyGu","message":"or having \"true\" (i.e. order not guaranteed) hash tables?","date":"2017-12-14T22:51:35.870Z","type":"message"}
{"nick":"devsnek","message":"wouldn't a map without guarenteed order just be an object with fancy methods","date":"2017-12-14T22:53:09.359Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: other than for-in, I think property order of objects is guaranteed these days","date":"2017-12-14T22:54:44.994Z","type":"message"}
{"nick":"ljharb","message":"TimothyGu: i'm not sure, maybe","date":"2017-12-14T22:54:58.979Z","type":"message"}
{"nick":"ljharb","message":"conceptually order is irrelevant for Map/Set tho","date":"2017-12-14T22:55:19.234Z","type":"message"}
{"nick":"ljharb","message":"i don't think there'd be any value in removing that ordering guarantee","date":"2017-12-14T22:55:31.728Z","type":"message"}
{"nick":"devsnek","message":"doesn't the spec say that object properties are unordered, regardless of how they are implemented","date":"2017-12-14T22:56:20.724Z","type":"message"}
{"nick":"TimothyGu","message":"ljharb: from a standard perspective, maybe not; from an implementation perspective, it'll allow getting rid of a linked list for order","date":"2017-12-14T22:56:24.799Z","type":"message"}
{"nick":"ljharb","message":"devsnek: not as of ES6","date":"2017-12-14T22:57:16.385Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: the spec doesn't say anything about order for for-in","date":"2017-12-14T22:57:16.547Z","type":"message"}
{"nick":"TimothyGu","message":"...right?","date":"2017-12-14T22:57:33.632Z","type":"message"}
{"nick":"ljharb","message":"devsnek: object properties are ordered in ES6+. however, it's always a code smell to rely on that ordering.","date":"2017-12-14T22:57:35.382Z","type":"message"}
{"nick":"ljharb","message":"all it says for for..in is that some other things have to be consistent with for..in","date":"2017-12-14T22:57:45.675Z","type":"message"}
{"nick":"ljharb","message":"but in practice, for..in matches key ordering","date":"2017-12-14T22:57:50.147Z","type":"message"}
{"nick":"devsnek","message":"any good ideas for the name of a loader hook that expects a vm.Module","date":"2017-12-14T23:01:24.342Z","type":"message"}
{"nick":"Jim-","message":"TimothyGu: https://gist.github.com/jp9000/b76a389717ed34ee6d0450796c577359 -- this is what occurs on the fetch call.  I downloaded depot_tools.zip from http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up -- then set depot_tools in my path, called gclient with no params, then \"fetch v8\" after that completed","date":"2017-12-14T23:02:43.306Z","type":"message"}
{"nick":"Jim-","message":"(also if I'm interrupting anything with this off-topic thing let me know, I can probably try to bug chromium devs about it instead if any of them are willing to hear me out)","date":"2017-12-14T23:03:45.756Z","type":"message"}
{"nick":"TimothyGu","message":"Jim-: sorry, no clue. I'd try to make sure you have a newish version of Visual Studio installed and in good working order though","date":"2017-12-14T23:06:19.346Z","type":"message"}
{"nick":"TimothyGu","message":"or maybe try running that v8/build/vs_toolchain.py update script manually","date":"2017-12-14T23:06:41.397Z","type":"message"}
{"nick":"Jim-","message":"I admit it's just the latest 2015, haven't installed 2017 yet","date":"2017-12-14T23:07:14.368Z","type":"message"}
{"nick":"TimothyGu","message":"never mind that advice","date":"2017-12-14T23:07:19.586Z","type":"message"}
{"nick":"TimothyGu","message":"it seems that it should download its own version of the VS toolchain","date":"2017-12-14T23:07:39.952Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: if this is in relation to the VM module, I want to be clear that I still prefer no interaction with Loader in the lower-level API","date":"2017-12-14T23:08:23.690Z","type":"message"}
{"nick":"Jim-","message":"yea, it's a slightly weird error, I'm guessing you guys don't manually build V8 by itself often.  (I'm guessing most people probably don't)","date":"2017-12-14T23:09:32.865Z","type":"message"}
{"nick":"devsnek","message":"this is loader interacting with vm","date":"2017-12-14T23:09:44.130Z","type":"message"}
{"nick":"devsnek","message":"vm.Module has no concept of \"Loader\"","date":"2017-12-14T23:09:52.366Z","type":"message"}
{"nick":"TimothyGu","message":"Jim-: I do it on Linux :)","date":"2017-12-14T23:09:56.666Z","type":"message"}
{"nick":"Jim-","message":"or that","date":"2017-12-14T23:09:59.854Z","type":"message"}
{"nick":"Jim-","message":"not many windows users when it comes to serious dev work","date":"2017-12-14T23:10:15.369Z","type":"message"}
{"nick":"TimothyGu","message":"on Linux it actually downloads its own copy of clang and things like that, which is pretty annoying","date":"2017-12-14T23:10:27.162Z","type":"message"}
{"nick":"devsnek","message":"basically the loader hook just grabs module[Symbol('kWrap')] for the ModuleWrap instance","date":"2017-12-14T23:10:29.693Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: sorry can you clarify, is this in relation to the lower-level API or the higher-level API","date":"2017-12-14T23:11:16.306Z","type":"message"}
{"nick":"devsnek","message":"more in relation to loader","date":"2017-12-14T23:11:28.956Z","type":"message"}
{"nick":"TimothyGu","message":"oh sorry. I think this comment may have thrown people off: \"I would say this is a mandatory requirement for doing anything useful with this new API.\"","date":"2017-12-14T23:11:53.753Z","type":"message"}
{"nick":"TimothyGu","message":"that is in relation to using Module in Loader","date":"2017-12-14T23:12:03.992Z","type":"message"}
{"nick":"TimothyGu","message":"but I don't believe that anymore","date":"2017-12-14T23:12:20.742Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: because when I commented loader hooks were still an intrinsic part of the lower-level API","date":"2017-12-14T23:12:48.807Z","type":"message"}
{"nick":"devsnek","message":"i mean like","date":"2017-12-14T23:15:17.206Z","type":"message"}
{"nick":"devsnek","message":"getVmModuleHook: (url) => new vm.Module(...)","date":"2017-12-14T23:15:40.742Z","type":"message"}
{"nick":"devsnek","message":"for letting people inject vm.Module into the existing loader/any new loaders","date":"2017-12-14T23:16:01.629Z","type":"message"}
{"nick":"devsnek","message":"in this context vm.Module doesn't know that its being used by a loader","date":"2017-12-14T23:16:44.265Z","type":"message"}
{"nick":"apapirovski","reason":"Remote host closed the connection","date":"2017-12-14T23:17:36.962Z","type":"quit"}
{"nick":"TimothyGu","message":"devsnek: I'd hold your horses on implementing something like that. after all bradleymeck was thinking of getting rid of dynamicInstantiate","date":"2017-12-14T23:21:52.978Z","type":"message"}
{"nick":"devsnek","message":"i too would like to get rid of dynamic instantiate :)","date":"2017-12-14T23:22:53.692Z","type":"message"}
{"nick":"TimothyGu","message":"through this new hook?","date":"2017-12-14T23:23:17.703Z","type":"message"}
{"nick":"devsnek","message":"thats the idea i have in mind, yea","date":"2017-12-14T23:23:40.332Z","type":"message"}
{"nick":"TimothyGu","message":"Ah. In that case my recommendation would still be to finish one thing before starting another ;)","date":"2017-12-14T23:25:24.574Z","type":"message"}
{"nick":"devsnek","message":"just planning ahead... :^)","date":"2017-12-14T23:28:08.155Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2017-12-14T23:37:33.247Z","type":"quit"}
{"nick":"bradleymeck","message":"mind you i have strong feelings that resolve is the only hook that we should have","date":"2017-12-14T23:52:44.673Z","type":"message"}
{"nick":"bradleymeck","message":"currently resolve is url=>url which I like, but I really don't want to let people change the contents at urls","date":"2017-12-14T23:54:29.602Z","type":"message"}
{"nick":"bradleymeck","message":"url=>fetch-like would work too if it enforces idempotency, but there are some problems with that as well. <script type=module> ... inline content </script> can have the same import.meta.url :(","date":"2017-12-14T23:55:29.355Z","type":"message"}
{"nick":"bradleymeck","message":"not a problem for node, but a problem when trying to design for jsdom","date":"2017-12-14T23:55:44.878Z","type":"message"}
{"nick":"nodejs-gh","date":"2017-12-14T23:59:22.168Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-14T23:59:22.239Z","type":"part"}
