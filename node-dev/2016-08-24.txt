{"nick":"qard","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-08-24T00:36:41.109Z","type":"quit"}
{"nick":"tellnes","reason":"Ping timeout: 250 seconds","date":"2016-08-24T01:03:10.551Z","type":"quit"}
{"nick":"r04r","new_nick":"zz_r04r","date":"2016-08-24T01:12:52.459Z","type":"nick"}
{"nick":"ChALkeR","reason":"Ping timeout: 265 seconds","date":"2016-08-24T01:18:35.846Z","type":"quit"}
{"nick":"tellnes","date":"2016-08-24T01:22:05.903Z","type":"join"}
{"nick":"alrra","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T01:30:20.411Z","type":"quit"}
{"nick":"plasticle","reason":"Remote host closed the connection","date":"2016-08-24T01:35:12.251Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-24T01:37:41.497Z","type":"quit"}
{"nick":"Lee1092","date":"2016-08-24T01:43:02.134Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 265 seconds","date":"2016-08-24T01:43:48.302Z","type":"quit"}
{"nick":"robink","reason":"Ping timeout: 244 seconds","date":"2016-08-24T03:08:28.240Z","type":"quit"}
{"nick":"addaleax","date":"2016-08-24T03:10:01.517Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-08-24T03:35:39.990Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T03:39:24.463Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T03:39:24.616Z","type":"part"}
{"nick":"jasnell_","reason":"Remote host closed the connection","date":"2016-08-24T03:39:39.012Z","type":"quit"}
{"nick":"robink_","date":"2016-08-24T03:44:49.649Z","type":"join"}
{"nick":"robink_","new_nick":"robink","date":"2016-08-24T03:50:48.205Z","type":"nick"}
{"nick":"howdoi","date":"2016-08-24T04:19:10.266Z","type":"join"}
{"nick":"bnoordhuis","reason":"Quit: leaving","date":"2016-08-24T04:22:21.333Z","type":"quit"}
{"nick":"efn","date":"2016-08-24T04:26:27.309Z","type":"join"}
{"nick":"thefourtheye","date":"2016-08-24T04:27:32.006Z","type":"join"}
{"nick":"sankha","date":"2016-08-24T04:35:14.985Z","type":"join"}
{"nick":"sankha","reason":"Read error: Connection reset by peer","date":"2016-08-24T04:35:54.545Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T04:37:28.686Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T05:09:32.367Z","type":"quit"}
{"nick":"lpin","date":"2016-08-24T05:13:19.359Z","type":"join"}
{"nick":"BridgeAR","date":"2016-08-24T05:37:07.009Z","type":"join"}
{"nick":"BridgeAR","reason":"Quit: Leaving.","date":"2016-08-24T05:42:10.403Z","type":"quit"}
{"nick":"BridgeAR","date":"2016-08-24T05:42:23.009Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 250 seconds","date":"2016-08-24T05:51:10.980Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-08-24T06:21:29.004Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T06:21:29.197Z","type":"part"}
{"nick":"yuval","date":"2016-08-24T06:26:40.069Z","type":"join"}
{"nick":"sankha","date":"2016-08-24T06:28:44.821Z","type":"join"}
{"nick":"alrra","date":"2016-08-24T06:30:21.269Z","type":"join"}
{"nick":"ket","date":"2016-08-24T06:34:01.532Z","type":"join"}
{"nick":"ket","reason":"Client Quit","date":"2016-08-24T06:34:40.769Z","type":"quit"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T07:04:12.863Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T07:05:16.454Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T07:40:35.116Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T07:46:02.670Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T08:11:37.342Z","type":"quit"}
{"nick":"saghul","date":"2016-08-24T08:24:22.874Z","type":"join"}
{"nick":"not_an_aardvark","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T08:26:06.593Z","type":"quit"}
{"nick":"ChALkeR","date":"2016-08-24T08:36:08.798Z","type":"join"}
{"nick":"BridgeAR","date":"2016-08-24T08:40:36.007Z","type":"join"}
{"nick":"sankha","date":"2016-08-24T08:45:33.206Z","type":"join"}
{"nick":"BridgeAR","reason":"Read error: Connection reset by peer","date":"2016-08-24T08:49:05.406Z","type":"quit"}
{"nick":"seishun","date":"2016-08-24T08:59:51.727Z","type":"join"}
{"nick":"johnDoe111","date":"2016-08-24T09:07:05.140Z","type":"join"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-08-24T09:07:10.293Z","type":"quit"}
{"nick":"Guest26216","reason":"Ping timeout: 260 seconds","date":"2016-08-24T09:12:49.485Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-08-24T09:31:13.497Z","type":"join"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-08-24T09:31:24.763Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-08-24T09:35:14.831Z","type":"join"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-08-24T09:37:26.952Z","type":"quit"}
{"nick":"johnDoe111","date":"2016-08-24T09:38:14.101Z","type":"join"}
{"nick":"johnDoe111","reason":"Remote host closed the connection","date":"2016-08-24T09:39:16.918Z","type":"quit"}
{"nick":"seishun","message":"addaleax: you might want to add to that list of \"Pro\"s that still having deprecated Buffer constructors when it becomes a class has an unknown performance cost and a visible LOC cost","date":"2016-08-24T09:45:09.497Z","type":"message"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T09:46:38.824Z","type":"quit"}
{"nick":"addaleax","message":"seishun: hm, what do you mean? overloads like new Buffer(str) that would remain deprecated?","date":"2016-08-24T09:48:15.078Z","type":"message"}
{"nick":"seishun","message":"yes","date":"2016-08-24T09:48:24.253Z","type":"message"}
{"nick":"sankha","date":"2016-08-24T09:49:28.721Z","type":"join"}
{"nick":"addaleax","message":"I’ve added it, thanks","date":"2016-08-24T09:50:19.155Z","type":"message"}
{"nick":"seishun","message":"thank you!","date":"2016-08-24T09:50:24.537Z","type":"message"}
{"nick":"zz_r04r","new_nick":"r04r","date":"2016-08-24T09:50:57.700Z","type":"nick"}
{"nick":"addaleax","message":"np…but tbh I must admit I’m not really a fan of removing the non-Uint8Array-variants completely at all","date":"2016-08-24T09:51:34.779Z","type":"message"}
{"nick":"seishun","message":"why, because of the widespread usage?","date":"2016-08-24T09:58:10.989Z","type":"message"}
{"nick":"addaleax","message":"seishun: yeah, mostly that","date":"2016-08-24T10:31:33.838Z","type":"message"}
{"nick":"seishun","message":"would you be more comfortable with it if the usage dropped to insignificant levels?","date":"2016-08-24T10:32:31.592Z","type":"message"}
{"nick":"addaleax","message":"maybe… but then again I don’t really feel super-strongly about it","date":"2016-08-24T10:41:56.924Z","type":"message"}
{"nick":"addaleax","message":"and other people obviously do, so ¯\\_(ツ)_/¯","date":"2016-08-24T10:42:17.775Z","type":"message"}
{"nick":"addaleax","message":"as long as things can be worked around in userland everything’s fine for me","date":"2016-08-24T10:42:50.043Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-08-24T10:45:20.102Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T10:45:20.255Z","type":"part"}
{"nick":"thealphanerd","reason":"Quit: farewell for now","date":"2016-08-24T10:51:40.305Z","type":"quit"}
{"nick":"thealphanerd","date":"2016-08-24T10:52:10.974Z","type":"join"}
{"nick":"alrra","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T11:30:20.503Z","type":"quit"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T11:41:18.609Z","type":"quit"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2016-08-24T11:49:08.143Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T12:13:59.119Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T12:42:19.827Z","type":"quit"}
{"nick":"mcollina","date":"2016-08-24T12:49:51.047Z","type":"join"}
{"nick":"mcollina","reason":"Remote host closed the connection","date":"2016-08-24T12:53:14.686Z","type":"quit"}
{"nick":"mcollina","date":"2016-08-24T12:53:31.004Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T12:54:36.986Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T12:54:37.139Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T12:58:25.650Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T12:58:25.803Z","type":"part"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2016-08-24T12:59:56.577Z","type":"nick"}
{"nick":"nodejs-gh","date":"2016-08-24T13:01:28.303Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T13:01:28.457Z","type":"part"}
{"nick":"sankha","date":"2016-08-24T13:20:55.836Z","type":"join"}
{"nick":"bradleymeck","date":"2016-08-24T13:22:24.066Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T13:22:57.947Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T13:22:58.100Z","type":"part"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T13:23:56.021Z","type":"quit"}
{"nick":"alrra","date":"2016-08-24T13:26:49.995Z","type":"join"}
{"nick":"sankha","date":"2016-08-24T13:27:53.349Z","type":"join"}
{"nick":"al-damiri","date":"2016-08-24T13:33:12.018Z","type":"join"}
{"nick":"r4z","date":"2016-08-24T13:33:20.882Z","type":"join"}
{"nick":"MadHatter42","date":"2016-08-24T13:35:11.956Z","type":"join"}
{"nick":"jasnell","date":"2016-08-24T13:38:07.198Z","type":"join"}
{"nick":"r4z","reason":"Quit: Leaving","date":"2016-08-24T13:40:03.348Z","type":"quit"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-08-24T13:40:26.688Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-08-24T13:40:31.001Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T13:40:31.155Z","type":"part"}
{"nick":"jasnell","date":"2016-08-24T13:44:48.222Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T13:46:42.390Z","type":"quit"}
{"nick":"MadHatter42","reason":"Ping timeout: 250 seconds","date":"2016-08-24T13:47:07.912Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T13:47:17.073Z","type":"join"}
{"nick":"r4z_","date":"2016-08-24T13:51:50.983Z","type":"join"}
{"nick":"r4z_","reason":"Client Quit","date":"2016-08-24T13:54:54.336Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-08-24T13:56:12.431Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T13:56:12.584Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T14:03:34.963Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T14:03:35.116Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T14:05:03.377Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T14:05:03.530Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T14:05:16.643Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T14:05:16.796Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T14:08:32.366Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T14:08:32.682Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T14:10:53.873Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T14:10:54.027Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T14:11:14.014Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T14:11:14.167Z","type":"part"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T14:36:40.024Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T14:37:20.529Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T14:38:36.205Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T14:38:58.828Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T14:40:46.316Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-08-24T14:47:03.927Z","type":"join"}
{"nick":"sankha","date":"2016-08-24T14:50:39.145Z","type":"join"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-08-24T14:50:52.818Z","type":"quit"}
{"nick":"yuval","reason":"Quit: leaving","date":"2016-08-24T14:59:47.150Z","type":"quit"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T15:09:57.824Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T15:10:00.181Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T15:11:56.450Z","type":"join"}
{"nick":"Fishrock123","message":"evanlucas: planning today on that v6.4.1?","date":"2016-08-24T15:16:25.477Z","type":"message"}
{"nick":"Fishrock123","message":"sorry i wanted to make an issue for it but I've been really busy","date":"2016-08-24T15:16:42.115Z","type":"message"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T15:26:56.520Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-24T15:50:46.982Z","type":"quit"}
{"nick":"lanceball","new_nick":"lance|afk","date":"2016-08-24T15:58:40.862Z","type":"nick"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2016-08-24T16:00:04.228Z","type":"nick"}
{"nick":"scott_gonzalez_","new_nick":"scott_gonzalez","date":"2016-08-24T16:01:27.391Z","type":"nick"}
{"nick":"lanceball","new_nick":"lance|afk","date":"2016-08-24T16:06:37.741Z","type":"nick"}
{"nick":"bradleymeck","date":"2016-08-24T16:14:18.582Z","type":"join"}
{"nick":"jasnell","date":"2016-08-24T16:20:03.695Z","type":"join"}
{"nick":"saghul","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-08-24T16:31:33.134Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2016-08-24T16:32:51.988Z","type":"quit"}
{"nick":"ChALkeR","reason":"Ping timeout: 244 seconds","date":"2016-08-24T16:37:43.686Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T16:41:01.825Z","type":"join"}
{"nick":"seishun","date":"2016-08-24T16:41:27.728Z","type":"join"}
{"nick":"sankha","reason":"Ping timeout: 244 seconds","date":"2016-08-24T16:45:28.630Z","type":"quit"}
{"nick":"ChALkeR","date":"2016-08-24T16:49:20.653Z","type":"join"}
{"nick":"saghul","date":"2016-08-24T16:56:55.503Z","type":"join"}
{"nick":"sankha","date":"2016-08-24T17:00:15.237Z","type":"join"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2016-08-24T17:01:50.228Z","type":"nick"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T17:22:04.004Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T17:22:36.923Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T17:23:59.502Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-08-24T17:27:39.976Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T17:27:40.169Z","type":"part"}
{"nick":"sankha","date":"2016-08-24T17:32:58.172Z","type":"join"}
{"nick":"jbadiapa","date":"2016-08-24T17:36:21.278Z","type":"join"}
{"nick":"jbadiapa","reason":"Quit: Mutter: http://www.mutterirc.com","date":"2016-08-24T17:41:36.384Z","type":"quit"}
{"nick":"jbadiapa","date":"2016-08-24T17:41:59.645Z","type":"join"}
{"nick":"saghul","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-08-24T17:44:33.900Z","type":"quit"}
{"nick":"jbadiapa","reason":"Remote host closed the connection","date":"2016-08-24T17:48:15.920Z","type":"quit"}
{"nick":"jbadiapa","date":"2016-08-24T17:49:05.037Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T18:10:39.069Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T18:10:39.223Z","type":"part"}
{"nick":"lpin","reason":"Remote host closed the connection","date":"2016-08-24T18:13:22.810Z","type":"quit"}
{"nick":"romankl","date":"2016-08-24T18:21:07.114Z","type":"join"}
{"nick":"romankl","reason":"Max SendQ exceeded","date":"2016-08-24T18:22:15.095Z","type":"quit"}
{"nick":"romankl","date":"2016-08-24T18:23:07.233Z","type":"join"}
{"nick":"Fishrock123","message":"Does anyone know if v8.getHeapSpaceStatistics() is expensive? ofrobots maybe?","date":"2016-08-24T18:25:37.561Z","type":"message"}
{"nick":"STRML","reason":"Quit: ZNC - http://znc.in","date":"2016-08-24T18:28:19.909Z","type":"quit"}
{"nick":"ofrobots","message":"Fishrock123: not particularly as long as you are not calling it hundreds of times per second","date":"2016-08-24T18:28:51.019Z","type":"message"}
{"nick":"Fishrock123","message":"cool","date":"2016-08-24T18:29:49.763Z","type":"message"}
{"nick":"Fishrock123","message":"ofrobots: I need to check to make sure something doesn't go beyond old_space capacity... I don't think there is a better way?","date":"2016-08-24T18:30:22.793Z","type":"message"}
{"nick":"Fishrock123","message":"like, periodically","date":"2016-08-24T18:30:33.799Z","type":"message"}
{"nick":"bradleymeck","message":"Fishrock123: what do you mean \"go beyond\"","date":"2016-08-24T18:32:11.164Z","type":"message"}
{"nick":"Fishrock123","message":"\"not crash\"","date":"2016-08-24T18:32:53.906Z","type":"message"}
{"nick":"bradleymeck","message":"probably can't figure that out with complete safety unless you hook into https://github.com/v8/v8/blob/master/include/v8.h#L5115","date":"2016-08-24T18:34:49.483Z","type":"message"}
{"nick":"Fishrock123","message":"meh, for my uses... I can probably just clean out a bunch of data if it gets near with some leeway, and hopefully GC kicks in.","date":"2016-08-24T18:37:06.105Z","type":"message"}
{"nick":"Fishrock123","message":"Should be good enough.","date":"2016-08-24T18:37:12.110Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-08-24T18:41:15.634Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T18:41:15.787Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T18:42:08.289Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T18:42:08.443Z","type":"part"}
{"nick":"benjamingr_","date":"2016-08-24T18:49:34.938Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T18:52:05.363Z","type":"quit"}
{"nick":"sankha","date":"2016-08-24T18:55:20.313Z","type":"join"}
{"nick":"jbadiapa","reason":"Remote host closed the connection","date":"2016-08-24T19:05:34.771Z","type":"quit"}
{"nick":"kenansulayman","date":"2016-08-24T19:09:13.718Z","type":"join"}
{"nick":"kenansulayman","new_nick":"Guest18855","date":"2016-08-24T19:09:37.183Z","type":"nick"}
{"nick":"Lee1092","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T19:14:01.359Z","type":"quit"}
{"nick":"saghul","date":"2016-08-24T19:16:24.317Z","type":"join"}
{"nick":"romankl","reason":"Quit: romankl","date":"2016-08-24T19:28:33.658Z","type":"quit"}
{"nick":"Guest18855","reason":"Ping timeout: 240 seconds","date":"2016-08-24T19:29:12.566Z","type":"quit"}
{"nick":"addaleax","reason":"Quit: ChatZilla 0.9.92 [Firefox 48.0/20160728203720]","date":"2016-08-24T19:37:41.370Z","type":"quit"}
{"nick":"kenansulayman","date":"2016-08-24T19:38:53.169Z","type":"join"}
{"nick":"kenansulayman","new_nick":"Guest58774","date":"2016-08-24T19:39:23.976Z","type":"nick"}
{"nick":"STRML","date":"2016-08-24T19:40:45.157Z","type":"join"}
{"nick":"qard","date":"2016-08-24T19:45:00.695Z","type":"join"}
{"nick":"addaleax","date":"2016-08-24T19:48:32.821Z","type":"join"}
{"nick":"seishun","reason":"Read error: Connection reset by peer","date":"2016-08-24T19:51:50.480Z","type":"quit"}
{"nick":"qard","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2016-08-24T19:53:50.518Z","type":"quit"}
{"nick":"saghul","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-08-24T19:58:58.107Z","type":"quit"}
{"nick":"renrutnnej","date":"2016-08-24T20:02:53.096Z","type":"join"}
{"nick":"madjake45","reason":"Ping timeout: 244 seconds","date":"2016-08-24T20:08:00.661Z","type":"quit"}
{"nick":"saghul","date":"2016-08-24T20:09:01.295Z","type":"join"}
{"nick":"Fishrock123","message":"CTC meeting live now: http://www.youtube.com/c/nodejs-foundation/live","date":"2016-08-24T20:09:56.796Z","type":"message"}
{"nick":"madjake45","date":"2016-08-24T20:09:59.664Z","type":"join"}
{"nick":"madjake45","reason":"Read error: Connection reset by peer","date":"2016-08-24T20:10:08.985Z","type":"quit"}
{"nick":"Fishrock123","message":"renrutnnej: are you just watching the livestream?","date":"2016-08-24T20:13:06.525Z","type":"message"}
{"nick":"renrutnnej","message":"i am","date":"2016-08-24T20:13:18.806Z","type":"message"}
{"nick":"Fishrock123","message":"cool, if that works ok it is probably fine, otherwise we can loop you into the actual call in future meeting if you'd prefer","date":"2016-08-24T20:14:09.246Z","type":"message"}
{"nick":"Fishrock123","message":"(which is probably what someone else will suggest anyways...)","date":"2016-08-24T20:14:29.564Z","type":"message"}
{"nick":"renrutnnej","message":"i just got an email from rod","date":"2016-08-24T20:15:07.963Z","type":"message"}
{"nick":"addaleax","message":"yeah, I don’t think there’s anything speaking against joining now if you’d like","date":"2016-08-24T20:15:11.060Z","type":"message"}
{"nick":"Fishrock123","message":"^","date":"2016-08-24T20:15:28.366Z","type":"message"}
{"nick":"renrutnnej","message":"cool, thanks!","date":"2016-08-24T20:16:43.848Z","type":"message"}
{"nick":"Fishrock123","message":"renrutnnej: curious, in the youtube chat do you still see a message from Node.js at the top?","date":"2016-08-24T20:16:57.964Z","type":"message"}
{"nick":"Fishrock123","message":"I've never checked if it stays for any account other than this one","date":"2016-08-24T20:17:09.976Z","type":"message"}
{"nick":"renrutnnej","message":"I don't think i see a message there :/","date":"2016-08-24T20:19:35.049Z","type":"message"}
{"nick":"Fishrock123","message":"ok interesting","date":"2016-08-24T20:20:33.356Z","type":"message"}
{"nick":"renrutnnej","message":"I see a message now about Q&A","date":"2016-08-24T20:21:21.059Z","type":"message"}
{"nick":"seishun","date":"2016-08-24T20:23:05.527Z","type":"join"}
{"nick":"seishun","message":"damn, missed the beginning because of a win10 update","date":"2016-08-24T20:23:32.894Z","type":"message"}
{"nick":"addaleax","message":"seishun: we started pretty late today","date":"2016-08-24T20:26:36.586Z","type":"message"}
{"nick":"addaleax","message":"seishun: are you listening? anything you’d like to add?","date":"2016-08-24T20:30:48.418Z","type":"message"}
{"nick":"seishun","message":"james was hard to hear so I didn't quite get the resolution","date":"2016-08-24T20:31:34.272Z","type":"message"}
{"nick":"addaleax","message":"we basically agreed on doing the `new`-less Buffer deprecation in v7","date":"2016-08-24T20:32:51.606Z","type":"message"}
{"nick":"addaleax","message":"and yeah, he was hard to hear for everyone","date":"2016-08-24T20:33:02.225Z","type":"message"}
{"nick":"addaleax","message":"and I think leaving the discussion around `new`-based Buffer construction for a later time","date":"2016-08-24T20:38:13.361Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-08-24T20:56:08.684Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T20:56:08.835Z","type":"part"}
{"nick":"seishun","message":"trevnorris (?) mentioned that removing construction without new is enough to clean up code, but as far as I'm aware, it wouldn't decrease LOC count much. You'd still need a separate FastBuffer, for instance","date":"2016-08-24T20:59:05.200Z","type":"message"}
{"nick":"trevnorris","message":"seishun: why? class Buffer extends Uint8Array {} would be enough.","date":"2016-08-24T20:59:50.335Z","type":"message"}
{"nick":"seishun","message":"trevnorris: what about all the legacy constructors?","date":"2016-08-24T21:00:17.137Z","type":"message"}
{"nick":"trevnorris","message":"have native APIs construct an ArrayBuffer, and pass that to super() instead.","date":"2016-08-24T21:01:00.357Z","type":"message"}
{"nick":"trevnorris","message":"i was skeptical as well, but got it working in a prototype impl.","date":"2016-08-24T21:01:24.160Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-08-24T21:01:56.297Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T21:01:56.488Z","type":"part"}
{"nick":"seishun","message":"trevnorris: could you link to that?","date":"2016-08-24T21:02:24.832Z","type":"message"}
{"nick":"trevnorris","message":"heh. let's see if I can find it. did it as a native module that mimic'd Buffer.","date":"2016-08-24T21:04:37.003Z","type":"message"}
{"nick":"trevnorris","message":"if i can't i'll type it up again and get it to you.","date":"2016-08-24T21:04:48.658Z","type":"message"}
{"nick":"addaleax","message":"seishun trevnorris … something like https://github.com/addaleax/node/commit/ec09d43f9a5299f09c79e7c7af550b927fe31bc1 would keep all legacy constructors intact","date":"2016-08-24T21:05:16.684Z","type":"message"}
{"nick":"addaleax","message":"or is your question just about loc?","date":"2016-08-24T21:05:22.014Z","type":"message"}
{"nick":"seishun","message":"I was asking about the \"clean up code\" part","date":"2016-08-24T21:05:54.493Z","type":"message"}
{"nick":"trevnorris","message":"addaleax: my point was that if we require new then it's as simple as class Buffer extends Uint8Array {}","date":"2016-08-24T21:06:10.310Z","type":"message"}
{"nick":"trevnorris","message":"and in the constructor, create an ArrayBuffer for custom arguments and pass that to super()","date":"2016-08-24T21:06:26.798Z","type":"message"}
{"nick":"addaleax","message":"trevnorris: yes, no doubt about that","date":"2016-08-24T21:06:33.578Z","type":"message"}
{"nick":"seishun","message":"trevnorris: how would Buffer.alloc work?","date":"2016-08-24T21:08:59.106Z","type":"message"}
{"nick":"trevnorris","message":"seishun: well, since Uint8Array (and Buffer) accepts ArrayBuffers, construct the ArrayBuffer and pass that to the Buffer constructor.","date":"2016-08-24T21:11:22.577Z","type":"message"}
{"nick":"trevnorris","message":"basically the native code we have would just return the ArrayBuffer instead of the Uint8Array it does now.","date":"2016-08-24T21:11:47.481Z","type":"message"}
{"nick":"renrutnnej","date":"2016-08-24T21:12:05.968Z","type":"part"}
{"nick":"trevnorris","message":"and make some internal changes so we could write to, etc., directly to array buffers.","date":"2016-08-24T21:12:12.880Z","type":"message"}
{"nick":"addaleax","message":"yup","date":"2016-08-24T21:13:14.149Z","type":"message"}
{"nick":"trevnorris","message":"Domenic: ^ you're request from forever ago may just come true :)","date":"2016-08-24T21:14:03.114Z","type":"message"}
{"nick":"Domenic","message":"\\o/","date":"2016-08-24T21:14:24.830Z","type":"message"}
{"nick":"seishun","message":"so, will that require a bunch of additions to node_buffer.cc?","date":"2016-08-24T21:15:11.273Z","type":"message"}
{"nick":"trevnorris","message":"no actually. mostly code removal","date":"2016-08-24T21:15:39.343Z","type":"message"}
{"nick":"trevnorris","message":"everything needs to start as, or become, and array buffer. so we just cut out the extra step of making it to or taking it from the uint8array","date":"2016-08-24T21:16:34.918Z","type":"message"}
{"nick":"addaleax","message":"this won’t actually have to touch the native side much, will it?","date":"2016-08-24T21:16:35.107Z","type":"message"}
{"nick":"seishun","message":"how do you construct the ArrayBuffer for Buffer.alloc?","date":"2016-08-24T21:16:49.596Z","type":"message"}
{"nick":"trevnorris","message":"nope. i already know all the places that have to change. it's minimal.","date":"2016-08-24T21:16:57.637Z","type":"message"}
{"nick":"trevnorris","message":"new ArrayBuffer(n)","date":"2016-08-24T21:17:18.972Z","type":"message"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-08-24T21:17:37.531Z","type":"quit"}
{"nick":"evanlucas","reason":"Ping timeout: 250 seconds","date":"2016-08-24T21:17:39.058Z","type":"quit"}
{"nick":"trevnorris","message":"if you need to fill it, then bindings.createAndFill(n), which would \"new char*\" fill then return ArrayBuffer::New(char)","date":"2016-08-24T21:18:47.020Z","type":"message"}
{"nick":"trevnorris","message":"okay, would be createAndFill(size, fill, encoding)","date":"2016-08-24T21:19:28.668Z","type":"message"}
{"nick":"seishun","message":"is `new Uint8Array(new ArrayBuffer(n))` as fast as `new Uint8Array(n)`?","date":"2016-08-24T21:19:42.903Z","type":"message"}
{"nick":"trevnorris","message":"iirc, yes. internally it still creates the two constructs.","date":"2016-08-24T21:19:59.597Z","type":"message"}
{"nick":"trevnorris","message":"b/c the array buffer is still accessible as .buffer","date":"2016-08-24T21:20:09.973Z","type":"message"}
{"nick":"evanlucas","date":"2016-08-24T21:20:10.459Z","type":"join"}
{"nick":"seishun","message":"I see","date":"2016-08-24T21:20:18.474Z","type":"message"}
{"nick":"addaleax","message":"we don’t need to do the former anyway… for unpooled allocs we can use super(n), and for pooled allocation super(pool, offset, length) if we make the pool an ArrayBuffer","date":"2016-08-24T21:21:08.830Z","type":"message"}
{"nick":"trevnorris","message":"but pooled allocations only come from non-zero-filled memory (currently)","date":"2016-08-24T21:22:02.669Z","type":"message"}
{"nick":"addaleax","message":"not sure how that would a problem? do you want new Buffer(n) to always be zero-filled once it’s a class?","date":"2016-08-24T21:23:40.765Z","type":"message"}
{"nick":"trevnorris","message":"super(n) will always give zero-filled. so we need to pass array buffers for non-zero filled memory.","date":"2016-08-24T21:24:27.159Z","type":"message"}
{"nick":"addaleax","message":"I’m pretty super(n) only gives zero-filled memory when the zero-fill flag is on, and that’s controlled by us","date":"2016-08-24T21:25:39.285Z","type":"message"}
{"nick":"addaleax","message":"createUnsafeBuffer() current just sets the flag, calls new FastBuffer() (which is equivalent to new Uint8Array for zero-filling purposes) and then unsets it again","date":"2016-08-24T21:26:07.525Z","type":"message"}
{"nick":"trevnorris","message":"if we do \"class Buffer extends Uint8Array\" then super(n) will always be zero-filled.","date":"2016-08-24T21:26:20.183Z","type":"message"}
{"nick":"trevnorris","message":"that whole createUnsafeBuffer flag thing will be blasted to hell. that was an abomination of mine that needs to die.","date":"2016-08-24T21:26:59.227Z","type":"message"}
{"nick":"addaleax","message":"well, yeah, if you remove the flag it will","date":"2016-08-24T21:27:51.888Z","type":"message"}
{"nick":"trevnorris","message":"we won't have to anymore to save performance (reason I first implemented it)","date":"2016-08-24T21:28:44.576Z","type":"message"}
{"nick":"ChALkeR","message":"Did everyone see that?","date":"2016-08-24T21:29:28.816Z","type":"message"}
{"nick":"ChALkeR","message":"https://www.npmjs.com/package/natives","date":"2016-08-24T21:29:38.586Z","type":"message"}
{"nick":"seishun","reason":"Quit: Leaving","date":"2016-08-24T21:30:22.187Z","type":"quit"}
{"nick":"seishun","date":"2016-08-24T21:30:46.232Z","type":"join"}
{"nick":"addaleax","message":"huh","date":"2016-08-24T21:31:12.498Z","type":"message"}
{"nick":"Fishrock123","message":"hey we should rename the flag next major","date":"2016-08-24T21:31:39.154Z","type":"message"}
{"nick":"trevnorris","message":"yes, please.","date":"2016-08-24T21:36:42.957Z","type":"message"}
{"nick":"ChALkeR","message":"Did you see the code of that module, btw?","date":"2016-08-24T21:37:36.104Z","type":"message"}
{"nick":"ChALkeR","message":"https://github.com/isaacs/natives/blob/master/index.js","date":"2016-08-24T21:37:43.510Z","type":"message"}
{"nick":"Fishrock123","message":"looking at it","date":"2016-08-24T21:37:47.344Z","type":"message"}
{"nick":"ChALkeR","message":"it uses process.binding('natives'), process.binding('contextify'), process.binding('evals'), and is hardcoded to be a noop for `buffer` module.","date":"2016-08-24T21:38:19.001Z","type":"message"}
{"nick":"Fishrock123","message":"> 203,341 downloads in the last day","date":"2016-08-24T21:39:17.408Z","type":"message"}
{"nick":"Fishrock123","message":"Dependencies","date":"2016-08-24T21:39:20.410Z","type":"message"}
{"nick":"Fishrock123","message":"None","date":"2016-08-24T21:39:20.562Z","type":"message"}
{"nick":"Fishrock123","message":"or wait","date":"2016-08-24T21:39:39.430Z","type":"message"}
{"nick":"Fishrock123","message":"should that be dependants? I don't even know","date":"2016-08-24T21:39:47.276Z","type":"message"}
{"nick":"trevnorris","message":"a dependant","date":"2016-08-24T21:39:59.530Z","type":"message"}
{"nick":"trevnorris","message":"dependencies is what it needs","date":"2016-08-24T21:40:09.545Z","type":"message"}
{"nick":"ChALkeR","message":"Fishrock123: graceful-fs@3.0.10","date":"2016-08-24T21:41:13.492Z","type":"message"}
{"nick":"ChALkeR","message":"On the bright side, we can now track the exact graceful-fs@3 downloads per month.","date":"2016-08-24T21:42:05.260Z","type":"message"}
{"nick":"ChALkeR","message":"On the bad side, it would be awful if someone else starts using that module.","date":"2016-08-24T21:42:24.038Z","type":"message"}
{"nick":"Fishrock123","message":"That's a good thing yeah","date":"2016-08-24T21:42:25.554Z","type":"message"}
{"nick":"ChALkeR","message":"In fact, it should have just a «DO NOT USE THIS» with huge red letters instead of a lengthy readme.","date":"2016-08-24T21:43:29.414Z","type":"message"}
{"nick":"Fishrock123","message":"We should probably PR it stating that we will not support dependants of it other than graceful-fs","date":"2016-08-24T21:43:32.628Z","type":"message"}
{"nick":"Fishrock123","message":"If people actually *need* internals, that means we have an API issue and we need to expose an API for it somehow","date":"2016-08-24T21:44:07.633Z","type":"message"}
{"nick":"Fishrock123","message":"as already proven with g-fs, that is not the case","date":"2016-08-24T21:44:20.644Z","type":"message"}
{"nick":"Fishrock123","message":"god why does this stupid saga keep dragging on","date":"2016-08-24T21:44:29.649Z","type":"message"}
{"nick":"seishun","reason":"Read error: Connection reset by peer","date":"2016-08-24T21:45:50.035Z","type":"quit"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-08-24T21:45:55.212Z","type":"quit"}
{"nick":"seishun","date":"2016-08-24T21:47:16.961Z","type":"join"}
{"nick":"Fishrock123","message":"we should have changed internal modules to nto ever show up in process.bind('natives') ffs","date":"2016-08-24T21:50:29.927Z","type":"message"}
{"nick":"ChALkeR","message":"Fishrock123: yes","date":"2016-08-24T21:52:34.848Z","type":"message"}
{"nick":"Fishrock123","message":"technically, we probably still could","date":"2016-08-24T21:52:57.030Z","type":"message"}
{"nick":"ChALkeR","message":"We have some APIs missing without it.","date":"2016-08-24T21:53:54.455Z","type":"message"}
{"nick":"ChALkeR","message":"The main use-case as far as I remember was to get the list of internal modules","date":"2016-08-24T21:54:09.194Z","type":"message"}
{"nick":"Fishrock123","message":"yeah but then it devolved into a \"well you could do this cool debugging thing that no-one's actually done and no-one will have the time to do\"","date":"2016-08-24T21:54:47.105Z","type":"message"}
{"nick":"ChALkeR","message":"It did?","date":"2016-08-24T21:55:20.679Z","type":"message"}
{"nick":"ChALkeR","message":"I think I missed that.","date":"2016-08-24T21:55:28.375Z","type":"message"}
{"nick":"ChALkeR","message":"Or forgot =)","date":"2016-08-24T21:55:31.146Z","type":"message"}
{"nick":"bradleymeck","date":"2016-08-24T21:56:35.632Z","type":"part"}
{"nick":"ChALkeR","message":"require('natives').require('util') === 2","date":"2016-08-24T21:56:59.455Z","type":"message"}
{"nick":"ChALkeR","message":"ah, no","date":"2016-08-24T21:57:09.636Z","type":"message"}
{"nick":"lanceball","new_nick":"lance|afk","date":"2016-08-24T21:57:29.257Z","type":"nick"}
{"nick":"saghul","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-08-24T21:57:29.549Z","type":"quit"}
{"nick":"ChALkeR","message":"That's just how toString works for some reason =)","date":"2016-08-24T21:57:56.894Z","type":"message"}
{"nick":"seishun","reason":"Read error: Connection reset by peer","date":"2016-08-24T21:58:48.576Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-08-24T21:59:06.992Z","type":"join"}
{"nick":"seishun","date":"2016-08-24T22:00:13.279Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T22:08:04.466Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T22:08:04.618Z","type":"part"}
{"nick":"alrra","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T22:10:20.525Z","type":"quit"}
{"nick":"jasnell","date":"2016-08-24T22:15:20.930Z","type":"join"}
{"nick":"thefourtheye","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T22:21:30.415Z","type":"quit"}
{"nick":"chrisdickinson_","message":"Fishrock123: ping — I wanted to double check that we're on the same page re: crashing on unhandled rejection — my aim would be to have the process crash on unhandled rejection as soon as one was encountered, if no user-installed unhandledRejection handler was present","date":"2016-08-24T22:27:21.360Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2016-08-24T22:27:27.996Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-08-24T22:27:52.003Z","type":"quit"}
{"nick":"Fishrock123","message":"everyone will hate that","date":"2016-08-24T22:27:52.186Z","type":"message"}
{"nick":"Fishrock123","message":"I am not willing to endur the hate to fight for that","date":"2016-08-24T22:28:00.479Z","type":"message"}
{"nick":"chrisdickinson_","message":"I'm not sure there's an option that everyone will like","date":"2016-08-24T22:28:01.681Z","type":"message"}
{"nick":"chrisdickinson_","message":"non-deterministic crash-on-GC is not going to be popular either, I don't think","date":"2016-08-24T22:28:21.029Z","type":"message"}
{"nick":"Fishrock123","message":"It already is more popular","date":"2016-08-24T22:28:30.749Z","type":"message"}
{"nick":"chrisdickinson_","message":"how?","date":"2016-08-24T22:28:50.915Z","type":"message"}
{"nick":"Fishrock123","message":"there is less chance empirically of it effecting existing use cases","date":"2016-08-24T22:28:58.697Z","type":"message"}
{"nick":"Fishrock123","message":"errr","date":"2016-08-24T22:29:07.123Z","type":"message"}
{"nick":"chrisdickinson_","message":"as a promise user I would disagree","date":"2016-08-24T22:29:08.534Z","type":"message"}
{"nick":"Fishrock123","message":"i remember people strongly not liking your current suggestion in my thread","date":"2016-08-24T22:29:21.571Z","type":"message"}
{"nick":"chrisdickinson_","message":"yes, there are a few folks strongly against it.","date":"2016-08-24T22:29:43.942Z","type":"message"}
{"nick":"Fishrock123","message":"there is more programs .catching later than not catching","date":"2016-08-24T22:29:51.927Z","type":"message"}
{"nick":"Fishrock123","message":"that is empirical.","date":"2016-08-24T22:30:02.007Z","type":"message"}
{"nick":"Fishrock123","message":"err maybe that is missworded","date":"2016-08-24T22:31:03.092Z","type":"message"}
{"nick":"Fishrock123","message":"sorry I have a cold and a lot of stuff on my plate","date":"2016-08-24T22:31:14.934Z","type":"message"}
{"nick":"chrisdickinson_","message":"my suggestion would be to crash on unhandled rejection in the absence of a user-installed reaction to unhandled rejections, since we can message \"if you want your application to allow this behavior, you may enable it explicitly\"","date":"2016-08-24T22:31:16.557Z","type":"message"}
{"nick":"Fishrock123","message":"when","date":"2016-08-24T22:31:33.681Z","type":"message"}
{"nick":"Fishrock123","message":"You cannot detect if there is no .catch","date":"2016-08-24T22:31:43.411Z","type":"message"}
{"nick":"chrisdickinson_","message":"(ah, sorry! feel better soon)","date":"2016-08-24T22:31:43.411Z","type":"message"}
{"nick":"Fishrock123","message":"only if it has not been caught","date":"2016-08-24T22:31:47.590Z","type":"message"}
{"nick":"chrisdickinson_","message":"my MO would be: if a user installs `process.on('unhandledRejection')`, they override node's default \"crash on unhandled rejection\" behavior","date":"2016-08-24T22:32:24.475Z","type":"message"}
{"nick":"chrisdickinson_","message":"(similarly to `process.on('uncaughtException')`)","date":"2016-08-24T22:32:40.000Z","type":"message"}
{"nick":"Fishrock123","message":"correct","date":"2016-08-24T22:32:43.803Z","type":"message"}
{"nick":"Fishrock123","message":"that happens in my PR","date":"2016-08-24T22:32:47.500Z","type":"message"}
{"nick":"Fishrock123","message":"chrisdickinson_: I have an idea, want me to fix up the PR so you can use it locally for like a week or something? It would be interesting to see how that goes...","date":"2016-08-24T22:34:01.859Z","type":"message"}
{"nick":"Fishrock123","message":"I've been menaing to make something more detailed with promises for investigation purposes but our internal projects are in no need of them and I'm very, very bad at thinking of new things to build","date":"2016-08-24T22:34:55.528Z","type":"message"}
{"nick":"chrisdickinson_","message":"I'll have a think about that, all of my promise-based programs are designed specifically to avoid hitting the unhandledRejection handler","date":"2016-08-24T22:35:23.384Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-08-24T22:35:50.267Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T22:35:50.419Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-08-24T22:36:08.689Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T22:36:08.879Z","type":"part"}
{"nick":"chrisdickinson_","message":"(mostly because writing a promise-based program that hits that handler feels like relying on `uncaughtException` to trampoline my package back into working state)","date":"2016-08-24T22:36:17.968Z","type":"message"}
{"nick":"Fishrock123","message":"It really is","date":"2016-08-24T22:36:34.106Z","type":"message"}
{"nick":"Fishrock123","message":"but","date":"2016-08-24T22:36:43.641Z","type":"message"}
{"nick":"Fishrock123","message":"you may find it dependencies","date":"2016-08-24T22:36:48.987Z","type":"message"}
{"nick":"Fishrock123","message":"which is probably most helpful?","date":"2016-08-24T22:36:58.997Z","type":"message"}
{"nick":"chrisdickinson_","message":"hm, most of the time I'm leaning on long stack traces to show me what lead up to the promise, vs. what later depended on it","date":"2016-08-24T22:38:32.621Z","type":"message"}
{"nick":"Fishrock123","message":"chrisdickinson_: not 100% sure I understand","date":"2016-08-24T22:40:21.106Z","type":"message"}
{"nick":"chrisdickinson_","message":"ah, I was responding to \"you may find it dependencies\" — I might have parsed that wrong, sorry sorry","date":"2016-08-24T22:40:54.651Z","type":"message"}
{"nick":"Fishrock123","message":"this does highlight something though","date":"2016-08-24T22:41:00.591Z","type":"message"}
{"nick":"Fishrock123","message":"whatever we land isn't actually a debugging solution","date":"2016-08-24T22:41:10.898Z","type":"message"}
{"nick":"Fishrock123","message":"it;s a last ditch effort to tell users something may have gone very wrong","date":"2016-08-24T22:41:27.792Z","type":"message"}
{"nick":"Fishrock123","message":"this for the people running nothing extra","date":"2016-08-24T22:41:54.358Z","type":"message"}
{"nick":"chrisdickinson_","message":"yeah — I tend to find unhandledRejections most often when writing tests, and usually in that case it's because I've done something wrong and the program requires modification","date":"2016-08-24T22:41:58.247Z","type":"message"}
{"nick":"Fishrock123","message":"I think?","date":"2016-08-24T22:41:58.644Z","type":"message"}
{"nick":"chrisdickinson_","message":"yeah — the reason crashing-as-default appeals to me is that it puts program errors out in front of users _early_, which aligns with the rest of Node's M.O.","date":"2016-08-24T22:44:22.857Z","type":"message"}
{"nick":"chrisdickinson_","message":"as it stands, something like `async function foo () { throw new Error() }; http.createServer((req, res) => foo()).listen(8124)` would warn, but never crash, which seems surprising","date":"2016-08-24T22:47:33.012Z","type":"message"}
{"nick":"chrisdickinson_","message":"(well, I suppose technically right now it would never do anything, but as of jasnell's pr, it would warn, but not crash)","date":"2016-08-24T22:48:03.561Z","type":"message"}
{"nick":"jasnell","message":"the warning is an initial step","date":"2016-08-24T22:48:48.677Z","type":"message"}
{"nick":"jasnell","message":"eventually, the right thing to do is definitely error","date":"2016-08-24T22:49:10.749Z","type":"message"}
{"nick":"Fishrock123","message":"jasnell: define \"error\"","date":"2016-08-24T22:49:38.532Z","type":"message"}
{"nick":"Fishrock123","message":"chrisdickinson_: yes but that is counter Promises M.O.","date":"2016-08-24T22:49:59.455Z","type":"message"}
{"nick":"Fishrock123","message":"chrisdickinson_: that will crash on GC with my PR","date":"2016-08-24T22:50:24.944Z","type":"message"}
{"nick":"Fishrock123","message":"or, when the program exists, it will produce error output if it was unahndled","date":"2016-08-24T22:50:37.647Z","type":"message"}
{"nick":"chrisdickinson_","message":"yep, but what if it never GC's?","date":"2016-08-24T22:50:38.606Z","type":"message"}
{"nick":"Fishrock123","message":"see above","date":"2016-08-24T22:50:42.453Z","type":"message"}
{"nick":"chrisdickinson_","message":"(or only GC's far down the line)","date":"2016-08-24T22:50:47.101Z","type":"message"}
{"nick":"jasnell","message":"either bring down the process or process.emit('error') ... bringing down the process is likely the best choice","date":"2016-08-24T22:50:54.791Z","type":"message"}
{"nick":"Fishrock123","message":"error output like a crash and a non-zero exit code","date":"2016-08-24T22:51:00.524Z","type":"message"}
{"nick":"Fishrock123","message":"eventually you'll either exit the application or will be GC'd","date":"2016-08-24T22:51:29.902Z","type":"message"}
{"nick":"Fishrock123","message":"jasnell: emitting an error is not an option","date":"2016-08-24T22:51:42.474Z","type":"message"}
{"nick":"Fishrock123","message":"that exposes GC","date":"2016-08-24T22:51:46.059Z","type":"message"}
{"nick":"chrisdickinson_","message":"(I think Promises M.O. is still somewhat malleable — the existing MO isn't serving new users well)","date":"2016-08-24T22:51:51.285Z","type":"message"}
{"nick":"Fishrock123","message":"god help you if you want to argue againt promise defendants","date":"2016-08-24T22:52:13.584Z","type":"message"}
{"nick":"chrisdickinson_","message":"I mean, that's kind of my balliwick :)","date":"2016-08-24T22:52:31.319Z","type":"message"}
{"nick":"Fishrock123","message":"my goal is to get any form of bringing the process down and non-zero exit code","date":"2016-08-24T22:52:41.865Z","type":"message"}
{"nick":"Fishrock123","message":"GC is the most accepted","date":"2016-08-24T22:53:00.474Z","type":"message"}
{"nick":"Fishrock123","message":"therefore it is the route I took","date":"2016-08-24T22:53:05.978Z","type":"message"}
{"nick":"Fishrock123","message":"and I suspect the route we will be forced into","date":"2016-08-24T22:53:17.416Z","type":"message"}
{"nick":"chrisdickinson_","message":"I think the ground shifted on that one","date":"2016-08-24T22:53:20.280Z","type":"message"}
{"nick":"Fishrock123","message":"maybe if certain TC39 members and module authors do not participate","date":"2016-08-24T22:53:53.377Z","type":"message"}
{"nick":"chrisdickinson_","message":"I definitely agree that at the time of the original unhandled rejection conversation, that crash-on-GC was the accepted route — partially because it was far off","date":"2016-08-24T22:53:54.399Z","type":"message"}
{"nick":"chrisdickinson_","message":"I lean towards \"it's probably okay to crash immediately on unhandled rejection — via process.emit('error') or likewise, per jasnell — as long as we message how to turn that behavior off\"","date":"2016-08-24T22:54:54.588Z","type":"message"}
{"nick":"chrisdickinson_","message":"(it can be part of the upgrade doc for the new major version)","date":"2016-08-24T22:55:05.886Z","type":"message"}
{"nick":"chrisdickinson_","message":"which can be as spare as \"if you want to allow handling unhandled rejections, add `process.on('unhandledRejection', () => {})` to your application's startup\"","date":"2016-08-24T22:55:45.852Z","type":"message"}
{"nick":"ljharb","message":"Fishrock123: i hope i'm not excluded by that category :-p","date":"2016-08-24T22:55:46.320Z","type":"message"}
{"nick":"chrisdickinson_","message":"(or, alternatively, we can add a flag to do that as well)","date":"2016-08-24T22:56:04.499Z","type":"message"}
{"nick":"jasnell","message":"doing the process.on('error') immediately and not waiting for gc would be acceptable I *think*, but I still think I prefer warning for a major first","date":"2016-08-24T22:56:51.394Z","type":"message"}
{"nick":"Fishrock123","message":"I mean ok","date":"2016-08-24T22:57:05.943Z","type":"message"}
{"nick":"jasnell","message":"that is, warning starting in v6/v7 and error starting in v8","date":"2016-08-24T22:57:07.817Z","type":"message"}
{"nick":"Fishrock123","message":"my experience was very harsh feedback to even on GC","date":"2016-08-24T22:57:23.074Z","type":"message"}
{"nick":"Fishrock123","message":"with people saying immediately was even worse","date":"2016-08-24T22:57:38.344Z","type":"message"}
{"nick":"jasnell","message":"unfortunately I don't think we're going to be able to come up with a reasonably good solution here","date":"2016-08-24T22:58:11.538Z","type":"message"}
{"nick":"ljharb","message":"fwiw i think crashing on GC is totally fine, but i think crashing immediately is problematic because the whole purpose is to be able to add rejection handlers later, possibly after the rejection.","date":"2016-08-24T22:58:15.106Z","type":"message"}
{"nick":"Fishrock123","message":"^ case in point","date":"2016-08-24T22:58:26.376Z","type":"message"}
{"nick":"jasnell","message":"at least not one that's going to make everyone happy","date":"2016-08-24T22:58:28.400Z","type":"message"}
{"nick":"chrisdickinson_","message":"ljharb: could you expand on that?","date":"2016-08-24T22:58:35.003Z","type":"message"}
{"nick":"ljharb","message":"note, not because i think that's the best design for Promises - but because that *is* the design for promises.","date":"2016-08-24T22:58:46.724Z","type":"message"}
{"nick":"ljharb","message":"chrisdickinson_: ok, `Promise.reject(3)` - wouldn't that crash immediately?","date":"2016-08-24T22:58:55.080Z","type":"message"}
{"nick":"chrisdickinson_","message":"not until the microtask queue ran","date":"2016-08-24T22:59:13.618Z","type":"message"}
{"nick":"Fishrock123","message":"techncially not until next immediate","date":"2016-08-24T22:59:23.069Z","type":"message"}
{"nick":"Fishrock123","message":"iirc","date":"2016-08-24T22:59:24.152Z","type":"message"}
{"nick":"ljharb","message":"`const rejected = Promise.reject(new Error('i want to cache this error and reuse it')); return new Promise(resolve => { setTimeout(someAsyncTask(function (err) { if (err) { resolve(rejected); } })); });`","date":"2016-08-24T22:59:51.636Z","type":"message"}
{"nick":"ljharb","message":"immediate crash there, then.","date":"2016-08-24T22:59:57.955Z","type":"message"}
{"nick":"Fishrock123","message":"oh nvm, \"nextTick\"","date":"2016-08-24T23:00:11.045Z","type":"message"}
{"nick":"ljharb","message":"immediate crashing is just fundamentally incompatible with the way ES6 promises were designed, for better or worse.","date":"2016-08-24T23:00:30.496Z","type":"message"}
{"nick":"ljharb","message":"whereas crashing on GC has no spec conflict, and provides useful info that wasn't there before.","date":"2016-08-24T23:00:52.505Z","type":"message"}
{"nick":"chrisdickinson_","message":"That seems like a pretty strong statement — it's _possible_ to handle a rejection after the fact, but generally it's not great to do so","date":"2016-08-24T23:01:05.804Z","type":"message"}
{"nick":"ljharb","message":"because it's possible tho, it must *be* possible","date":"2016-08-24T23:01:19.850Z","type":"message"}
{"nick":"ljharb","message":"whether it's a good practice or not isn't really something an implementation should be legislating","date":"2016-08-24T23:01:33.900Z","type":"message"}
{"nick":"chrisdickinson_","message":"but it still is, if you want it to be","date":"2016-08-24T23:01:37.368Z","type":"message"}
{"nick":"chrisdickinson_","message":"you can opt into it","date":"2016-08-24T23:01:40.201Z","type":"message"}
{"nick":"chrisdickinson_","message":"with a single line in your application that says \"yes, when there's an unhandled rejection, please continue\"","date":"2016-08-24T23:01:53.586Z","type":"message"}
{"nick":"ljharb","message":"oh, i thought we were talking about immediate crashing on unhandled rejection at tick-end?","date":"2016-08-24T23:01:55.744Z","type":"message"}
{"nick":"ljharb","message":"oh","date":"2016-08-24T23:01:57.216Z","type":"message"}
{"nick":"ljharb","message":"ok but then i have to opt in to normal spec behavior","date":"2016-08-24T23:02:04.341Z","type":"message"}
{"nick":"ljharb","message":"which i shouldn't have to do.","date":"2016-08-24T23:02:07.446Z","type":"message"}
{"nick":"ljharb","message":"fwiw i totally would have preferred it if promises required an explicit opt-in to *allow* handling rejection later - but since they didn't, the die is cast.","date":"2016-08-24T23:02:27.866Z","type":"message"}
{"nick":"sankha","date":"2016-08-24T23:02:52.171Z","type":"join"}
{"nick":"chrisdickinson_","message":"Is it spec-defined that we don't crash? Node doesn't operate within the spec, as a runtime we're free to install the handlers and behaviors that best serve our users","date":"2016-08-24T23:03:05.272Z","type":"message"}
{"nick":"ljharb","message":"that's not entirely accurate","date":"2016-08-24T23:03:15.494Z","type":"message"}
{"nick":"chrisdickinson_","message":"i.e., we pre-consume some of these APIs","date":"2016-08-24T23:03:17.214Z","type":"message"}
{"nick":"ljharb","message":"you're only free to deviate from the spec in spec-allowed places, unless you don't want to be able to say that node runs javascript","date":"2016-08-24T23:03:31.101Z","type":"message"}
{"nick":"ljharb","message":"i suppose it might be possible to crash on the unhandled rejection hook","date":"2016-08-24T23:03:50.237Z","type":"message"}
{"nick":"ljharb","message":"but i don't think the value-add is worth it for node to do that.","date":"2016-08-24T23:04:08.235Z","type":"message"}
{"nick":"ljharb","message":"defaults should be safe. if it defaults to crash-on-GC, and there's an easy opt-in to crash-on-immediate, i feel like that covers the use cases.","date":"2016-08-24T23:04:31.901Z","type":"message"}
{"nick":"Fishrock123","message":"not catching is NOT safe","date":"2016-08-24T23:04:43.706Z","type":"message"}
{"nick":"ljharb","message":"safe based on how JS already works.","date":"2016-08-24T23:04:58.907Z","type":"message"}
{"nick":"chrisdickinson_","message":"I would not feel comfortable with that default","date":"2016-08-24T23:05:06.451Z","type":"message"}
{"nick":"ljharb","message":"chrisdickinson_: https://tc39.github.io/ecma262/#sec-host-promise-rejection-tracker specifically says \"An implementation of HostPromiseRejectionTracker must complete normally in all cases.\"","date":"2016-08-24T23:05:08.558Z","type":"message"}
{"nick":"chrisdickinson_","message":"Right, and V8's does","date":"2016-08-24T23:05:17.681Z","type":"message"}
{"nick":"ljharb","message":"so yeah, it violates the spec to crash that way.","date":"2016-08-24T23:05:19.427Z","type":"message"}
{"nick":"chrisdickinson_","message":"Node isn't implementing that spec","date":"2016-08-24T23:05:23.005Z","type":"message"}
{"nick":"Fishrock123","message":"ok , different definittion fo \"safe\"","date":"2016-08-24T23:05:23.844Z","type":"message"}
{"nick":"ljharb","message":"chrisdickinson_: um, i really hope node is implementing the javascript spec","date":"2016-08-24T23:05:48.397Z","type":"message"}
{"nick":"ljharb","message":"if not, it's not node.js anymore","date":"2016-08-24T23:05:50.822Z","type":"message"}
{"nick":"chrisdickinson_","message":"Node is an environment, not a JS runtime","date":"2016-08-24T23:05:52.229Z","type":"message"}
{"nick":"Fishrock123","message":"ljharb: doesn't it also violate the spec to crash on uncaught error?","date":"2016-08-24T23:05:58.863Z","type":"message"}
{"nick":"konobi","message":"node is a js runtime","date":"2016-08-24T23:06:08.034Z","type":"message"}
{"nick":"Fishrock123","message":"it's a runetime, not an implemnting VM","date":"2016-08-24T23:06:21.657Z","type":"message"}
{"nick":"ljharb","message":"Fishrock123: not on GC, the spec doesn't govern that","date":"2016-08-24T23:06:26.121Z","type":"message"}
{"nick":"konobi","message":"quite explictly so","date":"2016-08-24T23:06:30.830Z","type":"message"}
{"nick":"ljharb","message":"a JS runtime needs to follow the JS spec.","date":"2016-08-24T23:06:35.862Z","type":"message"}
{"nick":"chrisdickinson_","message":"node has-a js runtime, with which it provides its environment","date":"2016-08-24T23:06:41.810Z","type":"message"}
{"nick":"Fishrock123","message":"ljharb: for regualr errors without promises","date":"2016-08-24T23:06:42.028Z","type":"message"}
{"nick":"ljharb","message":"Fishrock123: yeah that's allowed","date":"2016-08-24T23:06:48.234Z","type":"message"}
{"nick":"ljharb","message":"similarly, an environment that runs JS must comply with the JS spec, or else it *doesn't run JS*","date":"2016-08-24T23:06:56.774Z","type":"message"}
{"nick":"ljharb","message":"that's the point of the JS spec.","date":"2016-08-24T23:07:00.744Z","type":"message"}
{"nick":"chrisdickinson_","message":"so, we already don't run JS, per the spec","date":"2016-08-24T23:07:13.447Z","type":"message"}
{"nick":"Fishrock123","message":"chrisdickinson_: we call it a runtime, that could be adjusted if there is a better word or it is not accurate","date":"2016-08-24T23:07:15.560Z","type":"message"}
{"nick":"ljharb","message":"how so?","date":"2016-08-24T23:07:16.445Z","type":"message"}
{"nick":"sankha","reason":"Ping timeout: 244 seconds","date":"2016-08-24T23:07:18.926Z","type":"quit"}
{"nick":"chrisdickinson_","message":"(I mean, the module loader we have pretty much opts us out of the spec)","date":"2016-08-24T23:07:32.990Z","type":"message"}
{"nick":"konobi","message":"native/JS boundaries and semantics are less defined though","date":"2016-08-24T23:07:39.810Z","type":"message"}
{"nick":"ljharb","message":"chrisdickinson_: how so?","date":"2016-08-24T23:07:46.480Z","type":"message"}
{"nick":"ljharb","message":"chrisdickinson_: do you mean the IIFE wrapped around modules?","date":"2016-08-24T23:07:53.890Z","type":"message"}
{"nick":"chrisdickinson_","message":"top-level in a Node.js javascript file is function-scope, vs. Script-scope","date":"2016-08-24T23:08:00.860Z","type":"message"}
{"nick":"chrisdickinson_","message":"yep","date":"2016-08-24T23:08:01.997Z","type":"message"}
{"nick":"ljharb","message":"the spec doesn't mandate files, so that doesn't actually deviate.","date":"2016-08-24T23:08:07.875Z","type":"message"}
{"nick":"ljharb","message":"despite AWB's comments about it.","date":"2016-08-24T23:08:13.441Z","type":"message"}
{"nick":"chrisdickinson_","message":"I mean, this is arguing a technicality, it comes down to: what is the value of following the spec rigidly here?","date":"2016-08-24T23:08:30.302Z","type":"message"}
{"nick":"ljharb","message":"ie, because node complies with \"Script code wrapped in a function\", it's fine","date":"2016-08-24T23:08:31.810Z","type":"message"}
{"nick":"chrisdickinson_","message":"or allowing the spec to guide what we are able to do in this circumstance?","date":"2016-08-24T23:08:40.924Z","type":"message"}
{"nick":"ljharb","message":"the value is that existing JS code that relies on being able to add a rejection handler later won't crash","date":"2016-08-24T23:08:42.716Z","type":"message"}
{"nick":"ljharb","message":"and that is a valuable thing.","date":"2016-08-24T23:08:49.416Z","type":"message"}
{"nick":"chrisdickinson_","message":"OK, are you precluded from doing so if our default rejection behavior is to crash?","date":"2016-08-24T23:09:03.695Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2016-08-24T23:09:07.556Z","type":"message"}
{"nick":"ljharb","message":"because i might be doing that in a package, and only a top-level app should be changing unhandled rejection behavior","date":"2016-08-24T23:09:23.744Z","type":"message"}
{"nick":"chrisdickinson_","message":"right, but it's unsafe to rely on unhandled rejection behavior from within a package in any case, correct?","date":"2016-08-24T23:09:57.867Z","type":"message"}
{"nick":"ljharb","message":"not necessarily","date":"2016-08-24T23:10:23.536Z","type":"message"}
{"nick":"chrisdickinson_","message":"(in that it's calling out to another handler that you don't control, that could potentially choose to crash the application)","date":"2016-08-24T23:10:24.335Z","type":"message"}
{"nick":"ljharb","message":"not all rejections are exceptions that i'd want to bubble up.","date":"2016-08-24T23:10:38.307Z","type":"message"}
{"nick":"chrisdickinson_","message":"(or in the near future, it will start warning, and appearing as if it needs to be fixed)","date":"2016-08-24T23:10:45.160Z","type":"message"}
{"nick":"ljharb","message":"the warnings are one thing, presuming there's a way for me to explicitly mark my rejected promise as being intentionally unhandled.","date":"2016-08-24T23:11:05.946Z","type":"message"}
{"nick":"chrisdickinson_","message":"(there's not, at present — the way to signal that intent is to handle the rejection)","date":"2016-08-24T23:11:40.629Z","type":"message"}
{"nick":"Fishrock123","message":"> presuming there's a way for me to explicitly mark my rejected promise as being intentionally unhandled.","date":"2016-08-24T23:12:08.641Z","type":"message"}
{"nick":"ljharb","message":"right. so that's another problem with \"crash immediately\"","date":"2016-08-24T23:12:13.187Z","type":"message"}
{"nick":"Fishrock123","message":"that's a langauge problem really","date":"2016-08-24T23:12:14.560Z","type":"message"}
{"nick":"chrisdickinson_","message":"i.e., `xs = Promise.reject(); xs.catch(); // saving it for later!`","date":"2016-08-24T23:12:21.403Z","type":"message"}
{"nick":"ljharb","message":"it's not a problem unless node introduces this behavior.","date":"2016-08-24T23:12:24.513Z","type":"message"}
{"nick":"ljharb","message":"chrisdickinson_: sure, that's ugly but at least would work.","date":"2016-08-24T23:12:38.764Z","type":"message"}
{"nick":"ljharb","message":"(to suppress the warning)","date":"2016-08-24T23:13:05.039Z","type":"message"}
{"nick":"chrisdickinson_","message":"it's... kind of a problem already — I would avoid using any package that hit unhandledRejection, and would advise that the safest way to write a promise-using package is to avoid relying on handling previously unhandled rejections","date":"2016-08-24T23:13:27.520Z","type":"message"}
{"nick":"ljharb","message":"i think that, as community pressure, is great","date":"2016-08-24T23:13:54.796Z","type":"message"}
{"nick":"ljharb","message":"crash-on-gc + immediate-warning would provide that.","date":"2016-08-24T23:14:04.689Z","type":"message"}
{"nick":"chrisdickinson_","message":"& it should be possible to write any promise-using program to avoid unhandled rejection","date":"2016-08-24T23:14:10.395Z","type":"message"}
{"nick":"ljharb","message":"i agree with that.","date":"2016-08-24T23:14:18.589Z","type":"message"}
{"nick":"ljharb","message":"but it shouldn't be *required* to do so at a language/runtime/env level.","date":"2016-08-24T23:14:31.135Z","type":"message"}
{"nick":"chrisdickinson_","message":"it might be worth a different tack here — to be honest, I would be nervous about putting a crash-on-gc program in prod.","date":"2016-08-24T23:14:42.910Z","type":"message"}
{"nick":"chrisdickinson_","message":"if it crashes on someone that isn't intimately familiar with promises or GC, it's going to be very hard for them to debug","date":"2016-08-24T23:15:20.864Z","type":"message"}
{"nick":"ljharb","message":"so i think that, at the least, putting in as a default an immediate console warning is a great idea","date":"2016-08-24T23:15:24.473Z","type":"message"}
{"nick":"chrisdickinson_","message":"and the error is entirely at the control of the outside world, vs. internally to node","date":"2016-08-24T23:15:33.235Z","type":"message"}
{"nick":"ljharb","message":"true","date":"2016-08-24T23:15:40.994Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-08-24T23:15:56.755Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T23:15:56.907Z","type":"part"}
{"nick":"ljharb","message":"also i think that if you provided an easy opt-in mechanism for \"crash-immediately\" that'd be a great idea","date":"2016-08-24T23:16:08.322Z","type":"message"}
{"nick":"ljharb","message":"and both of those could be safely added now","date":"2016-08-24T23:16:12.656Z","type":"message"}
{"nick":"ljharb","message":"unrelated to any other promise questions","date":"2016-08-24T23:16:20.146Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-08-24T23:16:36.683Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T23:16:36.835Z","type":"part"}
{"nick":"ljharb","message":"a year of those, and for all we know, maybe the opinions around what the default should be will shift","date":"2016-08-24T23:16:58.652Z","type":"message"}
{"nick":"chrisdickinson_","message":"maybe the thing to do is to add the warning for now without being specific about _when_ exactly the program will crash due to unhandled rejection","date":"2016-08-24T23:18:42.049Z","type":"message"}
{"nick":"ljharb","message":"i think that would be grea","date":"2016-08-24T23:19:12.791Z","type":"message"}
{"nick":"ljharb","message":"t","date":"2016-08-24T23:19:13.765Z","type":"message"}
{"nick":"ljharb","message":"that would at least start the timer on socializing the opinion \"do not rely on later handling unhandled rejections\"","date":"2016-08-24T23:19:35.261Z","type":"message"}
{"nick":"ljharb","message":"that seems like something that could possibly go in as a non-major.","date":"2016-08-24T23:20:27.869Z","type":"message"}
{"nick":"al-damiri","reason":"Quit: Connection closed for inactivity","date":"2016-08-24T23:21:06.373Z","type":"quit"}
{"nick":"chrisdickinson_","message":"yeah, I think jasnell's timings make sense — warning in v6/7, but waiting until this time next year to determine \"how\" we go about a full deprecation","date":"2016-08-24T23:23:16.412Z","type":"message"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2016-08-24T23:23:24.577Z","type":"quit"}
{"nick":"ljharb","message":"yeah","date":"2016-08-24T23:26:05.785Z","type":"message"}
{"nick":"Fishrock123","message":"so long as it specifies the program will exit, seems fine to me","date":"2016-08-24T23:26:37.202Z","type":"message"}
{"nick":"jasnell","date":"2016-08-24T23:32:57.114Z","type":"join"}
{"nick":"jasnell_","date":"2016-08-24T23:35:11.385Z","type":"join"}
{"nick":"jasnell","reason":"Read error: Connection reset by peer","date":"2016-08-24T23:35:11.716Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2016-08-24T23:39:00.217Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-08-24T23:46:58.432Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T23:46:58.584Z","type":"part"}
{"nick":"Fishrock123","date":"2016-08-24T23:51:40.914Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2016-08-24T23:51:59.168Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-08-24T23:56:30.072Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-08-24T23:56:30.223Z","type":"part"}
