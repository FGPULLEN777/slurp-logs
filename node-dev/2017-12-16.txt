{"nick":"nodejs-gh","date":"2017-12-16T00:05:30.412Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T00:05:30.589Z","type":"part"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2017-12-16T00:05:53.795Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-16T00:08:06.474Z","type":"join"}
{"nick":"AtumT_","date":"2017-12-16T00:09:45.319Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2017-12-16T00:10:28.406Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-12-16T00:13:57.288Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-12-16T01:11:09.225Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-12-16T01:11:46.398Z","type":"quit"}
{"nick":"floatleft","reason":"Ping timeout: 272 seconds","date":"2017-12-16T01:39:32.182Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-16T01:42:27.312Z","type":"join"}
{"nick":"floatleft","reason":"Read error: Connection reset by peer","date":"2017-12-16T01:54:06.561Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-16T01:54:17.564Z","type":"join"}
{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2017-12-16T02:49:00.602Z","type":"quit"}
{"nick":"bradleymeck","date":"2017-12-16T03:19:49.233Z","type":"part"}
{"nick":"floatleft","reason":"Ping timeout: 265 seconds","date":"2017-12-16T03:40:30.997Z","type":"quit"}
{"nick":"apapirovski","date":"2017-12-16T04:05:18.273Z","type":"join"}
{"nick":"floatleft","date":"2017-12-16T04:14:03.360Z","type":"join"}
{"nick":"apapirovski","reason":"Remote host closed the connection","date":"2017-12-16T04:32:47.234Z","type":"quit"}
{"nick":"apapirovski","date":"2017-12-16T04:43:27.551Z","type":"join"}
{"nick":"apapirovski","reason":"Remote host closed the connection","date":"2017-12-16T05:01:17.557Z","type":"quit"}
{"nick":"nodejs-gh","date":"2017-12-16T05:21:50.426Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T05:21:50.494Z","type":"part"}
{"nick":"Nomsy","date":"2017-12-16T05:48:11.302Z","type":"join"}
{"nick":"Fishrock123","date":"2017-12-16T05:55:02.439Z","type":"join"}
{"nick":"sgimeno","reason":"Ping timeout: 240 seconds","date":"2017-12-16T05:56:28.475Z","type":"quit"}
{"nick":"Fishrock123","reason":"Client Quit","date":"2017-12-16T05:56:42.276Z","type":"quit"}
{"nick":"sgimeno","date":"2017-12-16T05:56:50.446Z","type":"join"}
{"nick":"lpin","date":"2017-12-16T06:19:51.974Z","type":"join"}
{"nick":"JamesMGreene","date":"2017-12-16T06:52:37.345Z","type":"join"}
{"nick":"JamesMGreene","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2017-12-16T07:07:28.690Z","type":"quit"}
{"nick":"nodejs-gh","date":"2017-12-16T07:26:30.394Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T07:26:30.542Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-16T07:26:54.381Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T07:26:54.529Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-16T07:32:43.386Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T07:32:43.534Z","type":"part"}
{"nick":"marthinal","date":"2017-12-16T07:36:51.174Z","type":"join"}
{"nick":"marthinal","reason":"Client Quit","date":"2017-12-16T07:38:27.803Z","type":"quit"}
{"nick":"dave0x6d","reason":"Quit: Connection closed for inactivity","date":"2017-12-16T07:54:22.538Z","type":"quit"}
{"nick":"seishun","date":"2017-12-16T09:40:57.625Z","type":"join"}
{"nick":"marthinal","date":"2017-12-16T09:56:35.811Z","type":"join"}
{"nick":"marthinal_","date":"2017-12-16T09:58:58.830Z","type":"join"}
{"nick":"marthinal","reason":"Read error: Connection reset by peer","date":"2017-12-16T09:59:10.397Z","type":"quit"}
{"nick":"BridgeAR","reason":"Quit: Leaving.","date":"2017-12-16T10:12:17.909Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-12-16T11:25:10.465Z","type":"quit"}
{"nick":"mylesborins","date":"2017-12-16T11:25:41.259Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2017-12-16T11:28:12.670Z","type":"quit"}
{"nick":"marthinal_","reason":"Quit: This computer has gone to sleep","date":"2017-12-16T12:13:17.507Z","type":"quit"}
{"nick":"apapirovski","date":"2017-12-16T12:38:16.504Z","type":"join"}
{"nick":"apapirovski","reason":"Quit: Leaving...","date":"2017-12-16T12:49:58.650Z","type":"quit"}
{"nick":"floatleft","reason":"Ping timeout: 264 seconds","date":"2017-12-16T15:14:09.307Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-16T15:15:19.323Z","type":"join"}
{"nick":"floatleft","reason":"Ping timeout: 263 seconds","date":"2017-12-16T15:27:21.236Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-16T15:28:23.551Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T15:30:54.109Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T15:30:54.173Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-16T15:31:01.446Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T15:31:01.514Z","type":"part"}
{"nick":"AtumT_","date":"2017-12-16T15:31:15.545Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T15:32:47.450Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T15:32:47.597Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-16T15:39:12.152Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T15:39:12.385Z","type":"part"}
{"nick":"dave0x6d","date":"2017-12-16T16:25:35.333Z","type":"join"}
{"nick":"floatleft","reason":"Read error: Connection reset by peer","date":"2017-12-16T16:37:16.560Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-16T16:51:19.219Z","type":"join"}
{"nick":"gabrielschulhof","date":"2017-12-16T17:14:32.350Z","type":"join"}
{"nick":"gabrielschulhof","message":"Hey, all! I got a question about node::CallbackScope. In order to construct one, you need a v8::Local<v8::Object> for the resource parameter. However, in order to grab *that* from a persistent you need at least a handle scope. So, what is the correct process to follow when the stack starts with the uv main loop?","date":"2017-12-16T17:15:56.579Z","type":"message"}
{"nick":"gabrielschulhof","message":"Is it node::Handlescope handle_scope; v8::Local<v8::Object> resource; /* assign resource */; node::CallbackScope(isolate, resource, context); /* Call the JS function */;?","date":"2017-12-16T17:16:52.266Z","type":"message"}
{"nick":"addaleax","message":"gabrielschulhof: yeah, pretty much that","date":"2017-12-16T17:33:50.699Z","type":"message"}
{"nick":"BridgeAR","date":"2017-12-16T17:36:25.452Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T17:39:36.427Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T17:39:36.496Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-16T17:52:33.162Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T17:52:33.231Z","type":"part"}
{"nick":"marthinal","date":"2017-12-16T18:10:25.444Z","type":"join"}
{"nick":"apapirovski","date":"2017-12-16T18:59:06.403Z","type":"join"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2017-12-16T19:38:14.036Z","type":"quit"}
{"nick":"marthinal","reason":"Quit: This computer has gone to sleep","date":"2017-12-16T19:50:16.508Z","type":"quit"}
{"nick":"nodejs-gh","date":"2017-12-16T19:51:45.445Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T19:51:45.514Z","type":"part"}
{"nick":"addaleax","message":"apapirovski: I’m just realizing that `Http2Session::SendPendingData()` actually does multiple writes on the target stream without waiting for one to finish …","date":"2017-12-16T20:00:53.512Z","type":"message"}
{"nick":"apapirovski","message":"But it doesn't rely on net's _writeGeneric does it? We have different logic for http2","date":"2017-12-16T20:01:38.693Z","type":"message"}
{"nick":"addaleax","message":"yeah, it’s a different thing","date":"2017-12-16T20:01:46.999Z","type":"message"}
{"nick":"apapirovski","message":"It shouldn't be affected by anything I'm doing but I don't know if there are any theoretical downsides to that behaviour.","date":"2017-12-16T20:03:04.292Z","type":"message"}
{"nick":"addaleax","message":"I’m thinking about it","date":"2017-12-16T20:03:36.934Z","type":"message"}
{"nick":"addaleax","message":"idk if it’s obvious yet from the PRs I’ve been opening but I do have some general refactoring to the writable side coming up :D","date":"2017-12-16T20:04:03.532Z","type":"message"}
{"nick":"gabrielschulhof","reason":"Ping timeout: 240 seconds","date":"2017-12-16T20:04:27.749Z","type":"quit"}
{"nick":"apapirovski","message":"It's probably for the best. I'm also a bit troubled by the diff between how socket write seems to be handled between Win & *nix systems. It has practical implications that I don't think are being accounted for.","date":"2017-12-16T20:06:41.551Z","type":"message"}
{"nick":"addaleax","message":"apapirovski: I didn’t try it yet, but I *hope* a second write of the same size would not be carried out immediately? not sure though","date":"2017-12-16T20:08:16.765Z","type":"message"}
{"nick":"addaleax","message":"otherwise, yeah, something’s wrong","date":"2017-12-16T20:08:21.554Z","type":"message"}
{"nick":"addaleax","message":"like, it’s fine if the kernel wants to have all that memory and take care of writing it itself … it just shouldn’t let the process write more data","date":"2017-12-16T20:09:01.032Z","type":"message"}
{"nick":"apapirovski","message":"I can write as much as I want to :|","date":"2017-12-16T20:10:08.116Z","type":"message"}
{"nick":"addaleax","message":"huh.","date":"2017-12-16T20:10:26.601Z","type":"message"}
{"nick":"apapirovski","message":"and even more troubling, the other side calls `end` after only receiving the first write.","date":"2017-12-16T20:11:19.065Z","type":"message"}
{"nick":"apapirovski","message":"Actually, hold on","date":"2017-12-16T20:14:55.226Z","type":"message"}
{"nick":"apapirovski","message":"Ok, the data makes it through but I can schedule 5 writes and have them all fire their callbacks before the get request even receives one...","date":"2017-12-16T20:17:39.474Z","type":"message"}
{"nick":"devsnek","message":"so i was requested to add my vm modules behind a separate flag from experimental modules, but since vm is marked stable would the flag just be like —vm-modules","date":"2017-12-16T20:19:20.163Z","type":"message"}
{"nick":"nodejs-gh","date":"2017-12-16T20:21:15.433Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T20:21:15.502Z","type":"part"}
{"nick":"nodejs-gh","date":"2017-12-16T20:21:24.148Z","type":"join"}
{"nick":"nodejs-gh","date":"2017-12-16T20:21:24.377Z","type":"part"}
{"nick":"addaleax","message":"devsnek: yeah, something like that should work","date":"2017-12-16T20:21:56.328Z","type":"message"}
{"nick":"devsnek","message":"alright, thanks","date":"2017-12-16T20:22:06.345Z","type":"message"}
{"nick":"apapirovski","message":"addaleax: This feels broken. I mean, I get that the underlying system can take all these calls but it makes it completely non-transparent as to whether they're actually completing or not. I can basically fill the memory with outgoing data because `write` will return true every time","date":"2017-12-16T20:23:41.824Z","type":"message"}
{"nick":"addaleax","message":"apapirovski: i don’t have the windows knowledge to tell whether the bug is in libuv or in Windows","date":"2017-12-16T20:24:15.225Z","type":"message"}
{"nick":"apapirovski","message":"Reading WSASend, I think it might libuv","date":"2017-12-16T20:24:31.452Z","type":"message"}
{"nick":"apapirovski","message":"Will do some more testing. Finally got the debug build to finish lol","date":"2017-12-16T20:25:15.631Z","type":"message"}
{"nick":"addaleax","message":"I mean … https://github.com/libuv/libuv/blob/v1.x/src/win/tcp.c#L893 ← There is code to account for the “has been queued” situation, my testing just didn’t invoke it","date":"2017-12-16T20:25:33.015Z","type":"message"}
{"nick":"aqrln","date":"2017-12-16T20:25:48.644Z","type":"join"}
{"nick":"apapirovski","message":"I think the case above it is also aware that the request is still quasi-pending as it does \"handle->stream.conn.write_reqs_pending++\". As I understand, WSASend, returning 0 doesn't mean the request fully finished.","date":"2017-12-16T20:27:38.655Z","type":"message"}
{"nick":"addaleax","message":"I thought that for libuv that was more about the callback being pending than the data being pending... but I might be wrong","date":"2017-12-16T20:30:58.967Z","type":"message"}
{"nick":"BridgeAR","reason":"Quit: Leaving.","date":"2017-12-16T20:31:58.156Z","type":"quit"}
{"nick":"BridgeAR","date":"2017-12-16T20:32:55.457Z","type":"join"}
{"nick":"apapirovski","message":"I'll definitely need to do more testing. Intuitively, this feels broken, as I shouldn't be able to saturate memory like this. The queue won't kick in until I have a 100+ write requests with 30mb and then it works exactly the same as on *nix.","date":"2017-12-16T20:35:27.236Z","type":"message"}
{"nick":"BridgeAR","reason":"Client Quit","date":"2017-12-16T20:37:19.439Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2017-12-16T20:41:06.489Z","type":"join"}
{"nick":"gabrielschulhof","date":"2017-12-16T20:49:51.180Z","type":"join"}
{"nick":"addaleax","message":"apapirovski: I wonder where the config switch for that limit is.... if it's the kernel I would expect them to have Reasons(tm)","date":"2017-12-16T20:57:08.679Z","type":"message"}
{"nick":"apapirovski","message":"addaleax: Spent some more time with this. Not sure there's anything actionable although the differences between *nix & Windows are a bit weird. For example, on *nix you know when a socket write is happening and it won't unset _handle until it's actually done. On Windows it's just handed off to the kernel and the net request ends, but the write is still ongoing in the background with no ability to affect it except by shu","date":"2017-12-16T20:57:20.785Z","type":"message"}
{"nick":"apapirovski","message":"tting down the process. It's weird to say the least.","date":"2017-12-16T20:57:20.949Z","type":"message"}
{"nick":"addaleax","message":"Yea. I have to admit I'm not sure how this difference affects end users, if it does.","date":"2017-12-16T20:58:45.822Z","type":"message"}
{"nick":"addaleax","message":"But it sounds like we should switch over that test to use a JS stream, not a proper socket","date":"2017-12-16T20:59:16.389Z","type":"message"}
{"nick":"addaleax","message":"Of skip on windows + write a parallel/ test using a JS stream","date":"2017-12-16T20:59:47.948Z","type":"message"}
{"nick":"apapirovski","message":"If we're talking about those wrapped js streams, those don't have a writeQueueSize though, do they?","date":"2017-12-16T21:00:37.660Z","type":"message"}
{"nick":"apapirovski","message":"I think I have a temporary solution for now to get that PR landed and then will revisit this all in another PR.","date":"2017-12-16T21:01:06.383Z","type":"message"}
{"nick":"apapirovski","message":"I think this is just a step along this journey. I think ultimately I would like to arrive at a better solution than this whole writeQueueSize thing. There seem to be a lot of little hacks scattered throughout the StreamBase/Wrap/etc. code.","date":"2017-12-16T21:02:23.405Z","type":"message"}
{"nick":"floatleft","reason":"Ping timeout: 272 seconds","date":"2017-12-16T21:11:50.143Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-16T21:13:43.286Z","type":"join"}
{"nick":"floatleft","reason":"Ping timeout: 264 seconds","date":"2017-12-16T21:33:57.264Z","type":"quit"}
{"nick":"floatleft","date":"2017-12-16T21:34:09.767Z","type":"join"}
{"nick":"addaleax","message":"apapirovski: yea, I fully agree :) i hope i can make things a bit better over the next few weeks","date":"2017-12-16T21:49:15.085Z","type":"message"}
{"nick":"kxnikx","date":"2017-12-16T22:06:49.471Z","type":"join"}
{"nick":"apapirovski","reason":"Remote host closed the connection","date":"2017-12-16T22:32:43.967Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 265 seconds","date":"2017-12-16T22:49:23.457Z","type":"quit"}
{"nick":"apapirovski","date":"2017-12-16T22:54:28.460Z","type":"join"}
{"nick":"kxnikx","reason":"Ping timeout: 265 seconds","date":"2017-12-16T22:56:09.468Z","type":"quit"}
{"nick":"BridgeAR","date":"2017-12-16T23:21:14.303Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 264 seconds","date":"2017-12-16T23:36:21.165Z","type":"quit"}
{"nick":"apapirovski","message":"addaleax: you still around?","date":"2017-12-16T23:40:57.581Z","type":"message"}
