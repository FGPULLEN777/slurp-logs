{"nick":"SomeKittens","reason":"Quit: Connection closed for inactivity","date":"2016-07-11T00:04:41.255Z","type":"quit"}
{"nick":"Meow-J","reason":"Quit: Connection closed for inactivity","date":"2016-07-11T00:49:10.363Z","type":"quit"}
{"nick":"SomeKittens","date":"2016-07-11T02:20:14.042Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T03:14:10.924Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T03:14:11.151Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T03:14:27.893Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T03:14:28.080Z","type":"part"}
{"nick":"brianloveswords","date":"2016-07-11T03:29:10.680Z","type":"join"}
{"nick":"ChALkeR","date":"2016-07-11T03:30:38.972Z","type":"join"}
{"nick":"ChALkeR","reason":"Client Quit","date":"2016-07-11T03:31:16.212Z","type":"quit"}
{"nick":"ChALkeR","date":"2016-07-11T03:31:24.006Z","type":"join"}
{"nick":"ChALkeR","reason":"Client Quit","date":"2016-07-11T03:32:11.092Z","type":"quit"}
{"nick":"joshontheweb","date":"2016-07-11T04:14:26.306Z","type":"join"}
{"nick":"joshontheweb","reason":"Quit: Computer has gone to sleep.","date":"2016-07-11T05:06:14.725Z","type":"quit"}
{"nick":"lpin","date":"2016-07-11T05:09:52.907Z","type":"join"}
{"nick":"sankha","date":"2016-07-11T05:12:49.107Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T05:15:32.364Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T05:15:32.587Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T05:15:53.067Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T05:15:53.254Z","type":"part"}
{"nick":"sankha","reason":"Ping timeout: 250 seconds","date":"2016-07-11T05:16:57.792Z","type":"quit"}
{"nick":"joshontheweb","date":"2016-07-11T05:23:27.468Z","type":"join"}
{"nick":"yuval","date":"2016-07-11T05:26:56.232Z","type":"join"}
{"nick":"sankha","date":"2016-07-11T05:27:52.635Z","type":"join"}
{"nick":"joshontheweb","reason":"Quit: Computer has gone to sleep.","date":"2016-07-11T06:09:34.122Z","type":"quit"}
{"nick":"peutetre","date":"2016-07-11T06:15:06.207Z","type":"join"}
{"nick":"peutetre","reason":"Client Quit","date":"2016-07-11T06:18:56.289Z","type":"quit"}
{"nick":"joshontheweb","date":"2016-07-11T06:25:39.785Z","type":"join"}
{"nick":"seishun","date":"2016-07-11T06:35:42.294Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T06:44:48.346Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T06:44:48.533Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T06:45:03.439Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T06:45:03.626Z","type":"part"}
{"nick":"fl0w","date":"2016-07-11T06:56:37.534Z","type":"join"}
{"nick":"Meow-J","date":"2016-07-11T07:24:36.295Z","type":"join"}
{"nick":"fl0w","reason":"Quit: fl0w","date":"2016-07-11T07:28:24.774Z","type":"quit"}
{"nick":"fl0w","date":"2016-07-11T07:31:39.921Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2016-07-11T07:37:04.027Z","type":"quit"}
{"nick":"nnyk_","date":"2016-07-11T08:24:23.200Z","type":"join"}
{"nick":"BridgeAR","date":"2016-07-11T08:35:43.015Z","type":"join"}
{"nick":"zz_r04r","new_nick":"r04r","date":"2016-07-11T08:36:26.833Z","type":"nick"}
{"nick":"saghul","date":"2016-07-11T08:36:39.739Z","type":"join"}
{"nick":"SomeKittens","reason":"Quit: Connection closed for inactivity","date":"2016-07-11T08:44:41.341Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T09:10:19.399Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T09:10:19.623Z","type":"part"}
{"nick":"nnyk_","reason":"Ping timeout: 244 seconds","date":"2016-07-11T09:19:44.997Z","type":"quit"}
{"nick":"fl0w","reason":"Quit: fl0w","date":"2016-07-11T09:24:09.435Z","type":"quit"}
{"nick":"fl0w","date":"2016-07-11T09:28:17.872Z","type":"join"}
{"nick":"nnyk_","date":"2016-07-11T09:33:17.239Z","type":"join"}
{"nick":"nnyk_","reason":"Ping timeout: 260 seconds","date":"2016-07-11T09:38:12.708Z","type":"quit"}
{"nick":"madjake45_","reason":"Ping timeout: 264 seconds","date":"2016-07-11T09:38:52.090Z","type":"quit"}
{"nick":"nnyk_","date":"2016-07-11T09:40:51.508Z","type":"join"}
{"nick":"peutetre","date":"2016-07-11T09:45:19.190Z","type":"join"}
{"nick":"nnyk_","reason":"Ping timeout: 244 seconds","date":"2016-07-11T09:50:44.997Z","type":"quit"}
{"nick":"fl0w","reason":"Quit: fl0w","date":"2016-07-11T10:01:04.053Z","type":"quit"}
{"nick":"nnyk_","date":"2016-07-11T10:11:12.344Z","type":"join"}
{"nick":"thealphanerd","reason":"Quit: farewell for now","date":"2016-07-11T10:25:56.192Z","type":"quit"}
{"nick":"thealphanerd","date":"2016-07-11T10:26:26.741Z","type":"join"}
{"nick":"peutetre","reason":"Quit: ...","date":"2016-07-11T10:34:08.843Z","type":"quit"}
{"nick":"nnyk_","reason":"Ping timeout: 244 seconds","date":"2016-07-11T10:39:19.008Z","type":"quit"}
{"nick":"peutetre","date":"2016-07-11T10:42:13.770Z","type":"join"}
{"nick":"fl0w","date":"2016-07-11T10:46:35.258Z","type":"join"}
{"nick":"peutetre","reason":"Ping timeout: 260 seconds","date":"2016-07-11T10:47:02.707Z","type":"quit"}
{"nick":"peutetre","date":"2016-07-11T10:53:05.749Z","type":"join"}
{"nick":"nnyk_","date":"2016-07-11T10:53:24.173Z","type":"join"}
{"nick":"nnyk_","reason":"Ping timeout: 252 seconds","date":"2016-07-11T10:58:49.408Z","type":"quit"}
{"nick":"nnyk_","date":"2016-07-11T10:59:24.298Z","type":"join"}
{"nick":"nnyk_","reason":"Ping timeout: 260 seconds","date":"2016-07-11T11:10:57.722Z","type":"quit"}
{"nick":"nnyk_","date":"2016-07-11T11:19:31.784Z","type":"join"}
{"nick":"nnyk_","reason":"Ping timeout: 276 seconds","date":"2016-07-11T11:26:12.299Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-07-11T11:41:51.171Z","type":"join"}
{"nick":"addaleax","date":"2016-07-11T12:10:52.235Z","type":"join"}
{"nick":"craigplafferty","date":"2016-07-11T12:30:24.449Z","type":"join"}
{"nick":"peutetre","reason":"Quit: ...","date":"2016-07-11T12:45:25.864Z","type":"quit"}
{"nick":"howdoi","date":"2016-07-11T12:49:04.394Z","type":"join"}
{"nick":"BridgeAR1","date":"2016-07-11T12:56:32.028Z","type":"join"}
{"nick":"peutetre","date":"2016-07-11T12:57:42.931Z","type":"join"}
{"nick":"r04r","new_nick":"zz_r04r","date":"2016-07-11T12:58:01.446Z","type":"nick"}
{"nick":"BridgeAR","reason":"Ping timeout: 264 seconds","date":"2016-07-11T12:59:16.066Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T13:10:09.272Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T13:10:09.459Z","type":"part"}
{"nick":"joshontheweb","reason":"Quit: Computer has gone to sleep.","date":"2016-07-11T13:18:19.188Z","type":"quit"}
{"nick":"yuval","reason":"Quit: leaving","date":"2016-07-11T13:23:08.473Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T13:27:09.704Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T13:27:09.892Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T13:27:39.713Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T13:27:39.900Z","type":"part"}
{"nick":"joshontheweb","date":"2016-07-11T13:32:51.665Z","type":"join"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2016-07-11T13:33:02.804Z","type":"nick"}
{"nick":"zz_r04r","new_nick":"r04r","date":"2016-07-11T13:40:29.755Z","type":"nick"}
{"nick":"fl0w","reason":"Quit: fl0w","date":"2016-07-11T13:54:06.211Z","type":"quit"}
{"nick":"addaleax","reason":"Ping timeout: 264 seconds","date":"2016-07-11T13:58:40.069Z","type":"quit"}
{"nick":"fl0w","date":"2016-07-11T14:02:17.327Z","type":"join"}
{"nick":"BombStrike","reason":"Ping timeout: 240 seconds","date":"2016-07-11T14:02:31.412Z","type":"quit"}
{"nick":"BombStrike","date":"2016-07-11T14:07:52.854Z","type":"join"}
{"nick":"madjake45","date":"2016-07-11T14:08:16.679Z","type":"join"}
{"nick":"fl0w","reason":"Quit: fl0w","date":"2016-07-11T14:12:56.991Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-07-11T14:18:10.240Z","type":"join"}
{"nick":"nnyk_","date":"2016-07-11T14:39:11.124Z","type":"join"}
{"nick":"peutetre_","date":"2016-07-11T14:40:01.475Z","type":"join"}
{"nick":"peutetre","reason":"Ping timeout: 240 seconds","date":"2016-07-11T14:43:04.019Z","type":"quit"}
{"nick":"nnyk_","reason":"Ping timeout: 258 seconds","date":"2016-07-11T14:44:37.187Z","type":"quit"}
{"nick":"ilbonte","date":"2016-07-11T15:02:27.879Z","type":"join"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-07-11T15:04:29.612Z","type":"quit"}
{"nick":"peutetre_","reason":"Quit: ...","date":"2016-07-11T15:05:03.147Z","type":"quit"}
{"nick":"joshontheweb","reason":"Quit: Computer has gone to sleep.","date":"2016-07-11T15:05:12.504Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-07-11T15:07:42.207Z","type":"quit"}
{"nick":"joshontheweb","date":"2016-07-11T15:08:06.724Z","type":"join"}
{"nick":"bradleymeck","date":"2016-07-11T15:14:01.078Z","type":"join"}
{"nick":"peutetre","date":"2016-07-11T15:17:33.210Z","type":"join"}
{"nick":"r04r","new_nick":"zz_r04r","date":"2016-07-11T15:26:47.187Z","type":"nick"}
{"nick":"nnyk_","date":"2016-07-11T15:32:08.281Z","type":"join"}
{"nick":"addaleax","date":"2016-07-11T15:41:49.076Z","type":"join"}
{"nick":"bradleymeck","message":"Fishrock123: did you manage to talk about the hoisting problem at last CTC? or should I schedule it for this ctc?","date":"2016-07-11T15:42:41.892Z","type":"message"}
{"nick":"Fishrock123","message":"if it's not on the agenda, I forgot x_x","date":"2016-07-11T15:43:13.023Z","type":"message"}
{"nick":"Fishrock123","message":"probably","date":"2016-07-11T15:43:20.697Z","type":"message"}
{"nick":"Fishrock123","message":"or maybe JDD said something about it","date":"2016-07-11T15:43:26.969Z","type":"message"}
{"nick":"sankha","date":"2016-07-11T15:49:41.183Z","type":"join"}
{"nick":"bradleymeck","message":"I'll add it","date":"2016-07-11T15:52:03.425Z","type":"message"}
{"nick":"sankha","reason":"Ping timeout: 240 seconds","date":"2016-07-11T15:54:03.909Z","type":"quit"}
{"nick":"mcollina","date":"2016-07-11T15:56:15.215Z","type":"join"}
{"nick":"peutetre","reason":"Quit: ...","date":"2016-07-11T16:00:24.607Z","type":"quit"}
{"nick":"peutetre","date":"2016-07-11T16:09:06.173Z","type":"join"}
{"nick":"sankha","date":"2016-07-11T16:10:38.199Z","type":"join"}
{"nick":"nnyk_","reason":"Ping timeout: 246 seconds","date":"2016-07-11T16:11:36.103Z","type":"quit"}
{"nick":"seishun","date":"2016-07-11T16:12:20.294Z","type":"join"}
{"nick":"Fishrock123","message":"bradleymeck: i forget, is this a thing? https://github.com/nodejs/node-eps/issues/34","date":"2016-07-11T16:13:08.356Z","type":"message"}
{"nick":"Fishrock123","message":"thealphanerd: btw, I think the LTS meeting is canceled today, James, Rod and Me can't make it afaik","date":"2016-07-11T16:13:30.289Z","type":"message"}
{"nick":"Fishrock123","message":"oh is that technically hoisting too?","date":"2016-07-11T16:14:57.693Z","type":"message"}
{"nick":"bradleymeck","message":"Fishrock123: commented, yes any single value system will be subject to the bridge","date":"2016-07-11T16:15:01.388Z","type":"message"}
{"nick":"Fishrock123","message":"I don't rerally understand that","date":"2016-07-11T16:15:04.317Z","type":"message"}
{"nick":"thealphanerd","message":"Fishrock123 there's a doodle for the LTS meeting","date":"2016-07-11T16:15:08.893Z","type":"message"}
{"nick":"thealphanerd","message":"since we are trying to get a bunch of the V8 team involved","date":"2016-07-11T16:15:16.831Z","type":"message"}
{"nick":"Fishrock123","message":"thealphanerd: .. where was it posted?","date":"2016-07-11T16:15:19.485Z","type":"message"}
{"nick":"Fishrock123","message":"oh right","date":"2016-07-11T16:15:25.513Z","type":"message"}
{"nick":"thealphanerd","message":"in the LTS repo","date":"2016-07-11T16:15:33.252Z","type":"message"}
{"nick":"thealphanerd","message":"one sec","date":"2016-07-11T16:15:34.280Z","type":"message"}
{"nick":"thealphanerd","message":"http://doodle.com/poll/bxpmtk9v6wy76dde","date":"2016-07-11T16:15:43.443Z","type":"message"}
{"nick":"bradleymeck","message":"Fishrock123: any single value system (JSON values, CJS, etc.) will have to be translated to the ES Module Namespace style via some hook, the current proposal has hoisting to do this, but this has some problems with transitivity and V8 got back to us after some major back and forth saying it would deopt on variable access for hoisting","date":"2016-07-11T16:16:51.253Z","type":"message"}
{"nick":"Fishrock123","message":"x_x","date":"2016-07-11T16:17:27.232Z","type":"message"}
{"nick":"bradleymeck","message":"going to make a PR (probably next week? [work is busy]) discussing things / explaining a non-hoisted solution","date":"2016-07-11T16:17:37.648Z","type":"message"}
{"nick":"Fishrock123","message":"gona eat supper, will do thinking things about it after","date":"2016-07-11T16:17:39.779Z","type":"message"}
{"nick":"bradleymeck","message":"but this means we break some major babel stuff","date":"2016-07-11T16:17:45.069Z","type":"message"}
{"nick":"Fishrock123","message":"i knew that","date":"2016-07-11T16:17:54.352Z","type":"message"}
{"nick":"bradleymeck","message":"no real option though","date":"2016-07-11T16:17:54.540Z","type":"message"}
{"nick":"Fishrock123","message":"i didn't know the json thing will be the same","date":"2016-07-11T16:18:02.764Z","type":"message"}
{"nick":"Fishrock123","message":"lol i have no idea who will actually use module syntax after all these problems","date":"2016-07-11T16:18:19.593Z","type":"message"}
{"nick":"seishun","message":"where can I catch up with the current state of the proposed module system?","date":"2016-07-11T16:19:30.664Z","type":"message"}
{"nick":"sankha","reason":"Read error: Connection reset by peer","date":"2016-07-11T16:19:34.773Z","type":"quit"}
{"nick":"nnyk_","date":"2016-07-11T16:19:51.428Z","type":"join"}
{"nick":"sankha","date":"2016-07-11T16:20:11.640Z","type":"join"}
{"nick":"bradleymeck","message":"seishun: the EP repo, though discussions at CTC are where things generally get talked about before changing stuff","date":"2016-07-11T16:20:14.361Z","type":"message"}
{"nick":"bradleymeck","message":"Fishrock123: basically anything not an ES Module by nature will have to go through the bridge, anything","date":"2016-07-11T16:20:53.059Z","type":"message"}
{"nick":"seishun","message":"also what does hoisting mean in this case?","date":"2016-07-11T16:20:53.283Z","type":"message"}
{"nick":"bradleymeck","message":"`import {readFile} from 'fs';`","date":"2016-07-11T16:21:02.880Z","type":"message"}
{"nick":"bradleymeck","message":"readFile is \"hoisted\" from the fs module's module.exports value","date":"2016-07-11T16:21:19.554Z","type":"message"}
{"nick":"seishun","message":"ah","date":"2016-07-11T16:21:37.252Z","type":"message"}
{"nick":"thealphanerd","message":"hey ofrobots are you around?","date":"2016-07-11T16:23:15.676Z","type":"message"}
{"nick":"thealphanerd","message":"I'd love to chat with you about v8 inspector license stuff","date":"2016-07-11T16:23:28.533Z","type":"message"}
{"nick":"peutetre","reason":"Quit: ...","date":"2016-07-11T16:29:09.141Z","type":"quit"}
{"nick":"peutetre","date":"2016-07-11T16:29:20.732Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2016-07-11T16:29:35.516Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T16:38:01.421Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T16:38:01.647Z","type":"part"}
{"nick":"nnyk_","reason":"Ping timeout: 250 seconds","date":"2016-07-11T16:38:09.099Z","type":"quit"}
{"nick":"seishun","message":"so what is hoisting a solution for?","date":"2016-07-11T16:38:11.461Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: making named imports work with non \"ES Module\" Module Systems, like CommonJS","date":"2016-07-11T16:39:08.592Z","type":"message"}
{"nick":"peutetre","reason":"Quit: ...","date":"2016-07-11T16:39:20.918Z","type":"quit"}
{"nick":"bradleymeck","message":"but VMs cannot implement it, and Babel does it via a leaky abstraction that causes problems with transitivity (CJS exporting ES should import into ES without any visible changes)","date":"2016-07-11T16:39:55.451Z","type":"message"}
{"nick":"bradleymeck","message":"reexporting*","date":"2016-07-11T16:40:03.707Z","type":"message"}
{"nick":"bradleymeck","message":"but named imports have some problems since they are static, don't support getters, have no implied `this` value, etc.","date":"2016-07-11T16:40:34.956Z","type":"message"}
{"nick":"bradleymeck","message":"VMs can technically solve this, but aklein took a look at what it would take, and you get to deopts due to some problems that are the same as `with`","date":"2016-07-11T16:41:20.785Z","type":"message"}
{"nick":"seishun","message":"and what's the non-hoisted solution?","date":"2016-07-11T16:41:45.047Z","type":"message"}
{"nick":"bradleymeck","message":"don't support named imports for non ES Modules","date":"2016-07-11T16:42:00.309Z","type":"message"}
{"nick":"bradleymeck","message":"everything just creates a single \"default\" export","date":"2016-07-11T16:42:12.309Z","type":"message"}
{"nick":"bradleymeck","message":"this however breaks *a lot* of code in the wild","date":"2016-07-11T16:42:24.793Z","type":"message"}
{"nick":"seishun","message":"there is code that depends on ES imports? o_O","date":"2016-07-11T16:43:09.921Z","type":"message"}
{"nick":"bradleymeck","message":"people use babel and expect ES modules to support things which are not going to work","date":"2016-07-11T16:43:46.925Z","type":"message"}
{"nick":"seishun","message":"I see","date":"2016-07-11T16:44:09.673Z","type":"message"}
{"nick":"bradleymeck","message":"the more time that is given to try and rectify things, the more things are turning out not to work in implementation phase","date":"2016-07-11T16:44:11.964Z","type":"message"}
{"nick":"bradleymeck","message":"es modules are a bit special since they got moves into spec prior to any spec compliant implementation existing in the wild","date":"2016-07-11T16:45:48.745Z","type":"message"}
{"nick":"bradleymeck","message":"moved*","date":"2016-07-11T16:46:16.118Z","type":"message"}
{"nick":"seishun","message":"why do we have to support importing non-ES modules at all?","date":"2016-07-11T16:47:00.126Z","type":"message"}
{"nick":"bradleymeck","message":"cause thats all of npm currently, all of npm is targetting CJS","date":"2016-07-11T16:47:36.478Z","type":"message"}
{"nick":"bradleymeck","message":"well... compiling to","date":"2016-07-11T16:47:41.643Z","type":"message"}
{"nick":"Fishrock123","message":"*sees wall of modules text*","date":"2016-07-11T16:47:42.634Z","type":"message"}
{"nick":"Fishrock123","message":"*melts*","date":"2016-07-11T16:47:45.866Z","type":"message"}
{"nick":"seishun","message":"I mean, there's require for that","date":"2016-07-11T16:48:08.600Z","type":"message"}
{"nick":"peutetre","date":"2016-07-11T16:48:20.691Z","type":"join"}
{"nick":"bradleymeck","message":"seishun: people expect to be able to import non-ES targets, like CJS, JSON, and C++ addons","date":"2016-07-11T16:48:49.389Z","type":"message"}
{"nick":"bradleymeck","message":"that amount of support is pretty much required","date":"2016-07-11T16:48:59.519Z","type":"message"}
{"nick":"bradleymeck","message":"otherwise transition won't happen, require also needs to be able to load ES targets","date":"2016-07-11T16:49:22.870Z","type":"message"}
{"nick":"bradleymeck","message":"so require would work both directions for sure, having import not work in both directions would lead people to just use `require` always","date":"2016-07-11T16:49:46.245Z","type":"message"}
{"nick":"qard-appneta","date":"2016-07-11T16:50:35.459Z","type":"join"}
{"nick":"seishun","message":"I see","date":"2016-07-11T16:50:54.614Z","type":"message"}
{"nick":"bradleymeck","message":"then we get to other things, like loading WASM targets is going to need support eventually :-( and we might see new parse goals outside of Module goal","date":"2016-07-11T16:51:14.920Z","type":"message"}
{"nick":"ofrobots","message":"thealphanerd: hi..","date":"2016-07-11T16:51:34.538Z","type":"message"}
{"nick":"thealphanerd","message":"howdy","date":"2016-07-11T16:51:38.685Z","type":"message"}
{"nick":"thealphanerd","message":"cool if I pm you?","date":"2016-07-11T16:51:46.416Z","type":"message"}
{"nick":"seishun","message":"I was thinking that module authors would just provide two interfaces","date":"2016-07-11T16:51:48.462Z","type":"message"}
{"nick":"ofrobots","message":"thealphanerd: yep","date":"2016-07-11T16:51:54.786Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: but how would you provide those interfaces?","date":"2016-07-11T16:52:06.400Z","type":"message"}
{"nick":"seishun","message":"not sure about that","date":"2016-07-11T16:53:18.960Z","type":"message"}
{"nick":"seishun","message":"perhaps by specifying different entry points in package.json or something like that?","date":"2016-07-11T16:53:47.206Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: that was one proposal that was discussed a while ago","date":"2016-07-11T16:54:33.132Z","type":"message"}
{"nick":"craigplafferty","reason":"Quit: Page closed","date":"2016-07-11T16:55:10.542Z","type":"quit"}
{"nick":"seishun","message":"defense-of-dot-js?","date":"2016-07-11T16:55:11.190Z","type":"message"}
{"nick":"bradleymeck","message":"there is more complexity because that only solves the entry point problem","date":"2016-07-11T16:55:12.015Z","type":"message"}
{"nick":"bradleymeck","message":"defense of .js is much more as it tries to cover the cased that are not solved by a single extra entry point","date":"2016-07-11T16:55:39.934Z","type":"message"}
{"nick":"bradleymeck","message":"but it does not try to solve the bridge to actually produce ES Modules from non ES Modules, and vice versa","date":"2016-07-11T16:56:06.796Z","type":"message"}
{"nick":"bradleymeck","message":"it is only about how to detect if something is an ES module, and how to handle deep linking in packages","date":"2016-07-11T16:56:31.780Z","type":"message"}
{"nick":"peutetre","reason":"Quit: ...","date":"2016-07-11T16:58:22.474Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T16:59:51.908Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T16:59:52.095Z","type":"part"}
{"nick":"seishun","message":"bradleymeck: what problems aren't solved by an extra entry point?","date":"2016-07-11T17:00:43.371Z","type":"message"}
{"nick":"bradleymeck","message":"if a package is partially CJS partially ES, how to load `lodash/chunk` (deep linking), how to load 'fs' since 'fs' is a CJS module","date":"2016-07-11T17:02:02.373Z","type":"message"}
{"nick":"bradleymeck","message":"deep linking is interesting, because you don't have a way to load 2 different files currently","date":"2016-07-11T17:03:37.983Z","type":"message"}
{"nick":"bradleymeck","message":"and if we get to the dreaded 3rd target in the standard (not Script, not Module) do we just keep adding more entry points to the package.json?","date":"2016-07-11T17:04:47.213Z","type":"message"}
{"nick":"robink_","reason":"Ping timeout: 240 seconds","date":"2016-07-11T17:06:31.645Z","type":"quit"}
{"nick":"zz_r04r","new_nick":"r04r","date":"2016-07-11T17:06:38.175Z","type":"nick"}
{"nick":"nuizzy","date":"2016-07-11T17:06:59.375Z","type":"join"}
{"nick":"saghul","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-07-11T17:07:41.623Z","type":"quit"}
{"nick":"seishun","message":"3rd target is a separate problem, isn't it? We were talking about how to let module authors support both ES and CJS. Specifying entry points could remain optional","date":"2016-07-11T17:09:44.777Z","type":"message"}
{"nick":"bradleymeck","message":"kind of, 3rd target is coming, WASM. But another raw JS target is possible","date":"2016-07-11T17:12:10.414Z","type":"message"}
{"nick":"bradleymeck","message":"WASM => ASM.js Module fallback => ASM.js CJS fallback (@_@)","date":"2016-07-11T17:13:14.901Z","type":"message"}
{"nick":"bradleymeck","message":"so, still have to plan for it to land sometime","date":"2016-07-11T17:13:36.042Z","type":"message"}
{"nick":"seishun","message":"as for standard modules, is it not possible to special-case them somehow?","date":"2016-07-11T17:14:00.646Z","type":"message"}
{"nick":"seishun","message":"I'm not sure how it ES modules work on V8's side though","date":"2016-07-11T17:14:11.421Z","type":"message"}
{"nick":"seishun","message":"-it","date":"2016-07-11T17:14:17.689Z","type":"message"}
{"nick":"bradleymeck","message":"what do you mean?","date":"2016-07-11T17:14:48.899Z","type":"message"}
{"nick":"bradleymeck","message":"special case for what","date":"2016-07-11T17:14:55.016Z","type":"message"}
{"nick":"seishun","message":"provide two interfaces for fs, crypto etc. Use the right one depending on whether it's required or imported","date":"2016-07-11T17:15:40.531Z","type":"message"}
{"nick":"saghul","date":"2016-07-11T17:15:55.170Z","type":"join"}
{"nick":"bradleymeck","message":"seishun: answer is complex","date":"2016-07-11T17:16:23.935Z","type":"message"}
{"nick":"bradleymeck","message":"transitivity is ruined if the views cannot be swapper in a lossless manner","date":"2016-07-11T17:16:43.428Z","type":"message"}
{"nick":"bradleymeck","message":"*swapped","date":"2016-07-11T17:16:50.406Z","type":"message"}
{"nick":"seishun","message":"views?","date":"2016-07-11T17:17:04.462Z","type":"message"}
{"nick":"bradleymeck","message":"for any given target: we have to bootstrap in things like __filename, require(), etc., and we have to perform loading, then evaluation, then gather exported values","date":"2016-07-11T17:17:05.394Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: how CJS views ES, how ES views CJS","date":"2016-07-11T17:17:14.754Z","type":"message"}
{"nick":"SomeKittens","date":"2016-07-11T17:17:39.990Z","type":"join"}
{"nick":"bradleymeck","message":"views/projection/interop interface, no clear name for the concept yet","date":"2016-07-11T17:17:46.254Z","type":"message"}
{"nick":"bradleymeck","message":"so, we can special case it (and will by doing the default export only view), but we need to ensure it is lossless","date":"2016-07-11T17:19:22.987Z","type":"message"}
{"nick":"bradleymeck","message":"hoisting proved to be non-transitive, deopt, and VMs don't want to do it since it causes issues in codegen (we could force VMs to do it, but with other problems no reason to)","date":"2016-07-11T17:20:32.049Z","type":"message"}
{"nick":"seishun","message":"what do you mean by lossless?","date":"2016-07-11T17:20:53.156Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: `module.exports = require(\"es\")` `import * as es from \"cjs\"` <- imported `es` needs to be exactly identical to `import * as es from \"es\"`","date":"2016-07-11T17:22:16.939Z","type":"message"}
{"nick":"bradleymeck","message":"typescript has an open issue about some of this as does the EP, https://github.com/nodejs/node-eps/issues/26 , https://github.com/Microsoft/TypeScript/issues/8687","date":"2016-07-11T17:24:52.085Z","type":"message"}
{"nick":"bradleymeck","message":"typescript is interesting because it has been trying to do interop and has a lot of research already on the topic (and several open issues)","date":"2016-07-11T17:25:49.088Z","type":"message"}
{"nick":"seishun","message":"I thought we were talking about the universe where you can't require ES or import CJS?","date":"2016-07-11T17:26:04.182Z","type":"message"}
{"nick":"bradleymeck","message":"you will be able to require ES and import CJS, no future without such","date":"2016-07-11T17:26:33.541Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/zenparsing/es6-node-modules was a talk about a future without such, but its not even on the table","date":"2016-07-11T17:26:57.145Z","type":"message"}
{"nick":"bradleymeck","message":"1. if you can't `require(\"es\")` how do you expect to load ES modules","date":"2016-07-11T17:28:47.481Z","type":"message"}
{"nick":"bradleymeck","message":"2. if you can't `import \"cjs\";` how do you expect to use any code as it exists today","date":"2016-07-11T17:29:09.076Z","type":"message"}
{"nick":"seishun","message":"1. import 'es' 2. require(\"cjs\") ?","date":"2016-07-11T17:30:04.717Z","type":"message"}
{"nick":"sankha","reason":"Remote host closed the connection","date":"2016-07-11T17:30:10.664Z","type":"quit"}
{"nick":"bradleymeck","message":"import is not available in Script goal","date":"2016-07-11T17:30:14.378Z","type":"message"}
{"nick":"bradleymeck","message":"CJS cannot use import statements","date":"2016-07-11T17:30:20.671Z","type":"message"}
{"nick":"seishun","message":"is that defined in the spec?","date":"2016-07-11T17:30:43.424Z","type":"message"}
{"nick":"bradleymeck","message":"and how did you know the package you were using was CJS?","date":"2016-07-11T17:30:43.611Z","type":"message"}
{"nick":"bradleymeck","message":"yes, JS spec reserves but does not allow `import` in Script goal","date":"2016-07-11T17:31:09.047Z","type":"message"}
{"nick":"seishun","message":"interesting","date":"2016-07-11T17:31:43.152Z","type":"message"}
{"nick":"seishun","message":"how do browsers figure out which goal to use?","date":"2016-07-11T17:31:58.765Z","type":"message"}
{"nick":"bradleymeck","message":"they YOLO and say everything will be ES Modules if the first entrypoint is loaded via `<script type=module` for now, WHATWG Loader is trying to propose hooks for other things like loading JSON","date":"2016-07-11T17:32:44.405Z","type":"message"}
{"nick":"bradleymeck","message":"but this brings up another point, in that model the type/goal of any given source is not defined by the source itself, so it must be determined at runtime for things like bytecode cache","date":"2016-07-11T17:33:57.818Z","type":"message"}
{"nick":"seishun","message":"orz","date":"2016-07-11T17:34:20.929Z","type":"message"}
{"nick":"bradleymeck","message":"I know UWP (windows JS apps) have disabled bytecode cache on it for now","date":"2016-07-11T17:34:22.733Z","type":"message"}
{"nick":"seishun","message":"are there things that are available for Script but not Module?","date":"2016-07-11T17:35:14.744Z","type":"message"}
{"nick":"bradleymeck","message":"yes, and more will be coming in the future","date":"2016-07-11T17:35:26.897Z","type":"message"}
{"nick":"bradleymeck","message":"scoping differs slightly, auto-strict mode, `await` is a reserved word in Module (never in Script)","date":"2016-07-11T17:35:58.644Z","type":"message"}
{"nick":"seishun","message":"I see","date":"2016-07-11T17:36:27.034Z","type":"message"}
{"nick":"bradleymeck","message":"but I think almost all new syntax features will target Module","date":"2016-07-11T17:36:37.875Z","type":"message"}
{"nick":"bradleymeck","message":"and not be added to Script due to some fun complexities (mostly around `with` T_T)","date":"2016-07-11T17:36:59.308Z","type":"message"}
{"nick":"seishun","message":"so the goal of UnambiguousJavaScriptGrammar was to change the spec to make it possible for runtimes to figure out the goal just from he source?","date":"2016-07-11T17:37:23.036Z","type":"message"}
{"nick":"bradleymeck","message":"yep","date":"2016-07-11T17:37:28.635Z","type":"message"}
{"nick":"bradleymeck","message":"ok, gtg to lunch","date":"2016-07-11T17:38:09.268Z","type":"message"}
{"nick":"seishun","message":"thanks, this was very informative","date":"2016-07-11T17:38:39.336Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-07-11T17:39:25.308Z","type":"quit"}
{"nick":"seishun","message":"I assume if that proposal is not accepted node.js will have to figure out something else?","date":"2016-07-11T17:39:40.657Z","type":"message"}
{"nick":"BridgeAR1","reason":"Ping timeout: 264 seconds","date":"2016-07-11T17:47:16.067Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-07-11T17:53:30.151Z","type":"join"}
{"nick":"bradleymeck","message":"seishun: if the spec isn't changed, we will just use the file extension as described in the EP","date":"2016-07-11T17:53:33.341Z","type":"message"}
{"nick":"bradleymeck","message":"not idea, but it covers all the problems in a simple way","date":"2016-07-11T17:53:55.414Z","type":"message"}
{"nick":"bradleymeck","message":"ideal*","date":"2016-07-11T17:54:00.261Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T18:02:28.669Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T18:02:28.856Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T18:02:38.730Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T18:02:38.917Z","type":"part"}
{"nick":"peutetre","date":"2016-07-11T18:04:05.104Z","type":"join"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2016-07-11T18:10:26.073Z","type":"quit"}
{"nick":"seishun","message":"bradleymeck: do you know why you can only import inside Modules?","date":"2016-07-11T18:20:29.388Z","type":"message"}
{"nick":"bradleymeck","message":"I am not sure on the exact reason","date":"2016-07-11T18:21:04.991Z","type":"message"}
{"nick":"bradleymeck","message":"but they won't be coming to the script goal","date":"2016-07-11T18:21:32.164Z","type":"message"}
{"nick":"bradleymeck","message":"the spec is extremely hard to budge right now","date":"2016-07-11T18:21:44.404Z","type":"message"}
{"nick":"bradleymeck","message":"the grammar change to remove ambiguity is already a huge uphill battle","date":"2016-07-11T18:22:00.037Z","type":"message"}
{"nick":"seishun","message":"not sure why there is resistance to it","date":"2016-07-11T18:22:22.812Z","type":"message"}
{"nick":"bradleymeck","message":"well first you need to understand TC39, that it is largely a group of individuals with differing goals/ideas on moving JS the language forward","date":"2016-07-11T18:22:57.458Z","type":"message"}
{"nick":"bradleymeck","message":"then there is the fact that Module was supposed to be a route to *completely* remove Script eventually","date":"2016-07-11T18:23:19.048Z","type":"message"}
{"nick":"bradleymeck","message":"but in reality Script won't be going away for more than a decade at least; you need to convince TC39 that:","date":"2016-07-11T18:24:11.931Z","type":"message"}
{"nick":"bradleymeck","message":"1. removing the ambiguity won't impose harsh constraints on people solely targetting ES Modules","date":"2016-07-11T18:24:14.281Z","type":"message"}
{"nick":"bradleymeck","message":"2. this is not a Node only problem","date":"2016-07-11T18:24:22.597Z","type":"message"}
{"nick":"bradleymeck","message":"3. Script will not die out any time soon","date":"2016-07-11T18:24:50.129Z","type":"message"}
{"nick":"bradleymeck","message":"all of those are being fought hard against by individuals for various reasons, and TC39 is consensus, if you want to fully block a change as a single person, you can.","date":"2016-07-11T18:25:27.818Z","type":"message"}
{"nick":"bradleymeck","message":"so you need to convince all of TC39 that the change is needed, *all* is hard.","date":"2016-07-11T18:25:44.043Z","type":"message"}
{"nick":"seishun","message":"<bradleymeck> then there is the fact that Module was supposed to be a route to *completely* remove Script eventually <-- if that is the case then I don't like the .mjs solution","date":"2016-07-11T18:26:41.088Z","type":"message"}
{"nick":"seishun","message":"then .js will eventually become legacy","date":"2016-07-11T18:26:52.500Z","type":"message"}
{"nick":"ljharb","message":"so?","date":"2016-07-11T18:26:54.802Z","type":"message"}
{"nick":"ljharb","message":"it's just a file extension.","date":"2016-07-11T18:27:01.077Z","type":"message"}
{"nick":"bradleymeck","message":"^","date":"2016-07-11T18:27:04.680Z","type":"message"}
{"nick":"ljharb","message":"\"but it's pretty\" is a really really stupid reason to make a technical decision.","date":"2016-07-11T18:27:21.333Z","type":"message"}
{"nick":"ljharb","message":"also while script code is never going to die out completely, there will remain vanishingly few use cases where it's needed beyond \"we're using legacy crap without a build system\"","date":"2016-07-11T18:28:28.424Z","type":"message"}
{"nick":"bradleymeck","message":"hopefully","date":"2016-07-11T18:28:46.142Z","type":"message"}
{"nick":"bradleymeck","message":"I hope for a world also where frozen realms are the default","date":"2016-07-11T18:30:47.454Z","type":"message"}
{"nick":"bradleymeck","message":"and/or that frozen realms could be done per Source text (:dreams:)","date":"2016-07-11T18:31:17.023Z","type":"message"}
{"nick":"seishun","message":"anyone new coming to node will have to learn that they have to use .mjs instead of .js due to legacy reasons. It will be like utf8mb4 in mysql or mysql_real_escape_string in php","date":"2016-07-11T18:33:11.163Z","type":"message"}
{"nick":"bradleymeck","message":"nah, browsers would move to the new extension as well","date":"2016-07-11T18:33:32.517Z","type":"message"}
{"nick":"ljharb","message":"seishun: everyone outside of node would end up using .mjs too tho.","date":"2016-07-11T18:33:33.258Z","type":"message"}
{"nick":"ljharb","message":"seishun: because node is the tooling for everyone else.","date":"2016-07-11T18:33:39.570Z","type":"message"}
{"nick":"ljharb","message":"and regardless, every developer forever will have to learn, upon entering a new system, how that system distinguishes modules and scripts","date":"2016-07-11T18:34:14.938Z","type":"message"}
{"nick":"ljharb","message":"whether that pain is \"a manifest\" like package.json, or \"a file extension\", or \"a convention that modules go in this directory over here\", etc - it's identical pain.","date":"2016-07-11T18:34:43.050Z","type":"message"}
{"nick":"ljharb","message":"so \"people have to learn it\" is an argument against two parsing goals, but not against anything else.","date":"2016-07-11T18:34:56.759Z","type":"message"}
{"nick":"ljharb","message":"(and \"there's two parsing goals\" is unchangeable at this point)","date":"2016-07-11T18:35:08.941Z","type":"message"}
{"nick":"seishun","message":"I meant a theoretical future where Script goes away","date":"2016-07-11T18:35:27.076Z","type":"message"}
{"nick":"bradleymeck","message":"it wont ever fully though, so don't even think about it","date":"2016-07-11T18:35:44.983Z","type":"message"}
{"nick":"bradleymeck","message":"we are stuck with what we have today","date":"2016-07-11T18:35:56.636Z","type":"message"}
{"nick":"bradleymeck","message":"supporting*","date":"2016-07-11T18:36:03.233Z","type":"message"}
{"nick":"seishun","message":"or becomes permanently deprecated like `with`","date":"2016-07-11T18:36:40.294Z","type":"message"}
{"nick":"bradleymeck","message":"it can be deprecated, but it won't go away","date":"2016-07-11T18:37:01.306Z","type":"message"}
{"nick":"bradleymeck","message":"so, whatever the solution; it has to keep what we support right now. Node is not young enough to do crazy backwards incompatible changes like deprecating all CJS","date":"2016-07-11T18:37:54.268Z","type":"message"}
{"nick":"bradleymeck","message":"s/deprecating/removing support for/","date":"2016-07-11T18:38:27.487Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-07-11T18:46:07.818Z","type":"quit"}
{"nick":"ilbonte","reason":"Ping timeout: 250 seconds","date":"2016-07-11T18:51:10.884Z","type":"quit"}
{"nick":"ilbonte","date":"2016-07-11T18:51:30.437Z","type":"join"}
{"nick":"seishun","message":"<bradleymeck> 2. if you can't `import \"cjs\";` how do you expect to use any code as it exists today <-- can't you still use require inside Modules?","date":"2016-07-11T18:55:16.079Z","type":"message"}
{"nick":"peutetre_","date":"2016-07-11T18:55:45.362Z","type":"join"}
{"nick":"BridgeAR","date":"2016-07-11T18:56:18.574Z","type":"join"}
{"nick":"peutetre","reason":"Ping timeout: 246 seconds","date":"2016-07-11T18:58:33.104Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-07-11T19:03:09.459Z","type":"join"}
{"nick":"bradleymeck","message":"seishun: yes require will exist in ES modules, but even with that you need to know the mode of your dependency","date":"2016-07-11T19:21:51.708Z","type":"message"}
{"nick":"peutetre_","reason":"Quit: ...","date":"2016-07-11T19:22:07.271Z","type":"quit"}
{"nick":"bradleymeck","message":"so I would need to know in my head if I can `require` what I installed from npm or if I can only `import`","date":"2016-07-11T19:22:15.925Z","type":"message"}
{"nick":"bradleymeck","message":"what is to be gained from preventing the `import` except more things to keep in your head?","date":"2016-07-11T19:23:00.134Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T19:23:11.677Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:23:11.864Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T19:23:21.705Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:23:21.892Z","type":"part"}
{"nick":"seishun","message":"<bradleymeck> don't support named imports for non ES Modules <-- doesn't that also require to keep it in in your head?","date":"2016-07-11T19:23:45.301Z","type":"message"}
{"nick":"seishun","message":"or did I misunderstand the idea?","date":"2016-07-11T19:23:57.002Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: its a different thing, but yes that still requires some knowledge","date":"2016-07-11T19:24:27.097Z","type":"message"}
{"nick":"bradleymeck","message":"one is knowing what mode the module executes under, one is knowing what the module exports","date":"2016-07-11T19:24:48.939Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T19:25:11.737Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:25:11.926Z","type":"part"}
{"nick":"seishun","message":"why does the former matter for the user? In both cases, you need to know how it's exported, no?","date":"2016-07-11T19:26:22.662Z","type":"message"}
{"nick":"bradleymeck","message":"knowing the exports: for interop => this exports a value of `{module:\"exports\"}`, for es => this has an export of `module`","date":"2016-07-11T19:26:24.203Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T19:26:31.677Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:26:31.864Z","type":"part"}
{"nick":"bradleymeck","message":"knowing execution mode: for interop => my module runs under CJS, for es => my module runs under ES","date":"2016-07-11T19:26:51.186Z","type":"message"}
{"nick":"bradleymeck","message":"knowing how it executes != knowing what it exports","date":"2016-07-11T19:27:05.086Z","type":"message"}
{"nick":"bradleymeck","message":"cause transpilers and things export ES6 style dictionaries, but execute in CJS","date":"2016-07-11T19:27:25.967Z","type":"message"}
{"nick":"bradleymeck","message":"so, even if you execute in one mode, you could be exporting in a different way","date":"2016-07-11T19:28:18.543Z","type":"message"}
{"nick":"bradleymeck","message":"(this topic gets very strange when talking about monkey patching)","date":"2016-07-11T19:28:36.899Z","type":"message"}
{"nick":"seishun","message":"we are talking about dependencies installed from npm, right?","date":"2016-07-11T19:29:07.697Z","type":"message"}
{"nick":"bradleymeck","message":"any dependencies, doesn't strictly need to be from npm","date":"2016-07-11T19:29:22.372Z","type":"message"}
{"nick":"seishun","message":"why do you need to know how a dependency executes?","date":"2016-07-11T19:30:06.381Z","type":"message"}
{"nick":"bradleymeck","message":"if you can only require CJS?","date":"2016-07-11T19:32:35.443Z","type":"message"}
{"nick":"bradleymeck","message":"in current proposal you don't need to know","date":"2016-07-11T19:32:45.201Z","type":"message"}
{"nick":"bradleymeck","message":"if you can only require CJS, and cannot import CJS. Then you need to know","date":"2016-07-11T19:33:00.043Z","type":"message"}
{"nick":"seishun","message":"that still implies knowing how it exports, doesn't it?","date":"2016-07-11T19:37:40.254Z","type":"message"}
{"nick":"bradleymeck","message":"mmmm, you need to know *what* it exports, not how","date":"2016-07-11T19:37:55.500Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T19:40:39.933Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:40:40.159Z","type":"part"}
{"nick":"seishun","message":"yes, so isn't it the same as limiting how CJS can be imported? In one case you need to remember that you can't import it, in the other case you need to remember that you can't do named import","date":"2016-07-11T19:41:24.567Z","type":"message"}
{"nick":"bradleymeck","message":"I don't need to know that transpilers are using CJS to generate an ES Module Namespace, but I do need to know that it produces an ES Module Namespace","date":"2016-07-11T19:41:49.162Z","type":"message"}
{"nick":"bradleymeck","message":"its different","date":"2016-07-11T19:41:55.344Z","type":"message"}
{"nick":"seishun","message":"which case are you talking about?","date":"2016-07-11T19:42:41.599Z","type":"message"}
{"nick":"bradleymeck","message":"the named import things is also a bit tricky, since when you `require('fs')` you only ever get a single value","date":"2016-07-11T19:42:47.497Z","type":"message"}
{"nick":"bradleymeck","message":"there isn't a direct 1 to 1 mapping of the idea of named imports on values, which is why we generate only a single default export for such","date":"2016-07-11T19:43:21.540Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T19:44:21.185Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:44:21.372Z","type":"part"}
{"nick":"bradleymeck","message":"seishun: if I use babel to compile \"my-es\" to CJS, so that it can run in NodeV6, requiring that CJS file should look the same as requiring an ES Module","date":"2016-07-11T19:44:21.572Z","type":"message"}
{"nick":"bradleymeck","message":"I don't want to know or care that \"my-es\" is actually executing under CJS, I just want to know *what* it exports","date":"2016-07-11T19:44:56.451Z","type":"message"}
{"nick":"bradleymeck","message":"it exports an ES Module Namespace, so I should consume it like such","date":"2016-07-11T19:46:11.174Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T19:46:24.399Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:46:24.586Z","type":"part"}
{"nick":"seishun","message":"I was talking about use cases that don't involve transpilers","date":"2016-07-11T19:46:49.698Z","type":"message"}
{"nick":"thealphanerd","message":"evanlucas I just backported https://github.com/nodejs/node/pull/5360","date":"2016-07-11T19:46:53.829Z","type":"message"}
{"nick":"thealphanerd","message":"please let me know if there are any other patch's that need to come with it","date":"2016-07-11T19:47:02.370Z","type":"message"}
{"nick":"bradleymeck","message":"in NodeV20 or w/e that supports ES natively, I don't want that CJS to only generate a single default export, I want it to generate that namespace so named imports work properly","date":"2016-07-11T19:47:04.497Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: if we limit ourselved to a future that doesn't have transpilers, doesn't have the CJS goal, and doesn't let you load different targets using `import`; there won't be any reason to use ES modules","date":"2016-07-11T19:47:53.456Z","type":"message"}
{"nick":"bradleymeck","message":"we already are giving up dynamic path loading, dynamic exports, monkey patching, etc.","date":"2016-07-11T19:48:39.564Z","type":"message"}
{"nick":"bradleymeck","message":"but, if we are talking about a future without transpilers, then you would still need some knowledge of *what* it exports, for things like C++ modules, and how JSON will work","date":"2016-07-11T19:50:17.325Z","type":"message"}
{"nick":"bradleymeck","message":"anyone trying to hook into the module loader will want the same feature to be able to generate ES Module Namespaces","date":"2016-07-11T19:50:59.794Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T19:53:06.716Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:53:06.904Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T19:54:55.348Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T19:54:55.575Z","type":"part"}
{"nick":"seishun","message":"so you're saying that unless transpilers are involved, it's not any worse if you can only require CJS than in the current proposal?","date":"2016-07-11T19:58:42.590Z","type":"message"}
{"nick":"bradleymeck","message":"if transpilers are not involved, we still need a way to produce ES Module Namespaces via code.","date":"2016-07-11T20:00:07.138Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T20:00:28.733Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:00:28.920Z","type":"part"}
{"nick":"bradleymeck","message":"so you will still need to know what is exported","date":"2016-07-11T20:00:35.688Z","type":"message"}
{"nick":"bradleymeck","message":"if you can only require CJS, then you additionally need to know how to load the file","date":"2016-07-11T20:01:14.084Z","type":"message"}
{"nick":"bradleymeck","message":"knowing 1 thing, vs knowing 2","date":"2016-07-11T20:01:57.267Z","type":"message"}
{"nick":"saghul","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-07-11T20:03:27.755Z","type":"quit"}
{"nick":"bradleymeck","message":"ref to the thing that WHATWG uses that we would need to support regardless of transpilers: https://whatwg.github.io/loader/#reflective-module-record","date":"2016-07-11T20:03:35.717Z","type":"message"}
{"nick":"seishun","message":"<bradleymeck> if transpilers are not involved, we still need a way to produce ES Module Namespaces via code. <-- do you mean something other than the export keyword?","date":"2016-07-11T20:03:48.810Z","type":"message"}
{"nick":"bradleymeck","message":"seishun: yes","date":"2016-07-11T20:03:56.119Z","type":"message"}
{"nick":"nnyk_","date":"2016-07-11T20:04:12.552Z","type":"join"}
{"nick":"bradleymeck","message":"seishun: ReflectiveModuleRecord is an upcoming case that we will have to support, even if we don't support transpilers","date":"2016-07-11T20:04:37.931Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T20:04:44.986Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:04:45.173Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:04:52.399Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:04:52.586Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:06:38.394Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:06:38.581Z","type":"part"}
{"nick":"aredridel","reason":"Ping timeout: 258 seconds","date":"2016-07-11T20:08:55.252Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T20:08:57.408Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:08:57.595Z","type":"part"}
{"nick":"nnyk_","reason":"Ping timeout: 272 seconds","date":"2016-07-11T20:11:10.222Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T20:13:10.015Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:13:10.202Z","type":"part"}
{"nick":"seishun","message":"<bradleymeck> everything just creates a single \"default\" export <-- could you clarify how this works? I think this is where the disconnect is","date":"2016-07-11T20:15:14.029Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T20:16:02.315Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:16:02.539Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:19:23.153Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:19:23.340Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:21:15.233Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:21:15.420Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:21:35.207Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:21:35.395Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:24:24.222Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:24:24.447Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:28:49.169Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:28:49.357Z","type":"part"}
{"nick":"sankha","date":"2016-07-11T20:30:38.595Z","type":"join"}
{"nick":"nnyk_","date":"2016-07-11T20:33:40.627Z","type":"join"}
{"nick":"aredridel","date":"2016-07-11T20:34:26.442Z","type":"join"}
{"nick":"sankha","reason":"Ping timeout: 276 seconds","date":"2016-07-11T20:35:27.444Z","type":"quit"}
{"nick":"bradleymeck_","date":"2016-07-11T20:36:23.032Z","type":"join"}
{"nick":"bradleymeck","reason":"Ping timeout: 252 seconds","date":"2016-07-11T20:37:25.416Z","type":"quit"}
{"nick":"bradleymeck_","new_nick":"bradleymeck","date":"2016-07-11T20:37:25.672Z","type":"nick"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2016-07-11T20:37:54.193Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T20:42:51.262Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:42:51.449Z","type":"part"}
{"nick":"bradleymeck","date":"2016-07-11T20:44:11.706Z","type":"join"}
{"nick":"bradleymeck","message":"seishun: `module.exports = $foo` would be treated as `export default $foo` when `import`ed","date":"2016-07-11T20:44:51.244Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T20:44:55.197Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:44:55.384Z","type":"part"}
{"nick":"bradleymeck","message":"no properties of $foo would be able to be imported, so no: `import {toString} from \"cjs-foo\";`","date":"2016-07-11T20:46:20.067Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T20:49:06.919Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:49:07.106Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:49:23.626Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:49:23.813Z","type":"part"}
{"nick":"BridgeAR","reason":"Ping timeout: 252 seconds","date":"2016-07-11T20:49:31.416Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T20:50:46.907Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:50:47.094Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:54:16.314Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:54:16.535Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:55:12.227Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:55:12.414Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T20:56:07.325Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T20:56:07.551Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:00:04.934Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:00:05.121Z","type":"part"}
{"nick":"seishun","message":"bradleymeck: so you are saying that if you could only import es modules, then you would have the same problem _in addition_ to having to know whether you can import?","date":"2016-07-11T21:01:30.524Z","type":"message"}
{"nick":"joshontheweb","reason":"Quit: Computer has gone to sleep.","date":"2016-07-11T21:01:32.332Z","type":"quit"}
{"nick":"bradleymeck","message":"yes","date":"2016-07-11T21:01:58.981Z","type":"message"}
{"nick":"seishun","message":"but surely if you've looked up the docs and seen that it's indeed an es module, you already know what it exports, no?","date":"2016-07-11T21:04:35.881Z","type":"message"}
{"nick":"bradleymeck","message":"you know what it exports, but you don't need to know it is an ES Module, or something else (like a ReflectiveModuleRecord)","date":"2016-07-11T21:07:38.161Z","type":"message"}
{"nick":"peutetre","date":"2016-07-11T21:07:55.027Z","type":"join"}
{"nick":"bradleymeck","message":"it might be exporting an ES Module Namespace, but it might not be an ES Module","date":"2016-07-11T21:08:19.404Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T21:10:53.448Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:10:53.629Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:13:48.024Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:13:48.205Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:14:08.015Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:14:08.197Z","type":"part"}
{"nick":"seishun","message":"are ES Module Namespaces imported differently from ES Modules?","date":"2016-07-11T21:16:20.000Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T21:17:33.712Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:17:33.899Z","type":"part"}
{"nick":"bradleymeck","message":"no, `import` only handles ES Module Namespaces (it treats it as a identifier => value dictionary)","date":"2016-07-11T21:17:48.307Z","type":"message"}
{"nick":"bradleymeck","message":"so if you `import` and you get a ES Module Namespace, there is no need for Node to transform that value into a Module Namespace","date":"2016-07-11T21:18:24.122Z","type":"message"}
{"nick":"bradleymeck","message":"when loading CJS, setting `module.exports = NotAModuleNamespace` it must wrap that value","date":"2016-07-11T21:19:00.129Z","type":"message"}
{"nick":"bradleymeck","message":"how we want to signal that something should be treated as a ModuleNamespace is a bit up in the air, the info that we can't do hoisting happened right before I went on vacation","date":"2016-07-11T21:19:31.862Z","type":"message"}
{"nick":"bradleymeck","message":"TypeScript wants to re-use the __esModule property like Babel does, though that differs from what WHATWG Loader proposes; I need time to read up","date":"2016-07-11T21:20:12.960Z","type":"message"}
{"nick":"BridgeAR","date":"2016-07-11T21:22:20.761Z","type":"join"}
{"nick":"seishun","message":"if you couldn't use import for cjs, would the user need to do something different for ES Modules vs ES Module Namespaces?","date":"2016-07-11T21:22:35.459Z","type":"message"}
{"nick":"seishun","message":"(not sure what ES Module Namespace is, google isn't helpful)","date":"2016-07-11T21:22:49.317Z","type":"message"}
{"nick":"bradleymeck","message":"Module Namespaces are special snowflakes in the JS spec https://tc39.github.io/ecma262/#sec-module-namespace-exotic-objects","date":"2016-07-11T21:23:22.835Z","type":"message"}
{"nick":"bradleymeck","message":"they are a special kind of Object (very special @_@)","date":"2016-07-11T21:23:33.927Z","type":"message"}
{"nick":"bradleymeck","message":"unclear on that question","date":"2016-07-11T21:23:46.134Z","type":"message"}
{"nick":"bradleymeck","message":"you can think of them as read only Objects that have direct access to module scope variables that have been flagged via `export`","date":"2016-07-11T21:25:03.656Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T21:25:27.395Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:25:27.576Z","type":"part"}
{"nick":"bradleymeck","message":"but ReflectiveModuleRecord is an example of creating namespaces that are backed by a dictionary instead of a JS scope","date":"2016-07-11T21:25:39.335Z","type":"message"}
{"nick":"bradleymeck","message":"(they are not backed by Objects, their dictionary is a special kind of Map)","date":"2016-07-11T21:26:08.534Z","type":"message"}
{"nick":"seishun","message":"in your proposal can you still use hoisting if the cjs module exports a module namespace?","date":"2016-07-11T21:28:27.735Z","type":"message"}
{"nick":"BridgeAR","reason":"Ping timeout: 250 seconds","date":"2016-07-11T21:28:54.739Z","type":"quit"}
{"nick":"bradleymeck","message":"no hoisting, but module namespaces would not be wrapped into new namespaces","date":"2016-07-11T21:29:04.304Z","type":"message"}
{"nick":"bradleymeck","message":"basically, if you `import` and you get back a ModuleNamespace: don't touch it, let v8 load it. if you get back something that isn't a ModuleNamespace: wrap it so it becomes a ModuleNamespace","date":"2016-07-11T21:29:44.353Z","type":"message"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2016-07-11T21:30:00.016Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T21:31:50.219Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:31:50.443Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:32:45.201Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:32:45.388Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:35:30.336Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:35:30.523Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:35:40.321Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:35:40.508Z","type":"part"}
{"nick":"seishun","message":"so, even if a cjs module exports a module namespace, you still need to know that it's actually a cjs module and that you can't use hoisting, right?","date":"2016-07-11T21:35:59.199Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T21:39:55.162Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:39:55.387Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:40:05.698Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:40:05.885Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:40:55.185Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:40:55.372Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:42:00.708Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:42:00.931Z","type":"part"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2016-07-11T21:43:40.094Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T21:44:36.103Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:44:36.290Z","type":"part"}
{"nick":"addaleax","reason":"Quit: ChatZilla 0.9.92 [Firefox 47.0/20160606113944]","date":"2016-07-11T21:46:58.399Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T21:47:06.018Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:47:06.199Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:48:09.489Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:48:09.670Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:48:48.402Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:48:48.621Z","type":"part"}
{"nick":"ilbonte","reason":"Ping timeout: 250 seconds","date":"2016-07-11T21:51:26.860Z","type":"quit"}
{"nick":"addaleax","date":"2016-07-11T21:52:04.676Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:54:59.227Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:54:59.449Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:55:17.026Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:55:17.213Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:57:14.222Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:57:14.409Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:59:03.180Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:59:03.367Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:59:23.201Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:59:23.388Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T21:59:38.204Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T21:59:38.391Z","type":"part"}
{"nick":"bradleymeck","message":"seishun: well, if any target exports an ModuleNamespace you don't have any need to hoist","date":"2016-07-11T21:59:54.586Z","type":"message"}
{"nick":"bradleymeck","message":"if any target exports something that is not a ModuleNamespace, we need to convert it to a ModuleNamespace; and we cannot automatically do hoisting for Object backed exports","date":"2016-07-11T22:00:55.730Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T22:01:36.169Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:01:36.356Z","type":"part"}
{"nick":"bradleymeck","message":"because objects 1. support getters 2. can change what properties exist on themselves (add/remove properties) 3. MemberExpressions set the `this` value of the Reference they produce","date":"2016-07-11T22:02:19.755Z","type":"message"}
{"nick":"peutetre","reason":"Ping timeout: 244 seconds","date":"2016-07-11T22:02:20.986Z","type":"quit"}
{"nick":"bradleymeck","message":"1. and 3. cause deopts / VM problems. 2. is workable if we perform snapshotting after evaluation of CJS","date":"2016-07-11T22:02:59.507Z","type":"message"}
{"nick":"nodejs-gh","date":"2016-07-11T22:03:12.006Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:03:12.193Z","type":"part"}
{"nick":"bradleymeck","message":"so we can't do hoisting against values by treating them like Objects because of 1. and 3.","date":"2016-07-11T22:03:24.624Z","type":"message"}
{"nick":"SomeKittens","reason":"Quit: Connection closed for inactivity","date":"2016-07-11T22:04:41.744Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T22:08:08.543Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:08:08.730Z","type":"part"}
{"nick":"bradleymeck","reason":"Read error: Connection reset by peer","date":"2016-07-11T22:11:00.086Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-07-11T22:14:52.174Z","type":"join"}
{"nick":"bradleymeck","reason":"Read error: Connection reset by peer","date":"2016-07-11T22:17:09.149Z","type":"quit"}
{"nick":"qard-appneta","reason":"Quit: (╯°□°）╯︵ pɹɐb","date":"2016-07-11T22:22:42.717Z","type":"quit"}
{"nick":"qard-appneta","date":"2016-07-11T22:23:06.374Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:23:48.298Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:23:48.578Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:24:25.033Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:24:25.259Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:32:45.014Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:32:45.201Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:33:40.022Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:33:40.209Z","type":"part"}
{"nick":"nnyk_","reason":"Ping timeout: 258 seconds","date":"2016-07-11T22:41:52.189Z","type":"quit"}
{"nick":"robink_","date":"2016-07-11T22:42:33.069Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:43:13.696Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:43:13.883Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:45:41.401Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:45:41.588Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:47:32.712Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:47:32.935Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:48:06.429Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:48:06.616Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:53:02.394Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:53:02.581Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:55:03.588Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:55:03.775Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:55:58.518Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:55:58.705Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T22:57:15.307Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T22:57:15.494Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:00:50.971Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:00:51.158Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:02:11.249Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:02:11.436Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:02:42.965Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:02:43.152Z","type":"part"}
{"nick":"nuizzy_","date":"2016-07-11T23:04:27.251Z","type":"join"}
{"nick":"nuizzy","reason":"Ping timeout: 252 seconds","date":"2016-07-11T23:05:55.427Z","type":"quit"}
{"nick":"nuizzy_","new_nick":"nuizzy","date":"2016-07-11T23:05:55.642Z","type":"nick"}
{"nick":"nodejs-gh","date":"2016-07-11T23:06:30.429Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:06:30.655Z","type":"part"}
{"nick":"qard-appneta","reason":"Quit: (╯°□°）╯︵ pɹɐb","date":"2016-07-11T23:17:26.554Z","type":"quit"}
{"nick":"thealphanerd","message":"almost donnnnneneeee :D","date":"2016-07-11T23:20:03.645Z","type":"message"}
{"nick":"qard-appneta","date":"2016-07-11T23:20:37.290Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:20:56.709Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:20:56.935Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:22:01.764Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:22:01.951Z","type":"part"}
{"nick":"indutny","message":"thealphanerd: out of curiosity, are you going to use git-secure-tag? ;)","date":"2016-07-11T23:22:32.296Z","type":"message"}
{"nick":"thealphanerd","message":"well there is no release going out today","date":"2016-07-11T23:22:46.107Z","type":"message"}
{"nick":"thealphanerd","message":"just auditing everything before putting together the v4.5.0-rc","date":"2016-07-11T23:22:58.559Z","type":"message"}
{"nick":"thealphanerd","message":"but I can use git-secure-tag to tag the rc's","date":"2016-07-11T23:23:06.651Z","type":"message"}
{"nick":"indutny","message":"ah, ok","date":"2016-07-11T23:23:07.164Z","type":"message"}
{"nick":"indutny","message":"that would be nice!","date":"2016-07-11T23:23:11.400Z","type":"message"}
{"nick":"indutny","message":"thanks","date":"2016-07-11T23:23:31.895Z","type":"message"}
{"nick":"thealphanerd","message":"I will try to remember. BUT if I forget ping in the proposal thread","date":"2016-07-11T23:23:32.460Z","type":"message"}
{"nick":"indutny","message":"heh, I'll do it now","date":"2016-07-11T23:23:57.444Z","type":"message"}
{"nick":"saghul","date":"2016-07-11T23:24:26.422Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:24:33.730Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:24:33.917Z","type":"part"}
{"nick":"thealphanerd","message":":D","date":"2016-07-11T23:29:17.879Z","type":"message"}
{"nick":"saghul","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-07-11T23:35:59.283Z","type":"quit"}
{"nick":"nodejs-gh","date":"2016-07-11T23:36:19.158Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:36:19.344Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:44:47.196Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:44:47.384Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:46:03.102Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:46:03.327Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:47:48.102Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:47:48.289Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:48:41.985Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:48:42.211Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:50:28.459Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:50:28.683Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:50:49.179Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:50:49.366Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:52:49.216Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:52:49.443Z","type":"part"}
{"nick":"nodejs-gh","date":"2016-07-11T23:59:39.456Z","type":"join"}
{"nick":"nodejs-gh","date":"2016-07-11T23:59:39.683Z","type":"part"}
