{"nick":"ircretary","reason":"Remote host closed the connection","date":"2015-05-30T00:00:00.682Z","type":"quit"}
{"nick":"ircretary","date":"2015-05-30T00:00:09.719Z","type":"join"}
{"nick":"s3shs","reason":"Quit: Computer has gone to sleep.","date":"2015-05-30T00:03:43.036Z","type":"quit"}
{"nick":"gigo1980","date":"2015-05-30T00:22:47.719Z","type":"join"}
{"nick":"gigo1980","reason":"Ping timeout: 240 seconds","date":"2015-05-30T00:26:57.751Z","type":"quit"}
{"nick":"arjunmehta","date":"2015-05-30T00:27:46.344Z","type":"join"}
{"nick":"rossk","date":"2015-05-30T00:29:01.737Z","type":"quit"}
{"nick":"mich-cook","reason":"Ping timeout: 252 seconds","date":"2015-05-30T00:30:22.891Z","type":"quit"}
{"nick":"sboudri__","reason":"Remote host closed the connection","date":"2015-05-30T00:34:29.938Z","type":"quit"}
{"nick":"seriema","date":"2015-05-30T00:36:09.802Z","type":"join"}
{"nick":"seriema","reason":"Ping timeout: 264 seconds","date":"2015-05-30T00:42:41.827Z","type":"quit"}
{"nick":"songawee","date":"2015-05-30T00:46:18.354Z","type":"join"}
{"nick":"arjunmehta","reason":"Quit: Sleeeeeeeeeep.","date":"2015-05-30T00:53:45.926Z","type":"quit"}
{"nick":"arjunmehta","date":"2015-05-30T01:00:11.570Z","type":"join"}
{"nick":"yoshuawuyts","reason":"Ping timeout: 258 seconds","date":"2015-05-30T01:04:43.915Z","type":"quit"}
{"nick":"arjunmeh_","date":"2015-05-30T01:06:26.935Z","type":"join"}
{"nick":"arjunme__","date":"2015-05-30T01:08:56.418Z","type":"join"}
{"nick":"arjunmeh_","reason":"Read error: Connection reset by peer","date":"2015-05-30T01:09:02.187Z","type":"quit"}
{"nick":"arjunmehta","reason":"Read error: Connection reset by peer","date":"2015-05-30T01:09:05.956Z","type":"quit"}
{"nick":"redonkulus1","reason":"Quit: Leaving.","date":"2015-05-30T01:09:44.929Z","type":"quit"}
{"nick":"movedx_","date":"2015-05-30T01:18:10.636Z","type":"join"}
{"nick":"movedx_","message":"Hello. I'm designing a release process for our software stack(s). It's all JavaScript based and we use npm to manage dependencies etc, and we have private repos up in npmjs.com, etc, etc. As it stands now we use a simple 'npm install' to install a remote package (@ourscope/package-name) and this results in package.json being used to pull dependencies. What's the benefit of a shrinkwrap file versus just using package.json which, in our ca","date":"2015-05-30T01:20:23.093Z","type":"message"}
{"nick":"movedx_","message":"states versions?*","date":"2015-05-30T01:20:29.019Z","type":"message"}
{"nick":"Havvy","message":"Shrinkwrap guarantees you get the same exact versions.","date":"2015-05-30T01:20:53.986Z","type":"message"}
{"nick":"s3shs","date":"2015-05-30T01:21:46.512Z","type":"join"}
{"nick":"movedx_","message":"How come packages.json wouldn't also do that?","date":"2015-05-30T01:21:51.201Z","type":"message"}
{"nick":"movedx_","message":"(You'll have to forgive me ignorance - I'm a systems engineer, so my knowledge/experience of npm package management is weak.)","date":"2015-05-30T01:22:14.415Z","type":"message"}
{"nick":"iarna","message":"So, your package.json can pin the versions of your direct dependencies, yes.","date":"2015-05-30T01:23:02.056Z","type":"message"}
{"nick":"iarna","message":"But it can't pin the version of their dependencies.","date":"2015-05-30T01:23:18.614Z","type":"message"}
{"nick":"iarna","message":"shrinkwrap let's you do that.","date":"2015-05-30T01:23:23.123Z","type":"message"}
{"nick":"iarna","message":"It let's you pin everything, all the way down.","date":"2015-05-30T01:23:29.877Z","type":"message"}
{"nick":"movedx_","message":"Aaaaah! Now that explains it. So it's a deep lockdown, not a shallow, top-level lock down, of the dependencies. That makes a lot of sense.","date":"2015-05-30T01:24:53.056Z","type":"message"}
{"nick":"iarna","message":"Right, exactly.","date":"2015-05-30T01:25:00.719Z","type":"message"}
{"nick":"iarna","message":"Also that means you can use laxer dependencies in the package.json, representing what you'd be willing to update to when you're ready for updates.","date":"2015-05-30T01:25:22.921Z","type":"message"}
{"nick":"iarna","message":"Which can be handy.","date":"2015-05-30T01:25:25.431Z","type":"message"}
{"nick":"sboudria_","date":"2015-05-30T01:26:18.426Z","type":"join"}
{"nick":"movedx_","message":"Essentially we have project-a, which uses internal module-a, module-b, -c, -d, etc. Each module is its own repo, of course, and each one has its own package.json file. As developers push to the \"staging\" branch for each module, ready for QE to test, I was thinking of having a second repo for project-a, project-a-shrinkwrap, which is pulled, updated with module-a's new \"staging\" version (on the project-a-shinwrap staging branch), which th","date":"2015-05-30T01:28:10.902Z","type":"message"}
{"nick":"movedx_","message":"... of the whole stack in staging.","date":"2015-05-30T01:28:20.162Z","type":"message"}
{"nick":"iarna","message":"sounds reasonable","date":"2015-05-30T01:28:48.379Z","type":"message"}
{"nick":"movedx_","message":"Would you recommend that we shrinkwrap each module, too, or just the high level project?","date":"2015-05-30T01:30:00.538Z","type":"message"}
{"nick":"iarna","message":"Just the top level","date":"2015-05-30T01:30:14.192Z","type":"message"}
{"nick":"iarna","message":"If you shrinkwrap at the top level then any shrinkwraps in the modules would be ignored.","date":"2015-05-30T01:30:44.257Z","type":"message"}
{"nick":"sboudria_","reason":"Ping timeout: 252 seconds","date":"2015-05-30T01:30:52.851Z","type":"quit"}
{"nick":"iarna","message":"And while you can shrinkwrap modules (and a number of well known modules do this), it's more intended to be a tool for the final application to lock down what's deployed.","date":"2015-05-30T01:31:15.960Z","type":"message"}
{"nick":"movedx_","message":"Excellent. Then it's the perfect solution.","date":"2015-05-30T01:31:47.065Z","type":"message"}
{"nick":"jrcconstela","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2015-05-30T01:33:18.608Z","type":"quit"}
{"nick":"matuzak_","reason":"Ping timeout: 240 seconds","date":"2015-05-30T01:34:09.761Z","type":"quit"}
{"nick":"jjjohnny","reason":"Ping timeout: 256 seconds","date":"2015-05-30T01:34:28.338Z","type":"quit"}
{"nick":"zkat","reason":"Ping timeout: 252 seconds","date":"2015-05-30T01:34:32.896Z","type":"quit"}
{"nick":"arjunme__","new_nick":"arjunmehta","date":"2015-05-30T01:36:10.174Z","type":"nick"}
{"nick":"seriema","date":"2015-05-30T01:39:02.158Z","type":"join"}
{"nick":"mcqueenorama1","date":"2015-05-30T01:39:12.616Z","type":"join"}
{"nick":"seriema","reason":"Ping timeout: 265 seconds","date":"2015-05-30T01:44:21.076Z","type":"quit"}
{"nick":"arjunmehta","reason":"Quit: Sleeeeeeeeeep.","date":"2015-05-30T01:45:37.115Z","type":"quit"}
{"nick":"ome","date":"2015-05-30T01:46:22.081Z","type":"join"}
{"nick":"mcqueeno_","date":"2015-05-30T01:47:42.611Z","type":"join"}
{"nick":"mcqueenorama1","reason":"Ping timeout: 265 seconds","date":"2015-05-30T01:50:43.051Z","type":"quit"}
{"nick":"movedx_","message":"How are package.json files generated? Manually, or is there an automated process to discovering the dependencies? I'm just wondering how I can automate incrementing the module-a version in project-a's package.json after a change, so that I can then `npm shrinkwrap`.","date":"2015-05-30T01:52:11.410Z","type":"message"}
{"nick":"iarna","message":"manually","date":"2015-05-30T01:52:54.509Z","type":"message"}
{"nick":"iarna","message":"but you can do `npm update --save` to update deps and save the updated versions to your package.json","date":"2015-05-30T01:53:23.412Z","type":"message"}
{"nick":"mcqueeno_","reason":"Read error: Connection reset by peer","date":"2015-05-30T01:53:52.015Z","type":"quit"}
{"nick":"mcqueenorama1","date":"2015-05-30T01:54:04.963Z","type":"join"}
{"nick":"movedx_","message":"Ah OK, I'm thinking about this slightly wrong, because the code isn't pulled from git, it's pulled from npmjs.com.","date":"2015-05-30T01:54:33.257Z","type":"message"}
{"nick":"movedx_","message":"Now I need to understand that process. If I dev pushes to the dev branch, how do I know what the dev version of the package is in the remote npm store, which I assume is where the developer pushes the code to after making changes... hmmm","date":"2015-05-30T01:56:00.323Z","type":"message"}
{"nick":"songawee","reason":"Quit: songawee","date":"2015-05-30T01:56:31.634Z","type":"quit"}
{"nick":"movedx_","message":"I guess they just increment the version as normal and provided we're using shrinkwrap files further along the chain, it won't effect released code because the shrinkwrap hasn't been updated.","date":"2015-05-30T01:56:52.726Z","type":"message"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2015-05-30T02:07:59.618Z","type":"quit"}
{"nick":"gigo1980","date":"2015-05-30T02:11:22.923Z","type":"join"}
{"nick":"gigo1980","reason":"Ping timeout: 272 seconds","date":"2015-05-30T02:16:00.934Z","type":"quit"}
{"nick":"movedx_","message":"iarna: I can't get into our npmjs.com account to see, but can an `npm publish --tag develop` trigger a web hook into Github or JenkinsCI (provided the IP/system is public)?","date":"2015-05-30T02:18:29.083Z","type":"message"}
{"nick":"iarna","message":"npmjs.com doesn't have hooks triggered from our side as yet.","date":"2015-05-30T02:18:59.273Z","type":"message"}
{"nick":"iarna","message":"You could add a postpublish hook to your package.json that did something like that maybe.","date":"2015-05-30T02:19:17.657Z","type":"message"}
{"nick":"movedx_","message":"That's potentially a solution. Another solution is I can just get QE to trigger a build in JenkinsCI manually. With the right Ansible Playbook being triggered, with the correct vars, it'll `npm update` accordingly.","date":"2015-05-30T02:21:00.986Z","type":"message"}
{"nick":"movedx_","message":"I'm just wondering how I can get npm to update against a particular tag.","date":"2015-05-30T02:21:20.167Z","type":"message"}
{"nick":"joshdsmith","reason":"Ping timeout: 264 seconds","date":"2015-05-30T02:26:13.427Z","type":"quit"}
{"nick":"seriema","date":"2015-05-30T02:40:01.315Z","type":"join"}
{"nick":"bcoe","date":"2015-05-30T02:41:11.297Z","type":"join"}
{"nick":"movedx_","message":"iarna: Can I just confirm I'm getting this flow right: 1. Create npm module; 2. write package.json file and define dependencies; 3. Shrinkwrap final module/product when you're happy with code/test results; 4. npm publish - shrinkwrap goes up with publish?","date":"2015-05-30T02:43:01.913Z","type":"message"}
{"nick":"seriema","reason":"Ping timeout: 256 seconds","date":"2015-05-30T02:45:27.294Z","type":"quit"}
{"nick":"dguttman","reason":"Ping timeout: 276 seconds","date":"2015-05-30T02:57:00.074Z","type":"quit"}
{"nick":"poosanth","date":"2015-05-30T03:02:52.594Z","type":"join"}
{"nick":"bcoe","reason":"Remote host closed the connection","date":"2015-05-30T03:03:18.213Z","type":"quit"}
{"nick":"poosanth","reason":"Quit: This computer has gone to sleep","date":"2015-05-30T03:08:12.557Z","type":"quit"}
{"nick":"rmg","date":"2015-05-30T03:08:28.669Z","type":"join"}
{"nick":"poosanth","date":"2015-05-30T03:09:49.537Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 250 seconds","date":"2015-05-30T03:13:35.408Z","type":"quit"}
{"nick":"mezod","date":"2015-05-30T03:16:23.614Z","type":"join"}
{"nick":"smikes","message":"@othiym23 - thanks for taking on #8359","date":"2015-05-30T03:17:33.684Z","type":"message"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2015-05-30T03:18:05.669Z","type":"quit"}
{"nick":"iarna","message":"movedx_: There are multiple use cases for shrinkwrap, but that's definitely one. It's one way of essentially making a consistent build artifact.","date":"2015-05-30T03:18:38.039Z","type":"message"}
{"nick":"mezod","reason":"Remote host closed the connection","date":"2015-05-30T03:25:11.202Z","type":"quit"}
{"nick":"SomeKittens","reason":"Quit: Connection closed for inactivity","date":"2015-05-30T03:26:50.400Z","type":"quit"}
{"nick":"mcqueeno_","date":"2015-05-30T03:27:35.413Z","type":"join"}
{"nick":"mcqueenorama1","reason":"Ping timeout: 246 seconds","date":"2015-05-30T03:30:23.933Z","type":"quit"}
{"nick":"poosanth","reason":"Quit: This computer has gone to sleep","date":"2015-05-30T03:37:07.937Z","type":"quit"}
{"nick":"seriema","date":"2015-05-30T03:41:04.082Z","type":"join"}
{"nick":"seriema","reason":"Ping timeout: 246 seconds","date":"2015-05-30T03:45:47.911Z","type":"quit"}
{"nick":"jasonkuhrt","date":"2015-05-30T04:00:13.309Z","type":"join"}
{"nick":"gigo1980","date":"2015-05-30T04:00:17.961Z","type":"join"}
{"nick":"gigo1980","reason":"Ping timeout: 246 seconds","date":"2015-05-30T04:04:41.946Z","type":"quit"}
{"nick":"rmg","date":"2015-05-30T04:09:31.364Z","type":"join"}
{"nick":"jasonkuhrt","reason":"Quit: Be back later ...","date":"2015-05-30T04:12:18.863Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 264 seconds","date":"2015-05-30T04:14:30.096Z","type":"quit"}
{"nick":"movedx_","reason":"Ping timeout: 246 seconds","date":"2015-05-30T04:19:34.620Z","type":"quit"}
{"nick":"knownasilya","reason":"Quit: Connection closed for inactivity","date":"2015-05-30T04:40:25.221Z","type":"quit"}
{"nick":"seriema","date":"2015-05-30T04:42:06.238Z","type":"join"}
{"nick":"seriema","reason":"Ping timeout: 272 seconds","date":"2015-05-30T04:47:52.257Z","type":"quit"}
{"nick":"qard_","reason":"Quit: leaving","date":"2015-05-30T05:20:46.488Z","type":"quit"}
{"nick":"seriema","date":"2015-05-30T05:43:15.113Z","type":"join"}
{"nick":"gigo1980","date":"2015-05-30T05:49:09.081Z","type":"join"}
{"nick":"lpin","date":"2015-05-30T05:49:30.535Z","type":"join"}
{"nick":"seriema","reason":"Ping timeout: 276 seconds","date":"2015-05-30T05:49:54.128Z","type":"quit"}
{"nick":"gigo1980","reason":"Ping timeout: 276 seconds","date":"2015-05-30T05:53:48.064Z","type":"quit"}
{"nick":"poosanth","date":"2015-05-30T06:00:38.988Z","type":"join"}
{"nick":"bcoe","date":"2015-05-30T06:07:48.294Z","type":"join"}
{"nick":"bcoe","reason":"Ping timeout: 256 seconds","date":"2015-05-30T06:12:08.212Z","type":"quit"}
{"nick":"greensoup","date":"2015-05-30T06:31:53.757Z","type":"join"}
{"nick":"seriema","date":"2015-05-30T06:46:25.036Z","type":"join"}
{"nick":"seriema","reason":"Ping timeout: 258 seconds","date":"2015-05-30T06:51:39.033Z","type":"quit"}
{"nick":"poosanth","reason":"Quit: This computer has gone to sleep","date":"2015-05-30T06:54:38.884Z","type":"quit"}
{"nick":"poosanth","date":"2015-05-30T06:55:17.148Z","type":"join"}
{"nick":"poosanth","reason":"Client Quit","date":"2015-05-30T06:58:07.810Z","type":"quit"}
{"nick":"mcqueeno_","reason":"Ping timeout: 264 seconds","date":"2015-05-30T07:01:01.421Z","type":"quit"}
{"nick":"greensoup","reason":"Ping timeout: 240 seconds","date":"2015-05-30T07:12:57.714Z","type":"quit"}
{"nick":"hekmek","date":"2015-05-30T07:16:35.709Z","type":"join"}
{"nick":"kemitchell","reason":"Quit: leaving","date":"2015-05-30T07:19:31.668Z","type":"quit"}
{"nick":"greensoup","date":"2015-05-30T07:22:49.349Z","type":"join"}
{"nick":"alrra","date":"2015-05-30T07:36:17.093Z","type":"join"}
{"nick":"gigo1980","date":"2015-05-30T07:37:59.292Z","type":"join"}
{"nick":"gigo1980","reason":"Ping timeout: 256 seconds","date":"2015-05-30T07:42:23.278Z","type":"quit"}
{"nick":"seriema","date":"2015-05-30T07:47:29.915Z","type":"join"}
{"nick":"seriema","reason":"Ping timeout: 252 seconds","date":"2015-05-30T07:52:34.855Z","type":"quit"}
{"nick":"movedx_","date":"2015-05-30T07:58:20.598Z","type":"join"}
{"nick":"movedx_","message":"Will an 'npm install ...' always completely re-download everything frm scratch? Won't it first check if packages/things are already in place and at the correct version?","date":"2015-05-30T07:59:50.739Z","type":"message"}
