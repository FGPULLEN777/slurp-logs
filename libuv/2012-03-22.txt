{"nick":"piscisaureus_","message":"woah, cconf! philips++ :-)","date":"2012-03-22T00:10:49.537Z","type":"message"}
{"nick":"piscisaureus_","message":"philips: who is backing this?","date":"2012-03-22T00:11:41.902Z","type":"message"}
{"nick":"dylukes","message":"Why are uv_tcp_connect and uv_tcp_connect6 distinct?","date":"2012-03-22T00:12:30.415Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: *shrug* they just are. It's fallout from the fact that we pass sockaddr_in[6] by value.","date":"2012-03-22T00:14:04.595Z","type":"message"}
{"nick":"dylukes","message":">_>. That was smart.","date":"2012-03-22T00:14:20.731Z","type":"message"}
{"nick":"piscisaureus_","message":"it should probably be changed at some point (we take patches)","date":"2012-03-22T00:14:23.017Z","type":"message"}
{"nick":"dylukes","message":"I'll just switch over res->ai_family for the moment.","date":"2012-03-22T00:14:35.483Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: it's not as if it is really hard to switch between the two","date":"2012-03-22T00:14:56.544Z","type":"message"}
{"nick":"piscisaureus_","message":"so yeah","date":"2012-03-22T00:15:01.353Z","type":"message"}
{"nick":"piscisaureus_","message":"that'll do","date":"2012-03-22T00:15:05.855Z","type":"message"}
{"nick":"dylukes","message":"Hm, it's not shown in the docs... but they return an int...","date":"2012-03-22T00:15:26.964Z","type":"message"}
{"nick":"dylukes","message":"that couldn't indicate connection success/failure really though","date":"2012-03-22T00:15:42.430Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: they return -1 on failure and 0 on suyccess.","date":"2012-03-22T00:15:47.958Z","type":"message"}
{"nick":"dylukes","message":"right but the callback isn't called until it's established.","date":"2012-03-22T00:15:58.934Z","type":"message"}
{"nick":"dylukes","message":"so success can't be guaranteed until you're in the callback and check the status.","date":"2012-03-22T00:16:08.605Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: ah right, well it can fail immediately if for example the socket is fucked, or already connected or something","date":"2012-03-22T00:16:13.501Z","type":"message"}
{"nick":"dylukes","message":"Oh awesome.","date":"2012-03-22T00:16:28.393Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: so, when it returns 0 it doesn't mean that it will all be well","date":"2012-03-22T00:16:29.855Z","type":"message"}
{"nick":"dylukes","message":"So there's TWO places I need to check errors :D?","date":"2012-03-22T00:16:33.939Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: yep","date":"2012-03-22T00:16:38.913Z","type":"message"}
{"nick":"dylukes","message":"I'm just trying to work out how to walk the list asynchronously.","date":"2012-03-22T00:16:55.211Z","type":"message"}
{"nick":"dylukes","message":"It's going to involve a try_next_ai function and statics, I suppose.","date":"2012-03-22T00:17:04.518Z","type":"message"}
{"nick":"dylukes","message":"Or I could just pass the state every time and keep it functional.","date":"2012-03-22T00:17:12.068Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: I am not sure if uv_connect will ever fail immediately if your application is bug-free. It probably shouldn't","date":"2012-03-22T00:17:23.429Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: so you could just assert that uv_connect returns 0","date":"2012-03-22T00:17:38.792Z","type":"message"}
{"nick":"dylukes","message":"Assuming you're application is bug-free is a programmer bug :\\.","date":"2012-03-22T00:17:39.616Z","type":"message"}
{"nick":"dylukes","message":"Okay so if I fudge the ownership a bit this can work.","date":"2012-03-22T00:20:25.525Z","type":"message"}
{"nick":"orlandovftw","reason":"Ping timeout: 240 seconds","date":"2012-03-22T00:24:36.660Z","type":"quit"}
{"nick":"pfox___","reason":"Ping timeout: 248 seconds","date":"2012-03-22T00:25:53.951Z","type":"quit"}
{"nick":"dylukes","message":"ohhh lovely...","date":"2012-03-22T00:26:08.949Z","type":"message"}
{"nick":"dylukes","message":"Does freeing uv_getaddrinfo_t delete the results?","date":"2012-03-22T00:26:30.551Z","type":"message"}
{"nick":"dylukes","message":"or do I have to free them separately?","date":"2012-03-22T00:26:42.318Z","type":"message"}
{"nick":"dylukes","message":"(that would be a *good thing* in this case >_<)","date":"2012-03-22T00:26:47.409Z","type":"message"}
{"nick":"piscisaureus_","message":"dylukes: no, only uv_freeaddrinfo_t does that.","date":"2012-03-22T00:26:47.982Z","type":"message"}
{"nick":"dylukes","message":"thank goodness.","date":"2012-03-22T00:26:54.259Z","type":"message"}
{"nick":"dylukes","message":"^^;","date":"2012-03-22T00:26:56.190Z","type":"message"}
{"nick":"dylukes","message":"I need the addrinfo list to persist for a bit...","date":"2012-03-22T00:27:06.416Z","type":"message"}
{"nick":"piscisaureus_","message":"uv_freeaddrinfo that would be","date":"2012-03-22T00:27:08.355Z","type":"message"}
{"nick":"dylukes","message":"I'm sticking the current list head in the connect handle as a baton.","date":"2012-03-22T00:27:29.403Z","type":"message"}
{"nick":"dylukes","message":"So if the connection fails it just calls a try_next_addr with it, which factors the traversal code out.","date":"2012-03-22T00:27:48.535Z","type":"message"}
{"nick":"dylukes","message":"basically.","date":"2012-03-22T00:27:49.940Z","type":"message"}
{"nick":"piscisaureus_","message":"sounds fine.","date":"2012-03-22T00:28:18.334Z","type":"message"}
{"nick":"piscisaureus_","message":"I am off, bye all","date":"2012-03-22T00:31:12.042Z","type":"message"}
{"nick":"AvianFlu","date":"2012-03-22T00:35:33.506Z","type":"join"}
{"nick":"benvie","date":"2012-03-22T00:37:48.788Z","type":"join"}
{"nick":"mikeal","date":"2012-03-22T00:40:47.633Z","type":"join"}
{"nick":"piscisaureus_","reason":"Ping timeout: 248 seconds","date":"2012-03-22T00:44:33.951Z","type":"quit"}
{"nick":"hij1nx","date":"2012-03-22T00:44:44.379Z","type":"join"}
{"nick":"perezd","reason":"Quit: perezd","date":"2012-03-22T00:47:54.188Z","type":"quit"}
{"nick":"brson","reason":"Ping timeout: 244 seconds","date":"2012-03-22T00:49:55.442Z","type":"quit"}
{"nick":"pietern","reason":"Read error: Connection reset by peer","date":"2012-03-22T01:05:06.214Z","type":"quit"}
{"nick":"pietern","date":"2012-03-22T01:05:23.540Z","type":"join"}
{"nick":"orlandovftw","date":"2012-03-22T01:09:30.642Z","type":"join"}
{"nick":"indutny","new_nick":"indutny_away","date":"2012-03-22T01:12:19.484Z","type":"nick"}
{"nick":"pietern","reason":"Quit: pietern","date":"2012-03-22T01:13:21.450Z","type":"quit"}
{"nick":"perezd","date":"2012-03-22T01:14:45.611Z","type":"join"}
{"nick":"dylukes","message":"eek.","date":"2012-03-22T01:18:11.924Z","type":"message"}
{"nick":"dylukes","message":"So uh, I'm a little shocked by how bad some of the 4/6 compat stuff is.","date":"2012-03-22T01:18:20.517Z","type":"message"}
{"nick":"dylukes","message":"Would you guys mind a patch deleting all of the 6 methods?","date":"2012-03-22T01:20:40.347Z","type":"message"}
{"nick":"dylukes","message":"All of the functions with 4/6 variants can/should be agnostic.","date":"2012-03-22T01:20:55.119Z","type":"message"}
{"nick":"dylukes","message":"in fact, the implementations are IDENTICAL underneath...","date":"2012-03-22T01:21:01.636Z","type":"message"}
{"nick":"dylukes","message":"the sockaddr arguments just need to be passed as pointers, not by value.","date":"2012-03-22T01:21:15.705Z","type":"message"}
{"nick":"TooTallNate","message":"dylukes: probably ask bert or ben tomorrow when they're online","date":"2012-03-22T01:24:28.140Z","type":"message"}
{"nick":"dylukes","message":"Yeah, it'd be a big breaking patch.","date":"2012-03-22T01:24:37.639Z","type":"message"}
{"nick":"dylukes","message":"Since every function with a 6 variant would lose the 6 variant, and sockaddr_in[6] params would change to sockaddr *","date":"2012-03-22T01:24:53.852Z","type":"message"}
{"nick":"dylukes","message":"Basically... there's no point to having different versions. The af_family field in the sockaddr lets you distinguish underneath... not that you have to anyways.","date":"2012-03-22T01:25:32.360Z","type":"message"}
{"nick":"dylukes","message":"All of the BSD/Winsock code is totally agnostic... ","date":"2012-03-22T01:25:43.814Z","type":"message"}
{"nick":"dylukes","message":"if you use getaddrinfo, you shouldn't even ever have to type a 4 or 6.","date":"2012-03-22T01:25:52.932Z","type":"message"}
{"nick":"dylukes","message":"TooTallNate: what're they're names on irc?","date":"2012-03-22T01:26:10.205Z","type":"message"}
{"nick":"TooTallNate","message":"well sounds like you have a pretty good argument on your side ;)","date":"2012-03-22T01:26:14.024Z","type":"message"}
{"nick":"TooTallNate","message":"dylukes: look for piscisaureus or bnoordhuis","date":"2012-03-22T01:26:39.401Z","type":"message"}
{"nick":"dylukes","message":"piscisaureus is which one?","date":"2012-03-22T01:26:52.289Z","type":"message"}
{"nick":"TooTallNate","message":"bert","date":"2012-03-22T01:26:56.563Z","type":"message"}
{"nick":"dap","reason":"Quit: Leaving.","date":"2012-03-22T01:28:01.297Z","type":"quit"}
{"nick":"orlandovftw","reason":"Ping timeout: 272 seconds","date":"2012-03-22T01:28:38.158Z","type":"quit"}
{"nick":"dylukes","message":"is libuv used by node yet?","date":"2012-03-22T01:34:05.867Z","type":"message"}
{"nick":"dylukes","message":"or is it still its own experimental thing?","date":"2012-03-22T01:34:15.521Z","type":"message"}
{"nick":"TooTallNate","message":"dylukes: node as of v0.6.x uses libuv everywhere","date":"2012-03-22T01:34:39.594Z","type":"message"}
{"nick":"dylukes","message":"crap.","date":"2012-03-22T01:34:46.430Z","type":"message"}
{"nick":"dylukes","message":"so... this will break node too ^^.","date":"2012-03-22T01:34:52.573Z","type":"message"}
{"nick":"TooTallNate","message":"most likely :p","date":"2012-03-22T01:35:05.628Z","type":"message"}
{"nick":"isaacs","message":"dylukes: yeah.","date":"2012-03-22T01:35:10.144Z","type":"message"}
{"nick":"dylukes","message":"luckily nodes net library is already 4/6 agnostic.","date":"2012-03-22T01:35:48.808Z","type":"message"}
{"nick":"dylukes","message":"so the changes on its front should be minimal.","date":"2012-03-22T01:35:55.871Z","type":"message"}
{"nick":"dylukes","message":"in fact, it's probably going to constitute REMOVING code, not adding it ^^.","date":"2012-03-22T01:36:06.009Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Linkinus - http://linkinus.com","date":"2012-03-22T01:37:15.354Z","type":"quit"}
{"nick":"creationix","message":"dylukes, I like the change","date":"2012-03-22T01:46:15.718Z","type":"message"}
{"nick":"creationix","message":"I maintain 3 projects that use libuv","date":"2012-03-22T01:46:22.210Z","type":"message"}
{"nick":"creationix","message":"writing bindings for 4 and 6 is a pain","date":"2012-03-22T01:46:28.621Z","type":"message"}
{"nick":"dylukes","message":"It needs to be done...","date":"2012-03-22T01:46:30.587Z","type":"message"}
{"nick":"dylukes","message":"Yeah, I'm gonna branch and try it out tomorrow.","date":"2012-03-22T01:46:40.758Z","type":"message"}
{"nick":"dylukes","message":"It's just blatant code duplication.","date":"2012-03-22T01:46:53.839Z","type":"message"}
{"nick":"dylukes","message":"Literally.","date":"2012-03-22T01:46:55.065Z","type":"message"}
{"nick":"dylukes","message":"The definitions for uv__tcp_connect and uv__tcp_connect6 actually are *identical* :P","date":"2012-03-22T01:47:18.997Z","type":"message"}
{"nick":"dylukes","message":"they both just cast the sockaddr_in/6's to what they SHOULD have been originally (struct sockaddr *)","date":"2012-03-22T01:47:37.269Z","type":"message"}
{"nick":"creationix","message":"so I'll just have to pass in my address by address when I call","date":"2012-03-22T01:48:12.422Z","type":"message"}
{"nick":"creationix","message":"that's not a big change","date":"2012-03-22T01:48:16.869Z","type":"message"}
{"nick":"isaacs","message":"dylukes: as long as it's agreeable to piscisaureus and bnoordhuis, it sounds reasonable to me, as long as it's not in the v0.6 branch","date":"2012-03-22T01:49:21.550Z","type":"message"}
{"nick":"creationix","message":"Isn't node 0.8.0 getting close? I would think now is the ideal time to make these kind of changes in master libuv","date":"2012-03-22T01:50:22.757Z","type":"message"}
{"nick":"creationix","message":"safe, but API changing cleanups","date":"2012-03-22T01:50:37.629Z","type":"message"}
{"nick":"dylukes","message":"heh?","date":"2012-03-22T01:51:56.104Z","type":"message"}
{"nick":"dylukes","message":"why is the v0.6 branch separate from master?","date":"2012-03-22T01:52:02.968Z","type":"message"}
{"nick":"dylukes","message":"I mean, it has independent changes","date":"2012-03-22T01:52:16.943Z","type":"message"}
{"nick":"dylukes","message":"seems odd.","date":"2012-03-22T01:52:19.242Z","type":"message"}
{"nick":"dylukes","message":"oh, a patch got put on both branches.","date":"2012-03-22T01:52:32.247Z","type":"message"}
{"nick":"creationix","message":"node has strict API and ABI stability within a stable series","date":"2012-03-22T01:53:24.054Z","type":"message"}
{"nick":"creationix","message":"the libuv abi can't change for the node 0.6.x lifespan","date":"2012-03-22T01:53:34.777Z","type":"message"}
{"nick":"dylukes","message":"but isn't that why there's a v0.6 branch?","date":"2012-03-22T01:53:52.096Z","type":"message"}
{"nick":"dylukes","message":"node's external API/ABI shouldn't change at all.","date":"2012-03-22T01:54:10.611Z","type":"message"}
{"nick":"dylukes","message":"All this is is remapping some internal functions.","date":"2012-03-22T01:54:18.073Z","type":"message"}
{"nick":"dylukes","message":"and removing redundancy.","date":"2012-03-22T01:54:22.830Z","type":"message"}
{"nick":"creationix","message":"ask bert or ben","date":"2012-03-22T01:54:37.452Z","type":"message"}
{"nick":"creationix","message":"they are in Europe","date":"2012-03-22T01:54:45.148Z","type":"message"}
{"nick":"dylukes","message":"hehe yeah","date":"2012-03-22T01:54:49.602Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-03-22T01:59:53.241Z","type":"quit"}
{"nick":"mikeal","date":"2012-03-22T02:23:40.733Z","type":"join"}
{"nick":"benvie","date":"2012-03-22T02:35:03.706Z","type":"quit"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-03-22T03:10:29.429Z","type":"quit"}
{"nick":"benvie","date":"2012-03-22T03:13:05.399Z","type":"join"}
{"nick":"dylukes","reason":"Quit: Pipes are broken. Sending packets via Fedex.","date":"2012-03-22T03:24:17.597Z","type":"quit"}
{"nick":"pfox___","date":"2012-03-22T03:48:09.323Z","type":"join"}
{"nick":"mikeal","date":"2012-03-22T03:55:12.076Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2012-03-22T04:06:13.673Z","type":"quit"}
{"nick":"orlandovftw","date":"2012-03-22T04:09:32.516Z","type":"join"}
{"nick":"Aria","date":"2012-03-22T04:29:14.902Z","type":"join"}
{"nick":"pfox___","reason":"Ping timeout: 264 seconds","date":"2012-03-22T04:38:23.316Z","type":"quit"}
{"nick":"orlandovftw","reason":"Ping timeout: 264 seconds","date":"2012-03-22T04:42:35.319Z","type":"quit"}
{"nick":"perezd","reason":"Read error: Connection reset by peer","date":"2012-03-22T05:00:11.036Z","type":"quit"}
{"nick":"perezd","date":"2012-03-22T05:00:39.797Z","type":"join"}
{"nick":"perezd","reason":"Ping timeout: 246 seconds","date":"2012-03-22T05:05:01.015Z","type":"quit"}
{"nick":"Aria","reason":"Remote host closed the connection","date":"2012-03-22T05:15:51.392Z","type":"quit"}
{"nick":"perezd","date":"2012-03-22T05:54:08.045Z","type":"join"}
{"nick":"benvie","reason":"Ping timeout: 260 seconds","date":"2012-03-22T05:55:07.289Z","type":"quit"}
{"nick":"isaacs","reason":"Remote host closed the connection","date":"2012-03-22T06:09:45.078Z","type":"quit"}
{"nick":"paddybyers","date":"2012-03-22T06:26:52.051Z","type":"join"}
{"nick":"orlandovftw","date":"2012-03-22T06:27:47.633Z","type":"join"}
{"nick":"orlandovftw","reason":"Ping timeout: 244 seconds","date":"2012-03-22T07:49:27.348Z","type":"quit"}
{"nick":"rendar","date":"2012-03-22T07:51:54.167Z","type":"join"}
{"nick":"stephank","reason":"Quit: *Poof!*","date":"2012-03-22T07:58:05.258Z","type":"quit"}
{"nick":"mikeal","date":"2012-03-22T08:13:17.606Z","type":"join"}
{"nick":"mikeal","reason":"Ping timeout: 244 seconds","date":"2012-03-22T08:18:54.403Z","type":"quit"}
{"nick":"mikeal","date":"2012-03-22T08:23:52.875Z","type":"join"}
{"nick":"kuebk","date":"2012-03-22T08:51:00.921Z","type":"join"}
{"nick":"paddybyers","reason":"Quit: paddybyers","date":"2012-03-22T09:41:32.075Z","type":"quit"}
{"nick":"dshaw_","reason":"Quit: Leaving.","date":"2012-03-22T09:47:11.449Z","type":"quit"}
{"nick":"indutny_away","reason":"Ping timeout: 250 seconds","date":"2012-03-22T09:54:47.243Z","type":"quit"}
{"nick":"mikeal","reason":"Ping timeout: 276 seconds","date":"2012-03-22T09:59:59.598Z","type":"quit"}
{"nick":"indutny","date":"2012-03-22T10:01:05.462Z","type":"join"}
{"nick":"rendar","date":"2012-03-22T10:08:36.875Z","type":"quit"}
{"nick":"rendar","date":"2012-03-22T10:10:14.874Z","type":"join"}
{"nick":"mikeal","date":"2012-03-22T10:41:30.356Z","type":"join"}
{"nick":"paddybyers","date":"2012-03-22T11:13:28.524Z","type":"join"}
{"nick":"wankdanker","date":"2012-03-22T11:26:32.575Z","type":"join"}
{"nick":"mikeal","reason":"Read error: Connection reset by peer","date":"2012-03-22T12:22:39.156Z","type":"quit"}
{"nick":"mikeal","date":"2012-03-22T12:22:48.563Z","type":"join"}
{"nick":"indutny","reason":"Quit: Leaving.","date":"2012-03-22T12:54:45.509Z","type":"quit"}
{"nick":"k-s","new_nick":"k-s[AWAY]","date":"2012-03-22T12:55:04.401Z","type":"nick"}
{"nick":"indutny","date":"2012-03-22T12:55:36.056Z","type":"join"}
{"nick":"piscisaureus_","date":"2012-03-22T13:21:59.214Z","type":"join"}
{"nick":"paddybyers","reason":"Quit: paddybyers","date":"2012-03-22T13:29:11.603Z","type":"quit"}
{"nick":"bnoordhuis","date":"2012-03-22T13:44:10.784Z","type":"join"}
{"nick":"k-s[AWAY]","new_nick":"k-s","date":"2012-03-22T14:32:44.777Z","type":"nick"}
{"nick":"creationix","message":"piscisaureus_, bnoordhuis, any idea what could cause this assertion to fail?","date":"2012-03-22T14:42:47.116Z","type":"message"}
{"nick":"creationix","message":"canio: src/unix/core.c:237: uv__finish_close: Assertion `!(handle->flags & UV_CLOSED)' failed.","date":"2012-03-22T14:42:47.600Z","type":"message"}
{"nick":"piscisaureus_","message":"creationix: calling uv_close twice on the same handle","date":"2012-03-22T14:43:09.127Z","type":"message"}
{"nick":"paddybyers","date":"2012-03-22T14:43:11.677Z","type":"join"}
{"nick":"creationix","message":"I don't think that's what I'm doing","date":"2012-03-22T14:43:29.994Z","type":"message"}
{"nick":"creationix","message":"I guess I can log the struct pointer address before calling","date":"2012-03-22T14:43:37.780Z","type":"message"}
{"nick":"creationix","message":"and look for dupes","date":"2012-03-22T14:43:40.775Z","type":"message"}
{"nick":"piscisaureus_","message":"creationix: or maybe the pointer just points to an uninitialized handle","date":"2012-03-22T14:44:01.035Z","type":"message"}
{"nick":"piscisaureus_","message":"or not a handle at all","date":"2012-03-22T14:44:05.210Z","type":"message"}
{"nick":"creationix","message":"hmm","date":"2012-03-22T14:44:24.818Z","type":"message"}
{"nick":"creationix","message":"so I call close on two different objects in my app","date":"2012-03-22T14:45:40.471Z","type":"message"}
{"nick":"creationix","message":"when logginc the C calls I get","date":"2012-03-22T14:45:44.981Z","type":"message"}
{"nick":"creationix","message":"uv_close(0x7f4629357a76, 0x408784)","date":"2012-03-22T14:45:45.416Z","type":"message"}
{"nick":"creationix","message":"uv_close(0x7f4629357c54, 0x408784)","date":"2012-03-22T14:45:45.617Z","type":"message"}
{"nick":"creationix","message":"and if I just do one of the closes, it still breaks.  If I do just the other it doesn't","date":"2012-03-22T14:47:04.304Z","type":"message"}
{"nick":"piscisaureus_","message":"creationix: can you point me to the code?","date":"2012-03-22T14:47:32.724Z","type":"message"}
{"nick":"creationix","message":"piscisaureus_, at the script level, this is the one causing trouble https://github.com/creationix/candor.io/blob/master/test-timer.can#L30","date":"2012-03-22T14:48:12.206Z","type":"message"}
{"nick":"creationix","message":"which calls https://github.com/creationix/candor.io/blob/master/src/luv_handle.cc#L25","date":"2012-03-22T14:48:35.661Z","type":"message"}
{"nick":"creationix","message":"would this happen if the VM moved my uv_timer_t struct?","date":"2012-03-22T14:48:58.390Z","type":"message"}
{"nick":"piscisaureus_","message":"yes","date":"2012-03-22T14:49:04.567Z","type":"message"}
{"nick":"piscisaureus_","message":"that would invalidate the pointer right","date":"2012-03-22T14:49:12.340Z","type":"message"}
{"nick":"piscisaureus_","message":"you can never move libuv structs around","date":"2012-03-22T14:49:25.560Z","type":"message"}
{"nick":"creationix","message":"I'll bet that's it","date":"2012-03-22T14:49:43.163Z","type":"message"}
{"nick":"creationix","message":"I found a different bug yesterday where it was moving my structs causing segfaults","date":"2012-03-22T14:49:56.214Z","type":"message"}
{"nick":"creationix","message":"btw, besides this moving struct issue, it's working quite nicely, the candor syntax is ok. https://github.com/creationix/candor.io/blob/master/net.can#L80-85","date":"2012-03-22T14:51:15.118Z","type":"message"}
{"nick":"CIA-99","message":"\u0002node:\u000f \u000303Ben Noordhuis\u000f \u000307v0.6\u000f * r\u0002ea44d30\u000f \u000310\u000f/ src/node_crypto.cc \u0002:\u000f crypto: fix compile-time error with openssl <= 0.9.7e - http://git.io/ZeUzuw","date":"2012-03-22T14:53:05.266Z","type":"message"}
{"nick":"pfox___","date":"2012-03-22T14:54:00.393Z","type":"join"}
{"nick":"pfox___","message":"bnoordhuis: rust-libuv love continues (albeit slowly)","date":"2012-03-22T14:55:41.765Z","type":"message"}
{"nick":"bnoordhuis","message":"pfox___: good :)","date":"2012-03-22T14:55:56.121Z","type":"message"}
{"nick":"bnoordhuis","message":"need help / pointers / moral support?","date":"2012-03-22T14:56:03.891Z","type":"message"}
{"nick":"tjfontaine","message":"beer?","date":"2012-03-22T14:56:11.128Z","type":"message"}
{"nick":"pfox___","message":"not unless you want to work on the rust<->C ABI bridge :)","date":"2012-03-22T14:56:21.880Z","type":"message"}
{"nick":"bnoordhuis","message":"eh, i'll settle for beer","date":"2012-03-22T14:56:30.192Z","type":"message"}
{"nick":"bnoordhuis","message":"part of the moral support","date":"2012-03-22T14:56:36.640Z","type":"message"}
{"nick":"pfox___","message":"well look me up next time you're in seattle","date":"2012-03-22T14:56:50.104Z","type":"message"}
{"nick":"tjfontaine","message":"I thought it was liquid courage","date":"2012-03-22T14:56:50.831Z","type":"message"}
{"nick":"perezd","reason":"Quit: perezd","date":"2012-03-22T14:57:09.354Z","type":"quit"}
{"nick":"k-s","new_nick":"k-s[AWAY]","date":"2012-03-22T14:57:15.105Z","type":"nick"}
{"nick":"bnoordhuis","message":"i hear good things about seattle","date":"2012-03-22T14:57:20.355Z","type":"message"}
{"nick":"pfox___","message":"they're all lies. it's an intellectual wasteland.","date":"2012-03-22T14:57:31.242Z","type":"message"}
{"nick":"bnoordhuis","message":"like how they have this big highway that lets you exit the city real quick","date":"2012-03-22T14:57:32.896Z","type":"message"}
{"nick":"creationix","message":"pfox___, don't temp me, I'm a libuv binding addict","date":"2012-03-22T14:57:49.421Z","type":"message"}
{"nick":"pfox___","message":"creationix: you could probably do it faster, heh.","date":"2012-03-22T14:58:24.680Z","type":"message"}
{"nick":"pfox___","message":"i just had a kid","date":"2012-03-22T14:58:28.653Z","type":"message"}
{"nick":"pfox___","message":"not me, personally.","date":"2012-03-22T14:58:37.014Z","type":"message"}
{"nick":"tjfontaine","message":"congratulations","date":"2012-03-22T14:58:43.414Z","type":"message"}
{"nick":"pfox___","message":"anyways.. hell of a time to get involved with library work for a new lang :)","date":"2012-03-22T14:58:49.828Z","type":"message"}
{"nick":"creationix","message":"mine is due any week now, I understand","date":"2012-03-22T14:58:54.674Z","type":"message"}
{"nick":"creationix","message":"pfox___, indeed, I'm writing libuv bindings for candor lang","date":"2012-03-22T14:59:02.949Z","type":"message"}
{"nick":"pfox___","message":"candor? never heard of it..","date":"2012-03-22T14:59:21.279Z","type":"message"}
{"nick":"creationix","message":"just found a bug where the GC relocated my libuv structs causing all sorts of breakage","date":"2012-03-22T14:59:22.783Z","type":"message"}
{"nick":"pfox___","message":"wow, that sucks.","date":"2012-03-22T14:59:30.150Z","type":"message"}
{"nick":"pfox___","message":"yeah.. my main nuisance is passing stuff by-val into C is broken","date":"2012-03-22T14:59:49.357Z","type":"message"}
{"nick":"pfox___","message":"at least by-val returns from C is fixed, now","date":"2012-03-22T14:59:54.721Z","type":"message"}
{"nick":"creationix","message":"https://github.com/creationix/candor.io,  https://github.com/indutny/candor","date":"2012-03-22T14:59:58.758Z","type":"message"}
{"nick":"pfox___","message":"i was having to malloc everything in c++ then return void* to rust and pass that back","date":"2012-03-22T15:00:12.773Z","type":"message"}
{"nick":"pfox___","message":"now i can return the value from C, at least.. but still have to pass a ptr back in :/","date":"2012-03-22T15:00:23.533Z","type":"message"}
{"nick":"creationix","message":"yeah, libuv's use of structs keeps me from using it in luajit ffi","date":"2012-03-22T15:00:38.296Z","type":"message"}
{"nick":"pfox___","message":"but this ABI work landed in, like, the last week","date":"2012-03-22T15:00:40.134Z","type":"message"}
{"nick":"pfox___","message":"anyways.. just got uv_write working .. there's some ugliness.. but that status == 0 in the uv_write_cb was *glorious*","date":"2012-03-22T15:01:32.918Z","type":"message"}
{"nick":"travis-ci","date":"2012-03-22T15:01:43.148Z","type":"join"}
{"nick":"travis-ci","message":"[travis-ci] joyent/node#629 (v0.6 - ea44d30 : Ben Noordhuis): The build passed.","date":"2012-03-22T15:01:43.349Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Change view : https://github.com/joyent/node/compare/851b397...ea44d30","date":"2012-03-22T15:01:43.349Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Build details : http://travis-ci.org/joyent/node/builds/922547","date":"2012-03-22T15:01:43.349Z","type":"message"}
{"nick":"travis-ci","date":"2012-03-22T15:01:43.349Z","type":"part"}
{"nick":"pfox___","message":"translating a rust vector of bytes into an array of uv_buf_t's was.. interesting.","date":"2012-03-22T15:01:50.749Z","type":"message"}
{"nick":"pfox___","message":"a vector of vectors of bytes, even","date":"2012-03-22T15:02:00.658Z","type":"message"}
{"nick":"creationix","message":"pfox___, yes, this is my third time to bind libuc to a new platform and uv_write is a milestone","date":"2012-03-22T15:02:11.413Z","type":"message"}
{"nick":"pfox___","message":"for the uv_buf_t[] arg to uv_write","date":"2012-03-22T15:02:12.859Z","type":"message"}
{"nick":"pfox___","message":"ah, so then you know my pain.","date":"2012-03-22T15:02:25.385Z","type":"message"}
{"nick":"creationix","message":"heh, I usually just cheat and pass a single buf","date":"2012-03-22T15:02:31.267Z","type":"message"}
{"nick":"pfox___","message":"next: alloc_cb (which im concerned about because of aforementioned ABI woes)","date":"2012-03-22T15:02:48.208Z","type":"message"}
{"nick":"pfox___","message":"and uv_read_start","date":"2012-03-22T15:02:51.823Z","type":"message"}
{"nick":"pfox___","message":"and its cb","date":"2012-03-22T15:02:54.660Z","type":"message"}
{"nick":"pfox___","message":"(im working through a tcp request happy path)","date":"2012-03-22T15:03:03.141Z","type":"message"}
{"nick":"creationix","message":"I don't expose alloc_cb to the vm","date":"2012-03-22T15:03:05.357Z","type":"message"}
{"nick":"creationix","message":"I just hard-code it to malloc","date":"2012-03-22T15:03:09.698Z","type":"message"}
{"nick":"pfox___","message":"yeah, i can understand that","date":"2012-03-22T15:03:15.263Z","type":"message"}
{"nick":"creationix","message":"and then free it in onWrite","date":"2012-03-22T15:03:16.352Z","type":"message"}
{"nick":"pfox___","message":"but rust *should* have the tools to do it, in theory","date":"2012-03-22T15:03:27.845Z","type":"message"}
{"nick":"pfox___","message":"on paper it has pretty strong FFI support","date":"2012-03-22T15:03:39.001Z","type":"message"}
{"nick":"pfox___","message":"but we're getting there, still :)","date":"2012-03-22T15:03:46.622Z","type":"message"}
{"nick":"creationix","message":"I should look into rust when my experiments are stable enough for someone else to take over","date":"2012-03-22T15:04:08.253Z","type":"message"}
{"nick":"txdv","date":"2012-03-22T15:04:28.534Z","type":"join"}
{"nick":"dylukes","date":"2012-03-22T15:05:11.541Z","type":"join"}
{"nick":"pfox___","message":"it's a neat language, it's really grown on me.","date":"2012-03-22T15:05:58.447Z","type":"message"}
{"nick":"dylukes","message":"bnoordhuis: piscisaureus_: hey","date":"2012-03-22T15:06:30.525Z","type":"message"}
{"nick":"creationix","message":"yeah, I learned some about it when I interviewed for the b2g team last fall","date":"2012-03-22T15:06:32.135Z","type":"message"}
{"nick":"dylukes","message":"I was told I should ask you two about this.","date":"2012-03-22T15:06:35.623Z","type":"message"}
{"nick":"creationix","message":"rust looks cool","date":"2012-03-22T15:06:39.210Z","type":"message"}
{"nick":"dylukes","message":"It is cool! :o","date":"2012-03-22T15:06:52.132Z","type":"message"}
{"nick":"dylukes","message":"So, I was looking through libuv, and I noticed how the 4/6 compat stuff is... broken.","date":"2012-03-22T15:06:55.129Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: ho","date":"2012-03-22T15:07:01.646Z","type":"message"}
{"nick":"dylukes","message":"You expose two API's, with *identical* implementation underneath.","date":"2012-03-22T15:07:06.190Z","type":"message"}
{"nick":"dylukes","message":"Would you accept a rather... API breaking patch to fix this?","date":"2012-03-22T15:07:13.747Z","type":"message"}
{"nick":"bnoordhuis","message":"probably not","date":"2012-03-22T15:07:19.576Z","type":"message"}
{"nick":"bnoordhuis","message":"what exactly is broken?","date":"2012-03-22T15:07:23.250Z","type":"message"}
{"nick":"dylukes","message":"okay so, let me give an example","date":"2012-03-22T15:07:28.355Z","type":"message"}
{"nick":"dylukes","message":"there is uv_tcp_connect and uv_tcp_connect6","date":"2012-03-22T15:07:36.254Z","type":"message"}
{"nick":"dylukes","message":"the only different is one takes a sockaddr_in6 and the other a sockaddr_in","date":"2012-03-22T15:07:48.562Z","type":"message"}
{"nick":"dylukes","message":"however, the underlying implementation..","date":"2012-03-22T15:07:52.956Z","type":"message"}
{"nick":"dylukes","message":"for both... are identical.","date":"2012-03-22T15:07:59.489Z","type":"message"}
{"nick":"dylukes","message":"They just convert to (sockaddr *) and pass it to the *same connect functions*","date":"2012-03-22T15:08:21.494Z","type":"message"}
{"nick":"dylukes","message":"Really, there should only be one uv_tcp_connect, which takes a (struct sockaddr *), not a (struct sockaddr_in[6])","date":"2012-03-22T15:08:45.659Z","type":"message"}
{"nick":"dylukes","message":"Basically, you're exposing two API's for one underlying API.","date":"2012-03-22T15:08:58.482Z","type":"message"}
{"nick":"creationix","message":"do we have to break API? does plain C allow function overloading","date":"2012-03-22T15:09:02.806Z","type":"message"}
{"nick":"dylukes","message":"I think you're missing the point. (and no).","date":"2012-03-22T15:09:12.195Z","type":"message"}
{"nick":"bnoordhuis","message":"creationix: no function overloading in c","date":"2012-03-22T15:09:16.929Z","type":"message"}
{"nick":"dylukes","message":"let me give an example...","date":"2012-03-22T15:09:30.801Z","type":"message"}
{"nick":"dylukes","message":"There's no function overloading, but,","date":"2012-03-22T15:09:40.636Z","type":"message"}
{"nick":"dylukes","message":"the sockaddr set of structures are polymorphic.","date":"2012-03-22T15:09:47.484Z","type":"message"}
{"nick":"dylukes","message":"They're like uv_request and uv_handle.","date":"2012-03-22T15:09:51.559Z","type":"message"}
{"nick":"dylukes","message":"They all share the same head (sockaddr) and you can find out if it's a sockaddr_in or sockaddr_in6 or sockaddr_storage from the ai_family field.","date":"2012-03-22T15:10:12.134Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: we did it like that because it's easy to use","date":"2012-03-22T15:10:32.666Z","type":"message"}
{"nick":"dylukes","message":"Now the problem is, when the user gets a addrinfo from uv_getaddrinf,","date":"2012-03-22T15:10:32.861Z","type":"message"}
{"nick":"dylukes","message":"yeah, but it's *not*","date":"2012-03-22T15:10:37.238Z","type":"message"}
{"nick":"dylukes","message":"let me try to explain the issue better","date":"2012-03-22T15:10:43.219Z","type":"message"}
{"nick":"dylukes","message":"let's say you call uv_getaddrinfo.","date":"2012-03-22T15:10:52.440Z","type":"message"}
{"nick":"dylukes","message":"now you have a linked lists of addrinfos. For each, you can get the sockaddr.","date":"2012-03-22T15:11:23.184Z","type":"message"}
{"nick":"dylukes","message":"Now, because there are two functions, I have to do this...","date":"2012-03-22T15:11:29.507Z","type":"message"}
{"nick":"dylukes","message":"emphasis on line 58","date":"2012-03-22T15:11:47.730Z","type":"message"}
{"nick":"dylukes","message":"https://gist.github.com/2158903","date":"2012-03-22T15:11:47.932Z","type":"message"}
{"nick":"dylukes","message":"notice... I'm casting a sockaddr to sockaddr_in or sockaddr_in6...","date":"2012-03-22T15:11:59.967Z","type":"message"}
{"nick":"dylukes","message":"well guess what both of those functions do underneasth!","date":"2012-03-22T15:12:06.115Z","type":"message"}
{"nick":"dylukes","message":"They cast it BACK.","date":"2012-03-22T15:12:08.923Z","type":"message"}
{"nick":"dylukes","message":"In other words, there's *no reason* for these to exist as separate functions.","date":"2012-03-22T15:12:19.291Z","type":"message"}
{"nick":"dylukes","message":"bnoordhuis: https://github.com/joyent/libuv/blob/master/src/unix/tcp.c#L210","date":"2012-03-22T15:12:55.050Z","type":"message"}
{"nick":"dylukes","message":"see the problem ;)?","date":"2012-03-22T15:12:57.326Z","type":"message"}
{"nick":"dylukes","message":"uv__tcp_connect and uv__tcp_connect6 are mightly similar huh :).","date":"2012-03-22T15:13:10.720Z","type":"message"}
{"nick":"dylukes","message":"mighty*","date":"2012-03-22T15:13:14.837Z","type":"message"}
{"nick":"bnoordhuis","message":"they are... but i'm still not really convinced it's a problem","date":"2012-03-22T15:14:39.267Z","type":"message"}
{"nick":"dylukes","message":"Well it's a problem because","date":"2012-03-22T15:14:49.183Z","type":"message"}
{"nick":"dylukes","message":"1) it's redundant","date":"2012-03-22T15:14:51.155Z","type":"message"}
{"nick":"dylukes","message":"2) it's a terrible API","date":"2012-03-22T15:14:53.258Z","type":"message"}
{"nick":"dylukes","message":"3) it's betraying all the work the POSIX and Winsock API's go to to HIDE 4/6 compat from you.","date":"2012-03-22T15:15:05.905Z","type":"message"}
{"nick":"dylukes","message":"These API's are designed to be agnostic.","date":"2012-03-22T15:15:12.778Z","type":"message"}
{"nick":"dylukes","message":"And you're just totally blowing it up.","date":"2012-03-22T15:15:17.171Z","type":"message"}
{"nick":"pfox___","message":"that's a bit hyperbolic","date":"2012-03-22T15:15:25.201Z","type":"message"}
{"nick":"dylukes","message":"Not to mention, node.js actually exposes only one API (correctly)","date":"2012-03-22T15:15:32.448Z","type":"message"}
{"nick":"dylukes","message":"meaning in your node implementation you have redudant switching code like I do.","date":"2012-03-22T15:15:43.608Z","type":"message"}
{"nick":"dylukes","message":"Well, no... there's just zero good reason for these to be separate functions.","date":"2012-03-22T15:15:52.966Z","type":"message"}
{"nick":"pfox___","message":"perhaps at the time","date":"2012-03-22T15:16:02.657Z","type":"message"}
{"nick":"dylukes","message":"Uh.. no...","date":"2012-03-22T15:16:08.477Z","type":"message"}
{"nick":"pfox___","message":"now the \"good\" reason is the inertia of API","date":"2012-03-22T15:16:11.328Z","type":"message"}
{"nick":"dylukes","message":"Yes, but I would propose a change for a future stable version.","date":"2012-03-22T15:16:24.701Z","type":"message"}
{"nick":"tjfontaine","message":"dylukes: you're not exhibiting what I would consider useful contributor feedback, you're being a bit standoffish","date":"2012-03-22T15:16:43.440Z","type":"message"}
{"nick":"dylukes","message":"I'm sorry. ;__;","date":"2012-03-22T15:16:50.405Z","type":"message"}
{"nick":"dylukes","message":"But well, what I'd change is, all of the functions with a 6 variant have the 6 variant deleted, and all sockaddr_in/6 can be passed polymorphically as sockaddr * instead.","date":"2012-03-22T15:17:11.695Z","type":"message"}
{"nick":"dylukes","message":"Amusingly, this doesn't involve adding a single line of code, just deleting lines of code :P.","date":"2012-03-22T15:17:26.975Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: then there's node and all the other projects that use libuv","date":"2012-03-22T15:17:43.876Z","type":"message"}
{"nick":"creationix","message":"I'm more than willing to change mine for API changes (fwiw)","date":"2012-03-22T15:18:02.255Z","type":"message"}
{"nick":"dylukes","message":"Right ,I'm aware node requires libuv's API not to change.","date":"2012-03-22T15:18:08.947Z","type":"message"}
{"nick":"creationix","message":"less API surface to bind is a good thing","date":"2012-03-22T15:18:11.977Z","type":"message"}
{"nick":"dylukes","message":"But, this would ostensibly be for Node v.7 or v.8","date":"2012-03-22T15:18:20.368Z","type":"message"}
{"nick":"bnoordhuis","message":"we may reconsider this at some time but not now, there's more important work to do","date":"2012-03-22T15:18:32.132Z","type":"message"}
{"nick":"dylukes","message":"Well, I'm offering to contribute a patch.","date":"2012-03-22T15:18:39.696Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: libuv is being overhauled quite extensively right now","date":"2012-03-22T15:19:01.336Z","type":"message"}
{"nick":"dylukes","message":"Then it's probably a pretty good time to get it in, no?","date":"2012-03-22T15:19:15.915Z","type":"message"}
{"nick":"pfox___","message":"i eagerly await the death of uv_err_t","date":"2012-03-22T15:19:16.647Z","type":"message"}
{"nick":"perezd","date":"2012-03-22T15:19:18.572Z","type":"join"}
{"nick":"bnoordhuis","message":"dylukes: it'd probably be broken by the time you finish writing up the PR :)","date":"2012-03-22T15:19:41.437Z","type":"message"}
{"nick":"dylukes","message":"Nah, I don't think so :). ","date":"2012-03-22T15:19:56.498Z","type":"message"}
{"nick":"dylukes","message":"It only touches maybe 6 or 7 files.","date":"2012-03-22T15:20:01.583Z","type":"message"}
{"nick":"bnoordhuis","message":"come back in a couple of weeks and we'll discuss it again","date":"2012-03-22T15:20:06.163Z","type":"message"}
{"nick":"dylukes","message":"If you'd like I'll contribute a patch for node.js to to fix it there. ","date":"2012-03-22T15:20:10.591Z","type":"message"}
{"nick":"dylukes","message":"Again, expect lots of - and no +'s...","date":"2012-03-22T15:20:26.392Z","type":"message"}
{"nick":"bnoordhuis","message":"we're working towards the 0.8 release","date":"2012-03-22T15:20:47.235Z","type":"message"}
{"nick":"creationix","message":"is libuv's C API part of node's public API?","date":"2012-03-22T15:20:47.846Z","type":"message"}
{"nick":"creationix","message":"well, I guess parts are, I know addons use uv_work_t","date":"2012-03-22T15:20:58.236Z","type":"message"}
{"nick":"bnoordhuis","message":"so that patch has no chance of making it in until the first 0.8 release is done","date":"2012-03-22T15:21:07.873Z","type":"message"}
{"nick":"dylukes","message":"creationix: No... node's API for the net module only exposes one connect/bind etc.","date":"2012-03-22T15:21:08.399Z","type":"message"}
{"nick":"dylukes","message":"bnoordhuis: that's fine.","date":"2012-03-22T15:21:13.218Z","type":"message"}
{"nick":"dylukes","message":"The point is just that it's there when it's time.","date":"2012-03-22T15:21:23.622Z","type":"message"}
{"nick":"saghul","message":"fwii in pyuv I also hide the 4/6 duality, like node does","date":"2012-03-22T15:21:33.691Z","type":"message"}
{"nick":"dylukes","message":"Everything I've looked ast does.","date":"2012-03-22T15:22:11.773Z","type":"message"}
{"nick":"dylukes","message":"Even the C API libuv is built on hides the 4/6 duality!","date":"2012-03-22T15:22:20.065Z","type":"message"}
{"nick":"dylukes","message":"libuv is the only component exposing it for some reason.","date":"2012-03-22T15:22:28.726Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: i don't disagree with you","date":"2012-03-22T15:22:46.636Z","type":"message"}
{"nick":"bnoordhuis","message":"but i won't be taking patches right now","date":"2012-03-22T15:22:52.462Z","type":"message"}
{"nick":"bnoordhuis","message":"like i said, come back in a week or two","date":"2012-03-22T15:23:05.448Z","type":"message"}
{"nick":"dylukes","message":"I can just write up a patch and post it as an issue, then we can get back to it then maybe?","date":"2012-03-22T15:23:10.571Z","type":"message"}
{"nick":"bnoordhuis","message":"sure","date":"2012-03-22T15:23:14.406Z","type":"message"}
{"nick":"creationix","message":"bnoordhuis, wouldn't you want to change APIs before releasing a new ABI for node?","date":"2012-03-22T15:23:36.700Z","type":"message"}
{"nick":"dylukes","message":"Yeah, that was my thought too :P.","date":"2012-03-22T15:23:49.247Z","type":"message"}
{"nick":"bnoordhuis","message":"creationix: it would be change for 0.9, not 0.8","date":"2012-03-22T15:24:08.075Z","type":"message"}
{"nick":"bnoordhuis","message":"*a change","date":"2012-03-22T15:24:13.438Z","type":"message"}
{"nick":"creationix","message":"ok, so it's too late for 0.8 changes is what you're saying","date":"2012-03-22T15:24:19.547Z","type":"message"}
{"nick":"bnoordhuis","message":"yes","date":"2012-03-22T15:24:22.615Z","type":"message"}
{"nick":"creationix","message":"ok, that makes sense","date":"2012-03-22T15:24:26.604Z","type":"message"}
{"nick":"dylukes","message":"alright, well I'll fork and do my stuff, then put up a pull request I suppose.","date":"2012-03-22T15:24:39.735Z","type":"message"}
{"nick":"bnoordhuis","message":"cool","date":"2012-03-22T15:24:44.300Z","type":"message"}
{"nick":"creationix","message":"we got pretty burned changing APIs right before the 0.4 release, I'm glad we're learning","date":"2012-03-22T15:24:57.043Z","type":"message"}
{"nick":"dylukes","message":"So, out of curiosity, are you planning to merge/rewrite c-ares?","date":"2012-03-22T15:25:18.321Z","type":"message"}
{"nick":"piscisaureus_","message":"bnoordhuis: connect/connect6 is kind of weird imo.","date":"2012-03-22T15:25:21.134Z","type":"message"}
{"nick":"bnoordhuis","message":"piscisaureus_: yes","date":"2012-03-22T15:25:29.746Z","type":"message"}
{"nick":"dylukes","message":"that is, into a complete uv_getaddrinfo, uv_gethostbyname, uv_dns_query, etc or something?","date":"2012-03-22T15:25:30.787Z","type":"message"}
{"nick":"dylukes","message":"It's just... bad. haha.","date":"2012-03-22T15:25:38.532Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: c-ares?","date":"2012-03-22T15:25:50.137Z","type":"message"}
{"nick":"dylukes","message":"It's code duplication, unnecessary complexity in the API...","date":"2012-03-22T15:25:52.585Z","type":"message"}
{"nick":"dylukes","message":"passing structs by value...","date":"2012-03-22T15:25:57.068Z","type":"message"}
{"nick":"piscisaureus_","message":"bnoordhuis: the question is, do we want uv_tcp_init6 because that means we can get rid of deferred socket creation","date":"2012-03-22T15:25:59.642Z","type":"message"}
{"nick":"bnoordhuis","message":"piscisaureus_: we do - but not now :)","date":"2012-03-22T15:26:15.654Z","type":"message"}
{"nick":"bnoordhuis","message":"that refcount refactor is a big enough change for one major release","date":"2012-03-22T15:26:26.466Z","type":"message"}
{"nick":"creationix","message":"ohh, is there a refcount API now?","date":"2012-03-22T15:26:40.642Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: re passing structs by value: look at the assembly code","date":"2012-03-22T15:26:50.979Z","type":"message"}
{"nick":"bnoordhuis","message":"creationix: not quite, we're moving to a different model","date":"2012-03-22T15:27:05.226Z","type":"message"}
{"nick":"dylukes","message":"bnoordhuis: what do you mean?","date":"2012-03-22T15:27:07.514Z","type":"message"}
{"nick":"bnoordhuis","message":"one that hopefully fixes a lot of edge cases","date":"2012-03-22T15:27:16.958Z","type":"message"}
{"nick":"dylukes","message":"May I ask what?","date":"2012-03-22T15:27:26.273Z","type":"message"}
{"nick":"creationix","message":"nice, the refcount system has always been touchy to me","date":"2012-03-22T15:27:37.057Z","type":"message"}
{"nick":"dylukes","message":"The refcounting used in say, libdispatch or libxpc seems to work pretty well.","date":"2012-03-22T15:27:37.519Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: pass by value on x86 means the caller allocates space on the stack and passes a pointer to the callee","date":"2012-03-22T15:27:43.175Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: iow, it's just syntactic sugar for passing pointers around","date":"2012-03-22T15:27:55.256Z","type":"message"}
{"nick":"dylukes","message":"bnoordhuis: Right but... it's just an additional possible copy then. ","date":"2012-03-22T15:28:06.671Z","type":"message"}
{"nick":"dylukes","message":"The addrinfo is already allocated on the heap, and you have a pointer to it.","date":"2012-03-22T15:28:15.546Z","type":"message"}
{"nick":"creationix","message":"bnoordhuis, I will say that it makes ffi harder though","date":"2012-03-22T15:28:16.705Z","type":"message"}
{"nick":"dylukes","message":"There's no reason to copy it to the stack and pass a new pointer.","date":"2012-03-22T15:28:21.920Z","type":"message"}
{"nick":"pfox___","message":"creationix++++++++++++++++++++++++++","date":"2012-03-22T15:28:25.349Z","type":"message"}
{"nick":"kohai","message":"creationix has 5 cherry juices","date":"2012-03-22T15:28:25.545Z","type":"message"}
{"nick":"bnoordhuis","message":"cherry juice now?","date":"2012-03-22T15:28:42.958Z","type":"message"}
{"nick":"creationix","message":":)","date":"2012-03-22T15:28:46.698Z","type":"message"}
{"nick":"creationix","message":"just for me","date":"2012-03-22T15:28:48.663Z","type":"message"}
{"nick":"bnoordhuis","message":"aw, that's sweet","date":"2012-03-22T15:28:59.201Z","type":"message"}
{"nick":"creationix","message":"if it weren't for pass by value, I could write luvit entirely using luajit ffi","date":"2012-03-22T15:29:40.249Z","type":"message"}
{"nick":"bnoordhuis","message":"creationix: it's convenient when writing tests :)","date":"2012-03-22T15:29:53.809Z","type":"message"}
{"nick":"bnoordhuis","message":"but in hindsight it wasn't a well thought out design choice","date":"2012-03-22T15:30:06.420Z","type":"message"}
{"nick":"pfox___","message":"life consists of tradeoffs","date":"2012-03-22T15:30:11.525Z","type":"message"}
{"nick":"dylukes","message":"Really? How is it more convenient :\\?","date":"2012-03-22T15:30:13.793Z","type":"message"}
{"nick":"dylukes","message":"The only difference is a single *.","date":"2012-03-22T15:30:18.885Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: look at the libuv tests","date":"2012-03-22T15:30:25.561Z","type":"message"}
{"nick":"pfox___","message":"a big challenge we face, as nerds, is an insistence upon an ultimate, objective \"correctness\"","date":"2012-03-22T15:30:35.239Z","type":"message"}
{"nick":"dylukes","message":"You could just alloca and then pass the pointer from that","date":"2012-03-22T15:30:43.081Z","type":"message"}
{"nick":"bnoordhuis","message":"very true","date":"2012-03-22T15:30:45.371Z","type":"message"}
{"nick":"pfox___","message":"in conclusion: libuv is a land of contrasts","date":"2012-03-22T15:30:48.036Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: alloca is evil","date":"2012-03-22T15:30:50.364Z","type":"message"}
{"nick":"dylukes","message":"and it will be operationally identical.","date":"2012-03-22T15:30:51.601Z","type":"message"}
{"nick":"piscisaureus_","message":"alloca <-- noway","date":"2012-03-22T15:30:52.892Z","type":"message"}
{"nick":"dylukes","message":"Yes, but so is initializing structs on the stack :|","date":"2012-03-22T15:31:02.077Z","type":"message"}
{"nick":"dylukes","message":"And if you've malloc'd them, you have a pointer.","date":"2012-03-22T15:31:10.689Z","type":"message"}
{"nick":"creationix","action":"doesn't even know what alloca is and probably shouldn't find out","date":"2012-03-22T15:31:12.862Z","type":"action"}
{"nick":"dylukes","message":"creationix: dynamic stack allocation.","date":"2012-03-22T15:31:19.832Z","type":"message"}
{"nick":"dylukes","message":"it's evil.","date":"2012-03-22T15:31:22.111Z","type":"message"}
{"nick":"dylukes","message":";P","date":"2012-03-22T15:31:23.749Z","type":"message"}
{"nick":"creationix","message":"ohh, that sounds tempting","date":"2012-03-22T15:31:35.127Z","type":"message"}
{"nick":"creationix","message":":P","date":"2012-03-22T15:31:39.785Z","type":"message"}
{"nick":"dylukes","message":"bnoordhuis: I'm not seeing how it makes the tests simpler...","date":"2012-03-22T15:32:07.275Z","type":"message"}
{"nick":"tjfontaine","message":"until you're on micro threads and imagemagick allocas 10MB","date":"2012-03-22T15:32:08.127Z","type":"message"}
{"nick":"dylukes","message":":P","date":"2012-03-22T15:32:39.007Z","type":"message"}
{"nick":"dylukes","message":"So...","date":"2012-03-22T15:35:58.134Z","type":"message"}
{"nick":"dylukes","message":"apart from API inertia, is there any motion against this patch?","date":"2012-03-22T15:36:06.959Z","type":"message"}
{"nick":"tjfontaine","message":"I think the motion is mostly for the patch, just not in the short term","date":"2012-03-22T15:37:12.256Z","type":"message"}
{"nick":"creationix","message":"is the roadmap for post 0.8 full already","date":"2012-03-22T15:37:39.888Z","type":"message"}
{"nick":"creationix","message":"or is it pretty open still?","date":"2012-03-22T15:37:43.736Z","type":"message"}
{"nick":"creationix","message":"I think merging the *4/*6 functions and not using pass-by-value would be valuable API improvements for then","date":"2012-03-22T15:38:25.586Z","type":"message"}
{"nick":"dylukes","message":"I can probably have the changes done today.","date":"2012-03-22T15:38:46.790Z","type":"message"}
{"nick":"creationix","message":"it would at least make using libuv easier for me","date":"2012-03-22T15:39:14.737Z","type":"message"}
{"nick":"dylukes","message":"indeed.","date":"2012-03-22T15:41:46.751Z","type":"message"}
{"nick":"bnoordhuis","message":"creationix: post 0.8 - the main thing we want to get rid of is deferred creation of sockets","date":"2012-03-22T15:41:56.941Z","type":"message"}
{"nick":"bnoordhuis","message":"i.e. uv_tcp_init() will create the socket right there and then","date":"2012-03-22T15:42:08.914Z","type":"message"}
{"nick":"creationix","message":"does that change the API?","date":"2012-03-22T15:42:11.566Z","type":"message"}
{"nick":"bnoordhuis","message":"yes","date":"2012-03-22T15:42:16.116Z","type":"message"}
{"nick":"creationix","message":"sounds neat","date":"2012-03-22T15:42:31.724Z","type":"message"}
{"nick":"bnoordhuis","message":"oh, and i might be phasing out libev altogether on linux","date":"2012-03-22T15:42:47.590Z","type":"message"}
{"nick":"bnoordhuis","message":"but that's still TBD","date":"2012-03-22T15:42:53.925Z","type":"message"}
{"nick":"tjfontaine","message":"I had a feeling that would be coming","date":"2012-03-22T15:43:01.576Z","type":"message"}
{"nick":"creationix","message":"so just use the linux API directly then?","date":"2012-03-22T15:43:05.168Z","type":"message"}
{"nick":"bnoordhuis","message":"yes","date":"2012-03-22T15:43:08.586Z","type":"message"}
{"nick":"dylukes","message":"bnoordhuis: I wonder if you could build on libdispatch on OS X.","date":"2012-03-22T15:43:12.491Z","type":"message"}
{"nick":"dylukes","message":"Considering it's got some pretty hefty low level platform specific optimizations...","date":"2012-03-22T15:43:23.944Z","type":"message"}
{"nick":"bnoordhuis","message":"dylukes: i don't know it well enough","date":"2012-03-22T15:43:24.145Z","type":"message"}
{"nick":"creationix","message":"sounds like a lot of work, but potentially very good","date":"2012-03-22T15:43:24.918Z","type":"message"}
{"nick":"dylukes","message":"mm, it's a bit different than libev. but it's actually a pretty easy API.","date":"2012-03-22T15:43:39.360Z","type":"message"}
{"nick":"dylukes","message":"All of the object's in it are refcounter, and follow almost the same style as libuv too.","date":"2012-03-22T15:43:52.005Z","type":"message"}
{"nick":"tjfontaine","message":"I thought libdispatch was the backend of GCD","date":"2012-03-22T15:43:57.302Z","type":"message"}
{"nick":"dylukes","message":"It is.","date":"2012-03-22T15:44:02.732Z","type":"message"}
{"nick":"dylukes","message":"I mean, it's synonymous really.","date":"2012-03-22T15:44:08.436Z","type":"message"}
{"nick":"dylukes","message":"The only difference is it uses _t for the opaque pointer types, and _s for the structures.","date":"2012-03-22T15:44:14.194Z","type":"message"}
{"nick":"dylukes","message":"To pull off some transparent union polymorphism.","date":"2012-03-22T15:44:24.206Z","type":"message"}
{"nick":"dylukes","message":"Which is a nice trick.","date":"2012-03-22T15:44:32.102Z","type":"message"}
{"nick":"dylukes","message":"It's basically a (more) typesafe version of what you guys do with matching structs.","date":"2012-03-22T15:44:47.914Z","type":"message"}
{"nick":"creationix","message":"dylukes, C or C++ or objC?","date":"2012-03-22T15:45:08.183Z","type":"message"}
{"nick":"dylukes","message":"C.","date":"2012-03-22T15:45:21.827Z","type":"message"}
{"nick":"creationix","message":"neat","date":"2012-03-22T15:45:25.695Z","type":"message"}
{"nick":"dap","date":"2012-03-22T15:45:40.197Z","type":"join"}
{"nick":"tjfontaine","message":"but you need llvm-gcc or clang because it uses blocks, which more than likely is what the toolchain is atm anyway","date":"2012-03-22T15:45:43.787Z","type":"message"}
{"nick":"dylukes","message":"You actually don't need blocks.","date":"2012-03-22T15:45:55.173Z","type":"message"}
{"nick":"dylukes","message":"It can be compiled without blocks enabled.","date":"2012-03-22T15:46:06.077Z","type":"message"}
{"nick":"dylukes","message":"It actually has facilities for async io (pretty hefty too, even has low/high water marks, block size, etc),","date":"2012-03-22T15:46:29.170Z","type":"message"}
{"nick":"dylukes","message":"and for sparse mutable buffers, etc.","date":"2012-03-22T15:46:38.263Z","type":"message"}
{"nick":"dylukes","message":"It's kind of for the same thing as libuv.","date":"2012-03-22T15:46:47.768Z","type":"message"}
{"nick":"dylukes","message":"Really, it's fast because it has kernel support from xnu... >_>","date":"2012-03-22T15:47:35.336Z","type":"message"}
{"nick":"creationix","message":"any C experts in here want to help me with double pointers?","date":"2012-03-22T15:48:58.596Z","type":"message"}
{"nick":"bnoordhuis","message":"creationix: shoot","date":"2012-03-22T15:49:45.449Z","type":"message"}
{"nick":"creationix","message":"since candor moves my CData around when it GC's I can't store uv structs directly in there, but I can store a pointer to one and malloc it myself","date":"2012-03-22T15:49:46.636Z","type":"message"}
{"nick":"dylukes","message":"candor?","date":"2012-03-22T15:50:26.764Z","type":"message"}
{"nick":"creationix","message":"so I have a candor function that basically does malloc(sizeof(uv_timer_t*)) and gives me the void*","date":"2012-03-22T15:50:31.799Z","type":"message"}
{"nick":"creationix","message":"how do I convert that to a uv_timer_t* and malloc the actual struct myself","date":"2012-03-22T15:50:46.278Z","type":"message"}
{"nick":"dylukes","message":"That'd give you (tecnically) a uv_timer_t **","date":"2012-03-22T15:50:56.453Z","type":"message"}
{"nick":"dylukes","message":"You can then do","date":"2012-03-22T15:51:05.942Z","type":"message"}
{"nick":"creationix","message":"dylukes, https://github.com/creationix/candor.io","date":"2012-03-22T15:51:10.469Z","type":"message"}
{"nick":"dylukes","message":"*that = malloc(sizeof(uv_timer_t))","date":"2012-03-22T15:51:17.041Z","type":"message"}
{"nick":"dylukes","message":"Follow the types, young padawan.","date":"2012-03-22T15:51:25.960Z","type":"message"}
{"nick":"dylukes","message":"uv_timer_t **pp = malloc(sizeof(uv_timer_t*));","date":"2012-03-22T15:52:02.761Z","type":"message"}
{"nick":"dylukes","message":"*pp = malloc(sizeof(uv_timer_t));","date":"2012-03-22T15:52:21.555Z","type":"message"}
{"nick":"dylukes","message":"Make sense?","date":"2012-03-22T15:52:38.296Z","type":"message"}
{"nick":"creationix","message":"right, then `uv_timer_t *p = *pp`","date":"2012-03-22T15:52:51.888Z","type":"message"}
{"nick":"dylukes","message":"Yes. Bingo.","date":"2012-03-22T15:52:58.545Z","type":"message"}
{"nick":"creationix","message":"do I have to create the **pp variable","date":"2012-03-22T15:53:11.917Z","type":"message"}
{"nick":"dylukes","message":"but, remember this might cause you trouble because you have to deallocate both of them...","date":"2012-03-22T15:53:17.364Z","type":"message"}
{"nick":"creationix","message":"or can I use an expression on the lhs","date":"2012-03-22T15:53:19.058Z","type":"message"}
{"nick":"dylukes","message":"You can't put a malloc on the lhs :P.","date":"2012-03-22T15:53:44.249Z","type":"message"}
{"nick":"creationix","message":"well, the uv_timer_t** is managed by the vm, it will free it for me when it get's GCed","date":"2012-03-22T15:53:49.969Z","type":"message"}
{"nick":"dylukes","message":"And it would be messy and unclear if you could.","date":"2012-03-22T15:53:52.332Z","type":"message"}
{"nick":"creationix","message":"and I can register a callback to be told when that's about to happen","date":"2012-03-22T15:54:01.130Z","type":"message"}
{"nick":"creationix","message":"to free my uv_timer)t*","date":"2012-03-22T15:54:06.950Z","type":"message"}
{"nick":"dylukes","message":"It sounds like you're running a high risk of leaking :P.","date":"2012-03-22T15:54:19.726Z","type":"message"}
{"nick":"creationix","message":"well, those are the constraints of the vm","date":"2012-03-22T15:54:35.085Z","type":"message"}
{"nick":"dylukes","message":"pp -> p -> timer right?","date":"2012-03-22T15:54:37.841Z","type":"message"}
{"nick":"creationix","message":"it moves the memory it manages so I can only store pointers in there","date":"2012-03-22T15:54:50.604Z","type":"message"}
{"nick":"dylukes","message":"pp is just a pointer on the stack","date":"2012-03-22T15:54:51.720Z","type":"message"}
{"nick":"dylukes","message":"p is a pointer under GC","date":"2012-03-22T15:54:56.988Z","type":"message"}
{"nick":"dylukes","message":"timer is a uv_timer_t under manual memory","date":"2012-03-22T15:55:05.981Z","type":"message"}
{"nick":"creationix","message":"dylukes, right","date":"2012-03-22T15:55:11.094Z","type":"message"}
{"nick":"dylukes","message":"so the GC will free p, timer will be freed in your callback, yes?","date":"2012-03-22T15:55:17.361Z","type":"message"}
{"nick":"dylukes","message":"Why not put the uv_timer_t under GC then?","date":"2012-03-22T15:55:25.979Z","type":"message"}
{"nick":"creationix","message":"right","date":"2012-03-22T15:55:26.377Z","type":"message"}
{"nick":"creationix","message":"because it moves","date":"2012-03-22T15:55:31.897Z","type":"message"}
{"nick":"dylukes","message":"Most GC schemes allow you to supply the deleter.","date":"2012-03-22T15:55:34.060Z","type":"message"}
{"nick":"creationix","message":"and libuv doesn't like that","date":"2012-03-22T15:55:36.220Z","type":"message"}
{"nick":"dylukes","message":"It moves?","date":"2012-03-22T15:55:40.589Z","type":"message"}
{"nick":"creationix","message":"yep","date":"2012-03-22T15:55:50.308Z","type":"message"}
{"nick":"creationix","message":"https://github.com/indutny/candor/issues/13","date":"2012-03-22T15:56:03.997Z","type":"message"}
{"nick":"dylukes","message":"I see.","date":"2012-03-22T15:56:29.772Z","type":"message"}
{"nick":"creationix","message":"it doesn't move when I do the same thing in lua","date":"2012-03-22T15:57:12.629Z","type":"message"}
{"nick":"creationix","message":"so I'm not sure how they preserve it","date":"2012-03-22T15:57:25.637Z","type":"message"}
{"nick":"creationix","message":"maybe they allocate the managed memory outside the vm heap","date":"2012-03-22T15:57:39.558Z","type":"message"}
{"nick":"creationix","message":"not sure","date":"2012-03-22T15:57:40.844Z","type":"message"}
{"nick":"mmalecki[zzz]","new_nick":"mmalecki","date":"2012-03-22T15:58:18.536Z","type":"nick"}
{"nick":"dylukes","message":"okay... so it seems on windows there's some slight differences between the 4/6 routines.","date":"2012-03-22T15:58:38.659Z","type":"message"}
{"nick":"dylukes","message":"But nothing major.","date":"2012-03-22T15:58:42.349Z","type":"message"}
{"nick":"creationix","message":"if anyone has any ideas of how indutny can fix this for me in the vm without causing undue constraints on the vm, I'm all ears","date":"2012-03-22T15:58:50.276Z","type":"message"}
{"nick":"creationix","message":"otherwise I need to use double pointers and register weak callbacks myself","date":"2012-03-22T15:59:13.534Z","type":"message"}
{"nick":"creationix","message":"(I'm already using double pointers to get the CData*)","date":"2012-03-22T15:59:38.363Z","type":"message"}
