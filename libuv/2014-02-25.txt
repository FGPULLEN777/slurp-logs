{"nick":"ircretary","reason":"Remote host closed the connection","date":"2014-02-25T00:00:00.371Z","type":"quit"}
{"nick":"ircretary","date":"2014-02-25T00:00:08.818Z","type":"join"}
{"nick":"austo","reason":"Quit: austo","date":"2014-02-25T00:01:40.050Z","type":"quit"}
{"nick":"trevnorris","message":"groundwater: anyways. that's about it. follow that? I'm updating the docs w/ more examples","date":"2014-02-25T00:01:57.333Z","type":"message"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2014-02-25T00:02:16.674Z","type":"quit"}
{"nick":"AlexisMocha","message":"tjfontaine: so between the .CRT$XCU issue and stderr sync you are saying that .CRT$XCU is higher priority? I was hoping to get to a vanity 0 failures result for the result, but I guess that's not going to be the case :(","date":"2014-02-25T00:03:20.714Z","type":"message"}
{"nick":"euoia","reason":"Ping timeout: 264 seconds","date":"2014-02-25T00:03:50.700Z","type":"quit"}
{"nick":"tjfontaine","message":"erm","date":"2014-02-25T00:03:55.421Z","type":"message"}
{"nick":"tjfontaine","message":"AlexisMocha: so, I've disabled the gc tests so we shouldn't see them for now, the .CRT$XCU issue is higher priority because at least some binary modules will compile but not run (though it's unclear why) and the stderr sync issue is relatively understood and potentially may require more effort and concept changes than we might get in for 0.12 (that being said, I'm ok with an explicit skip in stderr test)","date":"2014-02-25T00:06:27.932Z","type":"message"}
{"nick":"johannish_","date":"2014-02-25T00:06:49.745Z","type":"join"}
{"nick":"mikolalysenko","date":"2014-02-25T00:06:58.163Z","type":"join"}
{"nick":"johannish","date":"2014-02-25T00:07:07.749Z","type":"join"}
{"nick":"johannish_","reason":"Client Quit","date":"2014-02-25T00:07:11.510Z","type":"quit"}
{"nick":"rmg","date":"2014-02-25T00:08:04.062Z","type":"join"}
{"nick":"andrewrk","reason":"Quit: Leaving","date":"2014-02-25T00:11:27.941Z","type":"quit"}
{"nick":"johannish","date":"2014-02-25T00:11:44.001Z","type":"part"}
{"nick":"toothr","new_nick":"toothrot","date":"2014-02-25T00:12:00.647Z","type":"nick"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-02-25T00:14:20.605Z","type":"quit"}
{"nick":"m76","reason":"Read error: Connection reset by peer","date":"2014-02-25T00:15:24.272Z","type":"quit"}
{"nick":"groundwater","message":"trevnorris so, i can subscribe to a subset of async events right?","date":"2014-02-25T00:18:14.158Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: yes.","date":"2014-02-25T00:18:23.156Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: where this differs from probes is that the call stack will still be preserved in the background for the entire async chain","date":"2014-02-25T00:18:48.690Z","type":"message"}
{"nick":"kevinsimper","date":"2014-02-25T00:19:10.244Z","type":"join"}
{"nick":"trevnorris","message":"groundwater: but the callbacks will only be called for the providers (i.e. subset of async events) that you specified","date":"2014-02-25T00:19:13.598Z","type":"message"}
{"nick":"Kakera","reason":"Ping timeout: 240 seconds","date":"2014-02-25T00:19:29.193Z","type":"quit"}
{"nick":"groundwater","message":"trevnorris so if i only subscribe to PIPE for example, but the callback chain traverses a TCP event, the continuatino won't be lost?","date":"2014-02-25T00:19:36.403Z","type":"message"}
{"nick":"paulfryzel","reason":"Remote host closed the connection","date":"2014-02-25T00:21:03.177Z","type":"quit"}
{"nick":"trevnorris","message":"groundwater: nope. so say addAL(PIPE, ...); net.createServer(8080, fn() { net.createServer('/some/path', fn() { setTimeout(fn() { net.createServer('/other/path', ...","date":"2014-02-25T00:21:11.039Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: the callbacks will still be called for every PIPE event in that chain.","date":"2014-02-25T00:21:26.602Z","type":"message"}
{"nick":"tjfontaine","message":"groundwater: are you asking if tcp shows up in a transaction like: pipe.on('connect', function() { net.connect(, function() { pipe.write() }) }), even though you weren't looking for the TCP create?","date":"2014-02-25T00:22:05.359Z","type":"message"}
{"nick":"rmg","date":"2014-02-25T00:23:27.491Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-02-25T00:23:41.961Z","type":"quit"}
{"nick":"groundwater","message":"hmm... i think i confused myself","date":"2014-02-25T00:24:18.484Z","type":"message"}
{"nick":"tjfontaine","message":"to the code example!","date":"2014-02-25T00:24:30.235Z","type":"message"}
{"nick":"groundwater","message":"no, i get it now","date":"2014-02-25T00:24:34.735Z","type":"message"}
{"nick":"groundwater","message":"so, from a tracing perspective, i don't see why i'd ever subscribe to a subset of events","date":"2014-02-25T00:24:55.927Z","type":"message"}
{"nick":"groundwater","message":"not to say that nobody would","date":"2014-02-25T00:25:10.912Z","type":"message"}
{"nick":"groundwater","message":"also my coffee is not strong enough, so you may be dealing with sleepy-jacob","date":"2014-02-25T00:25:32.651Z","type":"message"}
{"nick":"mikeal","date":"2014-02-25T00:26:58.768Z","type":"join"}
{"nick":"tjfontaine","message":"man, pummel tests work as described.","date":"2014-02-25T00:31:30.192Z","type":"message"}
{"nick":"zz_karupanerura","new_nick":"karupanerura","date":"2014-02-25T00:32:30.998Z","type":"nick"}
{"nick":"tjfontaine","message":"well here's a useless test now ...","date":"2014-02-25T00:32:48.740Z","type":"message"}
{"nick":"tjfontaine","message":"https://github.com/joyent/node/blob/master/test/pummel/test-next-tick-loops-quick.js","date":"2014-02-25T00:33:10.083Z","type":"message"}
{"nick":"trevnorris","message":"hahaha","date":"2014-02-25T00:33:39.392Z","type":"message"}
{"nick":"trevnorris","message":"yeah","date":"2014-02-25T00:33:40.214Z","type":"message"}
{"nick":"euoia","date":"2014-02-25T00:52:05.160Z","type":"join"}
{"nick":"AvianFlu","reason":"Ping timeout: 240 seconds","date":"2014-02-25T00:53:12.799Z","type":"quit"}
{"nick":"mmalecki","message":"gah, what sane build system puts a static library in .libs/libuv.a by default?","date":"2014-02-25T00:54:05.700Z","type":"message"}
{"nick":"kazupon","date":"2014-02-25T00:54:12.839Z","type":"join"}
{"nick":"tjfontaine","message":"heh, good ol autohell","date":"2014-02-25T00:54:38.585Z","type":"message"}
{"nick":"mmalecki","message":"could we perhaps use AC_CONFIG_LINKS to link/copy them to libuv.a in the root?","date":"2014-02-25T00:55:24.353Z","type":"message"}
{"nick":"tjfontaine","message":"probably, PRs are reviewed :)","date":"2014-02-25T00:56:56.860Z","type":"message"}
{"nick":"tjfontaine","message":"I thought it had a versioned one in the root though?","date":"2014-02-25T00:57:05.340Z","type":"message"}
{"nick":"mmalecki","message":"nope","date":"2014-02-25T00:58:50.902Z","type":"message"}
{"nick":"mmalecki","message":"it's .gitignore'd","date":"2014-02-25T00:58:54.722Z","type":"message"}
{"nick":"tjfontaine","message":"right, I think it's expecting you to use .la by default in other dependent apps ;)","date":"2014-02-25T00:59:08.758Z","type":"message"}
{"nick":"tjfontaine","message":"mmalecki: to be fair, it's expecting you to `make install`","date":"2014-02-25T01:00:44.741Z","type":"message"}
{"nick":"mmalecki","message":"tjfontaine: I don't want `make install`. I use libuv as a dependedncy in a project","date":"2014-02-25T01:01:05.538Z","type":"message"}
{"nick":"mmalecki","message":"so I just want to link it statically","date":"2014-02-25T01:01:15.033Z","type":"message"}
{"nick":"tjfontaine","message":"right so generally you use \".la\" and it expects your parent project to be managed by autohell","date":"2014-02-25T01:01:28.661Z","type":"message"}
{"nick":"mmalecki","message":"and previously with `make` being libuv's build system, I could just run `make -C` and have it output libuv.a","date":"2014-02-25T01:01:48.992Z","type":"message"}
{"nick":"tjfontaine","message":"in 0.10 we have non-autoconf, in 0.11 it's autoconf","date":"2014-02-25T01:02:08.657Z","type":"message"}
{"nick":"tjfontaine","message":"in both you have gyp","date":"2014-02-25T01:02:12.090Z","type":"message"}
{"nick":"groundwater","message":"trevnorris can't say i'm crazy about having an optional argument at the beginning of the add/create calls","date":"2014-02-25T01:02:17.784Z","type":"message"}
{"nick":"mmalecki","message":"right, but my projects are way too small for gyp/autohell to be useful","date":"2014-02-25T01:02:32.697Z","type":"message"}
{"nick":"tjfontaine","message":"nod","date":"2014-02-25T01:02:46.853Z","type":"message"}
{"nick":"groundwater","message":"trevnorris i hope this is the type of feedback you're looking for, i'm just pointing out potential pain points","date":"2014-02-25T01:02:57.438Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: i can understand that . does make the API look strange.","date":"2014-02-25T01:03:05.879Z","type":"message"}
{"nick":"trevnorris","message":"and yeah. that's the type of feedback i'm looking for. :)","date":"2014-02-25T01:03:14.235Z","type":"message"}
{"nick":"trevnorris","message":"the problem is that the userData argument is a Value (i.e. anything) so there's no way to type distinguish between the two. so it'd require an {create,add}AL(callbacks[, userData[, providers]]); API otherwise","date":"2014-02-25T01:04:29.345Z","type":"message"}
{"nick":"trevnorris","message":"and you'd have to pass null as the userData if you wanted access to the proviers","date":"2014-02-25T01:04:53.332Z","type":"message"}
{"nick":"groundwater","message":"trevnorris right now i'm thinking about this from the perspective of someone new, someone who doesn't have the history we have, and am trying to think about path of least resistance","date":"2014-02-25T01:06:41.665Z","type":"message"}
{"nick":"groundwater","message":"ALs are pretty heavy, and i'm thinking about ways to make the JS api easier to digest","date":"2014-02-25T01:07:13.880Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: yeah. that's a good perspective to take. the API isn't solidified yet, so go ahead and shoot out ideas. :)","date":"2014-02-25T01:07:24.549Z","type":"message"}
{"nick":"trevnorris","message":"hehe. is there an \"easy\" way?","date":"2014-02-25T01:07:34.579Z","type":"message"}
{"nick":"groundwater","message":"trevnorris i'm also not thinking about it from the perspective of \"keeping it in sync\" with the NR async-listener","date":"2014-02-25T01:08:56.290Z","type":"message"}
{"nick":"groundwater","message":"what we have works, and we can always keep using that","date":"2014-02-25T01:09:01.780Z","type":"message"}
{"nick":"groundwater","message":"what you're working on will hopefully be what node *needs*","date":"2014-02-25T01:09:19.188Z","type":"message"}
{"nick":"trevnorris","message":"yeah","date":"2014-02-25T01:09:28.208Z","type":"message"}
{"nick":"groundwater","message":"which ultimiately will probably be what we need too","date":"2014-02-25T01:09:29.681Z","type":"message"}
{"nick":"groundwater","message":"conceptually, i think the 'probe' model that TJ is talking about is easy to understand, but it might be less useful out of the box","date":"2014-02-25T01:10:12.279Z","type":"message"}
{"nick":"groundwater","message":"i think the add/create async listener might be easiest to explain as \"it's a useful wrapper around sets of probes\" even if it's not directly implemented that way","date":"2014-02-25T01:10:40.668Z","type":"message"}
{"nick":"trevnorris","message":"yeah. that's a simpler way of looking at it. problem is that \"probes\" have an on/off switch. where AL doesn't","date":"2014-02-25T01:11:24.388Z","type":"message"}
{"nick":"groundwater","message":"trevnorris that's okay, anyone who wants more granularity can dive into the world of probes","date":"2014-02-25T01:11:42.042Z","type":"message"}
{"nick":"groundwater","message":"this is more like \"if you wanna dive in with 'sane defaults' you should use ALs\"","date":"2014-02-25T01:12:06.858Z","type":"message"}
{"nick":"groundwater","message":"it's a loaded gun, but with the safety switch on","date":"2014-02-25T01:12:19.217Z","type":"message"}
{"nick":"trevnorris","message":"hehe, funny thing is I always thought of them the other way around. AL allows some ridiculous context manipulation. and many more ways to abuse it. :P","date":"2014-02-25T01:12:54.566Z","type":"message"}
{"nick":"rossk","date":"2014-02-25T01:14:49.578Z","type":"quit"}
{"nick":"calvinfo1","reason":"Quit: Leaving.","date":"2014-02-25T01:14:55.218Z","type":"quit"}
{"nick":"calvinfo","date":"2014-02-25T01:15:11.672Z","type":"join"}
{"nick":"groundwater","message":"trevnorris they're both a loaded gun","date":"2014-02-25T01:18:36.168Z","type":"message"}
{"nick":"groundwater","message":"one is loaded with bees, the other is loaded with a grenade ","date":"2014-02-25T01:18:49.080Z","type":"message"}
{"nick":"trevnorris","message":"heh","date":"2014-02-25T01:18:52.462Z","type":"message"}
{"nick":"groundwater","message":"maybe substack can draw that illustration","date":"2014-02-25T01:19:12.754Z","type":"message"}
{"nick":"trevnorris","message":"ok. well I've gotta run. keep shooting stuff out as you see it. and i'll catch up w/ the logs later.","date":"2014-02-25T01:19:18.564Z","type":"message"}
{"nick":"trevnorris","message":"hahaha","date":"2014-02-25T01:19:19.608Z","type":"message"}
{"nick":"trevnorris","action":"&","date":"2014-02-25T01:19:23.440Z","type":"action"}
{"nick":"LOUDBOT_","message":"OMG CAELUM HAD SURPRISE UNPROTECTED BUTTSEX","date":"2014-02-25T01:19:23.840Z","type":"message"}
{"nick":"trevnorris","message":"....","date":"2014-02-25T01:19:29.720Z","type":"message"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2014-02-25T01:23:32.982Z","type":"quit"}
{"nick":"paulfryzel","date":"2014-02-25T01:23:59.796Z","type":"join"}
{"nick":"paulfryzel","reason":"Ping timeout: 272 seconds","date":"2014-02-25T01:28:27.684Z","type":"quit"}
{"nick":"tjfontaine","message":"trevnorris, groundwater: \"useful out of the box\" is of course where node finds itself in trouble","date":"2014-02-25T01:38:50.372Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris, groundwater: what we need to aim for is \"useful abstraction that lets users build what we don't want to maintain\"","date":"2014-02-25T01:39:09.886Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris, groundwater: a good way to look at it is if this meets the goals of the users who were asking for it, and if not if that requires more complexity, can we constrict on what's in core and let the rest be exposed in a user module","date":"2014-02-25T01:40:03.205Z","type":"message"}
{"nick":"thlorenz","date":"2014-02-25T01:40:39.125Z","type":"join"}
{"nick":"tjfontaine","message":"from the tracing probe mechanism we're not prescribing how these are to be used, but taking an existing interface that's already known and understood, and extending it with a consumable js api that matches our existing EE pattern","date":"2014-02-25T01:41:14.676Z","type":"message"}
{"nick":"tjfontaine","message":"so it's less of a knee jerk reaction when people see it","date":"2014-02-25T01:41:48.778Z","type":"message"}
{"nick":"mmalecki","message":"hmm, I'm getting a pretty mysterious seg fault with uv_queue_work","date":"2014-02-25T01:43:33.541Z","type":"message"}
{"nick":"tjfontaine","message":"mmalecki: are you calling it from the main event loop thread?","date":"2014-02-25T01:45:00.501Z","type":"message"}
{"nick":"mmalecki","message":"yup, I am","date":"2014-02-25T01:46:07.294Z","type":"message"}
{"nick":"mmalecki","message":"let me share some details","date":"2014-02-25T01:46:10.577Z","type":"message"}
{"nick":"mmalecki","message":"code is here: https://github.com/mmalecki/uv_netmap/tree/debug","date":"2014-02-25T01:46:22.934Z","type":"message"}
{"nick":"mmalecki","message":"I was just getting started, this is really minimal","date":"2014-02-25T01:46:31.954Z","type":"message"}
{"nick":"tjfontaine","message":"work_t is going out of scope","date":"2014-02-25T01:46:48.417Z","type":"message"}
{"nick":"tjfontaine","message":"*work_req","date":"2014-02-25T01:47:00.630Z","type":"message"}
{"nick":"tjfontaine","message":"it needs to be malloc'd or static to the translation unit","date":"2014-02-25T01:47:37.307Z","type":"message"}
{"nick":"mmalecki","message":"ohhh","date":"2014-02-25T01:47:49.620Z","type":"message"}
{"nick":"mmalecki","message":"hmm, so I need to fix uv book examples :)","date":"2014-02-25T01:48:13.174Z","type":"message"}
{"nick":"mmalecki","message":"thanks tjfontaine ","date":"2014-02-25T01:48:17.134Z","type":"message"}
{"nick":"tjfontaine","message":"yw","date":"2014-02-25T01:48:22.823Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u000278a854f\u0002 : test: move pummel/test-fs-largefile to disabled (+3 more commits) - http://git.io/htHekQ","date":"2014-02-25T01:49:22.101Z","type":"message"}
{"nick":"ik_","date":"2014-02-25T01:54:14.717Z","type":"join"}
{"nick":"ik_","reason":"Client Quit","date":"2014-02-25T01:54:14.835Z","type":"quit"}
{"nick":"AWinterman","reason":"Ping timeout: 264 seconds","date":"2014-02-25T02:02:38.696Z","type":"quit"}
{"nick":"calvinfo1","date":"2014-02-25T02:02:57.029Z","type":"join"}
{"nick":"calvinfo","reason":"Ping timeout: 244 seconds","date":"2014-02-25T02:05:15.776Z","type":"quit"}
{"nick":"groundwater","message":"tjfontaine perhaps you can answer this, can {create/add}AsyncListener be implemented completely on top of tracing probes?","date":"2014-02-25T02:05:42.637Z","type":"message"}
{"nick":"tjfontaine","message":"groundwater: I guess that depends on what you mean by tracing probes","date":"2014-02-25T02:06:05.181Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-02-25T02:06:25.972Z","type":"quit"}
{"nick":"tjfontaine","message":"so keep in mind, that the static probes actually have the ability to \"fix\" the scenario of the disconnect between createServer vs listen","date":"2014-02-25T02:06:46.068Z","type":"message"}
{"nick":"rmg","reason":"Read error: Connection reset by peer","date":"2014-02-25T02:06:46.324Z","type":"quit"}
{"nick":"rmg","date":"2014-02-25T02:07:01.046Z","type":"join"}
{"nick":"groundwater","message":"tjfontaine right, well ALs suffer from that problem as well","date":"2014-02-25T02:07:01.422Z","type":"message"}
{"nick":"tjfontaine","message":"no I mean, this can fix that problem, because I can put the probe exactly in the constructor of Server","date":"2014-02-25T02:07:19.067Z","type":"message"}
{"nick":"groundwater","message":"we typically patch EEs, or bind callbacks in order to recover from that problem","date":"2014-02-25T02:07:21.166Z","type":"message"}
{"nick":"groundwater","message":"right!","date":"2014-02-25T02:07:31.496Z","type":"message"}
{"nick":"tjfontaine","message":"AL gives you the information about when the actual binding time happens","date":"2014-02-25T02:07:50.323Z","type":"message"}
{"nick":"tjfontaine","message":"which can also be very important, but the static probes are far more surgical","date":"2014-02-25T02:08:05.059Z","type":"message"}
{"nick":"groundwater","message":"tjfontaine are you still doing the onAsync(...) probe idea?","date":"2014-02-25T02:08:11.186Z","type":"message"}
{"nick":"groundwater","message":"sorry that's waht i was commenting on","date":"2014-02-25T02:08:17.485Z","type":"message"}
{"nick":"tjfontaine","message":"so, really (I think) what we want is a combination of static probes and a trimmed down AL","date":"2014-02-25T02:09:06.360Z","type":"message"}
{"nick":"groundwater","message":"tjfontaine yes, sounds reasonable","date":"2014-02-25T02:09:33.346Z","type":"message"}
{"nick":"groundwater","message":"from a user perspective, ALs could just be probes","date":"2014-02-25T02:09:54.904Z","type":"message"}
{"nick":"tjfontaine","message":"technically we can iteratively add static probes through patch releases","date":"2014-02-25T02:09:55.991Z","type":"message"}
{"nick":"tjfontaine","message":"the information gleaned from AW is very important though, and is the only sane way to capture that data","date":"2014-02-25T02:10:52.535Z","type":"message"}
{"nick":"tjfontaine","message":"I hadn't pursued onAsync because it feels somewhat wrong to expose *both* addAL and that","date":"2014-02-25T02:11:48.509Z","type":"message"}
{"nick":"groundwater","message":"tjfontaine right, i get it now","date":"2014-02-25T02:12:32.300Z","type":"message"}
{"nick":"groundwater","message":"sorry had been out of sync","date":"2014-02-25T02:12:40.541Z","type":"message"}
{"nick":"tjfontaine","message":"also, because there are two schools of thought on how to consume this data, clearly something like what we have in AL and something along the lines of my onAsync idea, it makes me wonder what the minimum common feature set between the two needs to be exposed such that we can vet both ideas external to the core","date":"2014-02-25T02:15:06.016Z","type":"message"}
{"nick":"groundwater","message":"tjfontaine yes, i like that","date":"2014-02-25T02:16:30.525Z","type":"message"}
{"nick":"groundwater","message":"i think othiym23 brought up a very good point","date":"2014-02-25T02:16:46.477Z","type":"message"}
{"nick":"groundwater","message":"without passing an object through from create to before/after, we have a GC problem","date":"2014-02-25T02:17:01.814Z","type":"message"}
{"nick":"groundwater","message":"seems to me that is part of the 'minimal set'","date":"2014-02-25T02:17:18.694Z","type":"message"}
{"nick":"tjfontaine","message":"can you expand upon that further?","date":"2014-02-25T02:17:26.200Z","type":"message"}
{"nick":"groundwater","message":"if we tracked async events by 'id'","date":"2014-02-25T02:18:16.039Z","type":"message"}
{"nick":"groundwater","message":"and stored associated objects in a global hash, indexed by the id","date":"2014-02-25T02:18:26.892Z","type":"message"}
{"nick":"groundwater","message":"we don't know when we can GC the item stored in the hash","date":"2014-02-25T02:18:41.445Z","type":"message"}
{"nick":"loladiro","reason":"Quit: loladiro","date":"2014-02-25T02:18:54.951Z","type":"quit"}
{"nick":"tjfontaine","message":"not without a stable notification of delete ","date":"2014-02-25T02:18:59.249Z","type":"message"}
{"nick":"tjfontaine","message":"fwiw, if we were to use a uuid for the handle, passing that back out on destructor is reasonably achievable -- as opposed to giving you back the real object to delete","date":"2014-02-25T02:19:36.138Z","type":"message"}
{"nick":"groundwater","message":"tjfontaine so thinking back, i think firing the probe with the handle as one of the arguments can side-step the requirement for having an 'id'","date":"2014-02-25T02:19:42.741Z","type":"message"}
{"nick":"groundwater","message":"that's kind of what we're doing, but not exposing","date":"2014-02-25T02:20:09.336Z","type":"message"}
{"nick":"tjfontaine","message":"what I'm also somewhat worried about is just how much persistent state this pushes into core, such that we may uninentionally start holding on to things logner than necessary","date":"2014-02-25T02:20:12.014Z","type":"message"}
{"nick":"tjfontaine","message":"groundwater: passing the handle instead of the id solves most of everything except of being notified when the handle is being deallocated","date":"2014-02-25T02:20:40.628Z","type":"message"}
{"nick":"rmg","date":"2014-02-25T02:20:48.277Z","type":"quit"}
{"nick":"groundwater","message":"tjfontaine if i store my stuff *on* the handle, it shouldn't matter","date":"2014-02-25T02:20:58.605Z","type":"message"}
{"nick":"tjfontaine","message":"groundwater: sure, but passing the handle doesn't solve the problem of you not wrapping the createServer call","date":"2014-02-25T02:21:19.519Z","type":"message"}
{"nick":"tjfontaine","message":"groundwater: what we (all) would like is for you to *not* have to monkey patch core","date":"2014-02-25T02:21:34.378Z","type":"message"}
{"nick":"groundwater","message":"oh, right because the handle is created asynchronously?","date":"2014-02-25T02:22:00.362Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2014-02-25T02:22:03.799Z","type":"message"}
{"nick":"groundwater","message":"well isnt' the handle just an object, and the fd is really what happens asyncronously?","date":"2014-02-25T02:22:26.771Z","type":"message"}
{"nick":"tjfontaine","message":"not exactly (unfortunately)","date":"2014-02-25T02:22:38.791Z","type":"message"}
{"nick":"groundwater","message":"can we just create the object, and fill in .fd after?","date":"2014-02-25T02:22:40.581Z","type":"message"}
{"nick":"tjfontaine","message":"can? yes, it's all just software :)","date":"2014-02-25T02:24:21.550Z","type":"message"}
{"nick":"tjfontaine","message":"but that is a very high touch change","date":"2014-02-25T02:24:25.576Z","type":"message"}
{"nick":"groundwater","message":"lol","date":"2014-02-25T02:24:31.736Z","type":"message"}
{"nick":"groundwater","message":"understood","date":"2014-02-25T02:24:39.953Z","type":"message"}
{"nick":"paulfryzel","date":"2014-02-25T02:24:44.802Z","type":"join"}
{"nick":"groundwater","message":"i mean the change doesn't *feel* wrong","date":"2014-02-25T02:24:48.017Z","type":"message"}
{"nick":"groundwater","message":"but i don't have a good feel for how easy/hard the change is","date":"2014-02-25T02:25:31.840Z","type":"message"}
{"nick":"paulfryzel","reason":"Ping timeout: 272 seconds","date":"2014-02-25T02:29:15.703Z","type":"quit"}
{"nick":"groundwater","message":"tjfontaine can you link me to the potential async part of createServer?","date":"2014-02-25T02:30:06.914Z","type":"message"}
{"nick":"tjfontaine","message":"sure","date":"2014-02-25T02:30:35.547Z","type":"message"}
{"nick":"tjfontaine","message":"well, ok let me rephase such that you're clear on what we mean by async","date":"2014-02-25T02:32:11.383Z","type":"message"}
{"nick":"tjfontaine","message":"well what I meant","date":"2014-02-25T02:32:29.137Z","type":"message"}
{"nick":"tjfontaine","message":"the handle is *never* created until .listen","date":"2014-02-25T02:32:32.194Z","type":"message"}
{"nick":"tjfontaine","message":"https://github.com/joyent/node/blob/master/lib/net.js#L1045","date":"2014-02-25T02:32:57.182Z","type":"message"}
{"nick":"tjfontaine","message":"then maintains the logic for when we `new TCP()` or etc","date":"2014-02-25T02:33:14.033Z","type":"message"}
{"nick":"groundwater","message":"tjfontaine i think right now, a long stack trace with our AL shim will be called on .listen","date":"2014-02-25T02:34:30.267Z","type":"message"}
{"nick":"tjfontaine","message":"it will, yes","date":"2014-02-25T02:34:36.611Z","type":"message"}
{"nick":"groundwater","message":"so that is consistent","date":"2014-02-25T02:34:36.725Z","type":"message"}
{"nick":"tjfontaine","message":"what most people want (at least imo) is to be notified when Server has been instantiated","date":"2014-02-25T02:35:00.509Z","type":"message"}
{"nick":"groundwater","message":"so not .listen, but 'new Server()'","date":"2014-02-25T02:35:50.953Z","type":"message"}
{"nick":"tjfontaine","message":"to me that seems like what actually is interesting","date":"2014-02-25T02:36:17.583Z","type":"message"}
{"nick":"groundwater","message":"so we're (newrelic) definitely not requiring that","date":"2014-02-25T02:37:07.998Z","type":"message"}
{"nick":"groundwater","message":"not that someone else wouldn't","date":"2014-02-25T02:37:12.379Z","type":"message"}
{"nick":"tjfontaine","message":"sure, but from an associative point I can see why it would be the spot that makes sense","date":"2014-02-25T02:37:35.247Z","type":"message"}
{"nick":"tjfontaine","message":"if you're the kind of person looking for \"where this server was created\" that's the information you want, not when .listen was called -- granted for most people that's only a few lines of difference","date":"2014-02-25T02:38:22.617Z","type":"message"}
{"nick":"groundwater","message":"well the createServer probe could always return the server object","date":"2014-02-25T02:39:20.324Z","type":"message"}
{"nick":"groundwater","message":"and i could correlate that to the .listen event","date":"2014-02-25T02:39:31.828Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u0002de56ffa\u0002 : test: pummel/*ci-reneg* handle EPIPE (+1 more commits) - http://git.io/riEqUw","date":"2014-02-25T02:39:36.577Z","type":"message"}
{"nick":"groundwater","message":"in 'userland'","date":"2014-02-25T02:39:36.780Z","type":"message"}
{"nick":"groundwater","message":"i mean, right now with ALs doesn't it occur on .listen","date":"2014-02-25T02:47:38.599Z","type":"message"}
{"nick":"groundwater","message":"the onAsync call","date":"2014-02-25T02:47:44.246Z","type":"message"}
{"nick":"tjfontaine","message":"all these async words","date":"2014-02-25T02:47:56.921Z","type":"message"}
{"nick":"groundwater","message":"lol","date":"2014-02-25T02:48:01.802Z","type":"message"}
{"nick":"tjfontaine","message":"yes, al fires in he .listen","date":"2014-02-25T02:48:02.719Z","type":"message"}
{"nick":"groundwater","message":"so passing the handle is consistent","date":"2014-02-25T02:48:17.018Z","type":"message"}
{"nick":"groundwater","message":"and firing on .listen","date":"2014-02-25T02:48:22.249Z","type":"message"}
{"nick":"tjfontaine","message":"yup","date":"2014-02-25T02:48:27.980Z","type":"message"}
{"nick":"groundwater","message":"all i'm saying is that the 'minimal feature set' might include passing the handle to userland","date":"2014-02-25T02:48:55.885Z","type":"message"}
{"nick":"groundwater","message":"vs. passing a storage object","date":"2014-02-25T02:49:00.476Z","type":"message"}
{"nick":"tjfontaine","message":"sure","date":"2014-02-25T02:49:02.291Z","type":"message"}
{"nick":"tjfontaine","message":"I mean, that's already happening in the implementation as it is in trevors latest changes","date":"2014-02-25T02:49:55.911Z","type":"message"}
{"nick":"groundwater","message":"is that 'context'?","date":"2014-02-25T02:50:57.826Z","type":"message"}
{"nick":"jmar777","date":"2014-02-25T02:51:06.883Z","type":"join"}
{"nick":"tjfontaine","message":"yes","date":"2014-02-25T02:51:35.633Z","type":"message"}
{"nick":"groundwater","message":"what i mean is that passing 'userData' can be done out of core, if you pass the handle to create, along with before/after","date":"2014-02-25T02:51:44.412Z","type":"message"}
{"nick":"tjfontaine","message":"presuming everyone gets around the 'ick' feeling of storing it on the handle","date":"2014-02-25T02:52:17.798Z","type":"message"}
{"nick":"groundwater","message":"my understanding is that the return value of create is the 'userData' which, currently implemented, gets attached to the handle object","date":"2014-02-25T02:52:38.960Z","type":"message"}
{"nick":"groundwater","message":"so it's happening anyways","date":"2014-02-25T02:52:59.029Z","type":"message"}
{"nick":"groundwater","message":"and if i recall, you said the JIT can't optimize the handle anyways","date":"2014-02-25T02:53:09.731Z","type":"message"}
{"nick":"tjfontaine","message":"the handle is generally a c++ instantiated object, so there's little to optimize (mostly)","date":"2014-02-25T02:53:39.118Z","type":"message"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-02-25T02:54:03.285Z","type":"quit"}
{"nick":"groundwater","message":"would *you* let that change through? knowing people would append to the handle","date":"2014-02-25T02:54:06.869Z","type":"message"}
{"nick":"tjfontaine","message":"name spacing would be important for users attaching to the handle, and they coudln't be angry with us if stomp on their keys ;)","date":"2014-02-25T02:54:40.412Z","type":"message"}
{"nick":"groundwater","message":"do you want that enforced by convention, or by construction?","date":"2014-02-25T02:55:10.490Z","type":"message"}
{"nick":"groundwater","message":"i.e. just a line \"PREFIX YOUR SHIT\"","date":"2014-02-25T02:55:17.116Z","type":"message"}
{"nick":"tjfontaine","message":"I would want that by convention, ideally","date":"2014-02-25T02:55:28.322Z","type":"message"}
{"nick":"tjfontaine","message":"it can be expensive to \"freeze\" or equivalent","date":"2014-02-25T02:55:37.613Z","type":"message"}
{"nick":"groundwater","message":"because maybe not all AL callbacks want to actually mutate handle","date":"2014-02-25T02:55:38.412Z","type":"message"}
{"nick":"groundwater","message":"so tell people to prefix their module name, for example","date":"2014-02-25T02:56:19.892Z","type":"message"}
{"nick":"groundwater","message":"__newrelic_bag_o_fun","date":"2014-02-25T02:56:43.023Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2014-02-25T02:57:35.469Z","type":"message"}
{"nick":"groundwater","message":"so that's my vote","date":"2014-02-25T03:01:32.260Z","type":"message"}
{"nick":"groundwater","message":"if we're searching for a minimal feature set","date":"2014-02-25T03:01:38.962Z","type":"message"}
{"nick":"tjfontaine","message":"ok","date":"2014-02-25T03:01:47.327Z","type":"message"}
{"nick":"AlexisMocha","reason":"Ping timeout: 246 seconds","date":"2014-02-25T03:01:53.047Z","type":"quit"}
{"nick":"paulfryzel","date":"2014-02-25T03:02:04.795Z","type":"join"}
{"nick":"paulfryzel","reason":"Ping timeout: 272 seconds","date":"2014-02-25T03:06:37.711Z","type":"quit"}
{"nick":"brson","reason":"Quit: leaving","date":"2014-02-25T03:06:55.581Z","type":"quit"}
{"nick":"AWinterman","date":"2014-02-25T03:08:34.801Z","type":"join"}
{"nick":"Ralith","reason":"Ping timeout: 246 seconds","date":"2014-02-25T03:08:53.222Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-02-25T03:08:56.685Z","type":"quit"}
{"nick":"AWinterman","reason":"Ping timeout: 272 seconds","date":"2014-02-25T03:14:13.682Z","type":"quit"}
{"nick":"kevinsimper","reason":"Remote host closed the connection","date":"2014-02-25T03:33:07.029Z","type":"quit"}
{"nick":"piscisaureus","date":"2014-02-25T03:34:00.133Z","type":"join"}
{"nick":"Ralith","date":"2014-02-25T03:34:12.719Z","type":"join"}
{"nick":"paulfryzel","date":"2014-02-25T03:37:44.790Z","type":"join"}
{"nick":"andrewrk","date":"2014-02-25T03:42:35.019Z","type":"join"}
{"nick":"paulfryzel","reason":"Ping timeout: 272 seconds","date":"2014-02-25T03:42:43.753Z","type":"quit"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u000277a6ea0\u0002 : tools: wrk update to 5b2fa06 (+1 more commits) - http://git.io/sXYWQQ","date":"2014-02-25T03:51:04.222Z","type":"message"}
{"nick":"piscisaureus","reason":"Ping timeout: 246 seconds","date":"2014-02-25T03:51:35.031Z","type":"quit"}
{"nick":"kazupon","date":"2014-02-25T03:57:54.255Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-02-25T03:59:58.924Z","type":"quit"}
{"nick":"kazupon","date":"2014-02-25T04:01:13.442Z","type":"join"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u0002102399e\u0002 : wrk: build against our distributed ssl - http://git.io/dABwEw","date":"2014-02-25T04:21:00.504Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u00024bba651\u0002 : wrk: build against our distributed ssl - http://git.io/dSAIqw","date":"2014-02-25T04:27:06.560Z","type":"message"}
{"nick":"euoia","reason":"Ping timeout: 246 seconds","date":"2014-02-25T04:31:08.046Z","type":"quit"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u0002f6b5fc1\u0002 : wrk: build against our distributed ssl - http://git.io/cRDAtw","date":"2014-02-25T04:31:26.607Z","type":"message"}
{"nick":"paulfryzel","date":"2014-02-25T04:38:29.793Z","type":"join"}
{"nick":"loladiro","date":"2014-02-25T04:40:17.036Z","type":"join"}
{"nick":"jmar777","date":"2014-02-25T04:40:45.892Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-02-25T04:41:18.571Z","type":"quit"}
{"nick":"thlorenz","date":"2014-02-25T04:41:53.271Z","type":"join"}
{"nick":"paulfryzel","reason":"Ping timeout: 272 seconds","date":"2014-02-25T04:43:31.747Z","type":"quit"}
{"nick":"thlorenz","reason":"Ping timeout: 264 seconds","date":"2014-02-25T04:46:26.731Z","type":"quit"}
{"nick":"tjfontaine","message":"I wish I could find a convenient way to serially run phases of a matrix job across a specific axis","date":"2014-02-25T04:48:36.474Z","type":"message"}
{"nick":"thlorenz","date":"2014-02-25T04:51:19.124Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-02-25T04:53:06.827Z","type":"quit"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u00021e182e1\u0002 : wrk: compile on sunos - http://git.io/dChnWw","date":"2014-02-25T04:55:09.822Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037merge-review\u000f * \u0002fd17587\u0002 : wrk: compile on sunos - http://git.io/EYVaYg","date":"2014-02-25T05:00:15.905Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: [\"Textual IRC Client: www.textualapp.com\"]","date":"2014-02-25T05:04:44.221Z","type":"quit"}
{"nick":"kevinsimper","date":"2014-02-25T05:33:58.432Z","type":"join"}
{"nick":"kevinsimper","reason":"Ping timeout: 246 seconds","date":"2014-02-25T05:38:41.109Z","type":"quit"}
{"nick":"paulfryzel","date":"2014-02-25T05:39:09.788Z","type":"join"}
{"nick":"thlorenz","date":"2014-02-25T05:42:02.947Z","type":"join"}
{"nick":"paulfryzel","reason":"Ping timeout: 272 seconds","date":"2014-02-25T05:44:19.825Z","type":"quit"}
{"nick":"calvinfo1","reason":"Quit: Leaving.","date":"2014-02-25T05:45:00.019Z","type":"quit"}
{"nick":"trevnorris","message":"groundwater: yes the userData is attached to the context via ._asyncData. also know that the \"context\" passed is not the Server() object, but the ._handle object attached to the server instance.","date":"2014-02-25T05:53:47.821Z","type":"message"}
{"nick":"calvinfo","date":"2014-02-25T05:54:12.785Z","type":"join"}
{"nick":"trevnorris","message":"it directly exposes Node's entrails.","date":"2014-02-25T05:54:22.038Z","type":"message"}
{"nick":"Hewhokayaks","date":"2014-02-25T05:57:14.105Z","type":"join"}
{"nick":"trevnorris","message":"groundwater tjfontaine: if you wan to have users maintain a userData state outside of AL, each context can easily be given a uid (already done for AL) and then I can queue a callback passing that uid to the user in the destructor.","date":"2014-02-25T05:57:23.494Z","type":"message"}
{"nick":"trevnorris","message":"*want","date":"2014-02-25T05:57:28.580Z","type":"message"}
{"nick":"piscisaureus","date":"2014-02-25T05:58:51.944Z","type":"join"}
{"nick":"Hewhokayaks","reason":"Remote host closed the connection","date":"2014-02-25T06:00:30.805Z","type":"quit"}
{"nick":"trevnorris","message":"groundwater: as tjfontaine said, if a user wants to know when Server() is created, that's a totally different story. Unfortunately that is almost the only case in core code where the C++ class isn't instantiated w/ the JS object.","date":"2014-02-25T06:00:32.732Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: the only way around it is if we combined PipeWrap and TCPWrap (which, i'm not for). the other case is timers. those little bastards are the bane of my existence.","date":"2014-02-25T06:01:18.949Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: though I do have to say that I was hit with a bolt of inspiration just before leaving the office, and I now have a way to complete a feature that has been bothering me for weeks.","date":"2014-02-25T06:02:34.696Z","type":"message"}
{"nick":"kenperkins","date":"2014-02-25T06:06:09.548Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-02-25T06:10:04.335Z","type":"quit"}
{"nick":"thlorenz","date":"2014-02-25T06:10:39.822Z","type":"join"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2014-02-25T06:13:12.300Z","type":"quit"}
{"nick":"thlorenz","reason":"Ping timeout: 272 seconds","date":"2014-02-25T06:15:21.710Z","type":"quit"}
{"nick":"kenperkins","date":"2014-02-25T06:27:01.235Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-02-25T06:27:08.599Z","type":"quit"}
{"nick":"kazupon","reason":"Read error: Connection timed out","date":"2014-02-25T06:33:47.079Z","type":"quit"}
{"nick":"kazupon","date":"2014-02-25T06:34:53.922Z","type":"join"}
{"nick":"mikeal","date":"2014-02-25T06:45:56.764Z","type":"join"}
{"nick":"dshaw_","date":"2014-02-25T06:50:30.171Z","type":"join"}
{"nick":"Damn3d","reason":"Ping timeout: 245 seconds","date":"2014-02-25T07:04:06.147Z","type":"quit"}
{"nick":"petka_","date":"2014-02-25T07:06:56.160Z","type":"join"}
{"nick":"Damn3d","date":"2014-02-25T07:18:42.242Z","type":"join"}
{"nick":"kenperkins","reason":"Quit: Computer has gone to sleep.","date":"2014-02-25T07:23:33.238Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 246 seconds","date":"2014-02-25T07:26:50.255Z","type":"quit"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2014-02-25T07:34:15.265Z","type":"quit"}
{"nick":"guilleiguaran","reason":"Quit: Connection closed for inactivity","date":"2014-02-25T07:37:46.991Z","type":"quit"}
{"nick":"piscisaureus","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2014-02-25T07:40:31.585Z","type":"quit"}
{"nick":"paulfryzel","date":"2014-02-25T07:40:44.796Z","type":"join"}
{"nick":"paulfryzel","reason":"Ping timeout: 272 seconds","date":"2014-02-25T07:45:55.832Z","type":"quit"}
