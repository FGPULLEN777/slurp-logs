{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-04-22T00:00:00.873Z","type":"quit"}
{"nick":"mikeal","date":"2013-04-22T00:00:06.101Z","type":"join"}
{"nick":"ircretary","date":"2013-04-22T00:00:07.531Z","type":"join"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-04-22T00:23:59.347Z","type":"quit"}
{"nick":"wolfeida_","date":"2013-04-22T00:25:54.821Z","type":"join"}
{"nick":"wolfeidau","reason":"Read error: Connection reset by peer","date":"2013-04-22T00:25:58.191Z","type":"quit"}
{"nick":"brson","date":"2013-04-22T00:31:02.220Z","type":"join"}
{"nick":"kuplatupsu","reason":"Ping timeout: 245 seconds","date":"2013-04-22T00:34:11.416Z","type":"quit"}
{"nick":"kuplatupsu","date":"2013-04-22T00:35:00.423Z","type":"join"}
{"nick":"luxigo","reason":"Ping timeout: 252 seconds","date":"2013-04-22T01:08:53.417Z","type":"quit"}
{"nick":"luxigo","date":"2013-04-22T01:11:01.905Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2013-04-22T01:16:50.010Z","type":"quit"}
{"nick":"jmar777","date":"2013-04-22T01:17:25.673Z","type":"join"}
{"nick":"qmx","reason":"Excess Flood","date":"2013-04-22T01:19:12.471Z","type":"quit"}
{"nick":"qmx","date":"2013-04-22T01:20:05.274Z","type":"join"}
{"nick":"jmar777","reason":"Ping timeout: 256 seconds","date":"2013-04-22T01:22:00.493Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-04-22T01:27:01.174Z","type":"quit"}
{"nick":"c4milo","date":"2013-04-22T01:31:59.187Z","type":"join"}
{"nick":"luxigo","reason":"Remote host closed the connection","date":"2013-04-22T01:32:11.886Z","type":"quit"}
{"nick":"wolfeida_","reason":"Read error: Connection reset by peer","date":"2013-04-22T01:36:48.542Z","type":"quit"}
{"nick":"wolfeidau","date":"2013-04-22T01:37:05.375Z","type":"join"}
{"nick":"abraxas","date":"2013-04-22T01:38:11.534Z","type":"join"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-04-22T01:38:34.860Z","type":"nick"}
{"nick":"perezd","reason":"Quit: perezd","date":"2013-04-22T01:43:39.420Z","type":"quit"}
{"nick":"qmx","reason":"Excess Flood","date":"2013-04-22T01:48:21.470Z","type":"quit"}
{"nick":"qmx","date":"2013-04-22T01:52:39.309Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-04-22T01:56:01.125Z","type":"quit"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-04-22T02:09:50.571Z","type":"nick"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-04-22T02:48:48.273Z","type":"nick"}
{"nick":"brson","reason":"Quit: leaving","date":"2013-04-22T03:10:35.582Z","type":"quit"}
{"nick":"kazupon","date":"2013-04-22T03:38:29.622Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-04-22T03:41:49.619Z","type":"quit"}
{"nick":"kazupon","date":"2013-04-22T03:42:07.510Z","type":"join"}
{"nick":"pooya","date":"2013-04-22T04:09:13.270Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2013-04-22T04:13:27.557Z","type":"quit"}
{"nick":"AvianFlu","date":"2013-04-22T04:23:42.935Z","type":"join"}
{"nick":"kazupon_","date":"2013-04-22T04:28:50.503Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 252 seconds","date":"2013-04-22T04:29:38.478Z","type":"quit"}
{"nick":"pooya","reason":"Quit: pooya","date":"2013-04-22T04:30:56.855Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-04-22T04:54:21.487Z","type":"join"}
{"nick":"kazupon_","reason":"Read error: Operation timed out","date":"2013-04-22T04:59:00.029Z","type":"quit"}
{"nick":"kazupon","date":"2013-04-22T04:59:28.632Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 255 seconds","date":"2013-04-22T05:07:41.420Z","type":"quit"}
{"nick":"abraxas","date":"2013-04-22T05:09:51.638Z","type":"join"}
{"nick":"kazupon","date":"2013-04-22T05:15:35.456Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-04-22T05:17:41.441Z","type":"quit"}
{"nick":"mikeal","date":"2013-04-22T05:31:59.730Z","type":"join"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-04-22T05:40:21.304Z","type":"quit"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-04-22T05:47:51.609Z","type":"quit"}
{"nick":"mikeal","date":"2013-04-22T05:53:58.192Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2013-04-22T05:54:30.664Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-04-22T05:59:28.981Z","type":"quit"}
{"nick":"kazupon","date":"2013-04-22T06:00:33.600Z","type":"join"}
{"nick":"wolfeidau","reason":"Read error: Connection reset by peer","date":"2013-04-22T06:04:41.621Z","type":"quit"}
{"nick":"wolfeidau","date":"2013-04-22T06:04:56.308Z","type":"join"}
{"nick":"dominictarr","date":"2013-04-22T06:08:50.815Z","type":"join"}
{"nick":"kazupon","reason":"Read error: Connection reset by peer","date":"2013-04-22T06:11:35.055Z","type":"quit"}
{"nick":"mikeal","date":"2013-04-22T06:11:41.576Z","type":"join"}
{"nick":"kazupon","date":"2013-04-22T06:11:57.546Z","type":"join"}
{"nick":"`3rdEden","date":"2013-04-22T06:12:14.776Z","type":"join"}
{"nick":"kazupon_","date":"2013-04-22T06:12:32.566Z","type":"join"}
{"nick":"kazupon__","date":"2013-04-22T06:15:12.415Z","type":"join"}
{"nick":"kazupon","reason":"Read error: Connection reset by peer","date":"2013-04-22T06:15:32.295Z","type":"quit"}
{"nick":"kazupon_","reason":"Ping timeout: 245 seconds","date":"2013-04-22T06:17:56.543Z","type":"quit"}
{"nick":"rendar","date":"2013-04-22T06:27:55.000Z","type":"join"}
{"nick":"MI6","message":"\u0002joyent/libuv:\u0002 \u00033Ben Noordhuis\u000f \u00037v0.10\u000f * \u0002cd10637\u0002 : linux: don't use fopen() in uv_resident_set_memory()  RSS is a reflection (+1 more commits) - http://git.io/a40WUQ","date":"2013-04-22T06:31:48.905Z","type":"message"}
{"nick":"bajtos","date":"2013-04-22T06:39:00.881Z","type":"join"}
{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #17 \u00037UNSTABLE\u000f smartos-ia32 (3/188) windows-x64 (4/189) windows-ia32 (4/189) osx-x64 (1/188) smartos-x64 (3/188) http://jenkins.nodejs.org/job/libuv-master-gyp/17/","date":"2013-04-22T06:39:02.883Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-v0.10\u0002: #42 \u00037UNSTABLE\u000f linux (1/186) osx (1/186) smartos (3/186) windows (6/187) http://jenkins.nodejs.org/job/libuv-v0.10/42/","date":"2013-04-22T06:41:04.868Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-v0.10-gyp\u0002: #4 \u00037UNSTABLE\u000f windows-x64 (5/187) smartos-x64 (3/186) osx-ia32 (1/186) smartos-ia32 (3/186) windows-ia32 (5/187) http://jenkins.nodejs.org/job/libuv-v0.10-gyp/4/","date":"2013-04-22T06:41:07.903Z","type":"message"}
{"nick":"`3rdEden","reason":"Quit: GTG, my talk begins in 30/40 min","date":"2013-04-22T06:48:29.773Z","type":"quit"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2013-04-22T06:57:09.242Z","type":"quit"}
{"nick":"MI6","message":"\u0002libuv-node-integration\u0002: #30 \u00037UNSTABLE\u000f smartos-ia32 (1/579) smartos-x64 (1/579) windows-x64 (8/579) windows-ia32 (7/579) http://jenkins.nodejs.org/job/libuv-node-integration/30/","date":"2013-04-22T06:59:28.969Z","type":"message"}
{"nick":"hz","date":"2013-04-22T07:04:35.467Z","type":"join"}
{"nick":"wolfeidau","date":"2013-04-22T07:13:38.283Z","type":"join"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-04-22T07:15:28.276Z","type":"quit"}
{"nick":"dominictarr","date":"2013-04-22T07:30:15.835Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-04-22T07:32:14.389Z","type":"quit"}
{"nick":"csaoh","date":"2013-04-22T07:33:22.871Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-04-22T07:33:34.471Z","type":"join"}
{"nick":"stagas","date":"2013-04-22T08:07:08.185Z","type":"join"}
{"nick":"saghul_","date":"2013-04-22T08:29:58.344Z","type":"join"}
{"nick":"saghul_","reason":"Client Quit","date":"2013-04-22T08:30:14.605Z","type":"quit"}
{"nick":"saghul","reason":"Quit: [\"Textual IRC Client: www.textualapp.com\"]","date":"2013-04-22T08:30:49.787Z","type":"quit"}
{"nick":"saghul","date":"2013-04-22T08:31:50.104Z","type":"join"}
{"nick":"`3rdEden","date":"2013-04-22T08:33:14.274Z","type":"join"}
{"nick":"benoitc","reason":"Excess Flood","date":"2013-04-22T08:41:13.395Z","type":"quit"}
{"nick":"benoitc","date":"2013-04-22T08:46:31.600Z","type":"join"}
{"nick":"`3rdEden","reason":"Remote host closed the connection","date":"2013-04-22T08:50:58.341Z","type":"quit"}
{"nick":"csaoh","reason":"Quit: csaoh","date":"2013-04-22T09:01:54.643Z","type":"quit"}
{"nick":"hz","reason":"Ping timeout: 264 seconds","date":"2013-04-22T09:21:12.424Z","type":"quit"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-04-22T09:22:14.324Z","type":"quit"}
{"nick":"stagas","reason":"Ping timeout: 264 seconds","date":"2013-04-22T09:26:30.178Z","type":"quit"}
{"nick":"hz","date":"2013-04-22T09:29:33.456Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-04-22T09:31:41.351Z","type":"quit"}
{"nick":"bajtos_","date":"2013-04-22T09:32:18.834Z","type":"join"}
{"nick":"bajtos","reason":"Read error: Connection reset by peer","date":"2013-04-22T09:32:41.555Z","type":"quit"}
{"nick":"bajtos_","reason":"Read error: Connection reset by peer","date":"2013-04-22T09:32:41.682Z","type":"quit"}
{"nick":"bajtos","date":"2013-04-22T09:32:58.834Z","type":"join"}
{"nick":"hz","reason":"Ping timeout: 264 seconds","date":"2013-04-22T09:34:24.419Z","type":"quit"}
{"nick":"csaoh","date":"2013-04-22T09:55:57.485Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-04-22T09:57:57.993Z","type":"join"}
{"nick":"bnoordhuis","message":"bajtos: how are you managing?","date":"2013-04-22T09:58:55.648Z","type":"message"}
{"nick":"bnoordhuis","message":"i ask because i'll be away for the next hour or two","date":"2013-04-22T09:59:05.134Z","type":"message"}
{"nick":"bnoordhuis","message":"if you have questions, the time is now :)","date":"2013-04-22T09:59:15.372Z","type":"message"}
{"nick":"dominictarr","date":"2013-04-22T10:01:40.875Z","type":"join"}
{"nick":"creationix","message":"I'm having trouble understanding how to write to process.binding('tcp_wrap').TCP instances","date":"2013-04-22T10:11:21.965Z","type":"message"}
{"nick":"creationix","message":"it seems to always call .oncomplete sync","date":"2013-04-22T10:11:42.308Z","type":"message"}
{"nick":"roxlu","message":"hi guys! ","date":"2013-04-22T10:11:51.779Z","type":"message"}
{"nick":"creationix","message":"but after a while, it sends a -1 status because of EAGAIN","date":"2013-04-22T10:12:17.245Z","type":"message"}
{"nick":"creationix","message":"looking at node's source code, it doesn't seem to do anything special other than convert the -1 status code into a proper error object","date":"2013-04-22T10:13:18.238Z","type":"message"}
{"nick":"roxlu","message":"I've got a uv_tcp_t which connects to a server, but when the server is down calling uv_run crashes with this backtrace: https://gist.github.com/roxlu/70998af3afa0c7efabe3 ","date":"2013-04-22T10:14:02.595Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 260 seconds","date":"2013-04-22T10:15:31.898Z","type":"quit"}
{"nick":"bajtos","reason":"Remote host closed the connection","date":"2013-04-22T10:15:39.176Z","type":"quit"}
{"nick":"creationix","message":"roxlu: weird, I've never seen that","date":"2013-04-22T10:15:39.653Z","type":"message"}
{"nick":"roxlu","message":"I'm curious what might cause this. ","date":"2013-04-22T10:18:04.180Z","type":"message"}
{"nick":"saghul","message":"roxlu did you call uv_start_read?","date":"2013-04-22T10:19:01.843Z","type":"message"}
{"nick":"roxlu","message":"saghul: uv_read_start() yes","date":"2013-04-22T10:19:40.347Z","type":"message"}
{"nick":"roxlu","message":"(well, I only call it, after it connects)","date":"2013-04-22T10:19:59.914Z","type":"message"}
{"nick":"saghul","message":"when you get a failure, are you calling uv_read_stop or uv_close?","date":"2013-04-22T10:20:03.537Z","type":"message"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2013-04-22T10:20:18.694Z","type":"quit"}
{"nick":"roxlu","message":"saghul: I only call uv_close() when it was connected","date":"2013-04-22T10:21:14.473Z","type":"message"}
{"nick":"roxlu","message":"I try to connect, when it can't connect I start a timer","date":"2013-04-22T10:21:36.734Z","type":"message"}
{"nick":"roxlu","message":"when the timers 'fires', I try to reconnect, and call uv_tcp_init() again","date":"2013-04-22T10:21:53.574Z","type":"message"}
{"nick":"saghul","message":"and you call start_read after connect succeeds, right?","date":"2013-04-22T10:21:58.147Z","type":"message"}
{"nick":"roxlu","message":"yes","date":"2013-04-22T10:22:06.867Z","type":"message"}
{"nick":"roxlu","message":"saghul: I was testing what happens when the server is down and it can't connect (so in this situation start_read isn't called)","date":"2013-04-22T10:22:36.861Z","type":"message"}
{"nick":"saghul","message":"I see","date":"2013-04-22T10:22:50.935Z","type":"message"}
{"nick":"csaoh","reason":"Quit: csaoh","date":"2013-04-22T10:46:27.370Z","type":"quit"}
{"nick":"roxlu","message":"saghul: I think I found something. I'm starting a timer which start the whole \"connect\" sequence (resolve host, connect, set read/write handlers)","date":"2013-04-22T10:53:32.412Z","type":"message"}
{"nick":"roxlu","message":"when it can't connect the timer is restarted again","date":"2013-04-22T10:53:45.172Z","type":"message"}
{"nick":"roxlu","message":"but.. I was also calling the \"connect()\" function from some other point, resetting the uv_tcp_t ","date":"2013-04-22T10:54:02.090Z","type":"message"}
{"nick":"saghul","message":"oh, that doesn't sound too good indeed","date":"2013-04-22T10:54:28.745Z","type":"message"}
{"nick":"roxlu","message":"saghul: I think I need to stop/unset the current time","date":"2013-04-22T10:54:55.272Z","type":"message"}
{"nick":"roxlu","message":"saghul: .. which fails when the timer hasn't been set yet : ) ","date":"2013-04-22T10:56:31.495Z","type":"message"}
{"nick":"csaoh","date":"2013-04-22T11:02:25.799Z","type":"join"}
{"nick":"csaoh","reason":"Client Quit","date":"2013-04-22T11:02:40.167Z","type":"quit"}
{"nick":"kazupon__","reason":"Remote host closed the connection","date":"2013-04-22T11:04:38.974Z","type":"quit"}
{"nick":"roxlu","message":"is there a way to get the status of a timer? ","date":"2013-04-22T11:16:02.813Z","type":"message"}
{"nick":"csaoh","date":"2013-04-22T11:16:56.616Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-04-22T11:19:42.461Z","type":"join"}
{"nick":"sgallagh","date":"2013-04-22T11:24:39.595Z","type":"join"}
{"nick":"sgallagh","reason":"Remote host closed the connection","date":"2013-04-22T11:33:36.987Z","type":"quit"}
{"nick":"sgallagh","date":"2013-04-22T11:51:40.012Z","type":"join"}
{"nick":"`3rdEden","date":"2013-04-22T11:52:54.971Z","type":"join"}
{"nick":"saghul","message":"roxlu you can do uv_is_active(timer)","date":"2013-04-22T11:58:14.318Z","type":"message"}
{"nick":"bnoordhuis","message":"creationix: those oncomplete callbacks are async","date":"2013-04-22T12:10:45.891Z","type":"message"}
{"nick":"kazupon","date":"2013-04-22T12:15:20.613Z","type":"join"}
{"nick":"`3rdEden","reason":"Remote host closed the connection","date":"2013-04-22T12:16:34.793Z","type":"quit"}
{"nick":"kazupon","reason":"Ping timeout: 256 seconds","date":"2013-04-22T12:19:54.480Z","type":"quit"}
{"nick":"`3rdEden","date":"2013-04-22T12:24:32.710Z","type":"join"}
{"nick":"`3rdEden","reason":"Remote host closed the connection","date":"2013-04-22T12:30:58.170Z","type":"quit"}
{"nick":"AvianFlu","date":"2013-04-22T12:36:06.606Z","type":"join"}
{"nick":"jmar777","date":"2013-04-22T12:48:54.461Z","type":"join"}
{"nick":"bnoordhuis","message":"http://www.globalrichlist.com/ <- that website makes me feel good about myself","date":"2013-04-22T12:59:24.693Z","type":"message"}
{"nick":"bnoordhuis","message":"\"You’re in the top 0.05% richest people in the world by income.\"","date":"2013-04-22T12:59:46.415Z","type":"message"}
{"nick":"bnoordhuis","message":"only 3.5 million people before me!","date":"2013-04-22T13:00:08.509Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-04-22T13:00:36.889Z","type":"nick"}
{"nick":"mmalecki","message":"bnoordhuis: nice. I'm 0.08 %, apparently","date":"2013-04-22T13:03:05.411Z","type":"message"}
{"nick":"mmalecki","message":"bnoordhuis: doesn't this Monday sound like a good Monday to chill out and go out? we make so much money anyway.","date":"2013-04-22T13:03:27.955Z","type":"message"}
{"nick":"bnoordhuis","message":"yeah. weather is nice too","date":"2013-04-22T13:04:59.060Z","type":"message"}
{"nick":"kellabyte","message":"its raining dolla bills yall","date":"2013-04-22T13:20:59.353Z","type":"message"}
{"nick":"kellabyte","message":"bnoordhuis: if http parsing is behind the I/O rate, the parser since it's on the event loop isn't stopping the I/O threads from receiving and putting new requests in the event loop right?","date":"2013-04-22T13:26:27.362Z","type":"message"}
{"nick":"bnoordhuis","message":"kellabyte: well, yes and no. if the http parser takes a long time, it blocks everything that runs on that thread","date":"2013-04-22T13:29:17.697Z","type":"message"}
{"nick":"kevinswiber","date":"2013-04-22T13:29:42.746Z","type":"join"}
{"nick":"bnoordhuis","message":"if by i/o threads you mean the file i/o threads, that's correct, those will continue to queue and dequeue work requests","date":"2013-04-22T13:29:50.231Z","type":"message"}
{"nick":"kellabyte","message":"bnoordhuis: yeah thats what I meant","date":"2013-04-22T13:30:21.723Z","type":"message"}
{"nick":"qmx","reason":"Excess Flood","date":"2013-04-22T13:31:38.957Z","type":"quit"}
{"nick":"kellabyte","message":"bnoordhuis: I did some benchmarking and its not extensive yet but hinted that http_parser is causing some instruction starvation so wanted to make sure it wasn't holding I/O back, but it is probably holding back the response rate","date":"2013-04-22T13:32:03.384Z","type":"message"}
{"nick":"bnoordhuis","message":"kellabyte: that sounds plausible. in simple benchmarks, http_parser_execute usually dominates","date":"2013-04-22T13:33:25.580Z","type":"message"}
{"nick":"kellabyte","message":"bnoordhuis: if I wanted to use more cores to handle http_parser, what would be best? putting requests in additional event loops?","date":"2013-04-22T13:33:51.537Z","type":"message"}
{"nick":"bnoordhuis","message":"kellabyte: yes","date":"2013-04-22T13:34:20.175Z","type":"message"}
{"nick":"bnoordhuis","message":"you can share a socket between multiple threads/processes","date":"2013-04-22T13:34:38.013Z","type":"message"}
{"nick":"kellabyte","message":"bnoordhuis: ah sweet, is there a way to inspect the event loop length? so I can try and keep like say 4 pretty even","date":"2013-04-22T13:35:12.658Z","type":"message"}
{"nick":"qmx","date":"2013-04-22T13:35:16.608Z","type":"join"}
{"nick":"bnoordhuis","message":"kellabyte: what's your definition of an 'event loop length'?","date":"2013-04-22T13:35:38.516Z","type":"message"}
{"nick":"bnoordhuis","message":"btw, test/benchmark-multi-accept.c shows how you can share handles across threads","date":"2013-04-22T13:35:58.790Z","type":"message"}
{"nick":"bnoordhuis","message":"the same technique applies to sharing handles cross-process","date":"2013-04-22T13:36:16.416Z","type":"message"}
{"nick":"kellabyte","message":"bnoordhuis: I dunno :P but one thread may get behind another if its requests take longer to process, so I don't want to just do 1 here, 1 there type of distribution","date":"2013-04-22T13:36:35.625Z","type":"message"}
{"nick":"bnoordhuis","message":"kellabyte: you have to track that yourself. you can e.g. stop listening in one process/thread when it has |n| more active connections than the other threads","date":"2013-04-22T13:37:30.714Z","type":"message"}
{"nick":"bnoordhuis","message":"libuv itself doesn't provide that kind of high-level abstractions but all the primitives are there","date":"2013-04-22T13:37:55.698Z","type":"message"}
{"nick":"bnoordhuis","message":"e.g. message passing between processes, mutexes for thread synchronization, etc","date":"2013-04-22T13:38:11.779Z","type":"message"}
{"nick":"kellabyte","message":"bnoordhuis: ok cool. I thought if the event loop had a count or something I would just give it to the shortest event loop","date":"2013-04-22T13:38:14.590Z","type":"message"}
{"nick":"c4milo","date":"2013-04-22T13:46:39.900Z","type":"join"}
{"nick":"kazupon","date":"2013-04-22T13:46:43.663Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-04-22T14:09:19.254Z","type":"quit"}
{"nick":"kevinswiber","reason":"Remote host closed the connection","date":"2013-04-22T14:13:31.037Z","type":"quit"}
{"nick":"bajtos","date":"2013-04-22T14:27:35.809Z","type":"join"}
{"nick":"kevinswiber","date":"2013-04-22T14:29:19.869Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-04-22T14:44:19.806Z","type":"quit"}
{"nick":"sgallagh","reason":"Remote host closed the connection","date":"2013-04-22T14:48:28.270Z","type":"quit"}
{"nick":"kazupon","date":"2013-04-22T14:49:43.538Z","type":"join"}
{"nick":"piscisaureus_","date":"2013-04-22T14:53:35.927Z","type":"join"}
{"nick":"bajtos","message":"bnoordhuis: ping","date":"2013-04-22T14:55:02.649Z","type":"message"}
{"nick":"piscisaureus_","message":"hey bajtos","date":"2013-04-22T14:55:14.110Z","type":"message"}
{"nick":"piscisaureus_","message":"how are you doing?","date":"2013-04-22T14:55:16.947Z","type":"message"}
{"nick":"bajtos","message":"piscisaureus_: pretty well","date":"2013-04-22T14:55:35.458Z","type":"message"}
{"nick":"bajtos","message":"probably better than you ;-)","date":"2013-04-22T14:55:45.111Z","type":"message"}
{"nick":"piscisaureus_","message":"bajtos: i sure hope so for you :)","date":"2013-04-22T14:55:53.880Z","type":"message"}
{"nick":"bnoordhuis","message":"bajtos: what's up?","date":"2013-04-22T14:56:05.969Z","type":"message"}
{"nick":"bajtos","message":"bnoordhuis: well I am fixing the findings from your code review","date":"2013-04-22T14:56:35.936Z","type":"message"}
{"nick":"bnoordhuis","message":"very good","date":"2013-04-22T14:56:51.731Z","type":"message"}
{"nick":"bajtos","message":"and I am not sure if  I should change also runner-win.c ","date":"2013-04-22T14:56:55.556Z","type":"message"}
{"nick":"bajtos","message":"I guess that piscisaureus_ has more commits there, so his opinion overrules yours? :)","date":"2013-04-22T14:57:21.295Z","type":"message"}
{"nick":"bajtos","message":"piscisaureus_: we are talking about this PR: https://github.com/joyent/libuv/pull/786","date":"2013-04-22T14:57:36.088Z","type":"message"}
{"nick":"piscisaureus_","message":"bajtos: what is it about","date":"2013-04-22T14:57:38.584Z","type":"message"}
{"nick":"piscisaureus_","message":"ah","date":"2013-04-22T14:57:39.740Z","type":"message"}
{"nick":"bnoordhuis","message":"`git shortlog -ns` says no","date":"2013-04-22T14:57:40.591Z","type":"message"}
{"nick":"bnoordhuis","message":"(the only metric that counts)","date":"2013-04-22T14:58:01.120Z","type":"message"}
{"nick":"piscisaureus_","message":"waaa","date":"2013-04-22T14:58:07.274Z","type":"message"}
{"nick":"sgallagh","date":"2013-04-22T14:59:18.665Z","type":"join"}
{"nick":"bajtos","message":"ok :-D","date":"2013-04-22T15:01:02.465Z","type":"message"}
{"nick":"hz","date":"2013-04-22T15:04:23.458Z","type":"join"}
{"nick":"piscisaureus_","message":"felixge: hey","date":"2013-04-22T15:04:24.375Z","type":"message"}
{"nick":"piscisaureus_","message":"felixge: are you coming to <s>queensday</s>kingsday again in Amsterdam?","date":"2013-04-22T15:04:59.818Z","type":"message"}
{"nick":"bajtos","message":"bnoordhuis: I fixed all findings, could you please review if the code is ok now?","date":"2013-04-22T15:06:41.973Z","type":"message"}
{"nick":"bnoordhuis","message":"bajtos: sure, but not now. it's dinner time around here","date":"2013-04-22T15:07:42.414Z","type":"message"}
{"nick":"bajtos","message":"bnoordhuis: no problem, whenever you have time.","date":"2013-04-22T15:08:01.931Z","type":"message"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-04-22T15:12:15.834Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-04-22T15:14:14.503Z","type":"quit"}
{"nick":"kazupon","date":"2013-04-22T15:19:38.688Z","type":"join"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-04-22T15:19:52.658Z","type":"nick"}
{"nick":"isaacs","message":"ircretary: tell bnoordhuis I'm about ready to add whatever gross kludges are necessary to stop this \"cannot call method destroy() of undefined\" error","date":"2013-04-22T15:24:35.382Z","type":"message"}
{"nick":"ircretary","message":"isaacs: I'll be sure to tell bnoordhuis","date":"2013-04-22T15:24:36.118Z","type":"message"}
{"nick":"bajtos","reason":"Remote host closed the connection","date":"2013-04-22T15:28:55.817Z","type":"quit"}
{"nick":"AvianFlu","reason":"Read error: Connection reset by peer","date":"2013-04-22T15:39:25.188Z","type":"quit"}
{"nick":"AvianFlu","date":"2013-04-22T15:40:01.580Z","type":"join"}
{"nick":"kevinswiber","reason":"Remote host closed the connection","date":"2013-04-22T15:48:15.830Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-04-22T15:49:33.834Z","type":"join"}
{"nick":"bajtos","date":"2013-04-22T15:51:42.683Z","type":"join"}
{"nick":"mikeal","date":"2013-04-22T15:52:14.856Z","type":"join"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033isaacs\u000f \u00037v0.10\u000f * \u00021d794ec\u0002 : test:+fix+dgram-bind-default-address+on+osx  Allow+the+IPv4-mapped-as-IPv - http://git.io/wL_x6Q","date":"2013-04-22T15:56:40.672Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-04-22T15:57:09.218Z","type":"quit"}
{"nick":"isaacs","message":"ircretary: tell bnoordhuis nevermind, turned out not to be kludgey at all, really. perfectly valid bug.","date":"2013-04-22T15:57:19.611Z","type":"message"}
{"nick":"ircretary","message":"isaacs: I'll be sure to tell bnoordhuis","date":"2013-04-22T15:57:20.042Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-04-22T15:58:21.836Z","type":"quit"}
{"nick":"tjfontaine","message":"you scared him off","date":"2013-04-22T15:59:29.470Z","type":"message"}
{"nick":"tjfontaine","message":"isaacs: just realized the dates on your scrum last week were off","date":"2013-04-22T15:59:46.963Z","type":"message"}
{"nick":"isaacs","message":"oh, wut?","date":"2013-04-22T15:59:56.368Z","type":"message"}
{"nick":"tjfontaine","message":"19th was friday","date":"2013-04-22T16:00:10.485Z","type":"message"}
{"nick":"isaacs","message":"lol","date":"2013-04-22T16:00:17.051Z","type":"message"}
{"nick":"isaacs","message":"i had 2 16's in there","date":"2013-04-22T16:00:29.225Z","type":"message"}
{"nick":"tjfontaine","message":"indeed","date":"2013-04-22T16:00:38.448Z","type":"message"}
{"nick":"tjfontaine","message":"I'm interested to see how scrum works from the plane","date":"2013-04-22T16:01:05.762Z","type":"message"}
{"nick":"isaacs","message":"oh, right, you're on a plane :)","date":"2013-04-22T16:02:18.036Z","type":"message"}
{"nick":"sgallagh","reason":"Remote host closed the connection","date":"2013-04-22T16:02:18.388Z","type":"quit"}
{"nick":"isaacs","message":"feel free to just send me updates if you'd like","date":"2013-04-22T16:02:22.772Z","type":"message"}
{"nick":"isaacs","message":"i can be scrumptious today","date":"2013-04-22T16:02:37.506Z","type":"message"}
{"nick":"tjfontaine","message":"hah","date":"2013-04-22T16:02:44.590Z","type":"message"}
{"nick":"tjfontaine","message":"ok","date":"2013-04-22T16:02:54.272Z","type":"message"}
{"nick":"bnoordhuis","date":"2013-04-22T16:04:05.424Z","type":"join"}
{"nick":"pooya","date":"2013-04-22T16:07:28.690Z","type":"join"}
{"nick":"sgallagh","date":"2013-04-22T16:08:23.790Z","type":"join"}
{"nick":"sgallagh","reason":"Remote host closed the connection","date":"2013-04-22T16:08:23.790Z","type":"quit"}
{"nick":"sgallagh","date":"2013-04-22T16:09:04.999Z","type":"join"}
{"nick":"sgallagh","reason":"Remote host closed the connection","date":"2013-04-22T16:09:07.829Z","type":"quit"}
{"nick":"sgallagh","date":"2013-04-22T16:09:23.659Z","type":"join"}
{"nick":"trevnorris","date":"2013-04-22T16:12:31.668Z","type":"join"}
{"nick":"trevnorris","message":"morning","date":"2013-04-22T16:13:17.678Z","type":"message"}
{"nick":"tjfontaine","message":"morn","date":"2013-04-22T16:13:43.268Z","type":"message"}
{"nick":"trevnorris","message":"so clang 3.3 is coming out soon I believe.","date":"2013-04-22T16:14:47.206Z","type":"message"}
{"nick":"sgallagh","reason":"Remote host closed the connection","date":"2013-04-22T16:15:35.575Z","type":"quit"}
{"nick":"tjfontaine","message":"I have no problem believing that, but haven't been paying attention to the channel close enough to verify a date","date":"2013-04-22T16:16:36.221Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #154 \u00037UNSTABLE\u000f windows-ia32 (8/579) linux-ia32 (2/579) smartos-x64 (3/579) smartos-ia32 (4/579) windows-x64 (7/579) http://jenkins.nodejs.org/job/nodejs-v0.10/154/","date":"2013-04-22T16:17:32.736Z","type":"message"}
{"nick":"tjfontaine","message":"hmm too many failures on smartos","date":"2013-04-22T16:19:54.357Z","type":"message"}
{"nick":"tjfontaine","message":"http://jenkins.nodejs.org//job/nodejs-v0.10/154/DESTCPU=ia32,label=smartos//tapTestReport/test.tap-360/","date":"2013-04-22T16:20:19.897Z","type":"message"}
{"nick":"dap","date":"2013-04-22T16:20:27.098Z","type":"join"}
{"nick":"tjfontaine","message":"rebuild scheduled","date":"2013-04-22T16:23:04.760Z","type":"message"}
{"nick":"sgallagh","date":"2013-04-22T16:25:53.583Z","type":"join"}
{"nick":"bnoordhuis","message":"morning guys","date":"2013-04-22T16:31:43.462Z","type":"message"}
{"nick":"tjfontaine","message":"morning","date":"2013-04-22T16:32:01.271Z","type":"message"}
{"nick":"bnoordhuis","message":"how was the visit to your mom, tj?","date":"2013-04-22T16:32:14.671Z","type":"message"}
{"nick":"tjfontaine","message":"quick, but good","date":"2013-04-22T16:32:24.528Z","type":"message"}
{"nick":"tjfontaine","message":"the airlines tried their best to ruin my day today","date":"2013-04-22T16:32:38.034Z","type":"message"}
{"nick":"kellabyte","message":"tjfontaine: ouch","date":"2013-04-22T16:32:54.003Z","type":"message"}
{"nick":"tjfontaine","message":"I only had 30 mins to make my connection, and my flight was delayed 20mins in the air","date":"2013-04-22T16:33:18.241Z","type":"message"}
{"nick":"tjfontaine","message":"lucky for me my flight to sfo was 45 mins late","date":"2013-04-22T16:33:33.719Z","type":"message"}
{"nick":"kevinswiber","date":"2013-04-22T16:36:07.610Z","type":"join"}
{"nick":"gblock","date":"2013-04-22T16:37:37.849Z","type":"join"}
{"nick":"gblock","message":"Hello folks. Quick and easy question.","date":"2013-04-22T16:38:04.424Z","type":"message"}
{"nick":"gblock","message":"Callbacks in node, should err be undefined or null if there is no error?","date":"2013-04-22T16:38:17.797Z","type":"message"}
{"nick":"kellabyte","message":"gblock: hey!","date":"2013-04-22T16:38:31.284Z","type":"message"}
{"nick":"gblock","message":"hey kelly","date":"2013-04-22T16:38:38.591Z","type":"message"}
{"nick":"bnoordhuis","message":"gblock: null","date":"2013-04-22T16:38:50.080Z","type":"message"}
{"nick":"gblock","message":"Callback question is because I am seeing inconcistencies","date":"2013-04-22T16:38:57.321Z","type":"message"}
{"nick":"gblock","message":"ok","date":"2013-04-22T16:38:58.022Z","type":"message"}
{"nick":"tjfontaine","message":"falsey :)","date":"2013-04-22T16:39:13.081Z","type":"message"}
{"nick":"bnoordhuis","message":"it's not critical but most code in node passes null","date":"2013-04-22T16:39:17.697Z","type":"message"}
{"nick":"gblock","message":"lol","date":"2013-04-22T16:39:47.322Z","type":"message"}
{"nick":"kevinswiber","reason":"Remote host closed the connection","date":"2013-04-22T16:40:31.520Z","type":"quit"}
{"nick":"gblock","message":"@bnoordhuis have you released any updated guidance on this?","date":"2013-04-22T16:41:04.525Z","type":"message"}
{"nick":"gblock","message":"@bnoordhuis because a ton of folks out there just right code that checks if err is undefined.","date":"2013-04-22T16:41:20.775Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #155 \u00037UNSTABLE\u000f windows-ia32 (6/579) smartos-x64 (1/579) smartos-ia32 (1/579) windows-x64 (6/579) http://jenkins.nodejs.org/job/nodejs-v0.10/155/","date":"2013-04-22T16:41:25.904Z","type":"message"}
{"nick":"gblock","message":"sorry right == write","date":"2013-04-22T16:41:28.742Z","type":"message"}
{"nick":"bnoordhuis","message":"gblock: as in `if (err === undefined)`?","date":"2013-04-22T16:42:18.029Z","type":"message"}
{"nick":"gblock","message":"yup","date":"2013-04-22T16:42:28.387Z","type":"message"}
{"nick":"bnoordhuis","message":"== or ===?","date":"2013-04-22T16:42:32.751Z","type":"message"}
{"nick":"tjfontaine","message":"those people suck","date":"2013-04-22T16:42:35.884Z","type":"message"}
{"nick":"isaacs","message":"gblock: anything falsey is fine.","date":"2013-04-22T16:42:49.091Z","type":"message"}
{"nick":"inolen","reason":"Quit: Leaving.","date":"2013-04-22T16:42:55.142Z","type":"quit"}
{"nick":"isaacs","message":"gblock: use `if (!err) { ... }`","date":"2013-04-22T16:43:01.707Z","type":"message"}
{"nick":"gblock","message":"@isaacs that's what I always use","date":"2013-04-22T16:43:13.672Z","type":"message"}
{"nick":"isaacs","message":"gblock: actually, even: `if (!err || !(err instanceof Error))` is as loose as you can be.","date":"2013-04-22T16:43:28.461Z","type":"message"}
{"nick":"isaacs","message":"if someone is passing non-Errors as err firstargs, then they are incorrect in a deep way","date":"2013-04-22T16:43:39.713Z","type":"message"}
{"nick":"isaacs","message":"but, in practice, falsey is enouhg","date":"2013-04-22T16:44:02.455Z","type":"message"}
{"nick":"isaacs","message":"gblock: if thye check for `err === undefined` they'll run into trouble VERY quickly using almost any node APIs","date":"2013-04-22T16:44:37.457Z","type":"message"}
{"nick":"isaacs","message":"gblock: i think it's hard to make that kind of mistake for very long;","date":"2013-04-22T16:44:48.699Z","type":"message"}
{"nick":"gblock","message":"@isaacs good point","date":"2013-04-22T16:45:20.062Z","type":"message"}
{"nick":"gblock","message":"@isaacs so if (!err) as opposed to if (err) ?","date":"2013-04-22T16:45:38.993Z","type":"message"}
{"nick":"isaacs","message":"$ node -e \"require('fs').readFile('README.md', function(er) { if (er !== undefined) console.log('ERROR', er) })\"","date":"2013-04-22T16:45:45.023Z","type":"message"}
{"nick":"gblock","message":"@isaacs I usually use if (err)","date":"2013-04-22T16:45:47.532Z","type":"message"}
{"nick":"isaacs","message":"ERROR null","date":"2013-04-22T16:45:48.068Z","type":"message"}
{"nick":"isaacs","message":"gblock: well, that depends.","date":"2013-04-22T16:45:54.845Z","type":"message"}
{"nick":"isaacs","message":"gblock: if (!err) would precede code that runs if there is not an error.  if (err) would precede code that runs if there is an error.","date":"2013-04-22T16:46:10.959Z","type":"message"}
{"nick":"mikeal","date":"2013-04-22T16:46:48.746Z","type":"join"}
{"nick":"gblock","message":"@isaacs ok, but there is no fundamental problem with if (err)","date":"2013-04-22T16:49:02.104Z","type":"message"}
{"nick":"gblock","message":"@isaacs in my code I usually have the code branch IF there is an error, otherwise it continues","date":"2013-04-22T16:49:37.402Z","type":"message"}
{"nick":"kevinswiber","date":"2013-04-22T16:50:46.785Z","type":"join"}
{"nick":"isaacs","message":"bnoordhuis: 78c5de598bb6ebd68d8d93fabdcebdca1f024580 breaks os.type() on sunos","date":"2013-04-22T16:50:54.940Z","type":"message"}
{"nick":"gblock","message":"@isaacs thanks for the clarification","date":"2013-04-22T16:51:03.604Z","type":"message"}
{"nick":"isaacs","message":"bnoordhuis: i don't see why, but we're raising an EBADF on that function now","date":"2013-04-22T16:51:22.755Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033isaacs\u000f \u00037v0.10\u000f * \u000201e2920\u0002 : http:+Don't+try+to+destroy+nonexistent+sockets  Fixes+#3740  In+the+case+ - http://git.io/dlcpSw","date":"2013-04-22T16:54:13.920Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: \"make test-valgrind\" spews output on master. anything to worry about?","date":"2013-04-22T16:55:41.966Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033isaacs\u000f \u00037v0.8\u000f * \u00024dc5b13\u0002 : http:+Don't+try+to+destroy+nonexistent+sockets  Fixes+#3740  In+the+case+ - http://git.io/nG4nAA","date":"2013-04-22T16:57:04.040Z","type":"message"}
{"nick":"`3rdEden","date":"2013-04-22T17:00:02.631Z","type":"join"}
{"nick":"qmx","new_nick":"qmx|lunch","date":"2013-04-22T17:00:47.532Z","type":"nick"}
{"nick":"csaoh","reason":"Quit: csaoh","date":"2013-04-22T17:03:55.143Z","type":"quit"}
{"nick":"isaacs","message":"bnoordhuis: ah.. looks like sunos just always raises EBADF there... peraps that's why we were ignoring it in the first place.","date":"2013-04-22T17:04:26.323Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-04-22T17:06:03.686Z","type":"quit"}
{"nick":"TooTallNate","date":"2013-04-22T17:07:45.918Z","type":"join"}
{"nick":"brson","date":"2013-04-22T17:08:02.430Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #156 \u00037UNSTABLE\u000f windows-ia32 (7/580) smartos-x64 (1/580) smartos-ia32 (1/580) windows-x64 (7/580) http://jenkins.nodejs.org/job/nodejs-v0.10/156/","date":"2013-04-22T17:13:07.121Z","type":"message"}
{"nick":"isaacs","message":"bnoordhuis: nope, actually, it's not EBADF at all.  just that uname() can return any non-negative int as a success value.","date":"2013-04-22T17:13:12.621Z","type":"message"}
{"nick":"`3rdEden","reason":"Remote host closed the connection","date":"2013-04-22T17:19:30.149Z","type":"quit"}
{"nick":"mikeal","date":"2013-04-22T17:19:44.424Z","type":"join"}
{"nick":"kevinswiber","reason":"Read error: Connection reset by peer","date":"2013-04-22T17:25:02.592Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-v0.8\u0002: #41 \u00037UNSTABLE\u000f smartos-ia32 (3/472) osx-x64 (1/472) linux-x64 (2/472) smartos-x64 (1/472) osx-ia32 (1/472) linux-ia32 (1/472) http://jenkins.nodejs.org/job/nodejs-v0.8/41/","date":"2013-04-22T17:25:50.178Z","type":"message"}
{"nick":"kevinswiber","date":"2013-04-22T17:25:56.862Z","type":"join"}
{"nick":"inolen","date":"2013-04-22T17:29:21.930Z","type":"join"}
{"nick":"trevnorris","message":"piscisaureus_: libuv \"make bench\" has 8 failures. those known?","date":"2013-04-22T17:32:43.493Z","type":"message"}
{"nick":"piscisaureus_","message":"trevnorris: depends. they","date":"2013-04-22T17:32:59.381Z","type":"message"}
{"nick":"piscisaureus_","message":"trevnorris: some time out on windows because someone (**) always adds tests that take minutes on windows","date":"2013-04-22T17:33:31.661Z","type":"message"}
{"nick":"piscisaureus_","message":"trevnorris: however there should not be any real failures","date":"2013-04-22T17:33:42.038Z","type":"message"}
{"nick":"trevnorris","message":"piscisaureus_: nope. all asserts failing.","date":"2013-04-22T17:33:45.194Z","type":"message"}
{"nick":"piscisaureus_","message":"oh","date":"2013-04-22T17:33:50.178Z","type":"message"}
{"nick":"trevnorris","message":"one sec. i'll gist it.","date":"2013-04-22T17:34:05.776Z","type":"message"}
{"nick":"kuplatupsu","reason":"Read error: Operation timed out","date":"2013-04-22T17:35:59.969Z","type":"quit"}
{"nick":"kuplatupsu","date":"2013-04-22T17:36:07.354Z","type":"join"}
{"nick":"kevinswiber","reason":"Remote host closed the connection","date":"2013-04-22T17:36:23.440Z","type":"quit"}
{"nick":"piscisaureus_","message":"trevnorris: ah multi-accept is also failing for me","date":"2013-04-22T17:36:36.173Z","type":"message"}
{"nick":"trevnorris","message":"piscisaureus_: ok cool. not just me then. =)","date":"2013-04-22T17:38:22.046Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033isaacs\u000f \u00037master\u000f * \u0002025f913\u0002 : http:+Don't+try+to+destroy+nonexistent+sockets  Fixes+#3740  In+the+case+ - http://git.io/sOEoDQ","date":"2013-04-22T17:38:26.160Z","type":"message"}
{"nick":"piscisaureus_","message":"trevnorris: it's only multi-accept for you? also which platform is this?","date":"2013-04-22T17:38:44.465Z","type":"message"}
{"nick":"trevnorris","message":"piscisaureus_: yeah. linux x64. i'll build for ia32 and test that.","date":"2013-04-22T17:39:18.890Z","type":"message"}
{"nick":"qmx|lunch","new_nick":"qmx","date":"2013-04-22T17:41:02.452Z","type":"nick"}
{"nick":"brson","reason":"Ping timeout: 245 seconds","date":"2013-04-22T17:41:41.491Z","type":"quit"}
{"nick":"brson","date":"2013-04-22T17:42:46.598Z","type":"join"}
{"nick":"isaacs","message":"indutny: so, i've been agonizing over this streams api change for writev","date":"2013-04-22T17:48:37.737Z","type":"message"}
{"nick":"indutny","message":":)","date":"2013-04-22T17:48:51.284Z","type":"message"}
{"nick":"indutny","message":"and what you come to?","date":"2013-04-22T17:48:54.880Z","type":"message"}
{"nick":"isaacs","message":"indutny: cork/uncork sucks.","date":"2013-04-22T17:48:57.190Z","type":"message"}
{"nick":"indutny","message":"hahahaha","date":"2013-04-22T17:49:00.462Z","type":"message"}
{"nick":"isaacs","message":"indutny: and bulk(writer) sucks","date":"2013-04-22T17:49:02.256Z","type":"message"}
{"nick":"isaacs","message":"they both suck a lot.","date":"2013-04-22T17:49:05.692Z","type":"message"}
{"nick":"indutny","message":"great","date":"2013-04-22T17:49:05.824Z","type":"message"}
{"nick":"isaacs","message":"i mean, really really a lot","date":"2013-04-22T17:49:18.689Z","type":"message"}
{"nick":"isaacs","message":"here's why: both add yet another function that doesn't look particularly \"streamy\", but which extension classes have to be careful not to clobber.","date":"2013-04-22T17:49:47.127Z","type":"message"}
{"nick":"trevnorris","message":"piscisaureus_: you also getting \"Assertion failed in test/benchmark-udp-pummel.c on line 194\"?","date":"2013-04-22T17:50:19.625Z","type":"message"}
{"nick":"isaacs","message":"also: _writev([chunks],[encodings],cb) seems wonky.  i'd prefer _writev([{chunk,encoding}], cb)","date":"2013-04-22T17:50:26.599Z","type":"message"}
{"nick":"isaacs","message":"but whatever.","date":"2013-04-22T17:50:29.567Z","type":"message"}
{"nick":"piscisaureus_","message":"trevnorris: no. I do get a couple of timeous though","date":"2013-04-22T17:50:47.097Z","type":"message"}
{"nick":"piscisaureus_","message":"*timeouts","date":"2013-04-22T17:50:51.849Z","type":"message"}
{"nick":"trevnorris","message":"hm.","date":"2013-04-22T17:50:54.533Z","type":"message"}
{"nick":"isaacs","message":"indutny: parallel arrays are kind of weird.","date":"2013-04-22T17:50:55.316Z","type":"message"}
{"nick":"indutny","message":"oook","date":"2013-04-22T17:50:58.690Z","type":"message"}
{"nick":"indutny","message":"that's not a problem","date":"2013-04-22T17:51:00.807Z","type":"message"}
{"nick":"isaacs","message":"indutny: right.","date":"2013-04-22T17:51:03.729Z","type":"message"}
{"nick":"indutny","message":"so what can we do in terms of API","date":"2013-04-22T17:51:05.938Z","type":"message"}
{"nick":"indutny","message":"?","date":"2013-04-22T17:51:06.754Z","type":"message"}
{"nick":"isaacs","message":"indutny: don't go rewriting everything right now :)","date":"2013-04-22T17:51:08.806Z","type":"message"}
{"nick":"isaacs","message":"indutny: the implementation is ok, i mean, it's well written and goes pretty fast, and we can tweak that later.","date":"2013-04-22T17:51:29.985Z","type":"message"}
{"nick":"isaacs","message":"getting the API right is harder.","date":"2013-04-22T17:51:35.659Z","type":"message"}
{"nick":"isaacs","message":"indutny: what if we just had a Writable.prototype.writev(chunks, encodings, callback)","date":"2013-04-22T17:51:58.355Z","type":"message"}
{"nick":"indutny","message":"sure","date":"2013-04-22T17:52:12.326Z","type":"message"}
{"nick":"indutny","message":"I like it","date":"2013-04-22T17:52:18.475Z","type":"message"}
{"nick":"isaacs","message":"it's not quite as magical, sort of simpler.","date":"2013-04-22T17:52:24.896Z","type":"message"}
{"nick":"indutny","message":"and it seems that its what I've proposed at first time :)","date":"2013-04-22T17:52:26.046Z","type":"message"}
{"nick":"indutny","message":"haha","date":"2013-04-22T17:52:29.354Z","type":"message"}
{"nick":"isaacs","message":"hahahah","date":"2013-04-22T17:52:29.598Z","type":"message"}
{"nick":"isaacs","message":"so you need to know your chunks and encodings up front, and write them all at once.","date":"2013-04-22T17:52:50.365Z","type":"message"}
{"nick":"isaacs","message":"and it'll just dump them into the buffer, and then call clearBuffer()","date":"2013-04-22T17:52:58.916Z","type":"message"}
{"nick":"isaacs","message":"and, if you have a _writev() defined, it'll use that every time it calls clearBuffer, whether via writev() or not, and if you don't, i'tll always just do _write() over and over again","date":"2013-04-22T17:53:31.660Z","type":"message"}
{"nick":"isaacs","message":"this way, all streams have a Writable.writev method, and all streams can benefit even if you're just writing fast rather than using Writable.writev","date":"2013-04-22T17:54:02.336Z","type":"message"}
{"nick":"isaacs","message":"still has the parallel array smell, but i think maybe we can live with that.","date":"2013-04-22T17:54:23.044Z","type":"message"}
{"nick":"isaacs","message":"might be a good idea to bikeshed on the mailing list, also.","date":"2013-04-22T17:54:30.434Z","type":"message"}
{"nick":"isaacs","message":"painful as that will be.","date":"2013-04-22T17:54:33.162Z","type":"message"}
{"nick":"isaacs","message":"indutny: what do you think about that?","date":"2013-04-22T17:56:10.302Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2013-04-22T17:56:35.672Z","type":"message"}
{"nick":"isaacs","message":"indutny: i brought up the question to a few people, and suggestions ranged from awful to terrible, but i think we'd be best to have a bit of input on this.","date":"2013-04-22T17:56:38.720Z","type":"message"}
{"nick":"indutny","message":"I like it","date":"2013-04-22T17:56:42.298Z","type":"message"}
{"nick":"trevnorris","message":"piscisaureus_: here's some of the output: https://gist.github.com/trevnorris/5437098","date":"2013-04-22T17:56:43.264Z","type":"message"}
{"nick":"isaacs","message":"even if we end up doing what no one says they want :)","date":"2013-04-22T17:56:49.980Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #167 \u00037UNSTABLE\u000f windows-ia32 (8/583) smartos-x64 (4/583) smartos-ia32 (1/583) windows-x64 (8/583) http://jenkins.nodejs.org/job/nodejs-master/167/","date":"2013-04-22T17:57:37.263Z","type":"message"}
{"nick":"indutny","message":"haha","date":"2013-04-22T17:58:14.564Z","type":"message"}
{"nick":"indutny","message":"ok, sure","date":"2013-04-22T17:58:17.683Z","type":"message"}
{"nick":"indutny","message":"I'll implement it later today","date":"2013-04-22T17:58:21.808Z","type":"message"}
{"nick":"isaacs","message":"indutny: kewl.  i'll send a message to the mailing list and try to get some ideas floating around","date":"2013-04-22T17:59:22.851Z","type":"message"}
{"nick":"indutny","message":"ok","date":"2013-04-22T17:59:42.675Z","type":"message"}
{"nick":"isaacs","message":"tjfontaine: i was totally already in the middle of fixing this when you sent me your scrum","date":"2013-04-22T18:00:11.800Z","type":"message"}
{"nick":"isaacs","message":"tjfontaine: or at least, when i saw it :)","date":"2013-04-22T18:00:16.660Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033isaacs\u000f \u00037v0.10\u000f * \u0002c777473\u0002 : os:+Fix+uname()+error+handling+on+sunos  The+uname+function+can+return+an - http://git.io/8CSC9w","date":"2013-04-22T18:01:04.393Z","type":"message"}
{"nick":"isaacs","action":"&","date":"2013-04-22T18:01:45.209Z","type":"action"}
{"nick":"LOUDBOT","message":"IT IS THE MANDRY OF T","date":"2013-04-22T18:01:45.567Z","type":"message"}
{"nick":"piscisaureus_","message":"trevnorris: those udp failures are probably because you hit the fd limit","date":"2013-04-22T18:04:01.817Z","type":"message"}
{"nick":"trevnorris","message":"ah, ok.","date":"2013-04-22T18:04:08.496Z","type":"message"}
{"nick":"piscisaureus_","message":"trevnorris: the others I have seen as well","date":"2013-04-22T18:04:08.645Z","type":"message"}
{"nick":"CoverSli1e","new_nick":"CoverSlide","date":"2013-04-22T18:04:29.258Z","type":"nick"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-04-22T18:10:17.090Z","type":"quit"}
{"nick":"trevnorris","message":"for anyone. TCPWrap::Initialize runs HandleWrap::Initialize, then StreamWrap::Initialize. even though the later also runs the former.","date":"2013-04-22T18:21:25.640Z","type":"message"}
{"nick":"trevnorris","message":"so HandleWrap::Initialize runs twice?","date":"2013-04-22T18:21:42.277Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #157 \u00037UNSTABLE\u000f windows-ia32 (7/580) windows-x64 (8/580) http://jenkins.nodejs.org/job/nodejs-v0.10/157/","date":"2013-04-22T18:22:34.472Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: doesn't matter right now, HandleWrap::Initialize() is a no-op","date":"2013-04-22T18:24:14.570Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: kk","date":"2013-04-22T18:24:28.757Z","type":"message"}
{"nick":"tjfontaine","message":"isaacs: :)","date":"2013-04-22T18:28:20.607Z","type":"message"}
{"nick":"pooya","reason":"Quit: pooya","date":"2013-04-22T18:37:17.478Z","type":"quit"}
{"nick":"trevnorris","message":"bnoordhuis: how about StreapWrap::StreamWrap has stream->data = this, and HandleWrap::HandleWrap has h->data = this. that redundant?","date":"2013-04-22T18:38:56.272Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: yes but not fatally so","date":"2013-04-22T18:40:43.836Z","type":"message"}
{"nick":"trevnorris","message":"ok. just want to make sure i'm not missing something. =)","date":"2013-04-22T18:40:54.799Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #18 \u0002ABORTED\u0002 smartos-ia32 (3/188) http://jenkins.nodejs.org/job/libuv-master-gyp/18/","date":"2013-04-22T18:47:18.668Z","type":"message"}
{"nick":"benoitc","message":"hi all","date":"2013-04-22T18:52:04.000Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #19 \u00037UNSTABLE\u000f smartos-ia32 (3/188) windows-x64 (5/189) windows-ia32 (5/189) smartos-x64 (3/188) http://jenkins.nodejs.org/job/libuv-master-gyp/19/","date":"2013-04-22T18:52:21.673Z","type":"message"}
{"nick":"tjfontaine","message":"piscisaureus_: have you ever seen this test fail before? http://jenkins.nodejs.org//job/libuv-master-gyp/lastCompletedBuild/DESTCPU=ia32,label=windows//tapTestReport/test.tap-20/","date":"2013-04-22T18:53:08.058Z","type":"message"}
{"nick":"benoitc","message":"does uv_spawn need to be run in the main thread ?","date":"2013-04-22T18:53:29.264Z","type":"message"}
{"nick":"tjfontaine","message":"everything that's not uv_async needs to be run in the main thread?","date":"2013-04-22T18:54:11.856Z","type":"message"}
{"nick":"brson","reason":"Ping timeout: 248 seconds","date":"2013-04-22T18:55:01.604Z","type":"quit"}
{"nick":"brson","date":"2013-04-22T18:57:11.429Z","type":"join"}
{"nick":"gblock_","date":"2013-04-22T19:01:32.662Z","type":"join"}
{"nick":"gblock","reason":"Ping timeout: 272 seconds","date":"2013-04-22T19:02:26.722Z","type":"quit"}
{"nick":"gblock_","new_nick":"gblock","date":"2013-04-22T19:02:26.896Z","type":"nick"}
{"nick":"stagas","date":"2013-04-22T19:02:33.403Z","type":"join"}
{"nick":"piscisaureus_","message":"bnoordhuis: meh. github doesn't line-wrap","date":"2013-04-22T19:04:13.809Z","type":"message"}
{"nick":"dominictarr","date":"2013-04-22T19:04:24.703Z","type":"join"}
{"nick":"stagas_","date":"2013-04-22T19:05:34.511Z","type":"join"}
{"nick":"bnoordhuis","message":"benoitc: uv_spawn() works with loops that are not uv_default_loop()","date":"2013-04-22T19:05:57.641Z","type":"message"}
{"nick":"stagas","reason":"Client Quit","date":"2013-04-22T19:06:06.399Z","type":"quit"}
{"nick":"stagas_","new_nick":"stagas","date":"2013-04-22T19:06:10.527Z","type":"nick"}
{"nick":"bnoordhuis","message":"the 'only the main loop' thing was a libev limitation","date":"2013-04-22T19:06:10.695Z","type":"message"}
{"nick":"benoitc","message":"ahhhh good to know","date":"2013-04-22T19:06:34.802Z","type":"message"}
{"nick":"benoitc","message":"thanks","date":"2013-04-22T19:06:37.335Z","type":"message"}
{"nick":"mjr__","date":"2013-04-22T19:19:52.877Z","type":"join"}
{"nick":"bajtos","reason":"Remote host closed the connection","date":"2013-04-22T19:20:21.827Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-04-22T19:32:02.549Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-04-22T19:32:11.392Z","type":"quit"}
{"nick":"trevnorris","message":"do you only have to free uv_buf_t buf.base? (e.g. don't have to do anything with \"buf\")","date":"2013-04-22T19:35:06.225Z","type":"message"}
{"nick":"sblom","date":"2013-04-22T19:40:35.328Z","type":"join"}
{"nick":"indutny","message":"isaacs: gosh","date":"2013-04-22T19:43:26.411Z","type":"message"}
{"nick":"indutny","message":"this stuff complicates http.js a lot","date":"2013-04-22T19:43:31.551Z","type":"message"}
{"nick":"indutny","message":"stream.writev()","date":"2013-04-22T19:43:35.254Z","type":"message"}
{"nick":"indutny","message":"may be we can introduce at least internal ._cork/._uncork?","date":"2013-04-22T19:43:55.501Z","type":"message"}
{"nick":"indexzero","date":"2013-04-22T19:54:13.025Z","type":"join"}
{"nick":"trevnorris","message":"not horrible for my first attempt at removing the slab allocator: https://gist.github.com/trevnorris/5437947","date":"2013-04-22T19:58:01.509Z","type":"message"}
{"nick":"trevnorris","message":"still have a few things up my sleeve.","date":"2013-04-22T19:58:08.250Z","type":"message"}
{"nick":"tjfontaine","message":"how are you handling the shrinking portion?","date":"2013-04-22T19:58:38.162Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: no shrinking. every read is a new buffer.","date":"2013-04-22T19:59:02.333Z","type":"message"}
{"nick":"trevnorris","message":"that's why the really low \"length\" are much worse.","date":"2013-04-22T19:59:18.794Z","type":"message"}
{"nick":"eris0xff","date":"2013-04-22T20:00:12.031Z","type":"join"}
{"nick":"tjfontaine","message":"trevnorris: so what does memory usage look like during this? consider libuv may initially ask for 64k but then only use 1k?","date":"2013-04-22T20:00:13.391Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: for \"http/cluster.js type=bytes length=4 c=50\", exact same as master.","date":"2013-04-22T20:01:32.515Z","type":"message"}
{"nick":"trevnorris","message":"because each alloc is it's own buffer, gc will clean the entire thing up when complete.","date":"2013-04-22T20:01:55.549Z","type":"message"}
{"nick":"tjfontaine","message":"right but if things are held for a period it's potentially holding considerably more?","date":"2013-04-22T20:02:17.329Z","type":"message"}
{"nick":"trevnorris","message":"hm. yeah. that's true.","date":"2013-04-22T20:02:30.579Z","type":"message"}
{"nick":"trevnorris","message":"i'm going to replace slaballocator w/ the new buffer slice. it's a shiz ton faster, and achieves the same thing.","date":"2013-04-22T20:03:06.223Z","type":"message"}
{"nick":"trevnorris","message":"see how that goes.","date":"2013-04-22T20:03:14.457Z","type":"message"}
{"nick":"trevnorris","message":"but first. my mouth is on fire from these samosas. need a drink","date":"2013-04-22T20:04:47.163Z","type":"message"}
{"nick":"tjfontaine","message":"haha","date":"2013-04-22T20:04:58.224Z","type":"message"}
{"nick":"eris0xff","message":"hey guys: i'm working on a server using libuv that accepts open/close, read/write, rm, stat and cd requests asynchronously.  i'm working on a clean way to respond to them: I'm thinking that uv_work request would be a good general way to handle them","date":"2013-04-22T20:08:54.950Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: oh, and about hanging onto a piece of memory for a while. that memory leak will happen anyways since a single small chunk will keep the entire thing alive.","date":"2013-04-22T20:09:00.087Z","type":"message"}
{"nick":"eris0xff","message":"is that the accepted apttern","date":"2013-04-22T20:09:01.938Z","type":"message"}
{"nick":"eris0xff","message":"?","date":"2013-04-22T20:09:03.172Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: the whole slab yes, but you have enough knowledge in the same tick to keep your slab allocations low","date":"2013-04-22T20:09:28.609Z","type":"message"}
{"nick":"eris0xff","message":"but maybe that's overkill: ","date":"2013-04-22T20:09:43.112Z","type":"message"}
{"nick":"trevnorris","message":"hm. interesting point.","date":"2013-04-22T20:09:50.944Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: I'm not saying the slab is perfect, but this is something you'll need to take into account, there is realloc but that can be expensive","date":"2013-04-22T20:11:00.322Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: I don't have any numbers on it, but that's what you're good at :)","date":"2013-04-22T20:11:19.249Z","type":"message"}
{"nick":"Benvie_","date":"2013-04-22T20:12:53.366Z","type":"join"}
{"nick":"trevnorris","message":"heh, thanks.","date":"2013-04-22T20:13:32.155Z","type":"message"}
{"nick":"trevnorris","message":"eris0xff: work me through a bit of this.  you'll be passing a callback to each of those operations, correct?","date":"2013-04-22T20:14:26.180Z","type":"message"}
{"nick":"eris0xff","message":"correct.  it's almost a 1:1 translation.  the client says \"write this data on this file handle and let me know when you're done\".   i decode the requests and dispatch it.   ideally each dispatch has a generic callback which generates a response over the same stream as the request (uv_write)","date":"2013-04-22T20:18:21.350Z","type":"message"}
{"nick":"eris0xff","message":"or close or whatever","date":"2013-04-22T20:18:34.454Z","type":"message"}
{"nick":"eris0xff","message":"so I'm wondering if a generic callback mechanism exists in libuv (uv_work apparently)","date":"2013-04-22T20:19:17.392Z","type":"message"}
{"nick":"trevnorris","message":"eris0xff: you talking about something like http://nikhilm.github.io/uvbook/threads.html#libuv-work-queue","date":"2013-04-22T20:19:55.631Z","type":"message"}
{"nick":"eris0xff","message":"so the rough response callback structure looks like: dispatch work request -> dispatch response write","date":"2013-04-22T20:20:51.260Z","type":"message"}
{"nick":"eris0xff","message":"(yes re work queue)","date":"2013-04-22T20:21:03.824Z","type":"message"}
{"nick":"eris0xff","message":"some of the callbacks have direct mappings to uv_write or uv_read, but some are not easy to quantify (like cd etc)","date":"2013-04-22T20:21:56.740Z","type":"message"}
{"nick":"eris0xff","message":"i'm afraid the most efficient answer is \"do a uv_ callback that is the closest to the request type\"","date":"2013-04-22T20:23:35.630Z","type":"message"}
{"nick":"eris0xff","message":"if there isn't one, use work queue","date":"2013-04-22T20:24:00.443Z","type":"message"}
{"nick":"eris0xff","message":"(was looking for a semi-elegant, accept request type t, build type t iorequest, dispatch type t iorequest, send response)","date":"2013-04-22T20:24:58.496Z","type":"message"}
{"nick":"eris0xff","message":"i guess I'll just do a switch / case","date":"2013-04-22T20:25:20.224Z","type":"message"}
{"nick":"eris0xff","message":"code getting tricky *all* of it is async, all event driven. :-)","date":"2013-04-22T20:26:08.335Z","type":"message"}
{"nick":"eris0xff","message":"that's what makes it fun and useful","date":"2013-04-22T20:26:19.079Z","type":"message"}
{"nick":"trevnorris","message":"eris0xff: so you're talking about these callbacks? https://github.com/joyent/libuv/blob/master/include/uv.h#L342-L358","date":"2013-04-22T20:29:04.223Z","type":"message"}
{"nick":"kazupon","date":"2013-04-22T20:32:20.448Z","type":"join"}
{"nick":"eris0xff","message":"hmm","date":"2013-04-22T20:34:46.120Z","type":"message"}
{"nick":"trevnorris","message":"guess what I was getting at is each is going to expect a specific type of callback (e.g. uv_fs_cb)","date":"2013-04-22T20:36:03.398Z","type":"message"}
{"nick":"trevnorris","message":"so doing know if there's a \"generic callback\" callback. but again, i'm a total libuv newb.","date":"2013-04-22T20:36:26.681Z","type":"message"}
{"nick":"bnoordhuis","date":"2013-04-22T20:37:42.442Z","type":"join"}
{"nick":"eris0xff","message":"interesting question: the requests i'm receiving over the net are very similar to the ones in uv_fs_type.  I perform them async and write a result response back to the requester.   so I guess i just needed to clarify to myself.   I receive a request via the network stream (uv_read_start, uv_write) and perform the op as a local system operation","date":"2013-04-22T20:38:28.218Z","type":"message"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2013-04-22T20:39:40.172Z","type":"quit"}
{"nick":"eris0xff","message":"(uv_fs_open, uv_fs_close etc)","date":"2013-04-22T20:39:46.371Z","type":"message"}
{"nick":"jmar777","date":"2013-04-22T20:40:13.784Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 245 seconds","date":"2013-04-22T20:40:26.617Z","type":"quit"}
{"nick":"eris0xff","message":"so trevnorris, the answer is that it has to be custom for each type of operation.","date":"2013-04-22T20:41:01.936Z","type":"message"}
{"nick":"eris0xff","message":"but the pattern is the same","date":"2013-04-22T20:41:06.789Z","type":"message"}
{"nick":"trevnorris","message":"cool. sounds good to me.","date":"2013-04-22T20:41:32.469Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 245 seconds","date":"2013-04-22T20:42:06.434Z","type":"quit"}
{"nick":"eris0xff","message":"an ascii diagram of the stream looks like:    incoming request callback->decode->dispatch op callback->dispatch response callback    (looks nice and neat that way.   don't look at the code :-)","date":"2013-04-22T20:43:06.671Z","type":"message"}
{"nick":"trevnorris","message":"lol","date":"2013-04-22T20:43:25.084Z","type":"message"}
{"nick":"eris0xff","message":"I need a clean co-routine/iterator lib in C to deal with callback hell","date":"2013-04-22T20:44:07.886Z","type":"message"}
{"nick":"jmar777","reason":"Ping timeout: 248 seconds","date":"2013-04-22T20:44:21.600Z","type":"quit"}
{"nick":"trevnorris","message":"well, all the uv_*_cb use pretty much  the same args, except the first is a specific uv_*_t.","date":"2013-04-22T20:46:18.458Z","type":"message"}
{"nick":"trevnorris","message":"since uv_handle_t is the abstract class of all the others, wonder if you could create a small set of callbacks that call a single sort of:","date":"2013-04-22T20:47:10.475Z","type":"message"}
{"nick":"trevnorris","message":"(*uv_generic_cb)(uv_handle_t*, int, int, cb_type)","date":"2013-04-22T20:48:38.014Z","type":"message"}
{"nick":"trevnorris","message":"don't know if that would even help, but it's the best i've got. :)","date":"2013-04-22T20:49:46.304Z","type":"message"}
{"nick":"rendar","date":"2013-04-22T20:50:23.942Z","type":"quit"}
{"nick":"pooya","date":"2013-04-22T20:53:11.629Z","type":"join"}
{"nick":"eris0xff","message":"trevnorris: you might be able to, but whether it's worth the work is anyone's guess","date":"2013-04-22T21:03:46.438Z","type":"message"}
{"nick":"eris0xff","message":"right","date":"2013-04-22T21:04:36.323Z","type":"message"}
{"nick":"eris0xff","message":"i haven't dug through the sources yet.  i suppose there's a private generic io callback interface i could access that would look a whole lot like a uv_work_t","date":"2013-04-22T21:05:16.517Z","type":"message"}
{"nick":"eris0xff","message":"i figure it out tonight","date":"2013-04-22T21:05:44.861Z","type":"message"}
{"nick":"indutny","message":"hohoho","date":"2013-04-22T21:06:23.023Z","type":"message"}
{"nick":"eris0xff","message":"problem is I'm rewriting a lib that isn't callback based into one that is.  basically involves unrolling a lot of sequential code and tying it back together with the relatively long lived request objects","date":"2013-04-22T21:07:35.514Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: one of the advantages to the new approach is that a buffer isn't created until the callback is called.","date":"2013-04-22T21:27:39.607Z","type":"message"}
{"nick":"trevnorris","message":"which removes a buffer instantiation for all EOF/errors","date":"2013-04-22T21:27:54.623Z","type":"message"}
{"nick":"tjfontaine","message":"the alloc_cb isn't triggered regardless?","date":"2013-04-22T21:28:31.105Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: it's triggered every time, but it just malloc's. i tie that data to a buffer right before it's returned.","date":"2013-04-22T21:29:08.751Z","type":"message"}
{"nick":"trevnorris","message":"but only if data will be returned.","date":"2013-04-22T21:29:18.083Z","type":"message"}
{"nick":"tjfontaine","message":"sure but the malloc happens, the only time the malloc would happen on the slab buffer is if it fell on the slab already being full?","date":"2013-04-22T21:29:51.699Z","type":"message"}
{"nick":"trevnorris","message":"true. but malloc is much less expensive then SetHiddenValue or Persistent::New()","date":"2013-04-22T21:30:18.855Z","type":"message"}
{"nick":"gblock","reason":"Ping timeout: 256 seconds","date":"2013-04-22T21:31:50.493Z","type":"quit"}
{"nick":"trevnorris","message":"and every Shrink() does a SetHiddenValue().","date":"2013-04-22T21:32:19.172Z","type":"message"}
{"nick":"isaacs","message":"indutny: it complicates http.js now?","date":"2013-04-22T21:33:27.871Z","type":"message"}
{"nick":"isaacs","message":"indutny: er, how?","date":"2013-04-22T21:33:32.685Z","type":"message"}
{"nick":"isaacs","message":"indutny: if it complicates http.js, then it's probably not a good api :)","date":"2013-04-22T21:33:46.841Z","type":"message"}
{"nick":"indutny","message":"because http.js is fucking awesome","date":"2013-04-22T21:33:54.254Z","type":"message"}
{"nick":"indutny","message":"and does some internal buffering","date":"2013-04-22T21:33:58.909Z","type":"message"}
{"nick":"isaacs","message":"indutny: hahahaha","date":"2013-04-22T21:33:59.281Z","type":"message"}
{"nick":"indutny","message":"in ._send","date":"2013-04-22T21:34:00.594Z","type":"message"}
{"nick":"indutny","message":"and in order to make it work I needs to change all the path from ._send() to actual socket.writev() call","date":"2013-04-22T21:34:20.686Z","type":"message"}
{"nick":"indutny","message":"and this is fucking retarded","date":"2013-04-22T21:34:26.936Z","type":"message"}
{"nick":"isaacs","message":"indutny: yeah...","date":"2013-04-22T21:34:34.270Z","type":"message"}
{"nick":"indutny","message":"and with cork/uncork streams are doing this for me","date":"2013-04-22T21:34:38.227Z","type":"message"}
{"nick":"isaacs","message":"why is http.js doing its own buffering... just for requests that don't have a socket yet?","date":"2013-04-22T21:34:53.973Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2013-04-22T21:34:58.742Z","type":"message"}
{"nick":"indutny","message":"how is it even possible :)","date":"2013-04-22T21:35:08.724Z","type":"message"}
{"nick":"indutny","message":"to have request without socket","date":"2013-04-22T21:35:13.355Z","type":"message"}
{"nick":"indutny","message":"it could be not connected yet","date":"2013-04-22T21:35:20.014Z","type":"message"}
{"nick":"isaacs","message":"indutny: var req = http.request(...); req.write('ok'); req.end()","date":"2013-04-22T21:35:28.222Z","type":"message"}
{"nick":"indutny","message":"I know I know","date":"2013-04-22T21:35:32.301Z","type":"message"}
{"nick":"isaacs","message":"indutny: it'd be better to just not have that _send bs.","date":"2013-04-22T21:36:15.724Z","type":"message"}
{"nick":"isaacs","message":"Writable is already caching shit","date":"2013-04-22T21:36:47.399Z","type":"message"}
{"nick":"kazupon","date":"2013-04-22T21:37:36.764Z","type":"join"}
{"nick":"indutny","message":"ye","date":"2013-04-22T21:39:20.674Z","type":"message"}
{"nick":"indutny","message":"we can just call .cork()","date":"2013-04-22T21:39:29.211Z","type":"message"}
{"nick":"indutny","message":"and .uncork() it on connection ;)","date":"2013-04-22T21:39:33.981Z","type":"message"}
{"nick":"isaacs","message":"oic.","date":"2013-04-22T21:40:08.859Z","type":"message"}
{"nick":"isaacs","message":"right","date":"2013-04-22T21:40:10.141Z","type":"message"}
{"nick":"isaacs","message":"and then get rid of _send()","date":"2013-04-22T21:40:14.767Z","type":"message"}
{"nick":"isaacs","message":"you see, cork was a good idea! :)","date":"2013-04-22T21:40:18.849Z","type":"message"}
{"nick":"indutny","message":":)","date":"2013-04-22T21:40:24.308Z","type":"message"}
{"nick":"indutny","message":"haha","date":"2013-04-22T21:40:27.792Z","type":"message"}
{"nick":"isaacs","message":"indutny: couldn't we also do something like:  _write = function(..) { if (!this.socket) { this.once('socket',do the write); return false } ... }`","date":"2013-04-22T21:42:59.566Z","type":"message"}
{"nick":"isaacs","message":"but i guess that gets complicated, huh...","date":"2013-04-22T21:44:04.161Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 264 seconds","date":"2013-04-22T21:45:12.419Z","type":"quit"}
{"nick":"isaacs","message":"indutny: ok, keep exploring cork()/uncork()","date":"2013-04-22T21:45:14.379Z","type":"message"}
{"nick":"mjr__","message":"cork should be a giant perf win for chunked responses, I would guess.","date":"2013-04-22T21:45:21.730Z","type":"message"}
{"nick":"isaacs","message":"let's pretend that's the pitch","date":"2013-04-22T21:45:26.683Z","type":"message"}
{"nick":"isaacs","message":"mjr__: yeah, there's a few API ideas on the table atm","date":"2013-04-22T21:45:34.884Z","type":"message"}
{"nick":"isaacs","message":"mjr__: the goal is proper writev, finally","date":"2013-04-22T21:45:45.442Z","type":"message"}
{"nick":"isaacs","message":"after almost 3 years since ry proposed it","date":"2013-04-22T21:45:53.954Z","type":"message"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2013-04-22T21:47:22.921Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-04-22T21:52:34.346Z","type":"quit"}
{"nick":"indutny","message":":)","date":"2013-04-22T21:55:00.374Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: so they're a hack that will noticeably speed up the code, but it's ugly as monk fish.","date":"2013-04-22T21:56:43.978Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: what are a hack?","date":"2013-04-22T21:57:02.883Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: cork/uncork?","date":"2013-04-22T21:57:08.178Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: no. it's for making a super cheap slice of a buffer out of an existing object.","date":"2013-04-22T21:58:02.816Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: the hack looks like-ish : \"existing_obj.__proto__ = Buffer.prototype\"","date":"2013-04-22T21:58:30.775Z","type":"message"}
{"nick":"isaacs","message":"ok..","date":"2013-04-22T21:59:28.114Z","type":"message"}
{"nick":"isaacs","message":"i'd like to not rely on __proto__","date":"2013-04-22T21:59:33.588Z","type":"message"}
{"nick":"isaacs","message":"but what does that give us?","date":"2013-04-22T21:59:49.861Z","type":"message"}
{"nick":"trevnorris","message":"me neither. the issue arose from needing to create a buffer instance using an existing char* in cc.","date":"2013-04-22T22:00:14.820Z","type":"message"}
{"nick":"isaacs","message":"ic","date":"2013-04-22T22:00:26.945Z","type":"message"}
{"nick":"trevnorris","message":"the char* needs to be tied to an object, so right now I'm returning an unallocated buffer, then allocating to it afterwards.","date":"2013-04-22T22:00:57.229Z","type":"message"}
{"nick":"trevnorris","message":"but the real advantage would be creating a buffer from a slice, since the js specific method could do all the assigning and such.","date":"2013-04-22T22:01:36.692Z","type":"message"}
{"nick":"trevnorris","message":"i'll create a benchmark demo and let you decide from the results.","date":"2013-04-22T22:02:02.258Z","type":"message"}
{"nick":"isaacs","message":"kewl","date":"2013-04-22T22:02:19.415Z","type":"message"}
{"nick":"isaacs","message":"i've gotta relocate, bbiab","date":"2013-04-22T22:02:23.042Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine, TooTallNate: api question. Buffer::New(const char* data, size_t length) copies the data. but I want to make pretty much the same for using the original data.","date":"2013-04-22T22:07:26.779Z","type":"message"}
{"nick":"trevnorris","message":"would swapping the arguments to ::New(size_t length, char* data) be too ambiguous?","date":"2013-04-22T22:07:51.937Z","type":"message"}
{"nick":"TooTallNate","message":"trevnorris: ya, i wouldn't like that so muchj","date":"2013-04-22T22:08:22.571Z","type":"message"}
{"nick":"tjfontaine","message":"what's wrong with a ::Copy?","date":"2013-04-22T22:08:26.912Z","type":"message"}
{"nick":"TooTallNate","message":"trevnorris: or ::Use()? :D","date":"2013-04-22T22:08:33.996Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2013-04-22T22:08:39.739Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: renaming the old would break backwards compatibility.","date":"2013-04-22T22:08:52.768Z","type":"message"}
{"nick":"trevnorris","message":"ok. so just extend it. I like ::Use().","date":"2013-04-22T22:09:12.454Z","type":"message"}
{"nick":"trevnorris","message":"works for me.","date":"2013-04-22T22:09:13.952Z","type":"message"}
{"nick":"TooTallNate","message":"cool :)","date":"2013-04-22T22:09:25.104Z","type":"message"}
{"nick":"wolfeidau","date":"2013-04-22T22:09:44.682Z","type":"join"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2013-04-22T22:09:47.432Z","type":"quit"}
{"nick":"wolfeidau","date":"2013-04-22T22:09:57.592Z","type":"join"}
{"nick":"trevnorris","message":"thx both. just saved me 30 mins of head scratching.","date":"2013-04-22T22:10:05.259Z","type":"message"}
{"nick":"dscape_","reason":"*.net *.split","date":"2013-04-22T22:17:02.211Z","type":"quit"}
{"nick":"joclek","reason":"*.net *.split","date":"2013-04-22T22:17:02.471Z","type":"quit"}
{"nick":"dscape_","date":"2013-04-22T22:18:01.160Z","type":"join"}
{"nick":"joclek","date":"2013-04-22T22:18:01.291Z","type":"join"}
{"nick":"trevnorris","message":"mother effing. include/v8.h is screwed up or something. doxygen output keeps linking incorrectly. but it worked in 3.17.16","date":"2013-04-22T22:18:53.919Z","type":"message"}
{"nick":"trevnorris","message":"TooTallNate, tjfontaine: last api-ish question. there a general preference between size_t and uint32_t?","date":"2013-04-22T22:20:50.496Z","type":"message"}
{"nick":"gblock","date":"2013-04-22T22:20:58.098Z","type":"join"}
{"nick":"trevnorris","message":"i started using the later since use Uint32Value() on passed arguments.","date":"2013-04-22T22:21:07.601Z","type":"message"}
{"nick":"TooTallNate","message":"trevnorris: i think on 64-bit, size_t is 64-bit","date":"2013-04-22T22:22:18.086Z","type":"message"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2013-04-22T22:22:19.515Z","type":"quit"}
{"nick":"tjfontaine","message":"for expressing what? if I'm expressing the size/length of something I generally prefer size_t","date":"2013-04-22T22:22:20.871Z","type":"message"}
{"nick":"tjfontaine","message":"which as TooTallNate points out, differs based on platform","date":"2013-04-22T22:22:40.338Z","type":"message"}
{"nick":"trevnorris","message":"ok so \"size_t val = args[0]->Uint32Value();\" is nothing bad or whatnot?","date":"2013-04-22T22:23:31.094Z","type":"message"}
{"nick":"trevnorris","message":"was using uint32_t since that's as large a reliable integer can be passed from js, so didn't need a larger value.","date":"2013-04-22T22:24:41.746Z","type":"message"}
{"nick":"tjfontaine","message":"if you do maths on it though it would be better to use a size_t for it","date":"2013-04-22T22:25:23.458Z","type":"message"}
{"nick":"trevnorris","message":"noted. thanks.","date":"2013-04-22T22:26:05.604Z","type":"message"}
{"nick":"gblock","date":"2013-04-22T22:31:48.903Z","type":"part"}
{"nick":"kazupon","date":"2013-04-22T22:32:56.273Z","type":"join"}
{"nick":"c4milo","date":"2013-04-22T22:39:10.420Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-04-22T22:40:04.477Z","type":"quit"}
{"nick":"indexzero","date":"2013-04-22T22:44:37.629Z","type":"join"}
{"nick":"wolfeidau","reason":"Read error: Connection reset by peer","date":"2013-04-22T22:58:19.586Z","type":"quit"}
{"nick":"wolfeidau","date":"2013-04-22T22:58:43.544Z","type":"join"}
{"nick":"saghul","reason":"Ping timeout: 264 seconds","date":"2013-04-22T23:01:54.161Z","type":"quit"}
{"nick":"dscape_","reason":"*.net *.split","date":"2013-04-22T23:11:55.463Z","type":"quit"}
{"nick":"joclek","reason":"*.net *.split","date":"2013-04-22T23:11:55.596Z","type":"quit"}
{"nick":"dscape_","date":"2013-04-22T23:12:40.509Z","type":"join"}
{"nick":"joclek","date":"2013-04-22T23:12:40.639Z","type":"join"}
{"nick":"kenperkins","date":"2013-04-22T23:13:25.360Z","type":"join"}
{"nick":"kenperkins","message":"indutny around?","date":"2013-04-22T23:13:34.208Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-04-22T23:15:26.196Z","type":"nick"}
{"nick":"stagas","reason":"Read error: Connection reset by peer","date":"2013-04-22T23:31:48.469Z","type":"quit"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2013-04-22T23:34:20.639Z","type":"quit"}
{"nick":"kazupon","date":"2013-04-22T23:40:28.489Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 252 seconds","date":"2013-04-22T23:45:11.522Z","type":"quit"}
{"nick":"tjfontaine","message":"I need to rerun this, most of net and http have incosequential differences with osx+libumem but checkout out http-cluster bench with it https://gist.github.com/tjfontaine/5439628","date":"2013-04-22T23:55:41.203Z","type":"message"}
