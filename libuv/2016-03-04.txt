{"nick":"rendar","date":"2016-03-04T07:30:46.998Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-03-04T07:56:54.975Z","type":"join"}
{"nick":"happy-dude","reason":"Ping timeout: 250 seconds","date":"2016-03-04T08:23:51.028Z","type":"quit"}
{"nick":"happy-dude","date":"2016-03-04T08:27:24.368Z","type":"join"}
{"nick":"rendar","message":"if i have 2 uv_loop_t, can i start a I/O request on the second loop, with a request from the first one? e.g. echo-server, i add read fds in the first loop, and write fds t the second loop, when a read I/O request completes from the first loop, i start a new write request in the second loop, with the same uv_req_t object.. OR, every uv_req_t object belongs to a single uv_loop_t and that can't be ","date":"2016-03-04T08:37:35.259Z","type":"message"}
{"nick":"rendar","message":"changed?","date":"2016-03-04T08:37:35.480Z","type":"message"}
{"nick":"saghul","message":"rendar: each handle belongs to a loop","date":"2016-03-04T08:52:40.783Z","type":"message"}
{"nick":"saghul","message":"so you have to read and write on that loop","date":"2016-03-04T08:52:51.157Z","type":"message"}
{"nick":"rendar","message":"saghul: yeah i know that","date":"2016-03-04T09:01:10.511Z","type":"message"}
{"nick":"rendar","message":"saghul: i was talking about uv_req_t not uv_handle_t","date":"2016-03-04T09:01:20.493Z","type":"message"}
{"nick":"rendar","message":"saghul: i know that each fd, or handle belongs to a loop, and can't be changed, but what about the uv_req_t objects?","date":"2016-03-04T09:01:43.278Z","type":"message"}
{"nick":"saghul","message":"rendar: requests are always operating on a handle","date":"2016-03-04T09:16:59.366Z","type":"message"}
{"nick":"saghul","message":"so the handle rules apply","date":"2016-03-04T09:17:06.664Z","type":"message"}
{"nick":"rendar","message":"saghul: yeah","date":"2016-03-04T09:18:05.486Z","type":"message"}
{"nick":"wuqiong","reason":"Remote host closed the connection","date":"2016-03-04T09:19:17.882Z","type":"quit"}
{"nick":"rendar","message":"saghul: but since when an I/O operation completes, the uv_req_t doesn't belong to the handle anymore, right? because if the I/O operation is finished, i could also *delete* the uv_req_t, so, if i can delete that, i thought i could be able to pass that uv_req_t to another handle of another loop","date":"2016-03-04T09:19:24.999Z","type":"message"}
{"nick":"happy-dude","reason":"Quit: Connection closed for inactivity","date":"2016-03-04T09:19:52.557Z","type":"quit"}
{"nick":"PerilousApricot","date":"2016-03-04T09:26:58.106Z","type":"join"}
{"nick":"wuqiong","date":"2016-03-04T09:28:17.116Z","type":"join"}
{"nick":"PerilousApricot","reason":"Ping timeout: 264 seconds","date":"2016-03-04T09:32:16.084Z","type":"quit"}
{"nick":"seishun","date":"2016-03-04T09:40:13.989Z","type":"join"}
{"nick":"saghul","message":"rendar: only *after* the operation is finished, that is, after the callback was called","date":"2016-03-04T09:43:25.128Z","type":"message"}
{"nick":"Guest36547","reason":"Read error: Connection reset by peer","date":"2016-03-04T09:49:30.851Z","type":"quit"}
{"nick":"kenansulayman","date":"2016-03-04T09:49:48.756Z","type":"join"}
{"nick":"kenansulayman","new_nick":"Guest19777","date":"2016-03-04T09:50:11.076Z","type":"nick"}
{"nick":"Guest19777","reason":"Max SendQ exceeded","date":"2016-03-04T09:51:39.686Z","type":"quit"}
{"nick":"kenansul-","date":"2016-03-04T09:52:57.770Z","type":"join"}
{"nick":"wuqiong","reason":"Remote host closed the connection","date":"2016-03-04T09:58:54.550Z","type":"quit"}
{"nick":"kenansul-","reason":"Ping timeout: 244 seconds","date":"2016-03-04T10:00:47.743Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 250 seconds","date":"2016-03-04T10:06:33.014Z","type":"quit"}
{"nick":"rendar","message":"saghul: of course","date":"2016-03-04T10:06:39.529Z","type":"message"}
{"nick":"rendar","message":"saghul: when on_read() has been called, the I/O operation is finished, so i can reuse that uv_req_t for *another* I/O request, for *another* handle, in *another* loop, right?","date":"2016-03-04T10:07:19.482Z","type":"message"}
{"nick":"rendar","message":"saghul: because when a request is finished, that uv_req_t would be only a piece of memory, i can use also in another loop, am i right?","date":"2016-03-04T10:07:49.504Z","type":"message"}
{"nick":"rendar","message":"OR, every uv_loop_t *must* allocate uv_req_t and use them always inside the same loop for their entire allocation?","date":"2016-03-04T10:08:27.535Z","type":"message"}
{"nick":"kenansul-","date":"2016-03-04T10:10:19.701Z","type":"join"}
{"nick":"kenansul|","date":"2016-03-04T10:13:33.713Z","type":"join"}
{"nick":"kenansul-","reason":"Ping timeout: 244 seconds","date":"2016-03-04T10:16:48.713Z","type":"quit"}
{"nick":"rendar","message":"saghul: oh, you mean *after* on_read() calling? otherwise, *after* when on_read() returns?","date":"2016-03-04T10:22:47.337Z","type":"message"}
{"nick":"[spoiler]","reason":"Quit: Cheers!","date":"2016-03-04T10:29:28.409Z","type":"quit"}
{"nick":"[spoiler]","date":"2016-03-04T10:42:15.997Z","type":"join"}
{"nick":"saghul","message":"rendar: you can reuse it in that case","date":"2016-03-04T10:44:24.991Z","type":"message"}
{"nick":"rendar","message":"saghul: so, after on_read() returned right? e.g. on_read() { // CAN'T reuse it here } // CAN reuse it here","date":"2016-03-04T10:45:28.745Z","type":"message"}
{"nick":"saghul","message":"I don't recall, but do it that way, just to be on the safe side","date":"2016-03-04T10:46:27.414Z","type":"message"}
{"nick":"rendar","message":"saghul: i see, thanks","date":"2016-03-04T10:47:06.578Z","type":"message"}
{"nick":"fierydrake","date":"2016-03-04T10:47:20.519Z","type":"join"}
{"nick":"Ruyi","reason":"Read error: Connection reset by peer","date":"2016-03-04T10:57:42.744Z","type":"quit"}
{"nick":"wuqiong","date":"2016-03-04T11:00:00.065Z","type":"join"}
{"nick":"wuqiong","reason":"Ping timeout: 248 seconds","date":"2016-03-04T11:06:38.055Z","type":"quit"}
{"nick":"davi","date":"2016-03-04T11:15:12.000Z","type":"join"}
{"nick":"petka____","date":"2016-03-04T11:55:07.073Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 244 seconds","date":"2016-03-04T11:55:31.056Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-03-04T12:39:16.167Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 268 seconds","date":"2016-03-04T13:39:56.172Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-03-04T14:46:04.999Z","type":"join"}
{"nick":"s3shs","date":"2016-03-04T14:46:37.357Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 250 seconds","date":"2016-03-04T14:50:48.974Z","type":"quit"}
{"nick":"cremes","reason":"Ping timeout: 268 seconds","date":"2016-03-04T14:51:28.351Z","type":"quit"}
{"nick":"Guest85301","new_nick":"indutny","date":"2016-03-04T14:52:09.646Z","type":"nick"}
{"nick":"PerilousApricot","date":"2016-03-04T15:00:40.771Z","type":"join"}
{"nick":"PerilousApricot","reason":"Ping timeout: 260 seconds","date":"2016-03-04T15:05:17.734Z","type":"quit"}
{"nick":"PerilousApricot","date":"2016-03-04T15:10:02.174Z","type":"join"}
{"nick":"PerilousApricot","reason":"Remote host closed the connection","date":"2016-03-04T15:10:11.546Z","type":"quit"}
{"nick":"PerilousApricot","date":"2016-03-04T15:10:21.530Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-03-04T15:19:08.148Z","type":"join"}
{"nick":"mmicko","reason":"Remote host closed the connection","date":"2016-03-04T15:24:57.618Z","type":"quit"}
{"nick":"alexforster","date":"2016-03-04T15:32:19.492Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 248 seconds","date":"2016-03-04T15:37:34.424Z","type":"quit"}
{"nick":"cremes","date":"2016-03-04T15:50:35.822Z","type":"join"}
{"nick":"Fishrock123","date":"2016-03-04T15:56:17.400Z","type":"join"}
