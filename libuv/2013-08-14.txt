{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-08-14T00:00:00.917Z","type":"quit"}
{"nick":"ircretary","date":"2013-08-14T00:00:08.387Z","type":"join"}
{"nick":"paulfryzel","reason":"Ping timeout: 256 seconds","date":"2013-08-14T00:03:58.658Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-08-14T00:13:36.279Z","type":"quit"}
{"nick":"groundwater","reason":"Quit: groundwater","date":"2013-08-14T00:23:36.959Z","type":"quit"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-08-14T00:34:39.058Z","type":"quit"}
{"nick":"mordy___","message":"hrm; is there some kind of estimate to determine how much memory it *should* be using?","date":"2013-08-14T00:37:05.029Z","type":"message"}
{"nick":"mordy___","message":"i just want to rule out anything that's causing issues.. recompiling everything so i can use VS' malloc doesn't seem like a nice option","date":"2013-08-14T00:37:33.165Z","type":"message"}
{"nick":"mordy___","message":"there's something called 'drmemory' but node won't run nicely under it","date":"2013-08-14T00:37:44.889Z","type":"message"}
{"nick":"mordy___","message":"now it seems to be jumping from 37M -> 47M; and apparently something is freed when it reaches 47M and goes back to 37","date":"2013-08-14T00:39:15.513Z","type":"message"}
{"nick":"hueniverse1","date":"2013-08-14T00:57:51.727Z","type":"join"}
{"nick":"hueniverse","reason":"Ping timeout: 264 seconds","date":"2013-08-14T00:57:51.937Z","type":"quit"}
{"nick":"kazupon","date":"2013-08-14T01:00:58.486Z","type":"join"}
{"nick":"dap","reason":"Quit: Leaving.","date":"2013-08-14T01:02:30.554Z","type":"quit"}
{"nick":"indexzero","date":"2013-08-14T01:09:30.113Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-08-14T01:19:23.359Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-08-14T01:25:45.318Z","type":"quit"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2013-08-14T02:03:41.940Z","type":"quit"}
{"nick":"brson","reason":"Ping timeout: 245 seconds","date":"2013-08-14T02:11:15.155Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-08-14T03:04:42.075Z","type":"nick"}
{"nick":"indexzero","date":"2013-08-14T03:08:37.473Z","type":"join"}
{"nick":"stagas","reason":"Ping timeout: 246 seconds","date":"2013-08-14T03:37:07.927Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-08-14T03:58:40.469Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-08-14T04:24:51.161Z","type":"quit"}
{"nick":"st_luke","date":"2013-08-14T04:29:57.033Z","type":"join"}
{"nick":"st_luke","reason":"Remote host closed the connection","date":"2013-08-14T04:40:12.242Z","type":"quit"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-08-14T04:53:19.656Z","type":"nick"}
{"nick":"kazupon","date":"2013-08-14T04:54:29.285Z","type":"join"}
{"nick":"txdv","reason":"Read error: Operation timed out","date":"2013-08-14T05:11:05.197Z","type":"quit"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2013-08-14T05:14:09.182Z","type":"quit"}
{"nick":"Guest85773","reason":"Ping timeout: 245 seconds","date":"2013-08-14T05:16:15.198Z","type":"quit"}
{"nick":"Damn3d","date":"2013-08-14T05:21:48.875Z","type":"join"}
{"nick":"amartens","date":"2013-08-14T05:52:53.201Z","type":"join"}
{"nick":"AvianFlu","date":"2013-08-14T05:58:35.492Z","type":"join"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-08-14T05:59:09.641Z","type":"quit"}
{"nick":"amartens","date":"2013-08-14T06:05:19.910Z","type":"join"}
{"nick":"amartens","reason":"Client Quit","date":"2013-08-14T06:06:23.488Z","type":"quit"}
{"nick":"amartens","date":"2013-08-14T06:16:25.316Z","type":"join"}
{"nick":"amartens","reason":"Client Quit","date":"2013-08-14T06:16:34.414Z","type":"quit"}
{"nick":"felixge","date":"2013-08-14T06:25:46.343Z","type":"join"}
{"nick":"felixge","reason":"Changing host","date":"2013-08-14T06:25:46.343Z","type":"quit"}
{"nick":"felixge","date":"2013-08-14T06:25:46.343Z","type":"join"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-08-14T06:28:41.386Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-08-14T06:37:56.304Z","type":"nick"}
{"nick":"spolu","date":"2013-08-14T07:16:43.798Z","type":"join"}
{"nick":"hueniverse1","reason":"Read error: Connection reset by peer","date":"2013-08-14T07:25:54.585Z","type":"quit"}
{"nick":"hueniverse","date":"2013-08-14T07:32:30.289Z","type":"join"}
{"nick":"bajtos","date":"2013-08-14T07:34:00.025Z","type":"join"}
{"nick":"hz","date":"2013-08-14T07:35:22.072Z","type":"join"}
{"nick":"dsantiago","reason":"Ping timeout: 240 seconds","date":"2013-08-14T07:56:23.934Z","type":"quit"}
{"nick":"hz","reason":"Ping timeout: 268 seconds","date":"2013-08-14T08:00:05.074Z","type":"quit"}
{"nick":"rendar","date":"2013-08-14T08:00:13.172Z","type":"join"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-08-14T08:03:36.213Z","type":"nick"}
{"nick":"`3E|Zzz","new_nick":"`3rdEden","date":"2013-08-14T08:23:46.781Z","type":"nick"}
{"nick":"saghul[afk]","new_nick":"saghul","date":"2013-08-14T08:26:20.043Z","type":"nick"}
{"nick":"dsantiago","date":"2013-08-14T08:35:25.899Z","type":"join"}
{"nick":"piscisaureus_","date":"2013-08-14T08:35:28.208Z","type":"join"}
{"nick":"piscisaureus_","reason":"Ping timeout: 246 seconds","date":"2013-08-14T08:43:22.972Z","type":"quit"}
{"nick":"Damn3d","reason":"Ping timeout: 246 seconds","date":"2013-08-14T08:52:28.940Z","type":"quit"}
{"nick":"Damn3d","date":"2013-08-14T08:53:59.161Z","type":"join"}
{"nick":"stagas","date":"2013-08-14T08:56:33.931Z","type":"join"}
{"nick":"perezd","reason":"Quit: perezd","date":"2013-08-14T09:02:24.482Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-08-14T09:15:19.400Z","type":"nick"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-08-14T09:23:29.952Z","type":"quit"}
{"nick":"piscisaureus_","date":"2013-08-14T09:27:04.250Z","type":"join"}
{"nick":"mraleph","reason":"Read error: Connection reset by peer","date":"2013-08-14T09:30:56.922Z","type":"quit"}
{"nick":"rendar","message":"i'm studying libuv code, and on the linux's epoll dispatch function, i'm stuck on w->cb(loop, w, pe->events); what that 'cb' points to?","date":"2013-08-14T09:31:28.588Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-08-14T09:32:03.578Z","type":"nick"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-08-14T09:33:16.943Z","type":"nick"}
{"nick":"dominictarr","date":"2013-08-14T09:39:58.124Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-08-14T09:47:26.182Z","type":"join"}
{"nick":"rendar","message":"i'm studying libuv code, and on the linux's epoll dispatch function, i'm stuck on w->cb(loop, w, pe->events); what that 'cb' points to? i know that 'w' is a uv__io_t, but where 'cb' points to there?","date":"2013-08-14T09:50:53.702Z","type":"message"}
{"nick":"wolfeidau","date":"2013-08-14T09:51:45.380Z","type":"join"}
{"nick":"bnoordhuis","message":"rendar: an internal libuv callback","date":"2013-08-14T09:57:49.715Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: usually uv__stream_io or uv__server_io","date":"2013-08-14T09:58:04.092Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, thanks, where are those defined? basically i want to understand how libuv can abstract epoll/kqueue/etc to iocp, since their design is completely different...","date":"2013-08-14T09:59:05.335Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: the two i mentioned live in src/unix/stream.c","date":"2013-08-14T09:59:30.651Z","type":"message"}
{"nick":"rendar","message":"thanks","date":"2013-08-14T09:59:44.151Z","type":"message"}
{"nick":"bnoordhuis","message":"there's also uv__udp_something in src/unix/udp.c","date":"2013-08-14T09:59:48.822Z","type":"message"}
{"nick":"bnoordhuis","message":"basically, grep for calls to uv__io_init and you'll find the callbacks","date":"2013-08-14T10:00:06.617Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, cool! what i can't understand is how some facility which tells you that an fd is *ready* to be written or read, can be abstracted with iocp which tells you that the reading/writing are completed, within the buffer pointer and n bytes... i guess you have to save those 2 values somewhere...","date":"2013-08-14T10:01:49.143Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: i'm not sure i understand i question. are you asking how uv-unix simulates completion-based i/o?","date":"2013-08-14T10:03:18.419Z","type":"message"}
{"nick":"rendar","message":"yes exactly","date":"2013-08-14T10:03:42.920Z","type":"message"}
{"nick":"rendar","message":"just some hint to understand the \"big picture\"","date":"2013-08-14T10:04:05.151Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: right. it's easy really","date":"2013-08-14T10:04:29.631Z","type":"message"}
{"nick":"bnoordhuis","message":"i/o on unices is readiness based","date":"2013-08-14T10:04:44.453Z","type":"message"}
{"nick":"rendar","message":"yep","date":"2013-08-14T10:04:56.467Z","type":"message"}
{"nick":"bnoordhuis","message":"libuv just has to execute the reads and writes on your behalf","date":"2013-08-14T10:04:57.368Z","type":"message"}
{"nick":"bnoordhuis","message":"and when it's done reading/writing, ping you","date":"2013-08-14T10:05:07.243Z","type":"message"}
{"nick":"bnoordhuis","message":"et voila, you have completion-based i/o :)","date":"2013-08-14T10:05:13.307Z","type":"message"}
{"nick":"rendar","message":"hmmm, yeah pretty simple :)","date":"2013-08-14T10:05:31.130Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, so when i perform a read, libuv saves that i have performed that read on buffer 'buf' and 'n' bytes. instead of calling *mimmediately* unix's read() it waits until it receives a you-can-read-now notify, then libuv calls unix's read() under the hood, and when its finished, it pings you, calling e.g. on_read(buf, n)","date":"2013-08-14T10:07:17.719Z","type":"message"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2013-08-14T10:10:43.631Z","type":"quit"}
{"nick":"bnoordhuis","message":"rendar: that's pretty much how it works","date":"2013-08-14T10:14:41.765Z","type":"message"}
{"nick":"bnoordhuis","message":"uv_read_start() tells libuv to start waiting for read readiness","date":"2013-08-14T10:15:00.426Z","type":"message"}
{"nick":"bnoordhuis","message":"once that happens it calls your alloc_cb to get a buffer to read into, then it does the actual read, then it calls your read_cb","date":"2013-08-14T10:15:33.395Z","type":"message"}
{"nick":"bnoordhuis","message":"the order on windows is a little different: you provide the buffer up front (usually) and then wait until data's received","date":"2013-08-14T10:16:01.772Z","type":"message"}
{"nick":"bnoordhuis","message":"uv-unix doesn't emulate that particular windows behavior because it means you'll generally have a higher memory footprint","date":"2013-08-14T10:16:44.923Z","type":"message"}
{"nick":"piscisaureus_","message":"hey bnoordhuis","date":"2013-08-14T10:18:15.870Z","type":"message"}
{"nick":"piscisaureus_","message":"is it true that the slab allocator is now ripped out?","date":"2013-08-14T10:19:13.411Z","type":"message"}
{"nick":"piscisaureus_","message":"ab w/ keepalive got 20% slower (again!) between 0.10 and master","date":"2013-08-14T10:19:53.017Z","type":"message"}
{"nick":"bnoordhuis","message":"piscisaureus_: yes and that shouldn't be the case","date":"2013-08-14T10:20:24.020Z","type":"message"}
{"nick":"bnoordhuis","message":"did you check what in particular got slower?","date":"2013-08-14T10:21:31.671Z","type":"message"}
{"nick":"bnoordhuis","message":"i.e. ran any profiling?","date":"2013-08-14T10:21:40.055Z","type":"message"}
{"nick":"piscisaureus_","message":"no i just ran into it","date":"2013-08-14T10:22:19.160Z","type":"message"}
{"nick":"piscisaureus_","message":"I will plan doing that but first I have to finish execSync :)","date":"2013-08-14T10:22:31.524Z","type":"message"}
{"nick":"spolu","reason":"Ping timeout: 264 seconds","date":"2013-08-14T10:24:09.788Z","type":"quit"}
{"nick":"rendar","message":"i see","date":"2013-08-14T10:28:46.965Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, so if i got it, in unix on_read will receive the buffer allocated with alloc_cb? and not the buffer passed by the user?","date":"2013-08-14T10:30:50.109Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: read_cb gets the buffer that alloc_cb returned","date":"2013-08-14T10:40:23.431Z","type":"message"}
{"nick":"bnoordhuis","message":"where else would it get the buffer from? :)","date":"2013-08-14T10:40:40.445Z","type":"message"}
{"nick":"rendar","message":"well, if you have e.g. ssize_t uv_read(uv_tcp_t*, uv_buf_t* buf); the user himself can pass a buffer that will be used for reading, right?","date":"2013-08-14T10:41:54.004Z","type":"message"}
{"nick":"kazupon","date":"2013-08-14T10:44:12.826Z","type":"join"}
{"nick":"bnoordhuis","message":"rendar: yes. but there is no uv_read()","date":"2013-08-14T10:44:37.285Z","type":"message"}
{"nick":"hz","date":"2013-08-14T10:45:47.780Z","type":"join"}
{"nick":"rendar","message":"oh","date":"2013-08-14T10:46:19.920Z","type":"message"}
{"nick":"rendar","message":"so there is for example uv_fs_read()","date":"2013-08-14T10:46:24.827Z","type":"message"}
{"nick":"rendar","message":"and so on..","date":"2013-08-14T10:46:27.851Z","type":"message"}
{"nick":"bnoordhuis","message":"yeah, but the fs part should be a strong hint as to what it does :)","date":"2013-08-14T10:48:16.363Z","type":"message"}
{"nick":"rendar","message":"yeah","date":"2013-08-14T10:49:30.004Z","type":"message"}
{"nick":"rendar","message":"instead with networking we have read_start_* and read_stop_*, right?","date":"2013-08-14T10:49:48.335Z","type":"message"}
{"nick":"bnoordhuis","message":"yep","date":"2013-08-14T10:50:08.661Z","type":"message"}
{"nick":"rendar","message":"read_start_ allocate the buffer with alloc_cb, and read_stop_ will deallocate it","date":"2013-08-14T10:50:12.910Z","type":"message"}
{"nick":"bnoordhuis","message":"no","date":"2013-08-14T10:50:17.696Z","type":"message"}
{"nick":"bnoordhuis","message":"uv_read_start() just tells libuv to start watching for read readiness","date":"2013-08-14T10:50:33.931Z","type":"message"}
{"nick":"bnoordhuis","message":"when the socket is readable, it does the alloc_cb/read_cb dance","date":"2013-08-14T10:50:50.464Z","type":"message"}
{"nick":"rendar","message":"oh","date":"2013-08-14T10:50:59.673Z","type":"message"}
{"nick":"bnoordhuis","message":"it's up to the read_cb to free the buffer again, if necessary","date":"2013-08-14T10:51:02.730Z","type":"message"}
{"nick":"bnoordhuis","message":"uv_read_stop() is just the counterpart of uv_read_start()","date":"2013-08-14T10:51:22.263Z","type":"message"}
{"nick":"rendar","message":"this will be a less memory footprint because the buffer is allocated only when is needed, instead that each open connection has a buffer","date":"2013-08-14T10:51:46.811Z","type":"message"}
{"nick":"bnoordhuis","message":"yes, correct","date":"2013-08-14T10:52:26.812Z","type":"message"}
{"nick":"rendar","message":"but what about a connection does high and frequent reads? in that case you'll have many allocations/deallocations?","date":"2013-08-14T10:53:03.211Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: hoya","date":"2013-08-14T10:53:37.368Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: I'm trying to reproduce this fs.watch issue on mac","date":"2013-08-14T10:53:47.580Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: yes. that's why node uses (or used to use) a slab allocator","date":"2013-08-14T10:53:48.119Z","type":"message"}
{"nick":"indutny","message":"bnoordhuis: hi","date":"2013-08-14T10:53:56.469Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, i see now","date":"2013-08-14T10:53:56.683Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: having a bit of trouble with this, though","date":"2013-08-14T10:54:04.924Z","type":"message"}
{"nick":"indutny","message":"https://gist.github.com/indutny/2ccdd6cee4b97ddbefbb","date":"2013-08-14T10:54:19.382Z","type":"message"}
{"nick":"indutny","message":"it seems to be generally working on master","date":"2013-08-14T10:54:29.355Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, i see","date":"2013-08-14T10:54:45.531Z","type":"message"}
{"nick":"indutny","message":"and 0.10.13","date":"2013-08-14T10:54:51.999Z","type":"message"}
{"nick":"bnoordhuis","message":"\"Also bringing up these topics in unrelated conversations is kind of annoying and people should refrain from that. Hello Michaël Rouges, we can all read the topic index ourselves, thanks.\"","date":"2013-08-14T10:55:11.396Z","type":"message"}
{"nick":"bnoordhuis","message":"oh snap!","date":"2013-08-14T10:55:15.403Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, well, doesn't the slab allocator generate some bottleneck since (i guess) it must be export an *interlocked* allocation, in order to work with multiple threads?","date":"2013-08-14T10:55:50.377Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: not an issue for node, it's single-threaded","date":"2013-08-14T10:56:22.078Z","type":"message"}
{"nick":"rendar","message":"oh, ok","date":"2013-08-14T10:56:34.443Z","type":"message"}
{"nick":"piscisaureus_","reason":"Ping timeout: 276 seconds","date":"2013-08-14T10:57:21.919Z","type":"quit"}
{"nick":"indutny","message":"bnoordhuis: is bert anywhere around you?","date":"2013-08-14T10:58:58.903Z","type":"message"}
{"nick":"indutny","message":":)","date":"2013-08-14T10:58:59.727Z","type":"message"}
{"nick":"bnoordhuis","message":"indutny: no, he's in 020","date":"2013-08-14T10:59:21.334Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, isn't this thing of slab allocator and on-readyness allocated buffers similar to that libevent2's buffered abstraction?","date":"2013-08-14T10:59:21.822Z","type":"message"}
{"nick":"indutny","message":"http://en.wikipedia.org/wiki/020 ?","date":"2013-08-14T10:59:32.936Z","type":"message"}
{"nick":"indutny","message":"london?","date":"2013-08-14T10:59:34.308Z","type":"message"}
{"nick":"bnoordhuis","message":"indutny: no, amsterdam :)","date":"2013-08-14T10:59:41.246Z","type":"message"}
{"nick":"indutny","message":"oh","date":"2013-08-14T10:59:46.241Z","type":"message"}
{"nick":"indutny","message":"ok","date":"2013-08-14T10:59:46.710Z","type":"message"}
{"nick":"indutny","message":";)","date":"2013-08-14T10:59:47.682Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: possibly. i don't know libevent2 that well","date":"2013-08-14T10:59:53.544Z","type":"message"}
{"nick":"rendar","message":"ok","date":"2013-08-14T10:59:57.922Z","type":"message"}
{"nick":"bnoordhuis","message":"worked with the original libevent for quite some time","date":"2013-08-14T11:00:06.269Z","type":"message"}
{"nick":"bnoordhuis","message":"and that kind of turned me off","date":"2013-08-14T11:00:15.793Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, eheh i see, why?","date":"2013-08-14T11:00:58.442Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: oh, mostly because everything takes just a little too much effort","date":"2013-08-14T11:01:27.644Z","type":"message"}
{"nick":"bnoordhuis","message":"and libevent sits at just the wrong level of abstraction","date":"2013-08-14T11:01:35.617Z","type":"message"}
{"nick":"rendar","message":"i definitely think so","date":"2013-08-14T11:01:49.137Z","type":"message"}
{"nick":"rendar","message":"i saw some libevent's apis and examples time ago, they where just very difficult to use","date":"2013-08-14T11:02:09.105Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis,  i think libev is far better than libevent, unfortunately it doesn't support win nt","date":"2013-08-14T11:03:48.368Z","type":"message"}
{"nick":"hz","reason":"Remote host closed the connection","date":"2013-08-14T11:04:09.865Z","type":"quit"}
{"nick":"bnoordhuis","message":"rendar: no, and it never will - well, not efficiently anyway","date":"2013-08-14T11:04:34.119Z","type":"message"}
{"nick":"bnoordhuis","message":"it's very much built around the concept of readiness-bases i/o, not completion-based i/o","date":"2013-08-14T11:04:52.138Z","type":"message"}
{"nick":"bnoordhuis","message":"also, and apropos nothing, its author is an annoying german","date":"2013-08-14T11:05:09.689Z","type":"message"}
{"nick":"rendar","message":"mmm yeah","date":"2013-08-14T11:05:10.921Z","type":"message"}
{"nick":"rendar","message":"lol","date":"2013-08-14T11:05:16.433Z","type":"message"}
{"nick":"hz","date":"2013-08-14T11:05:20.283Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2013-08-14T11:08:17.785Z","type":"quit"}
{"nick":"rendar","message":"bnoordhuis, how much is the memory footprint shrunk by this optimization of that buffer is allocated only when fd are ready to be read/write?","date":"2013-08-14T11:10:21.364Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: ah, that's the kind of question to which there's no exact answer","date":"2013-08-14T11:11:41.861Z","type":"message"}
{"nick":"bnoordhuis","message":"it's somewhere in the range of 'nothing' to 'a lot'","date":"2013-08-14T11:11:54.877Z","type":"message"}
{"nick":"rendar","message":"yeah i guess so","date":"2013-08-14T11:12:13.980Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, consider if we didn't have that..so the user passed its own buffer to uv_start_read()...so the {buf,size} passed by the user should have been saved somewhere, so when epoll_wait() returns, and there is a readyness for read, libuv could have used that {buf,size} to call unix's read() -- right?","date":"2013-08-14T11:13:39.228Z","type":"message"}
{"nick":"saghul","message":"rendar FWIW,in pyuv I use a statically allocated buffer in alloc_cb, so it's up to read_cb to copy it","date":"2013-08-14T11:14:36.989Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: sorry, have to run - back in ~1 hour","date":"2013-08-14T11:14:49.834Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis, ok","date":"2013-08-14T11:14:56.898Z","type":"message"}
{"nick":"rendar","message":"saghul, hmmm i see","date":"2013-08-14T11:15:00.344Z","type":"message"}
{"nick":"rendar","message":"saghul, but i was wondering if libuv had these static buffer, then its design could have be different","date":"2013-08-14T11:15:45.633Z","type":"message"}
{"nick":"saghul","message":"rendar the way it is, it allows you to choose how to do it, doesn't it?","date":"2013-08-14T11:16:17.569Z","type":"message"}
{"nick":"piscisaureus_","date":"2013-08-14T11:16:48.552Z","type":"join"}
{"nick":"rendar","message":"saghul, not really because you still have to call alloc_cb, and you still have uv_start_read()..instead i was wondering about specifying user's {buf,size} and save them internally","date":"2013-08-14T11:17:23.354Z","type":"message"}
{"nick":"saghul","message":"ah, and reuse the buffer every time?","date":"2013-08-14T11:18:05.958Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 246 seconds","date":"2013-08-14T11:19:07.997Z","type":"quit"}
{"nick":"saghul","message":"rendar I think you can achieve that by returning the same thing in alloc_cb all the time, you have the extra callback function though","date":"2013-08-14T11:19:26.045Z","type":"message"}
{"nick":"rendar","message":"yeah","date":"2013-08-14T11:20:26.373Z","type":"message"}
{"nick":"hz","reason":"Remote host closed the connection","date":"2013-08-14T11:26:50.200Z","type":"quit"}
{"nick":"hz","date":"2013-08-14T11:27:44.680Z","type":"join"}
{"nick":"piscisaureus_","message":"13:37 guys","date":"2013-08-14T11:37:17.267Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: hoya","date":"2013-08-14T11:44:06.737Z","type":"message"}
{"nick":"piscisaureus_","message":"hey fedor","date":"2013-08-14T11:44:19.655Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: I think I know what's causing fs.watch problems that you observe","date":"2013-08-14T11:44:22.325Z","type":"message"}
{"nick":"piscisaureus_","message":"indutny: what is it?","date":"2013-08-14T11:44:31.339Z","type":"message"}
{"nick":"indutny","message":"that's my stupid thread-safety assumptions about FSEvents API","date":"2013-08-14T11:44:33.699Z","type":"message"}
{"nick":"piscisaureus_","message":"is it fixable?","date":"2013-08-14T11:44:47.202Z","type":"message"}
{"nick":"indutny","message":"I think the callback invokes after FSEventStreamStop","date":"2013-08-14T11:44:49.091Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: yeah, I'll rewrite that piece of code :P","date":"2013-08-14T11:44:56.728Z","type":"message"}
{"nick":"indutny","message":"to do all the stuff from CF thread","date":"2013-08-14T11:45:05.575Z","type":"message"}
{"nick":"piscisaureus_","message":"I could tell that the arguments passed to the callback were garbage","date":"2013-08-14T11:45:06.491Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: that's quite obvious","date":"2013-08-14T11:45:15.384Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: from disassembly dump you gave me","date":"2013-08-14T11:45:22.216Z","type":"message"}
{"nick":"indutny","message":"it seems that handle->realpath is NULL","date":"2013-08-14T11:45:28.589Z","type":"message"}
{"nick":"indutny","message":"and the only condition when it could happen is after uv_close() of handle","date":"2013-08-14T11:45:49.222Z","type":"message"}
{"nick":"piscisaureus_","message":"right","date":"2013-08-14T11:53:07.166Z","type":"message"}
{"nick":"piscisaureus_","message":"well atleast I asked the right question then :-p","date":"2013-08-14T11:53:15.867Z","type":"message"}
{"nick":"indutny","message":"haha","date":"2013-08-14T11:54:31.138Z","type":"message"}
{"nick":"piscisaureus_","message":"why does uv_buf_init take a const char* ?","date":"2013-08-14T11:56:45.914Z","type":"message"}
{"nick":"piscisaureus_","message":"oh nevermind it doesn't","date":"2013-08-14T11:57:00.055Z","type":"message"}
{"nick":"piscisaureus_","message":"msvc is just confused","date":"2013-08-14T11:57:05.302Z","type":"message"}
{"nick":"hz","reason":"Ping timeout: 256 seconds","date":"2013-08-14T12:00:15.352Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-08-14T12:09:42.086Z","type":"quit"}
{"nick":"rendar","reason":"Ping timeout: 276 seconds","date":"2013-08-14T12:32:16.127Z","type":"quit"}
{"nick":"spolu","date":"2013-08-14T12:38:38.293Z","type":"join"}
{"nick":"piscisaureus_","reason":"Ping timeout: 256 seconds","date":"2013-08-14T12:46:42.354Z","type":"quit"}
{"nick":"M28","reason":"Read error: Connection reset by peer","date":"2013-08-14T13:10:41.992Z","type":"quit"}
{"nick":"M28","date":"2013-08-14T13:11:41.762Z","type":"join"}
{"nick":"piscisaureus_","date":"2013-08-14T13:20:11.119Z","type":"join"}
{"nick":"indutny","message":"piscisaureus_: bertje","date":"2013-08-14T13:23:18.081Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: can you please try out a patch from https://github.com/joyent/libuv/pull/880","date":"2013-08-14T13:23:29.577Z","type":"message"}
{"nick":"piscisaureus_","message":"indutny: fedorretje :)","date":"2013-08-14T13:37:49.534Z","type":"message"}
{"nick":"piscisaureus_","message":"indutny: it was hard for me to reproduce, but the c9 folks could consistently","date":"2013-08-14T13:38:12.034Z","type":"message"}
{"nick":"piscisaureus_","message":"indutny: iow, I'm going to delegate that","date":"2013-08-14T13:38:20.463Z","type":"message"}
{"nick":"mcavage_","date":"2013-08-14T13:41:07.343Z","type":"join"}
{"nick":"mcavage","reason":"Read error: Connection reset by peer","date":"2013-08-14T13:41:08.640Z","type":"quit"}
{"nick":"c4milo","date":"2013-08-14T13:43:36.762Z","type":"join"}
{"nick":"piscisaureus_","message":"indutny: but it seems that I have to backport it first","date":"2013-08-14T13:44:52.762Z","type":"message"}
{"nick":"piscisaureus_","message":"which I cant do right now because I'd have to run os x but I have a meeting in 10 minutes","date":"2013-08-14T13:45:36.356Z","type":"message"}
{"nick":"piscisaureus_","message":"sorry","date":"2013-08-14T13:45:39.743Z","type":"message"}
{"nick":"rendar","date":"2013-08-14T13:48:02.981Z","type":"join"}
{"nick":"pachet","date":"2013-08-14T13:58:12.627Z","type":"join"}
{"nick":"bajtos","date":"2013-08-14T14:12:50.742Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-08-14T14:23:21.351Z","type":"join"}
{"nick":"inolen","reason":"Read error: Connection reset by peer","date":"2013-08-14T14:40:49.483Z","type":"quit"}
{"nick":"inolen","date":"2013-08-14T14:40:58.563Z","type":"join"}
{"nick":"bradleymeck","date":"2013-08-14T14:52:36.848Z","type":"join"}
{"nick":"indutny","message":"piscisaureus_: haha","date":"2013-08-14T14:53:04.884Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: I can backport it for you","date":"2013-08-14T14:53:09.072Z","type":"message"}
{"nick":"pachet","reason":"Quit: leaving","date":"2013-08-14T14:57:37.623Z","type":"quit"}
{"nick":"pachet","date":"2013-08-14T14:57:58.056Z","type":"join"}
{"nick":"kenperkins_","new_nick":"kenperkins","date":"2013-08-14T14:58:00.980Z","type":"nick"}
{"nick":"paulfryzel","date":"2013-08-14T15:04:05.774Z","type":"join"}
{"nick":"piscisaureus_","reason":"Read error: No route to host","date":"2013-08-14T15:05:09.559Z","type":"quit"}
{"nick":"piscisaureus_","date":"2013-08-14T15:06:22.043Z","type":"join"}
{"nick":"AvianFlu","date":"2013-08-14T15:08:32.562Z","type":"join"}
{"nick":"piscisaureus_","message":"inolen: yeah, sorry, I removed the issue number since you already mentioned it too","date":"2013-08-14T15:12:17.994Z","type":"message"}
{"nick":"piscisaureus_","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2013-08-14T15:12:22.723Z","type":"quit"}
{"nick":"piscisaureus_","date":"2013-08-14T15:12:42.401Z","type":"join"}
{"nick":"piscisaureus_","message":"indutny: ^-- sorry, that was for you obviously","date":"2013-08-14T15:12:54.612Z","type":"message"}
{"nick":"piscisaureus_","reason":"Client Quit","date":"2013-08-14T15:12:58.565Z","type":"quit"}
{"nick":"dap","date":"2013-08-14T15:13:38.120Z","type":"join"}
{"nick":"kazupon","date":"2013-08-14T15:13:38.331Z","type":"join"}
{"nick":"`3rdEden","new_nick":"`3E|SHOPPA","date":"2013-08-14T15:15:21.887Z","type":"nick"}
{"nick":"groundwater","date":"2013-08-14T15:27:02.361Z","type":"join"}
{"nick":"piscisaureus_","date":"2013-08-14T15:35:35.652Z","type":"join"}
{"nick":"bnoordhuis","message":"https://github.com/joyent/node/issues/6041#issuecomment-22644347 <- am i missing anything here? streams cannot be that broken in v0.10, can they?","date":"2013-08-14T15:38:33.676Z","type":"message"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-08-14T15:44:20.554Z","type":"quit"}
{"nick":"jmar777","date":"2013-08-14T15:45:45.057Z","type":"join"}
{"nick":"indutny","message":"piscisaureus_: yt?","date":"2013-08-14T15:46:17.349Z","type":"message"}
{"nick":"piscisaureus_","message":"indutny: in limited fashion. I'm in a \"background meeting\"","date":"2013-08-14T15:46:33.954Z","type":"message"}
{"nick":"indutny","message":"oh god","date":"2013-08-14T15:46:40.774Z","type":"message"}
{"nick":"indutny","message":"I'm not even going to ask what it is","date":"2013-08-14T15:46:45.167Z","type":"message"}
{"nick":"indutny","message":"whatever","date":"2013-08-14T15:46:46.866Z","type":"message"}
{"nick":"indutny","message":"I'm running tests on backported fix for fsevents","date":"2013-08-14T15:46:54.057Z","type":"message"}
{"nick":"piscisaureus_","message":"I mean, I'm in a meeting but I can & quite easily","date":"2013-08-14T15:46:56.610Z","type":"message"}
{"nick":"piscisaureus_","message":"kewl","date":"2013-08-14T15:47:05.040Z","type":"message"}
{"nick":"indutny","message":"if it'll go fine - I'll send you a gist","date":"2013-08-14T15:47:06.350Z","type":"message"}
{"nick":"piscisaureus_","message":"Naais","date":"2013-08-14T15:47:24.279Z","type":"message"}
{"nick":"indutny","message":"piscisaureus_: https://gist.github.com/indutny/6232342","date":"2013-08-14T15:47:55.023Z","type":"message"}
{"nick":"bnoordhuis","message":"ah... that file.pipe(response) thing is even being discussed on the mailing list","date":"2013-08-14T15:54:14.013Z","type":"message"}
{"nick":"bnoordhuis","message":"so, apparently streams really is that broken?","date":"2013-08-14T15:54:25.913Z","type":"message"}
{"nick":"hz","date":"2013-08-14T15:54:55.833Z","type":"join"}
{"nick":"indutny","message":"bnoordhuis: does it surprise you?","date":"2013-08-14T15:56:28.871Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033piscisaureus\u000f created branch fsevents-fix - http://git.io/U6kSvg","date":"2013-08-14T15:58:19.332Z","type":"message"}
{"nick":"piscisaureus_","message":"that's why EEs are evil","date":"2013-08-14T15:58:48.044Z","type":"message"}
{"nick":"piscisaureus_","message":":)","date":"2013-08-14T15:58:52.144Z","type":"message"}
{"nick":"bnoordhuis","message":"indutny: yes","date":"2013-08-14T15:59:40.311Z","type":"message"}
{"nick":"bnoordhuis","message":"it wasn't broken in v0.8","date":"2013-08-14T15:59:47.496Z","type":"message"}
