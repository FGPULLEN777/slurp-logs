{"nick":"hd_","reason":"Ping timeout: 260 seconds","date":"2017-12-17T00:07:45.044Z","type":"quit"}
{"nick":"andos","date":"2017-12-17T00:19:48.561Z","type":"join"}
{"nick":"andos","message":"Hi. Quick question I can’t seem to find an answer for in the documentation:  With the libuv filesystem listener in the case of a file rename event, how do I get the old vs new filename? Currently it seems to fire the event twice in a row, first with the old filename and then with the new. Not very easy to use. Is there a better way?  (Note: I’m listening recursively on a folder so I get events for many different files so I can’t ","date":"2017-12-17T00:22:45.983Z","type":"message"}
{"nick":"andos","message":"the path of the listener itself for anything).","date":"2017-12-17T00:22:46.625Z","type":"message"}
{"nick":"vtjnash","message":"hd_: you can never write to a server, but then, it will never get read callback either since it's not connected anywhere (I have a PR open right now to fix the assertion error you may be seeing)","date":"2017-12-17T00:26:01.915Z","type":"message"}
{"nick":"vtjnash","message":"andos: you might want to read the nodejs documentation to. the simple answer is that it depends on what events are delivered by the OS","date":"2017-12-17T00:26:53.426Z","type":"message"}
{"nick":"andos","message":"vtjnash: Even if I’m not using nodejs? This is raw libuv (c library)","date":"2017-12-17T00:27:59.959Z","type":"message"}
{"nick":"vtjnash","message":"yes. it's better documented in some cases (it used to effectively be the only documentation, now libuv has a bit of it's own too)","date":"2017-12-17T00:28:35.301Z","type":"message"}
{"nick":"andos","message":"vtjnash: Thanks. The documentation seems better but doesn’t seem to mention anything about this specific case.","date":"2017-12-17T00:32:56.057Z","type":"message"}
{"nick":"andos","message":"Great, and recusrsive watching is not available on linux :( ","date":"2017-12-17T00:35:33.781Z","type":"message"}
{"nick":"vtjnash","message":"true – you have to watch each folder separately I think?","date":"2017-12-17T00:36:14.430Z","type":"message"}
{"nick":"andos","message":"Though it looks like it could be somewhat easily emulated by traversing the directory tree and watching all subdirectories. I wonder why libuv doesn’t do this automatically.","date":"2017-12-17T00:36:37.518Z","type":"message"}
{"nick":"vtjnash","message":"Probably because nobody has offered to write the code","date":"2017-12-17T00:37:11.723Z","type":"message"}
{"nick":"vtjnash","message":"Or if you aren't doing any other IO, you could instead use a library like https://github.com/emcrisostomo/fswatch","date":"2017-12-17T00:41:52.934Z","type":"message"}
{"nick":"andos","message":"Guess I’ll have to use another cross platform lib for watching the filesystem. Every once in a while libuv generates no file change events at all despite no errors are generated. I had to work around a lot of funky things in libuv’s FS watching so far to get a higher “logical” level of watching. For example if a typical app overwrites a file but does it by saving a temporary file and then renaming the files at the end. This ","date":"2017-12-17T00:44:43.383Z","type":"message"}
{"nick":"andos","message":"triggers rename events but not file change events. My wrapper detected the “file swap” sequence and (in the case of a single-file listener) reinitialized the listener on the new file instead of the old. Thanks for the link to fswatch. I’ll have a look.","date":"2017-12-17T00:44:44.069Z","type":"message"}
{"nick":"vtjnash","message":"All libraries will do that though","date":"2017-12-17T00:45:07.162Z","type":"message"}
{"nick":"vtjnash","message":"That's just what the OS tells them to report","date":"2017-12-17T00:45:25.565Z","type":"message"}
{"nick":"andos","message":"Yeah but you can do more logical reporting IMHO if you collect the FS events over a time period. Granted you don’t get immediate events.","date":"2017-12-17T00:47:06.099Z","type":"message"}
{"nick":"vtjnash","message":"Sure, just don't expect it to happen just from adding libraries. And merging the event loops has the potential to be very frustrating, if you're using any other features from libuv","date":"2017-12-17T00:49:54.391Z","type":"message"}
{"nick":"andos","message":"Yeah thats what I’m afraid od","date":"2017-12-17T00:51:38.943Z","type":"message"}
{"nick":"andos","message":"*of","date":"2017-12-17T00:51:44.527Z","type":"message"}
{"nick":"andos","message":"My current implementation is nearly perfect for my needs though. If I create an instance of my listener wrapper class on a root folder and then later create individual file listeners on files within that root folder it will instead reuse the file listener. This is why I needed broad support for recursive listening and the ability to get the old and new filename for a renamed file.","date":"2017-12-17T00:56:04.746Z","type":"message"}
{"nick":"andos","reason":"Quit: andos","date":"2017-12-17T02:36:03.398Z","type":"quit"}
{"nick":"joocain2","reason":"Ping timeout: 248 seconds","date":"2017-12-17T03:02:04.822Z","type":"quit"}
{"nick":"joocain2","date":"2017-12-17T03:04:13.784Z","type":"join"}
{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2017-12-17T03:25:23.164Z","type":"quit"}
{"nick":"joocain2_","date":"2017-12-17T05:11:22.075Z","type":"join"}
{"nick":"joocain2","reason":"Ping timeout: 248 seconds","date":"2017-12-17T05:11:40.786Z","type":"quit"}
{"nick":"vtjnash","reason":"Remote host closed the connection","date":"2017-12-17T05:21:54.378Z","type":"quit"}
{"nick":"joocain2_","reason":"Remote host closed the connection","date":"2017-12-17T05:30:44.115Z","type":"quit"}
{"nick":"joocain2","date":"2017-12-17T05:30:59.837Z","type":"join"}
{"nick":"vtjnash","date":"2017-12-17T06:22:17.473Z","type":"join"}
{"nick":"vtjnash","reason":"Ping timeout: 265 seconds","date":"2017-12-17T06:27:06.401Z","type":"quit"}
