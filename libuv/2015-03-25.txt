{"nick":"ircretary","reason":"Remote host closed the connection","date":"2015-03-25T00:00:01.248Z","type":"quit"}
{"nick":"ircretary","date":"2015-03-25T00:00:09.361Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2015-03-25T00:03:34.127Z","type":"quit"}
{"nick":"Fishrock123","date":"2015-03-25T00:07:13.972Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-03-25T00:10:42.920Z","type":"quit"}
{"nick":"jgi","date":"2015-03-25T00:16:47.182Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 272 seconds","date":"2015-03-25T00:16:54.185Z","type":"quit"}
{"nick":"thlorenz","date":"2015-03-25T00:17:52.351Z","type":"join"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2015-03-25T00:20:16.017Z","type":"quit"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2015-03-25T00:20:43.202Z","type":"quit"}
{"nick":"jasnell","date":"2015-03-25T00:20:51.977Z","type":"join"}
{"nick":"dap_","reason":"Quit: Leaving.","date":"2015-03-25T00:21:44.843Z","type":"quit"}
{"nick":"jasnell","reason":"Ping timeout: 264 seconds","date":"2015-03-25T00:25:35.991Z","type":"quit"}
{"nick":"inolen","reason":"Quit: Leaving.","date":"2015-03-25T00:29:09.631Z","type":"quit"}
{"nick":"brson","reason":"Quit: leaving","date":"2015-03-25T00:38:18.278Z","type":"quit"}
{"nick":"AvianFlu","reason":"Ping timeout: 252 seconds","date":"2015-03-25T00:43:12.868Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-03-25T00:46:23.471Z","type":"quit"}
{"nick":"srl295","reason":"Quit: No Ping reply in 180 seconds.","date":"2015-03-25T00:47:25.506Z","type":"quit"}
{"nick":"srl295","date":"2015-03-25T00:47:58.233Z","type":"join"}
{"nick":"srl295","reason":"Changing host","date":"2015-03-25T00:47:58.404Z","type":"quit"}
{"nick":"srl295","date":"2015-03-25T00:47:58.404Z","type":"join"}
{"nick":"chris_99","reason":"Remote host closed the connection","date":"2015-03-25T00:50:04.202Z","type":"quit"}
{"nick":"Tux64","new_nick":"Tux64_","date":"2015-03-25T00:57:22.696Z","type":"nick"}
{"nick":"Tux64_","new_nick":"Tux64","date":"2015-03-25T00:57:28.530Z","type":"nick"}
{"nick":"Tux64","new_nick":"Tux64_","date":"2015-03-25T00:57:45.813Z","type":"nick"}
{"nick":"brson","date":"2015-03-25T00:58:32.963Z","type":"join"}
{"nick":"brson","reason":"Client Quit","date":"2015-03-25T00:59:51.822Z","type":"quit"}
{"nick":"avalanche123","reason":"Remote host closed the connection","date":"2015-03-25T01:10:41.517Z","type":"quit"}
{"nick":"octetcloud","date":"2015-03-25T01:14:27.010Z","type":"join"}
{"nick":"thlorenz","date":"2015-03-25T01:21:36.508Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 255 seconds","date":"2015-03-25T01:26:31.490Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2015-03-25T01:41:34.169Z","type":"quit"}
{"nick":"reqshark__","new_nick":"reqshark","date":"2015-03-25T02:03:11.450Z","type":"nick"}
{"nick":"AlexisMocha","reason":"Ping timeout: 246 seconds","date":"2015-03-25T02:04:53.879Z","type":"quit"}
{"nick":"thlorenz","date":"2015-03-25T02:19:43.466Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2015-03-25T02:36:26.256Z","type":"quit"}
{"nick":"Ralith","reason":"Ping timeout: 272 seconds","date":"2015-03-25T02:55:14.214Z","type":"quit"}
{"nick":"Left_Turn","reason":"Remote host closed the connection","date":"2015-03-25T03:02:54.531Z","type":"quit"}
{"nick":"tyleranton","reason":"Quit: tyleranton","date":"2015-03-25T03:04:03.696Z","type":"quit"}
{"nick":"jasnell","date":"2015-03-25T03:22:18.909Z","type":"join"}
{"nick":"Ralith","date":"2015-03-25T03:23:55.122Z","type":"join"}
{"nick":"zju4","date":"2015-03-25T03:25:25.380Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 246 seconds","date":"2015-03-25T03:26:29.910Z","type":"quit"}
{"nick":"octetclo1","date":"2015-03-25T03:28:19.115Z","type":"join"}
{"nick":"zju","reason":"Ping timeout: 246 seconds","date":"2015-03-25T03:28:38.262Z","type":"quit"}
{"nick":"octetcloud","reason":"Ping timeout: 246 seconds","date":"2015-03-25T03:28:38.525Z","type":"quit"}
{"nick":"pquerna","reason":"Disconnected by services","date":"2015-03-25T03:37:05.249Z","type":"quit"}
{"nick":"pquerna_","date":"2015-03-25T03:37:09.507Z","type":"join"}
{"nick":"thlorenz","date":"2015-03-25T03:37:12.182Z","type":"join"}
{"nick":"toothrot","reason":"Ping timeout: 255 seconds","date":"2015-03-25T03:38:22.488Z","type":"quit"}
{"nick":"jgi","date":"2015-03-25T03:40:21.343Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 272 seconds","date":"2015-03-25T03:42:06.182Z","type":"quit"}
{"nick":"asfasf","date":"2015-03-25T03:50:18.574Z","type":"join"}
{"nick":"pquerna_","new_nick":"pquerna","date":"2015-03-25T03:59:48.024Z","type":"nick"}
{"nick":"jasnell","date":"2015-03-25T04:05:22.562Z","type":"join"}
{"nick":"avalanche123","date":"2015-03-25T04:12:29.894Z","type":"join"}
{"nick":"avalanche123","reason":"Ping timeout: 255 seconds","date":"2015-03-25T04:17:04.441Z","type":"quit"}
{"nick":"jasnell","reason":"Remote host closed the connection","date":"2015-03-25T04:19:22.330Z","type":"quit"}
{"nick":"jasnell","date":"2015-03-25T04:19:58.254Z","type":"join"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2015-03-25T04:20:51.686Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-03-25T04:21:21.603Z","type":"quit"}
{"nick":"jasnell","reason":"Ping timeout: 244 seconds","date":"2015-03-25T04:24:17.228Z","type":"quit"}
{"nick":"inolen","date":"2015-03-25T04:31:03.180Z","type":"join"}
{"nick":"inolen","reason":"Ping timeout: 272 seconds","date":"2015-03-25T04:35:56.180Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-03-25T04:41:13.263Z","type":"join"}
{"nick":"avalanche123","date":"2015-03-25T04:50:15.470Z","type":"join"}
{"nick":"avalanche123","reason":"Remote host closed the connection","date":"2015-03-25T04:59:47.353Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-03-25T05:05:46.456Z","type":"quit"}
{"nick":"octetclo1","reason":"Ping timeout: 264 seconds","date":"2015-03-25T05:12:24.216Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-03-25T05:14:38.288Z","type":"join"}
{"nick":"a3f","date":"2015-03-25T05:18:12.242Z","type":"join"}
{"nick":"rmg","date":"2015-03-25T05:18:56.929Z","type":"join"}
{"nick":"asfasf","reason":"Ping timeout: 246 seconds","date":"2015-03-25T05:20:46.573Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 245 seconds","date":"2015-03-25T05:23:59.545Z","type":"quit"}
{"nick":"thlorenz","date":"2015-03-25T05:26:10.015Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 246 seconds","date":"2015-03-25T05:30:20.949Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-03-25T05:41:18.981Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-03-25T05:42:52.446Z","type":"join"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2015-03-25T05:53:33.140Z","type":"quit"}
{"nick":"seishun","date":"2015-03-25T06:06:21.235Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-03-25T06:14:16.803Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-03-25T06:14:52.496Z","type":"join"}
{"nick":"qard","reason":"Quit: leaving","date":"2015-03-25T06:15:39.481Z","type":"quit"}
{"nick":"jasnell","date":"2015-03-25T06:23:37.553Z","type":"join"}
{"nick":"thlorenz","date":"2015-03-25T06:27:07.951Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 245 seconds","date":"2015-03-25T06:27:44.534Z","type":"quit"}
{"nick":"thlorenz","reason":"Ping timeout: 246 seconds","date":"2015-03-25T06:31:38.928Z","type":"quit"}
{"nick":"avalanche123","date":"2015-03-25T06:39:30.516Z","type":"join"}
{"nick":"AlexisMocha","date":"2015-03-25T06:41:48.069Z","type":"join"}
{"nick":"avalanche123","reason":"Ping timeout: 255 seconds","date":"2015-03-25T06:45:07.430Z","type":"quit"}
{"nick":"bradleymeck_","date":"2015-03-25T07:15:21.267Z","type":"join"}
{"nick":"bradleymeck","reason":"Read error: Connection reset by peer","date":"2015-03-25T07:15:34.581Z","type":"quit"}
{"nick":"bradleymeck_","new_nick":"bradleymeck","date":"2015-03-25T07:15:34.811Z","type":"nick"}
{"nick":"AlexisMocha","reason":"Ping timeout: 246 seconds","date":"2015-03-25T07:23:23.893Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2015-03-25T07:35:48.338Z","type":"quit"}
{"nick":"a3f","reason":"Quit: My Mac has gone to sleep. ZZZzzzâ€¦","date":"2015-03-25T07:39:28.055Z","type":"quit"}
{"nick":"piscisaureus","reason":"Ping timeout: 252 seconds","date":"2015-03-25T07:39:57.293Z","type":"quit"}
{"nick":"roxlu","date":"2015-03-25T08:06:24.327Z","type":"join"}
{"nick":"thlorenz","date":"2015-03-25T08:16:03.184Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 272 seconds","date":"2015-03-25T08:20:46.184Z","type":"quit"}
{"nick":"tumdedum","reason":"Ping timeout: 256 seconds","date":"2015-03-25T08:26:14.254Z","type":"quit"}
{"nick":"benjamingr","reason":"Quit: Connection closed for inactivity","date":"2015-03-25T08:27:21.647Z","type":"quit"}
{"nick":"tumdedum","date":"2015-03-25T08:27:25.867Z","type":"join"}
{"nick":"SergeiRND","date":"2015-03-25T08:37:53.944Z","type":"join"}
{"nick":"rendar","date":"2015-03-25T08:45:10.519Z","type":"join"}
{"nick":"miloj","reason":"Ping timeout: 256 seconds","date":"2015-03-25T08:46:38.247Z","type":"quit"}
{"nick":"jasnell","date":"2015-03-25T09:13:02.280Z","type":"join"}
{"nick":"thlorenz","date":"2015-03-25T09:16:57.373Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 252 seconds","date":"2015-03-25T09:17:29.294Z","type":"quit"}
{"nick":"SergeiRND","reason":"Quit: Leaving.","date":"2015-03-25T09:20:46.907Z","type":"quit"}
{"nick":"thlorenz","reason":"Ping timeout: 264 seconds","date":"2015-03-25T09:22:00.357Z","type":"quit"}
{"nick":"a3f","date":"2015-03-25T09:22:06.985Z","type":"join"}
{"nick":"a3f","reason":"Quit: My Mac has gone to sleep. ZZZzzzâ€¦","date":"2015-03-25T09:33:55.557Z","type":"quit"}
{"nick":"Left_Turn","date":"2015-03-25T09:37:50.376Z","type":"join"}
{"nick":"LinuxJed_","date":"2015-03-25T10:04:32.381Z","type":"join"}
{"nick":"LinuxJedi","reason":"Ping timeout: 256 seconds","date":"2015-03-25T10:07:49.271Z","type":"quit"}
{"nick":"rendar","message":"if i'm using libuv to read, let's say, an HTTP request, which ends with '\\n', the best method is have an on_read loop, saving the parsing state somewhere, and triggering on_http_req when i find a '\\n', right? but if i want to do this, will i have a double buffer? since i can only do uv_read_start(); without specify the buffer where i want to read data, and if i rceive a partial request, i have ","date":"2015-03-25T10:20:29.308Z","type":"message"}
{"nick":"rendar","message":"to save it in a temporary double buffer: let's say with the first on_read i'll get \"GET /home/t\" and with the second on_read i'll get \"emporary/files\\n\", i need to save these 2 data in a second buffer to have a continuous string of \"GET /home/temporary/files\\0\" -- right?","date":"2015-03-25T10:20:29.519Z","type":"message"}
{"nick":"Left_Turn","reason":"Ping timeout: 264 seconds","date":"2015-03-25T10:23:48.455Z","type":"quit"}
{"nick":"LinuxJed_","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2015-03-25T10:30:05.757Z","type":"quit"}
{"nick":"txdv","message":"rendar: yes","date":"2015-03-25T10:58:37.731Z","type":"message"}
{"nick":"Left_Turn","date":"2015-03-25T11:01:56.251Z","type":"join"}
{"nick":"rendar","message":"txdv: i see, so i'll have double buffers?","date":"2015-03-25T11:01:59.743Z","type":"message"}
{"nick":"txdv","message":"well there are many approaches here","date":"2015-03-25T11:03:15.592Z","type":"message"}
{"nick":"txdv","message":"you can create a super big buffer","date":"2015-03-25T11:03:19.858Z","type":"message"}
{"nick":"txdv","message":"adn tell the read next read to just write after \"GET /home/t\" into the buffer","date":"2015-03-25T11:03:33.511Z","type":"message"}
{"nick":"rendar","message":"txdv: hmm i see","date":"2015-03-25T11:04:06.797Z","type":"message"}
{"nick":"rendar","message":"txdv: i thought since there is uv_read_start(); there is no way to tell read which buffers to use","date":"2015-03-25T11:04:26.941Z","type":"message"}
{"nick":"txdv","message":"alloc_cb is called before the read","date":"2015-03-25T11:04:48.437Z","type":"message"}
{"nick":"rendar","message":"oh, so i can pass a buffer there","date":"2015-03-25T11:05:02.996Z","type":"message"}
{"nick":"rendar","message":"in alloc_cb i pass the pointer just after \"GET /home/t\" right?","date":"2015-03-25T11:05:22.750Z","type":"message"}
{"nick":"thlorenz","date":"2015-03-25T11:05:45.371Z","type":"join"}
{"nick":"tyleranton","date":"2015-03-25T11:06:02.342Z","type":"join"}
{"nick":"txdv","message":"int uv_read_start(uv_stream_t*, uv_alloc_cb alloc_cb, uv_read_cb read_cb)","date":"2015-03-25T11:06:13.589Z","type":"message"}
{"nick":"txdv","message":"yeah","date":"2015-03-25T11:06:26.171Z","type":"message"}
{"nick":"rendar","message":"i see","date":"2015-03-25T11:06:31.358Z","type":"message"}
{"nick":"rendar","message":"that would be a solution, yes","date":"2015-03-25T11:06:42.102Z","type":"message"}
{"nick":"txdv","message":"you have full control of what uv_read picks next","date":"2015-03-25T11:06:52.799Z","type":"message"}
{"nick":"tyleranton","reason":"Client Quit","date":"2015-03-25T11:08:21.894Z","type":"quit"}
{"nick":"rendar","message":"txdv: is there also an alloc_cb for when a new incoming connection is coming? doesn't libuv allocate some data structure for such an incmoing connection from tcp or pipes?","date":"2015-03-25T11:09:13.690Z","type":"message"}
{"nick":"txdv","message":"you get an event notification","date":"2015-03-25T11:09:37.031Z","type":"message"}
{"nick":"txdv","message":"then you need to tcp_init and provide a pointer to uv_accept","date":"2015-03-25T11:09:46.706Z","type":"message"}
{"nick":"txdv","message":"so you allocate yourself for tcp_init","date":"2015-03-25T11:09:56.472Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 250 seconds","date":"2015-03-25T11:10:17.384Z","type":"quit"}
{"nick":"chris_99","date":"2015-03-25T11:16:38.222Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2015-03-25T11:45:08.549Z","type":"quit"}
{"nick":"rendar","message":"txdv: you mean uv_tcp_init(= ?","date":"2015-03-25T11:45:32.176Z","type":"message"}
{"nick":"txdv","message":"yeah","date":"2015-03-25T11:46:45.556Z","type":"message"}
{"nick":"tyleranton","date":"2015-03-25T11:46:53.818Z","type":"join"}
{"nick":"txdv","message":"i think since we are in the #libuv channel i can drop the uv_ prefixes when talking api","date":"2015-03-25T11:46:57.383Z","type":"message"}
{"nick":"thlorenz","date":"2015-03-25T11:47:42.346Z","type":"join"}
{"nick":"rendar","message":"txdv: i see, the problem with that approach is that you pass to read a smaller and smaller buffer, in order to complete the HTTP request","date":"2015-03-25T11:49:13.801Z","type":"message"}
{"nick":"txdv","message":"the headers are usually ~1500 bytes","date":"2015-03-25T11:50:04.670Z","type":"message"}
{"nick":"txdv","message":"also when you parse the header, you pass the content somewhere else","date":"2015-03-25T11:50:19.597Z","type":"message"}
{"nick":"txdv","message":"resizing is an option","date":"2015-03-25T11:50:32.693Z","type":"message"}
{"nick":"rendar","message":"txdv: consider this case: read1 \"GET /myur\" -- read2 \"l/\\n\" -- in the last read i read only 3 bytes, but if i'd pass the entire read buffer, i'd have read much more bytes, e.g. \"l/\\nGET /nexturl\\n\"","date":"2015-03-25T11:50:33.774Z","type":"message"}
{"nick":"txdv","message":"i dont understand your question","date":"2015-03-25T11:51:38.208Z","type":"message"}
{"nick":"thlorenz","reason":"Ping timeout: 252 seconds","date":"2015-03-25T11:52:13.397Z","type":"quit"}
{"nick":"rendar","message":"txdv: consider a buffer of 128 bytes, with your solution of reading the first 128 bytes, then finish reading the remaining bytes by passing them with alloc_cb, you have to do more syscalls","date":"2015-03-25T11:52:26.950Z","type":"message"}
{"nick":"rendar","message":"than reading *always* 128 bytes","date":"2015-03-25T11:52:33.459Z","type":"message"}
{"nick":"rendar","message":"and moving bytes in a second buffer, maybe with memcpy","date":"2015-03-25T11:52:47.206Z","type":"message"}
{"nick":"txdv","message":"yeah","date":"2015-03-25T11:52:56.371Z","type":"message"}
{"nick":"txdv","message":"resizing the buffer","date":"2015-03-25T11:53:03.163Z","type":"message"}
{"nick":"txdv","message":"also if your parser is good enough it will allow you to let go of older stuff","date":"2015-03-25T11:53:31.689Z","type":"message"}
{"nick":"txdv","message":"like if it parsed GET /whatever\\n, then you can move the remainder","date":"2015-03-25T11:53:49.203Z","type":"message"}
{"nick":"rendar","message":"yeah","date":"2015-03-25T11:53:54.757Z","type":"message"}
{"nick":"txdv","message":"yeah if you go down deep like that you have to think about moving memory and stuff","date":"2015-03-25T11:55:40.660Z","type":"message"}
{"nick":"txdv","message":"everything is easier if you have a language like javascript","date":"2015-03-25T11:55:51.945Z","type":"message"}
{"nick":"txdv","message":"rendar: what are you doing currently with libuv?","date":"2015-03-25T11:55:58.406Z","type":"message"}
{"nick":"tyleranton","reason":"Quit: tyleranton","date":"2015-03-25T12:00:17.103Z","type":"quit"}
{"nick":"tyleranton","date":"2015-03-25T12:01:22.614Z","type":"join"}
{"nick":"tyleranton","reason":"Client Quit","date":"2015-03-25T12:04:32.905Z","type":"quit"}
{"nick":"saghul","message":"rendar: you could use some memory pool allocator, which you create per connection","date":"2015-03-25T12:05:55.480Z","type":"message"}
{"nick":"saghul","message":"and allocate chunks of size X","date":"2015-03-25T12:06:09.695Z","type":"message"}
{"nick":"avalanche123","date":"2015-03-25T12:06:26.669Z","type":"join"}
{"nick":"saghul","message":"then after a request is done you can reuse the chunks, in case the connection had keepalive, for example","date":"2015-03-25T12:06:30.439Z","type":"message"}
{"nick":"avalanche123","reason":"Ping timeout: 244 seconds","date":"2015-03-25T12:10:50.218Z","type":"quit"}
{"nick":"tyleranton","date":"2015-03-25T12:12:00.427Z","type":"join"}
{"nick":"rendar","message":"saghul: yes","date":"2015-03-25T12:12:48.985Z","type":"message"}
{"nick":"tyleranton","reason":"Client Quit","date":"2015-03-25T12:12:59.451Z","type":"quit"}
{"nick":"rendar","message":"txdv: a very tiny http server","date":"2015-03-25T12:13:01.137Z","type":"message"}
{"nick":"rendar","message":"(sorry for late reply, i was afk)","date":"2015-03-25T12:13:10.610Z","type":"message"}
{"nick":"rendar","message":"saghul: the problem is that, even with the pool allocator, there may be some time when you have to store somewhere *half* url you get from on_read, before storing the other half coming in the next on_read","date":"2015-03-25T12:13:58.040Z","type":"message"}
{"nick":"SergeiRND","date":"2015-03-25T12:14:18.000Z","type":"join"}
{"nick":"rendar","message":"saghul: a pool allocator which allocates such chunks, but they're not contiguous in memory, will \"break\" the url in 2 different memory locations","date":"2015-03-25T12:14:35.664Z","type":"message"}
{"nick":"tyleranton","date":"2015-03-25T12:14:42.464Z","type":"join"}
{"nick":"txdv","message":"well either make it bigger","date":"2015-03-25T12:17:46.293Z","type":"message"}
{"nick":"txdv","message":"or copy them together into a single buffer","date":"2015-03-25T12:17:58.473Z","type":"message"}
{"nick":"rendar","message":"yeah, that's are the solutions","date":"2015-03-25T12:18:09.432Z","type":"message"}
{"nick":"txdv","message":"is are","date":"2015-03-25T12:18:24.506Z","type":"message"}
{"nick":"rendar","message":"that's the solution, sorry :)","date":"2015-03-25T12:20:05.700Z","type":"message"}
{"nick":"tyleranton","reason":"Quit: tyleranton","date":"2015-03-25T12:23:13.537Z","type":"quit"}
{"nick":"thlorenz","date":"2015-03-25T12:26:38.934Z","type":"join"}
{"nick":"reqshark","reason":"Quit: Be back later ...","date":"2015-03-25T12:27:24.946Z","type":"quit"}
{"nick":"toothrot","date":"2015-03-25T12:33:34.598Z","type":"join"}
{"nick":"Rolinh","date":"2015-03-25T12:41:38.259Z","type":"join"}
{"nick":"Rolinh","date":"2015-03-25T12:42:04.450Z","type":"part"}
{"nick":"jasnell","date":"2015-03-25T12:50:20.308Z","type":"join"}
{"nick":"jasnell","reason":"Ping timeout: 265 seconds","date":"2015-03-25T12:54:58.335Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-03-25T12:57:13.258Z","type":"join"}
{"nick":"toothrot","reason":"Ping timeout: 252 seconds","date":"2015-03-25T13:07:01.348Z","type":"quit"}
{"nick":"roxlu","reason":"Quit: My Mac has gone to sleep. ZZZzzzâ€¦","date":"2015-03-25T13:20:36.926Z","type":"quit"}
{"nick":"roxlu","date":"2015-03-25T13:28:39.327Z","type":"join"}
{"nick":"AvianFlu","date":"2015-03-25T13:49:41.263Z","type":"join"}
{"nick":"bradleymeck","reason":"Read error: Connection reset by peer","date":"2015-03-25T13:57:08.881Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-03-25T13:57:28.510Z","type":"join"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2015-03-25T13:58:58.506Z","type":"nick"}
{"nick":"reqshark","date":"2015-03-25T14:05:01.214Z","type":"join"}
{"nick":"reqshark_","date":"2015-03-25T14:07:18.273Z","type":"join"}
{"nick":"txdv","reason":"Ping timeout: 265 seconds","date":"2015-03-25T14:08:26.444Z","type":"quit"}
{"nick":"reqshark","reason":"Ping timeout: 256 seconds","date":"2015-03-25T14:09:38.189Z","type":"quit"}
{"nick":"txdv_","date":"2015-03-25T14:10:58.732Z","type":"join"}
{"nick":"txdv_","new_nick":"txdv","date":"2015-03-25T14:11:00.861Z","type":"nick"}
{"nick":"txdv","message":"my server just died","date":"2015-03-25T14:11:55.433Z","type":"message"}
{"nick":"txdv","message":":(","date":"2015-03-25T14:11:56.396Z","type":"message"}
{"nick":"Fishrock123","date":"2015-03-25T14:15:45.593Z","type":"join"}
{"nick":"Mark__","reason":"Quit: Page closed","date":"2015-03-25T14:30:24.379Z","type":"quit"}
{"nick":"brson","date":"2015-03-25T14:33:26.263Z","type":"join"}
{"nick":"reqshark_","reason":"Quit: Be back later ...","date":"2015-03-25T14:35:46.626Z","type":"quit"}
{"nick":"reqshark_","date":"2015-03-25T14:43:10.744Z","type":"join"}
{"nick":"reqshark_","reason":"Quit: Be back later ...","date":"2015-03-25T14:49:25.430Z","type":"quit"}
{"nick":"bradleymeck","reason":"Ping timeout: 255 seconds","date":"2015-03-25T15:01:28.468Z","type":"quit"}
{"nick":"bradleymeck","date":"2015-03-25T15:06:20.601Z","type":"join"}
{"nick":"brson","reason":"Quit: leaving","date":"2015-03-25T15:13:47.450Z","type":"quit"}
{"nick":"brson","date":"2015-03-25T15:14:03.179Z","type":"join"}
{"nick":"jasnell","date":"2015-03-25T15:17:36.838Z","type":"join"}
{"nick":"daviddias","date":"2015-03-25T15:23:45.559Z","type":"join"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Gireesh Punathil\u000f \u00037refs/tags/jenkins-accept-pull-request-temp\u000f * \u0002ada6f83\u0002 : test: remove early timers in simple http tests. (+1 more commits) - http://git.io/jIQ4","date":"2015-03-25T15:30:44.939Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Gireesh Punathil\u000f \u00037refs/tags/jenkins-accept-commit-temp\u000f * \u0002d783c38\u0002 : test: remove early timers in simple http tests. (+1 more commits) - http://git.io/jI7B","date":"2015-03-25T15:31:30.958Z","type":"message"}
{"nick":"brson","reason":"Quit: leaving","date":"2015-03-25T15:38:30.759Z","type":"quit"}
