{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-09-29T00:00:01.243Z","type":"quit"}
{"nick":"ircretary","date":"2013-09-29T00:00:10.174Z","type":"join"}
{"nick":"loladiro","reason":"Quit: loladiro","date":"2013-09-29T00:01:45.175Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-09-29T00:11:01.396Z","type":"quit"}
{"nick":"hz","date":"2013-09-29T00:14:11.402Z","type":"quit"}
{"nick":"kazupon","date":"2013-09-29T00:20:27.767Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 240 seconds","date":"2013-09-29T00:24:38.544Z","type":"quit"}
{"nick":"c4milo","date":"2013-09-29T00:39:00.771Z","type":"join"}
{"nick":"amartens","date":"2013-09-29T00:40:47.232Z","type":"join"}
{"nick":"amartens","reason":"Ping timeout: 252 seconds","date":"2013-09-29T00:45:15.213Z","type":"quit"}
{"nick":"othiym23","message":"trevnorris: https://gist.github.com/othiym23/6748219 is also broken under your current build","date":"2013-09-29T00:58:44.435Z","type":"message"}
{"nick":"othiym23","message":"looks lot simpler than the last one, but that's because I didn't bundle in all the dependencies","date":"2013-09-29T00:59:01.767Z","type":"message"}
{"nick":"othiym23","message":"if you comment out line 10, it works","date":"2013-09-29T00:59:17.534Z","type":"message"}
{"nick":"othiym23","message":"still working on what it is that bunyan is doing that breaks things","date":"2013-09-29T00:59:29.845Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: actually, bunyan isn't necessary: https://gist.github.com/othiym23/6748316","date":"2013-09-29T01:15:30.346Z","type":"message"}
{"nick":"othiym23","message":"in that one, comment out line 4 and everything works","date":"2013-09-29T01:15:36.879Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: and if you move line 4 to after line 7, things work as well, so the order at which the asyncListener is registered is important","date":"2013-09-29T01:17:26.019Z","type":"message"}
{"nick":"kazupon","date":"2013-09-29T01:20:59.478Z","type":"join"}
{"nick":"loladiro","date":"2013-09-29T01:24:51.232Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 240 seconds","date":"2013-09-29T01:25:08.191Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-09-29T01:41:01.090Z","type":"quit"}
{"nick":"othiym23","message":"trevnorris: stepping past the end of the setImmediate callback containing the console.log leads me to believe that something's losing the domain created by the cls.run call on line 9","date":"2013-09-29T01:44:35.017Z","type":"message"}
{"nick":"groundwater","reason":"Quit: groundwater","date":"2013-09-29T02:00:22.007Z","type":"quit"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-09-29T02:13:08.164Z","type":"quit"}
{"nick":"kazupon","date":"2013-09-29T02:21:32.388Z","type":"join"}
{"nick":"groundwater","date":"2013-09-29T02:25:57.387Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 245 seconds","date":"2013-09-29T02:25:58.167Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-09-29T02:30:02.807Z","type":"nick"}
{"nick":"zheng","date":"2013-09-29T02:42:35.066Z","type":"join"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-09-29T03:12:09.805Z","type":"nick"}
{"nick":"kellabyte","reason":"Ping timeout: 256 seconds","date":"2013-09-29T03:15:14.745Z","type":"quit"}
{"nick":"kazupon","date":"2013-09-29T03:22:05.387Z","type":"join"}
{"nick":"zheng_","date":"2013-09-29T03:24:45.167Z","type":"join"}
{"nick":"zheng","reason":"Read error: Connection reset by peer","date":"2013-09-29T03:29:12.680Z","type":"quit"}
{"nick":"kazupon","reason":"Ping timeout: 245 seconds","date":"2013-09-29T03:34:18.169Z","type":"quit"}
{"nick":"c4milo","date":"2013-09-29T03:39:11.772Z","type":"join"}
{"nick":"trevnorris","message":"othiym23: ping","date":"2013-09-29T03:44:54.618Z","type":"message"}
{"nick":"kellabyte","date":"2013-09-29T03:45:29.319Z","type":"join"}
{"nick":"trevnorris","message":"othiym23: timers are difficult, and I realize there's some strange problem in there, but haven't exactly figured out what's going on.","date":"2013-09-29T03:46:36.613Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: since first you get a call on TimerWrap::OnTimeout() MakeCallback, but then for every timer as well in the while loop where the timers are actually run.","date":"2013-09-29T03:46:36.829Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: but i've tried to make sure the async listener only runs exactly onces per timer, so I've strangely injected it into lib/timer.js. maybe I just have to allow the listener to run for every callback added, and for the actual wrap. i'll patch it and try it out.","date":"2013-09-29T03:48:54.073Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: reload https://gist.github.com/othiym23/6748316","date":"2013-09-29T03:51:26.690Z","type":"message"}
{"nick":"othiym23","message":"I've isolated the problem to happening if 1. console.log is being called for the first time inside a setImmediate callback which causes 2. a ContextifyScript to be created","date":"2013-09-29T03:52:11.921Z","type":"message"}
{"nick":"othiym23","message":"that causes runAsyncQueue to be run over the existing queue and causes the domain to be overwritten","date":"2013-09-29T03:52:32.710Z","type":"message"}
{"nick":"othiym23","message":"still digging into why","date":"2013-09-29T03:52:35.362Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-09-29T03:58:32.023Z","type":"quit"}
{"nick":"othiym23","message":"apparently just adding a console.log('+') isn't enough to fix it, so there's more going on there","date":"2013-09-29T03:59:06.377Z","type":"message"}
{"nick":"kazupon","date":"2013-09-29T04:00:27.894Z","type":"join"}
{"nick":"trevnorris","message":"othiym23: i'm not sure how to treat set{Timeout,Interval,Immediate} because they all use such a strange mechanism. they can fire when the TimerWrap is first being created, but then they're added to a linked list an processed in order when called if they're supposed to be run in the same number of ms.","date":"2013-09-29T04:02:40.958Z","type":"message"}
{"nick":"othiym23","message":"right","date":"2013-09-29T04:03:31.885Z","type":"message"}
{"nick":"trevnorris","message":"so you can have multiple fires for the same actual callback. one is called from the MakeCallback into the actual function in lib/timer that processes all the timers in order.","date":"2013-09-29T04:03:32.401Z","type":"message"}
{"nick":"trevnorris","message":"but since each timer can have their own domain, they also need to be individually processed.","date":"2013-09-29T04:03:52.774Z","type":"message"}
{"nick":"othiym23","message":"it turns out that adding a console.log('whatever') at the beginning of the script moves the problem elsewhere","date":"2013-09-29T04:04:11.696Z","type":"message"}
{"nick":"trevnorris","message":"are you on the absolute latest? i added async wrap to a few other places in src/ this afternoon.","date":"2013-09-29T04:04:47.952Z","type":"message"}
{"nick":"othiym23","message":"no, let me pull and rebuild","date":"2013-09-29T04:05:09.099Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: rebuilt, no change in behavior","date":"2013-09-29T04:06:28.699Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: try one more time. pushed this moment.","date":"2013-09-29T04:06:38.224Z","type":"message"}
{"nick":"trevnorris","message":"(another change)","date":"2013-09-29T04:06:43.520Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: my expectation is that once the context is created for the callback to a timer, the listener would never be called for that context again","date":"2013-09-29T04:07:06.172Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: put another way, the domain on those contexts should be immutable, shouldn't they?","date":"2013-09-29T04:07:28.794Z","type":"message"}
{"nick":"othiym23","message":"rebuilding","date":"2013-09-29T04:07:32.665Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: well, try this. any domain passed will persist to the next call. oh. let me add a patch that'll allow you do debug this easier.","date":"2013-09-29T04:08:14.087Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 245 seconds","date":"2013-09-29T04:08:46.690Z","type":"quit"}
{"nick":"othiym23","message":"trevnorris: same dealio","date":"2013-09-29T04:08:52.359Z","type":"message"}
{"nick":"othiym23","message":"by the way, I think this but is the same one that was in the longer bug gist I sent you on Thursday, just with process.nextTick instead of setImmediate","date":"2013-09-29T04:09:25.892Z","type":"message"}
{"nick":"othiym23","message":"I think it's the exact same problem regardless of which timer function you use -- something is synchronously causing the listener to be run on an already-started async context, overwriting the original domain object with whatever listener returns at that point in time","date":"2013-09-29T04:10:26.898Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: just pushed another change. if a domain already existed on the object's context it'll pass that domain to the listener. so add a check in your listener to see if a domain exists.","date":"2013-09-29T04:12:14.892Z","type":"message"}
{"nick":"trevnorris","message":"interesting. especially that it would happen on nextTick.","date":"2013-09-29T04:13:01.598Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: I'll give that a shot, and while I do that, take a look at https://gist.github.com/othiym23/6749302","date":"2013-09-29T04:19:46.512Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: the domain is never getting passed to listener","date":"2013-09-29T04:23:02.846Z","type":"message"}
{"nick":"othiym23","message":"oh oops forgot to force-pull hold on","date":"2013-09-29T04:23:58.736Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: that fixes it","date":"2013-09-29T04:25:28.771Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: but that's a pretty gross hack ;)","date":"2013-09-29T04:25:33.641Z","type":"message"}
{"nick":"trevnorris","message":"what fixes it?","date":"2013-09-29T04:25:39.948Z","type":"message"}
{"nick":"othiym23","message":"your latest fix + a test added to the CLS listener to see if a domain has been passed in, and to just return that if it's been passed","date":"2013-09-29T04:26:57.308Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: ok, just forced pushed an update that removed the debug passing the domain thing. that isn't supposed to go into production.","date":"2013-09-29T04:27:22.218Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: I have a check that checks the return value of the listener, and it'll only reset the domain if a new return value is returned from the listener.","date":"2013-09-29T04:27:50.600Z","type":"message"}
{"nick":"trevnorris","message":"but you're saying that the listener is being called multiple times for the same async event?","date":"2013-09-29T04:28:08.889Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: I'm not sure what you mean by \"same async event\"","date":"2013-09-29T04:30:34.233Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: e.g. run of a timer.","date":"2013-09-29T04:31:07.187Z","type":"message"}
{"nick":"trevnorris","message":"it should only run once, and the context should always be unique.","date":"2013-09-29T04:31:21.664Z","type":"message"}
{"nick":"trevnorris","message":"if that's not the case, then there's a fundamental flaw.","date":"2013-09-29T04:31:29.613Z","type":"message"}
{"nick":"trevnorris","message":"so nothing should be overwritten.","date":"2013-09-29T04:31:36.154Z","type":"message"}
{"nick":"othiym23","message":"if you look at that gist, there's a call to the listener that produces an 'immediate' object with an async queue attached","date":"2013-09-29T04:32:26.645Z","type":"message"}
{"nick":"othiym23","message":"the domain of that immediate object is {safe : true}","date":"2013-09-29T04:32:41.678Z","type":"message"}
{"nick":"trevnorris","message":"which test, you have several now :)","date":"2013-09-29T04:32:49.481Z","type":"message"}
{"nick":"trevnorris","message":"ah, that one","date":"2013-09-29T04:32:53.582Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: we, or at least I, need a much simpler test case. i'm getting confused tracing through all this. or at least, i'm not understanding the fundamental concept of the end goal.","date":"2013-09-29T04:33:55.903Z","type":"message"}
{"nick":"othiym23","message":"later on, WriteStream.Socket._writeGeneric calls createWriteReq, which triggers a call to runAsyncQueue, which in turn calls the listener, overwriting the domain with whatever the active CLS context was","date":"2013-09-29T04:34:01.257Z","type":"message"}
{"nick":"othiym23","message":"that second call to the listener seems wrong to me","date":"2013-09-29T04:34:17.881Z","type":"message"}
{"nick":"othiym23","message":"at least happening on that immediate object","date":"2013-09-29T04:34:25.691Z","type":"message"}
{"nick":"othiym23","message":"that seems to me to be a different async event, which would get its own scope","date":"2013-09-29T04:34:42.878Z","type":"message"}
{"nick":"othiym23","message":"am I wrong in thinking so?","date":"2013-09-29T04:34:47.609Z","type":"message"}
{"nick":"trevnorris","message":"the second call shouldn't be happening if there's already an _asyncQueue object set.","date":"2013-09-29T04:34:59.887Z","type":"message"}
{"nick":"othiym23","message":"that is where the problem lies, then","date":"2013-09-29T04:35:13.828Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: let me see if I can come up with a simpler test case than dragging all of CLS in","date":"2013-09-29T04:35:56.735Z","type":"message"}
{"nick":"TooTallNate","date":"2013-09-29T04:36:00.982Z","type":"join"}
{"nick":"trevnorris","message":"othiym23: there's no obvious reason why createWriteReq would trigger runAsyncQueue","date":"2013-09-29T04:37:21.014Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: scratch that. wtf. it triggers an instantiation of WriteWrap, and passes the same object handle. thus calling two async wrap calls on the same object.","date":"2013-09-29T04:40:54.454Z","type":"message"}
{"nick":"trevnorris","message":"you've got to be freakin kidding me.","date":"2013-09-29T04:40:59.018Z","type":"message"}
{"nick":"trevnorris","message":"wait, no. that shouldn't be happening. they're creating a new \"context\" for the completion of the write request.","date":"2013-09-29T04:42:47.156Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: you can see that on line 626 of lib/net.js. they create a new object with the callback when the write request is completel.","date":"2013-09-29T04:44:12.118Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: but that should get its own context, right?","date":"2013-09-29T04:47:36.859Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: well, there's the ._handle which is it's own instance and has already run runAsyncQueue, but the WriteReq instantiation on StreamWrap::WriteBuffer will also have a call, but yeah. the context in that case will be the object created on 626 of net.js, not _handle.","date":"2013-09-29T04:48:58.300Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: and I can show that. line 460 of src/stream_wrap.cc makes the AsyncWrap::MakeCallback call against WriteWrap* req_wrap.","date":"2013-09-29T04:50:13.770Z","type":"message"}
{"nick":"trevnorris","message":"not the TCPWrap instance.","date":"2013-09-29T04:50:17.746Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: that was an issue I was having. at first I called it on the StreamWrap* wrap, but that was causing conflicts.","date":"2013-09-29T04:51:12.369Z","type":"message"}
{"nick":"trevnorris","message":"and tests failed because the context object used by AsyncWrap::MakeCallback was incorrect.","date":"2013-09-29T04:51:46.627Z","type":"message"}
{"nick":"trevnorris","message":"ugh. I can't believe how much object manipulation we're doing in c++. but must resist. that's all v0.13 optimizations.","date":"2013-09-29T04:52:31.190Z","type":"message"}
{"nick":"wolfeidau","message":"Gday all","date":"2013-09-29T04:56:32.469Z","type":"message"}
{"nick":"wolfeidau","message":"I am having an interesting issue with node cross compile atm","date":"2013-09-29T04:56:57.620Z","type":"message"}
{"nick":"wolfeidau","message":"If i use ./configure + make i get the error, if I just use make with CONFIG_FLAGS i don't","date":"2013-09-29T04:58:03.200Z","type":"message"}
{"nick":"wolfeidau","message":"It has something to do with something called mksnapshot? in the v8 build region i believe","date":"2013-09-29T04:58:51.288Z","type":"message"}
{"nick":"mikeal","date":"2013-09-29T04:59:16.004Z","type":"join"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-09-29T05:00:13.049Z","type":"nick"}
{"nick":"wolfeidau","message":"probs a bit late for US people..","date":"2013-09-29T05:00:22.261Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: https://gist.github.com/othiym23/6749497 is about as simple an example as I can contrive (read the comments)","date":"2013-09-29T05:00:38.612Z","type":"message"}
{"nick":"othiym23","message":"wolfeidau: if I knew anything about cross-compiling v8 I'd help you out ;)","date":"2013-09-29T05:00:54.692Z","type":"message"}
{"nick":"wolfeidau","message":"othiym23: :) ","date":"2013-09-29T05:01:14.099Z","type":"message"}
{"nick":"wolfeidau","message":"So far i have come to the conclusion that is a dark art ","date":"2013-09-29T05:01:34.210Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: just fyi, runAsyncQueue does a falsey check for the domain. so if you return 0, it won't be set. that so if you pre-pass a domain, it won't be overwritten but guess i should just check for \"undefined\" and make that the definitive case. thoughts?","date":"2013-09-29T05:02:42.666Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: I think checking for undefined is the best thing to do, yeah","date":"2013-09-29T05:03:22.243Z","type":"message"}
{"nick":"mikeal","reason":"Ping timeout: 248 seconds","date":"2013-09-29T05:03:33.719Z","type":"quit"}
{"nick":"trevnorris","message":"othiym23: ok, fix pushed.","date":"2013-09-29T05:04:47.203Z","type":"message"}
{"nick":"kazupon","date":"2013-09-29T05:05:42.172Z","type":"join"}
{"nick":"othiym23","message":"trevnorris: thoughts on https://gist.github.com/othiym23/6749497 ? It works with my polyfill","date":"2013-09-29T05:07:13.538Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: trying some stuff out. give me a few","date":"2013-09-29T05:07:52.639Z","type":"message"}
{"nick":"othiym23","message":"np","date":"2013-09-29T05:08:01.903Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 260 seconds","date":"2013-09-29T05:10:23.868Z","type":"quit"}
{"nick":"trevnorris","message":"othiym23: yeah. so something is definitely wrong: https://gist.github.com/trevnorris/6749541","date":"2013-09-29T05:11:10.710Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: ok. so i'm pretty sure it's because asyncStack isn't being handled properly.","date":"2013-09-29T05:13:20.099Z","type":"message"}
{"nick":"othiym23","message":"awesome, that's the part of this all that I still don't understand ;)","date":"2013-09-29T05:14:03.292Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: in loadAsyncQueue i'm printing context.callback (if it exists) and it shows that all the nextTick callbacks run in the correct order. so give me a few to figure out why the stack is jacked.","date":"2013-09-29T05:15:16.285Z","type":"message"}
{"nick":"mraleph1","reason":"Quit: Leaving.","date":"2013-09-29T05:17:40.259Z","type":"quit"}
{"nick":"trevnorris","message":"othiym23: fwiw, the domain going out of runAsyncQueue is always correct. now, figuring out why context._asyncQueue is different for the timer callback between then and loadAsyncQueue","date":"2013-09-29T05:21:54.082Z","type":"message"}
{"nick":"mikeal","date":"2013-09-29T05:25:42.455Z","type":"join"}
{"nick":"othiym23","message":"trevnorris: unless I'm badly misunderstanding, the _asyncQueue is getting changed by runAsyncQueue getting run on it again by a different async event","date":"2013-09-29T05:28:04.135Z","type":"message"}
{"nick":"trevnorris","message":"....","date":"2013-09-29T05:29:09.517Z","type":"message"}
{"nick":"trevnorris","message":"um, yeah. wow. how did I miss that.","date":"2013-09-29T05:29:31.556Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: ok, give me a min. i'll have that fixed.","date":"2013-09-29T05:30:37.465Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: ok, run against that","date":"2013-09-29T05:35:39.603Z","type":"message"}
{"nick":"othiym23","message":"k, one sec","date":"2013-09-29T05:35:53.476Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: [\"Textual IRC Client: www.textualapp.com\"]","date":"2013-09-29T05:37:04.619Z","type":"quit"}
{"nick":"othiym23","message":"thumbs up, let me try it with my other tests now","date":"2013-09-29T05:37:05.318Z","type":"message"}
{"nick":"loladiro","reason":"Quit: loladiro","date":"2013-09-29T05:40:57.409Z","type":"quit"}
{"nick":"loladiro","date":"2013-09-29T05:44:03.808Z","type":"join"}
{"nick":"othiym23","message":"trevnorris: my agent tests are passing now for the first time, barring some flakiness that is probably unrelated to asyncListener stuff","date":"2013-09-29T05:44:28.847Z","type":"message"}
{"nick":"othiym23","message":"good job!","date":"2013-09-29T05:44:34.294Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: thanks. more so I'm sorry. drastic oversight on my part. all this abstractness is killing my attention to the details.","date":"2013-09-29T05:45:08.954Z","type":"message"}
{"nick":"othiym23","message":"consider this my review of the PR ;)","date":"2013-09-29T05:46:54.775Z","type":"message"}
{"nick":"othiym23","message":"I definitely have a much better handle on how the JS side works now","date":"2013-09-29T05:47:07.116Z","type":"message"}
{"nick":"trevnorris","message":"heh, thanks.","date":"2013-09-29T05:47:23.818Z","type":"message"}
{"nick":"loladiro","reason":"Client Quit","date":"2013-09-29T05:48:51.102Z","type":"quit"}
{"nick":"trevnorris","message":"you now have a view into everything except crypto PBKDF2 and RandomBytes (working on the later), and CheckImmediate/EmitExit in node.cc","date":"2013-09-29T05:49:52.029Z","type":"message"}
{"nick":"trevnorris","message":"but even got access to cares","date":"2013-09-29T05:50:28.131Z","type":"message"}
{"nick":"trevnorris","message":"so it should give you a pretty good idea of what's going on.","date":"2013-09-29T05:50:40.155Z","type":"message"}
{"nick":"trevnorris","message":"there is more api that I need to implement as well to emulate domains.","date":"2013-09-29T05:50:52.479Z","type":"message"}
{"nick":"trevnorris","message":"e.g. the ability to add a listener to an existing handle (oh, I hate that), and think it'd be nice to allow setting listeners in c++.","date":"2013-09-29T05:51:55.818Z","type":"message"}
{"nick":"zheng_","reason":"Ping timeout: 245 seconds","date":"2013-09-29T05:55:58.169Z","type":"quit"}
{"nick":"zheng_","date":"2013-09-29T05:56:23.856Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-09-29T05:58:59.350Z","type":"quit"}
{"nick":"amartens","date":"2013-09-29T05:59:54.626Z","type":"join"}
{"nick":"othiym23","message":"I see the parallel code paths all over the place for domains and agree it would be nice to get rid of them","date":"2013-09-29T06:00:42.782Z","type":"message"}
{"nick":"othiym23","message":"it's funny, my original intent for CLS was to rework domains to run on top of them, because they behave very similarly","date":"2013-09-29T06:01:38.613Z","type":"message"}
{"nick":"othiym23","message":"but I also sorta said \"screw this\" when I saw how much work it was going to be to monkeypatch domains to run on a different substrate","date":"2013-09-29T06:02:13.480Z","type":"message"}
{"nick":"trevnorris","message":"hah, yeah.","date":"2013-09-29T06:05:40.521Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: doubt i'll be able to get all that work done by v0.12 release, but it's on my definite todo list before v1.0","date":"2013-09-29T06:06:18.322Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: right now the path is to make sure all c++ Wrap classes are always instantiated at the same time as their js counterparts.","date":"2013-09-29T06:06:54.372Z","type":"message"}
{"nick":"othiym23","message":"yeah, I saw your conversation with bnoordhuis, and that seems sane to me","date":"2013-09-29T06:07:12.050Z","type":"message"}
{"nick":"trevnorris","message":"so that first. which is probably going to be non-trivial.","date":"2013-09-29T06:07:47.903Z","type":"message"}
{"nick":"trevnorris","message":"then domains will be removed from c++ core code at least, and most of lib/. except for events.","date":"2013-09-29T06:08:31.156Z","type":"message"}
{"nick":"trevnorris","message":"they'll always have to be in lib/events.js","date":"2013-09-29T06:08:41.719Z","type":"message"}
{"nick":"trevnorris","message":"well, we've already discussed this. sorry, ramble when I get tired.","date":"2013-09-29T06:09:15.267Z","type":"message"}
{"nick":"othiym23","message":"yeah, I'm having to monkeypunch individual EEs to get CLS working with them the way I want","date":"2013-09-29T06:09:24.061Z","type":"message"}
{"nick":"othiym23","message":"nah, that's OK","date":"2013-09-29T06:09:33.715Z","type":"message"}
{"nick":"trevnorris","message":"oy. doubt i'll be able to get everything done on my v0.13 todo list. oh well, guess I'll just need to prioritize. :P","date":"2013-09-29T06:10:42.085Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-v0.10-windows\u0002: #234 \u00037UNSTABLE\u000f windows-ia32 (7/600) windows-x64 (7/600) http://jenkins.nodejs.org/job/nodejs-v0.10-windows/234/","date":"2013-09-29T06:41:18.777Z","type":"message"}
{"nick":"zheng__","date":"2013-09-29T06:52:03.621Z","type":"join"}
{"nick":"zheng_","reason":"Ping timeout: 260 seconds","date":"2013-09-29T06:55:23.973Z","type":"quit"}
{"nick":"kazupon","date":"2013-09-29T07:06:13.982Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 248 seconds","date":"2013-09-29T07:11:01.799Z","type":"quit"}
{"nick":"hz","date":"2013-09-29T07:13:35.785Z","type":"join"}
{"nick":"hz","reason":"Client Quit","date":"2013-09-29T07:15:12.599Z","type":"quit"}
{"nick":"hz","date":"2013-09-29T07:32:52.787Z","type":"join"}
{"nick":"paddybyers","date":"2013-09-29T07:35:57.310Z","type":"join"}
{"nick":"EhevuTov","date":"2013-09-29T07:46:00.447Z","type":"join"}
