{"nick":"fourq","new_nick":"fourq|away","date":"2016-02-08T00:00:08.777Z","type":"nick"}
{"nick":"fourq|away","new_nick":"fourq","date":"2016-02-08T00:59:34.057Z","type":"nick"}
{"nick":"alexforster","date":"2016-02-08T01:32:53.743Z","type":"join"}
{"nick":"alexforster","reason":"Client Quit","date":"2016-02-08T01:35:34.604Z","type":"quit"}
{"nick":"brson","reason":"Quit: leaving","date":"2016-02-08T02:13:53.603Z","type":"quit"}
{"nick":"evanluca_","date":"2016-02-08T02:21:17.053Z","type":"join"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-02-08T02:21:33.248Z","type":"quit"}
{"nick":"tunniclm_","reason":"Ping timeout: 260 seconds","date":"2016-02-08T02:29:20.567Z","type":"quit"}
{"nick":"bwoebi","reason":"Ping timeout: 240 seconds","date":"2016-02-08T03:04:55.729Z","type":"quit"}
{"nick":"evanluca_","reason":"Read error: Connection reset by peer","date":"2016-02-08T05:19:23.535Z","type":"quit"}
{"nick":"evanlucas","date":"2016-02-08T05:19:41.684Z","type":"join"}
{"nick":"Left_Turn","reason":"Ping timeout: 240 seconds","date":"2016-02-08T05:31:06.076Z","type":"quit"}
{"nick":"seishun","date":"2016-02-08T06:43:09.183Z","type":"join"}
{"nick":"txdv","message":"iamtakingiteasy: the reason why most of the stuff is not on the stack is","date":"2016-02-08T06:44:23.021Z","type":"message"}
{"nick":"txdv","message":"the lib is asynchronous","date":"2016-02-08T06:44:28.750Z","type":"message"}
{"nick":"txdv","message":"its not blocking","date":"2016-02-08T06:44:31.450Z","type":"message"}
{"nick":"txdv","message":"functions tend to run through and the stack get cleared","date":"2016-02-08T06:44:38.373Z","type":"message"}
{"nick":"txdv","message":"you could use the stack for the loop if you block with uv_run","date":"2016-02-08T06:44:59.862Z","type":"message"}
{"nick":"mmicko","date":"2016-02-08T06:58:01.818Z","type":"join"}
{"nick":"iamtakingiteasy","message":"txdv: thank you. Though it still seems to me as completly unnesessary, if not to say confusing, in case of simple examples; not supposed to have any initializations beyond main() function, yet still doing full run-time memory allocation and de-allocation for constantly-sized data structure with no complicated life-cycle.","date":"2016-02-08T07:01:26.214Z","type":"message"}
{"nick":"txdv","message":"well, if  you look at the tests, most of them are not dynamically allocated","date":"2016-02-08T07:05:33.957Z","type":"message"}
{"nick":"txdv","message":"the problem is the same","date":"2016-02-08T07:06:38.282Z","type":"message"}
{"nick":"txdv","message":"https://github.com/libuv/libuv/blob/v1.x/test/test-udp-try-send.c#L42-L47","date":"2016-02-08T07:06:44.689Z","type":"message"}
{"nick":"txdv","message":"either you allocate them like this","date":"2016-02-08T07:06:49.550Z","type":"message"}
{"nick":"txdv","message":"which means you are a predefined size and you can't get above it","date":"2016-02-08T07:07:02.863Z","type":"message"}
{"nick":"txdv","message":"or you do it dynamicallty","date":"2016-02-08T07:07:13.373Z","type":"message"}
{"nick":"txdv","message":"becauase if you do it on the stack, no function blocks, every libuv is supposed to finish immediately","date":"2016-02-08T07:07:41.645Z","type":"message"}
{"nick":"iamtakingiteasy","message":"speaking of size, how can you get above it in case when malloc argument is a compile-time sizeof() construct (every case i've seen)?","date":"2016-02-08T07:08:08.692Z","type":"message"}
{"nick":"txdv","message":"so if you do create a new socket and connect somewhere, you handle the connection even in the callback","date":"2016-02-08T07:08:12.720Z","type":"message"}
{"nick":"txdv","message":"i dont understand the question","date":"2016-02-08T07:08:42.992Z","type":"message"}
{"nick":"iamtakingiteasy","message":"i am refering to >txdv  which means you are a predefined size and you can't get above it< -- you have the same pre-defined size at compile-time both with malloc and stack allocation","date":"2016-02-08T07:09:39.096Z","type":"message"}
{"nick":"txdv","message":"well the sizes of the structs are predefined","date":"2016-02-08T07:10:40.466Z","type":"message"}
{"nick":"txdv","message":"however, if you create a an array with malloc","date":"2016-02-08T07:10:49.016Z","type":"message"}
{"nick":"txdv","message":"you are free to make it as big as you want","date":"2016-02-08T07:10:53.338Z","type":"message"}
{"nick":"txdv","message":"malloc is a dynamic allocation, you can have as many dynamic allocations as you want","date":"2016-02-08T07:11:30.997Z","type":"message"}
{"nick":"txdv","message":"if a connection comes in, you can use malloc to allocate some memory for the tcp struct for example","date":"2016-02-08T07:13:01.187Z","type":"message"}
{"nick":"txdv","message":"and on disconnect you free that","date":"2016-02-08T07:13:13.141Z","type":"message"}
{"nick":"txdv","message":"if you use static program allocation, you will have a predefined size","date":"2016-02-08T07:13:34.438Z","type":"message"}
{"nick":"txdv","message":"its either an element or an array, but its static and will never grow","date":"2016-02-08T07:13:49.969Z","type":"message"}
{"nick":"txdv","message":"if you try to put it on the stack, the functions run through immediately, once it is out of scope, the allocated stack memory is void","date":"2016-02-08T07:14:19.382Z","type":"message"}
{"nick":"txdv","message":"you see in my test, i know exactly how many sockets i will need","date":"2016-02-08T07:15:27.151Z","type":"message"}
{"nick":"txdv","message":"so i create 2 of them","date":"2016-02-08T07:15:30.400Z","type":"message"}
{"nick":"txdv","message":"iamtakingiteasy: i hope you understood what i wanted to say","date":"2016-02-08T07:18:04.436Z","type":"message"}
{"nick":"txdv","message":"to summarize: libuv doesn't block, all the structs allocated on the stack in the function are void past the actual event","date":"2016-02-08T07:18:25.543Z","type":"message"}
{"nick":"txdv","message":"so if you have a connect and disconnect event, you link a function to the connect event, you allocate some structs on the stack in that function","date":"2016-02-08T07:19:11.218Z","type":"message"}
{"nick":"txdv","message":"but all of them are void after the function is done handling the event","date":"2016-02-08T07:19:29.364Z","type":"message"}
{"nick":"txdv","message":"and you cant use blocking calls in that function because it will stop the entire event loop","date":"2016-02-08T07:19:47.714Z","type":"message"}
{"nick":"txdv","message":"and if you use that allocated struct in the disconnect event, you have left the connect event function and thus the pointer to the stack probably contains garbage","date":"2016-02-08T07:21:23.864Z","type":"message"}
{"nick":"Left_Turn","date":"2016-02-08T07:30:01.496Z","type":"join"}
{"nick":"Ralith","message":"iamtakingiteasy: I pretty much always place my uv_loop_t on the stack, and generally most of the other stuff is directly inside something or other as well","date":"2016-02-08T07:33:47.467Z","type":"message"}
{"nick":"Ralith","message":"one of the nice things about libuv is that it lets you do that, vs other libs that always unavoidably allocate everything behind the scenes","date":"2016-02-08T07:34:09.428Z","type":"message"}
{"nick":"daurnimator","message":"for a uv_loop_t I can't imagine it matters much","date":"2016-02-08T07:36:17.736Z","type":"message"}
{"nick":"daurnimator","message":"it's a pretty much unheard of use-case to create/destroy them on a hot path","date":"2016-02-08T07:36:43.484Z","type":"message"}
{"nick":"daurnimator","message":"makes more sense to be consistent with allocations than to prematurely optimize","date":"2016-02-08T07:37:19.742Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 240 seconds","date":"2016-02-08T07:56:34.016Z","type":"quit"}
