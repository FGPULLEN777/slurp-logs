{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-07-04T00:00:00.670Z","type":"quit"}
{"nick":"tjfontaine","message":"trevnorris: the man page doesn't indicate that it would return less, but it does say it returns how much was written, defensive coding may need to take effect","date":"2013-07-04T00:00:02.877Z","type":"message"}
{"nick":"ircretary","date":"2013-07-04T00:00:09.296Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: thanks.","date":"2013-07-04T00:00:41.900Z","type":"message"}
{"nick":"mordy_","message":"ok.. finally i have my DLL","date":"2013-07-04T00:01:05.979Z","type":"message"}
{"nick":"tjfontaine","message":"the linux man page says different than osx of course","date":"2013-07-04T00:01:19.583Z","type":"message"}
{"nick":"tjfontaine","message":"The number of bytes written may be less than count if, for example, there is insufficient space on the underlying physical medium, or the RLIMIT_FSIZE resource limit is encountered (see setrlimit(2)), or the call was interrupted by a signal handler after having written less than count bytes","date":"2013-07-04T00:01:20.578Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: ok. all updated have occurred to the file linked here: https://github.com/trevnorris/node/commit/fc312d1#diff-2","date":"2013-07-04T00:01:44.044Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ok. problem there is I don't allow users to specify a substring. so if the write length is < string byte length they'll have to write the entire thing again.","date":"2013-07-04T00:02:27.999Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: the upper api may not support it, but your call could?","date":"2013-07-04T00:02:57.760Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: you mean writing a substring?","date":"2013-07-04T00:03:16.157Z","type":"message"}
{"nick":"tjfontaine","message":"handling the retry","date":"2013-07-04T00:03:25.078Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: retrying was my first thought, but in the case of disk being full then retrying would be bad.","date":"2013-07-04T00:04:11.047Z","type":"message"}
{"nick":"trevnorris","message":"i'm cool w/ the idea of handling it more gracefully, but between not knowing the best solution and it not having been supported before, not going to worry about it for this pr. :)","date":"2013-07-04T00:05:45.630Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: checking for ENOSPC or EFBIG and other things are appropriate","date":"2013-07-04T00:07:33.518Z","type":"message"}
{"nick":"tjfontaine","message":"in those cases you're getting -1 back, which is probably already handled for you","date":"2013-07-04T00:08:18.559Z","type":"message"}
{"nick":"loladiro","date":"2013-07-04T00:08:39.254Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: yeah it is. good point.","date":"2013-07-04T00:10:16.870Z","type":"message"}
{"nick":"loladiro","reason":"Client Quit","date":"2013-07-04T00:10:22.862Z","type":"quit"}
{"nick":"tjfontaine","message":"      1 osx-x64.tap:not ok - test-tls-client-verify.js","date":"2013-07-04T00:11:34.538Z","type":"message"}
{"nick":"tjfontaine","message":"      1 smartos-x64.tap:not ok - test-tls-client-verify.js","date":"2013-07-04T00:11:34.539Z","type":"message"}
{"nick":"tjfontaine","message":"      1 windows-x64.tap:not ok - test-tls-client-verify.js","date":"2013-07-04T00:11:34.539Z","type":"message"}
{"nick":"tjfontaine","message":"      2 linux-ia32.tap:not ok - test-tls-client-verify.js","date":"2013-07-04T00:11:34.539Z","type":"message"}
{"nick":"tjfontaine","message":"      2 linux-x64.tap:not ok - test-tls-client-verify.js","date":"2013-07-04T00:11:34.539Z","type":"message"}
{"nick":"tjfontaine","message":"      2 smartos-ia32.tap:not ok - test-tls-client-verify.js","date":"2013-07-04T00:11:36.916Z","type":"message"}
{"nick":"tjfontaine","message":"      6 osx-ia32.tap:not ok - test-tls-client-verify.js","date":"2013-07-04T00:11:39.444Z","type":"message"}
{"nick":"tjfontaine","message":"ok, finally worked that job out so I could see useful things","date":"2013-07-04T00:11:50.330Z","type":"message"}
{"nick":"tjfontaine","message":"I really need to do a post-process job with node-tap and turn them into json blobs","date":"2013-07-04T00:12:40.110Z","type":"message"}
{"nick":"trevnorris","action":"&","date":"2013-07-04T00:16:40.888Z","type":"action"}
{"nick":"LOUDBOT","message":"GOOGLE CORRECTS OTHER PEOPLE'S SPELLINGS AS WELL AS YOUR OWN","date":"2013-07-04T00:16:41.402Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-07-04T00:31:36.437Z","type":"quit"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-07-04T00:41:29.210Z","type":"quit"}
{"nick":"qard","reason":"Quit: Leaving.","date":"2013-07-04T00:41:55.520Z","type":"quit"}
{"nick":"qard","date":"2013-07-04T00:42:22.407Z","type":"join"}
{"nick":"piscisaureus_","date":"2013-07-04T00:45:20.174Z","type":"join"}
{"nick":"piscisaureus_","reason":"Client Quit","date":"2013-07-04T00:46:08.226Z","type":"quit"}
{"nick":"qard","reason":"Ping timeout: 246 seconds","date":"2013-07-04T00:46:33.151Z","type":"quit"}
{"nick":"TooTallNate","date":"2013-07-04T00:49:48.502Z","type":"join"}
{"nick":"bradleymeck","date":"2013-07-04T00:58:25.420Z","type":"join"}
{"nick":"abraxas","date":"2013-07-04T01:03:51.276Z","type":"join"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-07-04T01:05:27.469Z","type":"quit"}
{"nick":"loladiro","date":"2013-07-04T01:06:51.957Z","type":"join"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-07-04T01:20:34.517Z","type":"quit"}
{"nick":"amartens","date":"2013-07-04T01:25:20.117Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2013-07-04T01:25:48.212Z","type":"quit"}
{"nick":"M28","reason":"Read error: Connection reset by peer","date":"2013-07-04T01:39:28.169Z","type":"quit"}
{"nick":"M28","date":"2013-07-04T01:39:43.264Z","type":"join"}
{"nick":"bnoordhuis","message":"41 files changed, 1691 insertions(+), 3071 deletions(-) <- seriously, wtf?","date":"2013-07-04T01:41:30.404Z","type":"message"}
{"nick":"tjfontaine","message":"jesus.","date":"2013-07-04T01:42:03.116Z","type":"message"}
{"nick":"tjfontaine","message":"that's a lot of touch","date":"2013-07-04T01:42:05.753Z","type":"message"}
{"nick":"bnoordhuis","message":"i removed v8_typed_array* tough","date":"2013-07-04T01:42:30.869Z","type":"message"}
{"nick":"bnoordhuis","message":"it was beyond salvation and v8 has native typed arrays now","date":"2013-07-04T01:42:43.984Z","type":"message"}
{"nick":"bnoordhuis","message":"*though","date":"2013-07-04T01:42:52.852Z","type":"message"}
{"nick":"tjfontaine","message":"indeed","date":"2013-07-04T01:43:15.734Z","type":"message"}
{"nick":"M28","reason":"Read error: Connection reset by peer","date":"2013-07-04T02:14:42.766Z","type":"quit"}
{"nick":"M28","date":"2013-07-04T02:15:59.381Z","type":"join"}
{"nick":"hij1nx","reason":"Ping timeout: 264 seconds","date":"2013-07-04T02:18:31.404Z","type":"quit"}
{"nick":"AvianFlu","reason":"Read error: Connection reset by peer","date":"2013-07-04T02:30:08.116Z","type":"quit"}
{"nick":"groundwater","date":"2013-07-04T02:30:38.866Z","type":"join"}
{"nick":"AvianFlu","date":"2013-07-04T02:30:45.516Z","type":"join"}
{"nick":"brson","reason":"Quit: leaving","date":"2013-07-04T02:34:28.845Z","type":"quit"}
{"nick":"appu_","date":"2013-07-04T02:39:18.107Z","type":"join"}
{"nick":"dap1","reason":"Read error: Connection reset by peer","date":"2013-07-04T02:45:06.440Z","type":"quit"}
{"nick":"timoxley","date":"2013-07-04T02:45:11.271Z","type":"join"}
{"nick":"dap","date":"2013-07-04T02:46:03.851Z","type":"join"}
{"nick":"bnoordhuis","message":"from simple/test-buffer: // check that the base64 decoder ignores illegal chars","date":"2013-07-04T02:49:49.983Z","type":"message"}
{"nick":"tjfontaine","message":"hm","date":"2013-07-04T02:50:14.410Z","type":"message"}
{"nick":"bnoordhuis","message":"maybe the base64 decoder does. String::AsciiValue however doesn't anymore :(","date":"2013-07-04T02:50:22.694Z","type":"message"}
{"nick":"bnoordhuis","message":"i'm hitting asserts in v8 left and right","date":"2013-07-04T02:50:46.267Z","type":"message"}
{"nick":"bnoordhuis","message":"oh well, there's always tomorrow","date":"2013-07-04T02:50:58.157Z","type":"message"}
{"nick":"dap","reason":"Quit: Leaving.","date":"2013-07-04T02:57:17.373Z","type":"quit"}
{"nick":"dap","date":"2013-07-04T02:57:37.314Z","type":"join"}
{"nick":"appu_","reason":"Quit: appu_","date":"2013-07-04T03:04:15.378Z","type":"quit"}
{"nick":"dap","reason":"Quit: Leaving.","date":"2013-07-04T03:23:09.609Z","type":"quit"}
{"nick":"kazupon","date":"2013-07-04T03:28:28.434Z","type":"join"}
{"nick":"dap","date":"2013-07-04T03:33:31.232Z","type":"join"}
{"nick":"dap","reason":"Client Quit","date":"2013-07-04T03:33:37.435Z","type":"quit"}
{"nick":"M28","reason":"Read error: Connection reset by peer","date":"2013-07-04T03:36:22.696Z","type":"quit"}
{"nick":"M28","date":"2013-07-04T03:36:35.291Z","type":"join"}
{"nick":"appu_","date":"2013-07-04T03:36:35.660Z","type":"join"}
{"nick":"appu_","reason":"Client Quit","date":"2013-07-04T03:39:11.115Z","type":"quit"}
{"nick":"TooTallNate","date":"2013-07-04T03:42:42.140Z","type":"join"}
{"nick":"M28","reason":"Remote host closed the connection","date":"2013-07-04T03:47:13.338Z","type":"quit"}
{"nick":"M28","date":"2013-07-04T03:47:28.168Z","type":"join"}
{"nick":"groundwater","reason":"Quit: groundwater","date":"2013-07-04T03:50:14.409Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-07-04T03:57:16.908Z","type":"nick"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-07-04T03:58:28.625Z","type":"quit"}
{"nick":"timoxley","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2013-07-04T04:06:20.042Z","type":"quit"}
{"nick":"bajtos","date":"2013-07-04T04:07:17.037Z","type":"join"}
{"nick":"timoxley","date":"2013-07-04T04:08:22.067Z","type":"join"}
{"nick":"hij1nx","date":"2013-07-04T04:19:47.195Z","type":"join"}
{"nick":"bradleymeck","date":"2013-07-04T04:20:35.587Z","type":"join"}
{"nick":"appu_","date":"2013-07-04T04:45:33.254Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-07-04T05:04:41.078Z","type":"join"}
{"nick":"tjfontaine","message":"trevnorris: specifically the conversation is about bumping that number as convention per each release, part of the problem is that we internally have a poorly defined process for that number changing","date":"2013-07-04T05:06:16.252Z","type":"message"}
{"nick":"tjfontaine","message":"I think this continues to fall into the category that addons and the api for them are still largely undefined","date":"2013-07-04T05:06:51.026Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 276 seconds","date":"2013-07-04T05:10:07.078Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2013-07-04T05:12:17.535Z","type":"quit"}
{"nick":"trevnorris","message":"tjfontaine: understood. guess for me it's always been, expect breakage every dev release and keep stable, well, stable.","date":"2013-07-04T05:16:06.346Z","type":"message"}
{"nick":"trevnorris","message":"so never bothered w/ that value","date":"2013-07-04T05:16:15.033Z","type":"message"}
{"nick":"tjfontaine","message":"well, depending on what's going on, a prebuilt .node will still load presuming the symbols are still there","date":"2013-07-04T05:16:37.074Z","type":"message"}
{"nick":"tjfontaine","message":"however","date":"2013-07-04T05:16:44.245Z","type":"message"}
{"nick":"tjfontaine","message":"all hell can break loose in unexpected ways, or in very subtle ways","date":"2013-07-04T05:17:00.764Z","type":"message"}
{"nick":"tjfontaine","message":"which makes it difficult for module authors to diagnose issues as they come into their project","date":"2013-07-04T05:17:21.761Z","type":"message"}
{"nick":"trevnorris","message":"yeah. well this dev cycle is going to be full of all hell breaking loose constantly","date":"2013-07-04T05:17:33.235Z","type":"message"}
{"nick":"tjfontaine","message":"sure, which is why it's important that we work out our policy for such things, as it would take a very severe issue for that number to ever change in a stable releas","date":"2013-07-04T05:18:16.657Z","type":"message"}
{"nick":"tjfontaine","message":"e","date":"2013-07-04T05:18:19.652Z","type":"message"}
{"nick":"tjfontaine","message":"the only time that number will change with regularity is in the unstable branch","date":"2013-07-04T05:18:53.925Z","type":"message"}
{"nick":"trevnorris","message":"imho it'd be a pre-req to standardizing what api we actually support","date":"2013-07-04T05:19:04.987Z","type":"message"}
{"nick":"tjfontaine","message":"I don't disagree, I plan on writing down some of my thoughts on that this weekend and attaching it to the issue","date":"2013-07-04T05:19:37.348Z","type":"message"}
{"nick":"trevnorris","message":"you know if ben has his current v8 changes online somewhere?","date":"2013-07-04T05:20:03.898Z","type":"message"}
{"nick":"trevnorris","message":"oh, and rvagg didn't even hit half the current changes.","date":"2013-07-04T05:20:34.318Z","type":"message"}
{"nick":"tjfontaine","message":"https://github.com/bnoordhuis/node/compare/upgrade-v8 it may be this one","date":"2013-07-04T05:20:45.922Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: so we really need to keep that doc up to date in lockstep with our commits","date":"2013-07-04T05:21:05.285Z","type":"message"}
{"nick":"trevnorris","message":"ok. i'll throw up at least what changes have happened.","date":"2013-07-04T05:21:30.143Z","type":"message"}
{"nick":"rvagg","message":"there was a bump in 0.10, or perhaps it was 0.8, I can't remember the context but there will be occasion where it may be necessary to bump it in stable","date":"2013-07-04T05:21:42.576Z","type":"message"}
{"nick":"tjfontaine","message":"as this issue is concerned for rvagg, my position would be that we only update that number IFF something has changed since the last unstable point release, not just because it's a point release, and that number should only ever bump once per release","date":"2013-07-04T05:22:23.590Z","type":"message"}
{"nick":"trevnorris","message":"would it also count for js api changes, or just cc level changes?","date":"2013-07-04T05:22:48.703Z","type":"message"}
{"nick":"tjfontaine","message":"rvagg: right, a bump in a stable of 0.8 or 0.10 would indicate we released too soon","date":"2013-07-04T05:22:51.630Z","type":"message"}
{"nick":"rvagg","message":"that's fine as long as you have a relatively strict process for doing it and that people actually do it","date":"2013-07-04T05:22:55.187Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: no, this is specifically for binary addons","date":"2013-07-04T05:23:00.812Z","type":"message"}
{"nick":"trevnorris","message":"ok","date":"2013-07-04T05:23:04.299Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: if this number changes and you require() it will refuse to load","date":"2013-07-04T05:23:09.334Z","type":"message"}
{"nick":"trevnorris","message":"alright. i'm updating the wikipage now","date":"2013-07-04T05:23:23.490Z","type":"message"}
{"nick":"tjfontaine","message":"rvagg: yes, I agree, this is a failure of our internal process imo","date":"2013-07-04T05:23:31.643Z","type":"message"}
{"nick":"tjfontaine","message":"if we've released a version of node (unstable or otherwise) and then we've changed an api that modules depend on, or changed the abi, regardless of the fact it's the unstable channel, we *should* update the node_module_version","date":"2013-07-04T05:26:20.179Z","type":"message"}
{"nick":"tjfontaine","message":"akin to that, we need to actually work at actually integrating addon tests into the test suite, so it's easier for us to identify when we've failed","date":"2013-07-04T05:27:07.242Z","type":"message"}
{"nick":"tjfontaine","message":"I will file an issue for that (if it's not already there) and assign it to myself","date":"2013-07-04T05:27:43.952Z","type":"message"}
{"nick":"trevnorris","message":"fwiw v8 has been changing so fast that we'd have to had removed half the changes currently in place","date":"2013-07-04T05:28:24.224Z","type":"message"}
{"nick":"tjfontaine","message":"that's ok","date":"2013-07-04T05:28:46.361Z","type":"message"}
{"nick":"tjfontaine","message":"I'd rather have churn on that wiki page than to miss something come time to release 0.12","date":"2013-07-04T05:29:08.391Z","type":"message"}
{"nick":"rvagg","message":"trevnorris: what's the deal with deprecating Handle? are we supposed to be using just Local and Persistent now? what if we need a generic version of both of those?","date":"2013-07-04T05:30:31.258Z","type":"message"}
{"nick":"trevnorris","message":"rvagg: there's no generic version. that's part of the pain ben is going through right now updating core to 3.20","date":"2013-07-04T05:31:10.945Z","type":"message"}
{"nick":"rvagg","message":"yikes, so Local and Persistent are no longer related?","date":"2013-07-04T05:31:26.607Z","type":"message"}
{"nick":"trevnorris","message":"yup. no class inheritance going on","date":"2013-07-04T05:31:39.585Z","type":"message"}
{"nick":"rvagg","message":"oh my","date":"2013-07-04T05:31:46.676Z","type":"message"}
{"nick":"trevnorris","message":"so they have to  be explicitly cast, and that also means a lot more function declarations if you want to support both.","date":"2013-07-04T05:32:07.975Z","type":"message"}
{"nick":"rvagg","message":"I guess that's going to make it harder to miss a non-Disposed Persistent then","date":"2013-07-04T05:33:13.735Z","type":"message"}
{"nick":"stagas","date":"2013-07-04T05:46:47.163Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: how's this: https://github.com/joyent/node/wiki/API-changes-between-v0.10-and-v0.12","date":"2013-07-04T05:47:51.690Z","type":"message"}
{"nick":"tjfontaine","message":" Buffer.dipose() have been added","date":"2013-07-04T05:49:31.541Z","type":"message"}
{"nick":"tjfontaine","message":"that did go in?","date":"2013-07-04T05:49:35.108Z","type":"message"}
{"nick":"trevnorris","message":"Buffer.dispose() but now Buffer#dispose()","date":"2013-07-04T05:49:56.354Z","type":"message"}
{"nick":"trevnorris","message":"s/now/not","date":"2013-07-04T05:50:00.841Z","type":"message"}
{"nick":"tjfontaine","message":"so <instance>.dispose()?","date":"2013-07-04T05:50:33.085Z","type":"message"}
{"nick":"trevnorris","message":"no. that isn't in","date":"2013-07-04T05:50:42.502Z","type":"message"}
{"nick":"tjfontaine","message":"ok so what does the \"static method\" in this case do?","date":"2013-07-04T05:51:00.465Z","type":"message"}
{"nick":"trevnorris","message":"var b = {}; Buffer.alloc(5, b); /* use b for stuff */ Buffer.dispose(b);","date":"2013-07-04T05:51:32.377Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-07-04T05:51:49.014Z","type":"quit"}
{"nick":"tjfontaine","message":"oh","date":"2013-07-04T05:51:51.508Z","type":"message"}
{"nick":"trevnorris","message":"it's an api specifically for module authors. not used in core.","date":"2013-07-04T05:51:58.100Z","type":"message"}
{"nick":"tjfontaine","message":"hm","date":"2013-07-04T05:52:07.721Z","type":"message"}
{"nick":"trevnorris","message":"actually, wait. mis spoke","date":"2013-07-04T05:52:22.565Z","type":"message"}
{"nick":"trevnorris","message":"the underlying mechanism is used in core, but I just exposed it via simple class methods","date":"2013-07-04T05:52:47.891Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2013-07-04T05:53:02.244Z","type":"message"}
{"nick":"tjfontaine","message":"what happens if I Buffer.dispose(<instance of buffer>)","date":"2013-07-04T05:53:13.763Z","type":"message"}
{"nick":"trevnorris","message":"throws","date":"2013-07-04T05:53:19.782Z","type":"message"}
{"nick":"trevnorris","message":"put in a check specific for that","date":"2013-07-04T05:53:28.057Z","type":"message"}
{"nick":"tjfontaine","message":"mk","date":"2013-07-04T05:53:31.189Z","type":"message"}
{"nick":"tjfontaine","message":"I may have asked that question before :P","date":"2013-07-04T05:53:52.827Z","type":"message"}
{"nick":"trevnorris","message":"nope, not yet. :)","date":"2013-07-04T05:54:07.960Z","type":"message"}
{"nick":"M28","message":"I need some clarifications about uv_tcp_connect","date":"2013-07-04T05:54:42.720Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: here's the doc entries: http://git.io/pRsCZQ","date":"2013-07-04T05:54:57.073Z","type":"message"}
{"nick":"M28","message":"the first handle, what is it? A handle to the connection, so do I need to store it?","date":"2013-07-04T05:55:03.704Z","type":"message"}
{"nick":"tjfontaine","message":"so I wonder if there's a better name of these alloc/dispose methods, or if we can/should attach them to a separate \"class\" to avoid confusion","date":"2013-07-04T05:55:12.068Z","type":"message"}
{"nick":"trevnorris","message":"I was considering it by exposing a require('smalloc'). forget why I opted against it.","date":"2013-07-04T05:56:14.657Z","type":"message"}
{"nick":"tjfontaine","message":"in principle I agree they are part and parcel to how Buffer works, but what they create isn't exactly compatible","date":"2013-07-04T05:56:23.677Z","type":"message"}
{"nick":"trevnorris","message":"M28: this help at all: http://nikhilm.github.io/uvbook/networking.html#client","date":"2013-07-04T05:57:17.124Z","type":"message"}
{"nick":"M28","message":"already looked into it","date":"2013-07-04T05:57:26.333Z","type":"message"}
{"nick":"M28","message":"it doesn't explain the arguments or anything...","date":"2013-07-04T05:57:45.404Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: it'd be simple enough to do.","date":"2013-07-04T05:58:07.967Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: we should mull it over some more","date":"2013-07-04T05:59:14.308Z","type":"message"}
{"nick":"trevnorris","message":"yeah. being labeled experimental it can be changed w/o much fuss.","date":"2013-07-04T05:59:37.567Z","type":"message"}
{"nick":"tjfontaine","message":"M28: uv_connect_t is similar to a write or read request it's valid while the connection is in progress, the uv_tcp_t is what represents the connection as a whole","date":"2013-07-04T06:01:34.085Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: well, we assign stability by module, not by method","date":"2013-07-04T06:02:19.809Z","type":"message"}
{"nick":"trevnorris","message":"M28: have you looked at uv.h yet? I mean like http://git.io/ws3sxQ","date":"2013-07-04T06:02:32.709Z","type":"message"}
{"nick":"M28","message":"I'm even looking at the test cases","date":"2013-07-04T06:02:50.245Z","type":"message"}
{"nick":"tjfontaine","message":"M28: did my explanation make sense?","date":"2013-07-04T06:02:58.561Z","type":"message"}
{"nick":"M28","message":"\"/* uv_connect_t is a subclass of uv_req_t */\" doesn't help a lot","date":"2013-07-04T06:03:00.969Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: true true. then it should probably be resolved fairly quickly.","date":"2013-07-04T06:03:01.353Z","type":"message"}
{"nick":"M28","message":"yeah it kinda did","date":"2013-07-04T06:03:04.127Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: ya, need to think on it some more","date":"2013-07-04T06:03:12.111Z","type":"message"}
{"nick":"M28","message":"the problem is that I'm sending a write request, and the callback for it is never getting called, and the server isn't receiving the request","date":"2013-07-04T06:03:29.373Z","type":"message"}
{"nick":"trevnorris","message":"M28: it was more about the fields in the struct than the actual explination I found useful.","date":"2013-07-04T06:04:13.988Z","type":"message"}
{"nick":"tjfontaine","message":"M28: if you're still around tomorrow I will walk through your code, if it's updated since last you gist'd it please make sure to let me know, or if there's a new location for it","date":"2013-07-04T06:04:50.299Z","type":"message"}
{"nick":"M28","message":"alright","date":"2013-07-04T06:05:05.580Z","type":"message"}
{"nick":"tjfontaine","message":"for now, I'll sleep, see you gents on the morrow","date":"2013-07-04T06:05:34.780Z","type":"message"}
{"nick":"trevnorris","message":"night","date":"2013-07-04T06:05:40.891Z","type":"message"}
{"nick":"M28","message":"good night","date":"2013-07-04T06:05:48.329Z","type":"message"}
{"nick":"M28","message":"the weird thing is that if I pass the wrong thing to uv_write, it manages to send the message, but then it crashes","date":"2013-07-04T06:06:37.749Z","type":"message"}
{"nick":"M28","message":"if I pass the right thing it just doesn't send anything and doesn't crash or anything","date":"2013-07-04T06:06:55.392Z","type":"message"}
{"nick":"M28","message":"sigh","date":"2013-07-04T06:06:56.258Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-07-04T06:07:49.388Z","type":"quit"}
{"nick":"trevnorris","message":"M28: have you taken a look how node uses it?","date":"2013-07-04T06:08:37.788Z","type":"message"}
{"nick":"M28","message":"no","date":"2013-07-04T06:09:00.458Z","type":"message"}
{"nick":"M28","message":"I'm looking at the benchmark atm","date":"2013-07-04T06:09:06.924Z","type":"message"}
{"nick":"M28","message":"(this one https://github.com/joyent/libuv/blob/master/test/benchmark-tcp-write-batch.c)","date":"2013-07-04T06:09:11.558Z","type":"message"}
{"nick":"mikeal","date":"2013-07-04T06:09:49.227Z","type":"join"}
{"nick":"M28","message":"I can't see anything really different from my code to that benchmark (aside from the fact I'm using C++ ofc)","date":"2013-07-04T06:09:57.590Z","type":"message"}
{"nick":"trevnorris","message":"M28: so check out this method: http://git.io/_ZGyGA","date":"2013-07-04T06:10:39.506Z","type":"message"}
{"nick":"trevnorris","message":"and see how it's used by being passed to uv_tcp_connect in TCPWrap::Connect","date":"2013-07-04T06:11:15.855Z","type":"message"}
{"nick":"M28","message":"the problem is that the code is so mixed with v8 wrappers that it's hard to decipher","date":"2013-07-04T06:12:07.845Z","type":"message"}
{"nick":"M28","message":"my code is connecting just fine, the problem is actually writing the message, which for some reason doesn't work","date":"2013-07-04T06:12:30.100Z","type":"message"}
{"nick":"M28","message":"here's the current code: https://gist.github.com/Matheus28/eda2984452929cd6dbb7","date":"2013-07-04T06:12:39.778Z","type":"message"}
{"nick":"trevnorris","message":"heh, yeah. unless you're used to that it it confusing.","date":"2013-07-04T06:12:42.313Z","type":"message"}
{"nick":"M28","message":"it prints \"Writing\\n\" but doesn't print anything after that. The loop is running just fine though","date":"2013-07-04T06:13:16.876Z","type":"message"}
{"nick":"M28","message":"(I didn't paste some of the code that doesn't have a lot to do with the problem)","date":"2013-07-04T06:13:41.097Z","type":"message"}
{"nick":"M28","message":"I'm pretty sure that the problem is in that code, because I can telnet to the server just fine, and one time I accidentally passed &m_Connect instead of req to uv_write and it actually wrote the message before crashing","date":"2013-07-04T06:16:40.455Z","type":"message"}
{"nick":"trevnorris","message":"M28: can you include the code for AllocBufferCallback?","date":"2013-07-04T06:17:10.442Z","type":"message"}
{"nick":"M28","message":"it's just \"return uv_buf_init((char*)malloc(sizeof(char) * suggested_size), suggested_size);\"","date":"2013-07-04T06:17:25.313Z","type":"message"}
{"nick":"M28","message":"I found an error in my code, but it's not related to this problem","date":"2013-07-04T06:17:59.622Z","type":"message"}
{"nick":"M28","message":"nevertheless, the line with \"uv_read_start\" should be \"req->handle\" instead of \"req\"","date":"2013-07-04T06:18:20.665Z","type":"message"}
{"nick":"trevnorris","message":"why the malloc(sizeof(char) * suggested_size) instead of just malloc(suggested_size)?","date":"2013-07-04T06:19:14.665Z","type":"message"}
{"nick":"M28","message":"I like to include the type","date":"2013-07-04T06:19:29.845Z","type":"message"}
{"nick":"M28","message":"just personal preference","date":"2013-07-04T06:19:33.333Z","type":"message"}
{"nick":"trevnorris","message":"what about OnConnectionData?","date":"2013-07-04T06:19:46.868Z","type":"message"}
{"nick":"M28","message":"it's fine, it's called with -1 when I shutdown the server, but I'm gonna paste the code anyways... sec","date":"2013-07-04T06:20:09.812Z","type":"message"}
{"nick":"M28","message":"https://gist.github.com/Matheus28/2871c92df9de8a01e5c3","date":"2013-07-04T06:20:17.991Z","type":"message"}
{"nick":"trevnorris","message":"ok. so OnConnectionData is properly receiving data as it comes in?","date":"2013-07-04T06:22:55.925Z","type":"message"}
{"nick":"M28","message":"I'm not sending data from the server yet, but it properly receives status = -1 when I shut down the server while the client is running","date":"2013-07-04T06:23:26.010Z","type":"message"}
{"nick":"M28","message":"I've been scratching my head for hours and I still can't figure out why it doesn't work","date":"2013-07-04T06:27:32.423Z","type":"message"}
{"nick":"trevnorris","message":"M28: have you tried simplifying it by just running a for loop or such in OnConnect writing out data with uv_write?","date":"2013-07-04T06:27:44.434Z","type":"message"}
{"nick":"M28","message":"I mean... I can't see it being any simpler than that","date":"2013-07-04T06:28:36.211Z","type":"message"}
{"nick":"M28","message":"oh","date":"2013-07-04T06:35:03.618Z","type":"message"}
{"nick":"M28","message":"I found the problem","date":"2013-07-04T06:35:06.141Z","type":"message"}
{"nick":"M28","message":"uh","date":"2013-07-04T06:35:07.107Z","type":"message"}
{"nick":"M28","message":"a litte typo that cost me hours...","date":"2013-07-04T06:35:21.489Z","type":"message"}
{"nick":"M28","message":"in the struct write_req_t","date":"2013-07-04T06:35:29.363Z","type":"message"}
{"nick":"trevnorris","message":"heh, i've had those before.","date":"2013-07-04T06:35:33.536Z","type":"message"}
{"nick":"M28","message":"who hasn't...","date":"2013-07-04T06:35:55.465Z","type":"message"}
{"nick":"trevnorris","message":"wtf is going on w/ the new v8 FunctionCallbackInfo api?","date":"2013-07-04T06:50:35.037Z","type":"message"}
{"nick":"trevnorris","message":"ircretary: tell bnoordhuis this new api better offset some freaky awesome performance gains for such a ridiculously drastic change.","date":"2013-07-04T06:52:18.221Z","type":"message"}
{"nick":"ircretary","message":"trevnorris: I'll be sure to tell bnoordhuis","date":"2013-07-04T06:52:18.433Z","type":"message"}
{"nick":"ik","message":"ａｍｅｒｉｃａ","date":"2013-07-04T06:56:43.888Z","type":"message"}
{"nick":"ik","message":"we won","date":"2013-07-04T06:56:46.560Z","type":"message"}
{"nick":"rendar","date":"2013-07-04T07:01:09.570Z","type":"join"}
{"nick":"loladiro","reason":"Read error: Connection reset by peer","date":"2013-07-04T07:19:30.641Z","type":"quit"}
{"nick":"loladiro","date":"2013-07-04T07:21:15.163Z","type":"join"}
{"nick":"csaoh","date":"2013-07-04T07:26:30.234Z","type":"join"}
{"nick":"dominictarr","reason":"Quit: dominictarr","date":"2013-07-04T07:28:23.481Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-07-04T07:32:39.730Z","type":"quit"}
{"nick":"stagas","reason":"Ping timeout: 245 seconds","date":"2013-07-04T07:33:53.165Z","type":"quit"}
{"nick":"stagas","date":"2013-07-04T07:45:12.034Z","type":"join"}
{"nick":"stagas","reason":"Quit: Bye","date":"2013-07-04T07:50:45.821Z","type":"quit"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-07-04T07:56:39.494Z","type":"quit"}
{"nick":"rvagg","message":"whaaaat? https://github.com/bnoordhuis/node/commit/d7c32ea5042c7a4703f4a071bfafd1f0c3c5d846","date":"2013-07-04T08:01:31.404Z","type":"message"}
{"nick":"rvagg","message":"anyone got links to the new v8 stuff that's going on here?","date":"2013-07-04T08:01:38.311Z","type":"message"}
{"nick":"rvagg","message":"v8::FunctionCallbackInfo and the removal of Handle particularly","date":"2013-07-04T08:01:58.583Z","type":"message"}
{"nick":"groundwater","date":"2013-07-04T08:04:18.246Z","type":"join"}
{"nick":"AvianFlu","date":"2013-07-04T08:19:53.481Z","type":"join"}
{"nick":"indutny","message":"rvagg: no handle, only Local","date":"2013-07-04T08:26:41.351Z","type":"message"}
{"nick":"indutny","message":"and no return value :)","date":"2013-07-04T08:27:02.562Z","type":"message"}
{"nick":"indutny","message":"only through FunctionCallbackInfo","date":"2013-07-04T08:27:10.495Z","type":"message"}
{"nick":"loladiro","reason":"Quit: loladiro","date":"2013-07-04T09:02:04.196Z","type":"quit"}
{"nick":"rvagg","message":"indutny: is this all on the v8 dev list? is there somewhere that documents all these changes? google's no help","date":"2013-07-04T09:06:45.891Z","type":"message"}
{"nick":"indutny","message":"hm...","date":"2013-07-04T09:06:54.570Z","type":"message"}
{"nick":"indutny","message":"I don't really know","date":"2013-07-04T09:06:58.944Z","type":"message"}
{"nick":"indutny","message":"I'm usually looking at v8.h","date":"2013-07-04T09:07:03.482Z","type":"message"}
{"nick":"groundwater","reason":"Quit: groundwater","date":"2013-07-04T09:07:35.073Z","type":"quit"}
{"nick":"rvagg","message":"I wonder what the rationale for removing Handle is, and why the shift to FunctionCallbackInfo","date":"2013-07-04T09:08:06.525Z","type":"message"}
{"nick":"indutny","message":"handle is useless","date":"2013-07-04T09:11:25.994Z","type":"message"}
{"nick":"indutny","message":"and returning it is a bit pain","date":"2013-07-04T09:11:32.076Z","type":"message"}
{"nick":"indutny","message":"its much simplier to give users structure","date":"2013-07-04T09:11:43.714Z","type":"message"}
{"nick":"indutny","message":"and ask them to fill it","date":"2013-07-04T09:11:47.504Z","type":"message"}
{"nick":"indutny","message":"and also allows you to write functions without `return statement`","date":"2013-07-04T09:12:03.112Z","type":"message"}
{"nick":"rvagg","message":"yeah, but Handle gives you a common parent of Local and Persistent.. it did anyway","date":"2013-07-04T09:12:30.290Z","type":"message"}
{"nick":"trevnorris","message":"indutny: is there a reason doing \"Local<Value> val = *some_persistent_val;\" is no good?","date":"2013-07-04T09:13:39.333Z","type":"message"}
{"nick":"indutny","message":"well, it looks terrible :)","date":"2013-07-04T09:14:00.387Z","type":"message"}
{"nick":"indutny","message":"and uses explicit constructor","date":"2013-07-04T09:14:06.271Z","type":"message"}
{"nick":"indutny","message":"err","date":"2013-07-04T09:14:08.462Z","type":"message"}
{"nick":"indutny","message":"implicit","date":"2013-07-04T09:14:10.225Z","type":"message"}
{"nick":"trevnorris","message":"how do you mean?","date":"2013-07-04T09:14:22.797Z","type":"message"}
{"nick":"trevnorris","message":"(2am here, brain's wearing out :)","date":"2013-07-04T09:14:31.690Z","type":"message"}
{"nick":"trevnorris","message":"indutny: my main curiosity is why ben chose the following way instead of the above: https://github.com/bnoordhuis/node/commit/d7c32ea#L27R165","date":"2013-07-04T09:17:19.815Z","type":"message"}
{"nick":"indutny","message":"oh gosh","date":"2013-07-04T09:18:52.514Z","type":"message"}
{"nick":"indutny","message":"that's total ben's fail","date":"2013-07-04T09:18:56.759Z","type":"message"}
{"nick":"indutny","message":"trevnorris: using direct value's location is unsafe","date":"2013-07-04T09:20:05.419Z","type":"message"}
{"nick":"indutny","message":"and *some_persisten_val is equivalent to val.location()","date":"2013-07-04T09:20:14.067Z","type":"message"}
{"nick":"rendar_","date":"2013-07-04T09:22:57.314Z","type":"join"}
{"nick":"rendar_","reason":"Excess Flood","date":"2013-07-04T09:22:58.856Z","type":"quit"}
{"nick":"rendar_","date":"2013-07-04T09:23:19.482Z","type":"join"}
{"nick":"trevnorris","message":"indutny: ok. in v8.h it says for \"V8_INLINE(T* operator*() const) { return val_; }\" in class Persistent that it will be removed.","date":"2013-07-04T09:23:53.005Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2013-07-04T09:24:04.059Z","type":"message"}
{"nick":"trevnorris","message":"so does that mean *some_persistent_val won't work anymore?","date":"2013-07-04T09:24:06.536Z","type":"message"}
{"nick":"indutny","message":"it should be","date":"2013-07-04T09:24:07.483Z","type":"message"}
{"nick":"indutny","message":"yes","date":"2013-07-04T09:24:10.818Z","type":"message"}
{"nick":"indutny","message":"its unsafe","date":"2013-07-04T09:24:13.003Z","type":"message"}
{"nick":"indutny","message":"if you'll try to play with this value","date":"2013-07-04T09:24:21.211Z","type":"message"}
{"nick":"indutny","message":"or keep it in hands while gc is running","date":"2013-07-04T09:24:30.591Z","type":"message"}
{"nick":"indutny","message":"it'll point into nowhere","date":"2013-07-04T09:24:38.079Z","type":"message"}
{"nick":"trevnorris","message":"hm. so what's the correct way to retrieve the Local the Persistent pionts to?","date":"2013-07-04T09:24:53.522Z","type":"message"}
{"nick":"trevnorris","message":"also I can't figure out the difference between \"Persistent<Value> val(Isolate*, Local<Value>);\" and \"Persistent<Value> val = Persistent<Value>::New(Isolate*, Local<Value>);\"","date":"2013-07-04T09:27:30.577Z","type":"message"}
{"nick":"rendar","reason":"*.net *.split","date":"2013-07-04T09:32:06.909Z","type":"quit"}
{"nick":"defunctzombie_zz","reason":"*.net *.split","date":"2013-07-04T09:32:09.829Z","type":"quit"}
{"nick":"defunctzombie_zz","date":"2013-07-04T09:32:53.119Z","type":"join"}
{"nick":"rendar_","date":"2013-07-04T09:45:32.608Z","type":"quit"}
{"nick":"rendar","date":"2013-07-04T09:45:50.134Z","type":"join"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2013-07-04T10:22:01.198Z","type":"quit"}
{"nick":"csaoh","reason":"Quit: csaoh","date":"2013-07-04T10:24:35.834Z","type":"quit"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-07-04T10:29:20.143Z","type":"quit"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2013-07-04T10:31:54.620Z","type":"quit"}
{"nick":"bajtos","date":"2013-07-04T10:47:03.008Z","type":"join"}
{"nick":"bajtos","reason":"Client Quit","date":"2013-07-04T10:47:31.895Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-07-04T10:56:07.760Z","type":"join"}
{"nick":"csaoh","date":"2013-07-04T11:00:37.150Z","type":"join"}
{"nick":"bnoordhuis","message":"indutny: re: use of persistent, i'm going to eradicate it eventually","date":"2013-07-04T11:01:22.941Z","type":"message"}
{"nick":"bnoordhuis","message":"that class in node_internals.h is an intermediate thingy to stop the build from breaking completely","date":"2013-07-04T11:01:48.542Z","type":"message"}
{"nick":"loladiro","date":"2013-07-04T11:02:40.273Z","type":"join"}
{"nick":"loladiro","reason":"Client Quit","date":"2013-07-04T11:03:24.927Z","type":"quit"}
{"nick":"indutny","message":"heh","date":"2013-07-04T11:04:53.856Z","type":"message"}
{"nick":"indutny","message":"still you're shooting yourself in a leg","date":"2013-07-04T11:05:07.799Z","type":"message"}
{"nick":"timoxley","date":"2013-07-04T11:05:23.973Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-07-04T11:14:54.242Z","type":"quit"}
{"nick":"bnoordhuis","message":"indutny: well, it works for now","date":"2013-07-04T11:18:36.773Z","type":"message"}
{"nick":"bnoordhuis","message":"and i don't intend on having it stay around for long","date":"2013-07-04T11:18:53.013Z","type":"message"}
{"nick":"bnoordhuis","message":"i'm open to suggestions though","date":"2013-07-04T11:19:07.747Z","type":"message"}
{"nick":"bnoordhuis","message":"the easy solution is to remove our use of Persistent altogether","date":"2013-07-04T11:19:18.429Z","type":"message"}
{"nick":"indutny","message":"hehe","date":"2013-07-04T11:41:07.870Z","type":"message"}
{"nick":"indutny","message":"it should be possible","date":"2013-07-04T11:41:10.924Z","type":"message"}
{"nick":"indutny","message":"but will be pretty strange","date":"2013-07-04T11:41:17.132Z","type":"message"}
{"nick":"indutny","message":"ok","date":"2013-07-04T11:41:26.500Z","type":"message"}
{"nick":"indutny","message":"gtg","date":"2013-07-04T11:41:27.030Z","type":"message"}
{"nick":"appu_","reason":"Ping timeout: 248 seconds","date":"2013-07-04T12:08:01.302Z","type":"quit"}
{"nick":"bnoordhuis","message":"338 unread github emails... ye gods, there is no keeping up","date":"2013-07-04T12:19:39.715Z","type":"message"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-07-04T12:21:01.765Z","type":"quit"}
{"nick":"timoxley","date":"2013-07-04T12:42:00.208Z","type":"join"}
{"nick":"bradleymeck","date":"2013-07-04T12:53:32.932Z","type":"join"}
{"nick":"kazupon","date":"2013-07-04T12:56:30.491Z","type":"join"}
{"nick":"`3rdEden","message":"bnoordhuis: why don't you just filter them?","date":"2013-07-04T13:14:00.357Z","type":"message"}
{"nick":"bnoordhuis","message":"`3rdEden: i do but that doesn't mean i don't have to go through them :-/","date":"2013-07-04T13:21:42.202Z","type":"message"}
{"nick":"bnoordhuis","message":"okay, lunch break. biab","date":"2013-07-04T13:22:16.693Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 248 seconds","date":"2013-07-04T13:26:29.852Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-07-04T13:26:49.585Z","type":"quit"}
{"nick":"piscisaureus_","date":"2013-07-04T13:40:57.384Z","type":"join"}
{"nick":"jameshowe","date":"2013-07-04T13:45:12.145Z","type":"join"}
{"nick":"jameshowe","message":"hello","date":"2013-07-04T13:45:33.330Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/libuv:\u0002 \u00033Miroslav Bajtoš\u000f \u00037master\u000f * \u0002fd45f87\u0002 : linux,darwin,win: link-local IPv6 addresses - http://git.io/QbhOEw","date":"2013-07-04T13:46:18.680Z","type":"message"}
{"nick":"jameshowe","message":"after i've uv_queue_work(), is there any way to get an id or index for the thread it ends up executing on?","date":"2013-07-04T13:46:30.388Z","type":"message"}
{"nick":"jameshowe","message":"as for the library i'm trying to use, one is supposed to maintain thread-local data","date":"2013-07-04T13:47:04.321Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: I don't really understand what you mean if they say you're supposed to maintail thread-local data for them.","date":"2013-07-04T13:48:22.748Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: there's no interface for that although you could run uv_thread_self() as part of the job","date":"2013-07-04T13:48:54.812Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: what library is that btw?","date":"2013-07-04T13:49:18.412Z","type":"message"}
{"nick":"jameshowe","message":"in-house","date":"2013-07-04T13:49:34.039Z","type":"message"}
{"nick":"jameshowe","message":"there's a detector class, of which you're supposed to make an instance of for each thread","date":"2013-07-04T13:50:04.874Z","type":"message"}
{"nick":"jameshowe","message":"as the detection process requires state","date":"2013-07-04T13:50:18.459Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-master\u0002: #143 \u00037UNSTABLE\u000f windows (3/192) smartos (2/191) http://jenkins.nodejs.org/job/libuv-master/143/","date":"2013-07-04T13:51:28.801Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #81 \u00037UNSTABLE\u000f windows-x64 (4/192) smartos-ia32 (2/191) smartos-x64 (2/191) windows-ia32 (3/192) http://jenkins.nodejs.org/job/libuv-master-gyp/81/","date":"2013-07-04T13:52:35.819Z","type":"message"}
{"nick":"jameshowe","message":"uv_thread_self() returns an integer I should be able to use in a map?","date":"2013-07-04T13:52:44.698Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: well - yes","date":"2013-07-04T13:58:13.766Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: but libuv might clean up worker threads at will and there's no hook for it","date":"2013-07-04T13:58:36.741Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: so it sounds like you might leak memory","date":"2013-07-04T13:58:49.327Z","type":"message"}
{"nick":"jameshowe","message":"not ideal","date":"2013-07-04T13:59:05.175Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: also you could use actual TLS instead of implementing it yourself :)","date":"2013-07-04T13:59:16.264Z","type":"message"}
{"nick":"jameshowe","message":"actual as in...","date":"2013-07-04T14:00:06.116Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: also I would be surprised if you library was thread-safe. You probably are better off creating a dedicated thread.","date":"2013-07-04T14:00:20.069Z","type":"message"}
{"nick":"jameshowe","message":"it's designed and tested for a single database and multiple detectors","date":"2013-07-04T14:01:24.686Z","type":"message"}
{"nick":"jameshowe","message":"and I want the increased throughput of having multiple detectors, without the massive memory footprint of having multiple databases (which is what i have now)","date":"2013-07-04T14:02:18.830Z","type":"message"}
{"nick":"jameshowe","message":"there's no way to get a thread by its id, so I could peridically check for removed threads?","date":"2013-07-04T14:05:06.548Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-node-integration\u0002: #132 \u00037UNSTABLE\u000f smartos-x64 (7/609) smartos-ia32 (1/609) http://jenkins.nodejs.org/job/libuv-node-integration/132/","date":"2013-07-04T14:06:32.043Z","type":"message"}
{"nick":"jameshowe","message":"alternatively, are pthread_setspecific et. al going to just work if I use them in the work callbacks?","date":"2013-07-04T14:08:47.904Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: if you are on a platform that has pthreads, yes","date":"2013-07-04T14:09:18.803Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe: but still - if you instantiate a new object and assign it's pointer to a tls variable, the memory leak risk isn't gone","date":"2013-07-04T14:10:09.475Z","type":"message"}
{"nick":"jameshowe","message":"the destructor on pthread_key_create won't work?","date":"2013-07-04T14:11:04.394Z","type":"message"}
{"nick":"piscisaureus_","message":"jameshowe - oh - sure","date":"2013-07-04T14:11:42.021Z","type":"message"}
{"nick":"piscisaureus_","message":"that works","date":"2013-07-04T14:11:44.231Z","type":"message"}
{"nick":"jameshowe","message":"right, sorted then","date":"2013-07-04T14:11:58.565Z","type":"message"}
{"nick":"jameshowe","message":"i'm too used to cross-platform programming I didn't think of this first","date":"2013-07-04T14:12:17.529Z","type":"message"}
{"nick":"piscisaureus_","message":"we should add tls w/ destructor to libuv","date":"2013-07-04T14:14:06.804Z","type":"message"}
{"nick":"piscisaureus_","message":"this is such a pita in windows","date":"2013-07-04T14:14:10.904Z","type":"message"}
{"nick":"jmar777","date":"2013-07-04T14:14:29.510Z","type":"join"}
{"nick":"jameshowe","message":"called TlsAlloc on windows i think","date":"2013-07-04T14:14:59.717Z","type":"message"}
{"nick":"jameshowe","message":"don't know the details though","date":"2013-07-04T14:15:11.005Z","type":"message"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2013-07-04T14:16:48.756Z","type":"quit"}
{"nick":"piscisaureus_","message":"yes but doesn't support destructors...","date":"2013-07-04T14:16:53.855Z","type":"message"}
{"nick":"jmar777","date":"2013-07-04T14:17:16.480Z","type":"join"}
{"nick":"jameshowe","message":"indeed sounds like a job for libuv then","date":"2013-07-04T14:18:11.640Z","type":"message"}
{"nick":"jameshowe","message":"thanks for assisting my realisation of how to do this","date":"2013-07-04T14:18:34.287Z","type":"message"}
{"nick":"trevnorris","message":"i'm so confused how ben plans on removing Persistent completely. especially when resource cleanup is required (e.g. external memory)","date":"2013-07-04T14:18:52.461Z","type":"message"}
{"nick":"kazupon","date":"2013-07-04T14:19:40.599Z","type":"join"}
{"nick":"jameshowe","reason":"Quit: Leaving","date":"2013-07-04T14:21:52.324Z","type":"quit"}
{"nick":"jmar777","reason":"Ping timeout: 248 seconds","date":"2013-07-04T14:21:53.252Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-07-04T14:32:50.182Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-07-04T14:34:11.730Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 248 seconds","date":"2013-07-04T14:37:21.257Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-07-04T14:41:57.989Z","type":"quit"}
{"nick":"piscisaureus_","message":"trevnorris: maybe it does Context::Current()->global()->Get(\"save_objects\").As<Array>->Push(object) :)","date":"2013-07-04T14:42:40.143Z","type":"message"}
{"nick":"bnoordhuis","date":"2013-07-04T14:52:31.924Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2013-07-04T15:00:30.358Z","type":"quit"}
{"nick":"hz","date":"2013-07-04T15:01:00.748Z","type":"join"}
{"nick":"AvianFlu","date":"2013-07-04T15:06:07.496Z","type":"join"}
{"nick":"tjfontaine","message":"piscisaureus_: lgtm, ship it","date":"2013-07-04T15:18:02.371Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: still working things out","date":"2013-07-04T15:27:00.385Z","type":"message"}
{"nick":"bnoordhuis","message":"but i think i have, if you will forgive me the pun, a handle on it now","date":"2013-07-04T15:27:39.698Z","type":"message"}
{"nick":"tjfontaine","message":"oh god","date":"2013-07-04T15:28:23.680Z","type":"message"}
{"nick":"tjfontaine","message":"you were waiting *days* to drop that one, weren't you :)","date":"2013-07-04T15:28:45.134Z","type":"message"}
{"nick":"bnoordhuis","message":"not at all. just a flash of brilliant inspiration","date":"2013-07-04T15:29:38.548Z","type":"message"}
{"nick":"tjfontaine","message":"heh","date":"2013-07-04T15:30:00.949Z","type":"message"}
{"nick":"dominictarr","date":"2013-07-04T15:37:08.101Z","type":"join"}
{"nick":"appu_","date":"2013-07-04T15:38:49.255Z","type":"join"}
{"nick":"appu_","reason":"Client Quit","date":"2013-07-04T15:39:15.750Z","type":"quit"}
{"nick":"kazupon","date":"2013-07-04T15:44:40.302Z","type":"join"}
{"nick":"hz","date":"2013-07-04T15:48:07.022Z","type":"quit"}
{"nick":"kazupon","reason":"Ping timeout: 276 seconds","date":"2013-07-04T15:50:22.090Z","type":"quit"}
{"nick":"kazupon","date":"2013-07-04T15:55:11.318Z","type":"join"}
