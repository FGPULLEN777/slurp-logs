{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-10-02T00:00:01.094Z","type":"quit"}
{"nick":"ircretary","date":"2013-10-02T00:00:09.438Z","type":"join"}
{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #206 \u00034FAILURE\u000f windows-x64 (3/195) windows-ia32 (3/195) linux-x64 (1/194) osx-ia32 (1/195) http://jenkins.nodejs.org/job/libuv-master-gyp/206/","date":"2013-10-02T00:00:25.910Z","type":"message"}
{"nick":"trevnorris","message":"for anyone who'd like to help, i'm not sure how to finish this commit: http://git.io/T42Tfg","date":"2013-10-02T00:23:06.971Z","type":"message"}
{"nick":"trevnorris","message":"possibly i'm oversimplifying how it can be done, but at least figured I'd start there before trying anything else.","date":"2013-10-02T00:23:27.970Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: is there any restriction on what range of types the handle can have?","date":"2013-10-02T00:25:12.681Z","type":"message"}
{"nick":"othiym23","message":"this would be pretty easy in some languages; you'd just introspect the class / type off the object","date":"2013-10-02T00:26:01.534Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-10-02T00:26:20.588Z","type":"quit"}
{"nick":"mikeal","date":"2013-10-02T00:27:08.809Z","type":"join"}
{"nick":"EhevuTov","reason":"Quit: This computer has gone to sleep","date":"2013-10-02T00:28:07.659Z","type":"quit"}
{"nick":"brson","reason":"Ping timeout: 248 seconds","date":"2013-10-02T00:30:19.852Z","type":"quit"}
{"nick":"bradleymeck","date":"2013-10-02T00:40:28.947Z","type":"join"}
{"nick":"kazupon","date":"2013-10-02T00:50:16.174Z","type":"join"}
{"nick":"bradleymeck","reason":"Ping timeout: 245 seconds","date":"2013-10-02T01:04:36.643Z","type":"quit"}
{"nick":"bradleymeck","date":"2013-10-02T01:06:20.207Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T01:14:56.152Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2013-10-02T01:16:52.897Z","type":"quit"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-10-02T01:17:45.106Z","type":"quit"}
{"nick":"kazupon","date":"2013-10-02T01:20:49.062Z","type":"join"}
{"nick":"c4milo","date":"2013-10-02T01:28:07.828Z","type":"join"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-10-02T01:32:50.131Z","type":"quit"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-02T01:42:13.713Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T01:43:48.811Z","type":"quit"}
{"nick":"abraxas","date":"2013-10-02T01:44:06.772Z","type":"join"}
{"nick":"c4milo","date":"2013-10-02T01:55:53.488Z","type":"join"}
{"nick":"amartens","date":"2013-10-02T02:03:17.669Z","type":"join"}
{"nick":"dap","reason":"Quit: Leaving.","date":"2013-10-02T02:05:52.534Z","type":"quit"}
{"nick":"kazupon","date":"2013-10-02T02:07:13.964Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-02T02:18:32.838Z","type":"quit"}
{"nick":"c4milo","date":"2013-10-02T02:31:57.155Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T02:33:47.111Z","type":"quit"}
{"nick":"kazupon","date":"2013-10-02T02:43:14.914Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T02:44:47.656Z","type":"quit"}
{"nick":"jxs","date":"2013-10-02T02:53:02.321Z","type":"join"}
{"nick":"kazupon","date":"2013-10-02T02:54:52.888Z","type":"join"}
{"nick":"ircretary","reason":"Ping timeout: 240 seconds","date":"2013-10-02T03:01:08.738Z","type":"quit"}
{"nick":"ircretary","date":"2013-10-02T03:01:28.435Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-02T03:15:41.652Z","type":"join"}
{"nick":"ircretary","reason":"Ping timeout: 240 seconds","date":"2013-10-02T03:23:28.284Z","type":"quit"}
{"nick":"mikeal","date":"2013-10-02T03:23:41.828Z","type":"join"}
{"nick":"julianduque","reason":"Quit: leaving","date":"2013-10-02T03:23:51.002Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T03:35:45.031Z","type":"quit"}
{"nick":"kazupon","date":"2013-10-02T03:51:02.819Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-02T04:28:07.995Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 245 seconds","date":"2013-10-02T04:45:26.671Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-10-02T04:56:47.460Z","type":"nick"}
{"nick":"paddybyers","date":"2013-10-02T05:28:01.406Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-02T05:51:22.529Z","type":"join"}
{"nick":"Damn3d","reason":"Ping timeout: 260 seconds","date":"2013-10-02T05:54:08.098Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-10-02T05:55:56.431Z","type":"quit"}
{"nick":"Damn3d","date":"2013-10-02T05:58:52.914Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 246 seconds","date":"2013-10-02T06:15:20.042Z","type":"quit"}
{"nick":"blissdev","reason":"Ping timeout: 248 seconds","date":"2013-10-02T06:32:27.812Z","type":"quit"}
{"nick":"blissdev","date":"2013-10-02T06:38:04.030Z","type":"join"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-10-02T06:42:05.788Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-v0.10-windows\u0002: #239 \u00037UNSTABLE\u000f windows-ia32 (8/600) windows-x64 (7/600) http://jenkins.nodejs.org/job/nodejs-v0.10-windows/239/","date":"2013-10-02T06:52:26.761Z","type":"message"}
{"nick":"rendar","date":"2013-10-02T06:52:29.445Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-02T07:16:50.215Z","type":"join"}
{"nick":"hz","date":"2013-10-02T07:32:21.342Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 252 seconds","date":"2013-10-02T07:43:30.285Z","type":"quit"}
{"nick":"paddybyers","reason":"Quit: paddybyers","date":"2013-10-02T07:59:04.448Z","type":"quit"}
{"nick":"paddybyers","date":"2013-10-02T08:06:35.547Z","type":"join"}
{"nick":"AvianFlu","date":"2013-10-02T08:24:29.395Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-02T08:28:52.799Z","type":"join"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-10-02T09:45:01.608Z","type":"quit"}
{"nick":"Domenic_","reason":"Ping timeout: 240 seconds","date":"2013-10-02T09:53:28.344Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T09:54:29.132Z","type":"quit"}
{"nick":"`3rdEden","reason":"Ping timeout: 245 seconds","date":"2013-10-02T09:54:36.698Z","type":"quit"}
{"nick":"indutny","message":"bnoordhuis: I was able to reproduce that fsevents thingy","date":"2013-10-02T10:08:58.169Z","type":"message"}
{"nick":"indutny","message":"bnoordhuis: looking","date":"2013-10-02T10:09:10.737Z","type":"message"}
{"nick":"`3E","date":"2013-10-02T10:09:51.216Z","type":"join"}
{"nick":"Chip_Zero","reason":"Ping timeout: 245 seconds","date":"2013-10-02T10:11:23.174Z","type":"quit"}
{"nick":"Kakera","date":"2013-10-02T10:13:43.142Z","type":"join"}
{"nick":"philips","reason":"Ping timeout: 240 seconds","date":"2013-10-02T10:20:08.786Z","type":"quit"}
{"nick":"philips","date":"2013-10-02T10:34:19.410Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2013-10-02T10:43:43.892Z","type":"quit"}
{"nick":"abraxas","date":"2013-10-02T10:44:18.197Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #1513 \u00037UNSTABLE\u000f linux-ia32 (2/600) smartos-x64 (1/600) http://jenkins.nodejs.org/job/nodejs-v0.10/1513/","date":"2013-10-02T10:46:15.104Z","type":"message"}
{"nick":"indutny","message":"bnoordhuis: please review https://github.com/joyent/libuv/pull/946","date":"2013-10-02T10:48:05.374Z","type":"message"}
{"nick":"indutny","message":"seems to be fixing a problem","date":"2013-10-02T10:48:11.550Z","type":"message"}
{"nick":"abraxas","reason":"Ping timeout: 246 seconds","date":"2013-10-02T10:48:40.926Z","type":"quit"}
{"nick":"bnoordhuis","message":"looking","date":"2013-10-02T11:09:28.247Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 248 seconds","date":"2013-10-02T11:24:11.795Z","type":"quit"}
{"nick":"Domenic_","date":"2013-10-02T11:35:33.193Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-02T11:56:18.437Z","type":"join"}
{"nick":"hz","reason":"Disconnected by services","date":"2013-10-02T12:00:04.174Z","type":"quit"}
{"nick":"hz","date":"2013-10-02T12:00:08.883Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-10-02T12:07:40.779Z","type":"quit"}
{"nick":"swaj","reason":"Ping timeout: 245 seconds","date":"2013-10-02T12:07:55.133Z","type":"quit"}
{"nick":"swaj","date":"2013-10-02T12:10:14.081Z","type":"join"}
{"nick":"piscisaureus_","date":"2013-10-02T12:49:58.145Z","type":"join"}
{"nick":"hz","date":"2013-10-02T12:54:29.570Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-10-02T13:14:32.590Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 245 seconds","date":"2013-10-02T13:18:46.613Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-10-02T13:30:35.682Z","type":"join"}
{"nick":"vptr","date":"2013-10-02T13:57:14.797Z","type":"join"}
{"nick":"vptr","reason":"Changing host","date":"2013-10-02T13:57:20.226Z","type":"quit"}
{"nick":"vptr","date":"2013-10-02T13:57:20.442Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2013-10-02T14:04:24.910Z","type":"quit"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-10-02T14:22:20.863Z","type":"nick"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-10-02T14:22:29.955Z","type":"quit"}
{"nick":"superdealloc","date":"2013-10-02T14:34:43.629Z","type":"join"}
{"nick":"superdealloc","reason":"\"Linkinus - http://linkinus.com\"","date":"2013-10-02T14:44:45.740Z","type":"part"}
{"nick":"c4milo","date":"2013-10-02T14:45:26.986Z","type":"join"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-10-02T14:46:56.650Z","type":"nick"}
{"nick":"bradleymeck","date":"2013-10-02T15:00:48.640Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-02T15:05:04.453Z","type":"quit"}
{"nick":"kazupon","date":"2013-10-02T15:12:24.137Z","type":"join"}
{"nick":"c4milo","date":"2013-10-02T15:15:45.495Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #591 \u00037UNSTABLE\u000f smartos-x64 (7/644) http://jenkins.nodejs.org/job/nodejs-master/591/","date":"2013-10-02T15:17:41.005Z","type":"message"}
{"nick":"superjoe","date":"2013-10-02T15:23:44.106Z","type":"join"}
{"nick":"superjoe","message":"hi, what's the difference between a mutex and an rwlock?","date":"2013-10-02T15:24:00.830Z","type":"message"}
{"nick":"superjoe","message":"looks like I should pretty much always use an rwlock to protect shared memory, yes?","date":"2013-10-02T15:24:41.261Z","type":"message"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T15:25:23.177Z","type":"quit"}
{"nick":"mikeal","date":"2013-10-02T15:25:35.221Z","type":"join"}
{"nick":"dap","date":"2013-10-02T15:35:54.718Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-10-02T15:37:18.424Z","type":"quit"}
{"nick":"hz","date":"2013-10-02T15:39:39.695Z","type":"join"}
{"nick":"bnoordhuis","date":"2013-10-02T15:42:55.765Z","type":"join"}
{"nick":"bajtos","date":"2013-10-02T15:50:35.542Z","type":"join"}
{"nick":"bnoordhuis","message":"superjoe: a mutex is a full lock, an rwlock allows multiple readers but only one writer","date":"2013-10-02T16:02:16.346Z","type":"message"}
{"nick":"superjoe","message":"perfect","date":"2013-10-02T16:02:45.905Z","type":"message"}
{"nick":"bnoordhuis","message":"if you're unsure which one to pick, go for a mutex","date":"2013-10-02T16:03:04.270Z","type":"message"}
{"nick":"superjoe","message":"I can't think of when I would ever want a mutex and not an rwlock","date":"2013-10-02T16:03:43.710Z","type":"message"}
{"nick":"superjoe","message":"seems like a mutex is identical to an rwlock where you can't use the rdlock and rdunlock functions","date":"2013-10-02T16:06:14.533Z","type":"message"}
{"nick":"bnoordhuis","message":"a mutex is safe wherever a rwlock is safe. not so the other way around","date":"2013-10-02T16:06:27.255Z","type":"message"}
{"nick":"bnoordhuis","message":"if all consumers are writers, then rwlocks are probably deoptimizations, they've a bit more overhead","date":"2013-10-02T16:06:57.525Z","type":"message"}
{"nick":"bnoordhuis","message":"s/all/most/","date":"2013-10-02T16:07:04.635Z","type":"message"}
{"nick":"superjoe","message":"ah, I see - write starvation could be an issue","date":"2013-10-02T16:07:40.898Z","type":"message"}
{"nick":"superjoe","message":"that's a pretty subtle difference","date":"2013-10-02T16:08:00.564Z","type":"message"}
{"nick":"bnoordhuis","message":"isn't everything that involves threads? :)","date":"2013-10-02T16:11:36.709Z","type":"message"}
{"nick":"AvianFlu","date":"2013-10-02T16:12:03.026Z","type":"join"}
{"nick":"vptr","reason":"Ping timeout: 248 seconds","date":"2013-10-02T16:22:51.770Z","type":"quit"}
{"nick":"kazupon","date":"2013-10-02T16:23:22.452Z","type":"join"}
{"nick":"superjoe","message":"yep","date":"2013-10-02T16:25:52.211Z","type":"message"}
{"nick":"amartens","date":"2013-10-02T16:26:17.747Z","type":"join"}
{"nick":"mikeal","date":"2013-10-02T16:33:50.778Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2013-10-02T16:37:02.482Z","type":"quit"}
{"nick":"trevnorris","message":"morning all","date":"2013-10-02T16:37:36.809Z","type":"message"}
{"nick":"superjoe","message":"morning","date":"2013-10-02T16:38:02.685Z","type":"message"}
{"nick":"trevnorris","message":"had a moment of inspiration in the shower this morning. Think I finally know how to get rid of domains!","date":"2013-10-02T16:38:06.823Z","type":"message"}
{"nick":"trevnorris","message":"(just need to read this article on the xbox one first :P )","date":"2013-10-02T16:38:35.242Z","type":"message"}
{"nick":"wwicks","reason":"Quit: I'm sure we'll meet again","date":"2013-10-02T16:38:45.464Z","type":"quit"}
{"nick":"superjoe","message":"uv_async_init says it returns a handle that should be uv_close()'d. where exactly is that handle?","date":"2013-10-02T16:38:47.360Z","type":"message"}
{"nick":"superjoe","message":"can I pass uv_async_t to uv_close ?","date":"2013-10-02T16:39:51.209Z","type":"message"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2013-10-02T16:43:23.531Z","type":"quit"}
{"nick":"superjoe","message":"trevnorris, I thought domains were considered \"good\" - did I miss something?","date":"2013-10-02T16:43:42.632Z","type":"message"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-02T16:44:59.679Z","type":"quit"}
{"nick":"trevnorris","message":"superjoe: i've always hated domains. bits and pieces are scattered all throughout core code, making it more complex and slower.","date":"2013-10-02T16:45:07.290Z","type":"message"}
{"nick":"trevnorris","message":"so I've been working on a cleaner hook API that domains'll use instead.","date":"2013-10-02T16:45:07.512Z","type":"message"}
{"nick":"superjoe","message":"I see","date":"2013-10-02T16:45:24.585Z","type":"message"}
{"nick":"trevnorris","message":"understand, domains'll still ship with core. but they'll effectively be a userland module","date":"2013-10-02T16:45:28.897Z","type":"message"}
{"nick":"superjoe","message":"wow it's possible to do domains in userland?","date":"2013-10-02T16:45:49.312Z","type":"message"}
{"nick":"trevnorris","message":"superjoe: yeah. here's the pr for what i've been working on: https://github.com/joyent/node/pull/6011","date":"2013-10-02T16:46:22.488Z","type":"message"}
{"nick":"trevnorris","message":"it's a lot more powerful than domains too.","date":"2013-10-02T16:46:34.965Z","type":"message"}
{"nick":"trevnorris","message":"superjoe: here's an example script I created using the new api to generate long stack traces.","date":"2013-10-02T16:47:41.983Z","type":"message"}
{"nick":"trevnorris","message":"https://gist.github.com/trevnorris/6784855","date":"2013-10-02T16:47:43.230Z","type":"message"}
{"nick":"superjoe","message":"this is powerful stuff","date":"2013-10-02T16:48:37.815Z","type":"message"}
{"nick":"trevnorris","message":"using it can have ridiculous performance implications, but the point was that if you don't use it, there'll be no impact.","date":"2013-10-02T16:49:16.997Z","type":"message"}
{"nick":"trevnorris","message":"whereas with domains now, there is.","date":"2013-10-02T16:49:32.007Z","type":"message"}
{"nick":"octetcloud","date":"2013-10-02T16:50:02.110Z","type":"join"}
{"nick":"superjoe","message":"there is now, as in, there are a bunch of if statements?","date":"2013-10-02T16:50:05.056Z","type":"message"}
{"nick":"trevnorris","message":"yeah. a lot of internal checks to see if domains exist on an event emitter. needing to check the process.domain state, etc. etc.","date":"2013-10-02T16:50:46.200Z","type":"message"}
{"nick":"superjoe","message":"sounds like this is a pretty substantial cleanup","date":"2013-10-02T16:51:01.799Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: ping","date":"2013-10-02T16:51:30.364Z","type":"message"}
{"nick":"piscisaureus_","reason":"Ping timeout: 260 seconds","date":"2013-10-02T16:53:07.904Z","type":"quit"}
{"nick":"wwicks","date":"2013-10-02T16:56:40.339Z","type":"join"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-10-02T16:57:47.849Z","type":"nick"}
{"nick":"superjoe","message":"so how do I get from a uv_async_t* to a uv_handle_t * ?","date":"2013-10-02T16:57:58.190Z","type":"message"}
{"nick":"superjoe","message":"just reinterpret the pointer?","date":"2013-10-02T16:58:04.755Z","type":"message"}
{"nick":"trevnorris","message":"superjoe: in libuv/include/uv.h you'll see","date":"2013-10-02T16:59:19.283Z","type":"message"}
{"nick":"trevnorris","message":"struct uv_async_s {","date":"2013-10-02T16:59:20.318Z","type":"message"}
{"nick":"trevnorris","message":"  UV_HANDLE_FIELDS","date":"2013-10-02T16:59:20.537Z","type":"message"}
{"nick":"trevnorris","message":"  UV_ASYNC_PRIVATE_FIELDS","date":"2013-10-02T16:59:20.537Z","type":"message"}
{"nick":"trevnorris","message":"};","date":"2013-10-02T16:59:20.537Z","type":"message"}
{"nick":"LOUDBOT","message":"NO SHIT THAT'S TOO FUCKIN' WEIRD FOR ME. I'M GONNA GO MASTURBATE UNTIL IT'S FRIDAY AGAIN.","date":"2013-10-02T16:59:21.086Z","type":"message"}
{"nick":"LOUDBOT","message":"CHECKING FOR UNIQUENESS IS TOO SLOW","date":"2013-10-02T16:59:21.307Z","type":"message"}
{"nick":"trevnorris","message":"superjoe: and the UV_HANDLE_FIELDS are all the fields that make up uv_handle_t","date":"2013-10-02T16:59:48.071Z","type":"message"}
{"nick":"trevnorris","message":"so yeah, just reinterpret the pointer.","date":"2013-10-02T17:00:05.157Z","type":"message"}
{"nick":"superjoe","message":"ok","date":"2013-10-02T17:00:15.071Z","type":"message"}
{"nick":"superjoe","message":"I'm always wary to do that because something something memory alignment something something, but if the docs say to do it, that's fine by me","date":"2013-10-02T17:00:37.225Z","type":"message"}
{"nick":"trevnorris","message":"yeah. it's how uv was setup.","date":"2013-10-02T17:00:58.105Z","type":"message"}
{"nick":"trevnorris","message":"all their fields are setup in define's, and only those are used to define the uv_*_s","date":"2013-10-02T17:01:22.398Z","type":"message"}
{"nick":"vptr","date":"2013-10-02T17:01:47.249Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-10-02T17:05:42.581Z","type":"quit"}
{"nick":"piscisaureus_","date":"2013-10-02T17:18:08.610Z","type":"join"}
{"nick":"c4milo","date":"2013-10-02T17:22:58.768Z","type":"join"}
{"nick":"inolen","date":"2013-10-02T17:26:41.325Z","type":"join"}
{"nick":"piscisaureus_","reason":"Ping timeout: 240 seconds","date":"2013-10-02T17:28:03.986Z","type":"quit"}
{"nick":"bnoordhuis","date":"2013-10-02T17:28:51.222Z","type":"join"}
{"nick":"trevnorris","message":"bnoordhuis: sup man? get much sleep last night?","date":"2013-10-02T17:30:41.252Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/libuv:\u0002 \u00033Ben Noordhuis\u000f \u00037v0.10\u000f * \u000211d8011\u0002 : unix: don't close inherited fds on uv_spawn() fail (+1 more commits) - http://git.io/mkxnPw","date":"2013-10-02T17:30:44.470Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: not as much as i'd like but i'll manage :)","date":"2013-10-02T17:31:05.439Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: heh, know how that goes. but, you still remain a coding machine. :)","date":"2013-10-02T17:31:20.684Z","type":"message"}
{"nick":"trevnorris","message":"think I came up with a good way to emulate the domain stuff. might just have it in place before final review.","date":"2013-10-02T17:31:45.578Z","type":"message"}
{"nick":"trevnorris","message":"all you're c++ training has really done a lot for me. thanks :)","date":"2013-10-02T17:32:05.536Z","type":"message"}
{"nick":"bnoordhuis","message":"hah, no problem :)","date":"2013-10-02T17:32:12.981Z","type":"message"}
{"nick":"bnoordhuis","message":"what's the solution you came up with?","date":"2013-10-02T17:32:20.916Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: this'll explain it better than I can http://git.io/2tX-bg","date":"2013-10-02T17:32:55.886Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-v0.10\u0002: #118 \u00037UNSTABLE\u000f windows (5/188) smartos (2/187) http://jenkins.nodejs.org/job/libuv-v0.10/118/","date":"2013-10-02T17:33:20.542Z","type":"message"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-10-02T17:35:44.642Z","type":"quit"}
{"nick":"mikeal","date":"2013-10-02T17:36:22.485Z","type":"join"}
{"nick":"MI6","message":"\u0002libuv-v0.10-gyp\u0002: #82 \u00034FAILURE\u000f linux-x64 (2/187) linux-ia32 (2/187) osx-ia32 (2/188) windows-x64 (5/188) windows-ia32 (5/188) http://jenkins.nodejs.org/job/libuv-v0.10-gyp/82/","date":"2013-10-02T17:37:36.653Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: hi, what about that uv_fs_can_watch_file_creation() thing?","date":"2013-10-02T17:39:11.224Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: hey. hum, maybe","date":"2013-10-02T17:39:23.454Z","type":"message"}
{"nick":"rendar","message":"i don't see any drawbacks, but maybe i'm wrong :)","date":"2013-10-02T17:39:41.878Z","type":"message"}
{"nick":"bnoordhuis","message":"can you give me a quick rundown of what you have in mind?","date":"2013-10-02T17:39:44.661Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: basically just a function which returns true/false if the underlying system can watch file creation or deletion, if true, the user can exploit that, otherwise the user must code the polling of the directory","date":"2013-10-02T17:40:33.182Z","type":"message"}
{"nick":"bnoordhuis","message":"coupled with a UV_CREATE event iirc?","date":"2013-10-02T17:41:10.853Z","type":"message"}
{"nick":"rendar","message":"yeah","date":"2013-10-02T17:41:16.994Z","type":"message"}
{"nick":"rendar","message":"if the underlying system supports watch file creation/deletion it can surely send UV_CREATE or UV_DELETE events for files..","date":"2013-10-02T17:41:42.256Z","type":"message"}
{"nick":"bnoordhuis","message":"well, it's tricky","date":"2013-10-02T17:42:10.699Z","type":"message"}
{"nick":"rendar","message":"i see, why?","date":"2013-10-02T17:42:21.270Z","type":"message"}
{"nick":"bnoordhuis","message":"say another process does a real quick unlink() + creat()","date":"2013-10-02T17:43:01.060Z","type":"message"}
{"nick":"bnoordhuis","message":"it's anybody's guess how that gets reported to the file path watcher","date":"2013-10-02T17:43:22.937Z","type":"message"}
{"nick":"rendar","message":"hmm","date":"2013-10-02T17:43:36.945Z","type":"message"}
{"nick":"bnoordhuis","message":"what i mean is you may not always get UV_CREATE events where you'd expect them","date":"2013-10-02T17:43:38.946Z","type":"message"}
{"nick":"rendar","message":"well, you get UV_CREATE events in windows NT and linux, for other platforms they just won't be sent, because that true/false function returns indeed false","date":"2013-10-02T17:44:25.358Z","type":"message"}
{"nick":"rendar","message":":)","date":"2013-10-02T17:44:25.848Z","type":"message"}
{"nick":"bnoordhuis","message":"that aside, i'm not against the idea - as long as i don't have to write the code :)","date":"2013-10-02T17:44:28.604Z","type":"message"}
{"nick":"rendar","message":"eheh","date":"2013-10-02T17:44:38.873Z","type":"message"}
{"nick":"rendar","message":"ok","date":"2013-10-02T17:44:41.673Z","type":"message"}
{"nick":"mikeal","reason":"Ping timeout: 252 seconds","date":"2013-10-02T17:45:12.286Z","type":"quit"}
{"nick":"rendar","message":"you mean that even in windows or linux where ReadFilechangesW or inotify supports file creation, they may be wrong with a quick unlink() + creat()? dunno, but i don't think so, expecially in linux","date":"2013-10-02T17:45:40.654Z","type":"message"}
{"nick":"bnoordhuis","message":"the kernel's event queue may overflow or coalesce","date":"2013-10-02T17:46:05.413Z","type":"message"}
{"nick":"rendar","message":"mmm","date":"2013-10-02T17:46:12.649Z","type":"message"}
{"nick":"rendar","message":"i'll try that on linux, btw","date":"2013-10-02T17:46:33.529Z","type":"message"}
{"nick":"bnoordhuis","message":"iow that unlink() + creat() sequence may get reported as e.g. just a change event rather than a creation event","date":"2013-10-02T17:46:36.896Z","type":"message"}
{"nick":"rendar","message":"yeah","date":"2013-10-02T17:46:47.782Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: oh, btw. there's a c++ api missing. something like a MakeAsyncCallback() that'll run the callback asynchronously.","date":"2013-10-02T17:47:03.371Z","type":"message"}
{"nick":"trevnorris","message":"there are places in core you've pointed out that shouldn't be running the js callback immediately.","date":"2013-10-02T17:47:03.591Z","type":"message"}
{"nick":"rendar","message":"but in such case who cares? it could be considered as a modify","date":"2013-10-02T17:47:03.812Z","type":"message"}
{"nick":"rendar","message":":)","date":"2013-10-02T17:47:04.334Z","type":"message"}
{"nick":"mikeal","date":"2013-10-02T17:47:29.451Z","type":"join"}
{"nick":"bnoordhuis","message":"rendar: i don't disagree but i just know people will open bug reports for it","date":"2013-10-02T17:48:05.729Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: hmm i see","date":"2013-10-02T17:48:18.925Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: that should probably be handled in js land. for one, the argv vector will be out of scope by the time the callback runs","date":"2013-10-02T17:48:47.684Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: so, you think just make a c++ binding to process.nextTick?","date":"2013-10-02T17:49:20.653Z","type":"message"}
{"nick":"trevnorris","message":"that should be easy enough.","date":"2013-10-02T17:49:26.558Z","type":"message"}
{"nick":"bnoordhuis","message":"something like that, yes","date":"2013-10-02T17:49:36.074Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: also, does libuv has a recursive file remover? e.g. remove also full directoriy trees","date":"2013-10-02T17:49:42.056Z","type":"message"}
{"nick":"trevnorris","message":"cool. even easier than what I was thinking. :)","date":"2013-10-02T17:49:48.175Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: no. that's something that's out of scope","date":"2013-10-02T17:50:07.199Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: ok, yeah i agree","date":"2013-10-02T17:50:17.893Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: you mean that in such a case you call a new process \"rm -rf dir/\", and wait for it","date":"2013-10-02T17:50:59.980Z","type":"message"}
{"nick":"rendar","message":":)","date":"2013-10-02T17:51:02.293Z","type":"message"}
{"nick":"bnoordhuis","message":"yeah, something like that :)","date":"2013-10-02T17:51:10.696Z","type":"message"}
{"nick":"bnoordhuis","message":"hah, you guys seen this? http://hover.ie/","date":"2013-10-02T17:52:41.019Z","type":"message"}
{"nick":"bnoordhuis","message":"doesn't work well if you have vimperator installed though :)","date":"2013-10-02T17:52:58.961Z","type":"message"}
{"nick":"rendar","message":"oh this brings another problem to my mind: is that possible waiting asynchronously for a process completion? i mean, waitpid() is sync, and you can use it with an async way with signals and with SIGCHLD iirc, but what about waiting that with epoll()/kqueue? dunno if its possible","date":"2013-10-02T17:53:05.770Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: libuv already supports that","date":"2013-10-02T17:54:01.292Z","type":"message"}
{"nick":"bnoordhuis","message":"albeit not in the most optimized way possible","date":"2013-10-02T17:54:10.081Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-master\u0002: #267 \u00037UNSTABLE\u000f windows (4/195) smartos (2/194) http://jenkins.nodejs.org/job/libuv-master/267/","date":"2013-10-02T17:54:12.052Z","type":"message"}
{"nick":"bnoordhuis","message":"it works well enough that it scales up to 1,000s of processes though","date":"2013-10-02T17:54:45.490Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-node-integration\u0002: #251 \u00037UNSTABLE\u000f smartos-ia32 (1/600) linux-ia32 (1/600) smartos-x64 (2/600) http://jenkins.nodejs.org/job/libuv-node-integration/251/","date":"2013-10-02T17:55:37.075Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: oh, really? how it works?","date":"2013-10-02T17:57:01.634Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: is that something about signal_fd?","date":"2013-10-02T17:58:25.125Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: unelegantly. :-/  it catches SIGCHLD, then calls waitpid(WNOHANG) and looks up the process in a tree structure","date":"2013-10-02T17:58:28.558Z","type":"message"}
{"nick":"rendar","message":"oh","date":"2013-10-02T17:58:40.966Z","type":"message"}
{"nick":"bnoordhuis","message":"sadly, no. we can't really use signalfd in libuv","date":"2013-10-02T17:58:46.478Z","type":"message"}
{"nick":"rendar","message":"really? why?","date":"2013-10-02T17:58:56.726Z","type":"message"}
{"nick":"bnoordhuis","message":"it only works reliably when all other threads block the signal","date":"2013-10-02T17:59:06.412Z","type":"message"}
{"nick":"bnoordhuis","message":"libuv is a library so it doesn't have control over that","date":"2013-10-02T17:59:16.488Z","type":"message"}
{"nick":"rendar","message":"oh..i see","date":"2013-10-02T17:59:17.379Z","type":"message"}
{"nick":"rendar","message":"so there must be a specific thread who waits for SIGCHLD?","date":"2013-10-02T17:59:51.464Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: not quite a thread. libuv installs a SIGCHLD signal handler and signal handlers are global to the process","date":"2013-10-02T18:03:38.560Z","type":"message"}
{"nick":"bnoordhuis","message":"it then works some magic to make the signal get reported to the right event loop","date":"2013-10-02T18:04:09.022Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: yeah basically in unix signals are sent to the process and not to the threads, and iirc the kernel send the completion to a random(?) thread?","date":"2013-10-02T18:04:28.007Z","type":"message"}
{"nick":"bnoordhuis","message":"yes, that's pretty much how it works","date":"2013-10-02T18:06:27.368Z","type":"message"}
{"nick":"hz","date":"2013-10-02T18:06:32.076Z","type":"quit"}
{"nick":"rendar","message":"bnoordhuis: so basically *every* thread could be interrupted to execute that SIGCHLD callback, which in turn must see to which event loop belongs the process to, with a rb-tree i guess","date":"2013-10-02T18:07:19.163Z","type":"message"}
{"nick":"bnoordhuis","message":"correct","date":"2013-10-02T18:08:10.115Z","type":"message"}
{"nick":"rendar","message":"interesting","date":"2013-10-02T18:08:19.967Z","type":"message"}
{"nick":"bnoordhuis","message":"yeah. like i say, it's not very elegant but it gets the job done","date":"2013-10-02T18:08:33.018Z","type":"message"}
{"nick":"rendar","message":"so that rb tree must also be interlocked with a mutex, because potentially all thread can be woken up to do that","date":"2013-10-02T18:08:39.775Z","type":"message"}
{"nick":"MI6","message":"\u0002libuv-node-integration\u0002: #252 \u00037UNSTABLE\u000f smartos-x64 (7/644) linux-x64 (1/644) http://jenkins.nodejs.org/job/libuv-node-integration/252/","date":"2013-10-02T18:09:04.316Z","type":"message"}
{"nick":"bnoordhuis","message":"we don't use a mutex because that'd be unsafe, easy to deadlock yourself that way","date":"2013-10-02T18:09:15.832Z","type":"message"}
{"nick":"bnoordhuis","message":"there's some trickery with pipes that accomplishes mutex-like behavior but without the possibility of deadlock","date":"2013-10-02T18:09:43.865Z","type":"message"}
{"nick":"bnoordhuis","message":"at the cost of a few extra system calls","date":"2013-10-02T18:09:53.469Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: oh, but how? i mean, how lock(); rb_tree_add_process_to_loop_map(pid, loop); unlock(); could be deadlocking?","date":"2013-10-02T18:10:05.691Z","type":"message"}
{"nick":"bnoordhuis","message":"i'll probably switch it to atomic ops someday","date":"2013-10-02T18:10:08.181Z","type":"message"}
{"nick":"bnoordhuis","message":"rendar: because of this -> lock(); /* SIGHCLD */ void sighandler() { lock(); // deadlock","date":"2013-10-02T18:10:43.088Z","type":"message"}
{"nick":"rendar","message":"oh..i see","date":"2013-10-02T18:10:59.234Z","type":"message"}
{"nick":"bnoordhuis","message":"iow, your thread locks the mutex, then a signal arrives and your handler tries to lock the mutex again","date":"2013-10-02T18:11:04.478Z","type":"message"}
{"nick":"bnoordhuis","message":"and bam, you're dead","date":"2013-10-02T18:11:09.156Z","type":"message"}
{"nick":"rendar","message":"yeah right","date":"2013-10-02T18:11:19.479Z","type":"message"}
{"nick":"rendar","message":"there isn't a way in unix to tell the system: \"look, if i get SIGCHLD, send it ONLY to the thread with id=xyz\" ?","date":"2013-10-02T18:11:42.994Z","type":"message"}
{"nick":"bnoordhuis","message":"alas, no","date":"2013-10-02T18:12:14.255Z","type":"message"}
{"nick":"bnoordhuis","message":"well, you could by blocking the signal in all other threads","date":"2013-10-02T18:12:26.435Z","type":"message"}
{"nick":"rendar","message":"that would solve the problems between signals and threads i guess","date":"2013-10-02T18:12:31.150Z","type":"message"}
{"nick":"bnoordhuis","message":"but that's not an option for libuv of course","date":"2013-10-02T18:12:34.158Z","type":"message"}
{"nick":"rendar","message":"hmm why not? because its a library?","date":"2013-10-02T18:12:49.593Z","type":"message"}
{"nick":"bnoordhuis","message":"yes","date":"2013-10-02T18:13:36.192Z","type":"message"}
{"nick":"rendar","message":"i see","date":"2013-10-02T18:13:55.923Z","type":"message"}
{"nick":"bnoordhuis","message":"you can't go around changing the signal mask of random threads, you'll break your user's application :)","date":"2013-10-02T18:14:00.149Z","type":"message"}
{"nick":"bnoordhuis","message":"and then they'll come and scream at you","date":"2013-10-02T18:14:14.684Z","type":"message"}
{"nick":"rendar","message":"eheh","date":"2013-10-02T18:14:19.157Z","type":"message"}
{"nick":"rendar","message":"what about documenting it? i mean, telling the users: \"look, we need one single thead listenin SIGCHLD, so we clear the mask to all other ones! if you create an your own thread,  keep this in mind\"","date":"2013-10-02T18:15:03.267Z","type":"message"}
{"nick":"bnoordhuis","message":"then someone will pop up and say 'yes, but i _need_ to catch SIGCHLD in this other thread'","date":"2013-10-02T18:15:27.215Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: you're node-backtrace module gave me a ridiculous idea, that'll hate myself for later. but just need to see if it can be done.","date":"2013-10-02T18:15:30.162Z","type":"message"}
{"nick":"trevnorris","message":"the asyncListener api pretty easily allows infinite stacks (https://gist.github.com/trevnorris/6784855) but i'd like to use your code and get a _real_ full stack. :P","date":"2013-10-02T18:15:30.381Z","type":"message"}
{"nick":"rendar","message":"bnoordhuis: lol, thats right","date":"2013-10-02T18:15:46.173Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: that's a big stack trace","date":"2013-10-02T18:16:37.691Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: yeah. it'll literally track every call, through async events, from the start of your program until it crashes.","date":"2013-10-02T18:17:10.409Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: what would you want to capture though? node-backtrace just walks the current stack","date":"2013-10-02T18:17:16.710Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: if you notice in the before() above, it also just walks the current stack. then the ability to persist the stack with the call allows me to append them as we go.","date":"2013-10-02T18:18:02.063Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: so i'd be able to walk the entire stack on every async call, and store it for when the call returns.","date":"2013-10-02T18:18:26.082Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: but how's that different from (new Error).stack?","date":"2013-10-02T18:18:51.900Z","type":"message"}
{"nick":"bnoordhuis","message":"or was node-backtrace just the inspiration?","date":"2013-10-02T18:19:09.217Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: I thought node-backtrace also dumps the c++ calls in the current stack.","date":"2013-10-02T18:19:57.756Z","type":"message"}
{"nick":"bnoordhuis","message":"it does","date":"2013-10-02T18:20:29.353Z","type":"message"}
{"nick":"trevnorris","message":"yeah, and new Error.stack only shows the js calls","date":"2013-10-02T18:20:46.842Z","type":"message"}
{"nick":"bnoordhuis","message":"it basically walks the stack by following the chain of EBP/RBP pointers","date":"2013-10-02T18:20:47.092Z","type":"message"}
{"nick":"trevnorris","message":"so this way i'd have a full js + c++ stack trace from the beginning of the program until it crashes.","date":"2013-10-02T18:21:14.891Z","type":"message"}
{"nick":"bnoordhuis","message":"matching addresses to symbol names on the c++ side of things is pretty expensive though","date":"2013-10-02T18:21:16.304Z","type":"message"}
{"nick":"trevnorris","message":"heh, this is all just a proof of concept. like, it challenged me in a dream last night.","date":"2013-10-02T18:21:49.036Z","type":"message"}
{"nick":"bnoordhuis","message":"oh, i know the feeling. i was trapped in a maze of red-black tree nodes last night, all alike","date":"2013-10-02T18:22:16.803Z","type":"message"}
{"nick":"trevnorris","message":"haha","date":"2013-10-02T18:22:33.803Z","type":"message"}
{"nick":"bnoordhuis","message":"half tongue-in-cheek, i did dream of tree rotations last week","date":"2013-10-02T18:22:34.774Z","type":"message"}
{"nick":"trevnorris","message":"lol, awesome.","date":"2013-10-02T18:22:46.226Z","type":"message"}
{"nick":"trevnorris","message":"oop. of course the api has changed since you wrote this. segfaults in 0.10.20","date":"2013-10-02T18:24:48.767Z","type":"message"}
{"nick":"bnoordhuis","message":"oh, yeah. i guess it's bitrotted by now","date":"2013-10-02T18:25:23.653Z","type":"message"}
{"nick":"bnoordhuis","message":"i was thinking of doing a new implementation that also knows how to decode function arguments","date":"2013-10-02T18:25:38.232Z","type":"message"}
{"nick":"trevnorris","message":"aah. seriously? that would be ridiculous.","date":"2013-10-02T18:26:02.706Z","type":"message"}
{"nick":"bnoordhuis","message":"for js functions, anyway","date":"2013-10-02T18:26:32.622Z","type":"message"}
{"nick":"bnoordhuis","message":"either that or write a gdb plugin","date":"2013-10-02T18:26:44.817Z","type":"message"}
{"nick":"trevnorris","message":"eh, the js functions would be enough imho.","date":"2013-10-02T18:27:00.501Z","type":"message"}
{"nick":"trevnorris","message":"but still. i'm sure that combined w/ the long stack traces would make othiym23 wet his pants.","date":"2013-10-02T18:29:17.556Z","type":"message"}
{"nick":"TooTallNate","date":"2013-10-02T18:29:18.764Z","type":"join"}
{"nick":"TooTallNate","reason":"Client Quit","date":"2013-10-02T18:31:03.137Z","type":"quit"}
{"nick":"TooTallNate","date":"2013-10-02T18:35:40.532Z","type":"join"}
{"nick":"trevnorris","message":"bnoordhuis: do you know if it's standard in core for all the *Wrap instances to be attached to the js objects via ._handle ?","date":"2013-10-02T18:38:47.481Z","type":"message"}
{"nick":"indexzero","date":"2013-10-02T18:39:03.473Z","type":"join"}
{"nick":"trevnorris","message":"that's all I've seen so far, but could be missing something.","date":"2013-10-02T18:39:03.691Z","type":"message"}
{"nick":"TooTallNate","reason":"Ping timeout: 240 seconds","date":"2013-10-02T18:40:06.156Z","type":"quit"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2013-10-02T18:40:51.175Z","type":"quit"}
{"nick":"kazupon","date":"2013-10-02T18:46:12.878Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-master-windows\u0002: #384 \u00037UNSTABLE\u000f windows-x64 (23/644) windows-ia32 (22/644) http://jenkins.nodejs.org/job/nodejs-master-windows/384/","date":"2013-10-02T18:48:41.113Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 245 seconds","date":"2013-10-02T18:51:16.646Z","type":"quit"}
{"nick":"TooTallNate","date":"2013-10-02T18:51:33.908Z","type":"join"}
{"nick":"bnoordhuis","message":"trevnorris: yes, _handle is the standard","date":"2013-10-02T18:52:45.532Z","type":"message"}
{"nick":"trevnorris","message":"awesome, thanks. makes my life much easier.","date":"2013-10-02T18:52:58.841Z","type":"message"}
{"nick":"TooTallNate","reason":"Ping timeout: 245 seconds","date":"2013-10-02T18:57:56.675Z","type":"quit"}
{"nick":"othiym23","message":"trevnorris: I resent the implication that I'm partially incontinent","date":"2013-10-02T19:05:48.669Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: ;) what's up?","date":"2013-10-02T19:05:52.697Z","type":"message"}
{"nick":"EhevuTov","date":"2013-10-02T19:07:08.390Z","type":"join"}
{"nick":"trevnorris","message":"othiym23: so, bnoordhuis created node-backtrace that'll show you the entire stack, including all the c++ calls.","date":"2013-10-02T19:07:35.798Z","type":"message"}
{"nick":"trevnorris","message":"include that ability with the example long stack trace (https://gist.github.com/trevnorris/6784855) and you'll have one freakishly large stack.","date":"2013-10-02T19:07:36.020Z","type":"message"}
{"nick":"TooTallNate","date":"2013-10-02T19:08:59.369Z","type":"join"}
{"nick":"wwicks","reason":"Quit: wwicks","date":"2013-10-02T19:09:23.756Z","type":"quit"}
{"nick":"othiym23","message":"that's pretty useful!","date":"2013-10-02T19:09:35.482Z","type":"message"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2013-10-02T19:09:43.360Z","type":"quit"}
{"nick":"othiym23","message":"almost as useful as jstack helpers would be on OS X","date":"2013-10-02T19:09:44.496Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: and I figured out the final piece to attach existing listeners to existing handles. so maybe i'll be able to finish the domain part before v0.12 is released.","date":"2013-10-02T19:11:12.768Z","type":"message"}
{"nick":"trevnorris","message":"that is, if I can stop messing around with IRHydra...","date":"2013-10-02T19:11:12.989Z","type":"message"}
{"nick":"indexzero","date":"2013-10-02T19:12:06.608Z","type":"join"}
{"nick":"othiym23","message":"awesome!","date":"2013-10-02T19:12:14.066Z","type":"message"}
{"nick":"othiym23","message":"I appear to have b0rked EventEmitter with by bindEmitter change for CLS, so I have to sort that out quick","date":"2013-10-02T19:12:35.424Z","type":"message"}
{"nick":"othiym23","message":"so many ways to break a Node program","date":"2013-10-02T19:12:41.514Z","type":"message"}
{"nick":"trevnorris","message":"haha","date":"2013-10-02T19:13:33.123Z","type":"message"}
{"nick":"EhevuTov","reason":"Quit: This computer has gone to sleep","date":"2013-10-02T19:15:10.314Z","type":"quit"}
{"nick":"EhevuTov","date":"2013-10-02T19:15:48.437Z","type":"join"}
{"nick":"indexzero","reason":"Ping timeout: 240 seconds","date":"2013-10-02T19:16:08.201Z","type":"quit"}
{"nick":"bajtos","date":"2013-10-02T19:16:56.007Z","type":"join"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2013-10-02T19:22:03.300Z","type":"quit"}
{"nick":"octetcloud","reason":"Ping timeout: 260 seconds","date":"2013-10-02T19:27:07.875Z","type":"quit"}
{"nick":"trevnorris","message":"alright, here we go. here's attempt number 3 at removing domains.","date":"2013-10-02T19:30:04.428Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-10-02T19:35:15.272Z","type":"quit"}
{"nick":"othiym23","message":"gambatte!","date":"2013-10-02T19:38:02.998Z","type":"message"}
{"nick":"julianduque","date":"2013-10-02T19:38:51.768Z","type":"join"}
{"nick":"superjoe","message":"I wonder how I'll go about debugging this... https://gist.github.com/superjoe30/6799427","date":"2013-10-02T19:42:25.812Z","type":"message"}
{"nick":"superjoe","message":"print statements everywhere!","date":"2013-10-02T19:42:42.654Z","type":"message"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-02T19:45:46.453Z","type":"quit"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-10-02T19:47:22.718Z","type":"quit"}
{"nick":"superjoe","message":"is it safe to release memory that an async handle might need immediately after uv_close() on the handle? or do I have to put the memory freeing in the callback to uv_close() ?","date":"2013-10-02T19:49:41.618Z","type":"message"}
{"nick":"superjoe","message":"empirical analysis says put the freeing in the callback.","date":"2013-10-02T19:50:45.949Z","type":"message"}
{"nick":"c4milo","date":"2013-10-02T19:51:42.103Z","type":"join"}
{"nick":"TooTallNate","date":"2013-10-02T19:53:06.883Z","type":"join"}
{"nick":"wwicks","date":"2013-10-02T20:08:23.942Z","type":"join"}
{"nick":"bnoordhuis","message":"superjoe: from the callback, yes","date":"2013-10-02T20:14:32.347Z","type":"message"}
{"nick":"bnoordhuis","message":"true for any libuv handle btw","date":"2013-10-02T20:14:58.192Z","type":"message"}
{"nick":"superjoe","message":"good to know","date":"2013-10-02T20:24:56.095Z","type":"message"}
{"nick":"superjoe","message":"programming with libuv has been great","date":"2013-10-02T20:25:54.317Z","type":"message"}
{"nick":"superjoe","message":"somehow I haven't seemed to run into the weird impossible to duplicate race conditions","date":"2013-10-02T20:26:14.776Z","type":"message"}
{"nick":"superjoe","message":"that you normally do with multithreaded programming","date":"2013-10-02T20:26:21.708Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-10-02T20:33:20.364Z","type":"quit"}
{"nick":"`3E","new_nick":"`3E|ZZZ","date":"2013-10-02T20:44:02.433Z","type":"nick"}
{"nick":"trevnorris","message":"othiym23: ps, if you try to rebase off my branch, remove the last commit. i'm in the middle of removing all the domain specific code.","date":"2013-10-02T20:54:07.550Z","type":"message"}
{"nick":"trevnorris","message":"and the world is horribly broken.","date":"2013-10-02T20:54:12.038Z","type":"message"}
{"nick":"trevnorris","reason":"\"Leaving\"","date":"2013-10-02T21:00:21.741Z","type":"part"}
{"nick":"trevnorris","date":"2013-10-02T21:00:29.877Z","type":"join"}
{"nick":"indexzero","date":"2013-10-02T21:09:59.457Z","type":"join"}
{"nick":"austo","reason":"Quit: Leaving","date":"2013-10-02T21:16:50.251Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2013-10-02T21:22:46.299Z","type":"quit"}
{"nick":"TooTallNate","date":"2013-10-02T21:27:32.820Z","type":"join"}
{"nick":"octetcloud","date":"2013-10-02T21:28:34.000Z","type":"join"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-10-02T21:37:26.008Z","type":"quit"}
{"nick":"Benvie","reason":"Ping timeout: 252 seconds","date":"2013-10-02T21:39:30.261Z","type":"quit"}
{"nick":"Benvie","date":"2013-10-02T21:39:56.279Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2013-10-02T21:43:08.411Z","type":"quit"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2013-10-02T21:44:08.829Z","type":"quit"}
{"nick":"rendar","date":"2013-10-02T21:54:24.182Z","type":"quit"}
{"nick":"trevnorris","message":"tjfontaine: have a moment?","date":"2013-10-02T22:01:58.451Z","type":"message"}
{"nick":"tjfontaine","message":"sure I'm between context switches atm","date":"2013-10-02T22:02:25.977Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris.","date":"2013-10-02T22:03:09.405Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ah, nm. i was confused for a moment because ProcessWrap seemed like it might have been for the process object, but it's for child_process","date":"2013-10-02T22:03:23.660Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2013-10-02T22:03:34.526Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: it's a bit of a confusing api. but right now there's process.{create,add,remove}AsyncListener()","date":"2013-10-02T22:03:54.779Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: but i'm also adding handle specific {add,remove}AsyncListener()","date":"2013-10-02T22:04:11.379Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: do you have any documentation I can read as a first pass for understanding it?","date":"2013-10-02T22:04:16.466Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: does it make sense for it to hang off process.?","date":"2013-10-02T22:04:37.837Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: well, it needs to be in src/node.js. and it seemed like everything in there hangs off process.","date":"2013-10-02T22:05:17.002Z","type":"message"}
{"nick":"trevnorris","message":"it can't be a module, basically.","date":"2013-10-02T22:05:22.965Z","type":"message"}
{"nick":"tjfontaine","message":"anyway, is there documentation for me to get an idea about?","date":"2013-10-02T22:05:55.851Z","type":"message"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-10-02T22:06:52.144Z","type":"nick"}
{"nick":"trevnorris","message":"tjfontaine: well, the pr has the up-to-date API: https://github.com/joyent/node/pull/6011","date":"2013-10-02T22:07:04.607Z","type":"message"}
{"nick":"trevnorris","message":"and this is probably the longest commit message in node history :P https://github.com/trevnorris/node/commit/750dae79f21d18545946b311d54c1ffdadc6e90c","date":"2013-10-02T22:07:04.826Z","type":"message"}
{"nick":"tjfontaine","message":"it could be a module though, in the sense that they are exported through that interface, but not necessarily defined in that file -- for instance the demacro-fication of the tracing stuff was scheduled to land in _trace, we could just push them into it from node.js","date":"2013-10-02T22:07:13.185Z","type":"message"}
{"nick":"tjfontaine","message":"jeepers that's a lot of failing tests :)","date":"2013-10-02T22:07:46.413Z","type":"message"}
{"nick":"mikeal","date":"2013-10-02T22:07:46.966Z","type":"join"}
{"nick":"trevnorris","message":"oh yeah. right now domains are botched.","date":"2013-10-02T22:08:10.778Z","type":"message"}
{"nick":"trevnorris","message":"i'm surprised even that many are passing.","date":"2013-10-02T22:08:17.319Z","type":"message"}
{"nick":"trevnorris","message":"finally figured out a way to remove domain code from c++, but it's like tweezing individual pubic hairs.","date":"2013-10-02T22:08:47.783Z","type":"message"}
{"nick":"tjfontaine","message":"that's specific","date":"2013-10-02T22:09:37.770Z","type":"message"}
{"nick":"trevnorris","message":"eh, right now that's how it feels.","date":"2013-10-02T22:10:00.067Z","type":"message"}
{"nick":"tjfontaine","message":" Adding an async listener will immediately add it to the queue and","date":"2013-10-02T22:10:14.795Z","type":"message"}
{"nick":"tjfontaine","message":" * being listening for events","date":"2013-10-02T22:10:15.159Z","type":"message"}
{"nick":"tjfontaine","message":"*begin :P","date":"2013-10-02T22:10:17.108Z","type":"message"}
{"nick":"trevnorris","message":"... right. i'll fix that sometime before it goes in.","date":"2013-10-02T22:10:42.576Z","type":"message"}
{"nick":"trevnorris","message":"honestly that should all be docs somewhere, and have a much shorter commit message","date":"2013-10-02T22:10:57.386Z","type":"message"}
{"nick":"trevnorris","message":"not sure what I was thinking.","date":"2013-10-02T22:11:01.081Z","type":"message"}
{"nick":"tjfontaine","message":"blah I wish Ic ould easily except out commits from github's ui","date":"2013-10-02T22:11:59.910Z","type":"message"}
{"nick":"othiym23","message":"trevnorris: just lemme know when it's safe to rebase and I won't touch it until then","date":"2013-10-02T22:12:19.677Z","type":"message"}
{"nick":"tjfontaine","message":"?w=1 is somewhat helpful, but the rest of the comment styling shit in domain.js I dont' care about","date":"2013-10-02T22:12:25.316Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: hah, yeah.","date":"2013-10-02T22:12:43.711Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: ok. might not be for a while. :)","date":"2013-10-02T22:12:53.529Z","type":"message"}
{"nick":"tjfontaine","message":"dammit github you suck","date":"2013-10-02T22:12:58.603Z","type":"message"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2013-10-02T22:13:22.283Z","type":"quit"}
{"nick":"trevnorris","message":"i wish the v8 api had indexOf()","date":"2013-10-02T22:14:22.916Z","type":"message"}
{"nick":"tjfontaine","message":"you can always eval'it","date":"2013-10-02T22:14:37.451Z","type":"message"}
{"nick":"othiym23","message":"tjfontaine, are you trolling trevnorris ","date":"2013-10-02T22:15:11.634Z","type":"message"}
{"nick":"trevnorris","message":"that just made me shutter a little.","date":"2013-10-02T22:15:19.440Z","type":"message"}
{"nick":"tjfontaine","message":"heh, well what I mean is: ->Get('indexOf')->As<Function>().Call()","date":"2013-10-02T22:16:23.293Z","type":"message"}
{"nick":"tjfontaine","message":"that's what I mean as 'eval'","date":"2013-10-02T22:16:28.503Z","type":"message"}
{"nick":"trevnorris","message":"ah, ok.","date":"2013-10-02T22:16:39.302Z","type":"message"}
{"nick":"trevnorris","message":"thought you meant literally writing a script as a char* and running it from the v8 script api","date":"2013-10-02T22:17:00.711Z","type":"message"}
{"nick":"tjfontaine","message":"you could do it that way as well, but you know, whatever","date":"2013-10-02T22:17:20.061Z","type":"message"}
{"nick":"tjfontaine","message":"would be pretty interesting to see which is faster","date":"2013-10-02T22:17:30.709Z","type":"message"}
{"nick":"trevnorris","message":"fortunately this is an operation that won't be done much.","date":"2013-10-02T22:18:11.322Z","type":"message"}
{"nick":"trevnorris","message":"or at least I hope it wouldn't","date":"2013-10-02T22:18:22.299Z","type":"message"}
{"nick":"tjfontaine","message":"where you just make a context with a script contents of \"return Array.prototype.indexOf\" and then .As<Function>()->Call that","date":"2013-10-02T22:18:23.615Z","type":"message"}
{"nick":"trevnorris","action":"looks at othiym23","date":"2013-10-02T22:18:26.236Z","type":"action"}
{"nick":"othiym23","message":"good, good","date":"2013-10-02T22:19:40.949Z","type":"message"}
{"nick":"trevnorris","message":"othiym23: basically, i'm adding the ability to add/remove listeners on an individual handle","date":"2013-10-02T22:20:16.501Z","type":"message"}
{"nick":"trevnorris","message":"don't like it, but needs to be done if we're properly going to emulate domains.","date":"2013-10-02T22:20:33.180Z","type":"message"}
{"nick":"othiym23","message":"right","date":"2013-10-02T22:20:36.844Z","type":"message"}
{"nick":"othiym23","message":"is that going to remain confined to the C++ side of things?","date":"2013-10-02T22:20:45.395Z","type":"message"}
{"nick":"tjfontaine","message":"you mean: foo._handle.[add|remove]AsyncListener?","date":"2013-10-02T22:20:48.802Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: yeah","date":"2013-10-02T22:20:57.156Z","type":"message"}
{"nick":"tjfontaine","message":"hrm.","date":"2013-10-02T22:21:01.004Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: it's for internal use only","date":"2013-10-02T22:21:15.465Z","type":"message"}
{"nick":"tjfontaine","message":"ha h","date":"2013-10-02T22:21:29.455Z","type":"message"}
{"nick":"tjfontaine","message":"a","date":"2013-10-02T22:21:30.111Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: specifically so when a user runs the .listen() command, if a domain has been bound to the event emitter we can bind the listener to the handle after it's been instantiated.","date":"2013-10-02T22:22:04.543Z","type":"message"}
{"nick":"othiym23","message":"I can't not promise you that I won't not totally abuse that API if I have easy access to it","date":"2013-10-02T22:22:07.137Z","type":"message"}
{"nick":"trevnorris","message":"la la la *plugs ears*","date":"2013-10-02T22:22:37.391Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: ya, no I get it's use case, I actually wonder if it shouldn't be first class in the form of this concept","date":"2013-10-02T22:22:52.397Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: well, it will be with some plans I have for v0.13.","date":"2013-10-02T22:23:15.242Z","type":"message"}
{"nick":"trevnorris","message":"but right now with the way everything is abstracted through the event emitter, makes life a bitgh","date":"2013-10-02T22:23:33.304Z","type":"message"}
{"nick":"tjfontaine","message":"well then I think we need to make sure we do that now, instead of adding api in 0.13","date":"2013-10-02T22:23:33.521Z","type":"message"}
{"nick":"trevnorris","message":"bitch","date":"2013-10-02T22:23:36.197Z","type":"message"}
{"nick":"trevnorris","message":"hah, then v0.12's going to have to wait another 2 months at the least.","date":"2013-10-02T22:24:05.178Z","type":"message"}
{"nick":"tjfontaine","message":"then I would say first class of this async listener would have to wait until after 1.0","date":"2013-10-02T22:24:21.848Z","type":"message"}
{"nick":"tjfontaine","message":"because it's a real feature","date":"2013-10-02T22:24:26.273Z","type":"message"}
{"nick":"tjfontaine","message":"would *really* just like to fix on bugs and perf for 0.13, which certainly involves ripping out and reimplementing things like domains/http/tls","date":"2013-10-02T22:24:57.957Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: well, the api that's exposed to the user is feature complete.","date":"2013-10-02T22:25:09.090Z","type":"message"}
{"nick":"tjfontaine","message":"but doesn't necessarily include a whole new api feature","date":"2013-10-02T22:25:18.975Z","type":"message"}
{"nick":"trevnorris","message":"right now i'm working around internals trying to separate domains from c++ core code.","date":"2013-10-02T22:25:30.453Z","type":"message"}
{"nick":"trevnorris","message":"just like to get that done before the v0.12 release.","date":"2013-10-02T22:25:38.036Z","type":"message"}
{"nick":"tjfontaine","message":"right, completely internal things are all fair game, but a whole new first class feature I would really like to punt on","date":"2013-10-02T22:25:58.353Z","type":"message"}
{"nick":"tjfontaine","message":"so here's a question that came up today","date":"2013-10-02T22:26:28.864Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: read the first \"experimental\" tag here: https://github.com/joyent/node/issues/6252","date":"2013-10-02T22:26:42.564Z","type":"message"}
{"nick":"trevnorris","message":"that's something I'd like to get done before v1.0.","date":"2013-10-02T22:26:57.158Z","type":"message"}
{"nick":"tjfontaine","message":"given an http.request, which has a content-length, if we might emit end but haven't yet seen all data, should we emit an error instead of end","date":"2013-10-02T22:27:31.325Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-10-02T22:28:50.057Z","type":"nick"}
{"nick":"trevnorris","message":"tjfontaine: um. if the data coming in doesn't match the content-length in the header, I don't think there should be any type of error that causes the application to crash.","date":"2013-10-02T22:29:03.370Z","type":"message"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-10-02T22:29:18.814Z","type":"nick"}
{"nick":"tjfontaine","message":"I didn't say cause the application to crash, but instead to emit an error","date":"2013-10-02T22:29:28.794Z","type":"message"}
{"nick":"tjfontaine","message":"just like we emit if the connection was reset","date":"2013-10-02T22:29:40.290Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: well, thinking about it at a lower level, does request() use keepalive?","date":"2013-10-02T22:30:56.669Z","type":"message"}
{"nick":"tjfontaine","message":"it may","date":"2013-10-02T22:31:03.211Z","type":"message"}
{"nick":"trevnorris","message":"give me a sec. reading up on tcp","date":"2013-10-02T22:32:37.073Z","type":"message"}
{"nick":"tjfontaine","message":"it's not about tcp","date":"2013-10-02T22:32:43.778Z","type":"message"}
{"nick":"tjfontaine","message":"you do http.get in node, you get back a response with a content-length of 100mb, remote side sends you 10mb, then closes the connection","date":"2013-10-02T22:33:12.688Z","type":"message"}
{"nick":"trevnorris","message":"well, if not using keepalive then who/when closes the connection","date":"2013-10-02T22:33:16.420Z","type":"message"}
{"nick":"tjfontaine","message":"in this scenario we emit end, and then close","date":"2013-10-02T22:33:18.916Z","type":"message"}
{"nick":"trevnorris","message":"ok, yeah.","date":"2013-10-02T22:33:31.375Z","type":"message"}
{"nick":"tjfontaine","message":"if we're about to emit end on an http request response, and we had a content length and haven't seen all of it yet -- it really seems like that should be an error","date":"2013-10-02T22:34:06.117Z","type":"message"}
{"nick":"tjfontaine","message":"because content-length is not an advisory field","date":"2013-10-02T22:34:16.106Z","type":"message"}
{"nick":"trevnorris","message":"um. I might ask, what do browsers do?","date":"2013-10-02T22:34:32.620Z","type":"message"}
{"nick":"tjfontaine","message":"well I am more curious what python/ruby/perl do","date":"2013-10-02T22:34:43.373Z","type":"message"}
{"nick":"tjfontaine","message":"but you could fake this up in node really easy to find out what your browser says","date":"2013-10-02T22:35:12.213Z","type":"message"}
{"nick":"tjfontaine","message":"Error code: ERR_CONTENT_LENGTH_MISMATCH","date":"2013-10-02T22:42:00.928Z","type":"message"}
{"nick":"tjfontaine","message":"on chrome","date":"2013-10-02T22:42:03.730Z","type":"message"}
{"nick":"tjfontaine","message":"firefox just soldiers on","date":"2013-10-02T22:42:11.174Z","type":"message"}
{"nick":"trevnorris","message":"hah, ok.","date":"2013-10-02T22:42:22.252Z","type":"message"}
{"nick":"Kakera","reason":"Ping timeout: 240 seconds","date":"2013-10-02T22:42:53.497Z","type":"quit"}
{"nick":"tjfontaine","message":"python urllib2.urlopen doesn't care though","date":"2013-10-02T22:44:08.238Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ok, well. if there's too much data I say we emit the exact amount of data in the header, then emit an error","date":"2013-10-02T22:44:12.464Z","type":"message"}
{"nick":"tjfontaine","message":"at least not urllib2.urlopen('http://localhost:3000').read()","date":"2013-10-02T22:44:19.180Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: right I agree","date":"2013-10-02T22:44:29.817Z","type":"message"}
{"nick":"trevnorris","message":"if they ignore the error, then they'll just get the amount of data they were told to expect","date":"2013-10-02T22:44:30.058Z","type":"message"}
{"nick":"tjfontaine","message":"it's not something we can change for 0.10 of course","date":"2013-10-02T22:44:42.687Z","type":"message"}
{"nick":"tjfontaine","message":"but I think it's something we [c|sh]ould change for 0.12","date":"2013-10-02T22:45:03.205Z","type":"message"}
{"nick":"trevnorris","message":"nod","date":"2013-10-02T22:46:45.644Z","type":"message"}
{"nick":"tjfontaine","message":"ah","date":"2013-10-02T22:46:52.891Z","type":"message"}
{"nick":"tjfontaine","message":"Changed in version 2.5: urlretrieve() will raise ContentTooShortError when it detects that the amount of data available was less than the expected amount (which is the size reported by a Content-Length header). This can occur, for example, when the download is interrupted.","date":"2013-10-02T22:46:53.546Z","type":"message"}
{"nick":"tjfontaine","message":"so it depends on what path you're in on python","date":"2013-10-02T22:47:04.149Z","type":"message"}
{"nick":"tjfontaine","message":"the next line is wrong, but probably also how we would handle it","date":"2013-10-02T22:47:31.260Z","type":"message"}
{"nick":"tjfontaine","message":"The Content-Length is treated as a lower bound: if there’s more data to read, urlretrieve() reads more data, but if less data is available, it raises the exception","date":"2013-10-02T22:47:32.168Z","type":"message"}
{"nick":"trevnorris","message":"interesting.","date":"2013-10-02T22:48:09.671Z","type":"message"}
{"nick":"trevnorris","message":"but is that what the spec says?","date":"2013-10-02T22:48:15.633Z","type":"message"}
{"nick":"bnoordhuis","date":"2013-10-02T22:49:12.548Z","type":"join"}
{"nick":"tjfontaine","message":"When a Content-Length is given in a message where a message-body is allowed, its field value MUST exactly match the number of OCTETs in the message-body. HTTP/1.1 user agents MUST notify the user when an invalid length is received and detected.","date":"2013-10-02T22:49:25.156Z","type":"message"}
{"nick":"tjfontaine","message":"so in that regard, we're not following the spec","date":"2013-10-02T22:49:45.688Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ok. so my understanding from that wording is that we can choose to continue accepting the data, we just need to let the user know it's been exceeded.","date":"2013-10-02T22:50:28.586Z","type":"message"}
{"nick":"tjfontaine","message":"for exceeded yes","date":"2013-10-02T22:50:43.657Z","type":"message"}
{"nick":"trevnorris","message":"yeah. so emit an error, but continue accepting data.","date":"2013-10-02T22:50:56.609Z","type":"message"}
{"nick":"tjfontaine","message":"either way, if it's a mismatch we need to be notifying the user","date":"2013-10-02T22:50:58.563Z","type":"message"}
{"nick":"trevnorris","message":"sounds fine.","date":"2013-10-02T22:50:59.274Z","type":"message"}
{"nick":"trevnorris","message":"yeah. sounds correct.","date":"2013-10-02T22:51:06.786Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2013-10-02T22:53:26.550Z","type":"quit"}
{"nick":"austo","date":"2013-10-02T23:18:25.296Z","type":"join"}
{"nick":"st_luke","date":"2013-10-02T23:26:18.198Z","type":"join"}
{"nick":"inolen","reason":"Read error: Connection reset by peer","date":"2013-10-02T23:26:45.378Z","type":"quit"}
{"nick":"inolen","date":"2013-10-02T23:27:51.416Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-10-02T23:29:45.488Z","type":"quit"}
{"nick":"trevnorris","message":"tjfontaine: we should do something about --max-opt-count, meaning, node processes are supposed to be long-running. but if a function de-opts max-opt-count times then it won't try to be optimized again. even if it's only happened once in a while.","date":"2013-10-02T23:30:24.336Z","type":"message"}
{"nick":"tjfontaine","message":"hm","date":"2013-10-02T23:32:42.744Z","type":"message"}
{"nick":"trevnorris","message":"also, theirs --deopt-every-n-times.","date":"2013-10-02T23:33:10.106Z","type":"message"}
{"nick":"trevnorris","message":"i feel like there's optimizing we can do there.","date":"2013-10-02T23:33:19.986Z","type":"message"}
{"nick":"tjfontaine","message":"wouldn't it be better if we could have multiple opts in place? :)","date":"2013-10-02T23:33:29.601Z","type":"message"}
{"nick":"trevnorris","message":"well, it bothers me that there's no option for, never stop.","date":"2013-10-02T23:34:42.002Z","type":"message"}
{"nick":"tjfontaine","message":"nod","date":"2013-10-02T23:35:23.497Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ah, would you look at that. --always_opt","date":"2013-10-02T23:40:40.822Z","type":"message"}
{"nick":"trevnorris","message":"there are so many freakin flags.","date":"2013-10-02T23:40:48.857Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2013-10-02T23:41:23.841Z","type":"message"}
{"nick":"tjfontaine","message":"also, not all of their operation is sensible","date":"2013-10-02T23:41:36.335Z","type":"message"}
{"nick":"st_luke","reason":"Read error: Connection reset by peer","date":"2013-10-02T23:41:46.692Z","type":"quit"}
{"nick":"trevnorris","message":"i just want an --unsafe-but-performant-awesomeness flag","date":"2013-10-02T23:42:11.800Z","type":"message"}
{"nick":"tjfontaine","message":"node --go-fast","date":"2013-10-02T23:42:33.466Z","type":"message"}
{"nick":"tjfontaine","message":":P","date":"2013-10-02T23:42:36.318Z","type":"message"}
{"nick":"trevnorris","message":"whoot! I like it.","date":"2013-10-02T23:42:42.098Z","type":"message"}
{"nick":"trevnorris","message":"ooh, and this looks interesting: --always_inline_smi_code","date":"2013-10-02T23:43:46.619Z","type":"message"}
{"nick":"trevnorris","message":"just wish there was a manual for all of these.","date":"2013-10-02T23:43:54.271Z","type":"message"}
{"nick":"trevnorris","message":"the brief descriptions they give are almost useless to me","date":"2013-10-02T23:44:06.338Z","type":"message"}
{"nick":"tjfontaine","message":"yes, and you never know from release to release how meaningful they'll even be","date":"2013-10-02T23:44:24.524Z","type":"message"}
{"nick":"trevnorris","message":"seriously.","date":"2013-10-02T23:44:43.768Z","type":"message"}
{"nick":"othiym23","message":"Readable does some seriously weird shit to EEs","date":"2013-10-02T23:50:33.629Z","type":"message"}
{"nick":"tjfontaine","message":"in which way?","date":"2013-10-02T23:50:45.114Z","type":"message"}
{"nick":"othiym23","message":"suddenly! you call .on on a Readable! and .on changes to a different function after the call!","date":"2013-10-02T23:51:02.527Z","type":"message"}
{"nick":"othiym23","message":"that's *my* job","date":"2013-10-02T23:51:08.267Z","type":"message"}
{"nick":"tjfontaine","message":"oh hah","date":"2013-10-02T23:51:16.568Z","type":"message"}
{"nick":"st_luke","date":"2013-10-02T23:52:41.988Z","type":"join"}
{"nick":"qard","date":"2013-10-02T23:53:02.790Z","type":"join"}
{"nick":"othiym23","message":"tjfontaine: what the hell is going on here? https://github.com/joyent/node/blob/master/lib/_stream_readable.js#L662-L693","date":"2013-10-02T23:58:07.082Z","type":"message"}
{"nick":"othiym23","message":"this kind of self-modifying code makes me kinda ill","date":"2013-10-02T23:58:20.901Z","type":"message"}
{"nick":"tjfontaine","message":"ya, I understand","date":"2013-10-02T23:59:22.623Z","type":"message"}
{"nick":"c4milo","date":"2013-10-02T23:59:43.446Z","type":"join"}
{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #207 \u00034FAILURE\u000f windows-x64 (3/195) windows-ia32 (3/195) linux-ia32 (1/194) http://jenkins.nodejs.org/job/libuv-master-gyp/207/","date":"2013-10-02T23:59:51.948Z","type":"message"}
{"nick":"tjfontaine","message":"but it's not an uncommon pattern to find","date":"2013-10-02T23:59:57.305Z","type":"message"}
