{"nick":"ircretary","reason":"Remote host closed the connection","date":"2015-02-25T00:00:00.481Z","type":"quit"}
{"nick":"ircretary","date":"2015-02-25T00:00:08.334Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T00:24:47.852Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 264 seconds","date":"2015-02-25T00:35:17.847Z","type":"quit"}
{"nick":"reqshark","date":"2015-02-25T00:41:03.228Z","type":"join"}
{"nick":"Ralith","reason":"Ping timeout: 264 seconds","date":"2015-02-25T00:47:17.838Z","type":"quit"}
{"nick":"Ralith","date":"2015-02-25T00:49:06.696Z","type":"join"}
{"nick":"brson","reason":"Quit: Lost terminal","date":"2015-02-25T00:57:49.986Z","type":"quit"}
{"nick":"brson","date":"2015-02-25T00:58:06.029Z","type":"join"}
{"nick":"az7ar_away","reason":"Ping timeout: 256 seconds","date":"2015-02-25T01:06:16.117Z","type":"quit"}
{"nick":"reqshark","reason":"Quit: Be back later ...","date":"2015-02-25T01:06:31.850Z","type":"quit"}
{"nick":"reqshark","date":"2015-02-25T01:07:42.407Z","type":"join"}
{"nick":"qard","reason":"Quit: leaving","date":"2015-02-25T01:14:39.488Z","type":"quit"}
{"nick":"octetclo1","date":"2015-02-25T01:16:14.946Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 256 seconds","date":"2015-02-25T01:16:52.955Z","type":"quit"}
{"nick":"erikj","reason":"*.net *.split","date":"2015-02-25T01:16:54.643Z","type":"quit"}
{"nick":"hij1nx","reason":"*.net *.split","date":"2015-02-25T01:16:54.845Z","type":"quit"}
{"nick":"az7ar_away","date":"2015-02-25T01:17:30.760Z","type":"join"}
{"nick":"erikj","date":"2015-02-25T01:20:16.393Z","type":"join"}
{"nick":"hij1nx","date":"2015-02-25T01:20:16.634Z","type":"join"}
{"nick":"stagas","reason":"Ping timeout: 252 seconds","date":"2015-02-25T01:28:23.352Z","type":"quit"}
{"nick":"dap_","reason":"*.net *.split","date":"2015-02-25T01:35:25.648Z","type":"quit"}
{"nick":"feross","reason":"*.net *.split","date":"2015-02-25T01:35:26.375Z","type":"quit"}
{"nick":"rphillips","reason":"*.net *.split","date":"2015-02-25T01:35:28.233Z","type":"quit"}
{"nick":"Drajwer_","reason":"*.net *.split","date":"2015-02-25T01:35:28.704Z","type":"quit"}
{"nick":"az7ar_away","reason":"*.net *.split","date":"2015-02-25T01:35:28.906Z","type":"quit"}
{"nick":"brson","reason":"*.net *.split","date":"2015-02-25T01:35:29.109Z","type":"quit"}
{"nick":"indutny","reason":"*.net *.split","date":"2015-02-25T01:35:30.078Z","type":"quit"}
{"nick":"DrPizza","reason":"*.net *.split","date":"2015-02-25T01:35:31.478Z","type":"quit"}
{"nick":"wrl","reason":"*.net *.split","date":"2015-02-25T01:35:33.812Z","type":"quit"}
{"nick":"normanm","reason":"*.net *.split","date":"2015-02-25T01:35:35.333Z","type":"quit"}
{"nick":"tjfontaine","reason":"*.net *.split","date":"2015-02-25T01:35:35.546Z","type":"quit"}
{"nick":"isaacs","reason":"*.net *.split","date":"2015-02-25T01:35:35.858Z","type":"quit"}
{"nick":"brycebaril","reason":"*.net *.split","date":"2015-02-25T01:35:36.522Z","type":"quit"}
{"nick":"[afk]Soarez","reason":"*.net *.split","date":"2015-02-25T01:35:36.894Z","type":"quit"}
{"nick":"az7ar_away","date":"2015-02-25T01:39:28.207Z","type":"join"}
{"nick":"brson","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"dap_","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"indutny","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"feross","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"DrPizza","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"[afk]Soarez","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"wrl","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"rphillips","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"Drajwer_","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"normanm","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"tjfontaine","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"isaacs","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"brycebaril","date":"2015-02-25T01:39:28.446Z","type":"join"}
{"nick":"dap_","reason":"*.net *.split","date":"2015-02-25T01:40:17.500Z","type":"quit"}
{"nick":"feross","reason":"*.net *.split","date":"2015-02-25T01:40:19.232Z","type":"quit"}
{"nick":"rphillips","reason":"*.net *.split","date":"2015-02-25T01:40:23.641Z","type":"quit"}
{"nick":"Drajwer_","reason":"*.net *.split","date":"2015-02-25T01:40:24.840Z","type":"quit"}
{"nick":"az7ar_away","reason":"*.net *.split","date":"2015-02-25T01:40:25.546Z","type":"quit"}
{"nick":"brson","reason":"*.net *.split","date":"2015-02-25T01:40:25.853Z","type":"quit"}
{"nick":"indutny","reason":"*.net *.split","date":"2015-02-25T01:40:28.493Z","type":"quit"}
{"nick":"DrPizza","reason":"*.net *.split","date":"2015-02-25T01:40:32.164Z","type":"quit"}
{"nick":"wrl","reason":"*.net *.split","date":"2015-02-25T01:40:38.244Z","type":"quit"}
{"nick":"normanm","reason":"*.net *.split","date":"2015-02-25T01:40:42.335Z","type":"quit"}
{"nick":"tjfontaine","reason":"*.net *.split","date":"2015-02-25T01:40:42.903Z","type":"quit"}
{"nick":"isaacs","reason":"*.net *.split","date":"2015-02-25T01:40:43.738Z","type":"quit"}
{"nick":"brycebaril","reason":"*.net *.split","date":"2015-02-25T01:40:45.572Z","type":"quit"}
{"nick":"[afk]Soarez","reason":"*.net *.split","date":"2015-02-25T01:40:46.594Z","type":"quit"}
{"nick":"mikolalysenko","reason":"*.net *.split","date":"2015-02-25T01:40:49.753Z","type":"quit"}
{"nick":"nsm","reason":"*.net *.split","date":"2015-02-25T01:40:50.208Z","type":"quit"}
{"nick":"az7ar_away","date":"2015-02-25T01:41:42.210Z","type":"join"}
{"nick":"brson","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"indutny","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"feross","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"DrPizza","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"[afk]Soarez","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"wrl","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"rphillips","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"Drajwer_","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"normanm","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"tjfontaine","date":"2015-02-25T01:41:42.450Z","type":"join"}
{"nick":"isaacs","date":"2015-02-25T01:41:42.451Z","type":"join"}
{"nick":"brycebaril","date":"2015-02-25T01:41:42.451Z","type":"join"}
{"nick":"inolen","reason":"Quit: Leaving.","date":"2015-02-25T01:43:50.268Z","type":"quit"}
{"nick":"mikolalysenko","date":"2015-02-25T01:59:30.278Z","type":"join"}
{"nick":"nsm","date":"2015-02-25T01:59:30.518Z","type":"join"}
{"nick":"brson","reason":"Ping timeout: 246 seconds","date":"2015-02-25T02:04:15.618Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T02:05:37.402Z","type":"quit"}
{"nick":"mikolalysenko","reason":"*.net *.split","date":"2015-02-25T02:10:43.074Z","type":"quit"}
{"nick":"nsm","reason":"*.net *.split","date":"2015-02-25T02:10:43.314Z","type":"quit"}
{"nick":"Ralith","reason":"Ping timeout: 245 seconds","date":"2015-02-25T02:11:07.644Z","type":"quit"}
{"nick":"mikolalysenko","date":"2015-02-25T02:16:26.751Z","type":"join"}
{"nick":"nsm","date":"2015-02-25T02:16:26.990Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T02:19:35.929Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 264 seconds","date":"2015-02-25T02:24:29.909Z","type":"quit"}
{"nick":"Ralith","date":"2015-02-25T02:32:51.321Z","type":"join"}
{"nick":"jgi","date":"2015-02-25T02:37:40.427Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T03:05:01.428Z","type":"quit"}
{"nick":"jgi","date":"2015-02-25T03:23:10.952Z","type":"join"}
{"nick":"jgi","reason":"Client Quit","date":"2015-02-25T03:26:09.667Z","type":"quit"}
{"nick":"warehouse13","reason":"Remote host closed the connection","date":"2015-02-25T03:36:35.075Z","type":"quit"}
{"nick":"qard","date":"2015-02-25T03:40:50.813Z","type":"join"}
{"nick":"rmg","reason":"Read error: Connection reset by peer","date":"2015-02-25T03:51:32.108Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T03:52:34.715Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T04:08:25.391Z","type":"join"}
{"nick":"jgi","date":"2015-02-25T04:10:23.903Z","type":"join"}
{"nick":"brson","date":"2015-02-25T04:12:15.597Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 264 seconds","date":"2015-02-25T04:13:01.362Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T04:18:55.027Z","type":"quit"}
{"nick":"jgi","date":"2015-02-25T04:22:27.013Z","type":"join"}
{"nick":"toothrot","reason":"Ping timeout: 252 seconds","date":"2015-02-25T04:31:21.374Z","type":"quit"}
{"nick":"rmg","reason":"Read error: Connection reset by peer","date":"2015-02-25T04:33:53.227Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T04:34:00.607Z","type":"join"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2015-02-25T04:34:59.301Z","type":"quit"}
{"nick":"reqshark","reason":"Quit: Be back later ...","date":"2015-02-25T04:37:08.297Z","type":"quit"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2015-02-25T04:53:26.540Z","type":"quit"}
{"nick":"inolen","date":"2015-02-25T04:53:29.352Z","type":"join"}
{"nick":"avalanche123","date":"2015-02-25T05:06:41.236Z","type":"join"}
{"nick":"octetclo1","reason":"Ping timeout: 240 seconds","date":"2015-02-25T05:10:23.022Z","type":"quit"}
{"nick":"avalanche123","reason":"Remote host closed the connection","date":"2015-02-25T05:39:39.890Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T05:54:08.015Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T05:57:10.332Z","type":"join"}
{"nick":"brson","reason":"Quit: leaving","date":"2015-02-25T05:57:13.062Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 265 seconds","date":"2015-02-25T05:59:38.273Z","type":"quit"}
{"nick":"thlorenz_","reason":"Ping timeout: 256 seconds","date":"2015-02-25T06:01:51.271Z","type":"quit"}
{"nick":"octetclo1","date":"2015-02-25T06:06:30.396Z","type":"join"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2015-02-25T06:09:17.074Z","type":"quit"}
{"nick":"wolfeidau","date":"2015-02-25T06:09:32.677Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T06:17:58.497Z","type":"quit"}
{"nick":"seishun","date":"2015-02-25T06:19:14.998Z","type":"join"}
{"nick":"inolen","reason":"Quit: Leaving.","date":"2015-02-25T06:19:42.236Z","type":"quit"}
{"nick":"jgi","date":"2015-02-25T06:19:48.214Z","type":"join"}
{"nick":"jgi","reason":"Client Quit","date":"2015-02-25T06:23:33.147Z","type":"quit"}
{"nick":"jgi","date":"2015-02-25T06:37:12.946Z","type":"join"}
{"nick":"avalanche123","date":"2015-02-25T06:40:14.056Z","type":"join"}
{"nick":"avalanche123","reason":"Ping timeout: 245 seconds","date":"2015-02-25T06:45:17.639Z","type":"quit"}
{"nick":"stagas","date":"2015-02-25T06:55:29.303Z","type":"join"}
{"nick":"inolen","date":"2015-02-25T06:56:11.805Z","type":"join"}
{"nick":"octetclo1","reason":"Ping timeout: 265 seconds","date":"2015-02-25T07:07:47.334Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T07:14:31.691Z","type":"quit"}
{"nick":"stagas","reason":"Quit: Bye","date":"2015-02-25T07:17:09.406Z","type":"quit"}
{"nick":"jgi","date":"2015-02-25T07:20:22.143Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 244 seconds","date":"2015-02-25T07:21:41.293Z","type":"quit"}
{"nick":"stagas","date":"2015-02-25T07:23:55.964Z","type":"join"}
{"nick":"rmg","date":"2015-02-25T07:43:20.789Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T07:45:58.336Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 244 seconds","date":"2015-02-25T07:47:31.218Z","type":"quit"}
{"nick":"qard","reason":"Remote host closed the connection","date":"2015-02-25T07:47:35.779Z","type":"quit"}
{"nick":"thlorenz_","reason":"Ping timeout: 265 seconds","date":"2015-02-25T07:50:48.353Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T07:52:10.600Z","type":"quit"}
{"nick":"jgi","date":"2015-02-25T07:53:07.310Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T08:02:16.576Z","type":"quit"}
{"nick":"SergeiRND","date":"2015-02-25T08:28:20.016Z","type":"join"}
{"nick":"chris_99","date":"2015-02-25T08:58:23.665Z","type":"join"}
{"nick":"stagas","reason":"Ping timeout: 240 seconds","date":"2015-02-25T09:14:22.933Z","type":"quit"}
{"nick":"thhp","date":"2015-02-25T09:25:08.908Z","type":"join"}
{"nick":"thhp","message":"hello, can anyone tell me whether the uv thread pool apis (specifically uv_queue_work) are thread safe?","date":"2015-02-25T09:33:04.542Z","type":"message"}
{"nick":"thlorenz_","date":"2015-02-25T09:34:46.459Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 265 seconds","date":"2015-02-25T09:39:33.190Z","type":"quit"}
{"nick":"saghul","message":"thhp: nope, it's not thread-safe","date":"2015-02-25T09:50:10.806Z","type":"message"}
{"nick":"saghul","message":"you need to call uv_queue_work from the loop thread","date":"2015-02-25T09:50:23.320Z","type":"message"}
{"nick":"saghul","message":"the only thread-safe API function involving the loop or any handle is uv_async_send","date":"2015-02-25T09:50:42.756Z","type":"message"}
{"nick":"thhp","message":"thanks saghul ","date":"2015-02-25T09:51:20.545Z","type":"message"}
{"nick":"txdv","message":"a question that is asked all the time","date":"2015-02-25T10:33:27.131Z","type":"message"}
{"nick":"thhp","message":"txdv: I think what mislead me was the docs which state that there's one global thread-pool shared by all the uv main loops","date":"2015-02-25T10:49:00.621Z","type":"message"}
{"nick":"thhp","message":"which made me mistakenly assume that the threadpool api would be thread-safe","date":"2015-02-25T10:49:29.899Z","type":"message"}
{"nick":"thhp","message":"maybe there is an faq entry I missed :-|","date":"2015-02-25T10:49:52.165Z","type":"message"}
{"nick":"zju3","date":"2015-02-25T10:51:15.042Z","type":"join"}
{"nick":"zju2","date":"2015-02-25T10:51:24.394Z","type":"join"}
{"nick":"zju1","reason":"Ping timeout: 252 seconds","date":"2015-02-25T10:51:35.452Z","type":"quit"}
{"nick":"zju4","reason":"Ping timeout: 240 seconds","date":"2015-02-25T10:52:22.932Z","type":"quit"}
{"nick":"SergeiRND","reason":"Quit: Leaving.","date":"2015-02-25T11:00:16.091Z","type":"quit"}
{"nick":"txdv","message":"the thread pool is per loop","date":"2015-02-25T11:16:33.059Z","type":"message"}
{"nick":"txdv","message":"where exactly is it written that there is one global thread pool?","date":"2015-02-25T11:16:48.064Z","type":"message"}
{"nick":"txdv","message":"can you point me to the file and line?","date":"2015-02-25T11:17:01.241Z","type":"message"}
{"nick":"txdv","message":"or to the documentation site? wherever you read it","date":"2015-02-25T11:17:10.065Z","type":"message"}
{"nick":"rmg","date":"2015-02-25T11:20:49.906Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T11:23:37.811Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 245 seconds","date":"2015-02-25T11:25:14.606Z","type":"quit"}
{"nick":"thhp","message":"txdv: I was looking in doc/ in my libuv git tree, but it's the same thing here: http://docs.libuv.org/en/v1.x/threadpool.html","date":"2015-02-25T11:26:08.920Z","type":"message"}
{"nick":"thhp","message":"paragraph 3 in the top section titled \"Thread pool work scheduling\"","date":"2015-02-25T11:26:34.564Z","type":"message"}
{"nick":"thhp","message":"\"The threadpool is global and shared across all event loops\"","date":"2015-02-25T11:27:17.272Z","type":"message"}
{"nick":"thlorenz_","reason":"Ping timeout: 252 seconds","date":"2015-02-25T11:28:02.810Z","type":"quit"}
{"nick":"txdv","message":"hm","date":"2015-02-25T11:33:06.121Z","type":"message"}
{"nick":"txdv","message":"let me check it up","date":"2015-02-25T11:33:13.074Z","type":"message"}
{"nick":"txdv","message":"that documentation is wrong","date":"2015-02-25T11:34:21.337Z","type":"message"}
{"nick":"txdv","message":"why would uv_queue_work ened a loop variable if the thread pool were global","date":"2015-02-25T11:34:42.833Z","type":"message"}
{"nick":"txdv","message":"altough","date":"2015-02-25T11:34:46.522Z","type":"message"}
{"nick":"SergeiRND","date":"2015-02-25T11:36:32.932Z","type":"join"}
{"nick":"txdv","message":"saghul: is there a thread pool per loop or is there a global thread pool?","date":"2015-02-25T11:36:38.334Z","type":"message"}
{"nick":"txdv","message":"thhp: i just checked up the code","date":"2015-02-25T11:39:55.670Z","type":"message"}
{"nick":"txdv","message":"there is one global thread pool","date":"2015-02-25T11:39:58.907Z","type":"message"}
{"nick":"thhp","message":"ack","date":"2015-02-25T11:40:27.281Z","type":"message"}
{"nick":"txdv","message":"but that doesnt make uv_queue_work thread safe","date":"2015-02-25T11:40:34.747Z","type":"message"}
{"nick":"piscisaureus","date":"2015-02-25T11:40:35.489Z","type":"join"}
{"nick":"txdv","message":"as in if you call it from one loop on another, it wont work","date":"2015-02-25T11:40:44.822Z","type":"message"}
{"nick":"thhp","message":"no, I understand that","date":"2015-02-25T11:40:52.083Z","type":"message"}
{"nick":"thhp","message":"my mention of the global thread pool earlier was really just to explain where my confusion arose from","date":"2015-02-25T11:41:18.611Z","type":"message"}
{"nick":"az7ar_away","reason":"Ping timeout: 246 seconds","date":"2015-02-25T11:42:05.944Z","type":"quit"}
{"nick":"thhp","message":"but I think it's clear now, thanks :-)","date":"2015-02-25T11:42:12.829Z","type":"message"}
{"nick":"txdv","message":"metioning it that it uses a global thread pool you think that is thread safe?","date":"2015-02-25T11:44:19.611Z","type":"message"}
{"nick":"thhp","message":"it's more the mention of multiple uv loops: my naive thinking was \"OK, I can call this from multiple event loops, hence the API should be thread-safe\"","date":"2015-02-25T11:45:50.396Z","type":"message"}
{"nick":"thhp","message":"on the basis that you'd need a thread per executing call to uv_run","date":"2015-02-25T11:46:12.681Z","type":"message"}
{"nick":"thhp","message":"and based on a skim of the code (at least in my git tree, which I think is a little old now) it looks like the thread-pool per-se is probably thread-safe, but the loop modifications that uv_queue_work carries out are not","date":"2015-02-25T11:47:16.041Z","type":"message"}
{"nick":"txdv","message":"https://github.com/libuv/libuv/pull/227","date":"2015-02-25T11:49:24.370Z","type":"message"}
{"nick":"txdv","message":"yes exactly","date":"2015-02-25T11:49:29.510Z","type":"message"}
{"nick":"thhp","message":"cool, I think that makes things clear in the docs :-)","date":"2015-02-25T11:50:14.604Z","type":"message"}
{"nick":"thhp","message":"I'm not sure if others asking about uv_queue_work were labouring under the same misapprehension, but hopefully this will help","date":"2015-02-25T11:51:08.867Z","type":"message"}
{"nick":"Left_Turn","date":"2015-02-25T12:15:45.301Z","type":"join"}
{"nick":"saghul_","date":"2015-02-25T12:22:09.309Z","type":"join"}
{"nick":"chris_99","reason":"Remote host closed the connection","date":"2015-02-25T12:33:16.339Z","type":"quit"}
{"nick":"chris_99","date":"2015-02-25T12:34:52.316Z","type":"join"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2015-02-25T13:05:31.407Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T13:09:37.477Z","type":"join"}
{"nick":"saghul_","date":"2015-02-25T13:12:21.649Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T13:12:22.999Z","type":"join"}
{"nick":"az7ar_away","date":"2015-02-25T13:13:29.327Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 244 seconds","date":"2015-02-25T13:14:03.346Z","type":"quit"}
{"nick":"thlorenz_","reason":"Ping timeout: 246 seconds","date":"2015-02-25T13:16:53.955Z","type":"quit"}
{"nick":"toothrot","date":"2015-02-25T13:31:07.432Z","type":"join"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2015-02-25T13:35:55.252Z","type":"quit"}
{"nick":"saghul_","date":"2015-02-25T13:43:09.288Z","type":"join"}
{"nick":"saghul__","date":"2015-02-25T13:45:14.333Z","type":"join"}
{"nick":"saghul_","reason":"Ping timeout: 256 seconds","date":"2015-02-25T13:47:39.287Z","type":"quit"}
{"nick":"inolen","reason":"Read error: Connection reset by peer","date":"2015-02-25T13:53:50.993Z","type":"quit"}
{"nick":"inolen","date":"2015-02-25T13:58:46.924Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T14:13:10.550Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 264 seconds","date":"2015-02-25T14:17:54.512Z","type":"quit"}
{"nick":"Fishrock123","date":"2015-02-25T14:47:23.356Z","type":"join"}
{"nick":"rmg","date":"2015-02-25T14:58:23.492Z","type":"join"}
{"nick":"warehouse13","date":"2015-02-25T14:59:41.386Z","type":"join"}
{"nick":"Left_Turn","reason":"Ping timeout: 256 seconds","date":"2015-02-25T15:01:53.397Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 246 seconds","date":"2015-02-25T15:02:36.036Z","type":"quit"}
{"nick":"SergeiRND","reason":"Quit: Leaving.","date":"2015-02-25T15:03:50.127Z","type":"quit"}
{"nick":"saghul__","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2015-02-25T15:10:49.677Z","type":"quit"}
{"nick":"deleisha","date":"2015-02-25T15:19:18.617Z","type":"join"}
{"nick":"saghul_","date":"2015-02-25T15:19:41.949Z","type":"join"}
{"nick":"deleisha_","date":"2015-02-25T15:20:27.287Z","type":"join"}
{"nick":"saghul_","reason":"Ping timeout: 246 seconds","date":"2015-02-25T15:23:57.001Z","type":"quit"}
{"nick":"deleisha_","reason":"Client Quit","date":"2015-02-25T15:24:33.360Z","type":"quit"}
{"nick":"deleisha","reason":"Quit: Page closed","date":"2015-02-25T15:24:42.665Z","type":"quit"}
{"nick":"saghul_","date":"2015-02-25T15:26:50.807Z","type":"join"}
{"nick":"reqshark","date":"2015-02-25T15:27:09.978Z","type":"join"}
{"nick":"saghul_","reason":"Client Quit","date":"2015-02-25T15:28:36.943Z","type":"quit"}
{"nick":"reqshark","reason":"Ping timeout: 246 seconds","date":"2015-02-25T15:35:29.947Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T15:59:07.577Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T16:02:03.940Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 244 seconds","date":"2015-02-25T16:03:31.333Z","type":"quit"}
{"nick":"thlorenz_","reason":"Ping timeout: 240 seconds","date":"2015-02-25T16:06:22.937Z","type":"quit"}
{"nick":"AvianFlu","date":"2015-02-25T16:07:54.429Z","type":"join"}
{"nick":"pgicxplzs","date":"2015-02-25T16:19:18.289Z","type":"join"}
{"nick":"rmg","date":"2015-02-25T16:20:44.318Z","type":"join"}
{"nick":"warehouse13","reason":"Ping timeout: 250 seconds","date":"2015-02-25T16:21:45.392Z","type":"quit"}
{"nick":"toothrot","reason":"Ping timeout: 252 seconds","date":"2015-02-25T16:24:09.425Z","type":"quit"}
{"nick":"inolen","reason":"Quit: Leaving.","date":"2015-02-25T16:27:30.751Z","type":"quit"}
{"nick":"rmg","reason":"Read error: Connection reset by peer","date":"2015-02-25T16:49:01.993Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T16:49:42.107Z","type":"join"}
{"nick":"rmg","reason":"Read error: Connection reset by peer","date":"2015-02-25T16:51:36.648Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T16:52:10.757Z","type":"join"}
{"nick":"jgi","date":"2015-02-25T16:56:47.674Z","type":"join"}
{"nick":"jgi","reason":"Client Quit","date":"2015-02-25T17:00:56.677Z","type":"quit"}
{"nick":"thhp","date":"2015-02-25T17:04:42.146Z","type":"part"}
{"nick":"octetclo1","date":"2015-02-25T17:14:45.060Z","type":"join"}
{"nick":"jgi","date":"2015-02-25T17:32:34.229Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T17:32:51.266Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2015-02-25T17:37:31.492Z","type":"quit"}
{"nick":"thlorenz_","reason":"Ping timeout: 272 seconds","date":"2015-02-25T17:38:12.262Z","type":"quit"}
{"nick":"inolen","date":"2015-02-25T17:39:23.319Z","type":"join"}
{"nick":"Fishrock123","date":"2015-02-25T17:43:01.652Z","type":"join"}
{"nick":"seishun","date":"2015-02-25T17:49:01.904Z","type":"join"}
{"nick":"chris_99","reason":"Remote host closed the connection","date":"2015-02-25T18:08:09.680Z","type":"quit"}
{"nick":"chris_99","date":"2015-02-25T18:08:55.514Z","type":"join"}
{"nick":"reqshark","date":"2015-02-25T18:24:15.733Z","type":"join"}
{"nick":"Ralith","reason":"Ping timeout: 256 seconds","date":"2015-02-25T18:24:36.256Z","type":"quit"}
{"nick":"dap_","date":"2015-02-25T18:34:19.275Z","type":"join"}
{"nick":"yunong","date":"2015-02-25T18:39:38.304Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T18:41:45.311Z","type":"quit"}
{"nick":"jgi","date":"2015-02-25T18:42:20.392Z","type":"join"}
{"nick":"AvianFlu_","date":"2015-02-25T18:43:17.740Z","type":"join"}
{"nick":"AvianFlu","reason":"Ping timeout: 250 seconds","date":"2015-02-25T18:44:03.401Z","type":"quit"}
{"nick":"AvianFlu_","new_nick":"AvianFlu","date":"2015-02-25T18:45:38.478Z","type":"nick"}
{"nick":"thlorenz_","date":"2015-02-25T18:48:40.389Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 250 seconds","date":"2015-02-25T18:53:09.420Z","type":"quit"}
{"nick":"Ralith","date":"2015-02-25T19:13:33.343Z","type":"join"}
{"nick":"brson","date":"2015-02-25T19:21:03.286Z","type":"join"}
{"nick":"chris_99","reason":"Quit: Ex-Chat","date":"2015-02-25T19:34:18.457Z","type":"quit"}
{"nick":"chris_99","date":"2015-02-25T19:36:04.431Z","type":"join"}
{"nick":"isaacs","new_nick":"isaacs_the_rubbe","date":"2015-02-25T19:41:30.591Z","type":"nick"}
{"nick":"isaacs_the_rubbe","new_nick":"izs_rubber_duck","date":"2015-02-25T19:41:42.540Z","type":"nick"}
{"nick":"izs_rubber_duck","new_nick":"isaacs","date":"2015-02-25T19:41:59.664Z","type":"nick"}
{"nick":"Ralith","reason":"Ping timeout: 250 seconds","date":"2015-02-25T19:54:05.304Z","type":"quit"}
{"nick":"Ralith","date":"2015-02-25T19:57:39.354Z","type":"join"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Robert Kowalski\u000f \u00037v0.12\u000f * \u00025d821fe\u0002 : doc: add explanations for querystring (+1 more commits) - http://git.io/ANy1","date":"2015-02-25T20:05:52.087Z","type":"message"}
{"nick":"Domenic","message":"piscisaureus: byte streams question. It's never truly zero-copy, right, because you need to copy from kernel space to user space? How does that manifest in terms of syscalls---is that automatically done by fread(3)?","date":"2015-02-25T20:08:14.141Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Julien Gilli\u000f \u00037refs/tags/jenkins-accept-pull-request-temp\u000f * \u00024fc03c6\u0002 : src: fix builtin modules failing with --use-strict - http://git.io/AN9M","date":"2015-02-25T20:10:00.272Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Julien Gilli\u000f \u00037refs/tags/jenkins-accept-commit-temp\u000f * \u00024eeb9e6\u0002 : src: fix builtin modules failing with --use-strict - http://git.io/AN9x","date":"2015-02-25T20:10:40.273Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: well in theory it would be possible that the kernel reads straight into a user buffer","date":"2015-02-25T20:11:08.163Z","type":"message"}
{"nick":"Domenic","message":"interesting","date":"2015-02-25T20:11:18.918Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: at least iocp allows a model like that (although I don't think it happens in practice)","date":"2015-02-25T20:11:27.342Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: in the same vein the kernel can send data straight from user memory (but there too some limitations apply. It requires setting the kernel send buffer to 0 on windows)","date":"2015-02-25T20:12:35.837Z","type":"message"}
{"nick":"piscisaureus","message":"in reality it's hard to achieve true zero-copy because the kernel needs to build IP packets, it doesn't send raw data","date":"2015-02-25T20:13:12.978Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: the unix poll() model always requires a copy between user and kernel space","date":"2015-02-25T20:13:49.994Z","type":"message"}
{"nick":"piscisaureus","message":"except when splice() or sendfile() is used","date":"2015-02-25T20:13:58.421Z","type":"message"}
{"nick":"lanceball","new_nick":"lance|afk","date":"2015-02-25T20:14:00.979Z","type":"nick"}
{"nick":"Domenic","message":"piscisaureus: new question. when you fread into a buffer in a threadpool, the calling thread could in theory observe the buffer filling up, right? or is it atomic somehow?","date":"2015-02-25T20:15:24.043Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: you're right, it's observable in theory","date":"2015-02-25T20:16:03.264Z","type":"message"}
{"nick":"Domenic","message":"ok. this could make async read problematic.","date":"2015-02-25T20:16:21.546Z","type":"message"}
{"nick":"Domenic","message":"(but there are workarounds)","date":"2015-02-25T20:16:41.051Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: why?","date":"2015-02-25T20:16:42.328Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: it would only be problematic if the user buffer is exposed to javascript before the operation starts (e.g. readInto)","date":"2015-02-25T20:17:05.878Z","type":"message"}
{"nick":"Domenic","message":"because in browsers at least it's anathema to let JS observe that the universe is multithreaded. E.g. you shouldn't be able to see the values of variables changing from line to line","date":"2015-02-25T20:17:10.683Z","type":"message"}
{"nick":"Domenic","message":"Right","date":"2015-02-25T20:17:13.509Z","type":"message"}
{"nick":"Domenic","message":"Exactly","date":"2015-02-25T20:17:14.853Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: also in node this behavior is actually observable (with fs.read)","date":"2015-02-25T20:17:32.272Z","type":"message"}
{"nick":"Domenic","message":"interesting i was wondering about that","date":"2015-02-25T20:17:38.142Z","type":"message"}
{"nick":"Domenic","message":"node has so many buffer copies though i would've thought that could be avoided :P","date":"2015-02-25T20:17:45.835Z","type":"message"}
{"nick":"piscisaureus","message":"It doesn't actually","date":"2015-02-25T20:17:54.946Z","type":"message"}
{"nick":"piscisaureus","message":"there are no buffer copies except when a string is converted to a buffer or vice versa","date":"2015-02-25T20:18:09.087Z","type":"message"}
{"nick":"Domenic","message":"hmm ok, well trevnorris was complaining about them but maybe that was for http","date":"2015-02-25T20:18:21.171Z","type":"message"}
{"nick":"Domenic","message":"what is https://github.com/libuv/libuv/blob/v1.x/src/unix/fs.c#L1030 doing then?","date":"2015-02-25T20:18:30.277Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: or maybe streams2 made it worse. In node 0.6 there were no copies :)","date":"2015-02-25T20:18:30.733Z","type":"message"}
{"nick":"Domenic","message":"yeah I think streams2 did make things worse","date":"2015-02-25T20:18:40.084Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: that line only copies the iovec","date":"2015-02-25T20:18:48.422Z","type":"message"}
{"nick":"piscisaureus","message":"(e.g. it captures the pointers and lengths of buffers, but not the buffers themselves)","date":"2015-02-25T20:19:00.557Z","type":"message"}
{"nick":"Domenic","message":"ah i see","date":"2015-02-25T20:19:01.628Z","type":"message"}
{"nick":"piscisaureus","message":"and only if you writev() with more than 4 buffers","date":"2015-02-25T20:19:06.632Z","type":"message"}
{"nick":"Domenic","message":"where is the actual call to fread(3) hiding in libuv, btw?","date":"2015-02-25T20:19:26.459Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: the call is read() btw","date":"2015-02-25T20:19:40.108Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: fread is for \"high level io\" in C","date":"2015-02-25T20:19:49.545Z","type":"message"}
{"nick":"Domenic","message":"oh there it is","date":"2015-02-25T20:19:50.435Z","type":"message"}
{"nick":"Domenic","message":"huh","date":"2015-02-25T20:19:53.134Z","type":"message"}
{"nick":"piscisaureus","message":"fread() takes a struct FILE* as the first argument whereas read() takes a file descriptor","date":"2015-02-25T20:20:23.298Z","type":"message"}
{"nick":"Domenic","message":"makes sense","date":"2015-02-25T20:20:44.660Z","type":"message"}
{"nick":"piscisaureus","message":"high-level io in C does userspace buffering, and - on windows - newline conversion","date":"2015-02-25T20:20:48.838Z","type":"message"}
{"nick":"piscisaureus","message":"but libuv/node doesn't use that","date":"2015-02-25T20:20:58.121Z","type":"message"}
{"nick":"Domenic","message":"how does fs.read implement its offset parameter?","date":"2015-02-25T20:21:05.559Z","type":"message"}
{"nick":"jgi","reason":"Quit: jgi","date":"2015-02-25T20:21:09.035Z","type":"quit"}
{"nick":"piscisaureus","message":"with pread()","date":"2015-02-25T20:21:11.028Z","type":"message"}
{"nick":"Domenic","message":"sorry its position parameter","date":"2015-02-25T20:21:22.384Z","type":"message"}
{"nick":"Domenic","message":"i seee","date":"2015-02-25T20:21:23.905Z","type":"message"}
{"nick":"Domenic","message":"so if you accept the constraint that JS should not observe buffers changing, that rules out naive async readInto, I am pretty sure. I have a workaround in mind but I am curious what your thoughts are on where to go from there.","date":"2015-02-25T20:22:52.329Z","type":"message"}
{"nick":"piscisaureus","message":"I am not sure that I really agree that observation is so problematic","date":"2015-02-25T20:23:45.725Z","type":"message"}
{"nick":"Domenic","message":"it's a dealbreaker for browsers i am pretty sure :-/","date":"2015-02-25T20:24:11.533Z","type":"message"}
{"nick":"Domenic","message":"there was a huge fight over it regarding web audio","date":"2015-02-25T20:24:19.947Z","type":"message"}
{"nick":"piscisaureus","message":"the write path is much more problematic btw, you could imagine `sock.write(buf); buf[1] = 42`.","date":"2015-02-25T20:24:21.156Z","type":"message"}
{"nick":"piscisaureus","message":"Now it's undefined what gets written to the socket, it may or may not include 42","date":"2015-02-25T20:24:45.066Z","type":"message"}
{"nick":"Domenic","message":"that's easy. i guess i'll give away my solution to answer it :). neuter the passed arraybuffer when you pass it to write","date":"2015-02-25T20:24:49.550Z","type":"message"}
{"nick":"piscisaureus","message":"makes sense but bad for performance and typical use cases","date":"2015-02-25T20:25:08.037Z","type":"message"}
{"nick":"Domenic","message":"Why?","date":"2015-02-25T20:25:23.486Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: for example, sock1.write(buf); sock2.write(buf); <-- can no longer do that","date":"2015-02-25T20:25:31.483Z","type":"message"}
{"nick":"Domenic","message":"hmm","date":"2015-02-25T20:25:38.465Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: what if I want to pre-load a file in memory and use the cached contents to serve a static file","date":"2015-02-25T20:25:48.986Z","type":"message"}
{"nick":"Domenic","message":"good point","date":"2015-02-25T20:26:00.133Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: \"read only\" buffers would be much more useful in that regard","date":"2015-02-25T20:26:01.556Z","type":"message"}
{"nick":"Domenic","message":"ugggh","date":"2015-02-25T20:26:06.654Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: there's an old issue in node about it, but there was no v8 infrastructure (at least, not at the time)","date":"2015-02-25T20:26:23.802Z","type":"message"}
{"nick":"piscisaureus","message":"... to support it","date":"2015-02-25T20:26:34.456Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: I think not supporting readInto initially is okay actually","date":"2015-02-25T20:27:04.567Z","type":"message"}
{"nick":"piscisaureus","message":"It's more like a \"nice to have\" but you can leave it out until people start clamoring for it","date":"2015-02-25T20:27:38.079Z","type":"message"}
{"nick":"warehouse13","date":"2015-02-25T20:27:47.020Z","type":"join"}
{"nick":"Domenic","message":"so you just support read(desiredNumberOfBytes)?","date":"2015-02-25T20:28:17.988Z","type":"message"}
{"nick":"piscisaureus","message":"yeah, that works right?","date":"2015-02-25T20:28:35.250Z","type":"message"}
{"nick":"reqshark","reason":"Quit: Be back later ...","date":"2015-02-25T20:28:42.678Z","type":"quit"}
{"nick":"Domenic","message":"yeah","date":"2015-02-25T20:29:42.152Z","type":"message"}
{"nick":"pgicxplzs","reason":"Ping timeout: 256 seconds","date":"2015-02-25T20:29:50.261Z","type":"quit"}
{"nick":"Domenic","message":"why did I want readInto again?","date":"2015-02-25T20:29:54.993Z","type":"message"}
{"nick":"Domenic","message":"oh i know","date":"2015-02-25T20:30:43.649Z","type":"message"}
{"nick":"Domenic","message":"i have these three use cases that I am trying to use to test various designs: https://gist.github.com/domenic/e251e37a300e51c5321f","date":"2015-02-25T20:31:10.356Z","type":"message"}
{"nick":"Domenic","message":"the first is about consolidating an entire file into a single array buffer","date":"2015-02-25T20:31:32.091Z","type":"message"}
{"nick":"Domenic","message":"which i guess could be done with read(n)","date":"2015-02-25T20:31:39.926Z","type":"message"}
{"nick":"Domenic","message":"the second two are about re-using arraybuffers","date":"2015-02-25T20:31:45.681Z","type":"message"}
{"nick":"thlorenz_","date":"2015-02-25T20:37:26.249Z","type":"join"}
{"nick":"piscisaureus","message":"Domenic: I think node should probably move to document it's low-level API (although I'd want it to be event-free which is currently not the case)","date":"2015-02-25T20:38:04.279Z","type":"message"}
{"nick":"piscisaureus","message":"which is close to posix","date":"2015-02-25T20:38:13.417Z","type":"message"}
{"nick":"lance|afk","new_nick":"lanceball","date":"2015-02-25T20:38:15.613Z","type":"nick"}
{"nick":"piscisaureus","message":"Domenic: indutny  will be unhappy if we don't have readInto support because his recent TLSWrap optimizations rely on it","date":"2015-02-25T20:40:05.809Z","type":"message"}
{"nick":"Domenic","message":"yeah it seems important","date":"2015-02-25T20:40:20.961Z","type":"message"}
{"nick":"saghul_","date":"2015-02-25T20:40:26.274Z","type":"join"}
{"nick":"Domenic","message":"I think I have a fix but it's pretty ridiculous","date":"2015-02-25T20:40:43.339Z","type":"message"}
{"nick":"Domenic","message":"It relies on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer","date":"2015-02-25T20:40:51.313Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: the biggest issue with observable buffer changes is that it gives vm implementors a hard time","date":"2015-02-25T20:41:06.161Z","type":"message"}
{"nick":"piscisaureus","message":"e.g.","date":"2015-02-25T20:41:08.843Z","type":"message"}
{"nick":"piscisaureus","message":"while (buf[0] == 42) { ... }","date":"2015-02-25T20:41:16.810Z","type":"message"}
{"nick":"Domenic","message":"you basically just keep transferring the ArrayBuffer's backing memory to a new ArrayBuffer all the time.","date":"2015-02-25T20:41:21.858Z","type":"message"}
{"nick":"Domenic","message":"Oh jeez","date":"2015-02-25T20:41:24.624Z","type":"message"}
{"nick":"piscisaureus","message":"they can optimize this assuming that buf[0] doesn't change","date":"2015-02-25T20:41:25.909Z","type":"message"}
{"nick":"piscisaureus","message":"(in c this problem is solved by making the behavior in this case \"undefined\". To actually observe it, buf[] would need to be defined as volatile)","date":"2015-02-25T20:42:18.879Z","type":"message"}
{"nick":"thlorenz_","reason":"Ping timeout: 272 seconds","date":"2015-02-25T20:42:30.242Z","type":"quit"}
{"nick":"piscisaureus","message":"Domenic: yes, changing the backing memory is probably the cleanest","date":"2015-02-25T20:43:17.191Z","type":"message"}
{"nick":"Domenic","message":"The user-facing API is pretty silly, I am writing up a few samples now.","date":"2015-02-25T20:43:44.662Z","type":"message"}
{"nick":"avalanche123","date":"2015-02-25T20:47:43.403Z","type":"join"}
{"nick":"jgi","date":"2015-02-25T20:48:03.291Z","type":"join"}
{"nick":"indutny","message":"Domenic: why here?","date":"2015-02-25T20:48:42.843Z","type":"message"}
{"nick":"Domenic","message":"indutny: why am I asking these questions in #libuv, or...?","date":"2015-02-25T20:49:02.391Z","type":"message"}
{"nick":"indutny","message":":)","date":"2015-02-25T20:49:05.103Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2015-02-25T20:49:07.535Z","type":"message"}
{"nick":"indutny","message":"I like concept of readInto","date":"2015-02-25T20:49:25.304Z","type":"message"}
{"nick":"Domenic","message":"they are kinda libuv-level I felt.","date":"2015-02-25T20:49:26.863Z","type":"message"}
{"nick":"indutny","message":"but","date":"2015-02-25T20:49:53.439Z","type":"message"}
{"nick":"indutny","message":"there is a problem","date":"2015-02-25T20:49:55.256Z","type":"message"}
{"nick":"indutny","message":"considering that it is async","date":"2015-02-25T20:50:03.188Z","type":"message"}
{"nick":"indutny","message":"it requires allocation of the buffer ahead of time","date":"2015-02-25T20:50:09.967Z","type":"message"}
{"nick":"piscisaureus","message":"indutny: what does?","date":"2015-02-25T20:50:17.349Z","type":"message"}
{"nick":"indutny","message":"readInto","date":"2015-02-25T20:50:21.872Z","type":"message"}
{"nick":"Domenic","message":"what's the alternative","date":"2015-02-25T20:50:34.809Z","type":"message"}
{"nick":"indutny","message":"alloc/read :)","date":"2015-02-25T20:50:49.704Z","type":"message"}
{"nick":"indutny","message":"as libuv does","date":"2015-02-25T20:50:51.449Z","type":"message"}
{"nick":"indutny","message":"alloc is called right before the read","date":"2015-02-25T20:50:59.354Z","type":"message"}
{"nick":"piscisaureus","message":"indutny: libuv should really shed this model :(","date":"2015-02-25T20:51:00.265Z","type":"message"}
{"nick":"indutny","message":"piscisaureus: you have better idea?","date":"2015-02-25T20:51:07.894Z","type":"message"}
{"nick":"piscisaureus","message":"indutny: we should just support poll() and then try_read()","date":"2015-02-25T20:51:24.467Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2015-02-25T20:51:30.751Z","type":"message"}
{"nick":"indutny","message":"this would work too","date":"2015-02-25T20:51:33.810Z","type":"message"}
{"nick":"piscisaureus","message":"indutny: and fall back to pre-alloc buffers only if there's no other option (for files and windows)","date":"2015-02-25T20:51:44.529Z","type":"message"}
{"nick":"Domenic","message":"poll()/try_read() is one underlying source model. but files is the other interesting one.","date":"2015-02-25T20:51:54.784Z","type":"message"}
{"nick":"piscisaureus","message":"indutny: in libuv the alloc_cb sometimes doesn't get called just before the read callback (but just *after* read_start, instead)","date":"2015-02-25T20:52:46.805Z","type":"message"}
{"nick":"piscisaureus","message":"and synchronous even","date":"2015-02-25T20:52:50.294Z","type":"message"}
{"nick":"piscisaureus","message":"it's a weird api","date":"2015-02-25T20:53:06.657Z","type":"message"}
{"nick":"indutny","message":"but it covers the differences between platforms","date":"2015-02-25T20:54:02.435Z","type":"message"}
{"nick":"indutny","message":"and that's good","date":"2015-02-25T20:54:04.098Z","type":"message"}
{"nick":"piscisaureus","message":"yes, it did the job","date":"2015-02-25T20:54:10.475Z","type":"message"}
{"nick":"piscisaureus","message":"indutny: we should really move toward the dual async_read and poll/try_read internally though","date":"2015-02-25T20:54:41.774Z","type":"message"}
{"nick":"piscisaureus","message":"just because it's consistent and easy to reason about","date":"2015-02-25T20:54:56.756Z","type":"message"}
{"nick":"indutny","message":"idk","date":"2015-02-25T20:55:04.679Z","type":"message"}
{"nick":"piscisaureus","message":"and if I'm not mistaken, equally performant","date":"2015-02-25T20:55:08.749Z","type":"message"}
{"nick":"indutny","message":"I don't feel like we need it","date":"2015-02-25T20:55:11.661Z","type":"message"}
{"nick":"indutny","message":"I like the idea of making read a request","date":"2015-02-25T20:55:21.566Z","type":"message"}
{"nick":"indutny","message":"but separating one into three","date":"2015-02-25T20:55:29.396Z","type":"message"}
{"nick":"indutny","message":"or two into three","date":"2015-02-25T20:55:34.593Z","type":"message"}
{"nick":"piscisaureus","message":"well we already support poll(), it's just a separate api now","date":"2015-02-25T20:55:58.714Z","type":"message"}
{"nick":"Domenic","message":"so our status in streams is right now we went all in on poll()/try_read() basically. and piscisaureus convinced me that fails badly for files. so now I need to fix it.","date":"2015-02-25T20:56:13.635Z","type":"message"}
{"nick":"indutny","message":"haha","date":"2015-02-25T20:56:31.245Z","type":"message"}
{"nick":"piscisaureus","message":"urr","date":"2015-02-25T20:56:33.947Z","type":"message"}
{"nick":"indutny","message":"alloc/read","date":"2015-02-25T20:56:34.152Z","type":"message"}
{"nick":"piscisaureus","message":":)","date":"2015-02-25T20:56:34.808Z","type":"message"}
{"nick":"Domenic","message":"I was hopeful we could just end up with async read. Why do you say we should do async read + poll()/try_read()","date":"2015-02-25T20:56:36.218Z","type":"message"}
{"nick":"indutny","message":"really )","date":"2015-02-25T20:56:36.989Z","type":"message"}
{"nick":"piscisaureus","message":"I think async_read is perfect for js-land","date":"2015-02-25T20:56:47.230Z","type":"message"}
{"nick":"indutny","message":"seriously","date":"2015-02-25T20:56:50.770Z","type":"message"}
{"nick":"indutny","message":"alloc and read","date":"2015-02-25T20:56:54.203Z","type":"message"}
{"nick":"piscisaureus","message":"it's just c-land where the issue arises","date":"2015-02-25T20:56:57.214Z","type":"message"}
{"nick":"indutny","message":"or","date":"2015-02-25T20:56:59.797Z","type":"message"}
{"nick":"indutny","message":"beforeRead","date":"2015-02-25T20:57:01.059Z","type":"message"}
{"nick":"indutny","message":"afterRead","date":"2015-02-25T20:57:02.271Z","type":"message"}
{"nick":"indutny","message":"where beforeRead supplies the data","date":"2015-02-25T20:57:10.140Z","type":"message"}
{"nick":"Domenic","message":"alloc + poll + try_read is also in the running yeah","date":"2015-02-25T20:57:16.782Z","type":"message"}
{"nick":"indutny","message":"and afterRead takes the dat","date":"2015-02-25T20:57:16.987Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: so I stick to my opinion that all you need in javascript land is async read","date":"2015-02-25T20:57:29.142Z","type":"message"}
{"nick":"Domenic","message":"but partially just because it's a smaller delta from our existing model, which is not a good bias to be making decisions on :P","date":"2015-02-25T20:57:32.778Z","type":"message"}
{"nick":"indutny","message":"well","date":"2015-02-25T20:57:43.137Z","type":"message"}
{"nick":"Rolinh","date":"2015-02-25T20:57:49.864Z","type":"join"}
{"nick":"indutny","message":"gosh, I can't really negotiate :)","date":"2015-02-25T20:57:59.255Z","type":"message"}
{"nick":"indutny","message":"see ya, going to return back to reading","date":"2015-02-25T20:58:03.833Z","type":"message"}
{"nick":"indutny","action":"&","date":"2015-02-25T20:58:08.963Z","type":"action"}
{"nick":"Domenic","message":"nooo your insight is valuable","date":"2015-02-25T20:58:11.971Z","type":"message"}
{"nick":"Domenic","message":"ok then piscisaureus why is async read problematic in C land but not in JS land?","date":"2015-02-25T20:58:24.052Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: because \"buffer ownership\" is not an issue in javascript.","date":"2015-02-25T20:58:44.646Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: in c async read would be fine too, if libuv was allowed to just malloc() read buffers and make the user responsible for freeing the buffer","date":"2015-02-25T20:59:11.061Z","type":"message"}
{"nick":"piscisaureus","message":"but this upsets real c hackers","date":"2015-02-25T20:59:25.572Z","type":"message"}
{"nick":"indutny","message":"hahah","date":"2015-02-25T20:59:45.656Z","type":"message"}
{"nick":"indutny","action":"fg","date":"2015-02-25T20:59:48.822Z","type":"action"}
{"nick":"indutny","message":"piscisaureus: noooo","date":"2015-02-25T20:59:52.352Z","type":"message"}
{"nick":"indutny","message":"allocating is slow","date":"2015-02-25T20:59:59.696Z","type":"message"}
{"nick":"piscisaureus","message":"ah c'mon :)","date":"2015-02-25T21:00:15.246Z","type":"message"}
{"nick":"indutny","message":"I'm actually struggling with absence of .readInto in streams3 API in io.js","date":"2015-02-25T21:00:15.849Z","type":"message"}
{"nick":"indutny","message":"piscisaureus: c'mon","date":"2015-02-25T21:00:21.226Z","type":"message"}
{"nick":"indutny","message":"piscisaureus: we can't compete with C/C++ right now","date":"2015-02-25T21:00:38.271Z","type":"message"}
{"nick":"indutny","message":"mostly because of it","date":"2015-02-25T21:00:40.745Z","type":"message"}
{"nick":"indutny","message":"I mean in stream parsing and stuff like that","date":"2015-02-25T21:00:50.238Z","type":"message"}
{"nick":"indutny","message":"because it allocates a lot","date":"2015-02-25T21:00:59.049Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic just pointed out that pre-allocating a buffers in javascript is no-go territory because the buffer filling up (in another thread) would be observable in javascript","date":"2015-02-25T21:01:31.543Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2015-02-25T21:01:43.455Z","type":"message"}
{"nick":"Domenic","message":"i am contemplating fixing this by neutering then un-neutering hte array buffer","date":"2015-02-25T21:01:47.264Z","type":"message"}
{"nick":"Domenic","message":"un-neutering doesn't exist right now","date":"2015-02-25T21:01:54.613Z","type":"message"}
{"nick":"Domenic","message":"so we'd have to fix that first","date":"2015-02-25T21:02:00.349Z","type":"message"}
{"nick":"piscisaureus","message":"So not only is alloc/readInto or poll/try_read unnecessary, it even can't be done","date":"2015-02-25T21:02:09.448Z","type":"message"}
{"nick":"Domenic","message":"also if we really wanted this to work it'd have to be neutering per subslice of the arraybuffer","date":"2015-02-25T21:02:20.693Z","type":"message"}
{"nick":"indutny","message":"it would be interesting","date":"2015-02-25T21:02:37.113Z","type":"message"}
{"nick":"piscisaureus","message":"With an async read api, the runtime can decide when to alloc the buffer, and can do it as late as it wants (and use a fast allocator if you think malloc is too slow)","date":"2015-02-25T21:02:40.825Z","type":"message"}
{"nick":"indutny","message":"to create a Interface","date":"2015-02-25T21:02:46.905Z","type":"message"}
{"nick":"indutny","message":"for allocator","date":"2015-02-25T21:02:48.785Z","type":"message"}
{"nick":"indutny","message":"and supply it during read request","date":"2015-02-25T21:02:57.828Z","type":"message"}
{"nick":"indutny","message":"or stream init","date":"2015-02-25T21:03:03.790Z","type":"message"}
{"nick":"indutny","action":"& again","date":"2015-02-25T21:03:17.235Z","type":"action"}
{"nick":"piscisaureus","message":"Domenic: copy-on-write buffers maybe?","date":"2015-02-25T21:04:02.727Z","type":"message"}
{"nick":"Domenic","message":"hmm","date":"2015-02-25T21:04:14.124Z","type":"message"}
{"nick":"Domenic","message":"how does that help exactly?","date":"2015-02-25T21:04:20.559Z","type":"message"}
{"nick":"indutny","message":"it does not help at all","date":"2015-02-25T21:04:30.237Z","type":"message"}
{"nick":"indutny","message":"same as unconditionally allocating","date":"2015-02-25T21:04:36.724Z","type":"message"}
{"nick":"piscisaureus","message":"hmm it doesn't help indeed","date":"2015-02-25T21:05:44.709Z","type":"message"}
{"nick":"piscisaureus","message":"I was thinking about write","date":"2015-02-25T21:05:47.750Z","type":"message"}
{"nick":"piscisaureus","message":"for reading it does nothing","date":"2015-02-25T21:05:51.205Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: maybe  don't support reading into a buffer slice?","date":"2015-02-25T21:06:18.516Z","type":"message"}
{"nick":"piscisaureus","message":"No that would be lame","date":"2015-02-25T21:06:37.578Z","type":"message"}
{"nick":"Domenic","message":"Yeah. Again I have these three use cases I am experimenting with. (If they are bad or there are better ones let me know.) https://gist.github.com/domenic/e251e37a300e51c5321f","date":"2015-02-25T21:07:00.026Z","type":"message"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2015-02-25T21:09:40.666Z","type":"quit"}
{"nick":"piscisaureus","message":"Domenic: the use cases are good. I am not cheering for rbs.ready / pause / resume but that shouldn't be news/","date":"2015-02-25T21:10:43.140Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: do you still live in ny?","date":"2015-02-25T21:11:57.840Z","type":"message"}
{"nick":"indutny","message":"yay","date":"2015-02-25T21:12:00.538Z","type":"message"}
{"nick":"Domenic","message":"piscisaureus: yes","date":"2015-02-25T21:12:12.462Z","type":"message"}
{"nick":"indutny","message":"piscisaureus: going to NY anywhere soon?","date":"2015-02-25T21:12:58.926Z","type":"message"}
{"nick":"Domenic","message":"piscisaureus: rbs.ready + rbs.read/readInto + rbs.setAllocator seems *OK*, although perhaps not great. It might be equally bad to rbs.readInto(sourceBuffer, ...) -> Promise<{ newTransferredBuffer, bytesRead }>. But, the moment you introduce pause + resume you completely lose","date":"2015-02-25T21:13:18.739Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: no I was wondering if you were in the bay area","date":"2015-02-25T21:15:32.995Z","type":"message"}
{"nick":"piscisaureus","message":"I'll have to invent an excuse to go to ny","date":"2015-02-25T21:15:53.287Z","type":"message"}
{"nick":"Domenic","message":"^_^","date":"2015-02-25T21:16:49.203Z","type":"message"}
{"nick":"Domenic","message":"You're in Amsterdam right? Or did you move to SF?","date":"2015-02-25T21:16:59.218Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: so poll/read, readInto and write etc. of course can work for files if we're willing to put up with an extra data copy","date":"2015-02-25T21:17:15.511Z","type":"message"}
{"nick":"Domenic","message":"yeah but i mean what's even the point then :P","date":"2015-02-25T21:17:42.566Z","type":"message"}
{"nick":"piscisaureus","message":"So that could be the browser's solution, trading speed for predictability and saner semantics","date":"2015-02-25T21:17:43.297Z","type":"message"}
{"nick":"piscisaureus","message":"yeah","date":"2015-02-25T21:17:52.897Z","type":"message"}
{"nick":"piscisaureus","message":":)","date":"2015-02-25T21:17:54.752Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: I am in amsterdam still but next week I'll move to sf","date":"2015-02-25T21:18:07.708Z","type":"message"}
{"nick":"Domenic","message":"oh wow ok!","date":"2015-02-25T21:18:14.196Z","type":"message"}
{"nick":"Domenic","message":"congrats?","date":"2015-02-25T21:18:22.633Z","type":"message"}
{"nick":"piscisaureus","message":"?","date":"2015-02-25T21:18:27.218Z","type":"message"}
{"nick":"piscisaureus","message":"who knows :)","date":"2015-02-25T21:18:30.436Z","type":"message"}
{"nick":"piscisaureus","message":"sounds like change of scenery","date":"2015-02-25T21:18:41.679Z","type":"message"}
{"nick":"avalanche123","reason":"Remote host closed the connection","date":"2015-02-25T21:29:25.084Z","type":"quit"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2015-02-25T21:30:42.702Z","type":"quit"}
{"nick":"Domenic","message":"what is the shape of the allocator APIs in libuv/node? Roughly? E.g. what params does the allocator take, what does it return","date":"2015-02-25T21:35:39.040Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: in libuv the user has to implement `uv_buf_t on_alloc(size_t suggested_size)`","date":"2015-02-25T21:36:23.719Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: where uv_buf_t is a { char* pointer, size_t length } tuple","date":"2015-02-25T21:36:38.650Z","type":"message"}
{"nick":"Domenic","message":"interesting","date":"2015-02-25T21:36:46.708Z","type":"message"}
{"nick":"Domenic","message":"what is the interplay between suggested_size and length?","date":"2015-02-25T21:36:53.751Z","type":"message"}
{"nick":"Domenic","message":"length >= suggested_size?","date":"2015-02-25T21:37:01.950Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: so in javascript it's probably `function on_alloc(suggested_size); // must return a Buffer`","date":"2015-02-25T21:37:19.946Z","type":"message"}
{"nick":"stagas","date":"2015-02-25T21:37:32.959Z","type":"join"}
{"nick":"piscisaureus","message":"Domenic: suggested_size is purely up to you. Realistically speaking there may be a minimum length (8 or 16 bytes) sometimes.","date":"2015-02-25T21:38:05.174Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: libuv may not use the entire buffer if it's too bog","date":"2015-02-25T21:38:16.504Z","type":"message"}
{"nick":"thlorenz_","date":"2015-02-25T21:38:17.316Z","type":"join"}
{"nick":"Domenic","message":"what happens if someone requests 1024 bytes and gets back a buffer 256 bytes long","date":"2015-02-25T21:38:30.762Z","type":"message"}
{"nick":"piscisaureus","message":"the typical suggested_size is 65536 for tcp streams","date":"2015-02-25T21:38:37.880Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: then they get back the buffer and libuv indicates it read only 256 bytes","date":"2015-02-25T21:39:01.972Z","type":"message"}
{"nick":"Domenic","message":"ah makes sense","date":"2015-02-25T21:39:20.102Z","type":"message"}
{"nick":"piscisaureus","message":"Domenic: so the idea is that if libuv actually fills up the entire buffer, you probably allocated a too-small buffer","date":"2015-02-25T21:41:02.914Z","type":"message"}
{"nick":"piscisaureus","message":"And when it happens it triggers another alloc and another nonblocking read","date":"2015-02-25T21:41:30.888Z","type":"message"}
{"nick":"Domenic","message":"btw here is the write problem in web specs https://lists.w3.org/Archives/Public/public-html-media/2014Feb/0019.html","date":"2015-02-25T21:42:49.677Z","type":"message"}
{"nick":"thlorenz_","reason":"Ping timeout: 250 seconds","date":"2015-02-25T21:42:51.307Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2015-02-25T21:49:06.883Z","type":"quit"}
{"nick":"piscisaureus","message":"Ok, checking out.","date":"2015-02-25T21:54:44.413Z","type":"message"}
{"nick":"piscisaureus","action":"&","date":"2015-02-25T21:54:46.236Z","type":"action"}
{"nick":"piscisaureus","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2015-02-25T21:54:47.854Z","type":"quit"}
{"nick":"avalanche123","date":"2015-02-25T22:21:07.392Z","type":"join"}
{"nick":"qard","date":"2015-02-25T22:21:51.020Z","type":"join"}
{"nick":"stagas","reason":"Ping timeout: 240 seconds","date":"2015-02-25T22:26:22.944Z","type":"quit"}
{"nick":"mscdex","date":"2015-02-25T22:28:20.667Z","type":"join"}
{"nick":"mscdex","message":"question: why does libuv stop the event loop when a handle becomes inactive (but stil ref'd)?","date":"2015-02-25T22:29:01.766Z","type":"message"}
{"nick":"mscdex","message":"i haven't tested on node v0.12/io.js yet, but i'm seeing that behavior on node 0.10","date":"2015-02-25T22:29:58.549Z","type":"message"}
{"nick":"chris_99","reason":"Remote host closed the connection","date":"2015-02-25T22:30:01.406Z","type":"quit"}
{"nick":"mscdex","message":"i verified that it's still ref'd by checking the handle's flags property","date":"2015-02-25T22:30:32.844Z","type":"message"}
{"nick":"lanceball","new_nick":"lance|afk","date":"2015-02-25T22:48:19.448Z","type":"nick"}
{"nick":"rmg","reason":"Read error: Connection reset by peer","date":"2015-02-25T22:49:53.366Z","type":"quit"}
{"nick":"rmg","date":"2015-02-25T22:50:33.869Z","type":"join"}
{"nick":"AvianFlu","date":"2015-02-25T22:52:26.252Z","type":"join"}
{"nick":"avalanche123","reason":"Remote host closed the connection","date":"2015-02-25T22:53:27.079Z","type":"quit"}
{"nick":"avalanche123","date":"2015-02-25T23:05:35.395Z","type":"join"}
{"nick":"avalanche123","reason":"Remote host closed the connection","date":"2015-02-25T23:06:32.510Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2015-02-25T23:08:29.909Z","type":"quit"}
{"nick":"avalanche123","date":"2015-02-25T23:23:17.371Z","type":"join"}
{"nick":"thlorenz_","date":"2015-02-25T23:27:02.615Z","type":"join"}
{"nick":"thlorenz_","reason":"Ping timeout: 255 seconds","date":"2015-02-25T23:31:46.557Z","type":"quit"}
{"nick":"jgi","message":"robertkowalski: ping","date":"2015-02-25T23:39:51.012Z","type":"message"}
{"nick":"jgi","message":"robertkowalski: I want to take a look at https://github.com/joyent/node-documentation-generator/pull/11 asap, but I’ve been too busy to do that :(","date":"2015-02-25T23:40:12.472Z","type":"message"}
{"nick":"jgi","message":"robertkowalski: sorry for the delay","date":"2015-02-25T23:40:16.964Z","type":"message"}
{"nick":"reqshark","date":"2015-02-25T23:58:41.067Z","type":"join"}
