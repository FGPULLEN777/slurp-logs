{"nick":"ircretary","reason":"Remote host closed the connection","date":"2013-07-09T00:00:01.173Z","type":"quit"}
{"nick":"trevnorris","message":"TooTallNate: ok, back to the first question :)","date":"2013-07-09T00:00:02.367Z","type":"message"}
{"nick":"ircretary","date":"2013-07-09T00:00:11.111Z","type":"join"}
{"nick":"tjfontaine","message":"trevnorris: consider a stream transform that wants to keep a buffer around, but another stream that has decided they're done consuming the data and want to make the world go fast","date":"2013-07-09T00:00:40.562Z","type":"message"}
{"nick":"trevnorris","message":"the use case i'm thinking of is like mozilla or walmart. when using node as a data router. opening the pipe is really helpful.","date":"2013-07-09T00:01:13.573Z","type":"message"}
{"nick":"tjfontaine","message":"right I get how there are people who might want it, but I'm asking about what happens when we export it from core","date":"2013-07-09T00:01:44.553Z","type":"message"}
{"nick":"tjfontaine","message":"also another question","date":"2013-07-09T00:01:52.986Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: oh yeah. there are definitely those cases. but not dis-similar to running .end() on a socket or something that's being used in multiple locations, imo.","date":"2013-07-09T00:01:53.864Z","type":"message"}
{"nick":"tjfontaine","message":"what happens if I .slice() but someone else .dispose()'s the parent?","date":"2013-07-09T00:02:09.525Z","type":"message"}
{"nick":"jmar777","date":"2013-07-09T00:04:11.050Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: you can't dispose the parent, technically, since the parent is a transparent backer that devs shouldn't touch.","date":"2013-07-09T00:07:49.045Z","type":"message"}
{"nick":"trevnorris","message":"well. give me a minute.","date":"2013-07-09T00:08:10.415Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: no, consider someone who gets a buffer slice()'s, then someone else gets the buffer parent and .dispose()'s","date":"2013-07-09T00:08:20.340Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: all Buffer's are backed by a transparent smalloc layer. the .parent now doesn't point to the buffer instance but the smalloc allocation.","date":"2013-07-09T00:09:59.539Z","type":"message"}
{"nick":"trevnorris","message":"let me write up a test.","date":"2013-07-09T00:10:16.472Z","type":"message"}
{"nick":"tjfontaine","message":"var b = new Buffer(1024); var c = b.slice(10; b.dispose();","date":"2013-07-09T00:12:22.405Z","type":"message"}
{"nick":"tjfontaine","message":"c.parent doesn't point to the original?","date":"2013-07-09T00:12:28.440Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037master\u000f * \u00022fc34d7\u0002 : tls_wrap: return Error not throw for missing cert - http://git.io/tg7uog","date":"2013-07-09T00:14:04.840Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: https://gist.github.com/trevnorris/5953621","date":"2013-07-09T00:14:38.079Z","type":"message"}
{"nick":"tjfontaine","message":"that is bizarre, but ok I guess","date":"2013-07-09T00:15:15.209Z","type":"message"}
{"nick":"tjfontaine","message":"what is .parent for c at L:14?","date":"2013-07-09T00:15:33.763Z","type":"message"}
{"nick":"tjfontaine","message":"<Buffer> then?","date":"2013-07-09T00:15:42.509Z","type":"message"}
{"nick":"trevnorris","message":".parent will point to the bare smalloc object.","date":"2013-07-09T00:16:00.901Z","type":"message"}
{"nick":"trevnorris","message":"not an actual buffer instance.","date":"2013-07-09T00:16:06.125Z","type":"message"}
{"nick":"qard","reason":"Quit: Leaving.","date":"2013-07-09T00:17:57.073Z","type":"quit"}
{"nick":"trevnorris","message":"tjfontaine: heading home, but you have me all worried now :P going to check it out tonight","date":"2013-07-09T00:18:23.561Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: hehe","date":"2013-07-09T00:18:43.850Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: these are the scenarios I worry about though, basically people holding pieces that the person .dispose()ing didn't realize","date":"2013-07-09T00:19:15.120Z","type":"message"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-07-09T00:19:49.115Z","type":"quit"}
{"nick":"tjfontaine","message":"trevnorris: and then even if that's relatively safe, what are the semantics of adjust external memory and the underlying free() for all the various slices that can happen","date":"2013-07-09T00:19:53.528Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-master-windows\u0002: #102 \u00034FAILURE\u000f http://jenkins.nodejs.org/job/nodejs-master-windows/102/","date":"2013-07-09T00:21:28.932Z","type":"message"}
{"nick":"piscisaureus_","reason":"Ping timeout: 268 seconds","date":"2013-07-09T00:23:40.116Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #295 \u00037UNSTABLE\u000f smartos-x64 (10/608) linux-x64 (2/608) osx-ia32 (2/608) smartos-ia32 (2/608) linux-ia32 (1/608) osx-x64 (1/608) http://jenkins.nodejs.org/job/nodejs-master/295/","date":"2013-07-09T00:25:58.963Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-07-09T00:31:02.199Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-07-09T00:41:10.328Z","type":"quit"}
{"nick":"kazupon","date":"2013-07-09T00:41:38.072Z","type":"join"}
{"nick":"kazupon","reason":"Read error: Connection reset by peer","date":"2013-07-09T00:41:52.620Z","type":"quit"}
{"nick":"wavded","date":"2013-07-09T00:42:00.152Z","type":"join"}
{"nick":"kazupon","date":"2013-07-09T00:42:17.222Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2013-07-09T00:42:32.106Z","type":"quit"}
{"nick":"qard","date":"2013-07-09T00:42:52.641Z","type":"join"}
{"nick":"kazupon","date":"2013-07-09T00:43:00.962Z","type":"join"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2013-07-09T00:44:01.530Z","type":"quit"}
{"nick":"jmar777","date":"2013-07-09T00:44:32.471Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 256 seconds","date":"2013-07-09T00:47:36.601Z","type":"quit"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-07-09T00:48:19.307Z","type":"quit"}
{"nick":"jmar777","reason":"Ping timeout: 240 seconds","date":"2013-07-09T00:48:46.287Z","type":"quit"}
{"nick":"wavded","reason":"Quit: Nighty night","date":"2013-07-09T00:50:44.026Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-master-windows\u0002: #103 \u00034FAILURE\u000f http://jenkins.nodejs.org/job/nodejs-master-windows/103/","date":"2013-07-09T00:52:05.514Z","type":"message"}
{"nick":"TooTallNate","date":"2013-07-09T00:54:38.977Z","type":"join"}
{"nick":"dap","reason":"Quit: Leaving.","date":"2013-07-09T00:54:42.631Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #296 \u00037UNSTABLE\u000f smartos-x64 (8/608) linux-x64 (1/608) smartos-ia32 (2/608) http://jenkins.nodejs.org/job/nodejs-master/296/","date":"2013-07-09T00:58:25.598Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-07-09T00:59:21.169Z","type":"nick"}
{"nick":"TooTallNate","message":"tjfontaine: ping","date":"2013-07-09T01:08:33.188Z","type":"message"}
{"nick":"timoxley","date":"2013-07-09T01:10:13.074Z","type":"join"}
{"nick":"abraxas","date":"2013-07-09T01:11:07.522Z","type":"join"}
{"nick":"amartens","date":"2013-07-09T01:14:10.013Z","type":"join"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-07-09T01:26:07.341Z","type":"quit"}
{"nick":"wavded","date":"2013-07-09T01:29:44.167Z","type":"join"}
{"nick":"wavded","reason":"Quit: Nighty night","date":"2013-07-09T01:40:45.175Z","type":"quit"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2013-07-09T01:44:47.155Z","type":"quit"}
{"nick":"dannycoates","reason":"Remote host closed the connection","date":"2013-07-09T01:45:14.289Z","type":"quit"}
{"nick":"kazupon","date":"2013-07-09T01:53:35.289Z","type":"join"}
{"nick":"brson","reason":"Ping timeout: 240 seconds","date":"2013-07-09T01:58:16.306Z","type":"quit"}
{"nick":"kazupon","reason":"Ping timeout: 268 seconds","date":"2013-07-09T01:58:38.077Z","type":"quit"}
{"nick":"c4milo","date":"2013-07-09T02:02:50.456Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2013-07-09T02:09:25.683Z","type":"quit"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-07-09T02:09:46.050Z","type":"nick"}
{"nick":"TooTallNate","date":"2013-07-09T02:17:53.981Z","type":"join"}
{"nick":"piscisaureus_","date":"2013-07-09T02:22:38.349Z","type":"join"}
{"nick":"piscisaureus_","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2013-07-09T02:30:34.842Z","type":"quit"}
{"nick":"isaacs","message":"trevnorris: sorry i wasn't around.  yes, land dispose() stuff.  looks good.","date":"2013-07-09T02:31:48.692Z","type":"message"}
{"nick":"isaacs","message":"tjfontaine: doing http-better as a module is kind of turning into a much bigger job than i'd like.","date":"2013-07-09T02:33:05.654Z","type":"message"}
{"nick":"isaacs","message":"this is sorta nuts.","date":"2013-07-09T02:33:13.470Z","type":"message"}
{"nick":"isaacs","message":"http is so interwoven into net and http_parser.","date":"2013-07-09T02:33:21.701Z","type":"message"}
{"nick":"jmar777","date":"2013-07-09T02:34:02.354Z","type":"join"}
{"nick":"isaacs","message":"tjfontaine: we can do a 0.11 tomorrow also, if you want","date":"2013-07-09T02:34:58.140Z","type":"message"}
{"nick":"isaacs","message":"maybe start with that one, since it's a little bit less hazardous if it gets messed up :)","date":"2013-07-09T02:35:19.811Z","type":"message"}
{"nick":"isaacs","message":"tjfontaine: I just forwarded you the GlobalSign cert and instructions.  this has to be done on windows, using MSIE.","date":"2013-07-09T02:39:19.466Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: you're tellin me. I just started w/ the http patch to buffer the headers in cc before sending them off to http_parser","date":"2013-07-09T02:39:34.611Z","type":"message"}
{"nick":"tjfontaine","message":"isaacs: right","date":"2013-07-09T02:40:22.639Z","type":"message"}
{"nick":"tjfontaine","message":"TooTallNate: pong btw","date":"2013-07-09T02:41:50.001Z","type":"message"}
{"nick":"TooTallNate","message":"tjfontaine: haha","date":"2013-07-09T02:41:57.081Z","type":"message"}
{"nick":"TooTallNate","message":"tjfontaine: nvm","date":"2013-07-09T02:41:58.565Z","type":"message"}
{"nick":"tjfontaine","message":"mk","date":"2013-07-09T02:42:00.955Z","type":"message"}
{"nick":"TooTallNate","message":"tjfontaine: i was trying to figure out why a http proxy wasn't speaking ssl to me","date":"2013-07-09T02:42:10.851Z","type":"message"}
{"nick":"TooTallNate","message":"turns out... it just doesn't speak ssl","date":"2013-07-09T02:42:17.401Z","type":"message"}
{"nick":"TooTallNate","message":"hahah","date":"2013-07-09T02:42:18.549Z","type":"message"}
{"nick":"TooTallNate","message":"tjfontaine: finding an open HTTPS proxy is hard :\\","date":"2013-07-09T02:42:26.298Z","type":"message"}
{"nick":"tjfontaine","message":"TooTallNate: that's a GoodThing(tm) :P","date":"2013-07-09T02:42:36.031Z","type":"message"}
{"nick":"TooTallNate","message":"hahaha","date":"2013-07-09T02:42:43.601Z","type":"message"}
{"nick":"TooTallNate","message":"true","date":"2013-07-09T02:42:44.692Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: oh, and i'll assume you meant the dispose bug fix. not the Buffer#dispose() patch :)","date":"2013-07-09T02:42:47.455Z","type":"message"}
{"nick":"tjfontaine","message":"TooTallNate: I say this as an irc administrator :P","date":"2013-07-09T02:42:54.749Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: that's what I assume as well :)","date":"2013-07-09T02:43:02.224Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: oh, right","date":"2013-07-09T02:43:03.144Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: whatever you were gonna land at 4 :)","date":"2013-07-09T02:43:08.367Z","type":"message"}
{"nick":"trevnorris","message":"heh","date":"2013-07-09T02:43:14.898Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine has me all paranoid that I missed something. writing a bunch of tests right now :P","date":"2013-07-09T02:43:57.562Z","type":"message"}
{"nick":"tjfontaine","message":"the better your user module will be :P","date":"2013-07-09T02:44:49.789Z","type":"message"}
{"nick":"trevnorris","message":"lol","date":"2013-07-09T02:45:12.064Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: so, re your comment: https://github.com/joyent/node/pull/5615#discussion_r5075145","date":"2013-07-09T02:45:57.767Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: i guess if someone does http.get({socketPath: '/foo', agent:false}), then, well, it'll break","date":"2013-07-09T02:46:27.713Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: but even then, if you do agent:false, it creates a new agent.","date":"2013-07-09T02:46:44.511Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: i think this is *only* for the legacy (like, pre-0.6) api","date":"2013-07-09T02:46:54.421Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ah, there we go. took a bit but managed to get a double link list corruption.","date":"2013-07-09T02:51:28.335Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: ok, i ask because, from what i can tell, the only \"public api\" for Agent was .addRequest() before and a few events","date":"2013-07-09T02:51:38.857Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: under which scenario?","date":"2013-07-09T02:51:49.870Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: but after that commit, agent.createConnection() is called directly","date":"2013-07-09T02:51:50.186Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: which i kinda don't like :p","date":"2013-07-09T02:51:57.532Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: well... request does some dirty shit;","date":"2013-07-09T02:52:16.092Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: as in, mikeal's request module.","date":"2013-07-09T02:52:21.542Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: this finally did it: https://gist.github.com/trevnorris/5953621","date":"2013-07-09T02:52:32.299Z","type":"message"}
{"nick":"tjfontaine","message":"isaacs: btw, if better-agent as it is too painful, I may just make a ref-agent separately","date":"2013-07-09T02:52:39.055Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: it relies on the agent.addRequest({ createConnection: someRandomFunction })","date":"2013-07-09T02:52:43.716Z","type":"message"}
{"nick":"wavded","date":"2013-07-09T02:53:46.648Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: heh, but I have a way around this ;)","date":"2013-07-09T02:53:47.718Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: oh c and d are initially slices of b","date":"2013-07-09T02:53:54.419Z","type":"message"}
{"nick":"trevnorris","message":"yeah","date":"2013-07-09T02:54:00.310Z","type":"message"}
{"nick":"trevnorris","message":"my first mistake was to forget that small Buffer are already part of a slice.","date":"2013-07-09T02:54:16.283Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2013-07-09T02:54:27.259Z","type":"message"}
{"nick":"trevnorris","message":"and it treats slices differently than their parents","date":"2013-07-09T02:54:28.867Z","type":"message"}
{"nick":"trevnorris","message":"ok. give me a minute to patch this","date":"2013-07-09T02:55:09.135Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: if I create a buffer with a cb, someone slices that and holds that reference, and then I dispose the original buffer, what happens?","date":"2013-07-09T02:55:18.439Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: right now a double linked list corruption if they try to access the slice afterwards. but have an idea.","date":"2013-07-09T02:56:13.176Z","type":"message"}
{"nick":"loladiro","date":"2013-07-09T02:56:33.186Z","type":"join"}
{"nick":"trevnorris","message":"there are two things I can do. either when the parent is disposed zero out all the slices so they're all zero length","date":"2013-07-09T02:56:55.304Z","type":"message"}
{"nick":"trevnorris","message":"or I can continue holding onto the memory until all slices are gone then free the memory","date":"2013-07-09T02:57:30.940Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: what would be your preference?","date":"2013-07-09T02:57:36.385Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: that's fine","date":"2013-07-09T02:57:42.907Z","type":"message"}
{"nick":"tjfontaine","message":"the latter","date":"2013-07-09T02:57:43.538Z","type":"message"}
{"nick":"trevnorris","message":"cool. that's the easier solution.","date":"2013-07-09T02:57:52.510Z","type":"message"}
{"nick":"tjfontaine","message":"because you're asking to free this memory as soon as I know it's truly free","date":"2013-07-09T02:58:01.830Z","type":"message"}
{"nick":"wavded","reason":"Client Quit","date":"2013-07-09T02:58:02.037Z","type":"quit"}
{"nick":"trevnorris","message":"true. ok cool.","date":"2013-07-09T02:58:30.120Z","type":"message"}
{"nick":"tjfontaine","message":"fwiw, any and all of dispose should work that way","date":"2013-07-09T02:58:31.326Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: but .addRequest() calls .createConnection()","date":"2013-07-09T02:58:45.953Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: \"dear v8, I want to get rid of this memory asafp, but don't screw up anyone trying to use it now\"","date":"2013-07-09T02:59:02.182Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: so usually 'http' module would just call the custom createConnection through .addRequest()","date":"2013-07-09T02:59:02.680Z","type":"message"}
{"nick":"TooTallNate","message":"which is what i want to maintain :)","date":"2013-07-09T02:59:09.145Z","type":"message"}
{"nick":"trevnorris","message":"heh, ok","date":"2013-07-09T02:59:16.012Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, just saw your email about a new API for addons","date":"2013-07-09T02:59:47.779Z","type":"message"}
{"nick":"creationix","message":"I'm here to help where I can, though my background is a scripter, not a C/C++ programmer","date":"2013-07-09T03:00:35.323Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: as I just saw yours :)","date":"2013-07-09T03:00:38.325Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: so SM/JSAPI is more of a guideline of how straight forward I think the API should be, and we're in agreement that it should be C","date":"2013-07-09T03:01:34.746Z","type":"message"}
{"nick":"creationix","message":"have you seen the lua API?","date":"2013-07-09T03:01:47.785Z","type":"message"}
{"nick":"creationix","message":"the languages are close enough in semantics, it could probably be adapted easily","date":"2013-07-09T03:02:01.966Z","type":"message"}
{"nick":"tjfontaine","message":"briefly, I have spent more time with ruby and python binding interfaces","date":"2013-07-09T03:02:04.007Z","type":"message"}
{"nick":"creationix","message":"the one nice *and* annoying thing about the lua API is that you *never* get pointers to objects","date":"2013-07-09T03:02:39.050Z","type":"message"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-07-09T03:02:43.932Z","type":"quit"}
{"nick":"tjfontaine","message":"right","date":"2013-07-09T03:02:44.146Z","type":"message"}
{"nick":"tjfontaine","message":"contrast that to ruby, where everything is a pointer stuck a VALUE, or well until we lied and made it an SMI","date":"2013-07-09T03:03:18.689Z","type":"message"}
{"nick":"tjfontaine","message":"*stuck in a VALUE","date":"2013-07-09T03:03:28.502Z","type":"message"}
{"nick":"creationix","message":"haven't done ruby bindings yet","date":"2013-07-09T03:03:38.442Z","type":"message"}
{"nick":"creationix","message":"but I can imagine","date":"2013-07-09T03:03:40.939Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: now, Buffer.alloc and Buffer.dispose are safe because there's no supported API to create a slice from those.","date":"2013-07-09T03:03:50.344Z","type":"message"}
{"nick":"trevnorris","message":"(just fyi)","date":"2013-07-09T03:03:57.898Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: these are the \"attach to any random object some external memory\" functions?","date":"2013-07-09T03:04:12.398Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: basically. i'm using them to quickly attach memory to functions when I want to share stateful flags between js and cc apis","date":"2013-07-09T03:04:59.281Z","type":"message"}
{"nick":"st_luke","reason":"Remote host closed the connection","date":"2013-07-09T03:05:27.275Z","type":"quit"}
{"nick":"tjfontaine","message":"right, I kinda wish we had a better scope to stick those on, instead of Buffer, they're related up until they're not","date":"2013-07-09T03:05:31.606Z","type":"message"}
{"nick":"trevnorris","message":"like what I did w/ the ticker to determine if there are any more functions in the nextTickQueue","date":"2013-07-09T03:05:34.177Z","type":"message"}
{"nick":"trevnorris","message":"heh yeah.","date":"2013-07-09T03:05:42.359Z","type":"message"}
{"nick":"trevnorris","message":"well, it'd be trivial to throw in a require('smalloc');","date":"2013-07-09T03:05:52.519Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, the one thing I hated when doing sm bindings for libuv was the JS_Class interface","date":"2013-07-09T03:05:53.768Z","type":"message"}
{"nick":"trevnorris","message":"had that at first, but removed it since it was depressingly small.","date":"2013-07-09T03:06:07.420Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: you mean having to fill out the structures?","date":"2013-07-09T03:06:10.320Z","type":"message"}
{"nick":"creationix","message":"right, and the fields you had to fill out","date":"2013-07-09T03:06:18.988Z","type":"message"}
{"nick":"creationix","message":"it wasn't javascript semantics at all","date":"2013-07-09T03:06:24.704Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: right but it's easier to identify for fools like me","date":"2013-07-09T03:06:27.549Z","type":"message"}
{"nick":"creationix","message":"it was something else entirely","date":"2013-07-09T03:06:28.678Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: but that would actually make more sense, since the cc api is smalloc::Alloc","date":"2013-07-09T03:06:28.927Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: tjfontaine so this basically works now https://gist.github.com/TooTallNate/5952254","date":"2013-07-09T03:06:33.639Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ok. i'll throw up a PR to move those over to their own require()","date":"2013-07-09T03:06:52.789Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: well, right they're kinda similar, but if you're not used to writing bindings for things like python/ruby it will seem very foreign indeed","date":"2013-07-09T03:07:08.892Z","type":"message"}
{"nick":"trevnorris","message":"then the entire thing can be labeled as experimental","date":"2013-07-09T03:07:10.511Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: also, you'll see why i want to keep agent.createConnection() an internal API (not called by _http_client.js)... cause I changed the signature to async","date":"2013-07-09T03:07:23.017Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: I would be interested to see what your ideal interface would be, so if you get time reply to the thread with a 10mile overview that'd be great","date":"2013-07-09T03:07:41.085Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: wait, what?","date":"2013-07-09T03:07:48.866Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, any guidelines to what I should support?","date":"2013-07-09T03:07:57.048Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, in the proposed api","date":"2013-07-09T03:08:04.560Z","type":"message"}
{"nick":"trevnorris","message":"creationix: all the thingz ;)","date":"2013-07-09T03:08:14.275Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: thanks, I'm not really that worried about those, more worried about confusion","date":"2013-07-09T03:08:14.619Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: well, I guess what is the api you would see yourself wanting if you were to write a new node module","date":"2013-07-09T03:08:33.522Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, is a lua style interface with stack positions instead of pointers out of the question?","date":"2013-07-09T03:08:35.117Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: in my gist https://gist.github.com/TooTallNate/5952254","date":"2013-07-09T03:08:40.991Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: that implements HTTP and HTTPS ProxyAgent classes","date":"2013-07-09T03:08:53.591Z","type":"message"}
{"nick":"TooTallNate","message":"to use with node-core \"http\" module","date":"2013-07-09T03:08:59.634Z","type":"message"}
{"nick":"TooTallNate","message":"it's pretty cool actually :D","date":"2013-07-09T03:09:04.588Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: not entirely, it's not a direction I was thinking of going, but it's good to think about","date":"2013-07-09T03:09:15.308Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: oh, nice","date":"2013-07-09T03:09:35.500Z","type":"message"}
{"nick":"trevnorris","message":"creationix: honestly I'd start by looking at what is most commonly used (e.g. node-leveldown, node-ffi, etc). imo that would lead to quicker community testing.","date":"2013-07-09T03:09:37.032Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: so those are implemented based off the assumption that agent.addRequest() is the only \"public\" API of Agent","date":"2013-07-09T03:09:42.347Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: i see.","date":"2013-07-09T03:09:50.511Z","type":"message"}
{"nick":"creationix","message":"I remember not hating the V8 api","date":"2013-07-09T03:09:59.369Z","type":"message"}
{"nick":"creationix","message":"other than being C++ it was accecptable to me","date":"2013-07-09T03:10:10.640Z","type":"message"}
{"nick":"creationix","message":"I really liked candor's API though (I helped design that one)","date":"2013-07-09T03:10:20.501Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: with your PR though, you're invoking agent.createConnection()... but frankly it's probably fine since it's in an if branch i don't think i'll hit","date":"2013-07-09T03:10:21.026Z","type":"message"}
{"nick":"tjfontaine","message":"right, it's not that the v8 api is bad, it's just that more often than not C++ can feel like its getting in your way, but a C api will by nature be more verbose","date":"2013-07-09T03:10:36.737Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: i guess i should just pull your code and try my agents :p","date":"2013-07-09T03:10:37.408Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: hm, yeah, that'd be good :)","date":"2013-07-09T03:10:57.327Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: also, i think you can either overwrite the addRequest, or overwrite createConnection and getName","date":"2013-07-09T03:11:25.816Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: for example, if you do a https-over-http tunneling agent, then you need to just override the createConnection stuff","date":"2013-07-09T03:11:45.841Z","type":"message"}
{"nick":"timoxley","date":"2013-07-09T03:13:02.312Z","type":"join"}
{"nick":"TooTallNate","message":"isaacs: well the thing is... https-over-https is harder, since the socket needs to wait for the CONNECT http method response from the proxy server","date":"2013-07-09T03:13:24.338Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: hence me making my agents' .createConnection() fn async","date":"2013-07-09T03:13:40.523Z","type":"message"}
{"nick":"isaacs","message":"right","date":"2013-07-09T03:14:04.777Z","type":"message"}
{"nick":"isaacs","message":"right now, createConnection creates a socket, then you get an onSocket() function called","date":"2013-07-09T03:14:21.713Z","type":"message"}
{"nick":"isaacs","message":"on the ClientRequest object","date":"2013-07-09T03:14:27.731Z","type":"message"}
{"nick":"TooTallNate","message":"and then after that it has to create a TLS socket on top of the TLS socket connection to the proxy server","date":"2013-07-09T03:14:36.012Z","type":"message"}
{"nick":"TooTallNate","action":"inception","date":"2013-07-09T03:14:38.628Z","type":"action"}
{"nick":"isaacs","message":"yep","date":"2013-07-09T03:14:48.243Z","type":"message"}
{"nick":"isaacs","message":":)","date":"2013-07-09T03:14:49.231Z","type":"message"}
{"nick":"TooTallNate","message":"i mean i got it all working not","date":"2013-07-09T03:14:57.309Z","type":"message"}
{"nick":"TooTallNate","message":"now","date":"2013-07-09T03:14:58.047Z","type":"message"}
{"nick":"isaacs","message":"i gotta run, it's dinner time and dexter time","date":"2013-07-09T03:15:00.633Z","type":"message"}
{"nick":"isaacs","message":"you know there are agents that do this already, right?","date":"2013-07-09T03:15:09.797Z","type":"message"}
{"nick":"isaacs","message":"like, in npm, in the whild?","date":"2013-07-09T03:15:14.395Z","type":"message"}
{"nick":"isaacs","message":"wild","date":"2013-07-09T03:15:16.013Z","type":"message"}
{"nick":"TooTallNate","message":"mikeals' were giving me trouble","date":"2013-07-09T03:15:42.040Z","type":"message"}
{"nick":"isaacs","message":"yeah","date":"2013-07-09T03:15:45.232Z","type":"message"}
{"nick":"isaacs","message":"they're... not great.","date":"2013-07-09T03:15:47.627Z","type":"message"}
{"nick":"TooTallNate","message":"isaacs: especially in the https-over-https scenario","date":"2013-07-09T03:15:53.175Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: wanna try with http-better?","date":"2013-07-09T03:15:56.602Z","type":"message"}
{"nick":"isaacs","message":"TooTallNate: see if this api makes it actually better, or worse?","date":"2013-07-09T03:16:07.434Z","type":"message"}
{"nick":"TooTallNate","message":"ya i wanna try it","date":"2013-07-09T03:16:25.615Z","type":"message"}
{"nick":"isaacs","message":"kk","date":"2013-07-09T03:20:04.677Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-07-09T03:21:54.141Z","type":"nick"}
{"nick":"trevnorris","message":"tjfontaine: got it. need to add a test, but was actually a pretty simple fix.","date":"2013-07-09T03:24:55.426Z","type":"message"}
{"nick":"tjfontaine","message":"good","date":"2013-07-09T03:25:00.930Z","type":"message"}
{"nick":"mikeal","date":"2013-07-09T03:26:07.947Z","type":"join"}
{"nick":"mikeal","reason":"Ping timeout: 248 seconds","date":"2013-07-09T03:30:45.784Z","type":"quit"}
{"nick":"trevnorris","message":"isaacs: thoughts? moving Buffer.alloc/dispose to require('smalloc'). then can label the whole thing experimental? for continuity with the cc api since users can call smalloc::Alloc/Dispose","date":"2013-07-09T03:31:10.369Z","type":"message"}
{"nick":"tjfontaine","message":"maybe there's something more descriptive we can use","date":"2013-07-09T03:31:37.501Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: i'd prefer not to add any new public core modules.","date":"2013-07-09T03:31:39.050Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: coolio","date":"2013-07-09T03:31:46.742Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: Buffer.alloc/dispose is fine","date":"2013-07-09T03:31:54.023Z","type":"message"}
{"nick":"tjfontaine","message":"really? :/","date":"2013-07-09T03:32:00.110Z","type":"message"}
{"nick":"timoxley","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2013-07-09T03:32:14.388Z","type":"quit"}
{"nick":"isaacs","message":"I guess, in this case, it's unlikely that someone is using \"smalloc\" on npm","date":"2013-07-09T03:32:50.345Z","type":"message"}
{"nick":"isaacs","message":"it sucked breaking tjholowaychuk's cluster module","date":"2013-07-09T03:33:06.007Z","type":"message"}
{"nick":"tjfontaine","message":"indeed","date":"2013-07-09T03:33:13.209Z","type":"message"}
{"nick":"isaacs","message":"we can label a single function or class experimental, though","date":"2013-07-09T03:33:39.232Z","type":"message"}
{"nick":"tjfontaine","message":"I just worry that some people will confuse Buffer.alloc with new Buffer() at some point, also with the other dispose conversation happening I get easily confused :)","date":"2013-07-09T03:34:48.863Z","type":"message"}
{"nick":"isaacs","message":"hm.","date":"2013-07-09T03:37:08.633Z","type":"message"}
{"nick":"isaacs","message":"tjfontaine: that's a good point","date":"2013-07-09T03:37:11.956Z","type":"message"}
{"nick":"isaacs","message":"meh.  i guess.  fuck it.","date":"2013-07-09T03:37:22.922Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: publish something to npm as \"smalloc\"","date":"2013-07-09T03:37:28.953Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: then give us permission to clobber it :)","date":"2013-07-09T03:37:35.887Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, https://gist.github.com/creationix/5954513#file-simple_bindings-c","date":"2013-07-09T03:37:37.583Z","type":"message"}
{"nick":"tjfontaine","message":"the other portion that worries me is that `Buffer.alloc() instanceof Buffer` doesn't work :)","date":"2013-07-09T03:37:38.284Z","type":"message"}
{"nick":"trevnorris","message":"heh. ok","date":"2013-07-09T03:37:43.310Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: thanks","date":"2013-07-09T03:37:45.404Z","type":"message"}
{"nick":"creationix","message":"just a start I'll add more example of more complicated things","date":"2013-07-09T03:37:48.421Z","type":"message"}
{"nick":"creationix","message":"it's got the simplicity of the lua interface without manual stack counting","date":"2013-07-09T03:38:06.516Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: right, that's not that far off from what I'm considering","date":"2013-07-09T03:38:37.020Z","type":"message"}
{"nick":"creationix","message":"great, I would *love* an API this simple","date":"2013-07-09T03:38:50.288Z","type":"message"}
{"nick":"creationix","message":"data oriented","date":"2013-07-09T03:38:54.556Z","type":"message"}
{"nick":"creationix","message":"create things, set properties, return things, etc..","date":"2013-07-09T03:39:04.132Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: my opinion is that this is what 90% of C modules will do","date":"2013-07-09T03:39:12.997Z","type":"message"}
{"nick":"tjfontaine","message":"they'll just be interfaces to underlying native libraries","date":"2013-07-09T03:39:27.103Z","type":"message"}
{"nick":"creationix","message":"my only worry is we'll be slow for never using the class constructs provided by the vms","date":"2013-07-09T03:40:06.362Z","type":"message"}
{"nick":"creationix","message":"but I really don't want to expose class style interfaces","date":"2013-07-09T03:40:15.986Z","type":"message"}
{"nick":"creationix","message":"js doesn't have classes","date":"2013-07-09T03:40:19.080Z","type":"message"}
{"nick":"creationix","message":"it has functions, objects, properties, etc","date":"2013-07-09T03:40:35.831Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: what will go hand in hand is a conversation abotu \"best practices\"","date":"2013-07-09T03:40:36.510Z","type":"message"}
{"nick":"creationix","message":"my goal is to have a C API that mimics what you would do in JS","date":"2013-07-09T03:41:04.957Z","type":"message"}
{"nick":"timoxley","date":"2013-07-09T03:41:06.507Z","type":"join"}
{"nick":"tjfontaine","message":"creationix: this part of the \"deal with primitives\" conversation, where people need to stop trying to do so much heavy lifting on the native side, and let the jit do it","date":"2013-07-09T03:41:06.966Z","type":"message"}
{"nick":"creationix","message":"so our JS best practices can be reused","date":"2013-07-09T03:41:11.217Z","type":"message"}
{"nick":"creationix","message":"that too","date":"2013-07-09T03:41:29.621Z","type":"message"}
{"nick":"creationix","message":"also once core ports to the neutral API, dropping sm is as simple as writing a shim from neutral api to sm native apis","date":"2013-07-09T03:41:57.767Z","type":"message"}
{"nick":"tjfontaine","message":"people shouldn't be passing objects with properties to native, they should be breaking those out into primitive arguments, have a js shim in front that does nice things","date":"2013-07-09T03:41:59.593Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: ya, but that's definitely a stretch goal :P","date":"2013-07-09T03:42:12.063Z","type":"message"}
{"nick":"creationix","message":"right, later on","date":"2013-07-09T03:42:18.352Z","type":"message"}
{"nick":"creationix","message":"but we do need this shim for at least v8 for now right?","date":"2013-07-09T03:42:36.391Z","type":"message"}
{"nick":"tjfontaine","message":"yup, something module authors can target that we can guarantee will work from release to release","date":"2013-07-09T03:42:53.747Z","type":"message"}
{"nick":"creationix","message":"and we can release the shim as a library you use so your library can run on existing node versions","date":"2013-07-09T03:43:18.885Z","type":"message"}
{"nick":"creationix","message":"include the shim instead of v8's headers directly","date":"2013-07-09T03:43:29.650Z","type":"message"}
{"nick":"tjfontaine","message":"yup, back to v0.8 is my plan","date":"2013-07-09T03:43:34.928Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: yup, you've got the idea","date":"2013-07-09T03:43:41.607Z","type":"message"}
{"nick":"creationix","message":":)","date":"2013-07-09T03:43:44.719Z","type":"message"}
{"nick":"tjfontaine","message":"solves the problem of \"which v8.h am I actually getting right now\"","date":"2013-07-09T03:44:21.836Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: https://npmjs.org/package/smalloc","date":"2013-07-09T03:48:16.165Z","type":"message"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-07-09T03:51:11.298Z","type":"quit"}
{"nick":"kazupon","date":"2013-07-09T03:53:28.369Z","type":"join"}
{"nick":"mikeal","date":"2013-07-09T03:56:59.616Z","type":"join"}
{"nick":"creationix","message":"tjfontaine, maybe \"this\" could be position 0 in the virtual space?","date":"2013-07-09T03:58:57.466Z","type":"message"}
{"nick":"creationix","message":"1-n would be passed in args","date":"2013-07-09T03:59:03.922Z","type":"message"}
{"nick":"creationix","message":"-1 - -n would be dynamic space for new values","date":"2013-07-09T03:59:24.181Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 246 seconds","date":"2013-07-09T03:59:36.058Z","type":"quit"}
{"nick":"mikeal","reason":"Ping timeout: 264 seconds","date":"2013-07-09T04:01:43.460Z","type":"quit"}
{"nick":"kazupon","date":"2013-07-09T04:02:32.865Z","type":"join"}
{"nick":"trevnorris","message":"quick review anyone? https://github.com/trevnorris/node/compare/slice-first-parent","date":"2013-07-09T04:03:36.832Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2013-07-09T04:09:08.521Z","type":"quit"}
{"nick":"creationix","message":"tj, remind me how forgiving C is with mixing number types","date":"2013-07-09T04:10:45.298Z","type":"message"}
{"nick":"creationix","message":"suppose I have a function that returns \"int\" and I set it to a variable declared as \"char\"","date":"2013-07-09T04:11:04.879Z","type":"message"}
{"nick":"creationix","message":"is that bad?","date":"2013-07-09T04:11:13.366Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, ^","date":"2013-07-09T04:11:19.216Z","type":"message"}
{"nick":"timoxley","date":"2013-07-09T04:12:35.194Z","type":"join"}
{"nick":"tjfontaine","message":"heh, that is probably not something you want to do regularly","date":"2013-07-09T04:16:40.400Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: if you don't cast it, it will fail to compile, if you cast it you'll truncate and only get the size of the destination type","date":"2013-07-09T04:18:18.092Z","type":"message"}
{"nick":"tjfontaine","message":"unless of course you're going to a larger type","date":"2013-07-09T04:18:34.985Z","type":"message"}
{"nick":"trevnorris","message":"creationix: you'll have to answer to ben for all of that. and he's pretty specific :)","date":"2013-07-09T04:18:40.241Z","type":"message"}
{"nick":"creationix","message":"I'm just wondering how many number types the API needs to be able to return","date":"2013-07-09T04:18:42.205Z","type":"message"}
{"nick":"creationix","message":"I'm thinking at least int and double","date":"2013-07-09T04:18:49.273Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: [u]int[32|64] and double","date":"2013-07-09T04:19:08.320Z","type":"message"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2013-07-09T04:19:09.233Z","type":"quit"}
{"nick":"creationix","message":"even though js can't hold 64 bit types?","date":"2013-07-09T04:19:24.634Z","type":"message"}
{"nick":"jmar777","date":"2013-07-09T04:19:39.939Z","type":"join"}
{"nick":"tjfontaine","message":"ya, because you can get 53 bits from your number","date":"2013-07-09T04:19:40.744Z","type":"message"}
{"nick":"creationix","message":"fair enough","date":"2013-07-09T04:20:00.929Z","type":"message"}
{"nick":"creationix","message":"is boolean a common type in C?","date":"2013-07-09T04:20:56.935Z","type":"message"}
{"nick":"creationix","message":"(I know it's really just the int 0 or 1","date":"2013-07-09T04:21:07.521Z","type":"message"}
{"nick":"tjfontaine","message":"depends on the version of C","date":"2013-07-09T04:21:08.763Z","type":"message"}
{"nick":"tjfontaine","message":"C99 has a bool","date":"2013-07-09T04:21:15.512Z","type":"message"}
{"nick":"creationix","message":"I mean, we could just add the typedef if it's not there right?","date":"2013-07-09T04:21:41.327Z","type":"message"}
{"nick":"creationix","message":"or that a really bad practice?","date":"2013-07-09T04:21:45.378Z","type":"message"}
{"nick":"tjfontaine","message":"yup","date":"2013-07-09T04:21:51.900Z","type":"message"}
{"nick":"tjfontaine","message":"well","date":"2013-07-09T04:21:54.353Z","type":"message"}
{"nick":"tjfontaine","message":"we would probably follow convention an typedef NODE_BOOL bool; else typedef NODE_BOOL uchar;","date":"2013-07-09T04:22:32.766Z","type":"message"}
{"nick":"tjfontaine","message":"since it's possible someone could have a bool symbol","date":"2013-07-09T04:22:58.131Z","type":"message"}
{"nick":"creationix","message":"I'll just put \"bool\" in my markdown, but interpret it to mean whatever we'll end up doing","date":"2013-07-09T04:23:20.828Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2013-07-09T04:23:31.319Z","type":"message"}
{"nick":"creationix","message":"now strings","date":"2013-07-09T04:23:53.874Z","type":"message"}
{"nick":"jmar777","reason":"Ping timeout: 264 seconds","date":"2013-07-09T04:24:09.763Z","type":"quit"}
{"nick":"creationix","message":"what should a C api return for strings?","date":"2013-07-09T04:24:11.099Z","type":"message"}
{"nick":"tjfontaine","message":"that will take special care, because of stupid utf8 nonsense","date":"2013-07-09T04:24:12.444Z","type":"message"}
{"nick":"trevnorris","message":"creationix: also keep in mind a string can be externalized, which will have different behavior than v8 strings.","date":"2013-07-09T04:25:30.090Z","type":"message"}
{"nick":"creationix","message":"right, strings are complex","date":"2013-07-09T04:25:39.788Z","type":"message"}
{"nick":"creationix","message":"but even ignoring encoding, I can't just return a const char* right?","date":"2013-07-09T04:25:57.870Z","type":"message"}
{"nick":"creationix","message":"because the compiler doesn't know how large the string will be","date":"2013-07-09T04:26:10.766Z","type":"message"}
{"nick":"tjfontaine","message":"const char* is more than likely the right answer","date":"2013-07-09T04:26:11.628Z","type":"message"}
{"nick":"tjfontaine","message":"for at least the common usages","date":"2013-07-09T04:26:20.546Z","type":"message"}
{"nick":"creationix","message":"forgive me for being a C noob.","date":"2013-07-09T04:26:38.544Z","type":"message"}
{"nick":"creationix","message":"how does that even work?","date":"2013-07-09T04:26:42.323Z","type":"message"}
{"nick":"trevnorris","message":"that's how we currently handle external strings. but you also need to know the encoding.","date":"2013-07-09T04:26:53.460Z","type":"message"}
{"nick":"creationix","message":"I would love to return const char* if possible","date":"2013-07-09T04:26:53.666Z","type":"message"}
{"nick":"trevnorris","message":"just having the const char* doesn't help you a ton","date":"2013-07-09T04:27:03.255Z","type":"message"}
{"nick":"trevnorris","message":"strings can be one byte, two byte or utf8","date":"2013-07-09T04:27:29.858Z","type":"message"}
{"nick":"creationix","message":"right","date":"2013-07-09T04:27:39.716Z","type":"message"}
{"nick":"creationix","message":"I could have variants of the function for that though","date":"2013-07-09T04:27:47.848Z","type":"message"}
{"nick":"mikeal","date":"2013-07-09T04:27:58.976Z","type":"join"}
{"nick":"trevnorris","message":"actually, what v8 does is return a const char* for utf8, const uint8_t* for one byte and const uint16_t* for two byte","date":"2013-07-09T04:28:20.094Z","type":"message"}
{"nick":"tjfontaine","message":"the SM mechanism is fine, basically it normalizes internally to uchar16, but offers normal char* ","date":"2013-07-09T04:28:59.882Z","type":"message"}
{"nick":"tjfontaine","message":"https://developer.mozilla.org/en-US/docs/SpiderMonkey/JSAPI_Reference#Strings","date":"2013-07-09T04:29:05.103Z","type":"message"}
{"nick":"creationix","message":"trevnorris, but the caller chooses which encoding to get right?","date":"2013-07-09T04:29:27.972Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2013-07-09T04:29:31.817Z","type":"message"}
{"nick":"tjfontaine","message":"well","date":"2013-07-09T04:29:33.266Z","type":"message"}
{"nick":"tjfontaine","message":"you can always try and get something back that doesn't make sense :)","date":"2013-07-09T04:29:42.173Z","type":"message"}
{"nick":"trevnorris","message":"not if it's an external string","date":"2013-07-09T04:29:45.543Z","type":"message"}
{"nick":"trevnorris","message":"in that case you just ask for the data back.","date":"2013-07-09T04:30:13.600Z","type":"message"}
{"nick":"creationix","message":"do strings know their encoding internally?","date":"2013-07-09T04:30:14.125Z","type":"message"}
{"nick":"creationix","message":"if so, the shim could convert for us","date":"2013-07-09T04:30:24.324Z","type":"message"}
{"nick":"tjfontaine","message":"yes, the shim can do a lot of lifting in these cases","date":"2013-07-09T04:30:35.626Z","type":"message"}
{"nick":"creationix","message":"and we could have an API to ask what the encoding is","date":"2013-07-09T04:30:41.863Z","type":"message"}
{"nick":"creationix","message":"for when we want to optimize and skip re-encoding","date":"2013-07-09T04:30:51.753Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: i'm not sure I like getting rid of explicit one byte (that's how i'm reading the docs). that'll make ascii/binary slower. am I reading them wrong?","date":"2013-07-09T04:31:21.138Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: for these conversations you have to divorce yourself of the knowledge of how v8 works","date":"2013-07-09T04:31:36.391Z","type":"message"}
{"nick":"trevnorris","message":"only as much as I'm aware of it affecting performance","date":"2013-07-09T04:32:10.943Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: there are things we can do in the shim to make it not slow, but in the binding layer a certain amount of overhead is acceptable","date":"2013-07-09T04:32:30.736Z","type":"message"}
{"nick":"mikeal","reason":"Ping timeout: 264 seconds","date":"2013-07-09T04:32:33.742Z","type":"quit"}
{"nick":"tjfontaine","message":"we're not going to make it slow on purpose","date":"2013-07-09T04:32:46.883Z","type":"message"}
{"nick":"creationix","message":"eventually we'd like to port core to the shim without killing performance","date":"2013-07-09T04:33:00.056Z","type":"message"}
{"nick":"creationix","message":"if that's even possible","date":"2013-07-09T04:33:04.751Z","type":"message"}
{"nick":"tjfontaine","message":"but when we're working on designing the shim we can't be obsessed too much with how v8 itself works","date":"2013-07-09T04:33:08.627Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: right","date":"2013-07-09T04:33:15.267Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: seriously? just having v8 is adding a ridiculous amount of overhead.","date":"2013-07-09T04:33:17.550Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: well, everyone has already accepted that by using node","date":"2013-07-09T04:33:36.055Z","type":"message"}
{"nick":"trevnorris","message":"some of us ;)","date":"2013-07-09T04:33:45.951Z","type":"message"}
{"nick":"creationix","message":"I would love a tiny js interpreter","date":"2013-07-09T04:33:46.757Z","type":"message"}
{"nick":"creationix","message":"something along the size of lua","date":"2013-07-09T04:33:52.903Z","type":"message"}
{"nick":"trevnorris","message":"that's what i'm working towards anyways","date":"2013-07-09T04:34:01.712Z","type":"message"}
{"nick":"creationix","message":"that would be really fun for non-CPU intensive servers","date":"2013-07-09T04:34:09.900Z","type":"message"}
{"nick":"trevnorris","message":"i'm fairly certain http could be delivering at least twice the requests as we're now giving it.","date":"2013-07-09T04:34:27.278Z","type":"message"}
{"nick":"creationix","message":"I've gotten over 120,000 request per second with manual bindings to libuv and lua and hand-coded pipelining","date":"2013-07-09T04:34:53.603Z","type":"message"}
{"nick":"trevnorris","message":"when perf is showing 85% cpu is spent in v8, something is wrong. even if that's the tech we're using.","date":"2013-07-09T04:34:59.084Z","type":"message"}
{"nick":"creationix","message":"Skipping all the js sugar in node's http layer could speed things up a lot","date":"2013-07-09T04:35:07.743Z","type":"message"}
{"nick":"trevnorris","message":"creationix: yeah. and i've reached 250k in straight c to libuv. but i'm maxing out at 20k in node.","date":"2013-07-09T04:35:25.384Z","type":"message"}
{"nick":"creationix","message":"I do think v8 is faster than luajit (at script execution)","date":"2013-07-09T04:35:47.669Z","type":"message"}
{"nick":"creationix","message":"but yeah, the js overhead is real","date":"2013-07-09T04:35:54.062Z","type":"message"}
{"nick":"creationix","message":"not sure what we can do there without breaking the public API though","date":"2013-07-09T04:36:21.407Z","type":"message"}
{"nick":"trevnorris","message":"actually, the painful part is working with js objects in cc. that's what's adding much of the overhead.","date":"2013-07-09T04:36:24.541Z","type":"message"}
{"nick":"creationix","message":"I made luvit 20x faster by changing the API","date":"2013-07-09T04:36:28.170Z","type":"message"}
{"nick":"trevnorris","message":"every request we have to create a new Persistent and tie in a bunch of properties, etc.","date":"2013-07-09T04:36:47.939Z","type":"message"}
{"nick":"creationix","message":"trevnorris, the shim won't be able to help much then because it will still need to translate to V8 calls right?","date":"2013-07-09T04:37:08.646Z","type":"message"}
{"nick":"trevnorris","message":"creationix: this work is below the shim. the type of stuff I've been doing for buffers.","date":"2013-07-09T04:37:40.078Z","type":"message"}
{"nick":"tjfontaine","message":"the problem is core violates rule number of my \"best practices\" it doesn't deal only in primitives :P","date":"2013-07-09T04:37:44.819Z","type":"message"}
{"nick":"tjfontaine","message":"*rule number 1","date":"2013-07-09T04:37:53.307Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: you think that'd be possible? i'm not completely sure how it could be.","date":"2013-07-09T04:38:21.981Z","type":"message"}
{"nick":"creationix","message":"well, take http header parsing, for example","date":"2013-07-09T04:38:43.294Z","type":"message"}
{"nick":"creationix","message":"you either build up an object in C or call js for every key and value","date":"2013-07-09T04:38:53.368Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: I think we can try harder, but I'm not going to say it's always 100% achievable","date":"2013-07-09T04:38:53.582Z","type":"message"}
{"nick":"trevnorris","message":"i have. and am working on it right now :P","date":"2013-07-09T04:38:53.582Z","type":"message"}
{"nick":"creationix","message":"(or write the parser in js :)","date":"2013-07-09T04:39:03.200Z","type":"message"}
{"nick":"tjfontaine","action":"votes for parser in js","date":"2013-07-09T04:39:08.551Z","type":"action"}
{"nick":"trevnorris","message":"tjfontaine: well. I like the idea fwiw.","date":"2013-07-09T04:39:28.164Z","type":"message"}
{"nick":"tjfontaine","message":"which?","date":"2013-07-09T04:39:33.507Z","type":"message"}
{"nick":"trevnorris","message":"keeping arguments as \"primitive\" as possible.","date":"2013-07-09T04:39:50.751Z","type":"message"}
{"nick":"trevnorris","message":"all the object munging kills us.","date":"2013-07-09T04:39:56.987Z","type":"message"}
{"nick":"tjfontaine","message":"right, the only time we should be breaking that are for weak handles","date":"2013-07-09T04:40:10.712Z","type":"message"}
{"nick":"tjfontaine","message":"which admittedly is painful and unavoidable","date":"2013-07-09T04:40:22.524Z","type":"message"}
{"nick":"trevnorris","message":"but as for the http_parser i'm actually taking it in the completely opposite direction..","date":"2013-07-09T04:40:35.058Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2013-07-09T04:40:50.373Z","type":"quit"}
{"nick":"trevnorris","message":"i'm replacing the DoRead() callback to cache the incoming data internally until all the headers are received then passing them directly to http_parser from cc.","date":"2013-07-09T04:41:12.884Z","type":"message"}
{"nick":"trevnorris","message":"basically, stay in cc until we can reach js. then when we reach js, stay there.","date":"2013-07-09T04:41:33.876Z","type":"message"}
{"nick":"tjfontaine","message":"yes, that will help, I don't think anyone disagrees with that :0","date":"2013-07-09T04:41:54.179Z","type":"message"}
{"nick":"tjfontaine","message":"er :)","date":"2013-07-09T04:41:55.634Z","type":"message"}
{"nick":"trevnorris","message":":0)","date":"2013-07-09T04:42:07.745Z","type":"message"}
{"nick":"creationix","message":"so many functions, C sure is verbose","date":"2013-07-09T04:42:32.795Z","type":"message"}
{"nick":"creationix","message":"but I'm really liking this API, I hope we can do something like it","date":"2013-07-09T04:42:42.380Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: quick review? https://github.com/trevnorris/node/compare/slice-first-parent","date":"2013-07-09T04:43:06.171Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: it looks basically right, but I haven't looked at in context yet","date":"2013-07-09T04:43:50.422Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: I'm hoping that we can make it slightly less verbose with some convenience macros, and a good example pattern for people to follow","date":"2013-07-09T04:44:32.081Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: it's about as complicated as it looks. just making sure there's never a buf.parent.parent. (etc) case.","date":"2013-07-09T04:44:42.959Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: do we cache the location of a slice in relation to the parent? or just cache the parent?","date":"2013-07-09T04:46:53.616Z","type":"message"}
{"nick":"creationix","message":"int js_get_[int32|uint32|int64|uint64|double|boolean|string|string8|string16](js_context*)","date":"2013-07-09T04:47:03.155Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: just the parent. used to also be the location (e.g. the old .offset property), but the new slice method gets around the old pitfalls","date":"2013-07-09T04:47:28.367Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: ok, then I'm more +1 on it","date":"2013-07-09T04:47:52.777Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: right, more or less","date":"2013-07-09T04:48:49.652Z","type":"message"}
{"nick":"creationix","message":"  I'll add a sample header file to my gist","date":"2013-07-09T04:49:03.868Z","type":"message"}
{"nick":"creationix","message":"them post to the mailing list","date":"2013-07-09T04:49:07.371Z","type":"message"}
{"nick":"qard","reason":"Quit: Leaving.","date":"2013-07-09T04:49:16.463Z","type":"quit"}
{"nick":"tjfontaine","message":"creationix: about the only thing you haven't really thought about is what exception handling will look like :)","date":"2013-07-09T04:49:34.212Z","type":"message"}
{"nick":"creationix","message":"that's almost on purpose :P","date":"2013-07-09T04:49:58.097Z","type":"message"}
{"nick":"creationix","message":"but I guess there must be a way to throw and catch exceptions","date":"2013-07-09T04:50:10.883Z","type":"message"}
{"nick":"tjfontaine","message":"hehe, I don't particularly care so much about throwing, but certainly if you call a function you might throw","date":"2013-07-09T04:50:36.834Z","type":"message"}
{"nick":"tjfontaine","message":"or rather somethign other than you might throw","date":"2013-07-09T04:50:48.233Z","type":"message"}
{"nick":"creationix","message":"is there a portable way in C to simulate throwing?","date":"2013-07-09T04:50:54.663Z","type":"message"}
{"nick":"creationix","message":"longjump or something","date":"2013-07-09T04:50:58.558Z","type":"message"}
{"nick":"creationix","message":"or is it best to just return a special value","date":"2013-07-09T04:51:08.628Z","type":"message"}
{"nick":"tjfontaine","message":"well, we don't want to do that stuff","date":"2013-07-09T04:51:19.846Z","type":"message"}
{"nick":"tjfontaine","message":"but longjump yes is what would be used","date":"2013-07-09T04:51:33.890Z","type":"message"}
{"nick":"creationix","message":"I think that's what lua does, it's been a while","date":"2013-07-09T04:51:44.218Z","type":"message"}
{"nick":"tjfontaine","message":"but v8 and sm signal if there are pending exceptions","date":"2013-07-09T04:51:45.872Z","type":"message"}
{"nick":"creationix","message":"I never liked it","date":"2013-07-09T04:51:48.468Z","type":"message"}
{"nick":"creationix","message":"I guess I could just call a special API to register the exception and then return 0","date":"2013-07-09T04:52:12.051Z","type":"message"}
{"nick":"creationix","message":"return js_throw(C, \"This is a printf style message\", ...)","date":"2013-07-09T04:52:34.143Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: so one part I like about the SM api is that you return TRUE if everything is ok, and FALSE if things went wrong, and you set the return value somewhere","date":"2013-07-09T04:52:53.142Z","type":"message"}
{"nick":"tjfontaine","message":"so that way it's easy to signal to composable pieces if something has gone wrong","date":"2013-07-09T04:53:15.455Z","type":"message"}
{"nick":"creationix","message":"I never liked that, but I'm not opposed to it","date":"2013-07-09T04:53:24.439Z","type":"message"}
{"nick":"creationix","message":"it works as well","date":"2013-07-09T04:53:28.548Z","type":"message"}
{"nick":"creationix","message":"the composable argument is good","date":"2013-07-09T04:53:52.979Z","type":"message"}
{"nick":"creationix","message":"though i think it's still composable with my style","date":"2013-07-09T04:54:44.259Z","type":"message"}
{"nick":"creationix","message":"at least in the tail-call style case","date":"2013-07-09T04:55:02.663Z","type":"message"}
{"nick":"tjfontaine","message":"ya","date":"2013-07-09T04:55:32.560Z","type":"message"}
{"nick":"creationix","message":"so it could still be pretty with those semantics","date":"2013-07-09T04:56:08.047Z","type":"message"}
{"nick":"creationix","message":"return js_return(C, some_value)","date":"2013-07-09T04:56:20.659Z","type":"message"}
{"nick":"creationix","message":"and js_return returns TRUE","date":"2013-07-09T04:56:29.222Z","type":"message"}
{"nick":"creationix","message":"that also makes returning undefined easier","date":"2013-07-09T04:56:49.000Z","type":"message"}
{"nick":"creationix","message":"just `return TRUE`","date":"2013-07-09T04:56:52.062Z","type":"message"}
{"nick":"mikeal","date":"2013-07-09T04:58:25.245Z","type":"join"}
{"nick":"creationix","message":"tjfontaine, I'll change to that.  I do like the composability","date":"2013-07-09T04:59:56.658Z","type":"message"}
{"nick":"kazupon_","date":"2013-07-09T05:00:02.675Z","type":"join"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-07-09T05:00:38.507Z","type":"nick"}
{"nick":"tjfontaine","message":"creationix: heh, so basically at the moment the only difference from the SM api is that we're keeping arguments in the context and not passing in argc, argv","date":"2013-07-09T05:00:43.504Z","type":"message"}
{"nick":"creationix","message":"and we never have pointers to values","date":"2013-07-09T05:01:19.915Z","type":"message"}
{"nick":"creationix","message":"just virtual slots","date":"2013-07-09T05:01:23.617Z","type":"message"}
{"nick":"tjfontaine","message":"well, we'll need something to reference a js_get_object concept?","date":"2013-07-09T05:02:17.668Z","type":"message"}
{"nick":"mikeal","reason":"Ping timeout: 246 seconds","date":"2013-07-09T05:02:35.891Z","type":"quit"}
{"nick":"creationix","message":"I expect the shim to keep a linked list or other list-like structure of created values","date":"2013-07-09T05:03:07.232Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 256 seconds","date":"2013-07-09T05:03:10.884Z","type":"quit"}
{"nick":"creationix","message":"and when the function ends, see which one is the return value and do whatever the underlying system needs to preserve it","date":"2013-07-09T05:03:36.375Z","type":"message"}
{"nick":"creationix","message":"slot 0 is \"this\", positive slots are arguments, negative slots are local variables/values created in the function body","date":"2013-07-09T05:04:28.375Z","type":"message"}
{"nick":"creationix","message":"any of the above can be returned by slot","date":"2013-07-09T05:04:34.161Z","type":"message"}
{"nick":"tjfontaine","message":"but I'm not necessarily sure how that handles generic object manipulation","date":"2013-07-09T05:05:13.279Z","type":"message"}
{"nick":"creationix","message":"it works the same way it does in lua, except for the strict ordering","date":"2013-07-09T05:06:55.089Z","type":"message"}
{"nick":"creationix","message":"which they do so they can return multiple values","date":"2013-07-09T05:07:01.200Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2013-07-09T05:07:12.320Z","type":"message"}
{"nick":"tjfontaine","message":"I need to think on that part some more","date":"2013-07-09T05:07:23.906Z","type":"message"}
{"nick":"creationix","message":"if it works, I think this would be awesome","date":"2013-07-09T05:07:32.641Z","type":"message"}
{"nick":"creationix","message":"I really like bindings to never have access to js value pointers","date":"2013-07-09T05:07:51.542Z","type":"message"}
{"nick":"creationix","message":"if you need to store an object in a C struct, you create a ref to it","date":"2013-07-09T05:08:09.064Z","type":"message"}
{"nick":"creationix","message":"which is somewhat annoying, but it's an edge case","date":"2013-07-09T05:08:20.628Z","type":"message"}
{"nick":"creationix","message":"I want the simple case to be simple","date":"2013-07-09T05:08:36.200Z","type":"message"}
{"nick":"tjfontaine","message":"what's more likely is needing to attach arbitrary c-memory to an object","date":"2013-07-09T05:08:41.597Z","type":"message"}
{"nick":"creationix","message":"most bindings will be binding to sync APIs","date":"2013-07-09T05:08:42.863Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: are you planning on creating a HandleScope before these are run? (just curious)","date":"2013-07-09T05:09:04.032Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, like wrapping a C struct as a javascript object?","date":"2013-07-09T05:09:23.116Z","type":"message"}
{"nick":"trevnorris","message":"creationix: no. directly attaching external memory to an object as an array index.","date":"2013-07-09T05:09:42.834Z","type":"message"}
{"nick":"creationix","message":"oh, like a buffer","date":"2013-07-09T05:09:50.410Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: in my head right now it works something like: { HandleScope scope; prologue(); actual_shim_call(); epilogue(); }","date":"2013-07-09T05:09:55.673Z","type":"message"}
{"nick":"trevnorris","message":"cool","date":"2013-07-09T05:10:02.867Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: or a handle to some internal resource ","date":"2013-07-09T05:10:22.020Z","type":"message"}
{"nick":"creationix","message":"int slot = js_create_buffer(pointer, length)","date":"2013-07-09T05:10:30.898Z","type":"message"}
{"nick":"trevnorris","message":"creationix: yeah. pretty much. take a look at Alloc in src/smalloc.cc for the minimal implementations","date":"2013-07-09T05:10:40.060Z","type":"message"}
{"nick":"trevnorris","message":"also Use()","date":"2013-07-09T05:11:51.210Z","type":"message"}
{"nick":"creationix","message":"though this does bring up passing around structs as opaque values","date":"2013-07-09T05:11:51.667Z","type":"message"}
{"nick":"creationix","message":"many C apis give you a struct that they expect you to pass back in later","date":"2013-07-09T05:12:06.155Z","type":"message"}
{"nick":"creationix","message":"and js needs to be able to handle that logic","date":"2013-07-09T05:12:11.283Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2013-07-09T05:12:11.743Z","type":"message"}
{"nick":"creationix","message":"also we need to be able to create closures","date":"2013-07-09T05:12:59.462Z","type":"message"}
{"nick":"creationix","message":"callable functions that carry internal state","date":"2013-07-09T05:13:05.703Z","type":"message"}
{"nick":"creationix","message":"not bound to \"this\"","date":"2013-07-09T05:13:13.334Z","type":"message"}
{"nick":"trevnorris","message":"unfortunately once you pass a Persistent into js then it'll come back as a Local.","date":"2013-07-09T05:13:16.393Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: mind giving me one last lgtm? https://github.com/trevnorris/node/compare/slice-first-parent","date":"2013-07-09T05:15:19.118Z","type":"message"}
{"nick":"tjfontaine","message":"that logic seems simpler","date":"2013-07-09T05:19:37.965Z","type":"message"}
{"nick":"trevnorris","message":"yeah. knew it was in there. just took me a minute to see it.","date":"2013-07-09T05:21:05.398Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, is this what you meant by macros? https://gist.github.com/creationix/5954513#file-accessing_this-c-L16-L18 and https://gist.github.com/creationix/5954513#file-accessing_this-c-L26-L28","date":"2013-07-09T05:21:57.312Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: right, going along those lines","date":"2013-07-09T05:22:57.628Z","type":"message"}
{"nick":"tjfontaine","message":"creationix: I expect to find more things as we start seeing the common patterns","date":"2013-07-09T05:23:53.667Z","type":"message"}
{"nick":"creationix","message":"but the general idea is to put only basics as real functions and use aliases for all the combinations/shortcuts","date":"2013-07-09T05:24:22.847Z","type":"message"}
{"nick":"tjfontaine","message":"yup","date":"2013-07-09T05:24:34.795Z","type":"message"}
{"nick":"creationix","message":"cool","date":"2013-07-09T05:24:37.889Z","type":"message"}
{"nick":"creationix","message":"maybe instead of \"int\" for slots, we could typedef \"slot\"?","date":"2013-07-09T05:25:33.510Z","type":"message"}
{"nick":"creationix","message":"though \"int\" is unique to slots in these examples so far","date":"2013-07-09T05:25:52.036Z","type":"message"}
{"nick":"creationix","message":"since the actual number types are more explicit","date":"2013-07-09T05:26:02.443Z","type":"message"}
{"nick":"creationix","message":"personally I prefer less typedefs if possible","date":"2013-07-09T05:26:56.686Z","type":"message"}
{"nick":"tjfontaine","message":"it will need to be a balance","date":"2013-07-09T05:27:34.160Z","type":"message"}
{"nick":"mikeal","date":"2013-07-09T05:28:48.005Z","type":"join"}
{"nick":"creationix","message":"when converting C strings to js values, the C string isn't usually const right?","date":"2013-07-09T05:31:59.597Z","type":"message"}
{"nick":"tjfontaine","message":"it is, because the contract would be that the underlying function wouldn't change it, it's a copy","date":"2013-07-09T05:32:44.108Z","type":"message"}
{"nick":"creationix","message":"so it's up to the binding author to manually copy their string then?","date":"2013-07-09T05:33:12.775Z","type":"message"}
{"nick":"creationix","message":"I'm not very clear on how to create const strings","date":"2013-07-09T05:33:36.538Z","type":"message"}
{"nick":"tjfontaine","message":"no, when an author asks to store/create a js string, that will end copying the string for them","date":"2013-07-09T05:34:02.345Z","type":"message"}
{"nick":"creationix","message":"in lua, you pass in mutable strings and it copies when interning them","date":"2013-07-09T05:34:11.810Z","type":"message"}
{"nick":"tjfontaine","message":"there is a concept of \"external\" strings, where it does reuse the underlying memory","date":"2013-07-09T05:34:13.774Z","type":"message"}
{"nick":"creationix","message":"ok, so for the header \"char* value\" is fine?","date":"2013-07-09T05:34:35.540Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: wouldn't it be easier just to use the already abstracted StringBytes api?","date":"2013-07-09T05:34:38.358Z","type":"message"}
{"nick":"creationix","message":"just document that it will copy the memory","date":"2013-07-09T05:34:41.027Z","type":"message"}
{"nick":"trevnorris","message":"that will automatically handle externalization and all that","date":"2013-07-09T05:34:54.533Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: for implementation we may, we're just letting creationix think through the api he would like to consume","date":"2013-07-09T05:35:04.639Z","type":"message"}
{"nick":"trevnorris","message":"ah cool","date":"2013-07-09T05:35:13.382Z","type":"message"}
{"nick":"creationix","message":"so for external strings, the vm doesn't copy them and the consumer is responsible to never change them?","date":"2013-07-09T05:36:11.980Z","type":"message"}
{"nick":"creationix","message":"and make sure they don't get freed","date":"2013-07-09T05:36:31.380Z","type":"message"}
{"nick":"creationix","message":"would the js engine free them when the object gets gc'ed","date":"2013-07-09T05:37:06.088Z","type":"message"}
{"nick":"tjfontaine","message":"depends, you'd probably make it weak such that you could be notified and free it yourself","date":"2013-07-09T05:38:28.325Z","type":"message"}
{"nick":"trevnorris","message":"creationix: external strings are tied to a class that is handled by v8. when the object bound to that class is gc'd the class destructor is run.","date":"2013-07-09T05:39:03.671Z","type":"message"}
{"nick":"creationix","message":"so pass in a C callback for on gc?","date":"2013-07-09T05:39:07.816Z","type":"message"}
{"nick":"philips","reason":"Ping timeout: 264 seconds","date":"2013-07-09T05:39:09.814Z","type":"quit"}
{"nick":"tjfontaine","message":"creationix: right, we're going to need a generic pattern for that anyway","date":"2013-07-09T05:39:22.681Z","type":"message"}
{"nick":"creationix","message":"yep for the struct wrappings","date":"2013-07-09T05:39:36.368Z","type":"message"}
{"nick":"trevnorris","message":"creationix: i'm curious, what type of information are your wrapping in a struct?","date":"2013-07-09T05:39:51.753Z","type":"message"}
{"nick":"creationix","message":"trevnorris, what do you mean?","date":"2013-07-09T05:40:05.986Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: for our purposes what he actually means is \"opaque pointer\"/external-memory","date":"2013-07-09T05:40:15.713Z","type":"message"}
{"nick":"creationix","message":"most my C experience is writing libuv bindings","date":"2013-07-09T05:40:16.875Z","type":"message"}
{"nick":"tjfontaine","message":":)","date":"2013-07-09T05:40:18.666Z","type":"message"}
{"nick":"creationix","message":"so I need to pass uv_handle_t instances to js somehow","date":"2013-07-09T05:40:40.463Z","type":"message"}
{"nick":"creationix","message":"since many uv functions accept them as arguments","date":"2013-07-09T05:40:52.358Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ah, ok.","date":"2013-07-09T05:40:56.172Z","type":"message"}
{"nick":"creationix","message":"can C functions have multiple signatures?","date":"2013-07-09T05:41:57.663Z","type":"message"}
{"nick":"creationix","message":"optional args","date":"2013-07-09T05:41:59.863Z","type":"message"}
{"nick":"creationix","message":"or is that only C++","date":"2013-07-09T05:42:04.202Z","type":"message"}
{"nick":"tjfontaine","message":"well, let's just say \"no\" :)","date":"2013-07-09T05:42:50.429Z","type":"message"}
{"nick":"creationix","message":"so not portable then","date":"2013-07-09T05:43:02.003Z","type":"message"}
{"nick":"creationix","message":"no problem, I'll just make *more* functions :)","date":"2013-07-09T05:43:23.056Z","type":"message"}
{"nick":"tjfontaine","message":"that's the spirit :)","date":"2013-07-09T05:43:29.663Z","type":"message"}
{"nick":"creationix","message":"js_create_object(js_context* C) and js_create_object_with_proto(js_context* C, int proto_slot)","date":"2013-07-09T05:43:55.898Z","type":"message"}
{"nick":"creationix","message":"same for functions with a parent scope (closures)","date":"2013-07-09T05:44:11.058Z","type":"message"}
{"nick":"kazupon_","reason":"Read error: Connection reset by peer","date":"2013-07-09T05:44:13.818Z","type":"quit"}
{"nick":"creationix","message":"or I could have a function for mutating the __proto__","date":"2013-07-09T05:44:50.326Z","type":"message"}
{"nick":"creationix","message":"but I think that's discouraged","date":"2013-07-09T05:44:57.770Z","type":"message"}
{"nick":"trevnorris","message":"eh?","date":"2013-07-09T05:44:59.752Z","type":"message"}
{"nick":"trevnorris","message":"sorry, wrong window","date":"2013-07-09T05:45:07.869Z","type":"message"}
{"nick":"kazupon","date":"2013-07-09T05:46:34.628Z","type":"join"}
{"nick":"philips","date":"2013-07-09T05:50:22.737Z","type":"join"}
{"nick":"creationix","message":"tjfontaine, how would I write a macro that aliases `js_return_int32(C, value)` to `js_return(C, js_create_int32(C, value))`?","date":"2013-07-09T06:04:01.957Z","type":"message"}
{"nick":"tjfontaine","message":"#define js_return_int32(C, value) js_return(C, js_create_int32(C, value))","date":"2013-07-09T06:05:25.020Z","type":"message"}
{"nick":"tjfontaine","message":":)","date":"2013-07-09T06:05:38.804Z","type":"message"}
{"nick":"creationix","message":"oh, that's simple","date":"2013-07-09T06:05:39.019Z","type":"message"}
{"nick":"creationix","message":"and I don't even need extra parens in this case because of the commas","date":"2013-07-09T06:05:53.097Z","type":"message"}
{"nick":"tjfontaine","message":"there may be some other cases where more parens will be needed but for now just handle the simple expressions","date":"2013-07-09T06:06:21.438Z","type":"message"}
{"nick":"defunctzombie_zz","new_nick":"defunctzombie","date":"2013-07-09T06:10:39.278Z","type":"nick"}
{"nick":"trevnorris","message":"going to land that patch.","date":"2013-07-09T06:11:35.373Z","type":"message"}
{"nick":"tjfontaine","message":"I don't see a reason why not, since it's a problem just not for the dispose case","date":"2013-07-09T06:12:42.284Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Trevor Norris\u000f \u00037master\u000f * \u0002b8ce1da\u0002 : buffer: propagate originating parent - http://git.io/npIbnQ","date":"2013-07-09T06:15:36.957Z","type":"message"}
{"nick":"defunctzombie","new_nick":"defunctzombie_zz","date":"2013-07-09T06:20:35.647Z","type":"nick"}
{"nick":"loladiro","reason":"Quit: loladiro","date":"2013-07-09T06:26:46.444Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-master-windows\u0002: #104 \u00034FAILURE\u000f http://jenkins.nodejs.org/job/nodejs-master-windows/104/","date":"2013-07-09T06:31:32.069Z","type":"message"}
{"nick":"bajtos","date":"2013-07-09T06:37:54.155Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #297 \u00037UNSTABLE\u000f smartos-x64 (7/608) linux-x64 (1/608) osx-ia32 (1/608) smartos-ia32 (1/608) http://jenkins.nodejs.org/job/nodejs-master/297/","date":"2013-07-09T06:40:02.202Z","type":"message"}
{"nick":"rendar","date":"2013-07-09T06:49:58.945Z","type":"join"}
{"nick":"creationix","message":"alright, heading to bed, it's 2am","date":"2013-07-09T06:58:49.696Z","type":"message"}
{"nick":"creationix","message":"tjfontaine, https://gist.github.com/creationix/5954513#file-js_api-h","date":"2013-07-09T07:03:00.963Z","type":"message"}
{"nick":"creationix","message":"g'night","date":"2013-07-09T07:03:03.551Z","type":"message"}
{"nick":"pfox__","date":"2013-07-09T07:17:47.351Z","type":"join"}
{"nick":"pfox__","message":"creationix: i couldn't help but observe that your post to the list, re: a C API, looks a lot like JSAPI","date":"2013-07-09T07:18:15.575Z","type":"message"}
{"nick":"creationix","message":"yep","date":"2013-07-09T07:18:29.159Z","type":"message"}
{"nick":"pfox__","message":"(im the one who replied as such, btw)","date":"2013-07-09T07:18:38.496Z","type":"message"}
{"nick":"pfox__","message":"anywho. good times!","date":"2013-07-09T07:18:43.564Z","type":"message"}
{"nick":"pfox__","message":"i love JSAPI, for the record.","date":"2013-07-09T07:18:47.413Z","type":"message"}
{"nick":"creationix","message":"except no JS_Class in sight ","date":"2013-07-09T07:18:48.934Z","type":"message"}
{"nick":"pfox__","message":"yeah, building out function defs, classes, etc is tedious","date":"2013-07-09T07:19:20.852Z","type":"message"}
{"nick":"joshthecoder","message":"was there a recent fix for uv_ref() crashing? Getting some random crashes in 0.10.7.","date":"2013-07-09T07:19:41.196Z","type":"message"}
{"nick":"creationix","message":"pfox__, well, helper functions and macros could help a lot there","date":"2013-07-09T07:19:53.792Z","type":"message"}
{"nick":"pfox__","message":"famous last words, indeed!","date":"2013-07-09T07:20:17.474Z","type":"message"}
{"nick":"creationix","message":"pfox__, my main beef with jsapi (other than the docs being always wrong) was how the C semantics were very different than js semantics around objects and classes","date":"2013-07-09T07:20:42.110Z","type":"message"}
{"nick":"pfox__","message":"i agree, re: the docs","date":"2013-07-09T07:21:08.048Z","type":"message"}
{"nick":"pfox__","message":"do you plan to go all the way down the rabbit hole re: support prototypical inheritence?","date":"2013-07-09T07:21:28.113Z","type":"message"}
{"nick":"creationix","message":"pfox__, it's there already","date":"2013-07-09T07:21:36.035Z","type":"message"}
{"nick":"creationix","message":"I have an analogue to Object.create","date":"2013-07-09T07:21:45.210Z","type":"message"}
{"nick":"pfox__","message":"i should just read the gist, huh. im going off of the email.","date":"2013-07-09T07:22:03.050Z","type":"message"}
{"nick":"creationix","message":"it's exception handling that's giving me trouble, I'll probably just revisit and see what jsapi does there","date":"2013-07-09T07:22:09.530Z","type":"message"}
{"nick":"timoxley","reason":"Quit: Computer has gone to sleep.","date":"2013-07-09T07:22:16.530Z","type":"quit"}
{"nick":"pfox__","message":"iirc you can register a global callback for uncaught exceptions.. but exceptions that propagate up into native code have to be detected and repropagated in order to reach the global callback","date":"2013-07-09T07:24:44.949Z","type":"message"}
{"nick":"creationix","message":"lua uses longjump to simulate exception stack jumping in the C side","date":"2013-07-09T07:25:20.501Z","type":"message"}
{"nick":"creationix","message":"but I don't think we want that","date":"2013-07-09T07:25:25.660Z","type":"message"}
{"nick":"creationix","message":"hence the manual re-propagation","date":"2013-07-09T07:26:18.844Z","type":"message"}
{"nick":"creationix","message":"maybe `bool js_call(C, &result, function_slot, 0, {})`","date":"2013-07-09T07:27:31.970Z","type":"message"}
{"nick":"creationix","message":"and then do `if (!js_call(...)) { result contains the exception or return value }`","date":"2013-07-09T07:28:22.657Z","type":"message"}
{"nick":"creationix","message":"anyway, I'm off to bed for real this time","date":"2013-07-09T07:30:03.095Z","type":"message"}
{"nick":"pfox__","message":"night","date":"2013-07-09T07:30:24.388Z","type":"message"}
{"nick":"wolfeidau","reason":"Remote host closed the connection","date":"2013-07-09T07:40:30.483Z","type":"quit"}
{"nick":"amartens","reason":"Quit: Leaving.","date":"2013-07-09T07:44:10.502Z","type":"quit"}
