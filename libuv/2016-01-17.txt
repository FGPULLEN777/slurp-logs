{"nick":"bnoordhuis","date":"2016-01-17T00:00:03.587Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2016-01-17T00:04:38.722Z","type":"quit"}
{"nick":"fourq","new_nick":"fourq|away","date":"2016-01-17T00:27:42.649Z","type":"nick"}
{"nick":"fourq|away","new_nick":"fourq","date":"2016-01-17T00:29:36.946Z","type":"nick"}
{"nick":"fourq","new_nick":"fourq|away","date":"2016-01-17T00:32:51.578Z","type":"nick"}
{"nick":"fourq|away","new_nick":"fourq","date":"2016-01-17T00:33:33.812Z","type":"nick"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-01-17T00:55:02.422Z","type":"quit"}
{"nick":"amurzeau","reason":"Ping timeout: 252 seconds","date":"2016-01-17T01:11:28.030Z","type":"quit"}
{"nick":"zju4","reason":"Ping timeout: 272 seconds","date":"2016-01-17T01:13:08.828Z","type":"quit"}
{"nick":"fourq","new_nick":"fourq|away","date":"2016-01-17T01:20:43.818Z","type":"nick"}
{"nick":"fourq|away","new_nick":"fourq","date":"2016-01-17T01:22:58.649Z","type":"nick"}
{"nick":"jgi","date":"2016-01-17T01:39:34.082Z","type":"join"}
{"nick":"jgi","reason":"Ping timeout: 276 seconds","date":"2016-01-17T01:44:47.109Z","type":"quit"}
{"nick":"tunniclm","reason":"Ping timeout: 240 seconds","date":"2016-01-17T03:21:35.870Z","type":"quit"}
{"nick":"evanluca_","date":"2016-01-17T03:23:20.194Z","type":"join"}
{"nick":"evanlucas","reason":"Ping timeout: 265 seconds","date":"2016-01-17T03:25:54.736Z","type":"quit"}
{"nick":"nathan7","reason":"Quit: leaving","date":"2016-01-17T05:51:41.171Z","type":"quit"}
{"nick":"nathan7","date":"2016-01-17T05:54:30.528Z","type":"join"}
{"nick":"jgi","date":"2016-01-17T06:28:58.940Z","type":"join"}
{"nick":"Ruyi-HomePC","date":"2016-01-17T06:40:52.746Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-17T06:42:23.401Z","type":"quit"}
{"nick":"evanluca_","reason":"Read error: Connection reset by peer","date":"2016-01-17T08:10:57.919Z","type":"quit"}
{"nick":"evanlucas","date":"2016-01-17T08:10:59.907Z","type":"join"}
{"nick":"Ruyi-HomePC","reason":"Quit: Leaving","date":"2016-01-17T08:29:34.940Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-17T08:30:23.625Z","type":"join"}
{"nick":"cimbo","date":"2016-01-17T08:36:19.994Z","type":"join"}
{"nick":"cimbo","reason":"Client Quit","date":"2016-01-17T08:40:51.901Z","type":"quit"}
{"nick":"evanlucas","reason":"Read error: Connection reset by peer","date":"2016-01-17T08:45:18.921Z","type":"quit"}
{"nick":"evanlucas","date":"2016-01-17T08:45:41.653Z","type":"join"}
{"nick":"davi","date":"2016-01-17T08:52:56.914Z","type":"join"}
{"nick":"zju1","date":"2016-01-17T09:24:00.696Z","type":"join"}
{"nick":"rendar","date":"2016-01-17T09:44:00.092Z","type":"join"}
{"nick":"tunniclm","date":"2016-01-17T10:01:40.747Z","type":"join"}
{"nick":"jgi","date":"2016-01-17T10:12:25.806Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 265 seconds","date":"2016-01-17T10:45:15.712Z","type":"quit"}
{"nick":"seishun","date":"2016-01-17T11:11:07.024Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-17T11:24:38.268Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-17T11:51:50.982Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 250 seconds","date":"2016-01-17T11:56:16.996Z","type":"quit"}
{"nick":"tunniclm","reason":"Ping timeout: 260 seconds","date":"2016-01-17T12:10:40.785Z","type":"quit"}
{"nick":"gabrielschulhof","reason":"Ping timeout: 245 seconds","date":"2016-01-17T12:22:39.907Z","type":"quit"}
{"nick":"gabrielschulhof","date":"2016-01-17T12:28:22.942Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-01-17T13:32:17.677Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 260 seconds","date":"2016-01-17T13:52:45.892Z","type":"quit"}
{"nick":"warehouse13","reason":"Remote host closed the connection","date":"2016-01-17T14:37:41.820Z","type":"quit"}
{"nick":"brrt","date":"2016-01-17T15:08:45.091Z","type":"join"}
{"nick":"Left_Turn","date":"2016-01-17T15:19:36.246Z","type":"join"}
{"nick":"komba","date":"2016-01-17T15:33:21.955Z","type":"join"}
{"nick":"amurzeau","date":"2016-01-17T15:34:29.994Z","type":"join"}
{"nick":"komba","message":"ThreadPool Question: \"even though a global thread pool which is shared across all events loops is used, the functions are not thread safe.\" Which functions? uv_queue_work()?","date":"2016-01-17T15:44:13.570Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2016-01-17T15:49:16.565Z","type":"quit"}
{"nick":"komba","reason":"Quit: Page closed","date":"2016-01-17T15:50:57.685Z","type":"quit"}
{"nick":"brrt","reason":"Quit: brrt","date":"2016-01-17T16:32:29.666Z","type":"quit"}
{"nick":"amurzeau","message":"saghul, txdv_: while trying to implement on-demand fast path activation (like keepalive and nodelay), I need to add a flag to the uv_tcp_t structure because this feature need to be enabled between socket creation and call to connect/accept","date":"2016-01-17T16:41:51.118Z","type":"message"}
{"nick":"amurzeau","message":"as I can see, there is only one slot available: 0x80000000 according to src/win/internal.h","date":"2016-01-17T16:41:52.742Z","type":"message"}
{"nick":"brrt","date":"2016-01-17T16:45:54.210Z","type":"join"}
{"nick":"amurzeau","message":"saghul: can I use this flag slot for the TCP loopback fast path feature or should it be reserved for other uses ?","date":"2016-01-17T16:45:58.352Z","type":"message"}
{"nick":"davi","date":"2016-01-17T16:48:06.746Z","type":"join"}
{"nick":"davi","reason":"Changing host","date":"2016-01-17T16:48:06.960Z","type":"quit"}
{"nick":"davi","date":"2016-01-17T16:48:06.960Z","type":"join"}
{"nick":"amurzeau","message":"or maybe make this feature enabled/disabled at loop level (to match Java behavior of using a global system property to control this feature)","date":"2016-01-17T16:53:11.254Z","type":"message"}
{"nick":"bnoordhuis","date":"2016-01-17T16:54:10.663Z","type":"join"}
{"nick":"rendar","message":"amurzeau: what you mean with \"slot\"?","date":"2016-01-17T16:56:42.315Z","type":"message"}
{"nick":"amurzeau","message":"a flag bit","date":"2016-01-17T16:56:52.308Z","type":"message"}
{"nick":"amurzeau","message":"like UV_HANDLE_TCP_NODELAY which is used when the user enable nodelay before the socket is created","date":"2016-01-17T16:57:21.228Z","type":"message"}
{"nick":"amurzeau","message":"when creating the socket, if the flag is set, setsockopt is called to enable TCP_NODELAY","date":"2016-01-17T16:57:47.273Z","type":"message"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2016-01-17T16:58:58.653Z","type":"quit"}
{"nick":"amurzeau","message":"actually I'm a bit hesitant between loop-global flag or per socket flag","date":"2016-01-17T16:58:59.841Z","type":"message"}
{"nick":"amurzeau","message":"other implementations (like Redis, Java, KestrelHttpServer) either have a global flag or always enable it","date":"2016-01-17T17:00:10.904Z","type":"message"}
{"nick":"amurzeau","message":"because it's just a performance boost feature (+/- bugs :) )","date":"2016-01-17T17:00:51.591Z","type":"message"}
{"nick":"rendar","message":"hmm ok","date":"2016-01-17T17:02:24.083Z","type":"message"}
{"nick":"rendar","message":"isn't that flag which disables the nagle algorithm?","date":"2016-01-17T17:02:49.254Z","type":"message"}
{"nick":"amurzeau","message":"yes it's that one","date":"2016-01-17T17:03:14.680Z","type":"message"}
{"nick":"brrt","reason":"Quit: brrt","date":"2016-01-17T17:17:30.142Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-01-17T17:26:36.990Z","type":"join"}
{"nick":"bnoordhuis","date":"2016-01-17T17:42:30.087Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-01-17T17:50:42.549Z","type":"quit"}
{"nick":"tunniclm","date":"2016-01-17T17:52:02.879Z","type":"join"}
{"nick":"jgi","date":"2016-01-17T17:59:10.926Z","type":"join"}
{"nick":"bradleymeck","date":"2016-01-17T18:03:26.795Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-17T18:04:38.171Z","type":"quit"}
{"nick":"fourq","new_nick":"fourq|away","date":"2016-01-17T18:06:44.541Z","type":"nick"}
{"nick":"kellabyte","message":"how can I control how big of packets I'm sending over a TCP write?","date":"2016-01-17T18:07:57.329Z","type":"message"}
{"nick":"amurzeau","message":"AFAIK, packet fragmentation is controlled by the OS and the network card, TCP handle a stream of data","date":"2016-01-17T18:11:16.595Z","type":"message"}
{"nick":"kellabyte","message":"hmm well one application is sending less packets than another and the one sending less has a higher throughput","date":"2016-01-17T18:16:17.566Z","type":"message"}
{"nick":"kellabyte","message":"so its sending larger packets","date":"2016-01-17T18:16:21.098Z","type":"message"}
{"nick":"fourq|away","new_nick":"fourq","date":"2016-01-17T18:17:01.879Z","type":"nick"}
{"nick":"amurzeau","message":"both have nagle enabled (that is, TCP_NODELAY disabled)","date":"2016-01-17T18:17:50.123Z","type":"message"}
{"nick":"amurzeau","message":"?","date":"2016-01-17T18:17:52.531Z","type":"message"}
{"nick":"kellabyte","message":"yup believe so, haven't disabled it","date":"2016-01-17T18:18:35.851Z","type":"message"}
{"nick":"amurzeau","message":"what's the size of the bigger and smaller packets ?","date":"2016-01-17T18:20:10.231Z","type":"message"}
{"nick":"kellabyte","message":"not sure how to tell that, I'm using dstat to monitor throughput and packets/second","date":"2016-01-17T18:20:28.969Z","type":"message"}
{"nick":"kellabyte","message":"I guess throughput / packets would tell the size?","date":"2016-01-17T18:20:41.413Z","type":"message"}
{"nick":"amurzeau","message":"yes","date":"2016-01-17T18:21:27.184Z","type":"message"}
{"nick":"kellabyte","message":"ok the slow application is sending 1.3K bytes per packet","date":"2016-01-17T18:22:27.320Z","type":"message"}
{"nick":"davi","reason":"Ping timeout: 250 seconds","date":"2016-01-17T18:25:24.924Z","type":"quit"}
{"nick":"davi","date":"2016-01-17T18:26:06.931Z","type":"join"}
{"nick":"kellabyte","message":"the faster application is sending 8K bytes per packet","date":"2016-01-17T18:26:23.486Z","type":"message"}
{"nick":"amurzeau","message":"there are not on the same network ?","date":"2016-01-17T18:26:42.919Z","type":"message"}
{"nick":"kellabyte","message":"same network, its the same 2 machines I'm benchmarking against","date":"2016-01-17T18:27:01.970Z","type":"message"}
{"nick":"amurzeau","message":"1.3k would match the common MTU around 1.5k / packet","date":"2016-01-17T18:27:06.597Z","type":"message"}
{"nick":"kellabyte","message":"iperf is doing 2.2GB/s my libuv application is maxing out at 1.4GB/s","date":"2016-01-17T18:27:30.236Z","type":"message"}
{"nick":"amurzeau","message":"do you have a iperf report indicating the MSS and MTU size ?","date":"2016-01-17T18:28:53.155Z","type":"message"}
{"nick":"amurzeau","message":"like \"MSS size 8948 bytes (MTU 8988 bytes, unknown interface)\"","date":"2016-01-17T18:29:06.308Z","type":"message"}
{"nick":"amurzeau","message":"you may need -m option to iperf to print that report","date":"2016-01-17T18:30:07.109Z","type":"message"}
{"nick":"kellabyte","message":"let me check","date":"2016-01-17T18:32:17.897Z","type":"message"}
{"nick":"kellabyte","message":"hmm doesn't seem -m does that, it lets you set it not print the report","date":"2016-01-17T18:33:56.981Z","type":"message"}
{"nick":"amurzeau","message":"seems to be a iperf2 only option","date":"2016-01-17T18:35:30.029Z","type":"message"}
{"nick":"amurzeau","message":"I think iperf use jumbo frames but not sure about that","date":"2016-01-17T18:37:10.103Z","type":"message"}
{"nick":"amurzeau","message":"jumbo frames allow to have packets bigger than 1500 bytes on ethernet","date":"2016-01-17T18:37:43.867Z","type":"message"}
{"nick":"kellabyte","message":"so how is this decided in libuv api then?","date":"2016-01-17T18:38:25.007Z","type":"message"}
{"nick":"bnoordhuis","message":"kellabyte: you mean tcp frame size?","date":"2016-01-17T18:39:02.386Z","type":"message"}
{"nick":"bnoordhuis","message":"or is this about ethernet frame size?","date":"2016-01-17T18:39:30.155Z","type":"message"}
{"nick":"bnoordhuis","message":"guess it doesn't matter; libuv leaves it up to the OS either way","date":"2016-01-17T18:39:50.259Z","type":"message"}
{"nick":"amurzeau","message":"I don't know jumbo frames that much but I think this is only handled by the OS itself (and other network components)","date":"2016-01-17T18:40:30.513Z","type":"message"}
{"nick":"amurzeau","reason":"Quit: Page closed","date":"2016-01-17T18:41:21.305Z","type":"quit"}
{"nick":"kellabyte","message":"bnoordhuis: I guess I'm trying to figure out how redis or iperf can go 2GB/s but my application can't","date":"2016-01-17T18:47:21.434Z","type":"message"}
{"nick":"kellabyte","message":"8KB/packet versus 1.3KB/packet seems like where the difference may be, so I'm wondering how they are doing that versus what I'm doing wrong?","date":"2016-01-17T18:47:50.054Z","type":"message"}
{"nick":"yunong_","date":"2016-01-17T19:22:21.916Z","type":"join"}
{"nick":"yunong","reason":"Ping timeout: 260 seconds","date":"2016-01-17T19:24:40.835Z","type":"quit"}
{"nick":"jgi","date":"2016-01-17T20:05:25.847Z","type":"join"}
{"nick":"davi","reason":"Ping timeout: 260 seconds","date":"2016-01-17T20:09:35.873Z","type":"quit"}
{"nick":"kellabyte","message":"bnoordhuis: should I be using uv_write() or uv_try_write()?","date":"2016-01-17T20:42:53.123Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-01-17T20:49:43.809Z","type":"quit"}
{"nick":"amurzeau","date":"2016-01-17T20:53:31.027Z","type":"join"}
{"nick":"happy-dude","date":"2016-01-17T21:11:09.989Z","type":"join"}
{"nick":"Guest76837","reason":"*.net *.split","date":"2016-01-17T21:29:42.443Z","type":"quit"}
{"nick":"srl295","reason":"*.net *.split","date":"2016-01-17T21:29:45.008Z","type":"quit"}
{"nick":"kkaefer","reason":"*.net *.split","date":"2016-01-17T21:29:45.491Z","type":"quit"}
{"nick":"lennartcl","reason":"*.net *.split","date":"2016-01-17T21:29:45.894Z","type":"quit"}
{"nick":"bradleymeck","date":"2016-01-17T21:36:17.973Z","type":"join"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-17T21:40:35.916Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2016-01-17T21:44:14.607Z","type":"quit"}
{"nick":"rendar","reason":"Ping timeout: 240 seconds","date":"2016-01-17T21:46:26.044Z","type":"quit"}
{"nick":"rendar","date":"2016-01-17T21:53:19.915Z","type":"join"}
{"nick":"jgi","date":"2016-01-17T21:56:10.046Z","type":"join"}
{"nick":"kkaefer","date":"2016-01-17T22:05:46.309Z","type":"join"}
{"nick":"kkaefer","reason":"Changing host","date":"2016-01-17T22:05:46.524Z","type":"quit"}
{"nick":"kkaefer","date":"2016-01-17T22:05:46.524Z","type":"join"}
{"nick":"kenansulayman","date":"2016-01-17T22:06:25.562Z","type":"join"}
{"nick":"srl295","date":"2016-01-17T22:06:46.619Z","type":"join"}
{"nick":"srl295","reason":"Changing host","date":"2016-01-17T22:06:46.851Z","type":"quit"}
{"nick":"srl295","date":"2016-01-17T22:06:47.027Z","type":"join"}
{"nick":"kenansulayman","new_nick":"Guest64461","date":"2016-01-17T22:06:53.240Z","type":"nick"}
{"nick":"lennartcl","date":"2016-01-17T22:07:11.394Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 272 seconds","date":"2016-01-17T22:29:18.921Z","type":"quit"}
{"nick":"bnoordhuis","reason":"Ping timeout: 276 seconds","date":"2016-01-17T22:32:08.163Z","type":"quit"}
{"nick":"jgi","reason":"Quit: jgi","date":"2016-01-17T22:42:27.992Z","type":"quit"}
{"nick":"rendar","reason":"Ping timeout: 250 seconds","date":"2016-01-17T22:47:35.026Z","type":"quit"}
{"nick":"yunong_","reason":"*.net *.split","date":"2016-01-17T22:53:27.763Z","type":"quit"}
{"nick":"gabrielschulhof","reason":"*.net *.split","date":"2016-01-17T22:53:27.976Z","type":"quit"}
{"nick":"devlaf","reason":"*.net *.split","date":"2016-01-17T22:53:28.852Z","type":"quit"}
{"nick":"eugeneware","reason":"*.net *.split","date":"2016-01-17T22:53:29.342Z","type":"quit"}
{"nick":"whitlockjc","reason":"*.net *.split","date":"2016-01-17T22:53:30.356Z","type":"quit"}
{"nick":"rendar","date":"2016-01-17T22:57:43.477Z","type":"join"}
{"nick":"yunong_","date":"2016-01-17T22:57:43.692Z","type":"join"}
{"nick":"gabrielschulhof","date":"2016-01-17T22:57:43.692Z","type":"join"}
{"nick":"devlaf","date":"2016-01-17T22:57:43.692Z","type":"join"}
{"nick":"eugeneware","date":"2016-01-17T22:57:43.692Z","type":"join"}
{"nick":"whitlockjc","date":"2016-01-17T22:57:43.692Z","type":"join"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-01-17T23:33:02.832Z","type":"quit"}
{"nick":"bnoordhuis","date":"2016-01-17T23:37:26.766Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 260 seconds","date":"2016-01-17T23:42:30.958Z","type":"quit"}
{"nick":"amurzeau","reason":"Quit: Page closed","date":"2016-01-17T23:58:02.826Z","type":"quit"}
