{"nick":"Guest15578","new_nick":"indutny","date":"2016-06-30T00:00:08.195Z","type":"nick"}
{"nick":"avih","message":"also, while it could be useful, i'm not strictly interested in making writes to TTY stdout synchronous in the sense that they show up right away. rather, i'm more interested in not having to queue my outputs, since the docs say that writing twice to a n async stream before the callback was invoked leads to unexpected results. So i don't want to do this wait/queue/management myself (eventhough for now i do have reasonably elegant code for it, but i'd have ","date":"2016-06-30T00:17:33.958Z","type":"message"}
{"nick":"avih","message":"preferred to avoid needing to manage it myself)","date":"2016-06-30T00:17:34.039Z","type":"message"}
{"nick":"nickleefly","reason":"Quit: Connection closed for inactivity","date":"2016-06-30T00:42:32.034Z","type":"quit"}
{"nick":"brson","reason":"Ping timeout: 240 seconds","date":"2016-06-30T00:46:33.958Z","type":"quit"}
{"nick":"happy-dude","reason":"Quit: Connection closed for inactivity","date":"2016-06-30T01:01:02.925Z","type":"quit"}
{"nick":"tunniclm_","reason":"Read error: Connection reset by peer","date":"2016-06-30T01:23:25.719Z","type":"quit"}
{"nick":"rcyr","date":"2016-06-30T01:25:04.931Z","type":"join"}
{"nick":"rcyr","new_nick":"systemfault","date":"2016-06-30T01:28:08.443Z","type":"nick"}
{"nick":"Ruyi","date":"2016-06-30T01:49:56.647Z","type":"join"}
{"nick":"roxlu","reason":"Ping timeout: 250 seconds","date":"2016-06-30T02:16:35.979Z","type":"quit"}
{"nick":"roxlu","date":"2016-06-30T02:16:43.553Z","type":"join"}
{"nick":"reqshark","reason":"Quit: Be back later ...","date":"2016-06-30T03:21:39.522Z","type":"quit"}
{"nick":"rmg_","date":"2016-06-30T03:47:45.679Z","type":"join"}
{"nick":"rmg_","reason":"Ping timeout: 240 seconds","date":"2016-06-30T03:51:51.417Z","type":"quit"}
{"nick":"rgrinberg","reason":"Ping timeout: 276 seconds","date":"2016-06-30T04:08:15.354Z","type":"quit"}
{"nick":"nickleefly","date":"2016-06-30T04:58:54.243Z","type":"join"}
{"nick":"systemfault","reason":"Quit: Bye!","date":"2016-06-30T05:23:27.841Z","type":"quit"}
{"nick":"matrixis1","new_nick":"matrixise","date":"2016-06-30T05:38:44.989Z","type":"nick"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2016-06-30T06:23:55.060Z","type":"quit"}
{"nick":"rmg","date":"2016-06-30T06:24:33.466Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 240 seconds","date":"2016-06-30T06:28:31.399Z","type":"quit"}
{"nick":"nickleefly","reason":"Quit: Connection closed for inactivity","date":"2016-06-30T07:02:32.398Z","type":"quit"}
{"nick":"rmg","date":"2016-06-30T07:25:07.611Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 252 seconds","date":"2016-06-30T07:29:49.365Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-06-30T08:24:35.259Z","type":"join"}
{"nick":"rmg","date":"2016-06-30T08:50:03.719Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 246 seconds","date":"2016-06-30T08:54:30.179Z","type":"quit"}
{"nick":"{slurp-libuv}1","date":"2016-06-30T09:00:06.920Z","type":"join"}
{"nick":"piscisaureus_!~piscisaur@109.174.139.135","topic":"Liberal utopian void ~ http://logs.libuv.org/libuv ~ http://groups.google.com/group/libuv","date":"2016-06-30T09:00:07.122Z","type":"topic"}
{"nick":"rvagg_","date":"2016-06-30T09:00:18.443Z","type":"join"}
{"nick":"Therstri1m","date":"2016-06-30T09:02:28.154Z","type":"join"}
{"nick":"eugeneware_","date":"2016-06-30T09:04:21.328Z","type":"join"}
{"nick":"Jacob8432","date":"2016-06-30T09:04:38.925Z","type":"join"}
{"nick":"niska`","date":"2016-06-30T09:04:55.990Z","type":"join"}
{"nick":"Jacob843","reason":"*.net *.split","date":"2016-06-30T09:08:16.517Z","type":"quit"}
{"nick":"Reda","reason":"*.net *.split","date":"2016-06-30T09:08:17.076Z","type":"quit"}
{"nick":"{slurp-libuv}","reason":"*.net *.split","date":"2016-06-30T09:08:17.289Z","type":"quit"}
{"nick":"niska","reason":"*.net *.split","date":"2016-06-30T09:08:17.501Z","type":"quit"}
{"nick":"rvagg","reason":"*.net *.split","date":"2016-06-30T09:08:17.502Z","type":"quit"}
{"nick":"eugeneware","reason":"*.net *.split","date":"2016-06-30T09:08:17.502Z","type":"quit"}
{"nick":"Therstrium","reason":"*.net *.split","date":"2016-06-30T09:08:17.715Z","type":"quit"}
{"nick":"rvagg_","new_nick":"rvagg","date":"2016-06-30T09:08:45.805Z","type":"nick"}
{"nick":"eugeneware_","new_nick":"eugeneware","date":"2016-06-30T09:10:07.670Z","type":"nick"}
{"nick":"seishun","date":"2016-06-30T09:11:30.210Z","type":"join"}
{"nick":"rendar","date":"2016-06-30T09:23:37.750Z","type":"join"}
{"nick":"saghul_","date":"2016-06-30T09:24:35.215Z","type":"join"}
{"nick":"rmg","date":"2016-06-30T09:26:32.193Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 272 seconds","date":"2016-06-30T09:31:12.122Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2016-06-30T09:42:12.895Z","type":"quit"}
{"nick":"Reda","date":"2016-06-30T10:15:38.415Z","type":"join"}
{"nick":"Reda","reason":"Changing host","date":"2016-06-30T10:15:38.614Z","type":"quit"}
{"nick":"Reda","date":"2016-06-30T10:15:38.614Z","type":"join"}
{"nick":"abruanese","date":"2016-06-30T10:24:07.484Z","type":"join"}
{"nick":"thealphanerd","reason":"Quit: farewell for now","date":"2016-06-30T10:29:23.151Z","type":"quit"}
{"nick":"thealphanerd","date":"2016-06-30T10:35:54.133Z","type":"join"}
{"nick":"Ruyi","reason":"Read error: Connection reset by peer","date":"2016-06-30T10:41:55.298Z","type":"quit"}
{"nick":"jan____","reason":"Ping timeout: 246 seconds","date":"2016-06-30T10:42:39.166Z","type":"quit"}
{"nick":"jan____","date":"2016-06-30T10:43:48.626Z","type":"join"}
{"nick":"Fishrock123","date":"2016-06-30T10:46:39.167Z","type":"join"}
{"nick":"Fishrock","date":"2016-06-30T10:51:01.180Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 272 seconds","date":"2016-06-30T10:53:32.156Z","type":"quit"}
{"nick":"Jacob8432","reason":"Quit: Leaving","date":"2016-06-30T11:08:33.385Z","type":"quit"}
{"nick":"Adam__","date":"2016-06-30T11:08:35.197Z","type":"join"}
{"nick":"Jacob843","date":"2016-06-30T11:09:26.120Z","type":"join"}
{"nick":"Harageth","reason":"Ping timeout: 250 seconds","date":"2016-06-30T11:10:27.273Z","type":"quit"}
{"nick":"rmg","date":"2016-06-30T11:28:04.629Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 244 seconds","date":"2016-06-30T11:32:32.643Z","type":"quit"}
{"nick":"zju3","reason":"Ping timeout: 264 seconds","date":"2016-06-30T11:39:28.035Z","type":"quit"}
{"nick":"zju3","date":"2016-06-30T11:58:25.165Z","type":"join"}
{"nick":"rgrinberg","date":"2016-06-30T12:20:47.307Z","type":"join"}
{"nick":"happy-dude","date":"2016-06-30T12:41:34.326Z","type":"join"}
{"nick":"ncthom91","date":"2016-06-30T12:48:43.138Z","type":"join"}
{"nick":"ncthom91","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2016-06-30T13:27:57.996Z","type":"quit"}
{"nick":"rmg","date":"2016-06-30T13:29:33.005Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 264 seconds","date":"2016-06-30T13:34:03.985Z","type":"quit"}
{"nick":"jan____","reason":"Changing host","date":"2016-06-30T13:42:29.986Z","type":"quit"}
{"nick":"jan____","date":"2016-06-30T13:42:30.186Z","type":"join"}
{"nick":"ncthom91","date":"2016-06-30T13:48:00.158Z","type":"join"}
{"nick":"Fishrock","reason":"Quit: Leaving...","date":"2016-06-30T14:03:55.301Z","type":"quit"}
{"nick":"zju_25","date":"2016-06-30T14:21:41.683Z","type":"join"}
{"nick":"rmg","date":"2016-06-30T14:30:14.986Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 264 seconds","date":"2016-06-30T14:35:16.013Z","type":"quit"}
{"nick":"rmg","date":"2016-06-30T14:37:18.889Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 260 seconds","date":"2016-06-30T14:42:04.439Z","type":"quit"}
{"nick":"zju3","reason":"Ping timeout: 258 seconds","date":"2016-06-30T15:25:32.151Z","type":"quit"}
{"nick":"zju3","date":"2016-06-30T15:26:55.680Z","type":"join"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-06-30T15:34:06.641Z","type":"quit"}
{"nick":"rmg","date":"2016-06-30T15:37:46.849Z","type":"join"}
{"nick":"saghul_","date":"2016-06-30T15:38:17.150Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 276 seconds","date":"2016-06-30T15:43:06.653Z","type":"quit"}
{"nick":"seishun","reason":"Disconnected by services","date":"2016-06-30T15:53:08.146Z","type":"quit"}
{"nick":"seishun","date":"2016-06-30T15:53:14.571Z","type":"join"}
{"nick":"brson","date":"2016-06-30T16:31:04.648Z","type":"join"}
{"nick":"rmg","date":"2016-06-30T16:31:48.135Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 272 seconds","date":"2016-06-30T16:36:48.120Z","type":"quit"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-06-30T16:44:23.173Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 272 seconds","date":"2016-06-30T17:00:52.166Z","type":"quit"}
{"nick":"seishun","date":"2016-06-30T17:04:52.344Z","type":"join"}
{"nick":"rmg","date":"2016-06-30T17:20:00.678Z","type":"join"}
{"nick":"grantila","date":"2016-06-30T17:23:22.993Z","type":"join"}
{"nick":"rmg_","date":"2016-06-30T17:23:36.505Z","type":"join"}
{"nick":"ncthom91","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2016-06-30T17:24:57.731Z","type":"quit"}
{"nick":"ncthom91","date":"2016-06-30T17:27:10.915Z","type":"join"}
{"nick":"rmg_","reason":"Ping timeout: 272 seconds","date":"2016-06-30T17:28:44.131Z","type":"quit"}
{"nick":"thnee","date":"2016-06-30T17:31:32.799Z","type":"join"}
{"nick":"saghul","message":"avih: in general, things that inherit from uv_stream_t don't have a blocking API","date":"2016-06-30T17:33:46.758Z","type":"message"}
{"nick":"saghul","message":"uv_stream_set_blocking is kind of a hack","date":"2016-06-30T17:34:05.220Z","type":"message"}
{"nick":"saghul","message":"the funny part is that the windows TTY part is actually blocking IIRC, we make it look non-blocking","date":"2016-06-30T17:34:32.899Z","type":"message"}
{"nick":"saghul","message":"but there is no way to make uv_tty have blocking writes on Windows ATM","date":"2016-06-30T17:34:56.238Z","type":"message"}
{"nick":"saghul","message":"sorry, uv_pipe that is","date":"2016-06-30T17:35:03.152Z","type":"message"}
{"nick":"saghul","message":"also, we don't have a uv_stream \"subclass\" which writes to a file, which means that abstracting everything as you wish is just not possible","date":"2016-06-30T17:35:44.209Z","type":"message"}
{"nick":"ncthom91","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2016-06-30T17:46:54.281Z","type":"quit"}
{"nick":"happy-dude","reason":"Ping timeout: 272 seconds","date":"2016-06-30T18:25:44.223Z","type":"quit"}
{"nick":"happy-dude","date":"2016-06-30T18:26:43.331Z","type":"join"}
{"nick":"qard","date":"2016-06-30T18:27:14.149Z","type":"join"}
{"nick":"Adam__","reason":"Remote host closed the connection","date":"2016-06-30T18:35:11.882Z","type":"quit"}
{"nick":"Harageth","date":"2016-06-30T18:37:49.732Z","type":"join"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2016-06-30T18:48:40.748Z","type":"quit"}
{"nick":"rmg","date":"2016-06-30T18:49:17.432Z","type":"join"}
{"nick":"saghul_","date":"2016-06-30T18:50:57.700Z","type":"join"}
{"nick":"Harageth","reason":"Remote host closed the connection","date":"2016-06-30T18:51:32.092Z","type":"quit"}
{"nick":"Harageth","date":"2016-06-30T18:52:34.277Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 260 seconds","date":"2016-06-30T18:54:04.458Z","type":"quit"}
{"nick":"avih","message":"saghul: thanks. though i think something doesn't add up. stream_set_blocking does succeed for a pipe, but not for a tty, contrary to what you said. see src/win/stream.c - it return EINVAL for anything which is NOT a pipe","date":"2016-06-30T19:17:41.377Z","type":"message"}
{"nick":"avih","message":"so basically, fs_* API can be blocking with null cb, and pipe can be blocking on win and linux using set_stream_blocking. tty can be made blocking too on linux, but can't (at least API wise) on windows","date":"2016-06-30T19:19:12.148Z","type":"message"}
{"nick":"avih","message":"which is indeed kinda funny since apparently it's the only thing which is actually inherently blocking :)","date":"2016-06-30T19:20:01.893Z","type":"message"}
{"nick":"avih","message":"also, so how does node.js make stdout blocking also on windows and also as a TTY? hackery with wait loop?","date":"2016-06-30T19:23:35.164Z","type":"message"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-06-30T19:31:18.875Z","type":"quit"}
{"nick":"tunniclm_","date":"2016-06-30T19:33:08.144Z","type":"join"}
{"nick":"Harageth","reason":"Remote host closed the connection","date":"2016-06-30T19:52:54.444Z","type":"quit"}
{"nick":"Harageth","date":"2016-06-30T20:00:03.922Z","type":"join"}
{"nick":"rendar","reason":"Ping timeout: 252 seconds","date":"2016-06-30T20:02:46.483Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-06-30T20:14:07.135Z","type":"join"}
{"nick":"saghul_","date":"2016-06-30T20:17:30.578Z","type":"join"}
{"nick":"Harageth","reason":"Remote host closed the connection","date":"2016-06-30T20:24:42.085Z","type":"quit"}
{"nick":"rendar","date":"2016-06-30T20:32:38.164Z","type":"join"}
{"nick":"saghul","message":"avih: it doesn't make it blocking, that's part of the current problem","date":"2016-06-30T20:33:53.129Z","type":"message"}
{"nick":"saghul","message":"the general rule is that nothing should block on libuv","date":"2016-06-30T20:34:05.885Z","type":"message"}
{"nick":"saghul","message":"fs apis do have a blocking counterpart, however","date":"2016-06-30T20:34:17.916Z","type":"message"}
{"nick":"avih","message":"saghul: oh? so it succeeds, but it may still overwrite the buffer if i didn't wait for the callback?","date":"2016-06-30T20:34:30.441Z","type":"message"}
{"nick":"saghul","message":"no, write operations will just queue up","date":"2016-06-30T20:34:51.127Z","type":"message"}
{"nick":"avih","message":"(i.e. stream_set_blocking(..., 1) succeeds, that is)","date":"2016-06-30T20:34:54.083Z","type":"message"}
{"nick":"saghul","message":"you still need to wait for the callback to be called before being able to reuse the uv_write_t structure","date":"2016-06-30T20:35:21.428Z","type":"message"}
{"nick":"saghul","message":"that's why that API is wrong","date":"2016-06-30T20:35:32.330Z","type":"message"}
{"nick":"avih","message":"so bottom line is that with uv_stream_t i must always wait for the callback before pushing more data using a specific handle?","date":"2016-06-30T20:36:28.275Z","type":"message"}
{"nick":"avih","message":"(sorry.. not sure i got it.. it's confusing to me..)","date":"2016-06-30T20:36:55.522Z","type":"message"}
{"nick":"saghul","message":"no, you can push as much data as you want, it will be queued up","date":"2016-06-30T20:36:59.019Z","type":"message"}
{"nick":"saghul","message":"I was referring to your question about overriding buffers, but maybe I got confused :-)","date":"2016-06-30T20:37:19.243Z","type":"message"}
{"nick":"saghul","message":"what do you want to achieve?","date":"2016-06-30T20:37:23.215Z","type":"message"}
{"nick":"avih","message":"that i can call write without having to wait for the callback in order to call it again","date":"2016-06-30T20:37:51.680Z","type":"message"}
{"nick":"saghul","message":"you don't have to wait for it","date":"2016-06-30T20:38:14.524Z","type":"message"}
{"nick":"avih","message":"on all platforms?","date":"2016-06-30T20:38:25.768Z","type":"message"}
{"nick":"saghul","message":"just keep calling write, the request will be queued and written in order","date":"2016-06-30T20:38:27.784Z","type":"message"}
{"nick":"saghul","message":"yes","date":"2016-06-30T20:38:30.423Z","type":"message"}
{"nick":"avih","message":"oh, ok.","date":"2016-06-30T20:38:43.205Z","type":"message"}
{"nick":"saghul","message":"when the write actually happens (since it's async) the callback will be called","date":"2016-06-30T20:38:53.195Z","type":"message"}
{"nick":"avih","message":"so what does the set_blocking do? make it not queued and instead block until it was written out by libuv?","date":"2016-06-30T20:39:11.178Z","type":"message"}
{"nick":"saghul","message":"so there you can free the resources associated with that particular write (like the buffer)","date":"2016-06-30T20:39:11.492Z","type":"message"}
{"nick":"saghul","message":"yep","date":"2016-06-30T20:39:19.894Z","type":"message"}
{"nick":"saghul","message":"but as you saw, it doesn't work for all types of uv_stream across platforms, it's a weak API, stay away from it :-)","date":"2016-06-30T20:39:50.910Z","type":"message"}
{"nick":"avih","message":"oh, so the callback is mostly for me to know that i can free stuff up?","date":"2016-06-30T20:40:10.087Z","type":"message"}
{"nick":"saghul","message":"yes, and to let you know that the write happened","date":"2016-06-30T20:40:30.796Z","type":"message"}
{"nick":"avih","message":"(and to know it was actually written out, if i'm interested in that kind of info)","date":"2016-06-30T20:40:38.870Z","type":"message"}
{"nick":"avih","message":"right","date":"2016-06-30T20:40:47.133Z","type":"message"}
{"nick":"avih","message":"i'll go over my code again to see how i'm handling it. thanks.","date":"2016-06-30T20:41:21.511Z","type":"message"}
{"nick":"saghul","message":"the uv_write_t needs to be allocated on the heap (well, kinda, it has to be valid untill the callback kicks in)","date":"2016-06-30T20:41:37.977Z","type":"message"}
{"nick":"avih","message":"saghul: one thing though, i think something at the docs confused me about multiple writes before the callback. might be worth clearing it up. sec, let me try finding it","date":"2016-06-30T20:41:54.318Z","type":"message"}
{"nick":"saghul","message":"so the callback lets you know that you can free that (or reuse it) along with the actual data buffer","date":"2016-06-30T20:41:59.487Z","type":"message"}
{"nick":"saghul","message":"sure","date":"2016-06-30T20:42:10.356Z","type":"message"}
{"nick":"avih","message":"saghul: so that's the current uv_write_t doc: \"Write request type. Careful attention must be paid when reusing objects of this type. When a stream is in non-blocking mode, write requests sent with uv_write will be queued. Reusing objects at this point is undefined behaviour. It is safe to reuse the uv_write_t object only after the callback passed to uv_write is fired.\"","date":"2016-06-30T20:48:12.341Z","type":"message"}
{"nick":"saghul","message":"yep, that was added because some people thought they could allocate a single uv_write_t and reuse it every time they call uv_write","date":"2016-06-30T20:49:12.967Z","type":"message"}
{"nick":"saghul","message":"(since the write callback is optional)","date":"2016-06-30T20:49:24.644Z","type":"message"}
{"nick":"saghul","message":"but that's not the case, the uv_write_t can only be reused *after* the callback is called","date":"2016-06-30T20:49:42.875Z","type":"message"}
{"nick":"avih","message":"not sure if that's the part which confused me, but maybe adding something along the lines of \"note that the buffer/uv_write_t object can only be freed/reused after the callback was invoked (in case of non blocking), however, you can still send more write requests before the callback of previous write requests was invoked - as long as you use new buffers/uv_write_t objects for those new requests\"","date":"2016-06-30T20:50:35.970Z","type":"message"}
{"nick":"saghul","message":"care to send a documentation PR?","date":"2016-06-30T20:51:14.730Z","type":"message"}
{"nick":"avih","message":"does that ^ sound reasonable?","date":"2016-06-30T20:51:28.675Z","type":"message"}
{"nick":"avih","message":"(with some polishing)","date":"2016-06-30T20:51:37.829Z","type":"message"}
{"nick":"saghul","message":"interestignly the text you referenced was a recent contribution to help clarify the behavior","date":"2016-06-30T20:51:40.544Z","type":"message"}
{"nick":"avih","message":"interesting","date":"2016-06-30T20:51:49.641Z","type":"message"}
{"nick":"saghul","message":"sure","date":"2016-06-30T20:51:50.397Z","type":"message"}
{"nick":"saghul","message":"maybe that should be added to the description of uv_write(...)","date":"2016-06-30T20:52:06.208Z","type":"message"}
{"nick":"saghul","message":"instead of the type declaration","date":"2016-06-30T20:52:21.262Z","type":"message"}
{"nick":"avih","message":"indeed","date":"2016-06-30T20:52:33.134Z","type":"message"}
{"nick":"avih","message":"yeah, i'll read the stream doc again and try to make it a bit better, and then send a PR","date":"2016-06-30T20:53:02.520Z","type":"message"}
{"nick":"avih","message":"thanks again for your help","date":"2016-06-30T20:53:52.148Z","type":"message"}
{"nick":"saghul","message":"no problem, thanks!","date":"2016-06-30T20:55:58.445Z","type":"message"}
{"nick":"avih","message":":)","date":"2016-06-30T20:56:03.492Z","type":"message"}
{"nick":"avih","message":"saghul: also, an abstraction of an always appending stdout, pretty much like printf behaves in C (i.e. doesn't care if it's a pipe, or a >/>> redirect or a TTY) would still be useful IMO ;)","date":"2016-06-30T20:58:04.797Z","type":"message"}
{"nick":"avih","message":"possibly the same for stdin too","date":"2016-06-30T20:59:09.075Z","type":"message"}
{"nick":"saghul","message":"I don't disagree :-) But it can be built on top of the current building blocks...","date":"2016-06-30T21:10:39.989Z","type":"message"}
{"nick":"avih","message":"it can indeed, which i managed, but it still places burder on the lib users compared to how they would use stdin/out in other frameworks IMO","date":"2016-06-30T21:21:24.234Z","type":"message"}
{"nick":"avih","message":"burden*","date":"2016-06-30T21:21:33.948Z","type":"message"}
{"nick":"avih","message":"also, you almost can, since to figure out the std handle type you have to use an api which has a \"guess\" in its name, suggesting it might not be bullet proof","date":"2016-06-30T21:22:20.482Z","type":"message"}
{"nick":"avih","message":"it would have inspired more confidence is it was s/uv_guess_handle/uv_get_handle_type/","date":"2016-06-30T21:24:56.043Z","type":"message"}
{"nick":"avih","message":"especially the UV_FILE (redirect) should be treated inherently differently not only init, i.e. their write (for stdout) APIs are quite different","date":"2016-06-30T21:27:04.105Z","type":"message"}
{"nick":"avih","message":"than for pipe/tty","date":"2016-06-30T21:27:23.991Z","type":"message"}
{"nick":"Alcest","reason":"*.net *.split","date":"2016-06-30T21:45:38.292Z","type":"quit"}
{"nick":"_hayes","reason":"*.net *.split","date":"2016-06-30T21:45:38.545Z","type":"quit"}
{"nick":"dainis_","reason":"*.net *.split","date":"2016-06-30T21:45:38.759Z","type":"quit"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-06-30T22:03:04.078Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2016-06-30T22:07:25.943Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 272 seconds","date":"2016-06-30T22:23:14.162Z","type":"quit"}
{"nick":"grantila","reason":"Quit: Leaving.","date":"2016-06-30T22:39:41.526Z","type":"quit"}
{"nick":"Harageth","date":"2016-06-30T22:41:20.379Z","type":"join"}
{"nick":"saghul_","reason":"Quit: My MacBook Pro has gone to sleep. ZZZzzz…","date":"2016-06-30T23:39:30.578Z","type":"quit"}
{"nick":"bigkahunaburger","date":"2016-06-30T23:50:20.421Z","type":"join"}
{"nick":"brson","reason":"Quit: leaving","date":"2016-06-30T23:55:22.726Z","type":"quit"}
