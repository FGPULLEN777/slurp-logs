{"nick":"saghul","date":"2017-11-03T00:44:55.162Z","type":"join"}
{"nick":"qard","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-11-03T00:48:06.893Z","type":"quit"}
{"nick":"saghul","reason":"Ping timeout: 240 seconds","date":"2017-11-03T00:49:01.216Z","type":"quit"}
{"nick":"happy-dude","reason":"Quit: Connection closed for inactivity","date":"2017-11-03T01:02:20.720Z","type":"quit"}
{"nick":"qard","date":"2017-11-03T01:06:34.632Z","type":"join"}
{"nick":"saghul","date":"2017-11-03T04:42:25.844Z","type":"join"}
{"nick":"saghul","reason":"Ping timeout: 240 seconds","date":"2017-11-03T04:46:27.772Z","type":"quit"}
{"nick":"qard","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-11-03T05:50:20.338Z","type":"quit"}
{"nick":"qard","date":"2017-11-03T06:00:17.621Z","type":"join"}
{"nick":"qard","reason":"Client Quit","date":"2017-11-03T06:02:32.154Z","type":"quit"}
{"nick":"rendar","date":"2017-11-03T07:29:20.015Z","type":"join"}
{"nick":"saghul","date":"2017-11-03T08:23:32.638Z","type":"join"}
{"nick":"saghul","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-11-03T09:01:06.866Z","type":"quit"}
{"nick":"saghul","date":"2017-11-03T09:05:50.440Z","type":"join"}
{"nick":"saghul","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-11-03T09:53:35.647Z","type":"quit"}
{"nick":"saghul","date":"2017-11-03T09:58:35.098Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2017-11-03T10:25:11.124Z","type":"quit"}
{"nick":"mylesborins","date":"2017-11-03T10:25:42.048Z","type":"join"}
{"nick":"saghul","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-11-03T10:34:52.863Z","type":"quit"}
{"nick":"saghul","date":"2017-11-03T10:54:53.192Z","type":"join"}
{"nick":"qard","date":"2017-11-03T11:03:57.842Z","type":"join"}
{"nick":"qard","reason":"Ping timeout: 240 seconds","date":"2017-11-03T11:08:28.038Z","type":"quit"}
{"nick":"saghul","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2017-11-03T11:13:04.180Z","type":"quit"}
{"nick":"AtumT","date":"2017-11-03T12:03:27.115Z","type":"join"}
{"nick":"saghul","date":"2017-11-03T13:35:41.656Z","type":"join"}
{"nick":"happy-dude","date":"2017-11-03T14:49:35.705Z","type":"join"}
{"nick":"joocain2","reason":"Read error: Connection reset by peer","date":"2017-11-03T15:38:31.872Z","type":"quit"}
{"nick":"joocain2","date":"2017-11-03T15:39:27.913Z","type":"join"}
{"nick":"qard","date":"2017-11-03T16:22:59.198Z","type":"join"}
{"nick":"Fishrock123","date":"2017-11-03T16:28:56.411Z","type":"join"}
{"nick":"saghul","reason":"Ping timeout: 246 seconds","date":"2017-11-03T17:01:09.651Z","type":"quit"}
{"nick":"soniex2","date":"2017-11-03T17:28:31.094Z","type":"join"}
{"nick":"soniex2","message":"how do I create sockets in thread A and pass them to threads B, C, D, ...?","date":"2017-11-03T17:29:14.034Z","type":"message"}
{"nick":"soniex2","message":"a la bind(s, ...) c = accept(s, ...) sendToThread(c)","date":"2017-11-03T17:31:26.475Z","type":"message"}
{"nick":"soniex2","message":"technically createThread(c) but w/e","date":"2017-11-03T17:33:33.871Z","type":"message"}
{"nick":"soniex2","message":"and yes, I do need multiple threads. this is all the bloody thing'll be doing, and it's running on a Pi. so to use the full CPU power I need the threads.","date":"2017-11-03T17:52:51.740Z","type":"message"}
{"nick":"soniex2","message":"(has anyone used libuv in embedded systems?)","date":"2017-11-03T17:53:26.617Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-03T18:03:20.462Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-03T18:03:58.654Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 246 seconds","date":"2017-11-03T18:08:00.646Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-03T18:14:07.701Z","type":"join"}
{"nick":"soniex2","message":"hello?","date":"2017-11-03T18:24:01.481Z","type":"message"}
{"nick":"refack","message":"soniex2: hi.","date":"2017-11-03T18:24:12.151Z","type":"message"}
{"nick":"soniex2","message":"any idea how I can make this thing work?","date":"2017-11-03T18:25:11.519Z","type":"message"}
{"nick":"refack","message":"AFAIK libuv is used extensively in PIs, mostly via nodejs","date":"2017-11-03T18:25:17.509Z","type":"message"}
{"nick":"soniex2","message":"yes let's put a 100MB-at-idle VM on a Pi","date":"2017-11-03T18:25:57.150Z","type":"message"}
{"nick":"soniex2","message":"sorry but I'd rather do this in C","date":"2017-11-03T18:26:19.525Z","type":"message"}
{"nick":"refack","message":"the main libuv loop is single threaded (only the thread holding the loop is guaranteed safety)","date":"2017-11-03T18:26:33.169Z","type":"message"}
{"nick":"refack","message":"Agreed, just referring to in the field usage","date":"2017-11-03T18:27:03.153Z","type":"message"}
{"nick":"soniex2","message":"my current blocking C code does s=socket(...) bind(s,...) loop{c=accept(s,...) sendToThread(c)}","date":"2017-11-03T18:27:23.764Z","type":"message"}
{"nick":"refack","message":"You could harness libuv's thread pool - http://docs.libuv.org/en/v1.x/threadpool.html","date":"2017-11-03T18:28:01.543Z","type":"message"}
{"nick":"soniex2","message":"then it seems to call getpeername and getnameinfo in the thread, I'm not sure what those do","date":"2017-11-03T18:28:58.411Z","type":"message"}
{"nick":"refack","message":"so if your thread code does not interact with the loop, and you guarantee exclusivity on `c`, there should be no problem AFAICT","date":"2017-11-03T18:29:06.348Z","type":"message"}
{"nick":"soniex2","message":"oh yeah I also need to interact with mysql somehow","date":"2017-11-03T18:29:55.615Z","type":"message"}
{"nick":"refack","message":"So, what node does for this cases is multi-proc - start NumOfCores proc and pass the sockets in a round robin, i.e. use the patterns of  https://nodejs.org/api/cluster.html but just in C","date":"2017-11-03T18:33:14.044Z","type":"message"}
{"nick":"refack","message":"You could alternatively guard exclusivity for all interactions with the loop","date":"2017-11-03T18:34:21.480Z","type":"message"}
{"nick":"refack","message":"But it seems like your case fits well with the reactive model","date":"2017-11-03T18:34:54.752Z","type":"message"}
{"nick":"soniex2","message":"how do I send sockets to threads like I'm currently doing, but non-blocking?","date":"2017-11-03T18:36:33.421Z","type":"message"}
{"nick":"refack","message":"1. Main thread binds listing socket","date":"2017-11-03T18:36:39.554Z","type":"message"}
{"nick":"refack","message":"2. On libuv accept - uv_queue_work","date":"2017-11-03T18:36:39.556Z","type":"message"}
{"nick":"refack","message":"3. thread adds MySql callbacks to the loop (or blocks)","date":"2017-11-03T18:36:39.556Z","type":"message"}
{"nick":"soniex2","message":"why uv_queue_work?","date":"2017-11-03T18:37:11.964Z","type":"message"}
{"nick":"refack","message":"let libuv manage your thread pool","date":"2017-11-03T18:37:29.270Z","type":"message"}
{"nick":"soniex2","message":"no that'll cause issues with mysql","date":"2017-11-03T18:38:06.138Z","type":"message"}
{"nick":"refack","message":"so you can use http://docs.libuv.org/en/v1.x/stream.html#c.uv_accept and use the callback to `sendToThread`","date":"2017-11-03T18:41:57.287Z","type":"message"}
{"nick":"refack","message":"uv_accept is non-bloking","date":"2017-11-03T18:42:37.031Z","type":"message"}
{"nick":"soniex2","message":"but what do I send to the thread and what do I use in the thread?","date":"2017-11-03T18:52:44.690Z","type":"message"}
{"nick":"soniex2","message":"(because I can't find that on docs or internet search)","date":"2017-11-03T18:55:07.168Z","type":"message"}
{"nick":"refack","message":"the callback receives a uv_stream_t which has http://docs.libuv.org/en/v1.x/stream.html#c.uv_connect_t.handle which is ","date":"2017-11-03T18:55:19.318Z","type":"message"}
{"nick":"refack","message":"the socket","date":"2017-11-03T18:55:22.474Z","type":"message"}
{"nick":"qard","message":"Um...nodejs is nowhere near 100MB at idle. A basic http server for me idles at 9MB.","date":"2017-11-03T18:57:06.557Z","type":"message"}
{"nick":"refack","message":"you get it's FD with http://docs.libuv.org/en/v1.x/handle.html#c.uv_fileno","date":"2017-11-03T18:57:08.304Z","type":"message"}
{"nick":"qard","message":"Still could probably be lighter in pure C, but 100MB is hyperbole.","date":"2017-11-03T18:58:11.459Z","type":"message"}
{"nick":"refack","message":"soniex2: actually if all you want is nonblocking accept, might be simpler to call epoll directly ","date":"2017-11-03T19:00:15.750Z","type":"message"}
{"nick":"soniex2","message":"I want nonblocking everything but I also wanna send the socket to another thread","date":"2017-11-03T19:01:08.866Z","type":"message"}
{"nick":"refack","message":"libuv's value proposition is cross-platform-uniform API for all blocking syscalls like FS, tty, and timers","date":"2017-11-03T19:01:35.010Z","type":"message"}
{"nick":"refack","message":"Ahh","date":"2017-11-03T19:01:40.544Z","type":"message"}
{"nick":"refack","message":"then use uv_accept and unwrap the socket","date":"2017-11-03T19:02:09.819Z","type":"message"}
{"nick":"soniex2_","date":"2017-11-03T19:04:40.021Z","type":"join"}
{"nick":"soniex2_","message":"ok so if I unwrap the socket how do I wrap it back so I can actually use it?","date":"2017-11-03T19:05:05.791Z","type":"message"}
{"nick":"soniex2","reason":"Ping timeout: 260 seconds","date":"2017-11-03T19:05:55.110Z","type":"quit"}
{"nick":"soniex2_","message":"also can I tell libuv to do its best to read N bytes and only call my cb if it read N bytes or something went wrong?","date":"2017-11-03T19:05:58.718Z","type":"message"}
{"nick":"refack","message":"yes, using the stream API","date":"2017-11-03T19:06:19.324Z","type":"message"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2017-11-03T19:09:02.290Z","type":"quit"}
{"nick":"refack","message":"soniex2_: ","date":"2017-11-03T19:10:00.014Z","type":"message"}
{"nick":"refack","message":"the unwrapped socket is it's FD you can call `read` on it as usual","date":"2017-11-03T19:10:32.624Z","type":"message"}
{"nick":"refack","message":"This might help - https://github.com/Ryannnnnnn/libuv-httpserver","date":"2017-11-03T19:13:37.064Z","type":"message"}
{"nick":"refack","message":"or https://github.com/litesync/uv_callback","date":"2017-11-03T19:16:04.496Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-03T20:37:01.996Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-03T20:37:17.753Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-03T20:37:47.390Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-03T21:03:44.673Z","type":"join"}
{"nick":"soniex2_","reason":"Ping timeout: 260 seconds","date":"2017-11-03T21:07:15.080Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-03T22:46:38.683Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-03T22:46:53.705Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2017-11-03T22:47:24.394Z","type":"quit"}
{"nick":"Fishrock123","date":"2017-11-03T23:21:56.695Z","type":"join"}
{"nick":"tumdedum","reason":"Ping timeout: 240 seconds","date":"2017-11-03T23:28:57.951Z","type":"quit"}
{"nick":"tumdedum","date":"2017-11-03T23:29:37.395Z","type":"join"}
{"nick":"happy-dude","reason":"Quit: Connection closed for inactivity","date":"2017-11-03T23:59:30.794Z","type":"quit"}
