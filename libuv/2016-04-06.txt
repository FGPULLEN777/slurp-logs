{"nick":"happy-dude","reason":"Quit: Connection closed for inactivity","date":"2016-04-06T00:19:57.566Z","type":"quit"}
{"nick":"rcyr","date":"2016-04-06T00:25:30.055Z","type":"join"}
{"nick":"dap_","reason":"Quit: Leaving.","date":"2016-04-06T00:30:44.767Z","type":"quit"}
{"nick":"rcyr","new_nick":"systemfault","date":"2016-04-06T00:50:57.439Z","type":"nick"}
{"nick":"Ruyi","date":"2016-04-06T01:16:30.634Z","type":"join"}
{"nick":"hij1nx_","message":"txdv: ping","date":"2016-04-06T01:24:48.157Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2016-04-06T01:42:41.944Z","type":"quit"}
{"nick":"Perilous_","reason":"Ping timeout: 250 seconds","date":"2016-04-06T01:57:57.021Z","type":"quit"}
{"nick":"PerilousApricot","date":"2016-04-06T02:07:18.448Z","type":"join"}
{"nick":"happy-dude","date":"2016-04-06T02:10:15.308Z","type":"join"}
{"nick":"Fishrock123","date":"2016-04-06T02:11:14.833Z","type":"join"}
{"nick":"brson","reason":"Quit: leaving","date":"2016-04-06T02:28:05.739Z","type":"quit"}
{"nick":"tunniclm_","reason":"Ping timeout: 276 seconds","date":"2016-04-06T02:57:12.286Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2016-04-06T03:11:50.038Z","type":"quit"}
{"nick":"PerilousApricot","reason":"Remote host closed the connection","date":"2016-04-06T03:34:09.113Z","type":"quit"}
{"nick":"PerilousApricot","date":"2016-04-06T03:34:54.984Z","type":"join"}
{"nick":"frandagostino","reason":"Ping timeout: 252 seconds","date":"2016-04-06T03:39:37.585Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-04-06T03:43:00.834Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2016-04-06T04:09:27.565Z","type":"quit"}
{"nick":"frandagostino","date":"2016-04-06T04:38:24.272Z","type":"join"}
{"nick":"txdv","message":"hij1nx_: pong?","date":"2016-04-06T04:41:33.639Z","type":"message"}
{"nick":"frandagostino","reason":"Ping timeout: 276 seconds","date":"2016-04-06T05:18:54.272Z","type":"quit"}
{"nick":"seishun","date":"2016-04-06T05:43:53.934Z","type":"join"}
{"nick":"PerilousApricot","reason":"Remote host closed the connection","date":"2016-04-06T05:59:23.240Z","type":"quit"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2016-04-06T06:54:41.165Z","type":"quit"}
{"nick":"rmg","date":"2016-04-06T06:55:17.583Z","type":"join"}
{"nick":"Dirkson","date":"2016-04-06T06:57:14.896Z","type":"join"}
{"nick":"Dirkson","message":"Hey all. I'm having some horrible issues with uv_async_send. Since it coalesces calls, I can't actually use the uv_async_t data type to send data - If I send an int, it's likely to be dropped on the floor. If I send a pointer, it's likely to drop the *pointer* on the floor, ensuring a data leak. Am I actually intended to send data via uv_async_Send? If so, how? If not, why does it have uv_async_t->data?","date":"2016-04-06T06:59:48.003Z","type":"message"}
{"nick":"rmg","reason":"Ping timeout: 252 seconds","date":"2016-04-06T06:59:49.423Z","type":"quit"}
{"nick":"txdv","message":"use a queue","date":"2016-04-06T07:03:25.808Z","type":"message"}
{"nick":"Dirkson","message":"txdv: Oh, is that provided?","date":"2016-04-06T07:03:55.187Z","type":"message"}
{"nick":"txdv","message":"lock the queue, add the your item to the queue, unlock it, send a notification with uv_send, on receiving lock the queue, dequeue all elements, unlock the queue, enjoy the use of all your elements","date":"2016-04-06T07:04:09.589Z","type":"message"}
{"nick":"txdv","message":"Dirkson: i dont think so","date":"2016-04-06T07:04:21.530Z","type":"message"}
{"nick":"Dirkson","message":"I feel like this has bitten me before. Maybe I should be scrawling \"uv_asynt_send does not send, and does not have data, despite having a data member\" across the top of my uv files.","date":"2016-04-06T07:04:30.686Z","type":"message"}
{"nick":"txdv","message":"if you do 2 uv_async_sends and the other event loop doesn't manage to handle the first 'send' then it will coalese them together, you are right","date":"2016-04-06T07:05:19.429Z","type":"message"}
{"nick":"Dirkson","message":"Which drops either data or pointers on the floor.","date":"2016-04-06T07:05:39.298Z","type":"message"}
{"nick":"txdv","message":"i dont understand what you want to say with 'drops data or pointers on the floor'","date":"2016-04-06T07:06:00.889Z","type":"message"}
{"nick":"Dirkson","message":"txdv: If it coalesces calls, then I lose whatever data was in uv_async_t->data. If that's a pointer, I now have a memory leak. Therefore, I really can't imagine a scenario where passing data into uv_async_t's data member works.","date":"2016-04-06T07:07:14.897Z","type":"message"}
{"nick":"txdv","message":"yes that is true","date":"2016-04-06T07:07:29.616Z","type":"message"}
{"nick":"txdv","message":"as i said, i would just use a queue and use uv_send like a notification system that there is some data in the queue","date":"2016-04-06T07:07:55.913Z","type":"message"}
{"nick":"txdv","message":"the queue will take care of 'decoalescing' or whatever you want to call it","date":"2016-04-06T07:08:12.864Z","type":"message"}
{"nick":"Dirkson","message":"txdv: Yeah, I think this is probably a good way to move forward. I'm just frustrated this bit me again. I'm really displeased with a function called 'send' that LOOKS like it can send data being completely unable to send data","date":"2016-04-06T07:08:52.822Z","type":"message"}
{"nick":"txdv","message":"I remember raising some concern about this","date":"2016-04-06T07:09:29.639Z","type":"message"}
{"nick":"txdv","message":"but the janitors said it is supposed to be like that","date":"2016-04-06T07:09:40.617Z","type":"message"}
{"nick":"txdv","message":"'there are no guarantees that for each send there will be a callback'","date":"2016-04-06T07:09:50.254Z","type":"message"}
{"nick":"txdv","message":"it might get coalesed, as you said","date":"2016-04-06T07:09:57.299Z","type":"message"}
{"nick":"txdv","message":"https://github.com/txdv/LibuvSharp/blob/master/LibuvSharp/AsyncWatcher.cs","date":"2016-04-06T07:10:14.079Z","type":"message"}
{"nick":"txdv","message":"this is how i deal with it","date":"2016-04-06T07:10:17.084Z","type":"message"}
{"nick":"Dirkson","message":"Removing its data member would help. And removing the really REALLY broken example using its data member in the documentation would help more.","date":"2016-04-06T07:10:33.989Z","type":"message"}
{"nick":"txdv","message":"can you give me a link to that exmaple?","date":"2016-04-06T07:10:54.117Z","type":"message"}
{"nick":"Dirkson","message":"txdv: Ah, this is a bit greek to me. More a C guy than a C++ one.","date":"2016-04-06T07:11:09.450Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 244 seconds","date":"2016-04-06T07:11:13.675Z","type":"quit"}
{"nick":"Dirkson","message":"txdv: Yeah, hold on a tick.","date":"2016-04-06T07:11:13.834Z","type":"message"}
{"nick":"txdv","message":"Dirkson: the code is very minimal","date":"2016-04-06T07:11:38.039Z","type":"message"}
{"nick":"txdv","message":"it does exactly what I said, create a queue with every uv_async_t and then on the queue, enques, deques, dispatches","date":"2016-04-06T07:13:29.614Z","type":"message"}
{"nick":"txdv","message":"but yeah, maybe i will try to push it as a change","date":"2016-04-06T07:14:33.187Z","type":"message"}
{"nick":"txdv","message":"Dirkson: is it coalescing on windows or linux?","date":"2016-04-06T07:14:40.022Z","type":"message"}
{"nick":"Dirkson","message":"txdv: https://nikhilm.github.io/uvbook/threads.html - Most of the way down the page, the first example in the \"Inter-thread communication\" section. The example ONLY works when the pointer is global to all libuv functions using it, and is never freed. I've never really seen anyone use a pointer like that. Most real world implementations are going to want to break one of those two things... and fall afoul of the","date":"2016-04-06T07:16:04.478Z","type":"message"}
{"nick":"Dirkson","message":"warning below the example. Like... It's technically correct, especially with the warning right there, but ooooh-so-misleading.","date":"2016-04-06T07:16:06.896Z","type":"message"}
{"nick":"Dirkson","message":"txdv: I'm on linux. I haven't tested the windows build behavior.","date":"2016-04-06T07:16:23.558Z","type":"message"}
{"nick":"txdv","message":"i remember that it coalesces on one but not on the other","date":"2016-04-06T07:17:02.119Z","type":"message"}
{"nick":"txdv","message":"so i guess it does it on linux","date":"2016-04-06T07:17:12.604Z","type":"message"}
{"nick":"Dirkson","message":"Interesting!","date":"2016-04-06T07:17:21.469Z","type":"message"}
{"nick":"txdv","message":"it has bitten many asses in this channel","date":"2016-04-06T07:19:32.996Z","type":"message"}
{"nick":"txdv","message":"and i am for implementing a variant where it does not coalesce the calls","date":"2016-04-06T07:19:51.296Z","type":"message"}
{"nick":"Dirkson","message":"Makes sense. For the time being, I'm just going to do your queue idea. That's a solid one : )","date":"2016-04-06T07:20:40.482Z","type":"message"}
{"nick":"txdv","message":"Dirkson: libuv may also combine multiple calls to uv_async_send and invoke your callback only once","date":"2016-04-06T07:21:49.109Z","type":"message"}
{"nick":"txdv","message":"in the warning tooltip","date":"2016-04-06T07:21:53.715Z","type":"message"}
{"nick":"txdv","message":"in that documentation","date":"2016-04-06T07:21:55.772Z","type":"message"}
{"nick":"txdv","message":"second sentence","date":"2016-04-06T07:22:01.879Z","type":"message"}
{"nick":"Dirkson","message":"txdv: Yup. It's there, and I'm sure I've read it before, but that data member keeps leading me down the wrong path. Most other data members in libuv *can* be trusted for this sort of thing.","date":"2016-04-06T07:23:18.304Z","type":"message"}
{"nick":"Dirkson","message":"... I think. Now I'm less certain of myself.","date":"2016-04-06T07:23:30.099Z","type":"message"}
{"nick":"txdv","message":"the others have a uv_req where the data member lives","date":"2016-04-06T07:24:23.298Z","type":"message"}
{"nick":"txdv","message":"this one doesnt","date":"2016-04-06T07:24:50.496Z","type":"message"}
{"nick":"Dirkson","message":"That sounds familiar","date":"2016-04-06T07:24:50.672Z","type":"message"}
{"nick":"txdv","message":"the data member of this one is associated only with the handle itself","date":"2016-04-06T07:25:35.579Z","type":"message"}
{"nick":"txdv","message":"you are using async_t data member therefore obviously if you use it twice in different places you are going to overwrite it","date":"2016-04-06T07:27:07.088Z","type":"message"}
{"nick":"txdv","message":"if i were you i would store the queue pointer in there","date":"2016-04-06T07:27:23.121Z","type":"message"}
{"nick":"Dirkson","message":"Ugh. Yeah, you're right.","date":"2016-04-06T07:28:12.807Z","type":"message"}
{"nick":"Dirkson","message":"txdv: Thanks for the help and for letting me sound my frustrations : )","date":"2016-04-06T07:44:51.572Z","type":"message"}
{"nick":"txdv","message":"you are welcome","date":"2016-04-06T07:51:42.951Z","type":"message"}
{"nick":"txdv","message":"what are you coding with libuv?","date":"2016-04-06T07:51:53.671Z","type":"message"}
{"nick":"rendar","date":"2016-04-06T07:52:01.951Z","type":"join"}
{"nick":"Dirkson","message":"txdv: https://scrumbleship.com/ - Spacegame!   More current video: https://www.youtube.com/watch?v=yi71aoDFZ2E","date":"2016-04-06T07:53:05.791Z","type":"message"}
{"nick":"txdv","message":"looks like minecraft","date":"2016-04-06T07:55:39.348Z","type":"message"}
{"nick":"txdv","message":"did you write it with C?","date":"2016-04-06T07:55:43.122Z","type":"message"}
{"nick":"Dirkson","message":"I get that a lot. It's a bit different, although there's a solid Minecraft influence. Yup, plain C all the way through.","date":"2016-04-06T07:56:11.653Z","type":"message"}
{"nick":"txdv","message":"looks like it has already a lot of people playing it","date":"2016-04-06T07:56:33.295Z","type":"message"}
{"nick":"Dirkson","message":"There's a bit of a community. Still small.","date":"2016-04-06T07:56:48.731Z","type":"message"}
{"nick":"txdv","message":"are you the only developer?","date":"2016-04-06T07:57:47.786Z","type":"message"}
{"nick":"Dirkson","message":"Yup. Although we occasionally have community members contributing resources or patches.","date":"2016-04-06T07:58:33.303Z","type":"message"}
{"nick":"Ralith","message":"Dirkson: uv_async_send is purely for notification, it is not a message passing mechanism in and of itself","date":"2016-04-06T07:59:47.559Z","type":"message"}
{"nick":"Ralith","message":"the data member functions exactly the same way the data member of every other uv struct does","date":"2016-04-06T07:59:57.011Z","type":"message"}
{"nick":"happy-dude","reason":"Quit: Connection closed for inactivity","date":"2016-04-06T07:59:57.590Z","type":"quit"}
{"nick":"Ralith","message":"i.e. it is not special in any way","date":"2016-04-06T08:00:12.854Z","type":"message"}
{"nick":"Ralith","message":"the \"documentation\" that you linked is both unofficial and very old","date":"2016-04-06T08:01:02.835Z","type":"message"}
{"nick":"Ralith","message":"strongly recommend referring to the up-to-date official documentation and/or the source code","date":"2016-04-06T08:01:23.461Z","type":"message"}
{"nick":"Dirkson","message":"Ralith: The name and data member make it solidly misleading, at least for me. I'm at least partially frustrated at myself, because I'm pretty sure it's bitten me before.","date":"2016-04-06T08:01:39.392Z","type":"message"}
{"nick":"Ralith","message":"the data member is identical in every way to the data member of every other libuv struct; changing it would be a poor design decision","date":"2016-04-06T08:02:17.484Z","type":"message"}
{"nick":"Dirkson","message":"Ralith: docs.libuv.org is the official documentation?","date":"2016-04-06T08:02:25.034Z","type":"message"}
{"nick":"Ralith","message":"indeed","date":"2016-04-06T08:02:34.519Z","type":"message"}
{"nick":"Dirkson","message":"Ralith: From a user perspective - I can use every other data member I'm aware of to send data from one portion of libuv to another. But this one I cannot. I realize this probably makes internal sense, but it's pretty darn confusing once you get to the bits of libuv exposed to me.","date":"2016-04-06T08:03:28.951Z","type":"message"}
{"nick":"Ralith","message":"the intended use of the data members is to associate user data with a specific handle so that it can be recovered in that handle's callbacks","date":"2016-04-06T08:04:34.107Z","type":"message"}
{"nick":"Ralith","message":"this is true uniformly of every handle type","date":"2016-04-06T08:04:54.769Z","type":"message"}
{"nick":"Ralith","message":"I'm not sure why you expect async to work differently","date":"2016-04-06T08:05:01.185Z","type":"message"}
{"nick":"Ralith","message":"the 'data' field is in fact defined as part of the handle type and merely inherited by async, as it is by every other handle type","date":"2016-04-06T08:06:36.291Z","type":"message"}
{"nick":"txdv","message":"also in other place you use uv_req to store the data and not the handle itself","date":"2016-04-06T08:07:12.949Z","type":"message"}
{"nick":"txdv","message":"but still, people get confused, he is not the first one","date":"2016-04-06T08:07:53.287Z","type":"message"}
{"nick":"Ralith","message":"leaving that aside, it's prudent to make a point of very carefully studying the documentation of any parallelism-related operations you're using","date":"2016-04-06T08:08:06.424Z","type":"message"}
{"nick":"Ralith","message":"assumptions there will almost always cause bugs","date":"2016-04-06T08:08:10.740Z","type":"message"}
{"nick":"txdv","message":"http://docs.libuv.org/en/v1.x/async.html <- there is a big red box!","date":"2016-04-06T08:09:21.425Z","type":"message"}
{"nick":"systemfault","reason":"Quit: Bye!","date":"2016-04-06T08:09:35.594Z","type":"quit"}
{"nick":"Ralith","message":"the docs are really pretty clear on all matters here","date":"2016-04-06T08:09:39.327Z","type":"message"}
{"nick":"Ralith","message":"see also http://docs.libuv.org/en/v1.x/handle.html#c.uv_handle_t.data","date":"2016-04-06T08:09:58.323Z","type":"message"}
{"nick":"Ralith","message":"as cited from http://docs.libuv.org/en/v1.x/async.html#public-members","date":"2016-04-06T08:10:22.028Z","type":"message"}
{"nick":"Ralith","message":"there is only so much an API can do to save you from yourself if you're going to do parallelism without reading the docs :P","date":"2016-04-06T08:10:54.869Z","type":"message"}
{"nick":"Ralith","message":"(though it wouldn't hurt to have named the method 'notify' instead of 'send' I suppose)","date":"2016-04-06T08:11:34.214Z","type":"message"}
{"nick":"Dirkson","message":"Other libuv types that I currently access the data member of allow me to send pointers without dropping data. From my perspective, uv_async_t *is* special. I gather from your conversation that this is because it's a 'handle' type, but this differentiation isn't obvious when using libuv. I'm *not* saying you're wrong about the internal structure of libuv, just explaining why I personally find this part of it","date":"2016-04-06T08:12:14.902Z","type":"message"}
{"nick":"Dirkson","message":"very confusing.","date":"2016-04-06T08:12:16.899Z","type":"message"}
{"nick":"Ralith","message":"you are very confused, and it seems I'm not doing as good a job of addressing that as I hoped","date":"2016-04-06T08:12:58.666Z","type":"message"}
{"nick":"Ralith","message":"everything that has a 'data' member is a handle type","date":"2016-04-06T08:13:08.730Z","type":"message"}
{"nick":"Ralith","message":"per the documentation linked above, libuv never touches that member, ever","date":"2016-04-06T08:13:27.680Z","type":"message"}
{"nick":"Ralith","message":"it is purely for your own use","date":"2016-04-06T08:13:31.888Z","type":"message"}
{"nick":"Ralith","message":"thus, if you are accessing it from multiple threads, standard shared memory rules apply","date":"2016-04-06T08:13:55.853Z","type":"message"}
{"nick":"Ralith","message":"if you're not familiar with standard shared memory rules, they can be pretty well summed up as \"don't do that\"","date":"2016-04-06T08:14:29.136Z","type":"message"}
{"nick":"Ralith","message":"none of this has the slightest bit to do with libuv's internals, as can be seen by the fact that it's all laid out explicitly in the documentation of the public API","date":"2016-04-06T08:15:10.863Z","type":"message"}
{"nick":"txdv","message":"jeez, dont kill that dude with your official talk","date":"2016-04-06T08:15:51.215Z","type":"message"}
{"nick":"Ralith","message":"disclaimer: do not take me too seriously because it is 1AM","date":"2016-04-06T08:16:31.738Z","type":"message"}
{"nick":"Ralith","message":"but still, really, libuv has great docs and you would do yourself a great service by reading them :P","date":"2016-04-06T08:16:54.155Z","type":"message"}
{"nick":"txdv","message":"you sound like you are trying to prove a point with your over officialy style","date":"2016-04-06T08:17:06.337Z","type":"message"}
{"nick":"Ralith","message":"well, I am trying to prove a point.","date":"2016-04-06T08:17:27.161Z","type":"message"}
{"nick":"txdv","message":"and i agree that the data member on the handle should already warn the dev","date":"2016-04-06T08:17:39.601Z","type":"message"}
{"nick":"Dirkson","message":"With uv_udp_send_t, I can deal with the \"data\" member directly in callbacks, without appearing to leak memory. But I cannot do the same thing with uv_async_t. *Think* You're probably right that the major differentiation is the multithreaded nature of what uv_async is dealing with... But that still makes uv_async special : )  And anyway, you're still kinda going on the offensive, trying to dispell my confusion","date":"2016-04-06T08:17:41.774Z","type":"message"}
{"nick":"Dirkson","message":"- It's not really needed. txdv set me on the path of setting up a queue around uv_async, so I'm working on getting that set up. I'm just trying to communicate to you what I found confusing, because knowing what users find confusing about your design can be handy.","date":"2016-04-06T08:17:43.895Z","type":"message"}
{"nick":"txdv","message":"yeah, but uv_udp_send_t saves the data in the request, uv_async_send doesnt","date":"2016-04-06T08:18:37.980Z","type":"message"}
{"nick":"txdv","message":"its still confusing, im just telling you were the data is saved","date":"2016-04-06T08:18:56.466Z","type":"message"}
{"nick":"Dirkson","message":"And I definitely admit that some part of my confusion *this* time was my own damn falt. I'm pretty sure I ran into this problem before, and didn't leave myself good enough notes to avoid it. I've done that now... hopefully :D","date":"2016-04-06T08:19:30.224Z","type":"message"}
{"nick":"txdv","message":"ok, we are all sorry, the documentation is great, lets move on","date":"2016-04-06T08:19:48.026Z","type":"message"}
{"nick":"Ralith","message":">_>","date":"2016-04-06T08:20:10.204Z","type":"message"}
{"nick":"Ralith","message":"txdv: I'm not sure what you mean by \"saves the data in the request\"; the 'data' field of any handle is explicitly never read or written by libuv.","date":"2016-04-06T08:20:58.219Z","type":"message"}
{"nick":"Ralith","message":"it would rather defeat the point of being a user data pointer otherwise","date":"2016-04-06T08:21:46.651Z","type":"message"}
{"nick":"Ralith","message":"Dirkson: sorry to go off on a bit of a rant on you there","date":"2016-04-06T08:22:07.977Z","type":"message"}
{"nick":"Dirkson","message":"Ralith: Oh, don't worry about it. It's 1am, like you mentioned ^.^ My own bedtime was 5 hours ago...","date":"2016-04-06T08:22:32.733Z","type":"message"}
{"nick":"txdv","message":"udp_send, tcp_send has a request field, you have to create a request, the data field of it is never touched, yes","date":"2016-04-06T08:22:56.485Z","type":"message"}
{"nick":"txdv","message":"but the result is that every callback of send has a unique request associated with it","date":"2016-04-06T08:23:14.113Z","type":"message"}
{"nick":"Ralith","message":"speaking for myself, I frequently reuse requests :P","date":"2016-04-06T08:25:00.214Z","type":"message"}
{"nick":"txdv","message":"well, yes, but you do it only after you get the callback of it","date":"2016-04-06T08:25:28.440Z","type":"message"}
{"nick":"txdv","message":"which is issued by libuv to inform you that this request is ready to be used by someone else","date":"2016-04-06T08:25:40.978Z","type":"message"}
{"nick":"txdv","message":"now he probably just looked for the same data member, found it in the handle itself and then was confused why its not working","date":"2016-04-06T08:25:57.344Z","type":"message"}
{"nick":"txdv","message":"w/whois Ralith ","date":"2016-04-06T08:26:36.323Z","type":"message"}
{"nick":"txdv","message":"damn it","date":"2016-04-06T08:26:39.535Z","type":"message"}
{"nick":"txdv","message":":D","date":"2016-04-06T08:26:40.002Z","type":"message"}
{"nick":"Ralith","message":"rude","date":"2016-04-06T08:26:44.544Z","type":"message"}
{"nick":"Dirkson","message":"Ralith: I actually worked out I could reuse a request the other day! I'm not sure it really saves much time in my situation, but it was kinda pleasant to avoid an unneccesary free/malloc","date":"2016-04-06T08:26:45.979Z","type":"message"}
{"nick":"Ralith","message":"(not actually)","date":"2016-04-06T08:26:48.055Z","type":"message"}
{"nick":"txdv","message":"yeah, that is probably the main reason for reusing them","date":"2016-04-06T08:27:47.070Z","type":"message"}
{"nick":"txdv","message":"so you dont have free/malloc ALL the time","date":"2016-04-06T08:27:53.518Z","type":"message"}
{"nick":"Ralith","message":"Dirkson: for my purposes it's mostly about reducing bookkeeping effort rather than improving performance","date":"2016-04-06T08:28:21.001Z","type":"message"}
{"nick":"Dirkson","message":"Fair.","date":"2016-04-06T08:28:38.808Z","type":"message"}
{"nick":"txdv","message":"2 requests 1 buffer","date":"2016-04-06T08:29:19.192Z","type":"message"}
{"nick":"Ralith","message":"permature optimization is etc","date":"2016-04-06T08:29:34.993Z","type":"message"}
{"nick":"Dirkson","message":"You know, I'm tired enough that I keep finding myself wanting to chat at you guys rather than figure out how this queue should work. I think I'll head to bed. Thanks for the help : )","date":"2016-04-06T08:30:32.484Z","type":"message"}
{"nick":"Ralith","message":"\\o","date":"2016-04-06T08:31:07.600Z","type":"message"}
{"nick":"Ralith","message":"beware shared memory","date":"2016-04-06T08:31:10.316Z","type":"message"}
{"nick":"txdv","message":"he is so tired that he can't code and is forced to socialize","date":"2016-04-06T08:32:07.094Z","type":"message"}
{"nick":"txdv","message":"poor soul","date":"2016-04-06T08:32:10.254Z","type":"message"}
{"nick":"txdv","message":"must be exhausted","date":"2016-04-06T08:32:17.520Z","type":"message"}
{"nick":"Ralith","message":"haha","date":"2016-04-06T08:33:41.317Z","type":"message"}
{"nick":"rmg","date":"2016-04-06T09:56:34.110Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 260 seconds","date":"2016-04-06T10:01:27.700Z","type":"quit"}
{"nick":"Ruyi","reason":"Read error: Connection reset by peer","date":"2016-04-06T11:23:00.193Z","type":"quit"}
{"nick":"bawNg","message":"txdv: I'm going to be really busy over the next few days, so I'll have minimal time to work on this, but I just grabbed the 3.5 branch and tested connecting a client from a 3.5 VS project, which worked fine","date":"2016-04-06T11:47:02.687Z","type":"message"}
{"nick":"bawNg","message":"I had to add a Tuple to build the 3.5 solution: https://gist.github.com/bawNg/849af37c95e1a6527901c88f8b6b2bc6","date":"2016-04-06T11:47:19.579Z","type":"message"}
{"nick":"txdv","message":"-,-","date":"2016-04-06T11:48:21.526Z","type":"message"}
{"nick":"txdv","message":"I forgot to add the tuple","date":"2016-04-06T11:48:25.021Z","type":"message"}
{"nick":"txdv","message":"ill sit down thsi evening and merge the .net35 into master","date":"2016-04-06T11:48:59.423Z","type":"message"}
{"nick":"bawNg","message":"Keep in mind since the examples use tasks, they can't work for 3.5","date":"2016-04-06T11:49:23.087Z","type":"message"}
{"nick":"txdv","message":"i just did not commit the Tuple.cs but yeah","date":"2016-04-06T11:49:23.747Z","type":"message"}
{"nick":"txdv","message":"what examples?","date":"2016-04-06T11:49:37.135Z","type":"message"}
{"nick":"bawNg","message":"The ones in the examples directory","date":"2016-04-06T11:50:05.255Z","type":"message"}
{"nick":"txdv","message":"all of them are suffixed with Async","date":"2016-04-06T11:50:23.648Z","type":"message"}
{"nick":"txdv","message":"but yeah, I see I lack an example without async for tcp","date":"2016-04-06T11:50:38.039Z","type":"message"}
{"nick":"bawNg","message":"No worries","date":"2016-04-06T11:50:46.907Z","type":"message"}
{"nick":"txdv","message":"I think i rewrote it to async and then threw it out","date":"2016-04-06T11:51:12.514Z","type":"message"}
{"nick":"txdv","message":"I don't remember, but ill probably just write some this evening","date":"2016-04-06T11:51:23.185Z","type":"message"}
{"nick":"txdv","message":"its not hard","date":"2016-04-06T11:51:25.766Z","type":"message"}
{"nick":"bawNg","message":"Yeah, not a priority either","date":"2016-04-06T11:52:02.195Z","type":"message"}
{"nick":"bawNg","message":"I'm sure not many people will be using it with 3.5","date":"2016-04-06T11:52:12.983Z","type":"message"}
{"nick":"txdv","message":"nobody is using it","date":"2016-04-06T11:52:48.210Z","type":"message"}
{"nick":"txdv","message":";D","date":"2016-04-06T11:52:49.663Z","type":"message"}
{"nick":"bawNg","message":"I just took a look through a little of the API, and I'll need a lot of changes to optimize things, I'll have to go through more later when I can find time","date":"2016-04-06T12:03:40.724Z","type":"message"}
{"nick":"txdv","message":"bawNg: where do you see the performance issues?","date":"2016-04-06T12:06:29.697Z","type":"message"}
{"nick":"txdv","message":"or what things you do you want to optimize?","date":"2016-04-06T12:06:43.652Z","type":"message"}
{"nick":"bawNg","message":"Some initial concerns I came across are: Events are used heavily, they have an crazy amount of overhead under all .Net runtimes, that would need to either be reworked or replaced with a light weight event system (I prototyped one recently which will replace events in Oxide)","date":"2016-04-06T12:06:47.390Z","type":"message"}
{"nick":"bawNg","message":"Read returns a string instead of taking a array buffer to write to (needed for binary protocol and to avoid creating garbage)","date":"2016-04-06T12:07:05.665Z","type":"message"}
{"nick":"txdv","message":"the read you are seeing is an overload","date":"2016-04-06T12:09:20.357Z","type":"message"}
{"nick":"txdv","message":"the events ...","date":"2016-04-06T12:09:46.038Z","type":"message"}
{"nick":"txdv","message":"What particular event? read event?","date":"2016-04-06T12:09:51.817Z","type":"message"}
{"nick":"bawNg","message":"It's the only Read method which seems to be exposed by the Tcp client instance","date":"2016-04-06T12:10:11.260Z","type":"message"}
{"nick":"bawNg","message":"I haven't looked at the source yet","date":"2016-04-06T12:10:18.450Z","type":"message"}
{"nick":"txdv","message":"I have a branch where I requestify that thing, as in, you call Read(bytearra, callback)","date":"2016-04-06T12:10:34.289Z","type":"message"}
{"nick":"txdv","message":"and you get your callback called when the read is done","date":"2016-04-06T12:10:47.528Z","type":"message"}
{"nick":"bawNg","message":"That sounds a lot better, doesn't seem to be exposed or on this branch currently","date":"2016-04-06T12:11:03.934Z","type":"message"}
{"nick":"bawNg","message":"The read method uses stream.Data += to register a callback","date":"2016-04-06T12:11:30.603Z","type":"message"}
{"nick":"bawNg","message":"Registering the callback is slow, as is calling it and removing the registration","date":"2016-04-06T12:11:50.499Z","type":"message"}
{"nick":"bawNg","message":"I recently benchmarked event performance under both .Net and Unity Mono runtimes after noticing the insane amount of overhead with adding and removing Oxide timers, it's best to avoid events for anything which happens often","date":"2016-04-06T12:13:17.937Z","type":"message"}
{"nick":"txdv","message":"here is the current interface: https://github.com/txdv/LibuvSharp/blob/master/LibuvSharp/IUVStream.cs#L12-L16","date":"2016-04-06T12:13:35.728Z","type":"message"}
{"nick":"txdv","message":"it is modelled after node.js","date":"2016-04-06T12:13:39.721Z","type":"message"}
{"nick":"txdv","message":"and this is the other one: https://github.com/txdv/LibuvSharp/blob/newapi/LibuvSharp/IUVStream.cs#L11-L12","date":"2016-04-06T12:13:52.964Z","type":"message"}
{"nick":"txdv","message":"Yeah, you are generally right, but this has been already taken into consideration, not from the perspective of it being slow","date":"2016-04-06T12:14:47.273Z","type":"message"}
{"nick":"bawNg","message":"This is .Net event overhead compared to the prototype I wrote: https://gist.github.com/bawNg/9360b46d5f9f5ad9a12e61d66708fc1f","date":"2016-04-06T12:14:48.240Z","type":"message"}
{"nick":"txdv","message":"like libuvsharp vs your thing>?","date":"2016-04-06T12:16:51.289Z","type":"message"}
{"nick":"txdv","message":"i dont understand how you add callbacks","date":"2016-04-06T12:17:29.492Z","type":"message"}
{"nick":"bawNg","message":"The amount of API which requires delegates is also concerning, since every time a delegate is created, that is a heap allocation which needs to be GC'd later","date":"2016-04-06T12:17:40.763Z","type":"message"}
{"nick":"bawNg","message":"So some of the API may need to be reworked with an alternative which does not require frequent delegate registration","date":"2016-04-06T12:18:05.773Z","type":"message"}
{"nick":"bawNg","message":"txdv: The \"callbacks\" in that benchmark comparison is the light weight event system I prototyped","date":"2016-04-06T12:18:39.689Z","type":"message"}
{"nick":"txdv","message":"Can you show me?","date":"2016-04-06T12:19:55.426Z","type":"message"}
{"nick":"bawNg","message":"Sure, I haven't pushed it out to the official Oxide repo yet since I have to merge and clean up a whole bunch of other stuff first, https://gist.github.com/bawNg/e5bc4f52b872365ad186cdf5caac1567","date":"2016-04-06T12:23:49.353Z","type":"message"}
{"nick":"txdv","message":"but you are just saving the callback delegate in the class Callback in the field Invoke","date":"2016-04-06T12:37:26.182Z","type":"message"}
{"nick":"txdv","message":"i dont understand what this tries to achieve","date":"2016-04-06T12:38:45.710Z","type":"message"}
{"nick":"txdv","message":"but I dont think it is that hard to rewrite libuvsharp with this class","date":"2016-04-06T12:39:04.797Z","type":"message"}
{"nick":"txdv","message":"i mean you just change at the appropriate places stuff from Action to Event.Callback","date":"2016-04-06T12:39:28.281Z","type":"message"}
{"nick":"txdv","message":"And so on","date":"2016-04-06T12:39:31.324Z","type":"message"}
{"nick":"bawNg","message":"Look at the benchmark comparison, .Net events are a crazy amount slower than that simple prototype","date":"2016-04-06T12:39:54.813Z","type":"message"}
{"nick":"bawNg","message":"Implementation using that event system is a bit more verbose, but it's worth it to reduce overhead","date":"2016-04-06T12:40:57.130Z","type":"message"}
{"nick":"bawNg","message":"Those times are in seconds by the way, not milliseconds","date":"2016-04-06T12:41:58.248Z","type":"message"}
{"nick":"txdv","message":"O, well, against events I get it","date":"2016-04-06T12:45:10.557Z","type":"message"}
{"nick":"txdv","message":"but it is not more lightweight than a simple callback, right?","date":"2016-04-06T12:45:24.828Z","type":"message"}
{"nick":"bawNg","message":"Right, if you only ever need to register a single callbacks, that would be way simpler and faster","date":"2016-04-06T12:46:04.007Z","type":"message"}
{"nick":"bawNg","message":"*single callback","date":"2016-04-06T12:46:20.856Z","type":"message"}
{"nick":"happy-dude","date":"2016-04-06T12:57:36.321Z","type":"join"}
{"nick":"PerilousApricot","date":"2016-04-06T13:26:45.041Z","type":"join"}
{"nick":"kaushik_","date":"2016-04-06T13:30:38.437Z","type":"join"}
{"nick":"kaushik_","message":"Hi. Can I ask questions here directly ?","date":"2016-04-06T13:31:49.307Z","type":"message"}
{"nick":"frandagostino","date":"2016-04-06T13:37:07.006Z","type":"join"}
{"nick":"kaushik_","date":"2016-04-06T13:37:57.981Z","type":"part"}
{"nick":"fdagostino","date":"2016-04-06T13:41:28.007Z","type":"join"}
{"nick":"frandagostino","reason":"Ping timeout: 248 seconds","date":"2016-04-06T13:41:50.023Z","type":"quit"}
{"nick":"fdagostino","reason":"Ping timeout: 248 seconds","date":"2016-04-06T13:47:10.076Z","type":"quit"}
{"nick":"rmg","date":"2016-04-06T13:58:14.888Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 260 seconds","date":"2016-04-06T14:02:57.676Z","type":"quit"}
{"nick":"alexforster","date":"2016-04-06T14:05:59.227Z","type":"join"}
{"nick":"alexforster","reason":"Ping timeout: 268 seconds","date":"2016-04-06T14:10:29.194Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-04-06T14:14:55.355Z","type":"join"}
{"nick":"txdv","message":"YES YOU CAN","date":"2016-04-06T14:34:35.643Z","type":"message"}
{"nick":"txdv","message":"MY GOD","date":"2016-04-06T14:34:37.016Z","type":"message"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2016-04-06T15:06:50.717Z","type":"quit"}
{"nick":"seishun","date":"2016-04-06T15:38:57.567Z","type":"join"}
{"nick":"rmg","date":"2016-04-06T15:59:39.174Z","type":"join"}
