{"nick":"Fishrock123","date":"2016-11-23T00:05:15.668Z","type":"join"}
{"nick":"benjamingr","reason":"Quit: Connection closed for inactivity","date":"2016-11-23T00:11:13.124Z","type":"quit"}
{"nick":"brson","reason":"Quit: leaving","date":"2016-11-23T03:41:07.774Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2016-11-23T05:00:12.358Z","type":"quit"}
{"nick":"MoZu4k__","date":"2016-11-23T06:04:21.532Z","type":"join"}
{"nick":"eto","reason":"Quit: CyBrainCore:Leaving Matrix","date":"2016-11-23T06:07:25.945Z","type":"quit"}
{"nick":"MoZu4k__","reason":"Quit: MoZu4k__","date":"2016-11-23T06:29:29.232Z","type":"quit"}
{"nick":"rendar","date":"2016-11-23T06:30:31.532Z","type":"join"}
{"nick":"seishun","date":"2016-11-23T07:40:46.555Z","type":"join"}
{"nick":"rendar","reason":"Ping timeout: 268 seconds","date":"2016-11-23T08:20:02.551Z","type":"quit"}
{"nick":"rendar","date":"2016-11-23T08:32:00.367Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 245 seconds","date":"2016-11-23T08:33:23.761Z","type":"quit"}
{"nick":"a3f","date":"2016-11-23T09:04:13.508Z","type":"join"}
{"nick":"a3f","reason":"Quit: Zzzzz..","date":"2016-11-23T10:37:12.715Z","type":"quit"}
{"nick":"a3f","date":"2016-11-23T10:37:38.954Z","type":"join"}
{"nick":"a3f","reason":"Quit: Zzzzz..","date":"2016-11-23T10:43:54.107Z","type":"quit"}
{"nick":"thealphanerd","reason":"Quit: farewell for now","date":"2016-11-23T11:25:09.556Z","type":"quit"}
{"nick":"thealphanerd","date":"2016-11-23T11:25:40.053Z","type":"join"}
{"nick":"nickleefly","date":"2016-11-23T13:34:44.226Z","type":"join"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2016-11-23T14:00:55.314Z","type":"quit"}
{"nick":"Fishrock123","date":"2016-11-23T14:52:05.204Z","type":"join"}
{"nick":"nickleefly","reason":"Quit: Connection closed for inactivity","date":"2016-11-23T15:41:42.859Z","type":"quit"}
{"nick":"cremes","reason":"Quit: cremes","date":"2016-11-23T16:27:29.437Z","type":"quit"}
{"nick":"cremes","date":"2016-11-23T16:29:00.560Z","type":"join"}
{"nick":"thefourtheye","date":"2016-11-23T16:37:16.456Z","type":"join"}
{"nick":"rmg","date":"2016-11-23T17:42:56.203Z","type":"join"}
{"nick":"seishun","date":"2016-11-23T17:47:46.514Z","type":"join"}
{"nick":"zju1","reason":"Ping timeout: 256 seconds","date":"2016-11-23T18:33:54.934Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 245 seconds","date":"2016-11-23T18:38:23.869Z","type":"quit"}
{"nick":"seishun","date":"2016-11-23T18:44:04.200Z","type":"join"}
{"nick":"zju","date":"2016-11-23T18:51:04.740Z","type":"join"}
{"nick":"rendar","reason":"Quit: Leaving","date":"2016-11-23T21:10:47.122Z","type":"quit"}
{"nick":"tunniclm","date":"2016-11-23T21:39:14.913Z","type":"join"}
{"nick":"grantila","date":"2016-11-23T21:55:09.531Z","type":"join"}
{"nick":"grantila","message":"I'm successfully reading with libuv I think, using uv_read_start and uv_read_stop to control how fast I can read in my application. But I find nothing for write. Am I missing something?","date":"2016-11-23T21:56:52.176Z","type":"message"}
{"nick":"grantila","message":"Basically, if I'd just try (stumbling in darkness not knowing if I really can write) uv_try_write, and it returns UV_EAGAIN, what am I supposed to do?","date":"2016-11-23T21:57:24.574Z","type":"message"}
{"nick":"indutny","message":"hello","date":"2016-11-23T22:00:12.600Z","type":"message"}
{"nick":"indutny","message":"grantila: I won't go with uv_try_write for now","date":"2016-11-23T22:00:20.203Z","type":"message"}
{"nick":"indutny","message":"especially if you are just learning things","date":"2016-11-23T22:00:25.210Z","type":"message"}
{"nick":"indutny","message":"use `uv_write` instead","date":"2016-11-23T22:00:31.294Z","type":"message"}
{"nick":"indutny","message":"`uv_try_write` is just a tool to optimize performance in some edge cases","date":"2016-11-23T22:00:43.755Z","type":"message"}
{"nick":"indutny","message":"you don't need it at this point","date":"2016-11-23T22:00:59.810Z","type":"message"}
{"nick":"grantila","message":"well, I don't want to end up filling internal buffers. I might send _fast_, and have my own application-level handling of streams with backpressure and everything, so I'd like to map that to libuv if possible.","date":"2016-11-23T22:02:10.274Z","type":"message"}
{"nick":"grantila","message":"indutny: but even with `uv_write`, how do I handle when I can write more? Is that implicit when the callback is called - that I can write again?","date":"2016-11-23T22:15:50.675Z","type":"message"}
{"nick":"indutny","message":"grantila: yep, this is true","date":"2016-11-23T22:16:58.823Z","type":"message"}
{"nick":"indutny","message":"grantila: technically, you can queue as much as you want","date":"2016-11-23T22:17:02.629Z","type":"message"}
{"nick":"indutny","message":"grantila: but when callback is called the data was dequeued to kernel","date":"2016-11-23T22:17:11.744Z","type":"message"}
{"nick":"indutny","message":"so you can totally write more","date":"2016-11-23T22:17:14.807Z","type":"message"}
{"nick":"grantila","message":"indutny: alright. well, queue as much as I want will fill up ram uncontrollably I guess. but this interface seems fair enough. What do I have to keep in memory for `uv_write`, only the pointers to the data (.base) or the actual uv_buf_t structs too?","date":"2016-11-23T22:19:50.747Z","type":"message"}
{"nick":"grantila","message":"indutny: And the uv_write_t structs?","date":"2016-11-23T22:20:22.181Z","type":"message"}
{"nick":"indutny","message":"grantila: just uv_write_t AFAIK","date":"2016-11-23T22:23:47.505Z","type":"message"}
{"nick":"indutny","message":"brb","date":"2016-11-23T22:23:57.112Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 245 seconds","date":"2016-11-23T23:14:38.822Z","type":"quit"}
{"nick":"italoacasas","date":"2016-11-23T23:22:14.691Z","type":"join"}
{"nick":"grantila","reason":"Quit: Leaving.","date":"2016-11-23T23:29:04.680Z","type":"quit"}
{"nick":"thefourtheye","reason":"Quit: Connection closed for inactivity","date":"2016-11-23T23:42:28.832Z","type":"quit"}
