{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #371 \u00037UNSTABLE\u000f windows-x64 (5/202) smartos-ia32 (3/203) smartos-x64 (3/203) windows-ia32 (4/202) http://jenkins.nodejs.org/job/libuv-master-gyp/371/","date":"2014-01-07T00:00:00.121Z","type":"message"}
{"nick":"ircretary","reason":"Remote host closed the connection","date":"2014-01-07T00:00:00.766Z","type":"quit"}
{"nick":"ircretary","date":"2014-01-07T00:00:08.835Z","type":"join"}
{"nick":"dap_","reason":"*.net *.split","date":"2014-01-07T00:02:52.014Z","type":"quit"}
{"nick":"inolen","reason":"*.net *.split","date":"2014-01-07T00:02:52.015Z","type":"quit"}
{"nick":"dsantiago","reason":"*.net *.split","date":"2014-01-07T00:02:52.813Z","type":"quit"}
{"nick":"CAPSLOCKBOT","reason":"*.net *.split","date":"2014-01-07T00:02:53.294Z","type":"quit"}
{"nick":"hij1nx","reason":"*.net *.split","date":"2014-01-07T00:02:53.773Z","type":"quit"}
{"nick":"LOUDBOT","reason":"Remote host closed the connection","date":"2014-01-07T00:03:51.353Z","type":"quit"}
{"nick":"hij1nx","date":"2014-01-07T00:05:11.401Z","type":"join"}
{"nick":"dsantiago","date":"2014-01-07T00:05:28.727Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: if EEO lands that'll allow me to simplify AL. there's non-trivial logic I hacked in to make AL work as best as possible w/ EE.","date":"2014-01-07T00:05:29.610Z","type":"message"}
{"nick":"tjfontaine","message":"did you update the PR with it?","date":"2014-01-07T00:05:54.188Z","type":"message"}
{"nick":"trevnorris","message":"the EEO pr?","date":"2014-01-07T00:06:03.721Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2014-01-07T00:06:06.064Z","type":"message"}
{"nick":"tjfontaine","message":"add it as a commit that is?","date":"2014-01-07T00:06:15.804Z","type":"message"}
{"nick":"trevnorris","message":"nope. the first pr is just to get the functionality in. i'm working on AL right now, but that'll be a different PR.","date":"2014-01-07T00:06:41.032Z","type":"message"}
{"nick":"tjfontaine","message":"I'm updating my dtrace-demacro branch right now so it's clearer the interface I think we could be aiming for","date":"2014-01-07T00:06:43.706Z","type":"message"}
{"nick":"trevnorris","message":"i'm trying to keep my pr's under 1000 lines. ;)","date":"2014-01-07T00:06:51.643Z","type":"message"}
{"nick":"tjfontaine","message":"they feel pretty closely linked though","date":"2014-01-07T00:07:07.937Z","type":"message"}
{"nick":"trevnorris","message":"not directl","date":"2014-01-07T00:07:17.806Z","type":"message"}
{"nick":"trevnorris","message":"y","date":"2014-01-07T00:07:19.314Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: w/ your interface, have you considered if a user only wants to track fs.write events, but will they still be able to get a back trace from behind that event?","date":"2014-01-07T00:07:47.559Z","type":"message"}
{"nick":"trevnorris","message":"poorly put.","date":"2014-01-07T00:08:14.637Z","type":"message"}
{"nick":"trevnorris","message":"one sec.","date":"2014-01-07T00:08:16.248Z","type":"message"}
{"nick":"tjfontaine","message":"k thanks :)","date":"2014-01-07T00:08:18.843Z","type":"message"}
{"nick":"trevnorris","message":"you set a \"tracking beacon\" onto an async whatnot (e.g. timer), but say you only want to be notified of fs operations...","date":"2014-01-07T00:09:06.866Z","type":"message"}
{"nick":"trevnorris","message":"you'll still have to internally maintain that \"tracking beacon\" for every async request then only notify the user when their desired events have been fired.","date":"2014-01-07T00:09:37.925Z","type":"message"}
{"nick":"trevnorris","message":"follow?","date":"2014-01-07T00:09:40.189Z","type":"message"}
{"nick":"tjfontaine","message":"right?","date":"2014-01-07T00:09:49.038Z","type":"message"}
{"nick":"tjfontaine","message":"roughly just like how EEs work today?","date":"2014-01-07T00:09:58.907Z","type":"message"}
{"nick":"trevnorris","message":"i'm not sure how they'd relate to how EE's work.","date":"2014-01-07T00:10:20.483Z","type":"message"}
{"nick":"tjfontaine","message":"._events[module][probe](args)","date":"2014-01-07T00:10:37.252Z","type":"message"}
{"nick":"tjfontaine","message":"?","date":"2014-01-07T00:10:37.850Z","type":"message"}
{"nick":"tjfontaine","message":"as a first pass the filtering could be done in js","date":"2014-01-07T00:10:59.875Z","type":"message"}
{"nick":"trevnorris","message":"that doesn't work when you're receiving sockets from TCP requests. those come in straight through libuv","date":"2014-01-07T00:11:41.060Z","type":"message"}
{"nick":"tjfontaine","message":"huh? we're still firing javascript for async listeners?","date":"2014-01-07T00:12:10.793Z","type":"message"}
{"nick":"trevnorris","message":"yeah, but most the time it's coming from c++","date":"2014-01-07T00:12:21.199Z","type":"message"}
{"nick":"tjfontaine","message":"ok?","date":"2014-01-07T00:12:25.467Z","type":"message"}
{"nick":"trevnorris","message":"pseudo code: trackAsync(\"fs\"); setTimeout(fn() { server.on('data', fn() { fs.stat() }); }); stopTrackingAsync(\"fs\");","date":"2014-01-07T00:13:43.418Z","type":"message"}
{"nick":"tjfontaine","message":"uh, no","date":"2014-01-07T00:13:53.502Z","type":"message"}
{"nick":"trevnorris","message":"uh, then what?","date":"2014-01-07T00:14:41.123Z","type":"message"}
{"nick":"tjfontaine","message":"require('tracing').on('fs', 'write', function(){});","date":"2014-01-07T00:14:48.131Z","type":"message"}
{"nick":"trevnorris","message":"how do you say you want to stop \"tracking\" fs\" \"write\" events?","date":"2014-01-07T00:15:12.297Z","type":"message"}
{"nick":"tjfontaine","message":".remove('fs', 'write', function(){})?","date":"2014-01-07T00:15:29.890Z","type":"message"}
{"nick":"tjfontaine","message":"we have a pattern for this today in how we do EEs","date":"2014-01-07T00:15:51.490Z","type":"message"}
{"nick":"trevnorris","message":"what you're talking about and what AL does are not the same.","date":"2014-01-07T00:16:03.302Z","type":"message"}
{"nick":"mikolalysenko","date":"2014-01-07T00:16:36.373Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: how does that API allow the user to trace from arbitrary point A until event B is fired?","date":"2014-01-07T00:17:54.804Z","type":"message"}
{"nick":"tjfontaine","message":"in that pseudo code, how does AL manage to do that?","date":"2014-01-07T00:20:51.170Z","type":"message"}
{"nick":"trevnorris","message":"the pseudo code was for what I was thinking yours did.","date":"2014-01-07T00:21:16.422Z","type":"message"}
{"nick":"tjfontaine","message":"no","date":"2014-01-07T00:21:22.014Z","type":"message"}
{"nick":"tjfontaine","message":"mine takes how (I believe) AL works today, and provides an API that matches what people are used to from node APIs","date":"2014-01-07T00:21:54.997Z","type":"message"}
{"nick":"tjfontaine","message":"i.e. EEs","date":"2014-01-07T00:21:59.850Z","type":"message"}
{"nick":"hz","date":"2014-01-07T00:22:10.208Z","type":"quit"}
{"nick":"trevnorris","message":"do you have a gist or whatnot that I can look at?","date":"2014-01-07T00:22:13.346Z","type":"message"}
{"nick":"tjfontaine","message":"so AL just fires create/before/after/error for some .addAsyncListener, as my interpretation was, and then I check the context variable for that state of where it was emitted from","date":"2014-01-07T00:22:36.309Z","type":"message"}
{"nick":"tjfontaine","message":"stop me if I've misinterpreted what was going on","date":"2014-01-07T00:22:44.592Z","type":"message"}
{"nick":"tjfontaine","message":"also re: gist","date":"2014-01-07T00:22:58.535Z","type":"message"}
{"nick":"tjfontaine","message":"[01-07] 00:06:43 <@tjfontaine> I'm updating my dtrace-demacro branch right now so it's clearer the interface I think we could be aiming for","date":"2014-01-07T00:22:59.280Z","type":"message"}
{"nick":"trevnorris","message":"got that, but didn't know if I could actually go look at your branch","date":"2014-01-07T00:23:25.674Z","type":"message"}
{"nick":"tjfontaine","message":"it's not ready yet, it's what I started doign","date":"2014-01-07T00:24:00.510Z","type":"message"}
{"nick":"jirwin","date":"2014-01-07T00:24:12.967Z","type":"join"}
{"nick":"tjfontaine","message":"have I interpreted how AL works today right?","date":"2014-01-07T00:24:23.022Z","type":"message"}
{"nick":"trevnorris","message":"on addAsyncListener() it adds a listener to the active listening queue. when an \"asynchronous event\" (actually async, not EE) is instantiated (e.g. new ReqWrap) the create callbacks in the active queue are fired.","date":"2014-01-07T00:24:43.769Z","type":"message"}
{"nick":"tjfontaine","message":"so if I did .on('*', '*', function(){}) I would basically be getting everything from AL [minus the ability to return a value from the create cb]","date":"2014-01-07T00:24:49.606Z","type":"message"}
{"nick":"trevnorris","message":"then it stores all the same callbacks onto the instance so if in the future an async event fires from inside another async event I can load up the same active queue and fire off all the same create callbacks.","date":"2014-01-07T00:25:44.984Z","type":"message"}
{"nick":"trevnorris","message":"these can be swapped out mid async call, and since AL can be added/removed at any time, each \"trace\" can have a unique set of create callbacks. depending on how the users sets stuff up.","date":"2014-01-07T00:27:27.321Z","type":"message"}
{"nick":"trevnorris","message":"so say, for example, AL supported the ability to only fire the create callback for fs write events. i'd still have to load up the active queue onto every async event in the interim so when fs write is called I can have a proper trace of how we arrived there.","date":"2014-01-07T00:29:23.144Z","type":"message"}
{"nick":"brson","reason":"Quit: Lost terminal","date":"2014-01-07T00:29:54.257Z","type":"quit"}
{"nick":"trevnorris","message":"otherwise all we get is a notification system of when a specific event happens.","date":"2014-01-07T00:30:01.473Z","type":"message"}
{"nick":"brson","date":"2014-01-07T00:31:07.081Z","type":"join"}
{"nick":"zz_karupanerura","new_nick":"karupanerura","date":"2014-01-07T00:31:42.322Z","type":"nick"}
{"nick":"trevnorris","message":"tjfontaine: also, each .on() or whatnot would have to return some key so you could remove only a single AL from the active queue. your API shows only a create callback, i assume, and so using the function as the key would work if that's all we were to pass in.","date":"2014-01-07T00:32:34.653Z","type":"message"}
{"nick":"trevnorris","message":"am I misunderstanding how your implementation works?","date":"2014-01-07T00:33:54.949Z","type":"message"}
{"nick":"mikeal","date":"2014-01-07T00:37:22.468Z","type":"join"}
{"nick":"groundwater","message":"https://gist.github.com/jacobgroundwater/44f9b0109a06b5d3ca4d","date":"2014-01-07T00:42:21.162Z","type":"message"}
{"nick":"groundwater","message":"this is my understanding of how AL may be merged into tracing, along with the issue at hand","date":"2014-01-07T00:42:39.533Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: is the function() { } the unique identifier to remove that specific instance in the future?","date":"2014-01-07T00:43:37.778Z","type":"message"}
{"nick":"groundwater","message":"trevnorris: i suppose either that, or .on should return a unique identifier","date":"2014-01-07T00:44:23.740Z","type":"message"}
{"nick":"groundwater","message":"personally, i would return a unique token, however i recognize that's not the EE/node style/interface","date":"2014-01-07T00:44:56.798Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: but how do you link the \"something in here\" to the \"needs to be available here\"?","date":"2014-01-07T00:45:43.438Z","type":"message"}
{"nick":"trevnorris","message":"you'd need to pass in a unique token to tell tracing that the same data should be avaiable in both places","date":"2014-01-07T00:46:02.253Z","type":"message"}
{"nick":"groundwater","message":"right, i wasn't trying to solve it in that example, just illustrate the problem","date":"2014-01-07T00:46:10.557Z","type":"message"}
{"nick":"groundwater","message":"i think some unique token needs to be passed to each create function, and then that same token is reused in before/after/error","date":"2014-01-07T00:46:40.998Z","type":"message"}
{"nick":"trevnorris","message":"this seems way too verbose.","date":"2014-01-07T00:47:02.074Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: this requires a lot less code: https://gist.github.com/jacobgroundwater/44f9b0109a06b5d3ca4d#comment-981543","date":"2014-01-07T00:48:01.158Z","type":"message"}
{"nick":"trevnorris","message":"and since they're all in the same passed object it's a lot less ambiguous what data should be available where.","date":"2014-01-07T00:48:44.632Z","type":"message"}
{"nick":"groundwater","message":"i'm probably implementation agnostic here, as long as i can utilize async-listener to correlate calls","date":"2014-01-07T00:49:53.428Z","type":"message"}
{"nick":"groundwater","message":"also, a lot of traces are glued together through event emitters","date":"2014-01-07T00:53:57.457Z","type":"message"}
{"nick":"groundwater","message":"i think the only things running through async-listeners are timers, process.nextTick, and..","date":"2014-01-07T00:54:13.309Z","type":"message"}
{"nick":"groundwater","message":"i guess things that go through MakeCallback? is that correct?","date":"2014-01-07T00:54:25.320Z","type":"message"}
{"nick":"trevnorris","message":"everything that goes through AsyncWrap","date":"2014-01-07T00:54:49.768Z","type":"message"}
{"nick":"groundwater","message":"what about Socket events?","date":"2014-01-07T00:54:53.883Z","type":"message"}
{"nick":"trevnorris","message":"which is the base class for HandleWrap, StreamWrap, etc. etc","date":"2014-01-07T00:55:01.057Z","type":"message"}
{"nick":"groundwater","message":"ahhh","date":"2014-01-07T00:55:06.385Z","type":"message"}
{"nick":"trevnorris","message":"so, basically everything in node","date":"2014-01-07T00:55:09.796Z","type":"message"}
{"nick":"groundwater","message":"okay lol","date":"2014-01-07T00:55:16.433Z","type":"message"}
{"nick":"groundwater","message":"all network stuff","date":"2014-01-07T00:55:20.165Z","type":"message"}
{"nick":"trevnorris","message":"and fs stuff","date":"2014-01-07T00:55:25.771Z","type":"message"}
{"nick":"trevnorris","message":"and cares","date":"2014-01-07T00:55:27.773Z","type":"message"}
{"nick":"trevnorris","message":"and tlx/crypto/...","date":"2014-01-07T00:55:37.202Z","type":"message"}
{"nick":"trevnorris","message":"*tls","date":"2014-01-07T00:55:39.650Z","type":"message"}
{"nick":"groundwater","message":"OKAY","date":"2014-01-07T00:55:42.815Z","type":"message"}
{"nick":"groundwater","message":"haha","date":"2014-01-07T00:55:43.573Z","type":"message"}
{"nick":"groundwater","message":"jacob -1","date":"2014-01-07T00:55:50.565Z","type":"message"}
{"nick":"trevnorris","message":"hehe","date":"2014-01-07T00:55:54.705Z","type":"message"}
{"nick":"groundwater","message":"trevnorris +1","date":"2014-01-07T00:55:55.488Z","type":"message"}
{"nick":"kazupon","date":"2014-01-07T00:57:32.833Z","type":"join"}
{"nick":"trevnorris","message":"the c++ side was the easy part. getting it working with our insane EE abstraction still haunts me.","date":"2014-01-07T00:57:56.451Z","type":"message"}
{"nick":"tjfontaine","message":"ok, so I'm going to get this in further, but basically as far as the nested infrastructure I'm thinking something like: on(module, probe, function(parentId, curId, context) {})","date":"2014-01-07T00:57:58.633Z","type":"message"}
{"nick":"trevnorris","message":"just please don't tell me those will return event emitters.","date":"2014-01-07T00:58:36.930Z","type":"message"}
{"nick":"tjfontaine","message":"no, it's EE like, not a real EE","date":"2014-01-07T00:58:47.094Z","type":"message"}
{"nick":"trevnorris","message":"ok cool","date":"2014-01-07T00:59:07.555Z","type":"message"}
{"nick":"tjfontaine","message":"so, then if someone wants to stop watching a trace it could construct from the parentId's right?","date":"2014-01-07T00:59:29.177Z","type":"message"}
{"nick":"piscisaureus","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2014-01-07T00:59:53.218Z","type":"quit"}
{"nick":"groundwater","message":"tjfontaine: i think so","date":"2014-01-07T00:59:53.998Z","type":"message"}
{"nick":"tjfontaine","message":"that is, their infra could do the lookup necessary, but our code still executes","date":"2014-01-07T01:00:04.643Z","type":"message"}
{"nick":"groundwater","message":"once there is a v1 i'll give it a try","date":"2014-01-07T01:00:14.407Z","type":"message"}
{"nick":"trevnorris","message":"what would be the type of parentId?","date":"2014-01-07T01:00:15.945Z","type":"message"}
{"nick":"tjfontaine","message":"I was assuming uint","date":"2014-01-07T01:00:24.715Z","type":"message"}
{"nick":"groundwater","message":"sorry i mean a v0.0.0.0.1-alpha","date":"2014-01-07T01:00:32.111Z","type":"message"}
{"nick":"tjfontaine","message":"atomically updated in AsyncWrap constructor","date":"2014-01-07T01:00:39.219Z","type":"message"}
{"nick":"tjfontaine","message":"s/atomically/statically/","date":"2014-01-07T01:00:57.926Z","type":"message"}
{"nick":"trevnorris","message":"every async listener already gets a uid","date":"2014-01-07T01:01:53.670Z","type":"message"}
{"nick":"tjfontaine","message":"but this isn't for the listener, it's for the AsyncWrap","date":"2014-01-07T01:02:03.516Z","type":"message"}
{"nick":"tjfontaine","message":"do they already get a uid?","date":"2014-01-07T01:02:11.793Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033isaacs\u000f \u00037v0.10\u000f * \u00021be9365\u0002 : npm: Upgrade to 1.3.23 - http://git.io/SAU0CA","date":"2014-01-07T01:02:20.469Z","type":"message"}
{"nick":"trevnorris","message":"yeah. createAsyncWrap().uid === uint","date":"2014-01-07T01:02:22.319Z","type":"message"}
{"nick":"trevnorris","message":"*createAsyncListener()","date":"2014-01-07T01:02:32.387Z","type":"message"}
{"nick":"tjfontaine","message":"but a Listener != AsyncWrap?","date":"2014-01-07T01:02:48.135Z","type":"message"}
{"nick":"trevnorris","message":"AsyncWrap is just a class to funnel async event creation. the listener is the object attached to the AsyncWrap instance","date":"2014-01-07T01:03:18.559Z","type":"message"}
{"nick":"tjfontaine","message":"ok anyway, so long as we can communicate parent and current I think it's pretty straight forward for consumers to construct the rest","date":"2014-01-07T01:04:04.698Z","type":"message"}
{"nick":"trevnorris","message":"but, the AsyncWrap instance is actually a TCP instance, or a UDP instance, etc.","date":"2014-01-07T01:04:14.033Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2014-01-07T01:04:27.320Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: issue. your event tracers are labeled via their js counterparts. but the C++ api doesn't follow that. i.e. there's a lot of code reuse that doesn't have a 1:1 correspondence","date":"2014-01-07T01:05:37.053Z","type":"message"}
{"nick":"tjfontaine","message":"huh?","date":"2014-01-07T01:05:47.663Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 276 seconds","date":"2014-01-07T01:06:03.288Z","type":"quit"}
{"nick":"trevnorris","message":"take Server#write. in c++ that fires a writeBuffer, writeAscii, writeHex, etc.","date":"2014-01-07T01:06:53.109Z","type":"message"}
{"nick":"tjfontaine","message":"those each instantiate a separate AsyncWrap you mean?","date":"2014-01-07T01:07:16.514Z","type":"message"}
{"nick":"trevnorris","message":"so. Server is an EE, Server#_handle is the AsyncWrap instance.","date":"2014-01-07T01:08:02.605Z","type":"message"}
{"nick":"tjfontaine","message":"and #write instantiates a WriteReq?","date":"2014-01-07T01:08:18.550Z","type":"message"}
{"nick":"trevnorris","message":"right now I don't tell the user what's about to happen, just that something's about to happen that will break their stack trace.","date":"2014-01-07T01:08:19.811Z","type":"message"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T01:08:28.081Z","type":"quit"}
{"nick":"trevnorris","message":"might","date":"2014-01-07T01:08:31.684Z","type":"message"}
{"nick":"kazupon","date":"2014-01-07T01:08:54.965Z","type":"join"}
{"nick":"trevnorris","message":"let me find an example.","date":"2014-01-07T01:09:10.881Z","type":"message"}
{"nick":"tjfontaine","message":"I mean ultimately when it's out of the streams infra in js and makes it to C++ it should?","date":"2014-01-07T01:09:14.734Z","type":"message"}
{"nick":"tjfontaine","message":"ultimately DoWrite takes a WriteWrap","date":"2014-01-07T01:10:31.386Z","type":"message"}
{"nick":"trevnorris","message":"there are certain async operations that don't take a callback, so all that happens is that the data is copied out and passed to libuv, then free'd from the c++ callback.","date":"2014-01-07T01:10:47.601Z","type":"message"}
{"nick":"trevnorris","message":"sorry, i'm all over the place, like fs operates differently than tcp/pipe/etc.","date":"2014-01-07T01:11:12.981Z","type":"message"}
{"nick":"tjfontaine","message":"well, they all go through StreamWrap ultimately when there's something to actually be done with a C write()?","date":"2014-01-07T01:11:49.127Z","type":"message"}
{"nick":"trevnorris","message":"timerwrap, signalwrap and udpwrap go through handlewrap","date":"2014-01-07T01:12:28.975Z","type":"message"}
{"nick":"trevnorris","message":"not through streamwrap","date":"2014-01-07T01:12:36.662Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2014-01-07T01:12:40.632Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 265 seconds","date":"2014-01-07T01:13:19.996Z","type":"quit"}
{"nick":"tjfontaine","message":"but streamwrap inherits handlewrap?","date":"2014-01-07T01:13:27.608Z","type":"message"}
{"nick":"tjfontaine","message":"and handlewrap actually matters for open/close?","date":"2014-01-07T01:13:34.791Z","type":"message"}
{"nick":"trevnorris","message":"yes","date":"2014-01-07T01:15:02.909Z","type":"message"}
{"nick":"trevnorris","message":"except for ZCtx","date":"2014-01-07T01:15:27.034Z","type":"message"}
{"nick":"trevnorris","message":"which doesn't inherit from HandleWrap","date":"2014-01-07T01:15:37.695Z","type":"message"}
{"nick":"tjfontaine","message":"right so the number of specializations is minimal","date":"2014-01-07T01:16:08.103Z","type":"message"}
{"nick":"trevnorris","message":"yeah. handlewrap covers just about all of them.","date":"2014-01-07T01:16:23.308Z","type":"message"}
{"nick":"trevnorris","message":"asyncwrap covers them all","date":"2014-01-07T01:16:26.326Z","type":"message"}
{"nick":"tjfontaine","message":"right but in our descendents we can deliniate what we're firing","date":"2014-01-07T01:16:48.470Z","type":"message"}
{"nick":"trevnorris","message":"true, but not as they correspond directly to their js api counterparts","date":"2014-01-07T01:17:58.175Z","type":"message"}
{"nick":"tjfontaine","message":"as reasonably close as it comes though, the context object is still going to be there in the events it can be","date":"2014-01-07T01:18:38.137Z","type":"message"}
{"nick":"trevnorris","message":"going back again to the Server#close() issue, that happens in a nextTick, and while AsyncWrap can be alerted to when the handle actually closes, it won't be the same time as when the close event is actually emitted","date":"2014-01-07T01:18:45.125Z","type":"message"}
{"nick":"tjfontaine","message":"before/after/error","date":"2014-01-07T01:18:47.391Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T01:19:17.873Z","type":"quit"}
{"nick":"trevnorris","message":"all the places were you say we make a reasonable assumption about what will happen, and fire early, then context won't be loaded.","date":"2014-01-07T01:19:30.538Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-v0.10-windows\u0002: #421 \u00037UNSTABLE\u000f windows-x64 (11/608) windows-ia32 (11/608) http://jenkins.nodejs.org/job/nodejs-v0.10-windows/421/","date":"2014-01-07T01:19:39.968Z","type":"message"}
{"nick":"tjfontaine","message":"can you be more verbose about what you mean?","date":"2014-01-07T01:19:57.407Z","type":"message"}
{"nick":"tjfontaine","message":"because handle as been set to null already at that point?","date":"2014-01-07T01:20:06.547Z","type":"message"}
{"nick":"trevnorris","message":"yes","date":"2014-01-07T01:20:10.896Z","type":"message"}
{"nick":"trevnorris","message":"the handle has been set to null, then the emit happens in a nextTick","date":"2014-01-07T01:20:23.435Z","type":"message"}
{"nick":"trevnorris","message":"so the context no longer exists at the js level","date":"2014-01-07T01:20:30.975Z","type":"message"}
{"nick":"trevnorris","message":"it can be recovered from the c++ level since the object isn't actually destroyed until the class is deconstructed","date":"2014-01-07T01:20:49.757Z","type":"message"}
{"nick":"tjfontaine","message":"so, in translation, your need for libuv fired callbacks wasn't as clear as it could have been until now :)","date":"2014-01-07T01:21:47.121Z","type":"message"}
{"nick":"trevnorris","message":"heh, yeah. it definitely helps to have things fire when they should. :)","date":"2014-01-07T01:22:25.597Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: also, the net module will give you hell.","date":"2014-01-07T01:23:40.474Z","type":"message"}
{"nick":"trevnorris","message":"e.g. what if I only want to listen for TCP server creation, not pipes?","date":"2014-01-07T01:24:01.571Z","type":"message"}
{"nick":"tjfontaine","message":"this goes to the AsyncWrap base class change","date":"2014-01-07T01:24:43.060Z","type":"message"}
{"nick":"trevnorris","message":"i only got it to work by doing some hackery in the .listen() method.","date":"2014-01-07T01:25:14.127Z","type":"message"}
{"nick":"trevnorris","message":"i hate it with a passion, but was the only way I could figure out how to get it done.","date":"2014-01-07T01:25:28.123Z","type":"message"}
{"nick":"trevnorris","message":"if you find a better way, please for the love of good code let me know.","date":"2014-01-07T01:25:37.601Z","type":"message"}
{"nick":"tjfontaine","message":"so we either have a constructor or AsyncWrap::Create that takes char* module, char* probe -- and then create/before/after/error all fire with those as arguments","date":"2014-01-07T01:25:55.408Z","type":"message"}
{"nick":"tjfontaine","message":"in the js infrastructure we filter based on that","date":"2014-01-07T01:26:53.537Z","type":"message"}
{"nick":"trevnorris","message":"issue is that a lot of the callbacks coming through MakeCallback are all just \"oncomplete\" then the actual \"probe\" is called from those. so we'd have to refactor a lot of code to make that visible to AsyncWrap","date":"2014-01-07T01:27:55.411Z","type":"message"}
{"nick":"abraxas","date":"2014-01-07T01:28:03.280Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #1697 \u00037UNSTABLE\u000f linux-x64 (5/608) osx-x64 (1/608) linux-ia32 (6/608) smartos-x64 (12/608) smartos-ia32 (10/608) osx-ia32 (2/608) http://jenkins.nodejs.org/job/nodejs-v0.10/1697/","date":"2014-01-07T01:28:35.154Z","type":"message"}
{"nick":"tjfontaine","message":"can you give me an example of that? or you mean like timers as an example?","date":"2014-01-07T01:28:35.638Z","type":"message"}
{"nick":"trevnorris","message":"grep oncomplete lib/net.js","date":"2014-01-07T01:29:01.656Z","type":"message"}
{"nick":"trevnorris","message":"we just create objects with the same named callback \"oncomplete\" that all do different things.","date":"2014-01-07T01:29:27.686Z","type":"message"}
{"nick":"trevnorris","message":"so MakeCallback doesn't actually know what it's calling.","date":"2014-01-07T01:29:42.646Z","type":"message"}
{"nick":"tjfontaine","message":"most of these come through a HandleWrap/StreamWrap, so we can just set instance variables on those classes, which can then be passed to the WriteWrap or ShutdownWrap","date":"2014-01-07T01:32:11.851Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: or there's \"callback\" in dns.js","date":"2014-01-07T01:32:17.105Z","type":"message"}
{"nick":"trevnorris","message":"which also is called through MakeCallback","date":"2014-01-07T01:32:36.443Z","type":"message"}
{"nick":"trevnorris","message":"the names are pretty much meaningless to let us know what's about to happen","date":"2014-01-07T01:32:49.073Z","type":"message"}
{"nick":"tjfontaine","message":"right, we can make dns more explicit anyway","date":"2014-01-07T01:32:49.958Z","type":"message"}
{"nick":"tjfontaine","message":"what do you mean the names are meaningless?","date":"2014-01-07T01:33:15.310Z","type":"message"}
{"nick":"trevnorris","message":"under the assumption that we know where the call is coming from, then by the name of the symbol for the function that's about to be fired in MakeCallback we could notify","date":"2014-01-07T01:34:10.646Z","type":"message"}
{"nick":"tjfontaine","message":"hmm?","date":"2014-01-07T01:34:30.267Z","type":"message"}
{"nick":"trevnorris","message":"how do you plan on firing a \"before\" callback for a specific event?","date":"2014-01-07T01:34:56.324Z","type":"message"}
{"nick":"tjfontaine","message":"so, for say: fs:write","date":"2014-01-07T01:35:27.335Z","type":"message"}
{"nick":"tjfontaine","message":"[but this is generalized really for <streamwrap>:write]","date":"2014-01-07T01:35:44.904Z","type":"message"}
{"nick":"tjfontaine","message":"StreamWrap descendent class sets _module(\"fs\")","date":"2014-01-07T01:36:14.984Z","type":"message"}
{"nick":"superjoe","reason":"Ping timeout: 248 seconds","date":"2014-01-07T01:36:37.750Z","type":"quit"}
{"nick":"tjfontaine","message":"each WriteWrap instantiated after that takes in the constructor the _module as an argument","date":"2014-01-07T01:37:02.785Z","type":"message"}
{"nick":"tjfontaine","message":"as well as \"write\"","date":"2014-01-07T01:37:11.465Z","type":"message"}
{"nick":"tjfontaine","message":"so then when before fires, it can pass _module, _probe to javascript lnad","date":"2014-01-07T01:37:27.272Z","type":"message"}
{"nick":"tjfontaine","message":"*land","date":"2014-01-07T01:37:28.445Z","type":"message"}
{"nick":"groundwater","message":"i'm out for now","date":"2014-01-07T01:39:05.350Z","type":"message"}
{"nick":"trevnorris","message":"i'm still not getting how we determine when, say, an fs,write is triggered.","date":"2014-01-07T01:39:06.837Z","type":"message"}
{"nick":"tjfontaine","message":"technically WriteWrap could have \"write\" be a static member since it's already known in advance","date":"2014-01-07T01:39:07.497Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: see ya","date":"2014-01-07T01:39:23.355Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: we know because WriteWrap transitions the MakeCallback? and they are member variables on that class?","date":"2014-01-07T01:39:30.961Z","type":"message"}
{"nick":"trevnorris","message":"take fs.write. it has its own writeBuffer implementation apart from StreamWrap::WriteBuffer","date":"2014-01-07T01:40:31.859Z","type":"message"}
{"nick":"trevnorris","message":"then, if it's an async call, it creates an FSReqWrap, which inherits from ReqWrap","date":"2014-01-07T01:40:53.485Z","type":"message"}
{"nick":"tjfontaine","message":"but they still have FSWriteWrap?","date":"2014-01-07T01:40:56.157Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2014-01-07T01:41:00.762Z","type":"message"}
{"nick":"tjfontaine","message":"so we jsut define it in the descendent class?","date":"2014-01-07T01:41:07.559Z","type":"message"}
{"nick":"tjfontaine","message":"new FSReqWrap(env, \"write\"","date":"2014-01-07T01:41:17.439Z","type":"message"}
{"nick":"tjfontaine","message":"it already *has* it","date":"2014-01-07T01:41:20.186Z","type":"message"}
{"nick":"tjfontaine","message":"we just have to teach it to do somethign with it","date":"2014-01-07T01:41:37.758Z","type":"message"}
{"nick":"trevnorris","message":"oh.... bloody hell. i see.","date":"2014-01-07T01:41:50.013Z","type":"message"}
{"nick":"daviddias","date":"2014-01-07T01:42:32.849Z","type":"join"}
{"nick":"thlorenz","date":"2014-01-07T01:42:44.109Z","type":"join"}
{"nick":"tjfontaine","message":"btw I'm goign to send an email out, but everyone seemed ok with thursday at 9am for the weekly meeting","date":"2014-01-07T01:43:11.255Z","type":"message"}
{"nick":"tjfontaine","message":"9a pst","date":"2014-01-07T01:43:15.348Z","type":"message"}
{"nick":"trevnorris","message":"coolio.","date":"2014-01-07T01:43:19.616Z","type":"message"}
{"nick":"trevnorris","message":"alright, i'm out too.","date":"2014-01-07T01:43:23.944Z","type":"message"}
{"nick":"trevnorris","message":"talk to you in the morning","date":"2014-01-07T01:43:36.599Z","type":"message"}
{"nick":"trevnorris","action":"&","date":"2014-01-07T01:43:37.974Z","type":"action"}
{"nick":"mikolalysenko","date":"2014-01-07T01:43:38.818Z","type":"join"}
{"nick":"tjfontaine","message":"k enjoy","date":"2014-01-07T01:43:40.841Z","type":"message"}
{"nick":"trevnorris","message":"LOUDBOT WHERE ARE YOU????","date":"2014-01-07T01:43:47.907Z","type":"message"}
{"nick":"kazupon","date":"2014-01-07T01:46:11.817Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T01:47:02.685Z","type":"quit"}
{"nick":"dap_1","reason":"Quit: Leaving.","date":"2014-01-07T01:51:14.885Z","type":"quit"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-01-07T01:55:39.684Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T02:04:27.823Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T02:10:16.557Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T02:11:51.588Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2014-01-07T02:15:05.355Z","type":"quit"}
{"nick":"ik_","date":"2014-01-07T02:22:25.671Z","type":"join"}
{"nick":"ik_","reason":"Client Quit","date":"2014-01-07T02:22:25.830Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T02:25:05.968Z","type":"join"}
{"nick":"rmg","date":"2014-01-07T02:26:10.817Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T02:32:39.599Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 265 seconds","date":"2014-01-07T02:35:00.929Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T02:36:02.344Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T02:37:09.379Z","type":"join"}
{"nick":"kazupon","date":"2014-01-07T02:38:29.398Z","type":"join"}
{"nick":"stagas","date":"2014-01-07T02:38:40.721Z","type":"join"}
{"nick":"daviddias","reason":"Read error: No route to host","date":"2014-01-07T02:42:07.383Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T02:42:36.845Z","type":"join"}
{"nick":"c4milo","date":"2014-01-07T02:43:37.334Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2014-01-07T02:46:01.224Z","type":"quit"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T02:47:02.705Z","type":"quit"}
{"nick":"c4milo","date":"2014-01-07T02:54:11.546Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2014-01-07T02:57:35.366Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T03:09:15.920Z","type":"quit"}
{"nick":"AvianFlu","date":"2014-01-07T03:14:48.851Z","type":"join"}
{"nick":"__rockbot__","date":"2014-01-07T03:18:00.039Z","type":"join"}
{"nick":"CAPSLOCKBOT","date":"2014-01-07T03:36:12.255Z","type":"join"}
{"nick":"LOUDBOT","date":"2014-01-07T03:36:12.415Z","type":"join"}
{"nick":"kazupon","date":"2014-01-07T03:58:15.049Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 260 seconds","date":"2014-01-07T04:03:51.860Z","type":"quit"}
{"nick":"brson","reason":"Quit: leaving","date":"2014-01-07T04:04:24.291Z","type":"quit"}
{"nick":"kazupon","date":"2014-01-07T04:19:22.864Z","type":"join"}
{"nick":"kazupon","reason":"Read error: Connection reset by peer","date":"2014-01-07T04:20:47.358Z","type":"quit"}
{"nick":"kazupon","date":"2014-01-07T04:21:03.843Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2014-01-07T04:30:56.879Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T04:31:18.945Z","type":"join"}
{"nick":"daviddias","reason":"Read error: Operation timed out","date":"2014-01-07T04:34:07.765Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 264 seconds","date":"2014-01-07T04:38:02.749Z","type":"quit"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-01-07T04:42:30.829Z","type":"quit"}
{"nick":"thlorenz","date":"2014-01-07T04:43:05.866Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 264 seconds","date":"2014-01-07T04:47:38.690Z","type":"quit"}
{"nick":"CAPSLOCKBOT","reason":"Remote host closed the connection","date":"2014-01-07T04:48:56.614Z","type":"quit"}
{"nick":"LOUDBOT","reason":"Remote host closed the connection","date":"2014-01-07T04:48:56.772Z","type":"quit"}
{"nick":"isaacs","message":"trevnorris: ik has been notified of the quietness.","date":"2014-01-07T04:49:06.919Z","type":"message"}
{"nick":"ik","date":"2014-01-07T04:49:29.712Z","type":"join"}
{"nick":"LOUDBOT","date":"2014-01-07T04:49:31.361Z","type":"join"}
{"nick":"CAPSLOCKBOT","date":"2014-01-07T04:49:31.361Z","type":"join"}
{"nick":"ik","date":"2014-01-07T04:49:35.685Z","type":"part"}
{"nick":"isaacs_mobile","date":"2014-01-07T04:59:42.444Z","type":"join"}
{"nick":"isaacs_mobile","reason":"Client Quit","date":"2014-01-07T05:01:45.855Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T05:17:45.020Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2014-01-07T05:20:10.434Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T05:27:53.482Z","type":"join"}
{"nick":"lucab","date":"2014-01-07T05:31:57.721Z","type":"join"}
{"nick":"tjfontai1e","date":"2014-01-07T05:34:58.898Z","type":"join"}
{"nick":"ircretary","reason":"*.net *.split","date":"2014-01-07T05:36:13.006Z","type":"quit"}
{"nick":"calvinfo","reason":"*.net *.split","date":"2014-01-07T05:36:13.326Z","type":"quit"}
{"nick":"trevnorris","reason":"*.net *.split","date":"2014-01-07T05:36:14.286Z","type":"quit"}
{"nick":"trevnorris","date":"2014-01-07T05:36:26.320Z","type":"join"}
{"nick":"calvinfo","date":"2014-01-07T05:36:33.046Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T05:38:34.525Z","type":"quit"}
{"nick":"kaeso","reason":"*.net *.split","date":"2014-01-07T05:39:43.683Z","type":"quit"}
{"nick":"tjfontaine","reason":"*.net *.split","date":"2014-01-07T05:39:43.843Z","type":"quit"}
{"nick":"rch","reason":"*.net *.split","date":"2014-01-07T05:39:44.003Z","type":"quit"}
{"nick":"tellnes","reason":"*.net *.split","date":"2014-01-07T05:39:45.283Z","type":"quit"}
{"nick":"lucab","new_nick":"kaeso","date":"2014-01-07T05:39:45.603Z","type":"nick"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2014-01-07T05:41:40.659Z","type":"quit"}
{"nick":"tellnes_","date":"2014-01-07T05:41:41.773Z","type":"join"}
{"nick":"tellnes_","reason":"Excess Flood","date":"2014-01-07T05:42:29.394Z","type":"quit"}
{"nick":"ircretary","date":"2014-01-07T05:42:32.920Z","type":"join"}
{"nick":"__rockbot__","reason":"Quit: __rockbot__","date":"2014-01-07T05:43:48.482Z","type":"quit"}
{"nick":"tellnes","date":"2014-01-07T05:44:27.122Z","type":"join"}
{"nick":"rch","date":"2014-01-07T05:47:47.324Z","type":"join"}
{"nick":"tellnes_","date":"2014-01-07T05:50:56.502Z","type":"join"}
{"nick":"tellnes","reason":"*.net *.split","date":"2014-01-07T05:52:17.763Z","type":"quit"}
{"nick":"trevnorris","reason":"*.net *.split","date":"2014-01-07T05:52:18.244Z","type":"quit"}
{"nick":"kazupon","reason":"*.net *.split","date":"2014-01-07T05:52:19.044Z","type":"quit"}
{"nick":"tellnes_","new_nick":"tellnes","date":"2014-01-07T05:52:19.683Z","type":"nick"}
{"nick":"kazupon","date":"2014-01-07T05:53:35.422Z","type":"join"}
{"nick":"trevnorris","date":"2014-01-07T05:54:09.205Z","type":"join"}
{"nick":"abraxas","date":"2014-01-07T05:59:25.419Z","type":"join"}
{"nick":"tjfontai1e","new_nick":"tjfontaine","date":"2014-01-07T06:02:41.148Z","type":"nick"}
{"nick":"rch","reason":"Changing host","date":"2014-01-07T06:02:42.688Z","type":"quit"}
{"nick":"rch","date":"2014-01-07T06:02:42.847Z","type":"join"}
{"nick":"tjfontaine","reason":"Changing host","date":"2014-01-07T06:02:48.836Z","type":"quit"}
{"nick":"tjfontaine","date":"2014-01-07T06:02:48.987Z","type":"join"}
{"nick":"m76","date":"2014-01-07T06:10:55.345Z","type":"join"}
{"nick":"AvianFlu","reason":"Ping timeout: 264 seconds","date":"2014-01-07T06:11:38.745Z","type":"quit"}
{"nick":"indexzero","date":"2014-01-07T06:34:33.812Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 260 seconds","date":"2014-01-07T06:35:59.868Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-v0.10-windows\u0002: #422 \u00037UNSTABLE\u000f windows-x64 (11/608) windows-ia32 (11/608) http://jenkins.nodejs.org/job/nodejs-v0.10-windows/422/","date":"2014-01-07T06:41:29.991Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2014-01-07T06:45:11.436Z","type":"quit"}
{"nick":"bajtos","date":"2014-01-07T06:49:49.966Z","type":"join"}
{"nick":"__rockbot__","date":"2014-01-07T07:01:50.632Z","type":"join"}
{"nick":"mikeal","date":"2014-01-07T07:15:29.022Z","type":"join"}
{"nick":"__rockbot__","reason":"Quit: __rockbot__","date":"2014-01-07T07:15:37.596Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T07:20:14.869Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T07:24:50.719Z","type":"quit"}
{"nick":"LOUDBOT","reason":"Ping timeout: 245 seconds","date":"2014-01-07T07:33:45.276Z","type":"quit"}
{"nick":"CAPSLOCKBOT","reason":"Ping timeout: 245 seconds","date":"2014-01-07T07:33:45.431Z","type":"quit"}
{"nick":"LOUDBOT","date":"2014-01-07T07:35:44.470Z","type":"join"}
{"nick":"CAPSLOCKBOT","date":"2014-01-07T07:35:49.238Z","type":"join"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2014-01-07T07:41:46.710Z","type":"quit"}
{"nick":"rendar","date":"2014-01-07T07:50:34.939Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 276 seconds","date":"2014-01-07T08:05:57.243Z","type":"quit"}
{"nick":"AlexisMocha","date":"2014-01-07T08:10:05.231Z","type":"join"}
{"nick":"kazupon","date":"2014-01-07T08:11:26.175Z","type":"join"}
{"nick":"daviddias","date":"2014-01-07T08:14:51.842Z","type":"join"}
{"nick":"calvinfo","date":"2014-01-07T08:16:24.918Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T08:19:26.768Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T08:20:18.845Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T08:24:50.720Z","type":"quit"}
{"nick":"hz","date":"2014-01-07T08:47:58.862Z","type":"join"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2014-01-07T08:49:43.046Z","type":"quit"}
{"nick":"bajtos","date":"2014-01-07T08:55:03.458Z","type":"join"}
{"nick":"bajtos","reason":"Read error: Connection timed out","date":"2014-01-07T09:05:50.081Z","type":"quit"}
{"nick":"indutny","message":"hey people","date":"2014-01-07T09:05:53.559Z","type":"message"}
{"nick":"[m76]","date":"2014-01-07T09:11:20.349Z","type":"join"}
{"nick":"m76","reason":"Ping timeout: 264 seconds","date":"2014-01-07T09:12:14.800Z","type":"quit"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2014-01-07T09:27:07.940Z","type":"quit"}
{"nick":"calvinfo","date":"2014-01-07T09:29:04.385Z","type":"join"}
{"nick":"janjongboom","date":"2014-01-07T09:31:37.639Z","type":"join"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2014-01-07T09:42:42.037Z","type":"quit"}
{"nick":"roxlu","date":"2014-01-07T10:11:18.674Z","type":"join"}
{"nick":"rmg","date":"2014-01-07T10:16:32.388Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 265 seconds","date":"2014-01-07T10:21:25.400Z","type":"quit"}
{"nick":"AlexisMocha","message":"hello","date":"2014-01-07T10:25:19.286Z","type":"message"}
{"nick":"AlexisMocha","message":"any updates on the 0.12 release date?","date":"2014-01-07T10:27:09.002Z","type":"message"}
{"nick":"daviddias","date":"2014-01-07T10:30:34.858Z","type":"join"}
{"nick":"indexzero","date":"2014-01-07T10:47:39.006Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2014-01-07T10:49:45.976Z","type":"quit"}
{"nick":"janjongboom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2014-01-07T10:55:41.006Z","type":"quit"}
{"nick":"abraxas","date":"2014-01-07T11:04:48.013Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2014-01-07T11:06:46.107Z","type":"quit"}
{"nick":"[m76]","reason":"Ping timeout: 260 seconds","date":"2014-01-07T11:19:16.152Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T11:32:15.154Z","type":"quit"}
{"nick":"m76","date":"2014-01-07T11:33:39.268Z","type":"join"}
{"nick":"daviddias","reason":"Remote host closed the connection","date":"2014-01-07T11:34:47.690Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T11:35:17.980Z","type":"join"}
{"nick":"janjongboom","date":"2014-01-07T11:35:42.876Z","type":"join"}
{"nick":"stagas","reason":"Ping timeout: 264 seconds","date":"2014-01-07T11:42:50.783Z","type":"quit"}
{"nick":"inolen1","reason":"Quit: Leaving.","date":"2014-01-07T12:21:38.767Z","type":"quit"}
{"nick":"kazupon","date":"2014-01-07T12:43:44.380Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 276 seconds","date":"2014-01-07T12:48:42.240Z","type":"quit"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2014-01-07T13:00:29.096Z","type":"quit"}
{"nick":"abraxas","date":"2014-01-07T13:07:49.693Z","type":"join"}
{"nick":"abraxas","reason":"Ping timeout: 276 seconds","date":"2014-01-07T13:12:45.224Z","type":"quit"}
{"nick":"AvianFlu","date":"2014-01-07T14:03:21.838Z","type":"join"}
{"nick":"mikolalysenko","date":"2014-01-07T14:10:45.972Z","type":"join"}
{"nick":"hueniverse","reason":"Ping timeout: 245 seconds","date":"2014-01-07T14:13:50.132Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 260 seconds","date":"2014-01-07T14:27:23.819Z","type":"quit"}
{"nick":"mikolalysenko","date":"2014-01-07T14:35:48.173Z","type":"join"}
{"nick":"thlorenz","date":"2014-01-07T14:42:34.927Z","type":"join"}
{"nick":"daviddias","date":"2014-01-07T14:43:00.151Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 265 seconds","date":"2014-01-07T14:44:21.138Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T14:46:44.854Z","type":"join"}
{"nick":"karupanerura","new_nick":"zz_karupanerura","date":"2014-01-07T14:51:50.373Z","type":"nick"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2014-01-07T15:04:49.395Z","type":"quit"}
{"nick":"pachet","date":"2014-01-07T15:06:45.949Z","type":"join"}
{"nick":"AvianFlu","date":"2014-01-07T15:15:57.063Z","type":"join"}
{"nick":"AvianFlu_","date":"2014-01-07T15:17:16.892Z","type":"join"}
{"nick":"AvianFlu","reason":"Disconnected by services","date":"2014-01-07T15:18:18.435Z","type":"quit"}
{"nick":"AvianFlu_","new_nick":"AvianFlu","date":"2014-01-07T15:18:21.204Z","type":"nick"}
{"nick":"janjongboom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2014-01-07T15:22:52.900Z","type":"quit"}
{"nick":"janjongboom","date":"2014-01-07T15:27:13.754Z","type":"join"}
{"nick":"mikolalysenko","date":"2014-01-07T15:30:36.031Z","type":"join"}
{"nick":"daviddia_","date":"2014-01-07T15:38:31.996Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 248 seconds","date":"2014-01-07T15:40:53.633Z","type":"quit"}
{"nick":"hz","date":"2014-01-07T15:44:04.869Z","type":"quit"}
{"nick":"hz","date":"2014-01-07T15:45:02.093Z","type":"join"}
{"nick":"janjongboom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2014-01-07T16:03:16.992Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 272 seconds","date":"2014-01-07T16:08:13.899Z","type":"quit"}
{"nick":"mikolalysenko","date":"2014-01-07T16:11:24.321Z","type":"join"}
{"nick":"rmg","date":"2014-01-07T16:20:47.104Z","type":"join"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2014-01-07T16:23:23.163Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 252 seconds","date":"2014-01-07T16:25:23.687Z","type":"quit"}
{"nick":"mcavage","date":"2014-01-07T16:43:56.927Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #1698 \u00037UNSTABLE\u000f linux-x64 (2/608) osx-x64 (1/608) linux-ia32 (3/608) smartos-x64 (8/608) smartos-ia32 (6/608) osx-ia32 (1/608) http://jenkins.nodejs.org/job/nodejs-v0.10/1698/","date":"2014-01-07T16:45:08.857Z","type":"message"}
{"nick":"trevnorris","message":"morning","date":"2014-01-07T16:45:17.826Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #829 \u00037UNSTABLE\u000f smartos-x64 (6/692) smartos-ia32 (5/692) osx-ia32 (1/692) centos-ia32 (2/692) ubuntu-x64 (2/692) centos-x64 (3/692) http://jenkins.nodejs.org/job/nodejs-master/829/","date":"2014-01-07T16:45:20.903Z","type":"message"}
{"nick":"tjfontaine","message":"morning","date":"2014-01-07T16:46:08.819Z","type":"message"}
{"nick":"groundwater","message":"trevnorris tjfontaine morn'","date":"2014-01-07T16:46:28.488Z","type":"message"}
{"nick":"rmg","date":"2014-01-07T16:49:28.233Z","type":"join"}
{"nick":"daviddi__","date":"2014-01-07T17:00:41.484Z","type":"join"}
{"nick":"trevnorris","message":"isaacs: ping","date":"2014-01-07T17:01:30.182Z","type":"message"}
{"nick":"daviddia_","reason":"Ping timeout: 260 seconds","date":"2014-01-07T17:02:15.897Z","type":"quit"}
{"nick":"janjongboom","date":"2014-01-07T17:11:02.647Z","type":"join"}
{"nick":"AvianFlu","date":"2014-01-07T17:11:27.826Z","type":"join"}
{"nick":"isaacs","message":"trevnorris: pong","date":"2014-01-07T17:13:39.456Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: do you see anything inheretly bad w/ this script: https://gist.github.com/trevnorris/8302731","date":"2014-01-07T17:14:29.553Z","type":"message"}
{"nick":"AvianFlu_","date":"2014-01-07T17:14:36.794Z","type":"join"}
{"nick":"isaacs","message":"LOUDBOT: welcome back","date":"2014-01-07T17:14:36.998Z","type":"message"}
{"nick":"LOUDBOT","message":"isaacs: I CAN'T REMEMBER IF I'M GAY OR NOT","date":"2014-01-07T17:14:37.476Z","type":"message"}
{"nick":"isaacs","message":"LOUDBOT: don't be so binary about it.","date":"2014-01-07T17:14:51.345Z","type":"message"}
{"nick":"LOUDBOT","message":"isaacs: IS IT NORMAL TO EAT YOUR PERIOD BLOOD","date":"2014-01-07T17:14:51.873Z","type":"message"}
{"nick":"isaacs","message":"Ok, then.","date":"2014-01-07T17:14:56.469Z","type":"message"}
{"nick":"tjfontaine","message":"...","date":"2014-01-07T17:15:04.770Z","type":"message"}
{"nick":"AvianFlu","reason":"Disconnected by services","date":"2014-01-07T17:15:29.833Z","type":"quit"}
{"nick":"AvianFlu_","new_nick":"AvianFlu","date":"2014-01-07T17:15:49.451Z","type":"nick"}
{"nick":"isaacs","message":"trevnorris: nothing outright terrible.","date":"2014-01-07T17:16:06.031Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: it's a bit weird to push more after emitting a 'readable' event already, but meh","date":"2014-01-07T17:16:35.484Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: that script is blocking the eloop and filling the nextTickQueue. not allowing any of it to be processed. (in v0.10)","date":"2014-01-07T17:16:37.426Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: yeah, i mean, it's an asshole.","date":"2014-01-07T17:16:51.343Z","type":"message"}
{"nick":"trevnorris","message":"ok. how would you change it?","date":"2014-01-07T17:17:17.872Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: this is the problem with synthetic streams: they can be jerks.","date":"2014-01-07T17:17:20.932Z","type":"message"}
{"nick":"trevnorris","message":"ah, ok.","date":"2014-01-07T17:17:30.816Z","type":"message"}
{"nick":"isaacs","message":"a stream should be based on some actual amount of data coming from something.","date":"2014-01-07T17:17:33.044Z","type":"message"}
{"nick":"isaacs","message":"you can make it less bad by generating a big chunk ahead of time that you know will return false from push()","date":"2014-01-07T17:17:48.748Z","type":"message"}
{"nick":"isaacs","message":"like, this.push(new Buffer(this._readableState.whateverDeterminesThatIForget).fill('hi all'))","date":"2014-01-07T17:18:29.419Z","type":"message"}
{"nick":"isaacs","message":"then you're just pushing one big thing","date":"2014-01-07T17:18:45.883Z","type":"message"}
{"nick":"isaacs","message":"it all ends up being in memory anyway","date":"2014-01-07T17:18:55.011Z","type":"message"}
{"nick":"trevnorris","message":"i'm mainly looking at https://github.com/joyent/node/issues/6065#issuecomment-26612310","date":"2014-01-07T17:19:17.391Z","type":"message"}
{"nick":"isaacs","message":"it's basically the same as if you did while(socket.write('hi all'));","date":"2014-01-07T17:19:23.701Z","type":"message"}
{"nick":"trevnorris","message":"which they're complaining about the warning message","date":"2014-01-07T17:19:25.839Z","type":"message"}
{"nick":"trevnorris","message":"but the minimal case shows that nextTickQueue just isn't allowed to drain.","date":"2014-01-07T17:19:37.408Z","type":"message"}
{"nick":"TooTallNate","date":"2014-01-07T17:19:44.852Z","type":"join"}
{"nick":"trevnorris","message":"the \"consumer\" script is borked because they're not consuming the data","date":"2014-01-07T17:20:30.313Z","type":"message"}
{"nick":"trevnorris","message":"so of course it's going to get backed up, but I fixed that on my end for testing","date":"2014-01-07T17:20:41.366Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: so, the _read function passes a size.  use that to know how much 'hi all' to send.","date":"2014-01-07T17:21:39.000Z","type":"message"}
{"nick":"isaacs","message":"it's not the randomness of the bytes that matters, at all.  crypto is a red herring.","date":"2014-01-07T17:21:47.696Z","type":"message"}
{"nick":"isaacs","message":"so, you're correct there :)","date":"2014-01-07T17:21:54.832Z","type":"message"}
{"nick":"isaacs","message":"I've gotta head to SF.","date":"2014-01-07T17:22:06.847Z","type":"message"}
{"nick":"trevnorris","message":"fun. see ya later","date":"2014-01-07T17:22:12.505Z","type":"message"}
{"nick":"hueniverse","date":"2014-01-07T17:23:48.983Z","type":"join"}
{"nick":"sindresorhus_","date":"2014-01-07T17:26:30.643Z","type":"join"}
{"nick":"julian_duque","date":"2014-01-07T17:28:16.484Z","type":"join"}
{"nick":"c4milo","date":"2014-01-07T17:28:38.963Z","type":"join"}
{"nick":"daviddias","date":"2014-01-07T17:28:39.373Z","type":"join"}
{"nick":"swajr","date":"2014-01-07T17:30:11.675Z","type":"join"}
{"nick":"dap_","date":"2014-01-07T17:30:47.862Z","type":"join"}
{"nick":"daviddi__","reason":"Ping timeout: 245 seconds","date":"2014-01-07T17:30:50.245Z","type":"quit"}
{"nick":"sindresorhus","reason":"Ping timeout: 246 seconds","date":"2014-01-07T17:34:20.578Z","type":"quit"}
{"nick":"julianduque","reason":"Ping timeout: 246 seconds","date":"2014-01-07T17:34:21.179Z","type":"quit"}
{"nick":"sindresorhus_","new_nick":"sindresorhus","date":"2014-01-07T17:34:21.329Z","type":"nick"}
{"nick":"swaj","reason":"Ping timeout: 246 seconds","date":"2014-01-07T17:34:21.479Z","type":"quit"}
{"nick":"iamstef","reason":"Ping timeout: 240 seconds","date":"2014-01-07T17:35:27.768Z","type":"quit"}
{"nick":"iamstef","date":"2014-01-07T17:35:46.236Z","type":"join"}
{"nick":"inolen","date":"2014-01-07T17:41:04.697Z","type":"join"}
{"nick":"inolen1","date":"2014-01-07T17:43:42.447Z","type":"join"}
{"nick":"nickleefly_","date":"2014-01-07T17:43:50.412Z","type":"join"}
{"nick":"calvinfo","date":"2014-01-07T17:44:13.402Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: ping","date":"2014-01-07T17:46:34.638Z","type":"message"}
{"nick":"tjfontaine","message":"pong","date":"2014-01-07T17:47:40.475Z","type":"message"}
{"nick":"janjongb_","date":"2014-01-07T17:47:42.647Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: in this synthetic stream (as isaacs calls it) it has a ._readableState.buffer which is filling up when .push() is used. but when I internally check the buffer.length it's 0.","date":"2014-01-07T17:48:37.320Z","type":"message"}
{"nick":"trevnorris","message":"so it's like the two are disconnected somehow","date":"2014-01-07T17:48:46.655Z","type":"message"}
{"nick":"trevnorris","message":"and since internally it sees there's zero buffer length it continues to call nextTick, but the buffer length on the synthetic stream continues to grow","date":"2014-01-07T17:49:16.569Z","type":"message"}
{"nick":"trevnorris","message":"I can't figure out why the \"buffer\" array isn't the same for the two.","date":"2014-01-07T17:49:53.319Z","type":"message"}
{"nick":"nickleefly","reason":"Ping timeout: 240 seconds","date":"2014-01-07T17:50:52.777Z","type":"quit"}
{"nick":"Damn3d","reason":"Ping timeout: 240 seconds","date":"2014-01-07T17:50:53.377Z","type":"quit"}
{"nick":"janjongboom","reason":"Ping timeout: 240 seconds","date":"2014-01-07T17:50:54.996Z","type":"quit"}
{"nick":"Domenic_","reason":"Ping timeout: 240 seconds","date":"2014-01-07T17:50:59.937Z","type":"quit"}
{"nick":"inolen","reason":"Ping timeout: 240 seconds","date":"2014-01-07T17:51:00.537Z","type":"quit"}
{"nick":"Damn3d","date":"2014-01-07T17:51:04.357Z","type":"join"}
{"nick":"nickleefly_","new_nick":"nickleefly","date":"2014-01-07T17:51:04.807Z","type":"nick"}
{"nick":"trevnorris","message":"oh, wait. ok. so the pipe's origin .readableState.buffer is filling.","date":"2014-01-07T17:51:34.222Z","type":"message"}
{"nick":"trevnorris","message":"they are being written to the dest, but the buffer array isn't ever being cleared.","date":"2014-01-07T17:51:44.483Z","type":"message"}
{"nick":"Damn3d","new_nick":"Guest75589","date":"2014-01-07T17:51:48.216Z","type":"nick"}
{"nick":"Guest75589","reason":"Changing host","date":"2014-01-07T17:51:52.954Z","type":"quit"}
{"nick":"Guest75589","date":"2014-01-07T17:51:53.106Z","type":"join"}
{"nick":"Domenic_","date":"2014-01-07T17:52:04.243Z","type":"join"}
{"nick":"MI6","message":"\u0002libuv-master\u0002: #419 \u00034FAILURE\u000f windows (4/202) http://jenkins.nodejs.org/job/libuv-master/419/","date":"2014-01-07T17:53:38.363Z","type":"message"}
{"nick":"brson","date":"2014-01-07T17:53:58.321Z","type":"join"}
{"nick":"tjfontaine","message":"I'm not sure at the moment, without context switching into the streams api interface, I can probably in an hour?","date":"2014-01-07T17:54:43.404Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: nm it. just helping talking through it all. :)","date":"2014-01-07T17:55:08.564Z","type":"message"}
{"nick":"jmar777","date":"2014-01-07T17:56:01.853Z","type":"join"}
{"nick":"trevnorris","message":"wtf. before flowing a pipe _readableState.ranOut must be true, which will allow flow() to run. but ranOut is only set to true when flow() has run.","date":"2014-01-07T17:59:04.560Z","type":"message"}
{"nick":"trevnorris","message":"so... how is ranOut supposed to be set to true?","date":"2014-01-07T17:59:14.069Z","type":"message"}
{"nick":"octetcloud","date":"2014-01-07T18:00:50.810Z","type":"join"}
{"nick":"dap_1","date":"2014-01-07T18:03:14.818Z","type":"join"}
{"nick":"dap_","reason":"Ping timeout: 252 seconds","date":"2014-01-07T18:04:45.680Z","type":"quit"}
{"nick":"isaacs","message":"trevnorris: oh, so, when you're piping, then push() doesn't even bother to put it in the readable's array","date":"2014-01-07T18:05:27.635Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: it skips over that step, and just writes it directly","date":"2014-01-07T18:05:38.750Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: (iirc)","date":"2014-01-07T18:05:46.016Z","type":"message"}
{"nick":"isaacs","message":"that might be a stream3 thing, though i'm not sure","date":"2014-01-07T18:05:54.131Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: except that _readableState.buffer.length continues to grow","date":"2014-01-07T18:05:59.888Z","type":"message"}
{"nick":"trevnorris","message":"(this is for v0.10)","date":"2014-01-07T18:06:05.575Z","type":"message"}
{"nick":"isaacs","message":"hrm..","date":"2014-01-07T18:06:05.726Z","type":"message"}
{"nick":"isaacs","message":"yeah...","date":"2014-01-07T18:06:09.900Z","type":"message"}
{"nick":"isaacs","message":"i think, if there is a workaround, and the more thorough fix is \"use streams3\", then that's acceptable.","date":"2014-01-07T18:06:31.456Z","type":"message"}
{"nick":"isaacs","message":"streams2 have other problems as well.","date":"2014-01-07T18:06:38.930Z","type":"message"}
{"nick":"trevnorris","message":"can we bring streams3 to v0.10?","date":"2014-01-07T18:06:56.151Z","type":"message"}
{"nick":"Guest75589","reason":"Ping timeout: 240 seconds","date":"2014-01-07T18:09:42.144Z","type":"quit"}
{"nick":"trevnorris","message":"isaacs: yeah. so on v0.10 .pipe is properly sending all the data chunks, but for some reason _readableState.buffer isn't being cleared as they're being written.","date":"2014-01-07T18:11:23.034Z","type":"message"}
{"nick":"Damn3d_","date":"2014-01-07T18:11:47.791Z","type":"join"}
{"nick":"piscisaureus","date":"2014-01-07T18:11:51.682Z","type":"join"}
{"nick":"trevnorris","message":"isaacs: ah ha. got it. so it's entering flow() in _stream_readable, but never getting past the while()","date":"2014-01-07T18:13:54.764Z","type":"message"}
{"nick":"c4milo_","date":"2014-01-07T18:19:24.516Z","type":"join"}
{"nick":"c4milo","reason":"Ping timeout: 272 seconds","date":"2014-01-07T18:20:35.810Z","type":"quit"}
{"nick":"dap_1","reason":"Quit: Leaving.","date":"2014-01-07T18:21:00.783Z","type":"quit"}
{"nick":"trevnorris","message":"isaacs: so, doRead in Readable#read() is always true, which always calls _read(), which always pushes more data onto the buffer.","date":"2014-01-07T18:21:18.946Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 245 seconds","date":"2014-01-07T18:21:40.289Z","type":"quit"}
{"nick":"trevnorris","message":"hence, never allowing the while() loop to exit.","date":"2014-01-07T18:21:42.885Z","type":"message"}
{"nick":"dap_","date":"2014-01-07T18:22:29.467Z","type":"join"}
{"nick":"isaacs","message":"trevnorris: that makes sense.","date":"2014-01-07T18:24:25.895Z","type":"message"}
{"nick":"trevnorris","message":"doRead is being set to true here: if (state.length - n <= state.highWaterMark)","date":"2014-01-07T18:24:48.232Z","type":"message"}
{"nick":"isaacs","message":"it's like doing while(process.stderr.write('foo'))","date":"2014-01-07T18:24:57.591Z","type":"message"}
{"nick":"trevnorris","message":"though. shouldn't state.reading == true?","date":"2014-01-07T18:25:59.049Z","type":"message"}
{"nick":"trevnorris","message":"that would set doRead = false","date":"2014-01-07T18:26:06.287Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: no, because the _read() method is returning?  hrm.  i dunno.  it's been a while.","date":"2014-01-07T18:27:09.754Z","type":"message"}
{"nick":"isaacs","message":"0.10 is already paged out","date":"2014-01-07T18:27:14.497Z","type":"message"}
{"nick":"trevnorris","message":"heh","date":"2014-01-07T18:27:19.171Z","type":"message"}
{"nick":"trevnorris","message":"state.reading = false in readableAddChunk(). but why it's being set there, but not in addToFront, i'm not sure. i'll experiment.","date":"2014-01-07T18:29:03.374Z","type":"message"}
{"nick":"trevnorris","message":"well suck. that didn't work.","date":"2014-01-07T18:29:55.855Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: you can mostly ignore the addToFront stuff.  that's for stream.unshift(), which is a consumer method, unlike stream.push() which is a producer method.","date":"2014-01-07T18:35:43.234Z","type":"message"}
{"nick":"trevnorris","message":"ok","date":"2014-01-07T18:35:54.440Z","type":"message"}
{"nick":"isaacs","message":"producer actions affect \"Reading\" state","date":"2014-01-07T18:35:55.060Z","type":"message"}
{"nick":"isaacs","message":"consumer actions do not.","date":"2014-01-07T18:35:58.477Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: ok. I just cant see how to break out of the while loop","date":"2014-01-07T18:36:28.718Z","type":"message"}
{"nick":"trevnorris","message":"should we limit the amount to be written before breaking the while loop at the HWM?","date":"2014-01-07T18:37:11.572Z","type":"message"}
{"nick":"isaacs","message":"that'd probably be a good approach","date":"2014-01-07T18:37:34.991Z","type":"message"}
{"nick":"trevnorris","message":"cool. i'll give it a go.","date":"2014-01-07T18:37:58.518Z","type":"message"}
{"nick":"isaacs","message":"i mean, basically, there's this optimization your'e seeing, which is a good heuristic if you're not being ridiculous, but people are ridiculous, so it falls over.","date":"2014-01-07T18:38:02.009Z","type":"message"}
{"nick":"isaacs","message":"srsly, who writes 100TB of crap in a single fast loop?","date":"2014-01-07T18:38:14.504Z","type":"message"}
{"nick":"trevnorris","message":"haha, yeah. exactly. :)","date":"2014-01-07T18:38:14.654Z","type":"message"}
{"nick":"isaacs","message":"that's just a jerk move","date":"2014-01-07T18:38:19.316Z","type":"message"}
{"nick":"janjongb_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2014-01-07T18:43:08.399Z","type":"quit"}
{"nick":"trevnorris","message":"ok cool. that breaks out well enough. now. to get flow() to run again afterwards...","date":"2014-01-07T18:45:11.247Z","type":"message"}
{"nick":"vigith","date":"2014-01-07T18:45:41.023Z","type":"join"}
{"nick":"inolen1","reason":"*.net *.split","date":"2014-01-07T18:47:32.508Z","type":"quit"}
{"nick":"vigith","message":"uv_accept(server, (uv_stream_t *) client);","date":"2014-01-07T18:47:48.145Z","type":"message"}
{"nick":"inolen","date":"2014-01-07T18:47:53.708Z","type":"join"}
{"nick":"vigith","message":"now i would like to get the client ip.. how can i do it?","date":"2014-01-07T18:48:00.535Z","type":"message"}
{"nick":"c4milo_","reason":"Remote host closed the connection","date":"2014-01-07T18:48:27.953Z","type":"quit"}
{"nick":"defunctzombie_","new_nick":"defunctzombie","date":"2014-01-07T18:49:06.447Z","type":"nick"}
{"nick":"defunctzombie","reason":"Changing host","date":"2014-01-07T18:49:06.597Z","type":"quit"}
{"nick":"defunctzombie","date":"2014-01-07T18:49:06.745Z","type":"join"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-01-07T18:50:21.613Z","type":"quit"}
{"nick":"inolen1","date":"2014-01-07T18:51:49.232Z","type":"join"}
{"nick":"c4milo","date":"2014-01-07T18:57:04.901Z","type":"join"}
{"nick":"inolen","reason":"Ping timeout: 240 seconds","date":"2014-01-07T19:01:18.508Z","type":"quit"}
{"nick":"Damn3d_","reason":"Ping timeout: 240 seconds","date":"2014-01-07T19:01:20.538Z","type":"quit"}
{"nick":"dap_","reason":"Quit: Leaving.","date":"2014-01-07T19:01:58.172Z","type":"quit"}
{"nick":"dap_","date":"2014-01-07T19:02:40.969Z","type":"join"}
{"nick":"daviddias","reason":"Remote host closed the connection","date":"2014-01-07T19:06:13.223Z","type":"quit"}
{"nick":"Damn3d","date":"2014-01-07T19:06:17.426Z","type":"join"}
{"nick":"Damn3d","reason":"Changing host","date":"2014-01-07T19:07:12.358Z","type":"quit"}
{"nick":"Damn3d","date":"2014-01-07T19:07:12.358Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T19:08:47.369Z","type":"quit"}
{"nick":"abraxas","date":"2014-01-07T19:10:37.353Z","type":"join"}
{"nick":"abraxas","reason":"Ping timeout: 240 seconds","date":"2014-01-07T19:14:38.703Z","type":"quit"}
{"nick":"mcavage","reason":"Remote host closed the connection","date":"2014-01-07T19:17:54.751Z","type":"quit"}
{"nick":"trevnorris","message":"isaacs: oy... yeah. don't think i'm going to take the time to fix this.","date":"2014-01-07T19:31:23.167Z","type":"message"}
{"nick":"trevnorris","message":"found a solution, that breaks a dozen other tests..","date":"2014-01-07T19:31:32.227Z","type":"message"}
{"nick":"trevnorris","message":".","date":"2014-01-07T19:31:33.187Z","type":"message"}
{"nick":"piscisaureus","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2014-01-07T19:34:58.947Z","type":"quit"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Ben Noordhuis\u000f \u00037master\u000f * \u0002f057c70\u0002 : build: unconditionally disable -Werror - http://git.io/Qql_Zw","date":"2014-01-07T19:35:15.350Z","type":"message"}
{"nick":"piscisaureus","date":"2014-01-07T19:35:18.367Z","type":"join"}
{"nick":"indutny","message":"hey people","date":"2014-01-07T19:40:10.604Z","type":"message"}
{"nick":"indutny","message":"how are we?","date":"2014-01-07T19:40:13.434Z","type":"message"}
{"nick":"indutny","message":"vigith: still around?","date":"2014-01-07T19:40:20.866Z","type":"message"}
{"nick":"indutny","message":"vigith: https://github.com/joyent/libuv/blob/master/include/uv.h#L800","date":"2014-01-07T19:40:44.097Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: yeah.","date":"2014-01-07T19:41:07.717Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: i apologize.","date":"2014-01-07T19:41:10.987Z","type":"message"}
{"nick":"trevnorris","message":"isaacs: ok. well, i'm considering this unsolvable unless we backport streams3.","date":"2014-01-07T19:41:42.531Z","type":"message"}
{"nick":"trevnorris","message":"issue is that the Writable is only aware of the single buffer that's being written out, so it never detects it has surpassed the HWM","date":"2014-01-07T19:42:08.907Z","type":"message"}
{"nick":"trevnorris","message":"so it never emits drain","date":"2014-01-07T19:42:12.815Z","type":"message"}
{"nick":"trevnorris","message":"so the readable will never start reading again (if I break out of the while loop when the actual HWM has been read in)","date":"2014-01-07T19:42:36.247Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: i see, because the writable is always returning true from write()?","date":"2014-01-07T19:43:39.512Z","type":"message"}
{"nick":"trevnorris","message":"yeah","date":"2014-01-07T19:43:47.469Z","type":"message"}
{"nick":"janjongboom","date":"2014-01-07T19:43:53.944Z","type":"join"}
{"nick":"trevnorris","message":"readable sets an event on the 'drain' event, but it never is fired because as far as the writable is concerned all the data was written out immediately","date":"2014-01-07T19:44:18.468Z","type":"message"}
{"nick":"trevnorris","message":"but the reable retains that data until after the drain event has fired.","date":"2014-01-07T19:44:36.237Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: ugh","date":"2014-01-07T19:45:18.084Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: maybe do a setImmediate to do it, instead fo a nextTick?","date":"2014-01-07T19:45:31.488Z","type":"message"}
{"nick":"trevnorris","message":"my solution to fix the issue was to break out of the while after reading in HWM bytes, removing state.flowing and changing the nextTick in write() to a setImmediate()","date":"2014-01-07T19:45:31.966Z","type":"message"}
{"nick":"trevnorris","message":"which allows the eloop to continue","date":"2014-01-07T19:45:38.476Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: right","date":"2014-01-07T19:45:41.077Z","type":"message"}
{"nick":"trevnorris","message":"but that caused hell","date":"2014-01-07T19:45:44.192Z","type":"message"}
{"nick":"isaacs","message":"hm.","date":"2014-01-07T19:45:50.953Z","type":"message"}
{"nick":"trevnorris","message":"because in some cases data needs to be processed before the eloop continues","date":"2014-01-07T19:46:06.005Z","type":"message"}
{"nick":"trevnorris","message":"at least, that's what the tests say.","date":"2014-01-07T19:46:13.796Z","type":"message"}
{"nick":"isaacs","message":"right","date":"2014-01-07T19:47:20.342Z","type":"message"}
{"nick":"mcavage","date":"2014-01-07T19:47:24.481Z","type":"join"}
{"nick":"isaacs","message":"well... those tests might be able to be changed.","date":"2014-01-07T19:47:35.186Z","type":"message"}
{"nick":"mikeal","date":"2014-01-07T19:47:50.099Z","type":"join"}
{"nick":"isaacs","message":"if they're just verifying behavior, but the behavior they're verifying isn't corret, then the test is buggy also.","date":"2014-01-07T19:47:52.002Z","type":"message"}
{"nick":"trevnorris","message":"ok. i see what you're saying.","date":"2014-01-07T19:48:14.003Z","type":"message"}
{"nick":"isaacs","message":"or, you could conditionally do The Thing, only when hwm is surpassed by 5x or something","date":"2014-01-07T19:48:14.605Z","type":"message"}
{"nick":"isaacs","message":"so it's only in cases of egregious dickheadedness","date":"2014-01-07T19:48:31.356Z","type":"message"}
{"nick":"trevnorris","message":"heh","date":"2014-01-07T19:48:39.373Z","type":"message"}
{"nick":"trevnorris","message":"i'll take another look later. have more stuff need to do for the v0.12 release","date":"2014-01-07T19:49:18.884Z","type":"message"}
{"nick":"isaacs","message":"great, that's more important anyway.","date":"2014-01-07T19:49:54.454Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: one way to Fix All The Bugs in 0.10 is to release 1.0, so that 0.10 is no longer supported :)","date":"2014-01-07T19:50:09.840Z","type":"message"}
{"nick":"trevnorris","message":"hahah. i like that","date":"2014-01-07T19:50:20.525Z","type":"message"}
{"nick":"isaacs","message":"trevnorris: releasing 0.12 will Fix All The Bugs in 0.8","date":"2014-01-07T19:50:21.600Z","type":"message"}
{"nick":"trevnorris","message":"heh","date":"2014-01-07T19:50:28.532Z","type":"message"}
{"nick":"isaacs","message":"and will even Fix All The Security Bugs in 0.6","date":"2014-01-07T19:50:41.825Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #830 \u00037UNSTABLE\u000f smartos-x64 (5/692) smartos-ia32 (6/692) centos-ia32 (3/692) ubuntu-x64 (1/692) ubuntu-ia32 (1/692) centos-x64 (3/692) http://jenkins.nodejs.org/job/nodejs-master/830/","date":"2014-01-07T19:52:27.662Z","type":"message"}
{"nick":"thlorenz","date":"2014-01-07T19:54:06.522Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T19:55:57.696Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T19:58:45.218Z","type":"join"}
{"nick":"m76","reason":"Read error: Connection reset by peer","date":"2014-01-07T19:58:49.648Z","type":"quit"}
{"nick":"tjfontaine","message":"something like that","date":"2014-01-07T19:58:49.798Z","type":"message"}
{"nick":"tjfontaine","message":"speaking of, did everyone get my email last night regarding the call on thursday?","date":"2014-01-07T19:59:00.317Z","type":"message"}
{"nick":"isaacs","message":"I got it :)","date":"2014-01-07T20:02:55.839Z","type":"message"}
{"nick":"isaacs","message":"tjfontaine: if you send a new invite, i'll cancel mine, and then you'll be the meeting owner","date":"2014-01-07T20:03:19.252Z","type":"message"}
{"nick":"superjoe","date":"2014-01-07T20:05:02.861Z","type":"join"}
{"nick":"m76","date":"2014-01-07T20:13:04.346Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T20:14:27.044Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T20:14:35.957Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2014-01-07T20:18:42.231Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T20:18:52.795Z","type":"join"}
{"nick":"m76","reason":"Read error: Connection reset by peer","date":"2014-01-07T20:18:58.055Z","type":"quit"}
{"nick":"m76","date":"2014-01-07T20:42:46.196Z","type":"join"}
{"nick":"tjfontaine","message":"isaacs: okey dokey","date":"2014-01-07T20:50:54.867Z","type":"message"}
{"nick":"piscisaureus","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2014-01-07T20:52:48.913Z","type":"quit"}
{"nick":"vigith","message":"indutny: thank you","date":"2014-01-07T21:06:17.001Z","type":"message"}
{"nick":"stagas","date":"2014-01-07T21:08:11.917Z","type":"join"}
{"nick":"mikolalysenko","date":"2014-01-07T21:09:17.379Z","type":"join"}
{"nick":"indutny","message":"vigith: you're welcome","date":"2014-01-07T21:09:29.903Z","type":"message"}
{"nick":"inolen1","reason":"Read error: Connection reset by peer","date":"2014-01-07T21:17:01.513Z","type":"quit"}
{"nick":"inolen","date":"2014-01-07T21:18:00.207Z","type":"join"}
{"nick":"trevnorris","message":"groundwater: ping","date":"2014-01-07T21:24:15.737Z","type":"message"}
{"nick":"vigith","message":"i am forking a process every time i get a tcp connection asking to run a command.. is it ok to have both tcp server and the process to be in same default loop? (the result of spawned process is returned to the tcp client).. ","date":"2014-01-07T21:24:16.815Z","type":"message"}
{"nick":"vigith","message":"or am i doing something really stupid? :-) ","date":"2014-01-07T21:24:47.112Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2014-01-07T21:31:35.492Z","type":"quit"}
{"nick":"jmar777","reason":"Remote host closed the connection","date":"2014-01-07T21:39:52.782Z","type":"quit"}
{"nick":"tjfontaine","message":"indutny: anything you need to get into libuv 0.10 before a release?","date":"2014-01-07T21:49:01.698Z","type":"message"}
{"nick":"indutny","message":"tjfontaine: no","date":"2014-01-07T21:49:13.232Z","type":"message"}
{"nick":"indutny","message":"green light for you! :)","date":"2014-01-07T21:49:17.454Z","type":"message"}
{"nick":"tjfontaine","message":"heh ok","date":"2014-01-07T21:49:20.821Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 272 seconds","date":"2014-01-07T21:49:57.378Z","type":"quit"}
{"nick":"janjongboom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2014-01-07T21:53:14.389Z","type":"quit"}
{"nick":"TooTallNate","date":"2014-01-07T21:56:06.659Z","type":"join"}
{"nick":"brson","reason":"Quit: Lost terminal","date":"2014-01-07T21:57:09.267Z","type":"quit"}
{"nick":"brson","date":"2014-01-07T21:57:42.834Z","type":"join"}
{"nick":"superjoe","reason":"Quit: Leaving","date":"2014-01-07T21:57:55.595Z","type":"quit"}
{"nick":"MI6","message":"\u0002joyent/libuv:\u0002 \u00033tjfontaine\u000f created tag v0.10.22 - http://git.io/EtIxQw","date":"2014-01-07T22:03:37.496Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/libuv:\u0002 \u00033Timothy J Fontaine\u000f \u00037v0.10\u000f * \u000297eda7f\u0002 : Now working on v0.10.23 (+1 more commits) - http://git.io/U5xzRw","date":"2014-01-07T22:03:40.823Z","type":"message"}
{"nick":"mikolalysenko","date":"2014-01-07T22:05:40.809Z","type":"join"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Timothy J Fontaine\u000f \u00037v0.10\u000f * \u000230b3bc2\u0002 : uv: Upgrade to v0.10.22 - http://git.io/S7dAzA","date":"2014-01-07T22:06:08.621Z","type":"message"}
{"nick":"brson","reason":"Ping timeout: 246 seconds","date":"2014-01-07T22:08:07.858Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T22:08:25.427Z","type":"join"}
{"nick":"mikolalysenko","reason":"Ping timeout: 252 seconds","date":"2014-01-07T22:11:20.667Z","type":"quit"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-01-07T22:14:31.769Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #1699 \u00037UNSTABLE\u000f linux-x64 (4/608) osx-x64 (2/608) linux-ia32 (2/608) smartos-x64 (6/608) smartos-ia32 (7/608) osx-ia32 (1/608) http://jenkins.nodejs.org/job/nodejs-v0.10/1699/","date":"2014-01-07T22:16:35.829Z","type":"message"}
{"nick":"m76","reason":"Read error: Connection reset by peer","date":"2014-01-07T22:26:03.078Z","type":"quit"}
{"nick":"trevnorris","message":"groundwater: ping","date":"2014-01-07T22:27:08.331Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: ping also","date":"2014-01-07T22:27:28.806Z","type":"message"}
{"nick":"tjfontaine","message":"semi-pong","date":"2014-01-07T22:27:34.230Z","type":"message"}
{"nick":"trevnorris","message":"heh","date":"2014-01-07T22:27:43.305Z","type":"message"}
{"nick":"tjfontaine","message":"what's up?","date":"2014-01-07T22:27:50.066Z","type":"message"}
{"nick":"trevnorris","message":"just want to get your feedback on EEO. i don't think I'll be able to fix all the hapi test fail cases w/o manually listening in on the EE.","date":"2014-01-07T22:28:22.605Z","type":"message"}
{"nick":"tjfontaine","message":"erm, what's happening with hapi that makes that a requirement? that is to say, how is it they're utilizing domains in such a way that we are currently breaking them?","date":"2014-01-07T22:29:10.902Z","type":"message"}
{"nick":"trevnorris","message":"AsyncListeners was meant to allow users to see what was happening in core. I got carried away w/ that thinking, well then. we can trace everything, forgetting the _in core_ part.","date":"2014-01-07T22:29:13.919Z","type":"message"}
{"nick":"trevnorris","message":"the way they're manually using domain.enter/exit to capture stuff in the execution of an EE.","date":"2014-01-07T22:30:02.868Z","type":"message"}
{"nick":"trevnorris","message":"i might be able to fix this w/ my current rework of AL, but i'm not 100% sure it will","date":"2014-01-07T22:30:19.865Z","type":"message"}
{"nick":"tjfontaine","message":"why/how is AL breaking that? does that mean that everyone doing enter/exit work in EEs are also broken?","date":"2014-01-07T22:30:56.835Z","type":"message"}
{"nick":"trevnorris","message":"no. that's the thing I don't get.","date":"2014-01-07T22:31:08.230Z","type":"message"}
{"nick":"trevnorris","message":"I traced through all of hapi's code and all the proper domains were in place. but for some reason their test still reports the error escaped the domain.","date":"2014-01-07T22:31:38.266Z","type":"message"}
{"nick":"brson","date":"2014-01-07T22:32:53.642Z","type":"join"}
{"nick":"trevnorris","message":"also, i firmly believe that just using simple assert is the best way to go. I had to trace through hapi, request, async, and who known how many other modules before it worked.","date":"2014-01-07T22:33:20.842Z","type":"message"}
{"nick":"tjfontaine","message":"ok well I'm writing \"prose\" right now, when I'm done with that I guess I can try and context switch into that, are you still just using their test suite?","date":"2014-01-07T22:33:47.514Z","type":"message"}
{"nick":"trevnorris","message":"i'm half way between that and the AL rewrite.","date":"2014-01-07T22:34:06.247Z","type":"message"}
{"nick":"rmg","date":"2014-01-07T22:34:39.827Z","type":"join"}
{"nick":"tjfontaine","message":"I vote for just continue with the AL rewrite I think","date":"2014-01-07T22:34:50.157Z","type":"message"}
{"nick":"tjfontaine","message":"I did push an update of my PR that indicates some of what I'm envisioning for a user facing api","date":"2014-01-07T22:35:28.695Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris, groundwater: https://github.com/joyent/node/pull/5940/files this only addresses most of the static probes at the moment","date":"2014-01-07T22:36:14.537Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: and will those be a noop if not being listened for?","date":"2014-01-07T22:38:47.994Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: https://github.com/joyent/node/pull/5940/files#diff-d057cd3202b378894d5ae0ba345d537dR31","date":"2014-01-07T22:40:52.359Z","type":"message"}
{"nick":"tjfontaine","message":"they have thes ame amount of overhead, if not less, since more of the object lookups are happening in the JIT context instead of in C++","date":"2014-01-07T22:40:52.638Z","type":"message"}
{"nick":"tjfontaine","message":"oh right","date":"2014-01-07T22:41:51.226Z","type":"message"}
{"nick":"tjfontaine","message":"indutny: yes, just go ahead and update openssl in master, that's fine","date":"2014-01-07T22:42:09.049Z","type":"message"}
{"nick":"indutny","message":"yay!","date":"2014-01-07T22:42:21.089Z","type":"message"}
{"nick":"tjfontaine","message":"brb","date":"2014-01-07T22:42:25.056Z","type":"message"}
{"nick":"indutny","message":"tjfontaine: what about v0.10 ?","date":"2014-01-07T22:42:51.942Z","type":"message"}
{"nick":"indutny","message":"should we do it there as well?","date":"2014-01-07T22:43:01.162Z","type":"message"}
{"nick":"indutny","message":"not that I care much","date":"2014-01-07T22:43:06.859Z","type":"message"}
{"nick":"indutny","message":"but it seems like a security vulnerability :)","date":"2014-01-07T22:43:15.676Z","type":"message"}
{"nick":"trevnorris","message":"and I thought you were talking more of adding a field like AsyncWrap::AsyncWrap(Environment*, Handle<Object>, char* type)","date":"2014-01-07T22:43:30.170Z","type":"message"}
{"nick":"trevnorris","message":"erm, char* module","date":"2014-01-07T22:43:40.315Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033Fedor Indutny\u000f \u00037master\u000f * \u00023905986\u0002 : deps: update openssl to 1.0.1f - http://git.io/vjCx0g","date":"2014-01-07T22:43:49.444Z","type":"message"}
{"nick":"trevnorris","message":"then in AsyncWrap::MakeCallback add char* type","date":"2014-01-07T22:43:57.825Z","type":"message"}
{"nick":"trevnorris","message":"honestly I'd rather have an enum in AsyncWrap like: enum AsyncModules { TCP = 0, UDP = 1, etc. } then simply add that to a field in the class constructor.","date":"2014-01-07T22:45:18.151Z","type":"message"}
{"nick":"trevnorris","message":"it'd be wicked fast to check, and using the state sharing technique we'd be able to set flags for what modules we actually want to listen for.","date":"2014-01-07T22:46:01.130Z","type":"message"}
{"nick":"hz","date":"2014-01-07T22:47:27.101Z","type":"quit"}
{"nick":"octetcloud","message":"so, v0.10 cluster bug (not in 0.11)","date":"2014-01-07T22:56:18.370Z","type":"message"}
{"nick":"octetcloud","message":"if a worker binds on port that's in use... even if that port later becomes free, it can never be listened on again, its always reported as busy, though it no longer is","date":"2014-01-07T22:57:13.170Z","type":"message"}
{"nick":"octetcloud","message":"looks like its because a handle created for a key is never cleared if the handle had an unrecoverable error. doesn't exist in v0.11","date":"2014-01-07T22:58:41.496Z","type":"message"}
{"nick":"jmar777","date":"2014-01-07T22:59:09.779Z","type":"join"}
{"nick":"TooTallNate","reason":"Ping timeout: 252 seconds","date":"2014-01-07T22:59:33.673Z","type":"quit"}
{"nick":"rendar","reason":"Quit: Leaving","date":"2014-01-07T23:06:06.485Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-master\u0002: #831 \u00037UNSTABLE\u000f smartos-x64 (4/692) smartos-ia32 (4/692) osx-ia32 (1/692) centos-ia32 (3/692) ubuntu-ia32 (2/692) centos-x64 (4/692) http://jenkins.nodejs.org/job/nodejs-master/831/","date":"2014-01-07T23:09:11.033Z","type":"message"}
{"nick":"TooTallNate","date":"2014-01-07T23:15:59.858Z","type":"join"}
{"nick":"tjfontaine","message":"octetcloud: can you file an issue, seems pretty straight forward","date":"2014-01-07T23:17:34.074Z","type":"message"}
{"nick":"tjfontaine","message":"indutny: ya, I guess since 1.0.1e is in v0.10 we should, it's just that I don't necessarily want to include the -cli build artifact","date":"2014-01-07T23:18:22.674Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: I haven't even come close to doing the AL parts of that, still solidifying how I would expect the user interface to work","date":"2014-01-07T23:18:47.830Z","type":"message"}
{"nick":"trevnorris","message":"ok","date":"2014-01-07T23:19:13.846Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: enums are nice, but limit us on the 3rd party binary addon front","date":"2014-01-07T23:19:17.538Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: AsyncWrap is for core only. enum'ing what classes wer're allowing to inherit isn't a problem.","date":"2014-01-07T23:20:11.288Z","type":"message"}
{"nick":"tjfontaine","message":"we could relegate those people to only use the js only style, but that may be limiting for them","date":"2014-01-07T23:20:15.771Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: as a first pass I'd like to experiment with both char* and enum and see what range we're talking for overhead difference when we get there","date":"2014-01-07T23:21:07.158Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: but being able to filter at the C++ layer is definitely the place we want to get to","date":"2014-01-07T23:21:24.876Z","type":"message"}
{"nick":"tjfontaine","message":"[for those type of events]","date":"2014-01-07T23:21:33.828Z","type":"message"}
{"nick":"AvianFlu","reason":"Ping timeout: 252 seconds","date":"2014-01-07T23:21:44.667Z","type":"quit"}
{"nick":"indutny","message":"tjfontaine: yeah","date":"2014-01-07T23:22:53.302Z","type":"message"}
{"nick":"indutny","message":"I'll try to choose less invasive method for it :)","date":"2014-01-07T23:23:01.485Z","type":"message"}
{"nick":"tjfontaine","message":":)","date":"2014-01-07T23:23:07.435Z","type":"message"}
{"nick":"CoverSlide","date":"2014-01-07T23:26:28.457Z","type":"join"}
{"nick":"paulfryzel","date":"2014-01-07T23:34:23.233Z","type":"join"}
{"nick":"octetcloud","message":"@tjfontaine: I'll report, repro is easy. fix, not so sure. listen is done in worker, worker net.js might have to tell cluster.js, which would send a msg to master... lots of work.","date":"2014-01-07T23:38:36.178Z","type":"message"}
{"nick":"tjfontaine","message":"octetcloud: sorry didn't mean the fix would be straight forward, but that bug itself seemed pretty well understood, at the very least having it in the repo will help others (and us) remember it in the case someone else comes looking for it","date":"2014-01-07T23:40:29.258Z","type":"message"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-01-07T23:41:16.241Z","type":"quit"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T23:52:11.975Z","type":"quit"}
{"nick":"pachet","reason":"Quit: leaving","date":"2014-01-07T23:52:14.434Z","type":"quit"}
