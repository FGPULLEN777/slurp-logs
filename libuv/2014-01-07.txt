{"nick":"MI6","message":"\u0002libuv-master-gyp\u0002: #371 \u00037UNSTABLE\u000f windows-x64 (5/202) smartos-ia32 (3/203) smartos-x64 (3/203) windows-ia32 (4/202) http://jenkins.nodejs.org/job/libuv-master-gyp/371/","date":"2014-01-07T00:00:00.121Z","type":"message"}
{"nick":"ircretary","reason":"Remote host closed the connection","date":"2014-01-07T00:00:00.766Z","type":"quit"}
{"nick":"ircretary","date":"2014-01-07T00:00:08.835Z","type":"join"}
{"nick":"dap_","reason":"*.net *.split","date":"2014-01-07T00:02:52.014Z","type":"quit"}
{"nick":"inolen","reason":"*.net *.split","date":"2014-01-07T00:02:52.015Z","type":"quit"}
{"nick":"dsantiago","reason":"*.net *.split","date":"2014-01-07T00:02:52.813Z","type":"quit"}
{"nick":"CAPSLOCKBOT","reason":"*.net *.split","date":"2014-01-07T00:02:53.294Z","type":"quit"}
{"nick":"hij1nx","reason":"*.net *.split","date":"2014-01-07T00:02:53.773Z","type":"quit"}
{"nick":"LOUDBOT","reason":"Remote host closed the connection","date":"2014-01-07T00:03:51.353Z","type":"quit"}
{"nick":"hij1nx","date":"2014-01-07T00:05:11.401Z","type":"join"}
{"nick":"dsantiago","date":"2014-01-07T00:05:28.727Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: if EEO lands that'll allow me to simplify AL. there's non-trivial logic I hacked in to make AL work as best as possible w/ EE.","date":"2014-01-07T00:05:29.610Z","type":"message"}
{"nick":"tjfontaine","message":"did you update the PR with it?","date":"2014-01-07T00:05:54.188Z","type":"message"}
{"nick":"trevnorris","message":"the EEO pr?","date":"2014-01-07T00:06:03.721Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2014-01-07T00:06:06.064Z","type":"message"}
{"nick":"tjfontaine","message":"add it as a commit that is?","date":"2014-01-07T00:06:15.804Z","type":"message"}
{"nick":"trevnorris","message":"nope. the first pr is just to get the functionality in. i'm working on AL right now, but that'll be a different PR.","date":"2014-01-07T00:06:41.032Z","type":"message"}
{"nick":"tjfontaine","message":"I'm updating my dtrace-demacro branch right now so it's clearer the interface I think we could be aiming for","date":"2014-01-07T00:06:43.706Z","type":"message"}
{"nick":"trevnorris","message":"i'm trying to keep my pr's under 1000 lines. ;)","date":"2014-01-07T00:06:51.643Z","type":"message"}
{"nick":"tjfontaine","message":"they feel pretty closely linked though","date":"2014-01-07T00:07:07.937Z","type":"message"}
{"nick":"trevnorris","message":"not directl","date":"2014-01-07T00:07:17.806Z","type":"message"}
{"nick":"trevnorris","message":"y","date":"2014-01-07T00:07:19.314Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: w/ your interface, have you considered if a user only wants to track fs.write events, but will they still be able to get a back trace from behind that event?","date":"2014-01-07T00:07:47.559Z","type":"message"}
{"nick":"trevnorris","message":"poorly put.","date":"2014-01-07T00:08:14.637Z","type":"message"}
{"nick":"trevnorris","message":"one sec.","date":"2014-01-07T00:08:16.248Z","type":"message"}
{"nick":"tjfontaine","message":"k thanks :)","date":"2014-01-07T00:08:18.843Z","type":"message"}
{"nick":"trevnorris","message":"you set a \"tracking beacon\" onto an async whatnot (e.g. timer), but say you only want to be notified of fs operations...","date":"2014-01-07T00:09:06.866Z","type":"message"}
{"nick":"trevnorris","message":"you'll still have to internally maintain that \"tracking beacon\" for every async request then only notify the user when their desired events have been fired.","date":"2014-01-07T00:09:37.925Z","type":"message"}
{"nick":"trevnorris","message":"follow?","date":"2014-01-07T00:09:40.189Z","type":"message"}
{"nick":"tjfontaine","message":"right?","date":"2014-01-07T00:09:49.038Z","type":"message"}
{"nick":"tjfontaine","message":"roughly just like how EEs work today?","date":"2014-01-07T00:09:58.907Z","type":"message"}
{"nick":"trevnorris","message":"i'm not sure how they'd relate to how EE's work.","date":"2014-01-07T00:10:20.483Z","type":"message"}
{"nick":"tjfontaine","message":"._events[module][probe](args)","date":"2014-01-07T00:10:37.252Z","type":"message"}
{"nick":"tjfontaine","message":"?","date":"2014-01-07T00:10:37.850Z","type":"message"}
{"nick":"tjfontaine","message":"as a first pass the filtering could be done in js","date":"2014-01-07T00:10:59.875Z","type":"message"}
{"nick":"trevnorris","message":"that doesn't work when you're receiving sockets from TCP requests. those come in straight through libuv","date":"2014-01-07T00:11:41.060Z","type":"message"}
{"nick":"tjfontaine","message":"huh? we're still firing javascript for async listeners?","date":"2014-01-07T00:12:10.793Z","type":"message"}
{"nick":"trevnorris","message":"yeah, but most the time it's coming from c++","date":"2014-01-07T00:12:21.199Z","type":"message"}
{"nick":"tjfontaine","message":"ok?","date":"2014-01-07T00:12:25.467Z","type":"message"}
{"nick":"trevnorris","message":"pseudo code: trackAsync(\"fs\"); setTimeout(fn() { server.on('data', fn() { fs.stat() }); }); stopTrackingAsync(\"fs\");","date":"2014-01-07T00:13:43.418Z","type":"message"}
{"nick":"tjfontaine","message":"uh, no","date":"2014-01-07T00:13:53.502Z","type":"message"}
{"nick":"trevnorris","message":"uh, then what?","date":"2014-01-07T00:14:41.123Z","type":"message"}
{"nick":"tjfontaine","message":"require('tracing').on('fs', 'write', function(){});","date":"2014-01-07T00:14:48.131Z","type":"message"}
{"nick":"trevnorris","message":"how do you say you want to stop \"tracking\" fs\" \"write\" events?","date":"2014-01-07T00:15:12.297Z","type":"message"}
{"nick":"tjfontaine","message":".remove('fs', 'write', function(){})?","date":"2014-01-07T00:15:29.890Z","type":"message"}
{"nick":"tjfontaine","message":"we have a pattern for this today in how we do EEs","date":"2014-01-07T00:15:51.490Z","type":"message"}
{"nick":"trevnorris","message":"what you're talking about and what AL does are not the same.","date":"2014-01-07T00:16:03.302Z","type":"message"}
{"nick":"mikolalysenko","date":"2014-01-07T00:16:36.373Z","type":"join"}
{"nick":"trevnorris","message":"tjfontaine: how does that API allow the user to trace from arbitrary point A until event B is fired?","date":"2014-01-07T00:17:54.804Z","type":"message"}
{"nick":"tjfontaine","message":"in that pseudo code, how does AL manage to do that?","date":"2014-01-07T00:20:51.170Z","type":"message"}
{"nick":"trevnorris","message":"the pseudo code was for what I was thinking yours did.","date":"2014-01-07T00:21:16.422Z","type":"message"}
{"nick":"tjfontaine","message":"no","date":"2014-01-07T00:21:22.014Z","type":"message"}
{"nick":"tjfontaine","message":"mine takes how (I believe) AL works today, and provides an API that matches what people are used to from node APIs","date":"2014-01-07T00:21:54.997Z","type":"message"}
{"nick":"tjfontaine","message":"i.e. EEs","date":"2014-01-07T00:21:59.850Z","type":"message"}
{"nick":"hz","date":"2014-01-07T00:22:10.208Z","type":"quit"}
{"nick":"trevnorris","message":"do you have a gist or whatnot that I can look at?","date":"2014-01-07T00:22:13.346Z","type":"message"}
{"nick":"tjfontaine","message":"so AL just fires create/before/after/error for some .addAsyncListener, as my interpretation was, and then I check the context variable for that state of where it was emitted from","date":"2014-01-07T00:22:36.309Z","type":"message"}
{"nick":"tjfontaine","message":"stop me if I've misinterpreted what was going on","date":"2014-01-07T00:22:44.592Z","type":"message"}
{"nick":"tjfontaine","message":"also re: gist","date":"2014-01-07T00:22:58.535Z","type":"message"}
{"nick":"tjfontaine","message":"[01-07] 00:06:43 <@tjfontaine> I'm updating my dtrace-demacro branch right now so it's clearer the interface I think we could be aiming for","date":"2014-01-07T00:22:59.280Z","type":"message"}
{"nick":"trevnorris","message":"got that, but didn't know if I could actually go look at your branch","date":"2014-01-07T00:23:25.674Z","type":"message"}
{"nick":"tjfontaine","message":"it's not ready yet, it's what I started doign","date":"2014-01-07T00:24:00.510Z","type":"message"}
{"nick":"jirwin","date":"2014-01-07T00:24:12.967Z","type":"join"}
{"nick":"tjfontaine","message":"have I interpreted how AL works today right?","date":"2014-01-07T00:24:23.022Z","type":"message"}
{"nick":"trevnorris","message":"on addAsyncListener() it adds a listener to the active listening queue. when an \"asynchronous event\" (actually async, not EE) is instantiated (e.g. new ReqWrap) the create callbacks in the active queue are fired.","date":"2014-01-07T00:24:43.769Z","type":"message"}
{"nick":"tjfontaine","message":"so if I did .on('*', '*', function(){}) I would basically be getting everything from AL [minus the ability to return a value from the create cb]","date":"2014-01-07T00:24:49.606Z","type":"message"}
{"nick":"trevnorris","message":"then it stores all the same callbacks onto the instance so if in the future an async event fires from inside another async event I can load up the same active queue and fire off all the same create callbacks.","date":"2014-01-07T00:25:44.984Z","type":"message"}
{"nick":"trevnorris","message":"these can be swapped out mid async call, and since AL can be added/removed at any time, each \"trace\" can have a unique set of create callbacks. depending on how the users sets stuff up.","date":"2014-01-07T00:27:27.321Z","type":"message"}
{"nick":"trevnorris","message":"so say, for example, AL supported the ability to only fire the create callback for fs write events. i'd still have to load up the active queue onto every async event in the interim so when fs write is called I can have a proper trace of how we arrived there.","date":"2014-01-07T00:29:23.144Z","type":"message"}
{"nick":"brson","reason":"Quit: Lost terminal","date":"2014-01-07T00:29:54.257Z","type":"quit"}
{"nick":"trevnorris","message":"otherwise all we get is a notification system of when a specific event happens.","date":"2014-01-07T00:30:01.473Z","type":"message"}
{"nick":"brson","date":"2014-01-07T00:31:07.081Z","type":"join"}
{"nick":"zz_karupanerura","new_nick":"karupanerura","date":"2014-01-07T00:31:42.322Z","type":"nick"}
{"nick":"trevnorris","message":"tjfontaine: also, each .on() or whatnot would have to return some key so you could remove only a single AL from the active queue. your API shows only a create callback, i assume, and so using the function as the key would work if that's all we were to pass in.","date":"2014-01-07T00:32:34.653Z","type":"message"}
{"nick":"trevnorris","message":"am I misunderstanding how your implementation works?","date":"2014-01-07T00:33:54.949Z","type":"message"}
{"nick":"mikeal","date":"2014-01-07T00:37:22.468Z","type":"join"}
{"nick":"groundwater","message":"https://gist.github.com/jacobgroundwater/44f9b0109a06b5d3ca4d","date":"2014-01-07T00:42:21.162Z","type":"message"}
{"nick":"groundwater","message":"this is my understanding of how AL may be merged into tracing, along with the issue at hand","date":"2014-01-07T00:42:39.533Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: is the function() { } the unique identifier to remove that specific instance in the future?","date":"2014-01-07T00:43:37.778Z","type":"message"}
{"nick":"groundwater","message":"trevnorris: i suppose either that, or .on should return a unique identifier","date":"2014-01-07T00:44:23.740Z","type":"message"}
{"nick":"groundwater","message":"personally, i would return a unique token, however i recognize that's not the EE/node style/interface","date":"2014-01-07T00:44:56.798Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: but how do you link the \"something in here\" to the \"needs to be available here\"?","date":"2014-01-07T00:45:43.438Z","type":"message"}
{"nick":"trevnorris","message":"you'd need to pass in a unique token to tell tracing that the same data should be avaiable in both places","date":"2014-01-07T00:46:02.253Z","type":"message"}
{"nick":"groundwater","message":"right, i wasn't trying to solve it in that example, just illustrate the problem","date":"2014-01-07T00:46:10.557Z","type":"message"}
{"nick":"groundwater","message":"i think some unique token needs to be passed to each create function, and then that same token is reused in before/after/error","date":"2014-01-07T00:46:40.998Z","type":"message"}
{"nick":"trevnorris","message":"this seems way too verbose.","date":"2014-01-07T00:47:02.074Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: this requires a lot less code: https://gist.github.com/jacobgroundwater/44f9b0109a06b5d3ca4d#comment-981543","date":"2014-01-07T00:48:01.158Z","type":"message"}
{"nick":"trevnorris","message":"and since they're all in the same passed object it's a lot less ambiguous what data should be available where.","date":"2014-01-07T00:48:44.632Z","type":"message"}
{"nick":"groundwater","message":"i'm probably implementation agnostic here, as long as i can utilize async-listener to correlate calls","date":"2014-01-07T00:49:53.428Z","type":"message"}
{"nick":"groundwater","message":"also, a lot of traces are glued together through event emitters","date":"2014-01-07T00:53:57.457Z","type":"message"}
{"nick":"groundwater","message":"i think the only things running through async-listeners are timers, process.nextTick, and..","date":"2014-01-07T00:54:13.309Z","type":"message"}
{"nick":"groundwater","message":"i guess things that go through MakeCallback? is that correct?","date":"2014-01-07T00:54:25.320Z","type":"message"}
{"nick":"trevnorris","message":"everything that goes through AsyncWrap","date":"2014-01-07T00:54:49.768Z","type":"message"}
{"nick":"groundwater","message":"what about Socket events?","date":"2014-01-07T00:54:53.883Z","type":"message"}
{"nick":"trevnorris","message":"which is the base class for HandleWrap, StreamWrap, etc. etc","date":"2014-01-07T00:55:01.057Z","type":"message"}
{"nick":"groundwater","message":"ahhh","date":"2014-01-07T00:55:06.385Z","type":"message"}
{"nick":"trevnorris","message":"so, basically everything in node","date":"2014-01-07T00:55:09.796Z","type":"message"}
{"nick":"groundwater","message":"okay lol","date":"2014-01-07T00:55:16.433Z","type":"message"}
{"nick":"groundwater","message":"all network stuff","date":"2014-01-07T00:55:20.165Z","type":"message"}
{"nick":"trevnorris","message":"and fs stuff","date":"2014-01-07T00:55:25.771Z","type":"message"}
{"nick":"trevnorris","message":"and cares","date":"2014-01-07T00:55:27.773Z","type":"message"}
{"nick":"trevnorris","message":"and tlx/crypto/...","date":"2014-01-07T00:55:37.202Z","type":"message"}
{"nick":"trevnorris","message":"*tls","date":"2014-01-07T00:55:39.650Z","type":"message"}
{"nick":"groundwater","message":"OKAY","date":"2014-01-07T00:55:42.815Z","type":"message"}
{"nick":"groundwater","message":"haha","date":"2014-01-07T00:55:43.573Z","type":"message"}
{"nick":"groundwater","message":"jacob -1","date":"2014-01-07T00:55:50.565Z","type":"message"}
{"nick":"trevnorris","message":"hehe","date":"2014-01-07T00:55:54.705Z","type":"message"}
{"nick":"groundwater","message":"trevnorris +1","date":"2014-01-07T00:55:55.488Z","type":"message"}
{"nick":"kazupon","date":"2014-01-07T00:57:32.833Z","type":"join"}
{"nick":"trevnorris","message":"the c++ side was the easy part. getting it working with our insane EE abstraction still haunts me.","date":"2014-01-07T00:57:56.451Z","type":"message"}
{"nick":"tjfontaine","message":"ok, so I'm going to get this in further, but basically as far as the nested infrastructure I'm thinking something like: on(module, probe, function(parentId, curId, context) {})","date":"2014-01-07T00:57:58.633Z","type":"message"}
{"nick":"trevnorris","message":"just please don't tell me those will return event emitters.","date":"2014-01-07T00:58:36.930Z","type":"message"}
{"nick":"tjfontaine","message":"no, it's EE like, not a real EE","date":"2014-01-07T00:58:47.094Z","type":"message"}
{"nick":"trevnorris","message":"ok cool","date":"2014-01-07T00:59:07.555Z","type":"message"}
{"nick":"tjfontaine","message":"so, then if someone wants to stop watching a trace it could construct from the parentId's right?","date":"2014-01-07T00:59:29.177Z","type":"message"}
{"nick":"piscisaureus","reason":"Quit: ~ Trillian Astra - www.trillian.im ~","date":"2014-01-07T00:59:53.218Z","type":"quit"}
{"nick":"groundwater","message":"tjfontaine: i think so","date":"2014-01-07T00:59:53.998Z","type":"message"}
{"nick":"tjfontaine","message":"that is, their infra could do the lookup necessary, but our code still executes","date":"2014-01-07T01:00:04.643Z","type":"message"}
{"nick":"groundwater","message":"once there is a v1 i'll give it a try","date":"2014-01-07T01:00:14.407Z","type":"message"}
{"nick":"trevnorris","message":"what would be the type of parentId?","date":"2014-01-07T01:00:15.945Z","type":"message"}
{"nick":"tjfontaine","message":"I was assuming uint","date":"2014-01-07T01:00:24.715Z","type":"message"}
{"nick":"groundwater","message":"sorry i mean a v0.0.0.0.1-alpha","date":"2014-01-07T01:00:32.111Z","type":"message"}
{"nick":"tjfontaine","message":"atomically updated in AsyncWrap constructor","date":"2014-01-07T01:00:39.219Z","type":"message"}
{"nick":"tjfontaine","message":"s/atomically/statically/","date":"2014-01-07T01:00:57.926Z","type":"message"}
{"nick":"trevnorris","message":"every async listener already gets a uid","date":"2014-01-07T01:01:53.670Z","type":"message"}
{"nick":"tjfontaine","message":"but this isn't for the listener, it's for the AsyncWrap","date":"2014-01-07T01:02:03.516Z","type":"message"}
{"nick":"tjfontaine","message":"do they already get a uid?","date":"2014-01-07T01:02:11.793Z","type":"message"}
{"nick":"MI6","message":"\u0002joyent/node:\u0002 \u00033isaacs\u000f \u00037v0.10\u000f * \u00021be9365\u0002 : npm: Upgrade to 1.3.23 - http://git.io/SAU0CA","date":"2014-01-07T01:02:20.469Z","type":"message"}
{"nick":"trevnorris","message":"yeah. createAsyncWrap().uid === uint","date":"2014-01-07T01:02:22.319Z","type":"message"}
{"nick":"trevnorris","message":"*createAsyncListener()","date":"2014-01-07T01:02:32.387Z","type":"message"}
{"nick":"tjfontaine","message":"but a Listener != AsyncWrap?","date":"2014-01-07T01:02:48.135Z","type":"message"}
{"nick":"trevnorris","message":"AsyncWrap is just a class to funnel async event creation. the listener is the object attached to the AsyncWrap instance","date":"2014-01-07T01:03:18.559Z","type":"message"}
{"nick":"tjfontaine","message":"ok anyway, so long as we can communicate parent and current I think it's pretty straight forward for consumers to construct the rest","date":"2014-01-07T01:04:04.698Z","type":"message"}
{"nick":"trevnorris","message":"but, the AsyncWrap instance is actually a TCP instance, or a UDP instance, etc.","date":"2014-01-07T01:04:14.033Z","type":"message"}
{"nick":"tjfontaine","message":"yes","date":"2014-01-07T01:04:27.320Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: issue. your event tracers are labeled via their js counterparts. but the C++ api doesn't follow that. i.e. there's a lot of code reuse that doesn't have a 1:1 correspondence","date":"2014-01-07T01:05:37.053Z","type":"message"}
{"nick":"tjfontaine","message":"huh?","date":"2014-01-07T01:05:47.663Z","type":"message"}
{"nick":"mikolalysenko","reason":"Ping timeout: 276 seconds","date":"2014-01-07T01:06:03.288Z","type":"quit"}
{"nick":"trevnorris","message":"take Server#write. in c++ that fires a writeBuffer, writeAscii, writeHex, etc.","date":"2014-01-07T01:06:53.109Z","type":"message"}
{"nick":"tjfontaine","message":"those each instantiate a separate AsyncWrap you mean?","date":"2014-01-07T01:07:16.514Z","type":"message"}
{"nick":"trevnorris","message":"so. Server is an EE, Server#_handle is the AsyncWrap instance.","date":"2014-01-07T01:08:02.605Z","type":"message"}
{"nick":"tjfontaine","message":"and #write instantiates a WriteReq?","date":"2014-01-07T01:08:18.550Z","type":"message"}
{"nick":"trevnorris","message":"right now I don't tell the user what's about to happen, just that something's about to happen that will break their stack trace.","date":"2014-01-07T01:08:19.811Z","type":"message"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T01:08:28.081Z","type":"quit"}
{"nick":"trevnorris","message":"might","date":"2014-01-07T01:08:31.684Z","type":"message"}
{"nick":"kazupon","date":"2014-01-07T01:08:54.965Z","type":"join"}
{"nick":"trevnorris","message":"let me find an example.","date":"2014-01-07T01:09:10.881Z","type":"message"}
{"nick":"tjfontaine","message":"I mean ultimately when it's out of the streams infra in js and makes it to C++ it should?","date":"2014-01-07T01:09:14.734Z","type":"message"}
{"nick":"tjfontaine","message":"ultimately DoWrite takes a WriteWrap","date":"2014-01-07T01:10:31.386Z","type":"message"}
{"nick":"trevnorris","message":"there are certain async operations that don't take a callback, so all that happens is that the data is copied out and passed to libuv, then free'd from the c++ callback.","date":"2014-01-07T01:10:47.601Z","type":"message"}
{"nick":"trevnorris","message":"sorry, i'm all over the place, like fs operates differently than tcp/pipe/etc.","date":"2014-01-07T01:11:12.981Z","type":"message"}
{"nick":"tjfontaine","message":"well, they all go through StreamWrap ultimately when there's something to actually be done with a C write()?","date":"2014-01-07T01:11:49.127Z","type":"message"}
{"nick":"trevnorris","message":"timerwrap, signalwrap and udpwrap go through handlewrap","date":"2014-01-07T01:12:28.975Z","type":"message"}
{"nick":"trevnorris","message":"not through streamwrap","date":"2014-01-07T01:12:36.662Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2014-01-07T01:12:40.632Z","type":"message"}
{"nick":"kazupon","reason":"Ping timeout: 265 seconds","date":"2014-01-07T01:13:19.996Z","type":"quit"}
{"nick":"tjfontaine","message":"but streamwrap inherits handlewrap?","date":"2014-01-07T01:13:27.608Z","type":"message"}
{"nick":"tjfontaine","message":"and handlewrap actually matters for open/close?","date":"2014-01-07T01:13:34.791Z","type":"message"}
{"nick":"trevnorris","message":"yes","date":"2014-01-07T01:15:02.909Z","type":"message"}
{"nick":"trevnorris","message":"except for ZCtx","date":"2014-01-07T01:15:27.034Z","type":"message"}
{"nick":"trevnorris","message":"which doesn't inherit from HandleWrap","date":"2014-01-07T01:15:37.695Z","type":"message"}
{"nick":"tjfontaine","message":"right so the number of specializations is minimal","date":"2014-01-07T01:16:08.103Z","type":"message"}
{"nick":"trevnorris","message":"yeah. handlewrap covers just about all of them.","date":"2014-01-07T01:16:23.308Z","type":"message"}
{"nick":"trevnorris","message":"asyncwrap covers them all","date":"2014-01-07T01:16:26.326Z","type":"message"}
{"nick":"tjfontaine","message":"right but in our descendents we can deliniate what we're firing","date":"2014-01-07T01:16:48.470Z","type":"message"}
{"nick":"trevnorris","message":"true, but not as they correspond directly to their js api counterparts","date":"2014-01-07T01:17:58.175Z","type":"message"}
{"nick":"tjfontaine","message":"as reasonably close as it comes though, the context object is still going to be there in the events it can be","date":"2014-01-07T01:18:38.137Z","type":"message"}
{"nick":"trevnorris","message":"going back again to the Server#close() issue, that happens in a nextTick, and while AsyncWrap can be alerted to when the handle actually closes, it won't be the same time as when the close event is actually emitted","date":"2014-01-07T01:18:45.125Z","type":"message"}
{"nick":"tjfontaine","message":"before/after/error","date":"2014-01-07T01:18:47.391Z","type":"message"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T01:19:17.873Z","type":"quit"}
{"nick":"trevnorris","message":"all the places were you say we make a reasonable assumption about what will happen, and fire early, then context won't be loaded.","date":"2014-01-07T01:19:30.538Z","type":"message"}
{"nick":"MI6","message":"\u0002nodejs-v0.10-windows\u0002: #421 \u00037UNSTABLE\u000f windows-x64 (11/608) windows-ia32 (11/608) http://jenkins.nodejs.org/job/nodejs-v0.10-windows/421/","date":"2014-01-07T01:19:39.968Z","type":"message"}
{"nick":"tjfontaine","message":"can you be more verbose about what you mean?","date":"2014-01-07T01:19:57.407Z","type":"message"}
{"nick":"tjfontaine","message":"because handle as been set to null already at that point?","date":"2014-01-07T01:20:06.547Z","type":"message"}
{"nick":"trevnorris","message":"yes","date":"2014-01-07T01:20:10.896Z","type":"message"}
{"nick":"trevnorris","message":"the handle has been set to null, then the emit happens in a nextTick","date":"2014-01-07T01:20:23.435Z","type":"message"}
{"nick":"trevnorris","message":"so the context no longer exists at the js level","date":"2014-01-07T01:20:30.975Z","type":"message"}
{"nick":"trevnorris","message":"it can be recovered from the c++ level since the object isn't actually destroyed until the class is deconstructed","date":"2014-01-07T01:20:49.757Z","type":"message"}
{"nick":"tjfontaine","message":"so, in translation, your need for libuv fired callbacks wasn't as clear as it could have been until now :)","date":"2014-01-07T01:21:47.121Z","type":"message"}
{"nick":"trevnorris","message":"heh, yeah. it definitely helps to have things fire when they should. :)","date":"2014-01-07T01:22:25.597Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: also, the net module will give you hell.","date":"2014-01-07T01:23:40.474Z","type":"message"}
{"nick":"trevnorris","message":"e.g. what if I only want to listen for TCP server creation, not pipes?","date":"2014-01-07T01:24:01.571Z","type":"message"}
{"nick":"tjfontaine","message":"this goes to the AsyncWrap base class change","date":"2014-01-07T01:24:43.060Z","type":"message"}
{"nick":"trevnorris","message":"i only got it to work by doing some hackery in the .listen() method.","date":"2014-01-07T01:25:14.127Z","type":"message"}
{"nick":"trevnorris","message":"i hate it with a passion, but was the only way I could figure out how to get it done.","date":"2014-01-07T01:25:28.123Z","type":"message"}
{"nick":"trevnorris","message":"if you find a better way, please for the love of good code let me know.","date":"2014-01-07T01:25:37.601Z","type":"message"}
{"nick":"tjfontaine","message":"so we either have a constructor or AsyncWrap::Create that takes char* module, char* probe -- and then create/before/after/error all fire with those as arguments","date":"2014-01-07T01:25:55.408Z","type":"message"}
{"nick":"tjfontaine","message":"in the js infrastructure we filter based on that","date":"2014-01-07T01:26:53.537Z","type":"message"}
{"nick":"trevnorris","message":"issue is that a lot of the callbacks coming through MakeCallback are all just \"oncomplete\" then the actual \"probe\" is called from those. so we'd have to refactor a lot of code to make that visible to AsyncWrap","date":"2014-01-07T01:27:55.411Z","type":"message"}
{"nick":"abraxas","date":"2014-01-07T01:28:03.280Z","type":"join"}
{"nick":"MI6","message":"\u0002nodejs-v0.10\u0002: #1697 \u00037UNSTABLE\u000f linux-x64 (5/608) osx-x64 (1/608) linux-ia32 (6/608) smartos-x64 (12/608) smartos-ia32 (10/608) osx-ia32 (2/608) http://jenkins.nodejs.org/job/nodejs-v0.10/1697/","date":"2014-01-07T01:28:35.154Z","type":"message"}
{"nick":"tjfontaine","message":"can you give me an example of that? or you mean like timers as an example?","date":"2014-01-07T01:28:35.638Z","type":"message"}
{"nick":"trevnorris","message":"grep oncomplete lib/net.js","date":"2014-01-07T01:29:01.656Z","type":"message"}
{"nick":"trevnorris","message":"we just create objects with the same named callback \"oncomplete\" that all do different things.","date":"2014-01-07T01:29:27.686Z","type":"message"}
{"nick":"trevnorris","message":"so MakeCallback doesn't actually know what it's calling.","date":"2014-01-07T01:29:42.646Z","type":"message"}
{"nick":"tjfontaine","message":"most of these come through a HandleWrap/StreamWrap, so we can just set instance variables on those classes, which can then be passed to the WriteWrap or ShutdownWrap","date":"2014-01-07T01:32:11.851Z","type":"message"}
{"nick":"trevnorris","message":"tjfontaine: or there's \"callback\" in dns.js","date":"2014-01-07T01:32:17.105Z","type":"message"}
{"nick":"trevnorris","message":"which also is called through MakeCallback","date":"2014-01-07T01:32:36.443Z","type":"message"}
{"nick":"trevnorris","message":"the names are pretty much meaningless to let us know what's about to happen","date":"2014-01-07T01:32:49.073Z","type":"message"}
{"nick":"tjfontaine","message":"right, we can make dns more explicit anyway","date":"2014-01-07T01:32:49.958Z","type":"message"}
{"nick":"tjfontaine","message":"what do you mean the names are meaningless?","date":"2014-01-07T01:33:15.310Z","type":"message"}
{"nick":"trevnorris","message":"under the assumption that we know where the call is coming from, then by the name of the symbol for the function that's about to be fired in MakeCallback we could notify","date":"2014-01-07T01:34:10.646Z","type":"message"}
{"nick":"tjfontaine","message":"hmm?","date":"2014-01-07T01:34:30.267Z","type":"message"}
{"nick":"trevnorris","message":"how do you plan on firing a \"before\" callback for a specific event?","date":"2014-01-07T01:34:56.324Z","type":"message"}
{"nick":"tjfontaine","message":"so, for say: fs:write","date":"2014-01-07T01:35:27.335Z","type":"message"}
{"nick":"tjfontaine","message":"[but this is generalized really for <streamwrap>:write]","date":"2014-01-07T01:35:44.904Z","type":"message"}
{"nick":"tjfontaine","message":"StreamWrap descendent class sets _module(\"fs\")","date":"2014-01-07T01:36:14.984Z","type":"message"}
{"nick":"superjoe","reason":"Ping timeout: 248 seconds","date":"2014-01-07T01:36:37.750Z","type":"quit"}
{"nick":"tjfontaine","message":"each WriteWrap instantiated after that takes in the constructor the _module as an argument","date":"2014-01-07T01:37:02.785Z","type":"message"}
{"nick":"tjfontaine","message":"as well as \"write\"","date":"2014-01-07T01:37:11.465Z","type":"message"}
{"nick":"tjfontaine","message":"so then when before fires, it can pass _module, _probe to javascript lnad","date":"2014-01-07T01:37:27.272Z","type":"message"}
{"nick":"tjfontaine","message":"*land","date":"2014-01-07T01:37:28.445Z","type":"message"}
{"nick":"groundwater","message":"i'm out for now","date":"2014-01-07T01:39:05.350Z","type":"message"}
{"nick":"trevnorris","message":"i'm still not getting how we determine when, say, an fs,write is triggered.","date":"2014-01-07T01:39:06.837Z","type":"message"}
{"nick":"tjfontaine","message":"technically WriteWrap could have \"write\" be a static member since it's already known in advance","date":"2014-01-07T01:39:07.497Z","type":"message"}
{"nick":"trevnorris","message":"groundwater: see ya","date":"2014-01-07T01:39:23.355Z","type":"message"}
{"nick":"tjfontaine","message":"trevnorris: we know because WriteWrap transitions the MakeCallback? and they are member variables on that class?","date":"2014-01-07T01:39:30.961Z","type":"message"}
{"nick":"trevnorris","message":"take fs.write. it has its own writeBuffer implementation apart from StreamWrap::WriteBuffer","date":"2014-01-07T01:40:31.859Z","type":"message"}
{"nick":"trevnorris","message":"then, if it's an async call, it creates an FSReqWrap, which inherits from ReqWrap","date":"2014-01-07T01:40:53.485Z","type":"message"}
{"nick":"tjfontaine","message":"but they still have FSWriteWrap?","date":"2014-01-07T01:40:56.157Z","type":"message"}
{"nick":"tjfontaine","message":"right","date":"2014-01-07T01:41:00.762Z","type":"message"}
{"nick":"tjfontaine","message":"so we jsut define it in the descendent class?","date":"2014-01-07T01:41:07.559Z","type":"message"}
{"nick":"tjfontaine","message":"new FSReqWrap(env, \"write\"","date":"2014-01-07T01:41:17.439Z","type":"message"}
{"nick":"tjfontaine","message":"it already *has* it","date":"2014-01-07T01:41:20.186Z","type":"message"}
{"nick":"tjfontaine","message":"we just have to teach it to do somethign with it","date":"2014-01-07T01:41:37.758Z","type":"message"}
{"nick":"trevnorris","message":"oh.... bloody hell. i see.","date":"2014-01-07T01:41:50.013Z","type":"message"}
{"nick":"daviddias","date":"2014-01-07T01:42:32.849Z","type":"join"}
{"nick":"thlorenz","date":"2014-01-07T01:42:44.109Z","type":"join"}
{"nick":"tjfontaine","message":"btw I'm goign to send an email out, but everyone seemed ok with thursday at 9am for the weekly meeting","date":"2014-01-07T01:43:11.255Z","type":"message"}
{"nick":"tjfontaine","message":"9a pst","date":"2014-01-07T01:43:15.348Z","type":"message"}
{"nick":"trevnorris","message":"coolio.","date":"2014-01-07T01:43:19.616Z","type":"message"}
{"nick":"trevnorris","message":"alright, i'm out too.","date":"2014-01-07T01:43:23.944Z","type":"message"}
{"nick":"trevnorris","message":"talk to you in the morning","date":"2014-01-07T01:43:36.599Z","type":"message"}
{"nick":"trevnorris","action":"&","date":"2014-01-07T01:43:37.974Z","type":"action"}
{"nick":"mikolalysenko","date":"2014-01-07T01:43:38.818Z","type":"join"}
{"nick":"tjfontaine","message":"k enjoy","date":"2014-01-07T01:43:40.841Z","type":"message"}
{"nick":"trevnorris","message":"LOUDBOT WHERE ARE YOU????","date":"2014-01-07T01:43:47.907Z","type":"message"}
{"nick":"kazupon","date":"2014-01-07T01:46:11.817Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T01:47:02.685Z","type":"quit"}
{"nick":"dap_1","reason":"Quit: Leaving.","date":"2014-01-07T01:51:14.885Z","type":"quit"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-01-07T01:55:39.684Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T02:04:27.823Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T02:10:16.557Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T02:11:51.588Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2014-01-07T02:15:05.355Z","type":"quit"}
{"nick":"ik_","date":"2014-01-07T02:22:25.671Z","type":"join"}
{"nick":"ik_","reason":"Client Quit","date":"2014-01-07T02:22:25.830Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T02:25:05.968Z","type":"join"}
{"nick":"rmg","date":"2014-01-07T02:26:10.817Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T02:32:39.599Z","type":"quit"}
{"nick":"rmg","reason":"Ping timeout: 265 seconds","date":"2014-01-07T02:35:00.929Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T02:36:02.344Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T02:37:09.379Z","type":"join"}
{"nick":"kazupon","date":"2014-01-07T02:38:29.398Z","type":"join"}
{"nick":"stagas","date":"2014-01-07T02:38:40.721Z","type":"join"}
{"nick":"daviddias","reason":"Read error: No route to host","date":"2014-01-07T02:42:07.383Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T02:42:36.845Z","type":"join"}
{"nick":"c4milo","date":"2014-01-07T02:43:37.334Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2014-01-07T02:46:01.224Z","type":"quit"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T02:47:02.705Z","type":"quit"}
{"nick":"c4milo","date":"2014-01-07T02:54:11.546Z","type":"join"}
{"nick":"c4milo","reason":"Remote host closed the connection","date":"2014-01-07T02:57:35.366Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T03:09:15.920Z","type":"quit"}
{"nick":"AvianFlu","date":"2014-01-07T03:14:48.851Z","type":"join"}
{"nick":"__rockbot__","date":"2014-01-07T03:18:00.039Z","type":"join"}
{"nick":"CAPSLOCKBOT","date":"2014-01-07T03:36:12.255Z","type":"join"}
{"nick":"LOUDBOT","date":"2014-01-07T03:36:12.415Z","type":"join"}
{"nick":"kazupon","date":"2014-01-07T03:58:15.049Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 260 seconds","date":"2014-01-07T04:03:51.860Z","type":"quit"}
{"nick":"brson","reason":"Quit: leaving","date":"2014-01-07T04:04:24.291Z","type":"quit"}
{"nick":"kazupon","date":"2014-01-07T04:19:22.864Z","type":"join"}
{"nick":"kazupon","reason":"Read error: Connection reset by peer","date":"2014-01-07T04:20:47.358Z","type":"quit"}
{"nick":"kazupon","date":"2014-01-07T04:21:03.843Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2014-01-07T04:30:56.879Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T04:31:18.945Z","type":"join"}
{"nick":"daviddias","reason":"Read error: Operation timed out","date":"2014-01-07T04:34:07.765Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 264 seconds","date":"2014-01-07T04:38:02.749Z","type":"quit"}
{"nick":"thlorenz","reason":"Remote host closed the connection","date":"2014-01-07T04:42:30.829Z","type":"quit"}
{"nick":"thlorenz","date":"2014-01-07T04:43:05.866Z","type":"join"}
{"nick":"thlorenz","reason":"Ping timeout: 264 seconds","date":"2014-01-07T04:47:38.690Z","type":"quit"}
{"nick":"CAPSLOCKBOT","reason":"Remote host closed the connection","date":"2014-01-07T04:48:56.614Z","type":"quit"}
{"nick":"LOUDBOT","reason":"Remote host closed the connection","date":"2014-01-07T04:48:56.772Z","type":"quit"}
{"nick":"isaacs","message":"trevnorris: ik has been notified of the quietness.","date":"2014-01-07T04:49:06.919Z","type":"message"}
{"nick":"ik","date":"2014-01-07T04:49:29.712Z","type":"join"}
{"nick":"LOUDBOT","date":"2014-01-07T04:49:31.361Z","type":"join"}
{"nick":"CAPSLOCKBOT","date":"2014-01-07T04:49:31.361Z","type":"join"}
{"nick":"ik","date":"2014-01-07T04:49:35.685Z","type":"part"}
{"nick":"isaacs_mobile","date":"2014-01-07T04:59:42.444Z","type":"join"}
{"nick":"isaacs_mobile","reason":"Client Quit","date":"2014-01-07T05:01:45.855Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T05:17:45.020Z","type":"join"}
{"nick":"mikeal","reason":"Client Quit","date":"2014-01-07T05:20:10.434Z","type":"quit"}
{"nick":"mikeal","date":"2014-01-07T05:27:53.482Z","type":"join"}
{"nick":"lucab","date":"2014-01-07T05:31:57.721Z","type":"join"}
{"nick":"tjfontai1e","date":"2014-01-07T05:34:58.898Z","type":"join"}
{"nick":"ircretary","reason":"*.net *.split","date":"2014-01-07T05:36:13.006Z","type":"quit"}
{"nick":"calvinfo","reason":"*.net *.split","date":"2014-01-07T05:36:13.326Z","type":"quit"}
{"nick":"trevnorris","reason":"*.net *.split","date":"2014-01-07T05:36:14.286Z","type":"quit"}
{"nick":"trevnorris","date":"2014-01-07T05:36:26.320Z","type":"join"}
{"nick":"calvinfo","date":"2014-01-07T05:36:33.046Z","type":"join"}
{"nick":"mikeal","reason":"Quit: Leaving.","date":"2014-01-07T05:38:34.525Z","type":"quit"}
{"nick":"kaeso","reason":"*.net *.split","date":"2014-01-07T05:39:43.683Z","type":"quit"}
{"nick":"tjfontaine","reason":"*.net *.split","date":"2014-01-07T05:39:43.843Z","type":"quit"}
{"nick":"rch","reason":"*.net *.split","date":"2014-01-07T05:39:44.003Z","type":"quit"}
{"nick":"tellnes","reason":"*.net *.split","date":"2014-01-07T05:39:45.283Z","type":"quit"}
{"nick":"lucab","new_nick":"kaeso","date":"2014-01-07T05:39:45.603Z","type":"nick"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2014-01-07T05:41:40.659Z","type":"quit"}
{"nick":"tellnes_","date":"2014-01-07T05:41:41.773Z","type":"join"}
{"nick":"tellnes_","reason":"Excess Flood","date":"2014-01-07T05:42:29.394Z","type":"quit"}
{"nick":"ircretary","date":"2014-01-07T05:42:32.920Z","type":"join"}
{"nick":"__rockbot__","reason":"Quit: __rockbot__","date":"2014-01-07T05:43:48.482Z","type":"quit"}
{"nick":"tellnes","date":"2014-01-07T05:44:27.122Z","type":"join"}
{"nick":"rch","date":"2014-01-07T05:47:47.324Z","type":"join"}
{"nick":"tellnes_","date":"2014-01-07T05:50:56.502Z","type":"join"}
{"nick":"tellnes","reason":"*.net *.split","date":"2014-01-07T05:52:17.763Z","type":"quit"}
{"nick":"trevnorris","reason":"*.net *.split","date":"2014-01-07T05:52:18.244Z","type":"quit"}
{"nick":"kazupon","reason":"*.net *.split","date":"2014-01-07T05:52:19.044Z","type":"quit"}
{"nick":"tellnes_","new_nick":"tellnes","date":"2014-01-07T05:52:19.683Z","type":"nick"}
{"nick":"kazupon","date":"2014-01-07T05:53:35.422Z","type":"join"}
{"nick":"trevnorris","date":"2014-01-07T05:54:09.205Z","type":"join"}
{"nick":"abraxas","date":"2014-01-07T05:59:25.419Z","type":"join"}
{"nick":"tjfontai1e","new_nick":"tjfontaine","date":"2014-01-07T06:02:41.148Z","type":"nick"}
{"nick":"rch","reason":"Changing host","date":"2014-01-07T06:02:42.688Z","type":"quit"}
{"nick":"rch","date":"2014-01-07T06:02:42.847Z","type":"join"}
{"nick":"tjfontaine","reason":"Changing host","date":"2014-01-07T06:02:48.836Z","type":"quit"}
{"nick":"tjfontaine","date":"2014-01-07T06:02:48.987Z","type":"join"}
{"nick":"m76","date":"2014-01-07T06:10:55.345Z","type":"join"}
{"nick":"AvianFlu","reason":"Ping timeout: 264 seconds","date":"2014-01-07T06:11:38.745Z","type":"quit"}
{"nick":"indexzero","date":"2014-01-07T06:34:33.812Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 260 seconds","date":"2014-01-07T06:35:59.868Z","type":"quit"}
{"nick":"MI6","message":"\u0002nodejs-v0.10-windows\u0002: #422 \u00037UNSTABLE\u000f windows-x64 (11/608) windows-ia32 (11/608) http://jenkins.nodejs.org/job/nodejs-v0.10-windows/422/","date":"2014-01-07T06:41:29.991Z","type":"message"}
{"nick":"TooTallNate","reason":"Quit: Computer has gone to sleep.","date":"2014-01-07T06:45:11.436Z","type":"quit"}
{"nick":"bajtos","date":"2014-01-07T06:49:49.966Z","type":"join"}
{"nick":"__rockbot__","date":"2014-01-07T07:01:50.632Z","type":"join"}
{"nick":"mikeal","date":"2014-01-07T07:15:29.022Z","type":"join"}
{"nick":"__rockbot__","reason":"Quit: __rockbot__","date":"2014-01-07T07:15:37.596Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T07:20:14.869Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T07:24:50.719Z","type":"quit"}
{"nick":"LOUDBOT","reason":"Ping timeout: 245 seconds","date":"2014-01-07T07:33:45.276Z","type":"quit"}
{"nick":"CAPSLOCKBOT","reason":"Ping timeout: 245 seconds","date":"2014-01-07T07:33:45.431Z","type":"quit"}
{"nick":"LOUDBOT","date":"2014-01-07T07:35:44.470Z","type":"join"}
{"nick":"CAPSLOCKBOT","date":"2014-01-07T07:35:49.238Z","type":"join"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2014-01-07T07:41:46.710Z","type":"quit"}
{"nick":"rendar","date":"2014-01-07T07:50:34.939Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 276 seconds","date":"2014-01-07T08:05:57.243Z","type":"quit"}
{"nick":"AlexisMocha","date":"2014-01-07T08:10:05.231Z","type":"join"}
{"nick":"kazupon","date":"2014-01-07T08:11:26.175Z","type":"join"}
{"nick":"daviddias","date":"2014-01-07T08:14:51.842Z","type":"join"}
{"nick":"calvinfo","date":"2014-01-07T08:16:24.918Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T08:19:26.768Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T08:20:18.845Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 264 seconds","date":"2014-01-07T08:24:50.720Z","type":"quit"}
{"nick":"hz","date":"2014-01-07T08:47:58.862Z","type":"join"}
{"nick":"bajtos","reason":"Quit: bajtos","date":"2014-01-07T08:49:43.046Z","type":"quit"}
{"nick":"bajtos","date":"2014-01-07T08:55:03.458Z","type":"join"}
{"nick":"bajtos","reason":"Read error: Connection timed out","date":"2014-01-07T09:05:50.081Z","type":"quit"}
{"nick":"indutny","message":"hey people","date":"2014-01-07T09:05:53.559Z","type":"message"}
{"nick":"[m76]","date":"2014-01-07T09:11:20.349Z","type":"join"}
{"nick":"m76","reason":"Ping timeout: 264 seconds","date":"2014-01-07T09:12:14.800Z","type":"quit"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2014-01-07T09:27:07.940Z","type":"quit"}
{"nick":"calvinfo","date":"2014-01-07T09:29:04.385Z","type":"join"}
{"nick":"janjongboom","date":"2014-01-07T09:31:37.639Z","type":"join"}
{"nick":"calvinfo","reason":"Quit: Leaving.","date":"2014-01-07T09:42:42.037Z","type":"quit"}
{"nick":"roxlu","date":"2014-01-07T10:11:18.674Z","type":"join"}
{"nick":"rmg","date":"2014-01-07T10:16:32.388Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 265 seconds","date":"2014-01-07T10:21:25.400Z","type":"quit"}
{"nick":"AlexisMocha","message":"hello","date":"2014-01-07T10:25:19.286Z","type":"message"}
{"nick":"AlexisMocha","message":"any updates on the 0.12 release date?","date":"2014-01-07T10:27:09.002Z","type":"message"}
{"nick":"daviddias","date":"2014-01-07T10:30:34.858Z","type":"join"}
{"nick":"indexzero","date":"2014-01-07T10:47:39.006Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2014-01-07T10:49:45.976Z","type":"quit"}
{"nick":"janjongboom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2014-01-07T10:55:41.006Z","type":"quit"}
{"nick":"abraxas","date":"2014-01-07T11:04:48.013Z","type":"join"}
{"nick":"abraxas","reason":"Remote host closed the connection","date":"2014-01-07T11:06:46.107Z","type":"quit"}
{"nick":"[m76]","reason":"Ping timeout: 260 seconds","date":"2014-01-07T11:19:16.152Z","type":"quit"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-01-07T11:32:15.154Z","type":"quit"}
{"nick":"m76","date":"2014-01-07T11:33:39.268Z","type":"join"}
{"nick":"daviddias","reason":"Remote host closed the connection","date":"2014-01-07T11:34:47.690Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T11:35:17.980Z","type":"join"}
{"nick":"janjongboom","date":"2014-01-07T11:35:42.876Z","type":"join"}
{"nick":"stagas","reason":"Ping timeout: 264 seconds","date":"2014-01-07T11:42:50.783Z","type":"quit"}
{"nick":"inolen1","reason":"Quit: Leaving.","date":"2014-01-07T12:21:38.767Z","type":"quit"}
{"nick":"kazupon","date":"2014-01-07T12:43:44.380Z","type":"join"}
{"nick":"kazupon","reason":"Ping timeout: 276 seconds","date":"2014-01-07T12:48:42.240Z","type":"quit"}
{"nick":"indexzero","reason":"Quit: indexzero","date":"2014-01-07T13:00:29.096Z","type":"quit"}
{"nick":"abraxas","date":"2014-01-07T13:07:49.693Z","type":"join"}
{"nick":"abraxas","reason":"Ping timeout: 276 seconds","date":"2014-01-07T13:12:45.224Z","type":"quit"}
{"nick":"AvianFlu","date":"2014-01-07T14:03:21.838Z","type":"join"}
{"nick":"mikolalysenko","date":"2014-01-07T14:10:45.972Z","type":"join"}
{"nick":"hueniverse","reason":"Ping timeout: 245 seconds","date":"2014-01-07T14:13:50.132Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 260 seconds","date":"2014-01-07T14:27:23.819Z","type":"quit"}
{"nick":"mikolalysenko","date":"2014-01-07T14:35:48.173Z","type":"join"}
{"nick":"thlorenz","date":"2014-01-07T14:42:34.927Z","type":"join"}
{"nick":"daviddias","date":"2014-01-07T14:43:00.151Z","type":"quit"}
{"nick":"mikolalysenko","reason":"Ping timeout: 265 seconds","date":"2014-01-07T14:44:21.138Z","type":"quit"}
{"nick":"daviddias","date":"2014-01-07T14:46:44.854Z","type":"join"}
{"nick":"karupanerura","new_nick":"zz_karupanerura","date":"2014-01-07T14:51:50.373Z","type":"nick"}
{"nick":"AvianFlu","reason":"Remote host closed the connection","date":"2014-01-07T15:04:49.395Z","type":"quit"}
{"nick":"pachet","date":"2014-01-07T15:06:45.949Z","type":"join"}
{"nick":"AvianFlu","date":"2014-01-07T15:15:57.063Z","type":"join"}
{"nick":"AvianFlu_","date":"2014-01-07T15:17:16.892Z","type":"join"}
{"nick":"AvianFlu","reason":"Disconnected by services","date":"2014-01-07T15:18:18.435Z","type":"quit"}
{"nick":"AvianFlu_","new_nick":"AvianFlu","date":"2014-01-07T15:18:21.204Z","type":"nick"}
{"nick":"janjongboom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2014-01-07T15:22:52.900Z","type":"quit"}
{"nick":"janjongboom","date":"2014-01-07T15:27:13.754Z","type":"join"}
{"nick":"mikolalysenko","date":"2014-01-07T15:30:36.031Z","type":"join"}
{"nick":"daviddia_","date":"2014-01-07T15:38:31.996Z","type":"join"}
{"nick":"daviddias","reason":"Ping timeout: 248 seconds","date":"2014-01-07T15:40:53.633Z","type":"quit"}
{"nick":"hz","date":"2014-01-07T15:44:04.869Z","type":"quit"}
{"nick":"hz","date":"2014-01-07T15:45:02.093Z","type":"join"}
