{"nick":"DarkGod","reason":"Ping timeout: 252 seconds","date":"2016-02-25T01:02:34.553Z","type":"quit"}
{"nick":"SkyRocknRoll","date":"2016-02-25T06:36:35.360Z","type":"join"}
{"nick":"SkyRocknRoll_","date":"2016-02-25T08:39:45.510Z","type":"join"}
{"nick":"SkyRocknRoll","reason":"Ping timeout: 276 seconds","date":"2016-02-25T08:41:33.386Z","type":"quit"}
{"nick":"DarkGod","date":"2016-02-25T09:41:18.991Z","type":"join"}
{"nick":"DarkGod","reason":"Ping timeout: 244 seconds","date":"2016-02-25T10:08:27.035Z","type":"quit"}
{"nick":"SkyRocknRoll_","reason":"Ping timeout: 252 seconds","date":"2016-02-25T12:01:28.467Z","type":"quit"}
{"nick":"DarkGod","date":"2016-02-25T13:30:07.668Z","type":"join"}
{"nick":"rphillips","message":"good morning","date":"2016-02-25T15:12:11.944Z","type":"message"}
{"nick":"creationix","message":"mornin","date":"2016-02-25T15:18:15.212Z","type":"message"}
{"nick":"creationix","message":"rphillips: are you around today or still trying to rest?","date":"2016-02-25T15:19:16.737Z","type":"message"}
{"nick":"erlbot--_","date":"2016-02-25T15:25:06.625Z","type":"join"}
{"nick":"erlbot--","reason":"Ping timeout: 240 seconds","date":"2016-02-25T15:26:59.355Z","type":"quit"}
{"nick":"travis-ci","date":"2016-02-25T15:42:08.988Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvi#863 (master - a3ec57f : Tim Caswell): The build passed.","date":"2016-02-25T15:42:10.015Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvi/compare/fa8185289619...a3ec57fe2e89","date":"2016-02-25T15:42:10.226Z","type":"message"}
{"nick":"travis-ci","message":"Build details : https://travis-ci.org/luvit/luvi/builds/111776438","date":"2016-02-25T15:42:10.227Z","type":"message"}
{"nick":"travis-ci","date":"2016-02-25T15:42:10.227Z","type":"part"}
{"nick":"creationix","message":"interesting conversation about binary modules and luvi https://github.com/luvit/luvi/issues/140#issuecomment-188573479","date":"2016-02-25T15:44:57.084Z","type":"message"}
{"nick":"visionik","reason":"Read error: Connection reset by peer","date":"2016-02-25T15:48:09.995Z","type":"quit"}
{"nick":"ksheedlo","reason":"Ping timeout: 250 seconds","date":"2016-02-25T15:48:43.148Z","type":"quit"}
{"nick":"visionik","date":"2016-02-25T15:49:09.782Z","type":"join"}
{"nick":"ksheedlo-rax","date":"2016-02-25T15:49:59.693Z","type":"join"}
{"nick":"rphillips","message":"creationix: around today","date":"2016-02-25T15:51:34.790Z","type":"message"}
{"nick":"rphillips","message":"feeling much better","date":"2016-02-25T15:51:37.210Z","type":"message"}
{"nick":"creationix","message":"I'm glad","date":"2016-02-25T15:52:02.667Z","type":"message"}
{"nick":"creationix","message":"So I'm finally cleaning up the ssl stuff in coro-*","date":"2016-02-25T15:52:14.742Z","type":"message"}
{"nick":"creationix","message":"The long-term plan is to modify luv to accept an ssl context for uv_stream_t, but I found a way in the mid-term to simulate that in lua","date":"2016-02-25T15:52:57.419Z","type":"message"}
{"nick":"rphillips","message":"nice","date":"2016-02-25T15:53:08.052Z","type":"message"}
{"nick":"creationix","message":"https://github.com/luvit/lit/pull/174","date":"2016-02-25T15:53:27.908Z","type":"message"}
{"nick":"creationix","message":"basically, there is a new module \"secure-socket\" that takes an ssl config table and a uv_stream_t and returns a fake uv_stream_t where reading and writing goes through the crypto","date":"2016-02-25T15:53:59.304Z","type":"message"}
{"nick":"creationix","message":"the main interface will wait for handshake to complete and either return (coroutine style) or pass (callback style) the fake stream back","date":"2016-02-25T15:54:25.634Z","type":"message"}
{"nick":"creationix","message":"this means it can be shared between luvit and coro-* so we don't need two different wrappers around openssl","date":"2016-02-25T15:54:46.380Z","type":"message"}
{"nick":"creationix","message":"and when it eventually moves to the C side to avoid all the wasteful interning of cipher-text into lua, the libraries will need minimal changes","date":"2016-02-25T15:55:28.999Z","type":"message"}
{"nick":"creationix","message":"Also it really cleans up the coro-* ecosystem.  Now you can simple pass a tls options table to coro-net and the resulting read/write functions will go through ssl","date":"2016-02-25T15:56:46.363Z","type":"message"}
{"nick":"creationix","message":"no need for tls-wrapper at all","date":"2016-02-25T15:56:52.975Z","type":"message"}
{"nick":"creationix","message":"and the newish way of passing encoder/decoders to coro-net now works with tls (you don't have to choose between new way and supporting tls which we had to do before)","date":"2016-02-25T15:57:38.106Z","type":"message"}
{"nick":"rphillips","message":"very cool","date":"2016-02-25T15:58:36.634Z","type":"message"}
{"nick":"rphillips","message":"that shold be a nice improvement","date":"2016-02-25T15:58:41.864Z","type":"message"}
{"nick":"rphillips","message":"should*","date":"2016-02-25T15:58:46.350Z","type":"message"}
{"nick":"creationix","message":"it also means that nothing needs a dependency on openssl just because it might use tls","date":"2016-02-25T15:59:14.442Z","type":"message"}
{"nick":"creationix","message":"they can just depend on coro-net.  And only *if* they try to use tls, will it notice if openssl is installed or not","date":"2016-02-25T15:59:47.319Z","type":"message"}
{"nick":"creationix","message":"optional dependency","date":"2016-02-25T15:59:53.292Z","type":"message"}
{"nick":"creationix","message":"so practically speaking, my servers can all now use luvi tiny since they sit behind nginx for ssl termination","date":"2016-02-25T16:00:36.951Z","type":"message"}
{"nick":"creationix","message":"or lua or luajit","date":"2016-02-25T16:00:47.777Z","type":"message"}
{"nick":"creationix","message":"all the other deps are now portable","date":"2016-02-25T16:00:56.273Z","type":"message"}
{"nick":"creationix","message":"This should be big.  It means the general lua community can now use all our core libraries without needing luvit or luvi.  Just luv + libraries which are all now in portable format.","date":"2016-02-25T16:02:36.375Z","type":"message"}
{"nick":"creationix","message":"I'll write up that blog post after I'm done cleaning up and testing all this.","date":"2016-02-25T16:02:49.803Z","type":"message"}
{"nick":"creationix","message":"rphillips, so how well do you understand tcp?","date":"2016-02-25T16:16:15.116Z","type":"message"}
{"nick":"rphillips","message":"pretty well","date":"2016-02-25T16:16:31.196Z","type":"message"}
{"nick":"creationix","message":"I'm having trouble figuring out the expected and desired behavior of coro streams","date":"2016-02-25T16:16:34.305Z","type":"message"}
{"nick":"creationix","message":"I understand that a duplex stream can be closed on either side (send a FIN), while the other is still sending data?","date":"2016-02-25T16:17:12.855Z","type":"message"}
{"nick":"creationix","message":"so the two halves seem kinda independent","date":"2016-02-25T16:17:25.257Z","type":"message"}
{"nick":"creationix","message":"in the coro interface, you write(nil) to end a write stream.  It calls uv.shutdown which I assume sends the FIN","date":"2016-02-25T16:17:55.641Z","type":"message"}
{"nick":"creationix","message":"and on the read side, if you receive a FIN, libuv will pass a EOF to the onRead callback and coro-streams will return nil from read","date":"2016-02-25T16:18:29.130Z","type":"message"}
{"nick":"creationix","message":"what I don't understand is what should happen if the client disconnects without sending the fin","date":"2016-02-25T16:18:53.738Z","type":"message"}
{"nick":"creationix","message":"I would expect the OS to tell libuv the socket died and libuv give me either an error or EOF event, but it just does nothing.  The onRead callback in C is never called","date":"2016-02-25T16:19:29.867Z","type":"message"}
{"nick":"rphillips","message":"you will need a read timeout","date":"2016-02-25T16:20:06.624Z","type":"message"}
{"nick":"creationix","message":"I understand detecting the disconnected socket is difficult if it's idle so I added a heartbeat message that's sent","date":"2016-02-25T16:20:10.465Z","type":"message"}
{"nick":"creationix","message":"the heartbeat will return EBADF or EPIPE (server or client) if the socket is dead","date":"2016-02-25T16:20:32.649Z","type":"message"}
{"nick":"creationix","message":"but even then libuv still doesn't ever call onRead","date":"2016-02-25T16:20:44.849Z","type":"message"}
{"nick":"creationix","message":"a timeout would only work if I'm expecting data.  What about long-lived and mostly idle connections?","date":"2016-02-25T16:21:14.883Z","type":"message"}
{"nick":"rphillips","message":"you can also turn keep alive on but adds some overhead","date":"2016-02-25T16:22:27.599Z","type":"message"}
{"nick":"creationix","message":"I think I would like read() in the coro-stream to return with an error if the socket is disconnected, but that involves coupling the read and write streams","date":"2016-02-25T16:22:29.659Z","type":"message"}
{"nick":"creationix","message":"TCP keepalive, yeah that could work","date":"2016-02-25T16:22:47.655Z","type":"message"}
{"nick":"creationix","message":"that basically just sends heartbeats at the TCP level right?","date":"2016-02-25T16:23:02.652Z","type":"message"}
{"nick":"rphillips","message":"correct","date":"2016-02-25T16:23:44.952Z","type":"message"}
{"nick":"rphillips","message":"keep alive is the way to go if the connection is mostly idle","date":"2016-02-25T16:23:52.864Z","type":"message"}
{"nick":"creationix","message":"I've read several places that keepalive can break some networks, but maybe that's old information","date":"2016-02-25T16:24:02.782Z","type":"message"}
{"nick":"creationix","message":"I know it's easy to enable using the libuv APIs","date":"2016-02-25T16:24:12.840Z","type":"message"}
{"nick":"creationix","message":"websocket also has ping/pong and close control frames","date":"2016-02-25T16:24:50.472Z","type":"message"}
{"nick":"creationix","message":"I'm just not sure what good the websocket level frames does.  Attempting to write to a dead socket doesn't trigger onRead to happen","date":"2016-02-25T16:25:25.510Z","type":"message"}
{"nick":"creationix","message":"I'd have to couple the two halves and abort the read if a write on the same socket failed (just not sure that's a good idea or correct behavior)","date":"2016-02-25T16:25:53.359Z","type":"message"}
{"nick":"creationix","message":"I think I'll try TCP keepalive.  That should be less overhead than websocket control frames","date":"2016-02-25T16:27:58.535Z","type":"message"}
{"nick":"rphillips","message":"that does sound like correct behavior","date":"2016-02-25T16:29:08.273Z","type":"message"}
{"nick":"rphillips","message":"if the socket fails the write then it usually needs to be torn down","date":"2016-02-25T16:29:22.226Z","type":"message"}
{"nick":"creationix","message":"I guess it depends on why the write failed","date":"2016-02-25T16:29:42.765Z","type":"message"}
{"nick":"creationix","message":"if I send a fin and then try to write, that will fail, but because I closed my write side","date":"2016-02-25T16:29:54.250Z","type":"message"}
{"nick":"creationix","message":"the read-side might live on for a while in that case I think","date":"2016-02-25T16:30:13.318Z","type":"message"}
{"nick":"creationix","message":"thanks, I'll see if tcp keepalive does what I want, if not, I'll couple the streams at the higher level","date":"2016-02-25T16:32:55.102Z","type":"message"}
{"nick":"creationix","message":"the other problem is knowing when to close a socket handle","date":"2016-02-25T16:39:01.436Z","type":"message"}
{"nick":"creationix","message":"currently coro-net closes after shutdown, but this is wrong, it's too soon","date":"2016-02-25T16:39:27.092Z","type":"message"}
{"nick":"creationix","message":"I need to couple the two sides and only close after sending and receiving EOF","date":"2016-02-25T16:39:43.235Z","type":"message"}
{"nick":"rphillips","message":"or an error is thrown","date":"2016-02-25T16:50:57.635Z","type":"message"}
{"nick":"creationix","message":"so if write returns an error, onRead has an error or both sides have seen EOF, then we need to close the handle","date":"2016-02-25T16:55:34.911Z","type":"message"}
{"nick":"creationix","message":"that should be enough to prevent leaks I think","date":"2016-02-25T16:55:42.342Z","type":"message"}
{"nick":"creationix","message":"without closing too soon","date":"2016-02-25T16:55:49.015Z","type":"message"}
{"nick":"creationix","message":"I wish we had something like npm link, should make this sometime https://github.com/luvit/lit/issues/175","date":"2016-02-25T19:08:14.670Z","type":"message"}
{"nick":"travis-ci","date":"2016-02-25T19:16:46.805Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luv#202 (master - 767c34b : Tim Caswell): The build passed.","date":"2016-02-25T19:16:47.724Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luv/compare/e1777f48a92e...767c34ba3a3d","date":"2016-02-25T19:16:47.936Z","type":"message"}
{"nick":"travis-ci","message":"Build details : https://travis-ci.org/luvit/luv/builds/111823730","date":"2016-02-25T19:16:47.936Z","type":"message"}
{"nick":"travis-ci","date":"2016-02-25T19:16:47.936Z","type":"part"}
{"nick":"erlbot--_","new_nick":"erlbot--","date":"2016-02-25T20:05:40.113Z","type":"nick"}
{"nick":"creationix","message":"alright, we got a new lit version","date":"2016-02-25T20:19:01.490Z","type":"message"}
