{"nick":"Harageth","date":"2016-04-21T00:26:04.734Z","type":"join"}
{"nick":"Harageth","reason":"Ping timeout: 260 seconds","date":"2016-04-21T00:30:37.786Z","type":"quit"}
{"nick":"|oo|","reason":"Ping timeout: 252 seconds","date":"2016-04-21T00:38:49.924Z","type":"quit"}
{"nick":"Xe","reason":"Ping timeout: 252 seconds","date":"2016-04-21T00:38:49.925Z","type":"quit"}
{"nick":"konobi","message":"creationix: check out Coat at all?","date":"2016-04-21T00:39:14.539Z","type":"message"}
{"nick":"songgao","reason":"Ping timeout: 252 seconds","date":"2016-04-21T00:39:23.136Z","type":"quit"}
{"nick":"creationix","message":"Coat?","date":"2016-04-21T00:39:26.826Z","type":"message"}
{"nick":"konobi","message":"http://fperrad.github.io/lua-Coat/","date":"2016-04-21T00:39:44.883Z","type":"message"}
{"nick":"daurnimator","message":".green? how is that a TLD.","date":"2016-04-21T00:39:53.114Z","type":"message"}
{"nick":"daurnimator","message":"sigh","date":"2016-04-21T00:39:55.262Z","type":"message"}
{"nick":"konobi","message":"daurnimator: don't forget .prod and .dev are gTLDs now too","date":"2016-04-21T00:40:47.659Z","type":"message"}
{"nick":"daurnimator","message":"creationix: hooray, tailcalls :)","date":"2016-04-21T00:40:48.973Z","type":"message"}
{"nick":"daurnimator","message":"konobi: how... stupid","date":"2016-04-21T00:40:57.313Z","type":"message"}
{"nick":"konobi","message":"google picked those ones up","date":"2016-04-21T00:41:15.959Z","type":"message"}
{"nick":"konobi","message":"creationix: it's pretty cute... but the real power comes in from Roles and the ability to safely compose","date":"2016-04-21T00:43:18.013Z","type":"message"}
{"nick":"Xe","date":"2016-04-21T00:46:01.415Z","type":"join"}
{"nick":"|oo|","date":"2016-04-21T00:48:08.299Z","type":"join"}
{"nick":"daurnimator","message":"konobi: :( so many globals.","date":"2016-04-21T00:48:58.941Z","type":"message"}
{"nick":"konobi","message":"daurnimator: well, i think they should be scoped","date":"2016-04-21T00:49:25.962Z","type":"message"}
{"nick":"daurnimator","message":"agreed. but they're not :P","date":"2016-04-21T00:49:33.584Z","type":"message"}
{"nick":"konobi","message":"daurnimator: would be easy enough to do","date":"2016-04-21T00:51:05.582Z","type":"message"}
{"nick":"konobi","message":"moose has better syntactic sugar though... wouldn't be too hard to fix that up","date":"2016-04-21T00:51:58.522Z","type":"message"}
{"nick":"konobi","message":"the bulk of the work is all in the meta classes anyway","date":"2016-04-21T00:52:08.567Z","type":"message"}
{"nick":"daurnimator","message":"konobi: for now at least, lua-Coat doesn't solve any issues I have.","date":"2016-04-21T00:55:56.553Z","type":"message"}
{"nick":"konobi","message":"daurnimator: yeah... takes some time to get used to working with it.","date":"2016-04-21T01:30:41.721Z","type":"message"}
{"nick":"daurnimator","message":"konobi: I suppose I just don't see the point","date":"2016-04-21T01:31:43.326Z","type":"message"}
{"nick":"daurnimator","message":"i've never met a situation that I can't solve with a simple metatable with an __index.","date":"2016-04-21T01:32:02.031Z","type":"message"}
{"nick":"SinisterRectus","message":"i just drop this where ever i need classes http://pastie.org/private/cyu67asy1fw3kuebnhca","date":"2016-04-21T01:34:09.437Z","type":"message"}
{"nick":"daurnimator","message":"why so complex?","date":"2016-04-21T01:38:57.695Z","type":"message"}
{"nick":"SinisterRectus","message":"lol","date":"2016-04-21T01:39:09.039Z","type":"message"}
{"nick":"SinisterRectus","message":"and i thought it was simple","date":"2016-04-21T01:39:22.919Z","type":"message"}
{"nick":"daurnimator","message":"this is what I do: https://github.com/daurnimator/lua-http/blob/master/http/headers.lua#L59","date":"2016-04-21T01:39:25.242Z","type":"message"}
{"nick":"songgao","date":"2016-04-21T01:40:15.422Z","type":"join"}
{"nick":"SinisterRectus","message":"i like a class declaration and callable classes","date":"2016-04-21T01:40:16.727Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: I don't ;) too 'magic' for my liking.","date":"2016-04-21T01:41:02.298Z","type":"message"}
{"nick":"daurnimator","message":"I like seeing everything laid bare; cause you know exactly what the code is doing and how to debug it","date":"2016-04-21T01:41:23.364Z","type":"message"}
{"nick":"SinisterRectus","message":"well, there aren't too many surprises with MyClass = class('MyClass'); obj = MyClass()","date":"2016-04-21T01:42:06.556Z","type":"message"}
{"nick":"SinisterRectus","message":"also inheritance","date":"2016-04-21T01:42:59.988Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: well first off I question the inheritence chain: if I add something to the base class will it be added to a derived class?","date":"2016-04-21T01:43:10.500Z","type":"message"}
{"nick":"daurnimator","message":"i.e. is it a 'copy class' constructor?","date":"2016-04-21T01:43:31.518Z","type":"message"}
{"nick":"daurnimator","message":"and the answer to that also has performance implications","date":"2016-04-21T01:44:00.106Z","type":"message"}
{"nick":"SinisterRectus","message":"no it won't retroactively apply","date":"2016-04-21T01:44:00.292Z","type":"message"}
{"nick":"SinisterRectus","message":"wait","date":"2016-04-21T01:44:16.492Z","type":"message"}
{"nick":"SinisterRectus","message":"hang on let me check","date":"2016-04-21T01:44:19.063Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: so I can't debug a derived class by adding things to the parent?","date":"2016-04-21T01:44:22.821Z","type":"message"}
{"nick":"SinisterRectus","message":"i don't think i've even tried this","date":"2016-04-21T01:44:23.570Z","type":"message"}
{"nick":"konobi","message":"daurnimator: proper non-diamond multiple inheritance for one.","date":"2016-04-21T01:44:30.894Z","type":"message"}
{"nick":"daurnimator","message":"konobi: IMO if you have multiple inheritence you messed up :P","date":"2016-04-21T01:44:47.826Z","type":"message"}
{"nick":"daurnimator","message":"(I've never encountered multiple inheritence in a place I didn't want to already refactor)","date":"2016-04-21T01:45:11.520Z","type":"message"}
{"nick":"konobi","message":"having proper MRO makes multiple inheritance much more feasible, since you have compile time guarantees","date":"2016-04-21T01:46:10.043Z","type":"message"}
{"nick":"daurnimator","message":"konobi: compile time? we're talking about lua here.","date":"2016-04-21T01:46:46.367Z","type":"message"}
{"nick":"konobi","message":"daurnimator: well, i mean \"compile\" time as in the interpreters compile phase before execution","date":"2016-04-21T01:48:10.859Z","type":"message"}
{"nick":"SinisterRectus","message":"daurnimator: you're correct, you have to define the function in the base class before the object is initialized","date":"2016-04-21T01:48:17.690Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: no you don't.... I just read through the code","date":"2016-04-21T01:48:47.675Z","type":"message"}
{"nick":"konobi","message":"ie: if you ask for an invalid or uncertain method ordering, it'll bail straight away","date":"2016-04-21T01:48:50.131Z","type":"message"}
{"nick":"daurnimator","message":"oh wait, sorry you do.","date":"2016-04-21T01:49:00.624Z","type":"message"}
{"nick":"SinisterRectus","message":":/","date":"2016-04-21T01:49:00.904Z","type":"message"}
{"nick":"SinisterRectus","message":"i don't find that to be an issue though, outside of debugging","date":"2016-04-21T01:49:26.778Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: this is the type of thing I *don't* like do when debugging a production issue :P simple = better.","date":"2016-04-21T01:49:27.657Z","type":"message"}
{"nick":"SinisterRectus","message":"well everyone is going to have their own opinion, but i don't see the need to add a feature just for the purposes of debugging, if the end user doesn't need it","date":"2016-04-21T01:50:01.138Z","type":"message"}
{"nick":"SinisterRectus","message":"i'd happily define a debug function before i need it","date":"2016-04-21T01:50:20.121Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: btw, you don't inherit metamethods?","date":"2016-04-21T01:50:31.058Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: also, watch out for inheriting from a class with a __pairs....","date":"2016-04-21T01:50:39.551Z","type":"message"}
{"nick":"SinisterRectus","message":"no, i kept it simple","date":"2016-04-21T01:50:53.511Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: other misc advice: add a mt.__name field. lua uses it for some error messages :)","date":"2016-04-21T01:51:07.639Z","type":"message"}
{"nick":"daurnimator","message":"oh sorry, you already did.","date":"2016-04-21T01:51:16.176Z","type":"message"}
{"nick":"daurnimator","message":"man I'm blind today....","date":"2016-04-21T01:51:21.145Z","type":"message"}
{"nick":"SinisterRectus","message":"lol","date":"2016-04-21T01:51:23.388Z","type":"message"}
{"nick":"konobi","message":"creationix: did you have any luck with static compilation?","date":"2016-04-21T01:51:32.164Z","type":"message"}
{"nick":"SinisterRectus","message":"you can defiine metamethods though like Class:__tostring()","date":"2016-04-21T01:51:40.270Z","type":"message"}
{"nick":"SinisterRectus","message":"and that will be inherited","date":"2016-04-21T01:51:43.650Z","type":"message"}
{"nick":"SinisterRectus","message":"unless that's what you're asking","date":"2016-04-21T01:52:06.057Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: okay, one thing though: `function(...) local bases = {...}; local name = table.remove(bases, 1)` <-- that's bad/weird. instead do: `function(name, ...) local bases = {...}`","date":"2016-04-21T01:52:28.895Z","type":"message"}
{"nick":"SinisterRectus","message":"ooh yeah that was left over from when i had optional naming","date":"2016-04-21T01:52:51.735Z","type":"message"}
{"nick":"SinisterRectus","message":"thanks","date":"2016-04-21T01:52:59.541Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: and then you can move the assert up :)","date":"2016-04-21T01:53:15.549Z","type":"message"}
{"nick":"SinisterRectus","message":"tbh i modeled this after luabind's class behavior","date":"2016-04-21T01:53:57.091Z","type":"message"}
{"nick":"SinisterRectus","message":"http://www.rasterbar.com/products/luabind/docs.html#defining-classes-in-lua","date":"2016-04-21T01:54:29.313Z","type":"message"}
{"nick":"SinisterRectus","message":"not that i know any C++","date":"2016-04-21T01:54:33.276Z","type":"message"}
{"nick":"SinisterRectus","message":"so you have to initialize the base object, too","date":"2016-04-21T01:55:33.809Z","type":"message"}
{"nick":"SinisterRectus","message":"it doesn't do it automatically like i believe middleclass does","date":"2016-04-21T01:55:43.315Z","type":"message"}
{"nick":"SinisterRectus","message":"well, not initialize the object, but call it's __init","date":"2016-04-21T01:56:11.864Z","type":"message"}
{"nick":"SinisterRectus","message":"its*","date":"2016-04-21T01:56:14.635Z","type":"message"}
{"nick":"SinisterRectus","message":"anyway, back to work","date":"2016-04-21T01:58:47.470Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: you could probably share the metatable for the classes themselves.","date":"2016-04-21T02:00:55.672Z","type":"message"}
{"nick":"SinisterRectus","message":"hmm probably","date":"2016-04-21T02:02:29.347Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: and the reason I mentioned __name is that your *classes* don't have it. (the objects themselves do)","date":"2016-04-21T02:03:47.722Z","type":"message"}
{"nick":"SinisterRectus","message":"they both do","date":"2016-04-21T02:05:49.333Z","type":"message"}
{"nick":"SinisterRectus","message":"class.__name = name","date":"2016-04-21T02:06:04.825Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: I mean the class itself (it only has __call and __tostring)","date":"2016-04-21T02:09:02.759Z","type":"message"}
{"nick":"SinisterRectus","message":"those are metamethods... __name is just a parameter of the class table","date":"2016-04-21T02:10:02.460Z","type":"message"}
{"nick":"SinisterRectus","message":"i can't define __tostring to return __name, though, if it's not a closure of the class definition","date":"2016-04-21T02:11:09.533Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: hold on, let me \"improve\" yours a bit","date":"2016-04-21T02:12:07.670Z","type":"message"}
{"nick":"daurnimator","message":"btw, do you intend that in the case of conflicting method definitions from your multiple inheritence the *last* class wins?","date":"2016-04-21T02:12:47.722Z","type":"message"}
{"nick":"daurnimator","message":"(normally it's the first one.... or an error)","date":"2016-04-21T02:12:53.411Z","type":"message"}
{"nick":"SinisterRectus","message":"oh wait, i just pass it, it works","date":"2016-04-21T02:12:55.753Z","type":"message"}
{"nick":"SinisterRectus","message":"yes, correct","date":"2016-04-21T02:13:02.394Z","type":"message"}
{"nick":"SinisterRectus","message":"that's just my own convention, though","date":"2016-04-21T02:14:14.500Z","type":"message"}
{"nick":"Harageth","date":"2016-04-21T02:14:16.705Z","type":"join"}
{"nick":"SinisterRectus","message":"http://pastie.org/private/aiopdebhqwhfvljejzpqyq","date":"2016-04-21T02:17:11.280Z","type":"message"}
{"nick":"SinisterRectus","message":"is that what you meant by sharing the metatable","date":"2016-04-21T02:18:08.042Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: http://codepad.org/3Y9SGsPL","date":"2016-04-21T02:19:44.474Z","type":"message"}
{"nick":"SinisterRectus","message":"ah yep pretty much that","date":"2016-04-21T02:20:37.986Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: one more change (removing the __init is function check)","date":"2016-04-21T02:21:08.709Z","type":"message"}
{"nick":"SinisterRectus","message":"it's optional though","date":"2016-04-21T02:21:35.504Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: http://codepad.org/sae2liZC","date":"2016-04-21T02:22:20.779Z","type":"message"}
{"nick":"SinisterRectus","message":"i'll def switch to rawset though","date":"2016-04-21T02:22:50.845Z","type":"message"}
{"nick":"daurnimator","message":"uh, http://codepad.org/67Jn5HOS missed `self` in obj__tostring","date":"2016-04-21T02:23:04.231Z","type":"message"}
{"nick":"SinisterRectus","message":"why do you not use pairs?","date":"2016-04-21T02:23:04.418Z","type":"message"}
{"nick":"SinisterRectus","message":"np","date":"2016-04-21T02:23:08.300Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: incase someone decides to use __pairs","date":"2016-04-21T02:23:19.635Z","type":"message"}
{"nick":"Harageth","reason":"Remote host closed the connection","date":"2016-04-21T02:23:20.931Z","type":"quit"}
{"nick":"SinisterRectus","message":"is that a 5.3 thing","date":"2016-04-21T02:23:55.082Z","type":"message"}
{"nick":"SinisterRectus","message":"hm, no it's in at least 5.2","date":"2016-04-21T02:24:12.049Z","type":"message"}
{"nick":"daurnimator","message":"5.2 and 5.3. people often override pairs in 5.1 to provide it though","date":"2016-04-21T02:24:15.267Z","type":"message"}
{"nick":"SinisterRectus","message":"what about __ipairs","date":"2016-04-21T02:24:34.234Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: what about it? the table we pass we know doesn't have a metatable.","date":"2016-04-21T02:24:56.350Z","type":"message"}
{"nick":"SinisterRectus","message":"doh lol","date":"2016-04-21T02:25:04.158Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: so http://codepad.org/HBsrcOCd ?","date":"2016-04-21T02:26:24.613Z","type":"message"}
{"nick":"daurnimator","message":"actually you need rawset at the bottom too: http://codepad.org/PC3z949Y","date":"2016-04-21T02:27:21.129Z","type":"message"}
{"nick":"SinisterRectus","message":"yeah that has to come after the copy","date":"2016-04-21T02:27:47.192Z","type":"message"}
{"nick":"daurnimator","message":"inheriting metamethods probably needs more finese anyway","date":"2016-04-21T02:28:18.025Z","type":"message"}
{"nick":"daurnimator","message":"most of them shouldn't be inherited.","date":"2016-04-21T02:28:44.198Z","type":"message"}
{"nick":"creationix","message":"konobi: hadn't tried it yet","date":"2016-04-21T02:29:43.078Z","type":"message"}
{"nick":"creationix","message":"still pretty sick, easily distracted","date":"2016-04-21T02:29:54.017Z","type":"message"}
{"nick":"creationix","action":"is currently trying to finish the microcontroller vm for his son","date":"2016-04-21T02:30:11.624Z","type":"action"}
{"nick":"daurnimator","action":"has a sick dog :( vet is holding her overnight","date":"2016-04-21T02:30:28.218Z","type":"action"}
{"nick":"creationix","message":"nodemcu's elua is too sloppy","date":"2016-04-21T02:30:31.367Z","type":"message"}
{"nick":"daurnimator","message":"the esp8266 dev kit is sloppy","date":"2016-04-21T02:30:52.087Z","type":"message"}
{"nick":"creationix","message":"espruino is nice, but is missing lots of hardware support on esp8266 and is slow","date":"2016-04-21T02:30:54.759Z","type":"message"}
{"nick":"creationix","message":"daurnimator: truth","date":"2016-04-21T02:30:59.359Z","type":"message"}
{"nick":"daurnimator","message":"creationix: https://github.com/superhouse/esp-open-rtos is hopefully a better base","date":"2016-04-21T02:31:14.519Z","type":"message"}
{"nick":"creationix","message":"but I've got a ton of hardware","date":"2016-04-21T02:31:17.427Z","type":"message"}
{"nick":"creationix","message":"the arduino port is pretty good.  I've been using that","date":"2016-04-21T02:31:26.361Z","type":"message"}
{"nick":"creationix","message":"just write my vm in C (C++ really, but I mostly ignore that)","date":"2016-04-21T02:31:38.685Z","type":"message"}
{"nick":"creationix","message":"daurnimator: looks nice, I might just use this","date":"2016-04-21T02:34:52.266Z","type":"message"}
{"nick":"creationix","message":"probably lower overhead than arduino","date":"2016-04-21T02:34:58.165Z","type":"message"}
{"nick":"creationix","message":"I don't mind rewriting my I2C drivers","date":"2016-04-21T02:35:07.008Z","type":"message"}
{"nick":"creationix","message":"most arduino libraries would be easy to port manually anyways","date":"2016-04-21T02:35:24.910Z","type":"message"}
{"nick":"konobi","message":"creationix: i could probably give it a try over the weekend","date":"2016-04-21T02:39:49.599Z","type":"message"}
{"nick":"konobi","message":"assuming cmake doesn't break my brane","date":"2016-04-21T02:40:15.153Z","type":"message"}
{"nick":"SinisterRectus","message":"works nicely, thanks daurnimator","date":"2016-04-21T02:43:03.326Z","type":"message"}
{"nick":"Harageth","date":"2016-04-21T02:43:04.081Z","type":"join"}
{"nick":"konobi","message":"creationix: do you have some sort of OO framework that you recommend for lua?","date":"2016-04-21T02:43:33.419Z","type":"message"}
{"nick":"creationix","message":"konobi: oh yeah, cmake is why I gave up","date":"2016-04-21T02:44:09.130Z","type":"message"}
{"nick":"creationix","message":"now I remember","date":"2016-04-21T02:44:11.594Z","type":"message"}
{"nick":"creationix","message":"I don't really like OO","date":"2016-04-21T02:44:26.399Z","type":"message"}
{"nick":"creationix","message":"the one in luvit/core is fairly simple","date":"2016-04-21T02:44:31.481Z","type":"message"}
{"nick":"creationix","message":"it made porting node's APIs to lua easier","date":"2016-04-21T02:44:41.097Z","type":"message"}
{"nick":"creationix","message":"I much prefer closures and functions returning functions to objects with inheritance and methods","date":"2016-04-21T02:45:02.612Z","type":"message"}
{"nick":"konobi","message":"yeah, in a lot of OO frameworks you'd not get proper async behaviour","date":"2016-04-21T02:46:17.638Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: so I realised you can be self consistent.","date":"2016-04-21T02:47:44.003Z","type":"message"}
{"nick":"SinisterRectus","message":"hm?","date":"2016-04-21T02:47:59.396Z","type":"message"}
{"nick":"konobi","message":"creationix: though... you could probably get away with a lot using coroutines","date":"2016-04-21T02:49:12.564Z","type":"message"}
{"nick":"creationix","message":"konobi: oh I use coroutines alright in my luvit code","date":"2016-04-21T02:49:44.483Z","type":"message"}
{"nick":"creationix","message":"coroutines and closures are my friends","date":"2016-04-21T02:49:51.773Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: create your class class with a class.","date":"2016-04-21T02:51:18.742Z","type":"message"}
{"nick":"SinisterRectus","message":"oh..","date":"2016-04-21T02:51:33.062Z","type":"message"}
{"nick":"creationix","message":"It's a shame forth is so hard to understand, the vm is so simple and the bytecode is super compact https://www.pololu.com/docs/0J40/6.c","date":"2016-04-21T02:52:10.056Z","type":"message"}
{"nick":"Adam__","date":"2016-04-21T02:53:00.915Z","type":"join"}
{"nick":"creationix","message":"I wonder how hard it is to compile a lua-like language to forth-like bytecode.  That's what python does right?","date":"2016-04-21T02:53:06.031Z","type":"message"}
{"nick":"creationix","message":"and sort of what lua does","date":"2016-04-21T02:53:08.908Z","type":"message"}
{"nick":"konobi","message":"creationix: would be interesting for UEFI apps","date":"2016-04-21T02:53:29.889Z","type":"message"}
{"nick":"creationix","message":"is space limited for those?","date":"2016-04-21T02:53:42.193Z","type":"message"}
{"nick":"konobi","message":"nope","date":"2016-04-21T02:55:14.819Z","type":"message"}
{"nick":"konobi","message":"they're usually always on disk as a special \"partition\"","date":"2016-04-21T02:55:31.739Z","type":"message"}
{"nick":"Harageth","reason":"Ping timeout: 250 seconds","date":"2016-04-21T02:56:23.012Z","type":"quit"}
{"nick":"daurnimator","message":"SinisterRectus: http://codepad.org/kjoas5zs","date":"2016-04-21T02:59:27.568Z","type":"message"}
{"nick":"Adam__","reason":"Remote host closed the connection","date":"2016-04-21T03:00:12.713Z","type":"quit"}
{"nick":"SinisterRectus","message":"O_o","date":"2016-04-21T03:01:33.576Z","type":"message"}
{"nick":"SinisterRectus","message":"that's cool... mindboggling, too","date":"2016-04-21T03:03:28.955Z","type":"message"}
{"nick":"SinisterRectus","message":"not really necessary tho","date":"2016-04-21T03:03:34.745Z","type":"message"}
{"nick":"SinisterRectus","message":"or is it beneficial?","date":"2016-04-21T03:03:50.058Z","type":"message"}
{"nick":"SinisterRectus","message":"it saves a table, yes?","date":"2016-04-21T03:05:10.371Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: slightly refactored: http://codepad.org/7ujSzxMi","date":"2016-04-21T03:05:35.643Z","type":"message"}
{"nick":"Harageth","date":"2016-04-21T03:05:45.925Z","type":"join"}
{"nick":"daurnimator","message":"SinisterRectus: it separates out class construction from initialisation. should be easier to debug. + you don't ever use a *different* class system to build *your* class system :P","date":"2016-04-21T03:07:20.619Z","type":"message"}
{"nick":"SinisterRectus","message":"indeed, but it prevents a second table from being used for the metatable, and sets the class as its own metatable","date":"2016-04-21T03:07:51.969Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: huh?","date":"2016-04-21T03:08:25.239Z","type":"message"}
{"nick":"SinisterRectus","message":"setmetatable(class, class) instead of setmetatable(class, mt)","date":"2016-04-21T03:08:57.087Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: that's just for the class object itself. the 'class' object is of class 'class'.","date":"2016-04-21T03:09:23.734Z","type":"message"}
{"nick":"SinisterRectus","message":"yes i know","date":"2016-04-21T03:09:38.558Z","type":"message"}
{"nick":"SinisterRectus","message":"i'm saying that you save a table by doing that","date":"2016-04-21T03:09:44.830Z","type":"message"}
{"nick":"daurnimator","message":"saving a table here isn't really top of mind","date":"2016-04-21T03:10:44.013Z","type":"message"}
{"nick":"SinisterRectus","message":"i optimize for performance above debug-ability","date":"2016-04-21T03:11:27.643Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: performance of a one-off thing done at *library* initialisation time?","date":"2016-04-21T03:12:08.024Z","type":"message"}
{"nick":"SinisterRectus","message":"i guess it's a moot point, since i no longer have a metatable per class","date":"2016-04-21T03:12:55.986Z","type":"message"}
{"nick":"daurnimator","message":"... and that performance difference is an ~24 byte memory allocation? :p","date":"2016-04-21T03:12:57.956Z","type":"message"}
{"nick":"SinisterRectus","message":"previously i did","date":"2016-04-21T03:13:03.947Z","type":"message"}
{"nick":"SinisterRectus","message":"this is really nice thoug","date":"2016-04-21T03:14:05.612Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: also: print(class) => 'class class' ;)","date":"2016-04-21T03:14:07.477Z","type":"message"}
{"nick":"SinisterRectus","message":"ooh i don't know if i like that","date":"2016-04-21T03:14:25.290Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: well before you got \"function 0x1234\"","date":"2016-04-21T03:14:36.082Z","type":"message"}
{"nick":"SinisterRectus","message":"ah i can change it","date":"2016-04-21T03:14:37.559Z","type":"message"}
{"nick":"daurnimator","message":"I think it is a good thing actually","date":"2016-04-21T03:14:44.213Z","type":"message"}
{"nick":"daurnimator","message":"it shows that 'class' isn't special, it's just another class (that happens to construct classes)","date":"2016-04-21T03:15:02.264Z","type":"message"}
{"nick":"SinisterRectus","message":"no.. it returned class .. class.__name","date":"2016-04-21T03:15:07.713Z","type":"message"}
{"nick":"SinisterRectus","message":"'class ' .. class.__Name","date":"2016-04-21T03:15:18.233Z","type":"message"}
{"nick":"SinisterRectus","message":"name*","date":"2016-04-21T03:15:19.925Z","type":"message"}
{"nick":"SinisterRectus","message":"(it's late)","date":"2016-04-21T03:15:22.934Z","type":"message"}
{"nick":"Adam__","date":"2016-04-21T03:17:15.013Z","type":"join"}
{"nick":"daurnimator","message":"SinisterRectus: I think wires got crossed","date":"2016-04-21T03:19:32.709Z","type":"message"}
{"nick":"Harageth","reason":"Ping timeout: 276 seconds","date":"2016-04-21T03:20:17.925Z","type":"quit"}
{"nick":"daurnimator","message":"I was saying the 'class' variable has a __tostring that returns \"class class\" *because* of the `\"class \" .. self.__name`","date":"2016-04-21T03:20:25.866Z","type":"message"}
{"nick":"SinisterRectus","message":"indeed","date":"2016-04-21T03:20:51.988Z","type":"message"}
{"nick":"daurnimator","message":"you still have `tostring(class(\"foo\")) == \"class foo\"`","date":"2016-04-21T03:20:56.408Z","type":"message"}
{"nick":"SinisterRectus","message":"yes, but i don't know what you mean by 'before you got \"function 0x1234\"'","date":"2016-04-21T03:21:21.147Z","type":"message"}
{"nick":"daurnimator","message":"SinisterRectus: previous the thing returned by your module was just a function. with tostring(require\"class\") == \"function 0x1234\"","date":"2016-04-21T03:21:50.941Z","type":"message"}
{"nick":"SinisterRectus","message":"ohhhh","date":"2016-04-21T03:21:58.700Z","type":"message"}
{"nick":"SinisterRectus","message":"class()","date":"2016-04-21T03:22:10.490Z","type":"message"}
{"nick":"SinisterRectus","message":"derp","date":"2016-04-21T03:22:11.705Z","type":"message"}
{"nick":"SinisterRectus","message":"i thought you mean tostring(ClassName)","date":"2016-04-21T03:22:23.532Z","type":"message"}
{"nick":"SinisterRectus","message":"okay","date":"2016-04-21T03:22:24.268Z","type":"message"}
{"nick":"SinisterRectus","message":"nvm","date":"2016-04-21T03:22:25.595Z","type":"message"}
{"nick":"SinisterRectus","message":"time for bed, thanks again for the help daurnimator","date":"2016-04-21T03:28:11.161Z","type":"message"}
{"nick":"Harageth","date":"2016-04-21T03:52:49.983Z","type":"join"}
{"nick":"Adam__","reason":"Ping timeout: 250 seconds","date":"2016-04-21T03:56:37.048Z","type":"quit"}
{"nick":"Harageth","reason":"Remote host closed the connection","date":"2016-04-21T04:12:10.461Z","type":"quit"}
{"nick":"Harageth","date":"2016-04-21T04:33:18.553Z","type":"join"}
{"nick":"SinisterRectus","reason":"Ping timeout: 244 seconds","date":"2016-04-21T04:34:28.000Z","type":"quit"}
{"nick":"Harageth","reason":"Ping timeout: 252 seconds","date":"2016-04-21T04:37:31.490Z","type":"quit"}
{"nick":"Harageth","date":"2016-04-21T04:39:31.229Z","type":"join"}
{"nick":"SkyRocknRoll","date":"2016-04-21T05:13:33.082Z","type":"join"}
{"nick":"Harageth","reason":"Remote host closed the connection","date":"2016-04-21T05:29:29.320Z","type":"quit"}
{"nick":"rendar","date":"2016-04-21T06:40:16.005Z","type":"join"}
