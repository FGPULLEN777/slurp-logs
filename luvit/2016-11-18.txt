{"nick":"daurnimator","message":"Yorlik: if someone messes with require yell at them","date":"2016-11-18T00:29:44.409Z","type":"message"}
{"nick":"Yorlik","message":"lol","date":"2016-11-18T00:29:53.733Z","type":"message"}
{"nick":"Yorlik","message":"Actually they had to mess with it","date":"2016-11-18T00:30:18.945Z","type":"message"}
{"nick":"daurnimator","message":"Yorlik: require already *officially* supports changing behaviour with package.searchers. if someone changes the 'require' function itself they are doing something 'wrong'","date":"2016-11-18T00:30:31.369Z","type":"message"}
{"nick":"Yorlik","message":"When modding the server, you can use: require \"default:somescript\" inside your own somescript.lua","date":"2016-11-18T00:31:30.340Z","type":"message"}
{"nick":"Yorlik","message":"Also they have a special setup which caches certain scripts while running multiple VMs and contexts","date":"2016-11-18T00:32:04.634Z","type":"message"}
{"nick":"Yorlik","message":"Its not too bad and after all we can use the native require by calling lua_require","date":"2016-11-18T00:32:29.310Z","type":"message"}
{"nick":"daurnimator","message":"Yorlik: require will happily pass on default:somescript to your custom package.searcher.","date":"2016-11-18T00:32:34.093Z","type":"message"}
{"nick":"Yorlik","message":"But I'd prefer they had just introduced their own function name","date":"2016-11-18T00:32:44.637Z","type":"message"}
{"nick":"Yorlik","message":"I'm not that familiar with package searchers. how do they work ? I only know about the paths wioth the many question markis","date":"2016-11-18T00:33:22.771Z","type":"message"}
{"nick":"daurnimator","message":"Yorlik: check the docs :) http://www.lua.org/manual/5.3/manual.html#pdf-require","date":"2016-11-18T00:34:38.434Z","type":"message"}
{"nick":"Yorlik","message":"KK","date":"2016-11-18T00:34:45.882Z","type":"message"}
{"nick":"Yorlik","message":"I must haver overread that when reading the book","date":"2016-11-18T00:34:56.938Z","type":"message"}
{"nick":"DarkGod","reason":"Ping timeout: 252 seconds","date":"2016-11-18T02:11:09.960Z","type":"quit"}
{"nick":"creationix_","reason":"Ping timeout: 245 seconds","date":"2016-11-18T06:20:03.889Z","type":"quit"}
{"nick":"creationix_","date":"2016-11-18T06:21:29.790Z","type":"join"}
{"nick":"rendar","date":"2016-11-18T07:01:29.230Z","type":"join"}
{"nick":"Yorlik","message":"Seems i just spent the night building various libraries from the Lua Universe in 32 and 64 bit.","date":"2016-11-18T07:09:08.302Z","type":"message"}
{"nick":"Yorlik","message":"Building in Lualands can cost you your sanity. I'm no longer sane.","date":"2016-11-18T07:09:57.120Z","type":"message"}
{"nick":"CapsAdmin","date":"2016-11-18T07:32:11.782Z","type":"join"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-11-18T09:24:02.931Z","type":"quit"}
{"nick":"rendar","date":"2016-11-18T09:46:48.771Z","type":"join"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-11-18T10:03:26.370Z","type":"quit"}
{"nick":"SkyRocknRoll","date":"2016-11-18T16:29:25.214Z","type":"join"}
{"nick":"SkyRocknRoll","reason":"Read error: Connection reset by peer","date":"2016-11-18T16:32:56.426Z","type":"quit"}
{"nick":"SkyRocknRoll","date":"2016-11-18T16:46:18.726Z","type":"join"}
{"nick":"SkyRocknRoll","reason":"Ping timeout: 258 seconds","date":"2016-11-18T17:46:17.441Z","type":"quit"}
{"nick":"SkyRocknRoll","date":"2016-11-18T18:00:08.381Z","type":"join"}
{"nick":"SkyRocknRoll","reason":"Ping timeout: 260 seconds","date":"2016-11-18T18:36:23.975Z","type":"quit"}
{"nick":"rgrinberg","date":"2016-11-18T19:04:04.690Z","type":"join"}
{"nick":"grncdr","date":"2016-11-18T20:46:32.570Z","type":"join"}
{"nick":"grncdr","message":"hi again ;)","date":"2016-11-18T20:46:37.874Z","type":"message"}
{"nick":"creationix","message":"hi","date":"2016-11-18T20:46:43.157Z","type":"message"}
{"nick":"creationix","message":"we'll see if will joins","date":"2016-11-18T20:46:57.906Z","type":"message"}
{"nick":"creationix","message":"grncdr so my basic idea is to do away with fs based dependency trees","date":"2016-11-18T20:47:40.850Z","type":"message"}
{"nick":"creationix","message":"lit (luvit's package manager) already has a CAS based backend for caching packages","date":"2016-11-18T20:48:01.029Z","type":"message"}
{"nick":"creationix","message":"but I'm trying to see if it's feasable to require directly out of it","date":"2016-11-18T20:48:16.606Z","type":"message"}
{"nick":"grncdr","message":"ah nice","date":"2016-11-18T20:48:22.875Z","type":"message"}
{"nick":"creationix","message":"(the db is written in luvit so library support is not a problem)","date":"2016-11-18T20:48:26.009Z","type":"message"}
{"nick":"grncdr","message":"what is a \"package\" in luvit? many files or a single one?","date":"2016-11-18T20:48:41.906Z","type":"message"}
{"nick":"creationix","message":"I'm more concerned about what the new semantics will be","date":"2016-11-18T20:48:46.942Z","type":"message"}
{"nick":"creationix","message":"currently it is either a single file or a single tree","date":"2016-11-18T20:48:54.716Z","type":"message"}
{"nick":"dtzWill","date":"2016-11-18T20:49:13.286Z","type":"join"}
{"nick":"dtzWill","message":"o/","date":"2016-11-18T20:49:14.669Z","type":"message"}
{"nick":"creationix","message":"hi will","date":"2016-11-18T20:49:23.158Z","type":"message"}
{"nick":"grncdr","message":"ðŸ‘‹","date":"2016-11-18T20:49:25.831Z","type":"message"}
{"nick":"creationix","message":"dtzWill http://logs.nodejs.org/luvit/latest","date":"2016-11-18T20:49:56.190Z","type":"message"}
{"nick":"dtzWill","message":"haha yep, looking at them presently (áµ”á´¥áµ”)","date":"2016-11-18T20:50:10.373Z","type":"message"}
{"nick":"creationix","message":"oh, I forgot I put a link in the topic.  that's handy","date":"2016-11-18T20:50:31.657Z","type":"message"}
{"nick":"dtzWill","message":":D","date":"2016-11-18T20:50:35.429Z","type":"message"}
{"nick":"grncdr","message":"ok so... can you do things like require(\"that-package/lib/whatever\") ?","date":"2016-11-18T20:50:54.365Z","type":"message"}
{"nick":"creationix","message":"grncdr right, the require semantics are very close to node's algorithm","date":"2016-11-18T20:51:11.156Z","type":"message"}
{"nick":"grncdr","message":"ok so! I'll talk a bit about what I did before","date":"2016-11-18T20:51:47.978Z","type":"message"}
{"nick":"creationix","message":"there is relative requires and package requires that look in the ./deps/$foo ../deps/$foo ../../deps/$foo, etc","date":"2016-11-18T20:51:48.495Z","type":"message"}
{"nick":"grncdr","message":"well not yet actually, I have more questions... :P","date":"2016-11-18T20:52:09.091Z","type":"message"}
{"nick":"creationix","message":"I'm willing to change semantics a bit if it helps","date":"2016-11-18T20:52:20.275Z","type":"message"}
{"nick":"grncdr","message":"do you try and dedupe compatible versions?","date":"2016-11-18T20:52:30.927Z","type":"message"}
{"nick":"creationix","message":"lua already has it's own require system that is extensible, but not enough","date":"2016-11-18T20:52:34.407Z","type":"message"}
{"nick":"creationix","message":"grncdr lit doesn't dedupe automatically","date":"2016-11-18T20:52:42.810Z","type":"message"}
{"nick":"creationix","message":"err, I mean it doesn't do deep trees automatically","date":"2016-11-18T20:52:56.146Z","type":"message"}
{"nick":"grncdr","message":"ok that's kind of nice","date":"2016-11-18T20:52:57.521Z","type":"message"}
{"nick":"creationix","message":"lit assumes you have no conflicts and puts all deep dependencies in a single flat tree at ./deps/","date":"2016-11-18T20:53:21.441Z","type":"message"}
{"nick":"grncdr","message":"ah, so no `lit_modules/child/lit_modules/child` ?","date":"2016-11-18T20:53:22.670Z","type":"message"}
{"nick":"grncdr","message":"nice nice","date":"2016-11-18T20:53:31.500Z","type":"message"}
{"nick":"creationix","message":"not automatically, but require supports it","date":"2016-11-18T20:53:36.939Z","type":"message"}
{"nick":"grncdr","message":"got it","date":"2016-11-18T20:53:41.873Z","type":"message"}
{"nick":"dtzWill","message":"(there's lots of interesting ways to do dedup--syntactic equivalence as a start and moving upwards--depending on what you're looking for)","date":"2016-11-18T20:53:46.288Z","type":"message"}
{"nick":"creationix","message":"or rather, my require replacement","date":"2016-11-18T20:53:47.575Z","type":"message"}
{"nick":"creationix","message":"lua's require is based on global system paths","date":"2016-11-18T20:53:57.859Z","type":"message"}
{"nick":"dtzWill","message":"but without knowing more about the domain I'd imagine there's a natural granularity for such :)","date":"2016-11-18T20:53:59.085Z","type":"message"}
{"nick":"creationix","message":"dtzWill personally, I'd like it very granular","date":"2016-11-18T20:54:28.102Z","type":"message"}
{"nick":"grncdr","message":"ok super good then :)","date":"2016-11-18T20:54:48.384Z","type":"message"}
{"nick":"creationix","message":"when I was designing a greenfield programming language I had a really nice system where each function was a \"package\" of sorts","date":"2016-11-18T20:54:48.642Z","type":"message"}
{"nick":"grncdr","message":"was this Jack? (I think you might have renamed it at some point?) ^","date":"2016-11-18T20:55:12.722Z","type":"message"}
{"nick":"creationix","message":"I don't remember if that one was jack syntax","date":"2016-11-18T20:55:36.342Z","type":"message"}
{"nick":"creationix","message":"I've got several new languages in addition to jack aimed more at embedded","date":"2016-11-18T20:55:48.462Z","type":"message"}
{"nick":"dtzWill","message":"FWIW my current ambitious endeavor is exploring this sort of idea across an entire system (where system==commodity OS, like linux/freebsd)--as an important part of a project I'm leading called \"ALLVM\"-- creating a system where everything is available as LLVM IR","date":"2016-11-18T20:56:03.606Z","type":"message"}
{"nick":"dtzWill","message":"(for great justice)","date":"2016-11-18T20:56:07.927Z","type":"message"}
{"nick":"creationix","message":"dtzWill is there a single IR layer in llvm?","date":"2016-11-18T20:56:37.446Z","type":"message"}
{"nick":"creationix","message":"and is it portable?","date":"2016-11-18T20:56:42.425Z","type":"message"}
{"nick":"dtzWill","message":"and so things like content-addressable and flexible granularity are things I have lots of notes on O:)","date":"2016-11-18T20:56:49.151Z","type":"message"}
{"nick":"creationix","message":"now with luvit, we have luajit bytecode.  That's pretty portable","date":"2016-11-18T20:56:59.823Z","type":"message"}
{"nick":"dtzWill","message":"well there' mostly a single primary IR layer, but it's not what I'd call portable (not arch-indep for sure)","date":"2016-11-18T20:57:28.932Z","type":"message"}
{"nick":"creationix","message":"let me see if I can find a link to the system I designed","date":"2016-11-18T20:58:17.095Z","type":"message"}
{"nick":"dtzWill","message":"in fact I'm much mre interested in the ideas and challenges than LLVM per-se--honestly LLVM IR itself is more of a convenient temporary solution we're using while putting this together and showing why it's such a useful way to do things","date":"2016-11-18T20:58:19.662Z","type":"message"}
{"nick":"dtzWill","message":"(and iff we're successful we can get folks working on a better format, was my plan)","date":"2016-11-18T20:58:43.854Z","type":"message"}
{"nick":"creationix","message":"webasm could be another target","date":"2016-11-18T20:58:52.346Z","type":"message"}
{"nick":"creationix","message":"I believe it's portable since it's meant to be run in any browser unmodified","date":"2016-11-18T20:59:11.627Z","type":"message"}
{"nick":"grncdr","message":"creationix: so my previous experience was with JS (or anything that could compile to it...)","date":"2016-11-18T20:59:22.901Z","type":"message"}
{"nick":"dtzWill","message":"but since there's so much code that exists as LLVM IR at some point in its lifetime, it's a useful format to show how powerful this can be (and how much better systems can be if we free ourselves from things like ... file-based resolution and ELF and such)","date":"2016-11-18T20:59:37.135Z","type":"message"}
{"nick":"dtzWill","message":"creationix: yeah webasm is compelling in that regard--and yep I've spoken with them and basically it has the other problem","date":"2016-11-18T20:59:58.630Z","type":"message"}
{"nick":"grncdr","message":"I built a system that stored & linked together modules (not packages) out of IPFS","date":"2016-11-18T21:00:05.157Z","type":"message"}
{"nick":"dtzWill","message":"it's a solid distribution format but a lot less analyzable/useful for the sort of compiler-y things I'd like to see happen","date":"2016-11-18T21:00:21.003Z","type":"message"}
{"nick":"creationix","message":"grncdr so the file/module was the unit of granularity?","date":"2016-11-18T21:00:27.232Z","type":"message"}
{"nick":"grncdr","message":"yes","date":"2016-11-18T21:00:34.190Z","type":"message"}
{"nick":"grncdr","message":"and a (really crappy) editor that let you edit code / jump between modules and introduce new versions","date":"2016-11-18T21:00:43.863Z","type":"message"}
{"nick":"dtzWill","message":"haha :D awesome","date":"2016-11-18T21:01:02.590Z","type":"message"}
{"nick":"creationix","message":"grncdr that's the part I'm interested in.  How do you describe links/dependencies","date":"2016-11-18T21:01:10.991Z","type":"message"}
{"nick":"grncdr","message":"this was a commonjs style module, so the unit of granularity was really a function scope","date":"2016-11-18T21:01:12.102Z","type":"message"}
{"nick":"creationix","message":"hashes are opaque and a pain to update","date":"2016-11-18T21:01:14.994Z","type":"message"}
{"nick":"grncdr","message":"yes, this is hard","date":"2016-11-18T21:01:32.725Z","type":"message"}
{"nick":"creationix","message":"though I guess ipfs gives you path-based resolution","date":"2016-11-18T21:01:37.357Z","type":"message"}
{"nick":"grncdr","message":"so the main thing is if you're willing to accept _any_ centralized points of failure","date":"2016-11-18T21:01:59.247Z","type":"message"}
{"nick":"grncdr","message":"although, IPFS has gotten quite a few new features since I did this","date":"2016-11-18T21:02:23.167Z","type":"message"}
{"nick":"creationix","message":"ideally I'd like a system where I can describe dependencies using semver or something symbolic that can resolve to a hash tree at any point in time.  But I also want to be able to snapshot a concrete dependency tree","date":"2016-11-18T21:02:44.275Z","type":"message"}
{"nick":"dtzWill","message":"(did y'all see https://github.com/whyrusleeping/gx ?)","date":"2016-11-18T21:02:54.622Z","type":"message"}
{"nick":"grncdr","message":"ah yes, gx is pretty nice","date":"2016-11-18T21:03:11.179Z","type":"message"}
{"nick":"dtzWill","message":"and I'd like to reiterate the pointer to systems like Nix (and Guix) in terms of expressing dependencies and using a hashed store and whatnot","date":"2016-11-18T21:03:26.679Z","type":"message"}
{"nick":"creationix","message":"the reproducible builds of nix is really nice","date":"2016-11-18T21:04:14.417Z","type":"message"}
{"nick":"creationix","message":"with lit I have a somewhat nice compromise.  Dependencies are declared as name + semver","date":"2016-11-18T21:04:39.113Z","type":"message"}
{"nick":"grncdr","message":"any sort of lockfile mechanism?","date":"2016-11-18T21:05:02.097Z","type":"message"}
{"nick":"creationix","message":"but when you publish anything that depends on other packages, it will take a snapshot of the current dependency tree and store that as well in the package metadata","date":"2016-11-18T21:05:10.752Z","type":"message"}
{"nick":"creationix","message":"and in lit you can publish apps and libraries","date":"2016-11-18T21:05:19.399Z","type":"message"}
{"nick":"dtzWill","message":"oh okay so you perhaps have a bit more control/sanity in terms of some of the versioning challenges (Which is easier in some ways, but harder in others hehe)","date":"2016-11-18T21:05:29.173Z","type":"message"}
{"nick":"dtzWill","action":"listens","date":"2016-11-18T21:05:32.514Z","type":"action"}
{"nick":"creationix","message":"if you do `lit install creationix/luvit` it will look for the latest luvit release and it's frozen tree of hashes","date":"2016-11-18T21:05:39.100Z","type":"message"}
{"nick":"creationix","message":"so basically, dynamic resolution from symbolic versions to concrete hashes is done at publish time and the snapshot is used at install time","date":"2016-11-18T21:06:21.491Z","type":"message"}
{"nick":"creationix","message":"and it's deep, not recursive.  I don't have to wait for deep dependencies to republish to get updated to their dependencies","date":"2016-11-18T21:06:41.410Z","type":"message"}
{"nick":"creationix","message":"if that makes sense","date":"2016-11-18T21:07:11.262Z","type":"message"}
{"nick":"grncdr","message":"I think so","date":"2016-11-18T21:07:48.252Z","type":"message"}
{"nick":"creationix","message":"so if you know npm's shrinkwrap feature, lit does this by default for applications, but stays fluid for libraries","date":"2016-11-18T21:08:26.972Z","type":"message"}
{"nick":"dtzWill","message":"a deps on b (a -> b), b -> c, you wanna be able to bump c and use the new version in a without needing 'b' to be changed/republished/processed?","date":"2016-11-18T21:08:38.405Z","type":"message"}
{"nick":"creationix","message":"the app developer is responsible to test their dependency tree when publishing","date":"2016-11-18T21:08:41.265Z","type":"message"}
{"nick":"dtzWill","message":"i guess basically the different between a-> (b->c) vs a->{b,c}","date":"2016-11-18T21:08:56.721Z","type":"message"}
{"nick":"creationix","message":"dtzWill correct.  my current systems has that","date":"2016-11-18T21:08:58.821Z","type":"message"}
{"nick":"creationix","message":"my problem is that the actual runtime implementation depends on lit dumping the files to the disk in a folder","date":"2016-11-18T21:09:12.560Z","type":"message"}
{"nick":"creationix","message":"and hoping there are no name or version conflicts","date":"2016-11-18T21:09:18.700Z","type":"message"}
{"nick":"grncdr","message":"it sounds like you're very close to having everything in a CAS anyways","date":"2016-11-18T21:09:25.238Z","type":"message"}
{"nick":"creationix","message":"right, I just need to design semantics for an alternative require that pulls directly from the local db","date":"2016-11-18T21:09:47.457Z","type":"message"}
{"nick":"creationix","message":"it can even pull down hashes on-demand and cache them","date":"2016-11-18T21:09:54.994Z","type":"message"}
{"nick":"dtzWill","message":"neat! obviously that's only possible in worlds where you can do things like what you're describing--fair part of my ALLVM project is bringing that sort of sanity to 'native' software :)","date":"2016-11-18T21:09:58.923Z","type":"message"}
{"nick":"grncdr","message":"yeah, so at runtime, you need to resolve names to hashes","date":"2016-11-18T21:10:00.820Z","type":"message"}
{"nick":"dtzWill","message":"mmhmm","date":"2016-11-18T21:10:08.799Z","type":"message"}
{"nick":"grncdr","message":"in my system a module was an object containing hashes","date":"2016-11-18T21:10:21.794Z","type":"message"}
{"nick":"creationix","message":"maybe I could have a command to manually take a snapshot and store it in a file","date":"2016-11-18T21:10:37.138Z","type":"message"}
{"nick":"creationix","message":"instead of dumping files, dump a single file with mapping of paths to hashes","date":"2016-11-18T21:10:53.213Z","type":"message"}
{"nick":"grncdr","message":"the structure was roughly { source: $hash1, deps: { dep1: $hash2, dep3: $hash4 } }","date":"2016-11-18T21:10:57.601Z","type":"message"}
{"nick":"creationix","message":"yeah, something like that","date":"2016-11-18T21:11:11.270Z","type":"message"}
{"nick":"dtzWill","message":"just like a nix derivation (.drv) file! lol O:)","date":"2016-11-18T21:11:21.233Z","type":"message"}
{"nick":"creationix","message":"I would love to be able to do `lit run $hash` and just run that hash as an app","date":"2016-11-18T21:11:40.340Z","type":"message"}
{"nick":"creationix","message":"or create a tiny unix file with that in the shebang","date":"2016-11-18T21:11:55.975Z","type":"message"}
{"nick":"dtzWill","message":"not at all saying Nix does everything you want, but often useful to learn from other things to steal their good ideas :D ;)","date":"2016-11-18T21:11:57.671Z","type":"message"}
{"nick":"grncdr","message":"when the source pointed at by $hash1 was loaded, it would be evaluated in a scope where `dep1` was a reference to the already loaded $hash2","date":"2016-11-18T21:12:04.040Z","type":"message"}
{"nick":"dtzWill","message":"haha, like nix-shell! O:)","date":"2016-11-18T21:12:04.812Z","type":"message"}
{"nick":"creationix","message":"the dependency graph can be the body of the script","date":"2016-11-18T21:12:04.914Z","type":"message"}
{"nick":"dtzWill","message":"well kinda not like Nix too O:)","date":"2016-11-18T21:12:23.494Z","type":"message"}
{"nick":"creationix","message":"I had a friend that works at nix, I should look closer at what they do","date":"2016-11-18T21:12:29.015Z","type":"message"}
{"nick":"creationix","message":"currently in luvit / lit apps are just the luvi binary + a zip file containing the app and all dependencies","date":"2016-11-18T21:12:52.737Z","type":"message"}
{"nick":"grncdr","message":"there were some other neat features (compilers...) but I think compile-to-lua languages are a bit less common than for JS?","date":"2016-11-18T21:12:53.274Z","type":"message"}
{"nick":"dtzWill","message":"creationix: /perfect/, it's hard to understand/get into at first in my experience, and someone who knows you well AND knows Nix can probably get you the parts that are useful to you fastest :)","date":"2016-11-18T21:12:58.723Z","type":"message"}
{"nick":"creationix","message":"I have a feature where you can have a shebang line pointing to luvi followed by the zip","date":"2016-11-18T21:13:12.953Z","type":"message"}
{"nick":"dtzWill","message":"this is a fantastic opportunity for me to revive my project to make a lua backend for LLVM lol","date":"2016-11-18T21:13:34.536Z","type":"message"}
{"nick":"dtzWill","message":"and by revive I mean \"start it, for real this time\"","date":"2016-11-18T21:13:43.616Z","type":"message"}
{"nick":"creationix","message":"grncdr right, there is moonscript (coffeescript for lua), but it's not that popular","date":"2016-11-18T21:13:45.223Z","type":"message"}
{"nick":"dtzWill","action":"seriously looked at luajit as the base of things previously","date":"2016-11-18T21:13:55.341Z","type":"action"}
{"nick":"creationix","message":"one interesting thing is lua has first-class support for bytecode","date":"2016-11-18T21:14:00.539Z","type":"message"}
{"nick":"creationix","message":"you can load lua source or bytecode that it runs either wahy","date":"2016-11-18T21:14:11.493Z","type":"message"}
{"nick":"creationix","message":"I've seriously considered making my homegrown languages emit luajit bytecode, but it forced my semantics to become too lua like","date":"2016-11-18T21:14:46.520Z","type":"message"}
{"nick":"dtzWill","message":"mostly I was going to do it because I really couldn't understand why no one even really tried--I mean with empscripten and whatnot... and LLVM's JIT is ... well let's just say the famous LuaJIT could probably do some neat things :)","date":"2016-11-18T21:14:49.498Z","type":"message"}
{"nick":"grncdr","message":"yeah, so you would probably want 2 pointers, $sourceHash & $bytecodeHash","date":"2016-11-18T21:14:53.547Z","type":"message"}
{"nick":"dtzWill","message":"(is source -> bytecode not a deterministic process?)","date":"2016-11-18T21:15:11.105Z","type":"message"}
{"nick":"creationix","message":"now I also need the ability to run from a folder for dev mode","date":"2016-11-18T21:15:26.205Z","type":"message"}
{"nick":"dtzWill","message":"(at least when parameterized by like, compiler version or something? O:))","date":"2016-11-18T21:15:36.204Z","type":"message"}
{"nick":"creationix","message":"with a mix of local dependencies and interned dependencies","date":"2016-11-18T21:15:40.143Z","type":"message"}
{"nick":"dtzWill","message":"hehe :D","date":"2016-11-18T21:15:54.303Z","type":"message"}
{"nick":"grncdr","message":"so you implement your own `require` that does the node thing of \"if path starts with a `.` resolve as a relative file\" right?","date":"2016-11-18T21:16:18.148Z","type":"message"}
{"nick":"creationix","message":"with luvi we've solved that pretty well.  You can have files in a folder or a zip file or appended to luvit itself.  It runs the same","date":"2016-11-18T21:16:20.347Z","type":"message"}
{"nick":"creationix","message":"grncdr right","date":"2016-11-18T21:16:30.601Z","type":"message"}
{"nick":"creationix","message":"but if there are no paths anymore, I'm not sure what that would mean","date":"2016-11-18T21:16:44.304Z","type":"message"}
{"nick":"grncdr","message":"well, there are paths in dev mode","date":"2016-11-18T21:16:56.598Z","type":"message"}
{"nick":"dtzWill","message":"naming is a challenge, indeed","date":"2016-11-18T21:17:05.124Z","type":"message"}
{"nick":"dtzWill","message":"oh errm. hmm.","date":"2016-11-18T21:17:07.808Z","type":"message"}
{"nick":"creationix","message":"right, and I don't want to have to update my paths to hashes when I publish","date":"2016-11-18T21:17:14.576Z","type":"message"}
{"nick":"grncdr","message":"and if you were using e.g. IPFS, you can have relative paths trivially","date":"2016-11-18T21:17:15.682Z","type":"message"}
{"nick":"creationix","message":"not manually at least","date":"2016-11-18T21:17:19.223Z","type":"message"}
{"nick":"grncdr","message":"like, I was using the unixfs stuff in IPFS","date":"2016-11-18T21:17:59.798Z","type":"message"}
{"nick":"creationix","message":"makes sense","date":"2016-11-18T21:18:11.770Z","type":"message"}
{"nick":"grncdr","message":"(for the `source` and in your case `bytecode` hashes)","date":"2016-11-18T21:18:38.636Z","type":"message"}
{"nick":"grncdr","message":"so the only place you need symbolic mapping is non-relative package names","date":"2016-11-18T21:19:24.880Z","type":"message"}
{"nick":"grncdr","message":"the stuff that would be resolved out of `./deps` now","date":"2016-11-18T21:19:40.472Z","type":"message"}
{"nick":"dtzWill","message":"(relative packages == named by relative path from source?)","date":"2016-11-18T21:20:02.138Z","type":"message"}
{"nick":"creationix","message":"yeah, I guess relative requires could work within a multi-file package","date":"2016-11-18T21:20:09.023Z","type":"message"}
{"nick":"grncdr","message":"yes","date":"2016-11-18T21:20:09.434Z","type":"message"}
{"nick":"dtzWill","message":"(ty)","date":"2016-11-18T21:20:19.235Z","type":"message"}
{"nick":"grncdr","message":"creationix: I _might_ have some of the JS I wrote for this project _somewhere_ but no guarantees it even works","date":"2016-11-18T21:20:54.192Z","type":"message"}
{"nick":"grncdr","message":"the whole project was eaten by hubris :P","date":"2016-11-18T21:21:01.858Z","type":"message"}
{"nick":"creationix","message":"grncdr that's fine.  I'm more worried about the semantics than actual implementation","date":"2016-11-18T21:21:16.356Z","type":"message"}
{"nick":"grncdr","message":"yeah, you're familiar enough with how node & browser bundlers work that you can fill in the blanks I think :)","date":"2016-11-18T21:21:49.335Z","type":"message"}
{"nick":"dtzWill","message":"aw man, well said grncdr O:)","date":"2016-11-18T21:22:01.060Z","type":"message"}
{"nick":"grncdr","message":"dtzWill: quite literally, I made it self-hosting too soon, stopped working on it for a couple of months, all the hashes were expired from IPFS :P","date":"2016-11-18T21:22:34.832Z","type":"message"}
{"nick":"dtzWill","message":"and I'm /not/ particularly familiar with some of the systems y'all are talking about but I would say that indeed most of the challenge is sorting out a consistent set of desirable behavior","date":"2016-11-18T21:22:44.397Z","type":"message"}
{"nick":"dtzWill","message":"grncdr: lmao, I, uh, am definitely not stalling in the wake of my self-hosting blitz","date":"2016-11-18T21:23:01.706Z","type":"message"}
{"nick":"dtzWill","message":"certainly not! O:)","date":"2016-11-18T21:23:08.034Z","type":"message"}
{"nick":"creationix","message":"exactly","date":"2016-11-18T21:23:11.550Z","type":"message"}
{"nick":"grncdr","message":":)","date":"2016-11-18T21:23:14.018Z","type":"message"}
{"nick":"grncdr","message":"creationix: does lit use a registry?","date":"2016-11-18T21:23:23.830Z","type":"message"}
{"nick":"creationix","message":"for history, here was the last attempt at adding relative requires to lua's native require https://github.com/luvit/luvit/pull/932","date":"2016-11-18T21:23:25.000Z","type":"message"}
{"nick":"creationix","message":"tl;dr, it's impossible","date":"2016-11-18T21:23:31.206Z","type":"message"}
{"nick":"APNG","message":"creationix, is there any way I can get normal require in luvit 2.x?","date":"2016-11-18T21:23:38.088Z","type":"message"}
{"nick":"creationix","message":"grncdr it does","date":"2016-11-18T21:23:45.787Z","type":"message"}
{"nick":"creationix","message":"APNG it should fall back to native require","date":"2016-11-18T21:23:53.997Z","type":"message"}
{"nick":"dtzWill","message":"but mostly I'm happy with what I ahve and see lots of possibilities.. just need to pick a few and march on O:)","date":"2016-11-18T21:24:04.529Z","type":"message"}
{"nick":"dtzWill","action":"reads","date":"2016-11-18T21:24:05.493Z","type":"action"}
{"nick":"creationix","message":"APNG: also if you use luvi directly instead of luvit, it doesn't replace require","date":"2016-11-18T21:24:11.976Z","type":"message"}
{"nick":"creationix","message":"grncdr the registry is namespaced to github usernames.  People authenticate with their private ssh keys","date":"2016-11-18T21:24:44.308Z","type":"message"}
{"nick":"creationix","message":"the server itself is just a copy of lit running in server mode, the database is identical","date":"2016-11-18T21:25:00.238Z","type":"message"}
{"nick":"APNG","message":"creationix, well any way to fallback to bastardized require instead?","date":"2016-11-18T21:25:01.316Z","type":"message"}
{"nick":"creationix","message":"APNG what are you trying to do?  I think _G.require is the real one in luvit 2.x","date":"2016-11-18T21:25:20.703Z","type":"message"}
{"nick":"creationix","message":"the replacement require is a local variable in the created closure","date":"2016-11-18T21:25:31.664Z","type":"message"}
{"nick":"APNG","message":"creationix, well I wanna be able to return a module","date":"2016-11-18T21:25:35.688Z","type":"message"}
{"nick":"creationix","message":"grncdr https://luvit.io/lit.html","date":"2016-11-18T21:26:17.854Z","type":"message"}
{"nick":"creationix","message":"so currently, packages declare dependencies with name and semver combo just like npm.  Except all packages are namespaced","date":"2016-11-18T21:26:41.942Z","type":"message"}
{"nick":"creationix","message":"plus the extra snapshot I mentioned before that is used when deploying/building an app (vs depending on a library)","date":"2016-11-18T21:27:11.187Z","type":"message"}
{"nick":"creationix","message":"For example, here is the metadata for the luvit CLI tool itself https://lit.luvit.io/packages/luvit/luvit/latest","date":"2016-11-18T21:29:48.128Z","type":"message"}
{"nick":"creationix","message":"the \"snapshot\" property is a literal git tree hash","date":"2016-11-18T21:29:59.951Z","type":"message"}
{"nick":"creationix","message":"(lit's db uses git compatible trees/tags/blobs for it's CAS)","date":"2016-11-18T21:30:15.625Z","type":"message"}
{"nick":"APNG","message":"creationix, you know, with `return M` and stuff","date":"2016-11-18T21:30:15.711Z","type":"message"}
{"nick":"creationix","message":"APNG luvit's require supports returning a module","date":"2016-11-18T21:30:28.549Z","type":"message"}
{"nick":"APNG","message":"creationix, I also wanna be able to do package.loaded[...] = M at the top of my module (allows cyclic requires)","date":"2016-11-18T21:30:32.551Z","type":"message"}
{"nick":"dtzWill","message":"haha okay that's super cool that it actually creates git tree hashes","date":"2016-11-18T21:30:40.859Z","type":"message"}
{"nick":"APNG","message":"creationix, in other words I wanna be able to use normal lua cyclic modules in luvit","date":"2016-11-18T21:31:08.698Z","type":"message"}
{"nick":"creationix","message":"dtzWill I publish a backup of the database to github","date":"2016-11-18T21:31:11.562Z","type":"message"}
{"nick":"creationix","message":"speaking of, I should update that","date":"2016-11-18T21:31:13.414Z","type":"message"}
{"nick":"dtzWill","message":"hahaha, brilliant! :D","date":"2016-11-18T21:31:25.167Z","type":"message"}
{"nick":"dtzWill","message":"honestly it's a pretty great storage format for a lot of things... and yay free backup","date":"2016-11-18T21:31:48.530Z","type":"message"}
{"nick":"grncdr","message":"creationix: you've mentioned a couple of times that your concern is with semantics, do you have any specific worries?","date":"2016-11-18T21:32:11.025Z","type":"message"}
{"nick":"creationix","message":"new backup pushed! https://github.com/luvit/lit-backup","date":"2016-11-18T21:32:15.743Z","type":"message"}
{"nick":"creationix","message":"though since everything is a git tag pointing directly to a git tree, github's UI doesn't allow browsing","date":"2016-11-18T21:32:33.272Z","type":"message"}
{"nick":"creationix","message":"APNG I think you'll be happier using luv with normal lua","date":"2016-11-18T21:33:42.688Z","type":"message"}
{"nick":"creationix","message":"or at least making a luvi based app directly and not using luvit","date":"2016-11-18T21:33:51.347Z","type":"message"}
{"nick":"creationix","message":"luvit has a lot of conventions that make it hard to mix in lua packages from the greater ecosystem","date":"2016-11-18T21:34:10.872Z","type":"message"}
{"nick":"creationix","message":"I'm trying to fix this in luvit 3.x, but it doesn't seem possible without dropping luvit style requires entirely","date":"2016-11-18T21:34:34.590Z","type":"message"}
{"nick":"APNG","message":"creationix, uh","date":"2016-11-18T21:34:43.126Z","type":"message"}
{"nick":"creationix","message":"(thus the desire to make an alternative system)","date":"2016-11-18T21:34:43.392Z","type":"message"}
{"nick":"APNG","message":"you could wrap require such that it does some name mangling before calling the native require","date":"2016-11-18T21:34:57.897Z","type":"message"}
{"nick":"creationix","message":"APNG luvit require doesn't call native require at all (unless there is no match found)","date":"2016-11-18T21:35:29.751Z","type":"message"}
{"nick":"creationix","message":"it's got it's own cache apart from package.loaded","date":"2016-11-18T21:35:48.817Z","type":"message"}
{"nick":"APNG","message":"and that's stupid as it breaks lua modules","date":"2016-11-18T21:36:03.780Z","type":"message"}
{"nick":"APNG","message":"like luvirt","date":"2016-11-18T21:36:11.217Z","type":"message"}
{"nick":"creationix","message":"lua modules break libuv","date":"2016-11-18T21:36:18.499Z","type":"message"}
{"nick":"APNG","message":"how?","date":"2016-11-18T21:36:25.837Z","type":"message"}
{"nick":"creationix","message":"anything that does sync I/O will break the event loop","date":"2016-11-18T21:36:27.271Z","type":"message"}
{"nick":"creationix","message":"originally I made it incompatible on purpose","date":"2016-11-18T21:36:36.776Z","type":"message"}
{"nick":"creationix","message":"to avoid such problems","date":"2016-11-18T21:36:40.929Z","type":"message"}
{"nick":"APNG","message":"you do realize lua require doesn't actually do sync I/O right?","date":"2016-11-18T21:37:07.433Z","type":"message"}
{"nick":"creationix","message":"require is a process startup thing, sync is fine","date":"2016-11-18T21:37:26.435Z","type":"message"}
{"nick":"creationix","message":"I'm talking about some DB driver blocking the main thread while waiting for postgresql to return a result","date":"2016-11-18T21:37:42.138Z","type":"message"}
{"nick":"APNG","message":"no I mean you do realize the sync I/O is in the loader, not in require itself, right?","date":"2016-11-18T21:37:49.167Z","type":"message"}
{"nick":"creationix","message":"and your entire high-performance webserver comes to a screaching halt.","date":"2016-11-18T21:38:03.803Z","type":"message"}
{"nick":"APNG","message":"so just replace the loader","date":"2016-11-18T21:38:04.176Z","type":"message"}
{"nick":"APNG","message":"or searcher, w/e it's called in luajit","date":"2016-11-18T21:38:18.044Z","type":"message"}
{"nick":"creationix","message":"I'm not worried about sync require","date":"2016-11-18T21:38:20.759Z","type":"message"}
{"nick":"creationix","message":"I'm worried about loading libraries that block on I/O later","date":"2016-11-18T21:38:31.014Z","type":"message"}
{"nick":"APNG","message":"oh","date":"2016-11-18T21:38:46.168Z","type":"message"}
{"nick":"APNG","message":"tried replacing the native iolib?","date":"2016-11-18T21:38:53.068Z","type":"message"}
{"nick":"dtzWill","message":"alright awesome stuff I gotta run, hope you don't mind if I lurk, look forward to seeing where this goes and chatting about it some more :).  Thanks folks! o/","date":"2016-11-18T21:39:05.109Z","type":"message"}
{"nick":"creationix","message":"dtzWill thanks","date":"2016-11-18T21:39:13.994Z","type":"message"}
{"nick":"creationix","message":"APNG did you see this? https://luvit.io/blog/pure-luv.html","date":"2016-11-18T21:39:20.575Z","type":"message"}
{"nick":"APNG","message":"https://github.com/SoniEx2/Luva/blob/master/src/liolib.lua","date":"2016-11-18T21:39:22.215Z","type":"message"}
{"nick":"creationix","message":"I explicitly made this path for people wanting to mix with luarocks","date":"2016-11-18T21:39:37.620Z","type":"message"}
{"nick":"APNG","message":"(that repo is awful btw, https://github.com/SoniEx2/Luva/blob/master/src/Makefile )","date":"2016-11-18T21:39:43.768Z","type":"message"}
{"nick":"dtzWill","message":"i know I have a stack of references that'd be interesting somewhere, but not finding them immediately.  Will see if can't turn them up :)","date":"2016-11-18T21:39:56.635Z","type":"message"}
{"nick":"creationix","message":"APNG I suppose you could replace the standard I/O stack with something coroutine based so that blocking APIs could be using inside a coroutine without blocking the main thread","date":"2016-11-18T21:40:36.892Z","type":"message"}
{"nick":"creationix","message":"but not all third-party I/O is extensible.","date":"2016-11-18T21:40:55.323Z","type":"message"}
{"nick":"APNG","message":"creationix, I know a Minecraft mod that does that","date":"2016-11-18T21:41:19.601Z","type":"message"}
{"nick":"creationix","message":"grncdr I don't have concerns per se. I'm just trying to understand the scope how it would work","date":"2016-11-18T21:41:40.337Z","type":"message"}
{"nick":"APNG","message":"uh, yeah... that MC mod doesn't let you do native code... :P","date":"2016-11-18T21:41:41.910Z","type":"message"}
{"nick":"creationix","message":"grncdr I have a crazy idea.  What if there was a way to overlay git hashes onto the fs used by the require system","date":"2016-11-18T21:43:33.973Z","type":"message"}
{"nick":"creationix","message":"it would still be path based, but I could overlay immutable trees (like the dependency snapshot already published)","date":"2016-11-18T21:43:55.306Z","type":"message"}
{"nick":"APNG","message":"creationix, how well does luvit handle graph-based filesystems?","date":"2016-11-18T21:44:26.368Z","type":"message"}
{"nick":"APNG","message":"(e.g. hardlinks)","date":"2016-11-18T21:44:33.939Z","type":"message"}
{"nick":"APNG","message":"(to directories*)","date":"2016-11-18T21:44:44.042Z","type":"message"}
{"nick":"creationix","message":"APNG fine I would assume","date":"2016-11-18T21:44:46.737Z","type":"message"}
{"nick":"grncdr","message":"I actually did something like this in an alternate npm once ^","date":"2016-11-18T21:44:54.271Z","type":"message"}
{"nick":"creationix","message":"that's more a libuv or linux question","date":"2016-11-18T21:44:56.789Z","type":"message"}
{"nick":"APNG","message":"creationix, linux doesn't have them","date":"2016-11-18T21:45:07.324Z","type":"message"}
{"nick":"creationix","message":"grncdr this is basically how docker containers are setup right?","date":"2016-11-18T21:45:11.905Z","type":"message"}
{"nick":"creationix","message":"dependencies are snapshotted and layered under mutable or local fs","date":"2016-11-18T21:45:23.050Z","type":"message"}
{"nick":"APNG","message":"I'm not talking about linux","date":"2016-11-18T21:45:27.823Z","type":"message"}
{"nick":"grncdr","message":"no idea, I've thus far avoided peaking under the hood of docker","date":"2016-11-18T21:45:28.584Z","type":"message"}
{"nick":"APNG","message":"just graph-based FS in general","date":"2016-11-18T21:45:33.605Z","type":"message"}
{"nick":"creationix","message":"APNG luvit doesn't know anything about filesystems other than it's interaction with libuv","date":"2016-11-18T21:45:49.938Z","type":"message"}
{"nick":"creationix","message":"which uses posix APIs on unix","date":"2016-11-18T21:45:56.784Z","type":"message"}
{"nick":"APNG","message":"does libuv support virtual FS?","date":"2016-11-18T21:46:02.440Z","type":"message"}
{"nick":"creationix","message":"APNG nothing on top of what the OS provides","date":"2016-11-18T21:46:20.499Z","type":"message"}
{"nick":"APNG","message":"meh ok","date":"2016-11-18T21:46:27.527Z","type":"message"}
{"nick":"APNG","message":"how well does libuv handle graph-based FS then?","date":"2016-11-18T21:46:58.844Z","type":"message"}
{"nick":"APNG","message":"assuming a BSD with hardlinks to dirs","date":"2016-11-18T21:47:11.405Z","type":"message"}
{"nick":"creationix","message":"grncdr it's not the fine granularity I want, but it does make mapping with the fs easier","date":"2016-11-18T21:47:20.972Z","type":"message"}
{"nick":"grncdr","message":"creationix: the thing I made put all the source in one place, then filled `node_modules` with appropriate symlinks so packages would resolve.","date":"2016-11-18T21:47:32.253Z","type":"message"}
{"nick":"creationix","message":"grncdr that's one way to do it","date":"2016-11-18T21:47:48.978Z","type":"message"}
{"nick":"grncdr","message":"(it did some other gnarly stuff regarding semver that somehow made the above seem reasonable)","date":"2016-11-18T21:48:05.965Z","type":"message"}
{"nick":"creationix","message":"I'd love to go full graph, but then I need a dev workflow that's not fs based","date":"2016-11-18T21:48:10.576Z","type":"message"}
{"nick":"creationix","message":"as I know from my other experiments, that is hard","date":"2016-11-18T21:48:22.301Z","type":"message"}
{"nick":"grncdr","message":"yes :)","date":"2016-11-18T21:48:29.742Z","type":"message"}
{"nick":"grncdr","message":"very hard","date":"2016-11-18T21:48:35.591Z","type":"message"}
{"nick":"grncdr","message":"so my symlink hackery worked surprisingly well","date":"2016-11-18T21:48:46.750Z","type":"message"}
{"nick":"creationix","message":"dev tools are so much entrenched in text files in filesystems, it's riduclous","date":"2016-11-18T21:48:54.488Z","type":"message"}
{"nick":"grncdr","message":"at least, it wasn't the thing that killed that project","date":"2016-11-18T21:48:58.907Z","type":"message"}
{"nick":"APNG","message":"I hate trees","date":"2016-11-18T21:49:13.830Z","type":"message"}
{"nick":"creationix","message":"APNG libuv can't see hardlinks, they just look like duplicate data","date":"2016-11-18T21:49:36.764Z","type":"message"}
{"nick":"APNG","message":"they're so limited","date":"2016-11-18T21:49:40.589Z","type":"message"}
{"nick":"APNG","message":"creationix, meh","date":"2016-11-18T21:49:47.469Z","type":"message"}
{"nick":"APNG","message":":/","date":"2016-11-18T21:49:51.261Z","type":"message"}
{"nick":"creationix","message":"that's part of posix, nothing to do with luvit","date":"2016-11-18T21:49:52.560Z","type":"message"}
{"nick":"APNG","message":"creationix, ok it's fine if it just sees duplicate data","date":"2016-11-18T21:50:15.199Z","type":"message"}
{"nick":"grncdr","message":"creationix: one thing to consider when you have files on disk, people will edit them","date":"2016-11-18T21:50:25.257Z","type":"message"}
{"nick":"APNG","message":"but it doesn't track inodes to avoid infinite loops?","date":"2016-11-18T21:50:26.578Z","type":"message"}
{"nick":"creationix","message":"like I said, it should work as far as I know","date":"2016-11-18T21:50:27.492Z","type":"message"}
{"nick":"grncdr","message":"and their content becomes inconsistent with their known hashes","date":"2016-11-18T21:50:41.099Z","type":"message"}
{"nick":"APNG","message":"(or w/e the file-level \"UUIDs\" are called)","date":"2016-11-18T21:50:41.953Z","type":"message"}
{"nick":"creationix","message":"APNG no, I don't have algorithms that recursivly walk trees","date":"2016-11-18T21:50:57.215Z","type":"message"}
{"nick":"creationix","message":"grncdr yeah.  With git this is less of an issue since they are a royal pain to edit","date":"2016-11-18T21:51:28.110Z","type":"message"}
{"nick":"APNG","message":"ok","date":"2016-11-18T21:51:34.831Z","type":"message"}
{"nick":"APNG","message":"that sucks","date":"2016-11-18T21:51:38.926Z","type":"message"}
{"nick":"creationix","message":"the files are named by hash and the contents are deflated","date":"2016-11-18T21:51:40.226Z","type":"message"}
{"nick":"APNG","message":"because then everyone implements their own","date":"2016-11-18T21:51:44.585Z","type":"message"}
{"nick":"APNG","message":"so yeah >.<","date":"2016-11-18T21:51:52.527Z","type":"message"}
{"nick":"grncdr","message":"creationix: that's a nice impediment","date":"2016-11-18T21:52:12.185Z","type":"message"}
{"nick":"creationix","message":"APNG I have no idea what you're asking for.  Libuv provides low-level OS-level apis similar to posix","date":"2016-11-18T21:52:12.342Z","type":"message"}
{"nick":"APNG","message":"creationix, but not a way to visit every child of a directory?","date":"2016-11-18T21:52:46.904Z","type":"message"}
{"nick":"creationix","message":"grncdr and when I say deflated, I don't mean gzip, I mean raw deflate.  No system that I know of has out of the box tools for working with them.  Just APIS in zlib","date":"2016-11-18T21:52:58.435Z","type":"message"}
{"nick":"creationix","message":"APNG there is scandir, but you, the coder needs to write recursion if you want it","date":"2016-11-18T21:53:25.856Z","type":"message"}
{"nick":"creationix","message":"and stat does give you inodes so you can track them","date":"2016-11-18T21:53:34.423Z","type":"message"}
{"nick":"APNG","message":"creationix, but does anyone? :/","date":"2016-11-18T21:53:46.633Z","type":"message"}
{"nick":"creationix","message":"luvit hardly has users to begin with.  I've never heard of anyone writing that kind of code","date":"2016-11-18T21:54:20.768Z","type":"message"}
{"nick":"APNG","message":"I wish POSIX had high-level, object-oriented FS APIs","date":"2016-11-18T21:54:37.786Z","type":"message"}
{"nick":"creationix","message":"APNG sounds like a great library to write and publish to lit","date":"2016-11-18T21:54:42.398Z","type":"message"}
{"nick":"APNG","message":"no paths","date":"2016-11-18T21:55:09.001Z","type":"message"}
{"nick":"creationix","message":"then others can reuse your code and luvit's scope doesn't have to explode to support it","date":"2016-11-18T21:55:11.177Z","type":"message"}
{"nick":"creationix","message":"grncdr I've got to go work on other stuff, thanks for helping me think things through","date":"2016-11-18T21:55:46.003Z","type":"message"}
{"nick":"DarkGod","date":"2016-11-18T21:56:03.569Z","type":"join"}
{"nick":"grncdr","message":"creationix: I imagine that if you had a package-local mapping of `depname` to a hash, and keep only byte code in the \"object store\" you don't have to worry too much about the problem of people changing \"immutable\" data","date":"2016-11-18T21:56:29.278Z","type":"message"}
{"nick":"creationix","message":"APNG I don't wish posix had high-level APIs for things that almost nobody uses.  Then all implementations of posix would have that much more work to do","date":"2016-11-18T21:56:36.338Z","type":"message"}
{"nick":"APNG","message":"FSNode* root = get_root_node(); FSNode** children = get_children_nodes(root); FSNode* child = children[0]; etc","date":"2016-11-18T21:56:40.780Z","type":"message"}
{"nick":"creationix","message":"they expose the needed primitives to implement it yourself.  As does luvit","date":"2016-11-18T21:56:49.029Z","type":"message"}
{"nick":"APNG","message":"no idea if my C is correct tho","date":"2016-11-18T21:57:05.408Z","type":"message"}
{"nick":"creationix","message":"and lit even provides an easy way to publish and share your code so others can reuse it","date":"2016-11-18T21:57:11.440Z","type":"message"}
{"nick":"APNG","message":"ok","date":"2016-11-18T21:57:26.080Z","type":"message"}
{"nick":"creationix","message":"I'm sure it's a great interface for certain workloads","date":"2016-11-18T21:57:48.916Z","type":"message"}
{"nick":"creationix","message":"just not something that fits in luvit or libuv or posix","date":"2016-11-18T21:57:57.510Z","type":"message"}
{"nick":"grncdr","message":"then you would want some sort of \"checkout for development\" command that modifies (or overlays) the name->hash mapping to say \"actually name should be loaded from this directory over here\"","date":"2016-11-18T21:58:08.947Z","type":"message"}
{"nick":"creationix","message":"it's perfect for a library written on top","date":"2016-11-18T21:58:09.803Z","type":"message"}
{"nick":"creationix","message":"grncdr that could work","date":"2016-11-18T21:58:20.062Z","type":"message"}
{"nick":"creationix","message":"manual commands to start and leave dev mode is just fine","date":"2016-11-18T21:58:32.379Z","type":"message"}
{"nick":"APNG","message":"creationix, I mean the API I listed above would still allow you to loop on hardlinks...","date":"2016-11-18T21:58:36.377Z","type":"message"}
{"nick":"APNG","message":"it'd just not have any paths","date":"2016-11-18T21:58:44.099Z","type":"message"}
{"nick":"APNG","message":"no concept of a path","date":"2016-11-18T21:58:57.009Z","type":"message"}
{"nick":"APNG","message":"/ in file names","date":"2016-11-18T21:59:11.452Z","type":"message"}
{"nick":"grncdr","message":"creationix: yes, your \"publish\" action would then compile modified sources to new byte codes, hash that, and update the dependency pointer","date":"2016-11-18T21:59:32.879Z","type":"message"}
{"nick":"grncdr","message":"s/pointer/hash/","date":"2016-11-18T21:59:40.799Z","type":"message"}
{"nick":"creationix","message":"APNG all graphs have paths.  If you don't name the entries then it's just 1.4.3.12 where the numbers are indexes in the parents","date":"2016-11-18T21:59:41.681Z","type":"message"}
{"nick":"creationix","message":"grncdr oh, so replace git workflow","date":"2016-11-18T22:00:11.691Z","type":"message"}
{"nick":"creationix","message":"I could checkout a previously published project, edit it, and save it back to the graph","date":"2016-11-18T22:00:25.758Z","type":"message"}
{"nick":"grncdr","message":"yes","date":"2016-11-18T22:01:00.688Z","type":"message"}
{"nick":"grncdr","message":"but rather than say \"replace git\"","date":"2016-11-18T22:01:07.488Z","type":"message"}
{"nick":"creationix","message":"grncdr did you see my revision.studio project?","date":"2016-11-18T22:01:21.655Z","type":"message"}
{"nick":"grncdr","message":"I think it makes more sense to say \"publish packages more like git tags\"","date":"2016-11-18T22:01:22.619Z","type":"message"}
{"nick":"grncdr","message":"I don't think so","date":"2016-11-18T22:01:29.759Z","type":"message"}
{"nick":"creationix","message":"grncdr right and it can acually use git","date":"2016-11-18T22:01:30.951Z","type":"message"}
{"nick":"grncdr","message":"I saw Tedit","date":"2016-11-18T22:01:32.661Z","type":"message"}
{"nick":"grncdr","message":"but I don't remember revision.studio","date":"2016-11-18T22:01:49.121Z","type":"message"}
{"nick":"APNG","message":"creationix, yeah but paths in a tree is a completely different thing from paths in a graph","date":"2016-11-18T22:02:09.693Z","type":"message"}
{"nick":"creationix","message":"not really, only difference is tree paths are unique while a node in a graph has infinite possible paths","date":"2016-11-18T22:02:40.963Z","type":"message"}
{"nick":"creationix","message":"A tree is simply a graph with no cycles","date":"2016-11-18T22:03:11.351Z","type":"message"}
{"nick":"creationix","message":"grncdr when you have time https://www.youtube.com/watch?v=X7AmdsXpUMI","date":"2016-11-18T22:03:54.794Z","type":"message"}
{"nick":"creationix","message":"the basic idea is a web-based IDE where you checkout from a lit-style graph, edit files, running locally and then publish back to get a new hash","date":"2016-11-18T22:04:20.607Z","type":"message"}
{"nick":"creationix","message":"someone else can checkout your hash, edit and then publish their own hash","date":"2016-11-18T22:04:32.001Z","type":"message"}
{"nick":"APNG","message":"creationix, a node in a graph may have* infinite possible paths","date":"2016-11-18T22:04:38.004Z","type":"message"}
{"nick":"creationix","message":"it also supports importing from github to bootstrap projects","date":"2016-11-18T22:04:39.885Z","type":"message"}
{"nick":"creationix","message":"APNG know what the part of a graph that doesn't have infinite paths is called? a tree","date":"2016-11-18T22:06:03.969Z","type":"message"}
{"nick":"creationix","message":"anyway, I don't see point in arguing pendantics.","date":"2016-11-18T22:06:44.144Z","type":"message"}
{"nick":"creationix","message":"graphs are cool, filesystems are trees (unless your allow hardlinks)","date":"2016-11-18T22:06:58.605Z","type":"message"}
{"nick":"creationix","message":"making an OO graph abstraction on top of filesystems with hardlinks would make for a neat lit package","date":"2016-11-18T22:07:36.433Z","type":"message"}
{"nick":"grncdr","message":"creationix: oh nice, this is very very similar to the project I was talking about earlier","date":"2016-11-18T22:08:19.092Z","type":"message"}
{"nick":"grncdr","message":"except, you know, it seems to work :P","date":"2016-11-18T22:08:26.634Z","type":"message"}
{"nick":"creationix","message":"I havn't worked on it since the talk.  There has been very little interest","date":"2016-11-18T22:08:36.159Z","type":"message"}
{"nick":"creationix","message":"probably because it's in an alpha state.  Most people expect more polish before jumping onboard","date":"2016-11-18T22:08:55.277Z","type":"message"}
{"nick":"grncdr","message":"hm, that's too bad","date":"2016-11-18T22:09:01.705Z","type":"message"}
{"nick":"grncdr","message":"btw, your cert expired 2 days ago","date":"2016-11-18T22:09:09.617Z","type":"message"}
{"nick":"creationix","message":"I should stop ignoring emails from lets encrypt","date":"2016-11-18T22:09:25.645Z","type":"message"}
{"nick":"creationix","message":"really I should automate it","date":"2016-11-18T22:09:35.291Z","type":"message"}
{"nick":"grncdr","message":"indeed","date":"2016-11-18T22:09:41.642Z","type":"message"}
{"nick":"creationix","message":"hmm, Permission denied (publickey).","date":"2016-11-18T22:09:56.802Z","type":"message"}
{"nick":"creationix","message":"I've formatted my machine since I set that up.  I think I used the wrong ssh key for login","date":"2016-11-18T22:10:20.650Z","type":"message"}
{"nick":"CapsAdmin","reason":"Remote host closed the connection","date":"2016-11-18T22:10:45.983Z","type":"quit"}
{"nick":"CapsAdmin","date":"2016-11-18T22:13:24.519Z","type":"join"}
{"nick":"creationix","message":"oh well, dinner time","date":"2016-11-18T22:13:46.923Z","type":"message"}
{"nick":"APNG","message":"creationix, there are no trees","date":"2016-11-18T22:25:37.523Z","type":"message"}
