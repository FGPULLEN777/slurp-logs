{"nick":"TheJH","reason":"Ping timeout: 248 seconds","date":"2012-08-31T00:03:25.226Z","type":"quit"}
{"nick":"jbueza","date":"2012-08-31T00:03:44.646Z","type":"join"}
{"nick":"creationix","message":"rphillips: what does your systems binding do?","date":"2012-08-31T00:14:19.799Z","type":"message"}
{"nick":"creationix","message":"*systemd","date":"2012-08-31T00:14:27.318Z","type":"message"}
{"nick":"mmalecki[busy]","new_nick":"mmalecki","date":"2012-08-31T00:50:41.759Z","type":"nick"}
{"nick":"jelliott","reason":"*.net *.split","date":"2012-08-31T00:54:14.674Z","type":"quit"}
{"nick":"levi","reason":"*.net *.split","date":"2012-08-31T00:54:14.914Z","type":"quit"}
{"nick":"jelliott","date":"2012-08-31T00:58:20.309Z","type":"join"}
{"nick":"levi","date":"2012-08-31T00:58:20.549Z","type":"join"}
{"nick":"rphillips","message":"creationix: systemd binding?","date":"2012-08-31T01:02:02.945Z","type":"message"}
{"nick":"xming","reason":"Ping timeout: 272 seconds","date":"2012-08-31T01:05:45.203Z","type":"quit"}
{"nick":"mmalecki","reason":"Quit: Reconnecting","date":"2012-08-31T01:12:42.491Z","type":"quit"}
{"nick":"mmalecki","date":"2012-08-31T01:13:00.239Z","type":"join"}
{"nick":"CIA-22","message":"Ryan Phillips\u000f master\u000f * r2808f7f\u000f \u000f/ (2 files):\u000f disable the multicast test for now - http://git.io/MK-HGQ","date":"2012-08-31T01:26:26.741Z","type":"message"}
{"nick":"creationix","message":"hmm must have of been philips_","date":"2012-08-31T01:26:54.201Z","type":"message"}
{"nick":"creationix","message":"oops","date":"2012-08-31T01:26:59.545Z","type":"message"}
{"nick":"rphillips","message":"ah","date":"2012-08-31T01:27:03.761Z","type":"message"}
{"nick":"rphillips","message":"he wrote an init script iirc","date":"2012-08-31T01:27:09.444Z","type":"message"}
{"nick":"rphillips","message":"https://github.com/racker/virgo/commit/36147a6b3267cb495b5792fdabc5dfb7e5ca5b8b","date":"2012-08-31T01:27:52.094Z","type":"message"}
{"nick":"rphillips","message":"yeah","date":"2012-08-31T01:27:53.508Z","type":"message"}
{"nick":"travis-ci","date":"2012-08-31T01:28:49.300Z","type":"join"}
{"nick":"travis-ci","message":"[travis-ci] luvit/luvit#436 (master - 2808f7f : Ryan Phillips): The build passed.","date":"2012-08-31T01:28:49.541Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Change view : https://github.com/luvit/luvit/compare/255e8885668d...2808f7f73d45","date":"2012-08-31T01:28:49.541Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Build details : http://travis-ci.org/luvit/luvit/builds/2290579","date":"2012-08-31T01:28:49.541Z","type":"message"}
{"nick":"travis-ci","date":"2012-08-31T01:28:49.541Z","type":"part"}
{"nick":"joshthecoder","reason":"Quit: Leaving...","date":"2012-08-31T01:43:18.624Z","type":"quit"}
{"nick":"mmalecki","reason":"Ping timeout: 272 seconds","date":"2012-08-31T01:48:49.232Z","type":"quit"}
{"nick":"creationix","message":"rphillips: I'm playing with continuable style async functions","date":"2012-08-31T02:07:01.999Z","type":"message"}
{"nick":"creationix","message":"It's like lightweight promises","date":"2012-08-31T02:07:18.375Z","type":"message"}
{"nick":"creationix","message":"halfway between simple callbacks and promises","date":"2012-08-31T02:07:33.633Z","type":"message"}
{"nick":"Spion","message":"wrap makes a coroutine?","date":"2012-08-31T02:23:02.755Z","type":"message"}
{"nick":"creationix","message":"Spion: which wrap?","date":"2012-08-31T02:32:44.559Z","type":"message"}
{"nick":"creationix","message":"continuable syntax works nicely in coffescript https://gist.github.com/1b47cba9f3a066147966","date":"2012-08-31T02:33:20.620Z","type":"message"}
{"nick":"creationix","message":"I wonder how moon script will handle it","date":"2012-08-31T02:33:29.374Z","type":"message"}
{"nick":"Spion","message":"the wrap provided by fiber","date":"2012-08-31T02:34:34.634Z","type":"message"}
{"nick":"Spion","message":"in the api design question gist :)","date":"2012-08-31T02:35:17.706Z","type":"message"}
{"nick":"Spion","message":"the simplest API I've seen so far (node/coffeescript/otherwise) is streamline's - if something similar to that can be replicated without a preprocessor I'd love to use it :)","date":"2012-08-31T02:36:32.203Z","type":"message"}
{"nick":"Spion","message":"omit the callback and you get a promise function that \"yields\" when called with _; use a _ instead of the callback to yield immediately; use a normal callback for normal behaviour","date":"2012-08-31T02:38:10.281Z","type":"message"}
{"nick":"Spion","message":"something like omitting the callback and getting a promise function, when called with a parameter its considered a callback (continuable syntax), when called without it yields. best of all worlds?","date":"2012-08-31T02:45:41.048Z","type":"message"}
{"nick":"creationix","message":"Spion, yes, with continuable syntax, you can get streamline-like syntax without a preprocessor","date":"2012-08-31T02:45:47.548Z","type":"message"}
{"nick":"creationix","message":"that's what I'm working on right now","date":"2012-08-31T02:45:52.593Z","type":"message"}
{"nick":"Spion","message":"most awesome","date":"2012-08-31T02:45:57.922Z","type":"message"}
{"nick":"Spion","message":":D","date":"2012-08-31T02:45:58.564Z","type":"message"}
{"nick":"creationix","message":"wrap isn't going to work since it requires wrapping every function before using in every coroutine","date":"2012-08-31T02:46:11.040Z","type":"message"}
{"nick":"Spion","message":"yeah :|","date":"2012-08-31T02:46:17.704Z","type":"message"}
{"nick":"creationix","message":"the new fiber module will have a wait function","date":"2012-08-31T02:46:20.465Z","type":"message"}
{"nick":"creationix","message":"so assuming that fs is in continuable style","date":"2012-08-31T02:46:32.273Z","type":"message"}
{"nick":"Spion","message":"<3","date":"2012-08-31T02:47:03.293Z","type":"message"}
{"nick":"creationix","message":"fs.readFile(path)(function (err, contents) end) will become contents = wait(fd.readFile(path))","date":"2012-08-31T02:47:25.570Z","type":"message"}
{"nick":"Spion","message":"exactly what I was thinking","date":"2012-08-31T02:47:37.954Z","type":"message"}
{"nick":"creationix","message":"no need to modify or wrap readFile","date":"2012-08-31T02:47:40.799Z","type":"message"}
{"nick":"Spion","message":"just the call","date":"2012-08-31T02:48:06.840Z","type":"message"}
{"nick":"creationix","message":"also, if moon script works like coffee script, using continuables without coroutines will be pretty too","date":"2012-08-31T02:48:26.174Z","type":"message"}
{"nick":"creationix","message":"though it's not tool bad in vanilla lua","date":"2012-08-31T02:48:36.988Z","type":"message"}
{"nick":"creationix","message":"Spion: https://gist.github.com/1b47cba9f3a066147966","date":"2012-08-31T02:48:48.214Z","type":"message"}
{"nick":"creationix","message":"I think this coroutine syntax is awesome enough to make it work converting luvit to continuable syntax","date":"2012-08-31T02:51:10.670Z","type":"message"}
{"nick":"creationix","message":"it will break all code though","date":"2012-08-31T02:51:17.652Z","type":"message"}
{"nick":"creationix","message":"s/work/worth/","date":"2012-08-31T02:51:27.228Z","type":"message"}
{"nick":"creationix","message":"rphillips: what do you think, would that kind of API change kill you guys?","date":"2012-08-31T02:51:41.753Z","type":"message"}
{"nick":"creationix","message":"mostly it's replacing \", callback\" with \")(callback\" in your calls","date":"2012-08-31T02:52:08.308Z","type":"message"}
{"nick":"Spion","message":"isn't it possible to have it both ways?","date":"2012-08-31T02:52:25.324Z","type":"message"}
{"nick":"Spion","message":":D","date":"2012-08-31T02:52:30.298Z","type":"message"}
{"nick":"creationix","message":"which \"both\"","date":"2012-08-31T02:52:38.929Z","type":"message"}
{"nick":"creationix","message":"I'm not supporting two versions of all functions","date":"2012-08-31T02:52:46.661Z","type":"message"}
{"nick":"creationix","message":"rphillips: and in function definitions replacing \", callback) {\" with \") { return function (callback) {\"","date":"2012-08-31T02:53:54.456Z","type":"message"}
{"nick":"Spion","message":"well, its easy to convert them to old style anyway","date":"2012-08-31T02:54:23.781Z","type":"message"}
{"nick":"creationix","message":"sure, anyone can wrap","date":"2012-08-31T02:54:35.284Z","type":"message"}
{"nick":"creationix","message":"but I don't want most people wrapping","date":"2012-08-31T02:54:48.415Z","type":"message"}
{"nick":"Spion","message":"no, I mean, to make functions that work both ways after wrapping them.","date":"2012-08-31T02:54:57.028Z","type":"message"}
{"nick":"Spion","message":"omit the callback and you get a function","date":"2012-08-31T02:55:05.897Z","type":"message"}
{"nick":"Spion","message":"put the callback in and you get old behaviour","date":"2012-08-31T02:55:12.849Z","type":"message"}
{"nick":"creationix","message":"that requires too much boilerplate","date":"2012-08-31T02:55:24.865Z","type":"message"}
{"nick":"creationix","message":"the double function is bad enough","date":"2012-08-31T02:55:32.347Z","type":"message"}
{"nick":"rphillips","message":"hmm","date":"2012-08-31T02:57:00.448Z","type":"message"}
{"nick":"rphillips","message":"this would change a lot of stuff for us","date":"2012-08-31T02:57:18.583Z","type":"message"}
{"nick":"creationix","message":"mostly superficial though","date":"2012-08-31T02:57:30.277Z","type":"message"}
{"nick":"creationix","message":"and you could delete all your arguments surgery code when you want optional arguments before the callback","date":"2012-08-31T02:57:52.928Z","type":"message"}
{"nick":"creationix","message":"I tried to push this style on node back when we were removing promises years ago","date":"2012-08-31T02:58:07.210Z","type":"message"}
{"nick":"creationix","message":"I wish I had just put it in luvit from the start","date":"2012-08-31T02:58:15.132Z","type":"message"}
{"nick":"rphillips","message":"we are under the gun for the product we are working on.","date":"2012-08-31T02:58:50.148Z","type":"message"}
{"nick":"creationix","message":"rphillips: if it's a deal-breaker let me know.  If you just need help manually changing stuff I can help with that","date":"2012-08-31T02:58:57.286Z","type":"message"}
{"nick":"rphillips","message":"creationix: can you send an email to the luvit list?","date":"2012-08-31T02:59:18.265Z","type":"message"}
{"nick":"creationix","message":"sure","date":"2012-08-31T02:59:24.457Z","type":"message"}
{"nick":"rphillips","message":"and i'll get pquerna and philips_ to chime in","date":"2012-08-31T02:59:31.960Z","type":"message"}
{"nick":"xming","date":"2012-08-31T03:01:17.737Z","type":"join"}
{"nick":"creationix","message":"https://groups.google.com/d/topic/luvit/GkakgfcaNDQ/discussion","date":"2012-08-31T03:13:23.087Z","type":"message"}
{"nick":"creationix","message":"This change and the other two proposed changes will make writing web apps in luvit worlds easier!","date":"2012-08-31T03:13:51.335Z","type":"message"}
{"nick":"creationix","message":"Imagine creating a coroutine per http request and doing all your app logic using sync-style code","date":"2012-08-31T03:14:33.248Z","type":"message"}
{"nick":"creationix","message":"it will be as easy as php, but faster than node (I think)","date":"2012-08-31T03:15:13.374Z","type":"message"}
{"nick":"creationix","message":"also parallel work would be easy too.  wait could accept multiple continuables and wait till they all return","date":"2012-08-31T03:19:47.617Z","type":"message"}
{"nick":"creationix","message":"file1, file2, file3 = wait(fs.readFile(\"file1\"), fs.readFile(\"file2\", fs.readFile(\"file3\"))","date":"2012-08-31T03:20:15.902Z","type":"message"}
{"nick":"Spion","message":"https://gist.github.com/3548825","date":"2012-08-31T03:43:00.684Z","type":"message"}
{"nick":"Spion","message":"its pretty ugly but its backward-compatible","date":"2012-08-31T03:43:07.717Z","type":"message"}
{"nick":"Spion","message":"its also probably not really good code, I was just trying to illustrate it","date":"2012-08-31T03:43:53.383Z","type":"message"}
{"nick":"Spion","message":"also, i bet the performance would suck","date":"2012-08-31T03:46:08.593Z","type":"message"}
{"nick":"Spion","message":"also it would fail when the callback isn't the last parameter and the parameter after it is also a function","date":"2012-08-31T03:48:13.474Z","type":"message"}
{"nick":"Spion","message":"infact I bet that the reverse wrapper is easier","date":"2012-08-31T03:48:29.448Z","type":"message"}
{"nick":"Spion","message":"just throwing stuff on the table :D","date":"2012-08-31T03:50:35.013Z","type":"message"}
{"nick":"Spion","message":"no pun intended","date":"2012-08-31T03:51:05.092Z","type":"message"}
{"nick":"Spion","message":"of course everyone would need to wrap() their functions, that will drive people insane","date":"2012-08-31T03:55:28.409Z","type":"message"}
{"nick":"Spion","action":"hides","date":"2012-08-31T03:55:34.868Z","type":"action"}
{"nick":"creationix","message":"yeah, I'm not wrapping","date":"2012-08-31T03:56:23.909Z","type":"message"}
{"nick":"Spion","message":"not function callers, but function writers, yeah","date":"2012-08-31T03:56:48.507Z","type":"message"}
{"nick":"creationix","message":"yep, users of luvit write and call async functions all the time","date":"2012-08-31T03:57:55.044Z","type":"message"}
{"nick":"creationix","message":"I want both to be painless","date":"2012-08-31T03:57:59.881Z","type":"message"}
{"nick":"creationix","message":"the double function boilerplate is somewhat annoying, but I think it's acceptable","date":"2012-08-31T03:58:20.549Z","type":"message"}
{"nick":"creationix","message":"Spion: alright, here is now the new fiber module is used https://gist.github.com/4af628ad6a8d02ad0f65","date":"2012-08-31T04:22:51.091Z","type":"message"}
{"nick":"creationix","message":"\"wait\" returns all the arguments passed to the callback, \"await\" is short for \"auto wait\" it strips off the first arg and throws it as an error if it's truthy","date":"2012-08-31T04:23:42.190Z","type":"message"}
{"nick":"creationix","message":"as soon as I fix a bug where the fiber module blows up when the callback is called synchronously, I'll publish this working example as a luvit example","date":"2012-08-31T04:24:51.522Z","type":"message"}
{"nick":"kristate","date":"2012-08-31T04:51:29.222Z","type":"join"}
{"nick":"CIA-22","message":"Tim Caswell\u000f master\u000f * rb52c6fc\u000f \u000f/ (4 files in 2 dirs):\u000f Add new stream, new fiber, and new continuable examples - http://git.io/qNxFeQ","date":"2012-08-31T04:58:37.974Z","type":"message"}
{"nick":"creationix","message":"it works!","date":"2012-08-31T04:59:22.709Z","type":"message"}
{"nick":"creationix","message":"https://github.com/luvit/luvit/blob/b52c6fc1f47c20cb1b209739c7809af6fce75561/examples/stream/test.lua#L34-42","date":"2012-08-31T04:59:24.678Z","type":"message"}
{"nick":"creationix","message":"22 lines for callback based  vs 7 lines for await based","date":"2012-08-31T05:00:14.200Z","type":"message"}
{"nick":"travis-ci","date":"2012-08-31T05:01:01.497Z","type":"join"}
{"nick":"travis-ci","message":"[travis-ci] luvit/luvit#437 (master - b52c6fc : Tim Caswell): The build passed.","date":"2012-08-31T05:01:01.738Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Change view : https://github.com/luvit/luvit/compare/2808f7f73d45...b52c6fc1f47c","date":"2012-08-31T05:01:01.739Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Build details : http://travis-ci.org/luvit/luvit/builds/2291516","date":"2012-08-31T05:01:01.739Z","type":"message"}
{"nick":"travis-ci","date":"2012-08-31T05:01:01.739Z","type":"part"}
{"nick":"CIA-22","message":"Tim Caswell\u000f master\u000f * r950c457\u000f \u000f/ (examples/stream/modules/file.lua examples/stream/test.lua):\u000f Tidy up new stream example - http://git.io/S7bCfA","date":"2012-08-31T05:08:39.598Z","type":"message"}
{"nick":"travis-ci","date":"2012-08-31T05:11:25.211Z","type":"join"}
{"nick":"travis-ci","message":"[travis-ci] luvit/luvit#438 (master - 950c457 : Tim Caswell): The build passed.","date":"2012-08-31T05:11:25.452Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Change view : https://github.com/luvit/luvit/compare/b52c6fc1f47c...950c457b0e25","date":"2012-08-31T05:11:25.452Z","type":"message"}
{"nick":"travis-ci","message":"[travis-ci] Build details : http://travis-ci.org/luvit/luvit/builds/2291552","date":"2012-08-31T05:11:25.452Z","type":"message"}
{"nick":"travis-ci","date":"2012-08-31T05:11:25.452Z","type":"part"}
{"nick":"dvv1","date":"2012-08-31T05:19:47.546Z","type":"join"}
{"nick":"creationix","message":"I think the repl should run in a fiber","date":"2012-08-31T05:22:36.715Z","type":"message"}
{"nick":"creationix","message":"with wait and await available","date":"2012-08-31T05:22:41.543Z","type":"message"}
{"nick":"creationix","message":"then I'd never need to use *Sync functions again","date":"2012-08-31T05:22:55.903Z","type":"message"}
{"nick":"`3rdEden","date":"2012-08-31T05:56:26.067Z","type":"join"}
{"nick":"aliem","date":"2012-08-31T06:02:41.261Z","type":"join"}
{"nick":"TheJH","date":"2012-08-31T06:29:08.328Z","type":"join"}
{"nick":"jbueza","reason":"Quit: jbueza","date":"2012-08-31T09:48:33.208Z","type":"quit"}
{"nick":"xming","reason":"Changing host","date":"2012-08-31T09:50:31.087Z","type":"quit"}
{"nick":"xming","date":"2012-08-31T09:50:31.330Z","type":"join"}
{"nick":"mmalecki","date":"2012-08-31T10:29:57.744Z","type":"join"}
{"nick":"kristate","reason":"Remote host closed the connection","date":"2012-08-31T10:33:29.546Z","type":"quit"}
{"nick":"kristate","date":"2012-08-31T10:33:51.021Z","type":"join"}
{"nick":"damjan","reason":"Quit: ZNC - http://znc.in","date":"2012-08-31T11:48:47.156Z","type":"quit"}
{"nick":"damjan","date":"2012-08-31T11:50:13.028Z","type":"join"}
{"nick":"damjan","reason":"Read error: Connection reset by peer","date":"2012-08-31T11:53:06.370Z","type":"quit"}
{"nick":"damjan","date":"2012-08-31T11:54:35.046Z","type":"join"}
{"nick":"damjan","reason":"Quit: ZNC - http://znc.in","date":"2012-08-31T12:04:59.502Z","type":"quit"}
{"nick":"damjan","date":"2012-08-31T12:06:28.129Z","type":"join"}
{"nick":"CIA-22","reason":"Ping timeout: 252 seconds","date":"2012-08-31T12:19:25.699Z","type":"quit"}
{"nick":"CIA-16","date":"2012-08-31T12:25:59.131Z","type":"join"}
{"nick":"creationix","message":"dvv: luau is interesting","date":"2012-08-31T12:45:34.748Z","type":"message"}
{"nick":"creationix","message":"*luauv","date":"2012-08-31T12:45:43.779Z","type":"message"}
{"nick":"creationix","message":"I don't like how it does sync I/O if you're not in a coroutine","date":"2012-08-31T12:46:46.198Z","type":"message"}
{"nick":"dvv1","message":"me too","date":"2012-08-31T12:52:57.235Z","type":"message"}
{"nick":"dvv1","message":"but the way to determine coro is elegant","date":"2012-08-31T12:53:20.069Z","type":"message"}
{"nick":"dvv1","message":"otoh, sync versions could roughly replace standard Lua io module","date":"2012-08-31T12:55:45.727Z","type":"message"}
{"nick":"dvv1","message":"what repells me from luauv is c++ism which pulls giant libc++","date":"2012-08-31T12:59:23.335Z","type":"message"}
{"nick":"creationix","message":"is there a way to tell if you're in a coro from lua?","date":"2012-08-31T13:02:10.019Z","type":"message"}
{"nick":"creationix","message":"I see they are using the C API to tell","date":"2012-08-31T13:02:17.264Z","type":"message"}
{"nick":"creationix","message":"I want user-created functions to work seamlessly with fibers as well","date":"2012-08-31T13:02:40.952Z","type":"message"}
{"nick":"creationix","message":"with continuables, any continuable can be waited on","date":"2012-08-31T13:03:02.811Z","type":"message"}
{"nick":"creationix","message":"and a continuable is nothing more than a function that takes a single callback as arguments","date":"2012-08-31T13:03:17.410Z","type":"message"}
{"nick":"`3rdEden","new_nick":"`3E|Shop","date":"2012-08-31T13:04:09.765Z","type":"nick"}
{"nick":"CIA-16","reason":"Ping timeout: 244 seconds","date":"2012-08-31T13:18:16.126Z","type":"quit"}
{"nick":"CIA-19","date":"2012-08-31T13:23:17.915Z","type":"join"}
{"nick":"mmalecki","new_nick":"mmalecki[food]","date":"2012-08-31T14:27:02.332Z","type":"nick"}
{"nick":"rphillips","message":"good morning","date":"2012-08-31T14:27:34.257Z","type":"message"}
{"nick":"creationix","message":"morning","date":"2012-08-31T14:28:47.280Z","type":"message"}
{"nick":"creationix","message":"rphillips: so is it fair to say that you guys have a lot less resources to contribute to luvit than you used to?","date":"2012-08-31T14:29:12.062Z","type":"message"}
{"nick":"creationix","message":"as exciting as these changes are, I don't want to completely alienate virgo and leave you on  an unsupported fork","date":"2012-08-31T14:30:24.593Z","type":"message"}
{"nick":"creationix","message":"hnakamur: heh, I just remembered you ported my Do library to luvit.  Does this mean you like the new continuable syntax as well?","date":"2012-08-31T14:32:22.798Z","type":"message"}
{"nick":"creationix","message":"rphillips: also we don't have to drop support for the node-clone api virgo uses.  All my experiments have been in pure lua without changing core at all.","date":"2012-08-31T14:33:02.550Z","type":"message"}
{"nick":"hnakamur","message":"well i don't have written enough sample codes to get feels","date":"2012-08-31T14:33:19.653Z","type":"message"}
{"nick":"creationix","message":"hnakamur: did you see how nicely it works with coroutines?","date":"2012-08-31T14:33:47.969Z","type":"message"}
{"nick":"rphillips","message":"creationix: there have only been two of us working on our agent and luvit","date":"2012-08-31T14:34:09.738Z","type":"message"}
{"nick":"rphillips","message":"plus paul","date":"2012-08-31T14:34:12.431Z","type":"message"}
{"nick":"hnakamur","message":"no, i haven't yet.","date":"2012-08-31T14:34:14.243Z","type":"message"}
{"nick":"creationix","message":"rphillips: so you guys are just plain awesome and get a lot done :)","date":"2012-08-31T14:34:50.991Z","type":"message"}
{"nick":"hnakamur","message":"i don't think i like this https://github.com/hnakamur/luvit-do/blob/master/tests/test-chain.lua#L97","date":"2012-08-31T14:34:57.042Z","type":"message"}
{"nick":"creationix","message":"hnakamur: https://github.com/luvit/luvit/blob/master/examples/stream/test.lua#L34-43","date":"2012-08-31T14:35:10.017Z","type":"message"}
{"nick":"creationix","message":"hnakamur: yeah, I don't like do.chain either","date":"2012-08-31T14:35:28.113Z","type":"message"}
{"nick":"hnakamur","message":"coroutine version looks simple to me.","date":"2012-08-31T14:36:12.343Z","type":"message"}
{"nick":"creationix","message":"hnakamur: and it would be easy to make it support multiple parallel calls","date":"2012-08-31T14:36:29.020Z","type":"message"}
{"nick":"hnakamur","message":"oh, that would be nice.","date":"2012-08-31T14:36:46.193Z","type":"message"}
{"nick":"creationix","message":"file1 , file2 = await(fs.readFile(\"file1\"), fs.readFile(\"file2\"))","date":"2012-08-31T14:36:56.284Z","type":"message"}
{"nick":"creationix","message":"then you wouldn't even need a library like do if you were using coroutines","date":"2012-08-31T14:37:29.706Z","type":"message"}
{"nick":"hnakamur","message":"it feels to me coroutines are easier to read.","date":"2012-08-31T14:38:20.171Z","type":"message"}
{"nick":"creationix","message":"much, though a little harder to reason about","date":"2012-08-31T14:38:32.760Z","type":"message"}
{"nick":"hnakamur","message":"wonder how performance is like with coroutines, though.","date":"2012-08-31T14:38:35.527Z","type":"message"}
{"nick":"creationix","message":"I don't get that pretty syntax entirely for free, there is a bit of logic behind it https://github.com/luvit/luvit/blob/master/examples/stream/modules/wait.lua","date":"2012-08-31T14:38:59.479Z","type":"message"}
{"nick":"creationix","message":"we'll have to test it to find out how it performs","date":"2012-08-31T14:39:11.603Z","type":"message"}
{"nick":"creationix","message":"but after asking mike pall, I don't think it will be that bad","date":"2012-08-31T14:39:20.716Z","type":"message"}
{"nick":"creationix","message":"I was surprised how little ram a coroutine uses","date":"2012-08-31T14:39:30.271Z","type":"message"}
{"nick":"creationix","message":"just a few bytes if I remember corectly","date":"2012-08-31T14:39:44.071Z","type":"message"}
{"nick":"creationix","message":"my next step is to port my \"web\" module to use continuables","date":"2012-08-31T14:40:12.150Z","type":"message"}
{"nick":"creationix","message":"and bench it using callbacks and coroutines","date":"2012-08-31T14:40:20.359Z","type":"message"}
{"nick":"hnakamur","message":"it seems creating coroutines are fast. https://gist.github.com/3505055","date":"2012-08-31T14:40:58.796Z","type":"message"}
{"nick":"hnakamur","message":"cf. creating processes in erlang https://gist.github.com/3505035","date":"2012-08-31T14:41:16.416Z","type":"message"}
{"nick":"hnakamur","message":"i don't know context switch cost in coroutines yet, though.","date":"2012-08-31T14:41:50.969Z","type":"message"}
{"nick":"creationix","message":"wow, almost 7x faster for a million of them","date":"2012-08-31T14:42:00.289Z","type":"message"}
{"nick":"creationix","message":"it makes sense though","date":"2012-08-31T14:42:13.410Z","type":"message"}
{"nick":"creationix","message":"coroutines don't do as much as erlang processes","date":"2012-08-31T14:42:19.917Z","type":"message"}
{"nick":"creationix","message":"being green threads, the context switch shouldn't be that bad","date":"2012-08-31T14:42:36.580Z","type":"message"}
{"nick":"`3E|Shop","new_nick":"`3rdEden","date":"2012-08-31T14:42:44.152Z","type":"nick"}
{"nick":"creationix","message":"I guess it depends how deep the stacks get","date":"2012-08-31T14:42:56.501Z","type":"message"}
{"nick":"hnakamur","message":"that's nice. if coroutines scale enough, i'd prefer coroutines.","date":"2012-08-31T14:43:05.333Z","type":"message"}
{"nick":"creationix","message":"so my goal in all this API innovation is to build the ideal base for an awesome web framework","date":"2012-08-31T14:43:46.275Z","type":"message"}
{"nick":"creationix","message":"the framework would bundle all sorts of middleware for handling cookies, form uploads, http auth, etc","date":"2012-08-31T14:44:08.404Z","type":"message"}
{"nick":"creationix","message":"and it would put user code in an implicit coroutine for each request","date":"2012-08-31T14:44:22.467Z","type":"message"}
{"nick":"creationix","message":"so apps could be written using sync style code","date":"2012-08-31T14:44:33.573Z","type":"message"}
{"nick":"creationix","message":"and there wouldn't be any uncaught exceptions as long as the user stuck to the coroutine style","date":"2012-08-31T14:44:53.627Z","type":"message"}
{"nick":"creationix","message":"my only unsolved problem is how to clean up resources in case of error","date":"2012-08-31T14:45:18.832Z","type":"message"}
{"nick":"creationix","message":"I guess the framework could provide an api where user code registers cleanup code in case of trouble.  It's not automatic, but it's like try..catch..finally","date":"2012-08-31T14:46:45.020Z","type":"message"}
{"nick":"kristate","message":"creationix: hmm, sounds more tricky than it has to be","date":"2012-08-31T14:47:28.380Z","type":"message"}
{"nick":"creationix","message":"if I found a way to get at the currently running coroutine, then I could just instrument resource opening functions (like fs.open) to register the fd with the coroutine.  If the coro dies, it could auto-close the file descriptors","date":"2012-08-31T14:48:03.344Z","type":"message"}
{"nick":"creationix","message":"making the user manually register cleanup is a mess","date":"2012-08-31T14:48:11.613Z","type":"message"}
{"nick":"kristate","message":"today on lev, all read() calls now return cBuffers","date":"2012-08-31T14:48:19.200Z","type":"message"}
{"nick":"kristate","message":"https://github.com/connectFree/lev","date":"2012-08-31T14:48:23.297Z","type":"message"}
{"nick":"creationix","message":"I'll bet it's fast","date":"2012-08-31T14:48:32.020Z","type":"message"}
{"nick":"kristate","message":"we have not benchmarked it against luvit yet","date":"2012-08-31T14:48:52.680Z","type":"message"}
{"nick":"kristate","message":"xming is working on cmake for lev right now","date":"2012-08-31T14:49:06.926Z","type":"message"}
{"nick":"creationix","message":"nice","date":"2012-08-31T14:49:14.756Z","type":"message"}
{"nick":"creationix","message":"my http layer should be able to run on top of lev","date":"2012-08-31T14:49:35.825Z","type":"message"}
{"nick":"xming","message":"yeah I ran to the other side :D","date":"2012-08-31T14:49:36.930Z","type":"message"}
{"nick":"creationix","message":"xming: it's all the same","date":"2012-08-31T14:49:44.775Z","type":"message"}
{"nick":"kristate","message":"creationix: cool, you can try it out on top of lev","date":"2012-08-31T14:49:56.237Z","type":"message"}
{"nick":"creationix","message":"kristate: what callback style do you want?","date":"2012-08-31T14:50:05.545Z","type":"message"}
{"nick":"kristate","message":"depends on if we want to keep emit-style callbacks","date":"2012-08-31T14:50:25.007Z","type":"message"}
{"nick":"creationix","message":"node-style callback-last like luvit has now, luauv implicit coroutines, or my new proposed continuable style","date":"2012-08-31T14:50:34.475Z","type":"message"}
{"nick":"creationix","message":"\"emit-style\"?","date":"2012-08-31T14:50:46.675Z","type":"message"}
{"nick":"kristate","message":"emit(\"data\", data)","date":"2012-08-31T14:50:59.478Z","type":"message"}
{"nick":"creationix","message":"I'm trying to get away from that","date":"2012-08-31T14:51:11.457Z","type":"message"}
{"nick":"creationix","message":"if your stream interface matches mine, then we'll be able to share a ton of libraries","date":"2012-08-31T14:51:21.814Z","type":"message"}
{"nick":"kristate","message":"emit is nice in the sense that it can bubble-up over instance","date":"2012-08-31T14:51:40.920Z","type":"message"}
{"nick":"kristate","message":"s","date":"2012-08-31T14:51:42.120Z","type":"message"}
{"nick":"kristate","message":"that is, we can subclass objects and easily handle events","date":"2012-08-31T14:51:53.645Z","type":"message"}
{"nick":"creationix","message":"yeah, and you can always layer an emitter on top of my new streams","date":"2012-08-31T14:52:01.269Z","type":"message"}
{"nick":"creationix","message":"but the core interface is just a continuable method","date":"2012-08-31T14:52:13.814Z","type":"message"}
{"nick":"xming","message":"creationix: yeah","date":"2012-08-31T14:52:16.753Z","type":"message"}
{"nick":"kristate","message":"like hnakamur mentioned, we need to benchmark the impact of context switches via coroutines","date":"2012-08-31T14:53:03.239Z","type":"message"}
{"nick":"creationix","message":"you could even switch your core to be select based instead of using C callbacks and the stream API could stay the same","date":"2012-08-31T14:53:03.825Z","type":"message"}
{"nick":"kristate","message":"if they are not required, it is best to avoid them as they are overhead","date":"2012-08-31T14:53:15.223Z","type":"message"}
{"nick":"creationix","message":"kristate: right, I'm making the emitter part optional","date":"2012-08-31T14:53:27.505Z","type":"message"}
{"nick":"creationix","message":"the less parts the better","date":"2012-08-31T14:53:32.969Z","type":"message"}
{"nick":"creationix","message":"a readable stream is any table with a :read()(callback) method","date":"2012-08-31T14:53:46.270Z","type":"message"}
{"nick":"creationix","message":"and a writable stream is any table with a :write(chunk)(callback) method","date":"2012-08-31T14:53:57.906Z","type":"message"}
{"nick":"creationix","message":"and baked into when the callback gets called and with what values encodes \"data\" \"error\" and \"end\" events","date":"2012-08-31T14:54:30.388Z","type":"message"}
{"nick":"kristate","message":"hmm, I don't like that we have to call read()","date":"2012-08-31T14:54:32.130Z","type":"message"}
{"nick":"kristate","message":"at the moment, buffer management, etc is all handled in the background","date":"2012-08-31T14:54:42.803Z","type":"message"}
{"nick":"creationix","message":":read() shouldn't preclude that","date":"2012-08-31T14:55:01.972Z","type":"message"}
{"nick":"creationix","message":"if anything is helps prevent excessive buffering","date":"2012-08-31T14:55:12.295Z","type":"message"}
{"nick":"creationix","message":"node's readable stream that emits \"data\" and \"end\" events is a royal pain","date":"2012-08-31T14:55:27.528Z","type":"message"}
{"nick":"kristate","message":"I am not sure if there is such a thing as excessive buffering","date":"2012-08-31T14:55:43.544Z","type":"message"}
{"nick":"kristate","message":"if a read() event occurs, it should be read","date":"2012-08-31T14:55:57.661Z","type":"message"}
{"nick":"creationix","message":"I mean, suppose I write an http server","date":"2012-08-31T14:56:06.395Z","type":"message"}
{"nick":"creationix","message":"and I want to serve a 1gb movie to my tablet over 3g","date":"2012-08-31T14:56:19.795Z","type":"message"}
{"nick":"creationix","message":"clearly the read from the disk is going to be faster than the upload to the tablet","date":"2012-08-31T14:56:32.609Z","type":"message"}
{"nick":"creationix","message":"so to properly handle this and not end up buffering the 1gb file in ram, I need to throttle the read stream","date":"2012-08-31T14:56:50.798Z","type":"message"}
{"nick":"hnakamur","message":"i wonder if we can avoid callback from C. http://luajit.org/ext_ffi_semantics.html says \"Callbacks are slow!\"","date":"2012-08-31T14:57:03.159Z","type":"message"}
{"nick":"creationix","message":"with \"data\" events, I have to manually call :pause() and :resume()","date":"2012-08-31T14:57:08.407Z","type":"message"}
{"nick":"creationix","message":"hnakamur: you'd have to write a layer on top of libuv or use another library","date":"2012-08-31T14:57:28.245Z","type":"message"}
{"nick":"hnakamur","message":"So maybe we can queue the data in C, and lua code pulls that.","date":"2012-08-31T14:57:33.525Z","type":"message"}
{"nick":"creationix","message":"hnakamur: that's something I wanted to try","date":"2012-08-31T14:57:33.839Z","type":"message"}
{"nick":"creationix","message":"hnakamur: exactly","date":"2012-08-31T14:57:45.149Z","type":"message"}
{"nick":"kristate","message":"ah, but in that event you don't have to pause fs? you can simply seek the file","date":"2012-08-31T14:58:03.384Z","type":"message"}
{"nick":"creationix","message":"kristate: right, but with the current emitter api, you have to pause","date":"2012-08-31T14:58:27.273Z","type":"message"}
{"nick":"creationix","message":"and what if the input is a socket","date":"2012-08-31T14:58:33.885Z","type":"message"}
{"nick":"creationix","message":"then you do have to pause and resume the socket","date":"2012-08-31T14:58:45.015Z","type":"message"}
{"nick":"creationix","message":"but I don't want user-level code having to mess with that","date":"2012-08-31T14:58:54.487Z","type":"message"}
{"nick":"creationix","message":"I'd prefer they just ask for data when they are ready to handle it","date":"2012-08-31T14:59:02.158Z","type":"message"}
{"nick":"kristate","message":"sure, that's why there are events for that.","date":"2012-08-31T14:59:23.119Z","type":"message"}
{"nick":"creationix","message":"so here is the current stream interface (or the node one we copied) http://nodejs.org/api/stream.html","date":"2012-08-31T15:00:03.292Z","type":"message"}
{"nick":"creationix","message":"my proposed interface is about 1/4 the size","date":"2012-08-31T15:00:32.551Z","type":"message"}
{"nick":"creationix","message":"and very coroutine friendly","date":"2012-08-31T15:00:44.583Z","type":"message"}
{"nick":"creationix","message":"repeat local chunk = input:read(); output:write(chunk); until not chunk","date":"2012-08-31T15:01:27.959Z","type":"message"}
{"nick":"creationix","message":"full streaming with proper source throttling","date":"2012-08-31T15:01:38.399Z","type":"message"}
{"nick":"creationix","message":"looks just like the blocking I/O equivalent","date":"2012-08-31T15:01:50.350Z","type":"message"}
{"nick":"creationix","message":"I guess what I'm missing is \"close\" and \"pipe\" events","date":"2012-08-31T15:02:17.509Z","type":"message"}
{"nick":"creationix","message":"but I don't think those are part of the stream API","date":"2012-08-31T15:02:26.144Z","type":"message"}
{"nick":"creationix","message":"I do have readable's \"data\", \"end\", \"error\" and writable's \"drain\" and \"error\" events encoded","date":"2012-08-31T15:03:15.019Z","type":"message"}
{"nick":"kristate","message":"right, but why reimplement blocking sockets?","date":"2012-08-31T15:03:33.803Z","type":"message"}
{"nick":"creationix","message":"because it's not blocking","date":"2012-08-31T15:03:43.239Z","type":"message"}
{"nick":"creationix","message":"it's just as easy to use as blocking sockets","date":"2012-08-31T15:03:49.485Z","type":"message"}
{"nick":"creationix","message":"kristate: are you on the mailing list?  I explained the pros to this approach there","date":"2012-08-31T15:04:56.517Z","type":"message"}
{"nick":"kristate","message":"Not yet","date":"2012-08-31T15:05:09.294Z","type":"message"}
{"nick":"kristate","message":"email is my weakness","date":"2012-08-31T15:05:18.468Z","type":"message"}
{"nick":"creationix","message":"https://groups.google.com/d/topic/luvit/wFsudgNyFH8/discussion and https://groups.google.com/d/topic/luvit/GkakgfcaNDQ/discussion","date":"2012-08-31T15:05:29.556Z","type":"message"}
{"nick":"xming","message":"email is for old people, like me","date":"2012-08-31T15:09:12.967Z","type":"message"}
{"nick":"`3rdEden","reason":"Quit: Linkinus - http://linkinus.com","date":"2012-08-31T15:40:51.564Z","type":"quit"}
{"nick":"joshthecoder","date":"2012-08-31T16:14:01.028Z","type":"join"}
{"nick":"luastoned","date":"2012-08-31T16:19:58.538Z","type":"join"}
{"nick":"pquerna","message":".","date":"2012-08-31T16:26:00.230Z","type":"message"}
{"nick":"pquerna","message":"creationix: i'm confused whats going on kinda","date":"2012-08-31T16:26:55.667Z","type":"message"}
{"nick":"pquerna","message":"creationix: honestly at this point, if there were massive changes to how all of luvit works, we would probally edge towards a fork","date":"2012-08-31T16:27:58.362Z","type":"message"}
{"nick":"creationix","message":"pquerna: good to know","date":"2012-08-31T16:28:35.615Z","type":"message"}
{"nick":"creationix","message":"basically I'm trying to learn from node's mistakes while taking advantage of lua language features","date":"2012-08-31T16:28:54.789Z","type":"message"}
{"nick":"creationix","message":"to make luvit a better node, not just a node clone with lower memory usage","date":"2012-08-31T16:29:11.102Z","type":"message"}
{"nick":"pquerna","message":"right, and there is definately value there;  but for us... we need to be moving our agent from more r&d to more prod this fall","date":"2012-08-31T16:29:25.870Z","type":"message"}
{"nick":"kristate","message":"pquerna: https://github.com/connectFree/lev","date":"2012-08-31T16:29:32.101Z","type":"message"}
{"nick":"creationix","message":"I can leave all the old libraries working and supported","date":"2012-08-31T16:29:36.323Z","type":"message"}
{"nick":"creationix","message":"it's all just lua code anyway","date":"2012-08-31T16:30:03.744Z","type":"message"}
{"nick":"creationix","message":"I don't plan on messing with the C bindings","date":"2012-08-31T16:30:09.431Z","type":"message"}
{"nick":"creationix","message":"you could just bundle the old fs.lua in with virgo","date":"2012-08-31T16:30:19.654Z","type":"message"}
{"nick":"pquerna","message":"sure","date":"2012-08-31T16:30:28.147Z","type":"message"}
{"nick":"creationix","message":"I'll probably name the new one file so as to not confuse anyone","date":"2012-08-31T16:30:36.239Z","type":"message"}
{"nick":"creationix","message":"and the new http module will be \"web\"","date":"2012-08-31T16:30:42.166Z","type":"message"}
{"nick":"creationix","message":"mixing new and old styles will be a problem","date":"2012-08-31T16:32:00.815Z","type":"message"}
{"nick":"creationix","message":"but other than virgo, nobody else uses luvit in production as far as I know","date":"2012-08-31T16:32:15.215Z","type":"message"}
{"nick":"creationix","message":"pquerna: ok so what if I pushed most the lua libraries in luvit to userspace.  You could then own and maintain the current APIs","date":"2012-08-31T16:35:39.206Z","type":"message"}
{"nick":"creationix","message":"would that be too much burden?","date":"2012-08-31T16:35:47.351Z","type":"message"}
{"nick":"pquerna","message":"mmm, it depends if we can really make the C to Lua bindings super stable","date":"2012-08-31T16:36:30.926Z","type":"message"}
{"nick":"pquerna","message":"i agree they don't change much today;","date":"2012-08-31T16:36:37.963Z","type":"message"}
{"nick":"pquerna","message":"the c to lua bindings being super stable is somethign we want for the agent regardless","date":"2012-08-31T16:36:50.714Z","type":"message"}
{"nick":"creationix","message":"hmm, about that","date":"2012-08-31T16:37:15.112Z","type":"message"}
{"nick":"creationix","message":"I do want to experiment with a pull based C api","date":"2012-08-31T16:37:25.213Z","type":"message"}
{"nick":"creationix","message":"but that's mostly moving dispatching to lua","date":"2012-08-31T16:37:47.048Z","type":"message"}
{"nick":"creationix","message":"whoever is using the lua dispatcher code should see the same API as before","date":"2012-08-31T16:37:57.593Z","type":"message"}
{"nick":"creationix","message":"so as long as I provide the same callback-based api as what uv_native currently provides, we should be good?","date":"2012-08-31T16:38:31.836Z","type":"message"}
{"nick":"creationix","message":"be it C or lua","date":"2012-08-31T16:38:37.725Z","type":"message"}
{"nick":"pquerna","message":"so, I mean, if it can work, that'll be awesome;  but realistically for us, we are focused on stabilization and deployment to 100,000 servers across a dozen platforms in the next few months;  I don't think its a good time for us to really track experiments in this realm.   If this was 6-9 months ago... we could follow along.... but... mostly bad timing in this regards","date":"2012-08-31T16:41:37.918Z","type":"message"}
{"nick":"creationix","message":"that's fine, I was just wondering","date":"2012-08-31T16:42:00.858Z","type":"message"}
{"nick":"creationix","message":"I'll keep in mind that if I break compatibility, I'll lose rackspace's support.","date":"2012-08-31T16:42:40.325Z","type":"message"}
{"nick":"creationix","message":"in the short-term, I'll probably just continue writing user-space libraries and frameworks","date":"2012-08-31T16:42:59.466Z","type":"message"}
{"nick":"pquerna","message":"k","date":"2012-08-31T16:43:45.882Z","type":"message"}
{"nick":"creationix","message":"once my new libraries are production quality, we'll talk about removing the old stuff from core","date":"2012-08-31T16:44:11.046Z","type":"message"}
{"nick":"creationix","message":"and bumping it to userspace","date":"2012-08-31T16:44:18.173Z","type":"message"}
{"nick":"pquerna","message":"we can handle small changes in abi if it helps, but changing everything to fibers or what not... just not gonna happen for us right now :)","date":"2012-08-31T16:44:33.362Z","type":"message"}
{"nick":"creationix","message":"right, small tweaks","date":"2012-08-31T16:44:50.086Z","type":"message"}
{"nick":"creationix","message":"like make fs.open only accept integers for mode","date":"2012-08-31T16:44:57.968Z","type":"message"}
{"nick":"pquerna","message":"sure","date":"2012-08-31T16:45:02.466Z","type":"message"}
{"nick":"mmalecki[food]","new_nick":"mmalecki","date":"2012-08-31T16:58:26.347Z","type":"nick"}
{"nick":"aliem","reason":"Remote host closed the connection","date":"2012-08-31T16:58:55.964Z","type":"quit"}
{"nick":"joshthecoder","reason":"Quit: Linkinus - http://linkinus.com","date":"2012-08-31T17:32:22.165Z","type":"quit"}
{"nick":"CIA-19","reason":"Ping timeout: 244 seconds","date":"2012-08-31T17:40:44.397Z","type":"quit"}
{"nick":"`3rdEden","date":"2012-08-31T17:47:45.021Z","type":"join"}
{"nick":"CIA-12","date":"2012-08-31T17:48:04.166Z","type":"join"}
{"nick":"CIA-12","reason":"Ping timeout: 265 seconds","date":"2012-08-31T17:54:33.093Z","type":"quit"}
{"nick":"creationix","message":"looks like I can make \"wait\" and \"await\" globals","date":"2012-08-31T17:56:04.922Z","type":"message"}
{"nick":"creationix","message":"that work on any coroutine","date":"2012-08-31T17:56:10.135Z","type":"message"}
{"nick":"creationix","message":"but the question is, is that a good idea?","date":"2012-08-31T17:56:16.897Z","type":"message"}
{"nick":"CIA-15","date":"2012-08-31T18:06:50.501Z","type":"join"}
{"nick":"hnakamur","message":"well, we should avoid too many globals. you can say local wait = require('foo').wait anyway, can't you?","date":"2012-08-31T18:12:20.713Z","type":"message"}
{"nick":"`3rdEden","reason":"Quit: Leaving...","date":"2012-08-31T18:40:23.385Z","type":"quit"}
{"nick":"CIA-15","reason":"Ping timeout: 244 seconds","date":"2012-08-31T18:41:09.419Z","type":"quit"}
{"nick":"joshthecoder","date":"2012-08-31T18:42:24.415Z","type":"join"}
{"nick":"CIA-13","date":"2012-08-31T18:48:58.198Z","type":"join"}
{"nick":"CIA-13","reason":"Ping timeout: 272 seconds","date":"2012-08-31T18:56:43.180Z","type":"quit"}
{"nick":"CIA-18","date":"2012-08-31T19:00:06.396Z","type":"join"}
{"nick":"CIA-18","date":"2012-08-31T19:09:51.357Z","type":"quit"}
{"nick":"CIA-19","date":"2012-08-31T19:13:05.695Z","type":"join"}
{"nick":"kristate","reason":"Ping timeout: 246 seconds","date":"2012-08-31T19:20:04.030Z","type":"quit"}
{"nick":"CIA-19","reason":"Ping timeout: 252 seconds","date":"2012-08-31T19:32:49.667Z","type":"quit"}
{"nick":"CIA-13","date":"2012-08-31T19:38:42.177Z","type":"join"}
{"nick":"`3rdEden","date":"2012-08-31T19:42:20.751Z","type":"join"}
{"nick":"`3rdEden","reason":"Remote host closed the connection","date":"2012-08-31T19:42:23.063Z","type":"quit"}
{"nick":"creationix","message":"power outage, I'm back now","date":"2012-08-31T20:52:38.686Z","type":"message"}
{"nick":"creationix","message":"hnakamur: yep, that's what I did","date":"2012-08-31T20:52:47.575Z","type":"message"}
{"nick":"creationix","message":"(while the power was out)","date":"2012-08-31T20:52:55.358Z","type":"message"}
{"nick":"luastoned","reason":"Quit: Leaving.","date":"2012-08-31T21:25:46.751Z","type":"quit"}
{"nick":"elguapo99","reason":"Quit: ChatZilla 0.9.88.2 [Firefox 14.0.1/20120713134347]","date":"2012-08-31T21:38:06.914Z","type":"quit"}
{"nick":"elguapo99","date":"2012-08-31T22:34:55.518Z","type":"join"}
{"nick":"elguapo99","reason":"Quit: ChatZilla 0.9.88.2 [Firefox 14.0.1/20120713134347]","date":"2012-08-31T22:39:52.769Z","type":"quit"}
{"nick":"elguapo99","date":"2012-08-31T22:40:18.053Z","type":"join"}
{"nick":"joshthecoder","reason":"Quit: Leaving...","date":"2012-08-31T22:51:08.470Z","type":"quit"}
{"nick":"TheJH","reason":"Ping timeout: 252 seconds","date":"2012-08-31T23:01:49.674Z","type":"quit"}
{"nick":"joshthecoder","date":"2012-08-31T23:14:00.984Z","type":"join"}
{"nick":"joshthecoder","reason":"Quit: Leaving...","date":"2012-08-31T23:39:45.997Z","type":"quit"}
