{"nick":"DarkGod","reason":"Ping timeout: 276 seconds","date":"2016-07-27T02:37:00.771Z","type":"quit"}
{"nick":"a__","reason":"Remote host closed the connection","date":"2016-07-27T04:40:35.750Z","type":"quit"}
{"nick":"a__","date":"2016-07-27T04:43:41.231Z","type":"join"}
{"nick":"SkyRocknRoll","date":"2016-07-27T05:16:53.770Z","type":"join"}
{"nick":"rgrinberg","reason":"Ping timeout: 260 seconds","date":"2016-07-27T05:29:37.747Z","type":"quit"}
{"nick":"DarkGod","date":"2016-07-27T07:30:27.147Z","type":"join"}
{"nick":"a__","reason":"Ping timeout: 264 seconds","date":"2016-07-27T07:36:28.098Z","type":"quit"}
{"nick":"sharpobject","reason":"Ping timeout: 250 seconds","date":"2016-07-27T08:13:07.461Z","type":"quit"}
{"nick":"sharpobject","date":"2016-07-27T08:13:37.528Z","type":"join"}
{"nick":"rendar","date":"2016-07-27T08:21:31.122Z","type":"join"}
{"nick":"rgrinberg","date":"2016-07-27T12:21:20.832Z","type":"join"}
{"nick":"SkyRocknRoll","reason":"Remote host closed the connection","date":"2016-07-27T14:05:27.046Z","type":"quit"}
{"nick":"SkyRocknRoll","date":"2016-07-27T16:23:14.044Z","type":"join"}
{"nick":"cat5e","message":"creationix, so I heard you write compilers","date":"2016-07-27T17:29:37.951Z","type":"message"}
{"nick":"creationix","message":"yep","date":"2016-07-27T17:29:48.230Z","type":"message"}
{"nick":"cat5e","message":"creationix, I need some advice with regards to a parser I'm writing","date":"2016-07-27T17:30:01.003Z","type":"message"}
{"nick":"cat5e","message":"so there's this thing I'm working on https://github.com/SoniEx2/MDXML","date":"2016-07-27T17:30:27.897Z","type":"message"}
{"nick":"rgrinberg","reason":"Ping timeout: 260 seconds","date":"2016-07-27T17:30:37.731Z","type":"quit"}
{"nick":"cat5e","message":"creationix, any idea how to parse something like this? http://sprunge.us/ELBc","date":"2016-07-27T17:31:47.868Z","type":"message"}
{"nick":"creationix","message":"like I said before, it looks pretty simple.  I don't know how to use lpeg so I'd probably just read a line at a time and match using lua patterns","date":"2016-07-27T17:36:27.297Z","type":"message"}
{"nick":"creationix","message":"that's what I personally would do","date":"2016-07-27T17:36:39.818Z","type":"message"}
{"nick":"creationix","message":"but lpeg is probably better once you get over the learning curve","date":"2016-07-27T17:36:51.291Z","type":"message"}
{"nick":"creationix","message":"since your resulting data is structured you'd either need some sort of recursion or carry around an object simulating the stack and the partial data","date":"2016-07-27T17:37:58.766Z","type":"message"}
{"nick":"cat5e","message":"creationix, technically I can count > and use that as depth","date":"2016-07-27T17:43:07.986Z","type":"message"}
{"nick":"cat5e","message":"(altho there are some cases where that fails)","date":"2016-07-27T17:43:24.391Z","type":"message"}
{"nick":"creationix","message":"sure, I think recursive descent would be simplest code-wise","date":"2016-07-27T17:43:34.315Z","type":"message"}
{"nick":"creationix","message":"but whatever you feel comfortable with","date":"2016-07-27T17:43:39.392Z","type":"message"}
{"nick":"creationix","message":"https://en.wikipedia.org/wiki/Recursive_descent_parser","date":"2016-07-27T17:43:52.422Z","type":"message"}
{"nick":"cat5e","message":"actually no, depth would be simpler","date":"2016-07-27T17:45:48.587Z","type":"message"}
{"nick":"cat5e","message":"I'd have to skip a number of >'s either way","date":"2016-07-27T17:46:03.013Z","type":"message"}
{"nick":"cat5e","message":"I mean here's the whole thing basically: local t = {} local depth = -1 while true do local line = nextLine() if isEmpty(line) then depth = -1 else if depth == -1 then depth = getDepth(line) end local _t = t for i=1,depth do _t = _t[#_t] end end end","date":"2016-07-27T17:49:24.271Z","type":"message"}
{"nick":"cat5e","message":"(oversimplified a bit)","date":"2016-07-27T17:49:40.436Z","type":"message"}
{"nick":"cat5e","message":"no wait","date":"2016-07-27T17:50:38.442Z","type":"message"}
{"nick":"cat5e","message":"sorry, more like: local t = {} local depth = 0 while true do local line = nextLine() if isEmpty(line) then depth = 0 else if depth < getDepth(line) then depth = getDepth(line) end local _t = t for i=1,depth do _t = _t[#_t] end end end","date":"2016-07-27T17:51:18.395Z","type":"message"}
{"nick":"cat5e","message":"creationix, so, *technically*, that edge case I linked is undefined","date":"2016-07-27T17:53:48.615Z","type":"message"}
{"nick":"creationix","message":"ok","date":"2016-07-27T17:54:16.849Z","type":"message"}
{"nick":"cat5e","message":"the only thing that's defined is that # denotes a tag, ## denotes an attribute, ### denotes an attribute value, #### denotes a tag namespace and ##### denotes an attribute namespace","date":"2016-07-27T17:54:21.939Z","type":"message"}
{"nick":"cat5e","message":"the spec says nothing about the ordering","date":"2016-07-27T17:54:30.883Z","type":"message"}
{"nick":"cat5e","message":"but uh, *because* the spec says nothing about the ordering, that means I can support that if I want","date":"2016-07-27T17:55:03.916Z","type":"message"}
{"nick":"cat5e","message":"(and yeah I should define that attributes must come after tags and attribute values must come after attributes)","date":"2016-07-27T17:55:44.283Z","type":"message"}
{"nick":"cat5e","message":"(that still doesn't define that content must come after *all* attributes and values and stuff)","date":"2016-07-27T17:56:22.076Z","type":"message"}
{"nick":"cat5e","message":"creationix, what do you think?","date":"2016-07-27T17:57:04.473Z","type":"message"}
{"nick":"rgrinberg","date":"2016-07-27T17:57:09.080Z","type":"join"}
{"nick":"creationix","message":"It's up to you","date":"2016-07-27T17:57:46.212Z","type":"message"}
{"nick":"cat5e","message":"ok","date":"2016-07-27T17:58:15.843Z","type":"message"}
{"nick":"cat5e","message":"creationix, would you use something like this in production? :P","date":"2016-07-27T17:58:32.237Z","type":"message"}
{"nick":"creationix","message":"I don't really like the language, I find actual XML a lot easier to read and write","date":"2016-07-27T17:58:53.374Z","type":"message"}
{"nick":"cat5e","message":"ಠ_ಠ","date":"2016-07-27T17:59:08.430Z","type":"message"}
{"nick":"creationix","message":"that's my opinion, if you like it, go ahead","date":"2016-07-27T17:59:27.340Z","type":"message"}
{"nick":"creationix","message":"I'm not about to tell anyone they shouldn't make something they want to make","date":"2016-07-27T17:59:51.143Z","type":"message"}
{"nick":"cat5e","message":"I have issues with reading nested parens (), XML just has named parens which actually makes it worse","date":"2016-07-27T17:59:52.244Z","type":"message"}
{"nick":"creationix","message":"have you seen haml style encoding?","date":"2016-07-27T18:00:07.003Z","type":"message"}
{"nick":"cat5e","message":"python is much easier to read for me","date":"2016-07-27T18:00:07.292Z","type":"message"}
{"nick":"creationix","message":"it's really popular among node template engines (probably because I ported haml to node in the early days)","date":"2016-07-27T18:00:28.651Z","type":"message"}
{"nick":"creationix","message":"cat5e, for example http://jade-lang.com/","date":"2016-07-27T18:00:48.845Z","type":"message"}
{"nick":"cat5e","message":"creationix, well it's just as readable I guess...","date":"2016-07-27T18:04:09.108Z","type":"message"}
{"nick":"rgrinberg","reason":"Quit: WeeChat 1.5","date":"2016-07-27T18:20:12.666Z","type":"quit"}
{"nick":"rgrinberg","date":"2016-07-27T18:21:40.084Z","type":"join"}
{"nick":"creationix","message":"it's basically python style xml","date":"2016-07-27T18:26:25.834Z","type":"message"}
{"nick":"creationix","message":"it's a little tricky to parse till you realize that you can convert indentation into tokens in the lexer phase","date":"2016-07-27T18:27:00.911Z","type":"message"}
{"nick":"SkyRocknRoll","reason":"Remote host closed the connection","date":"2016-07-27T19:24:14.752Z","type":"quit"}
{"nick":"rgrinberg","reason":"Ping timeout: 244 seconds","date":"2016-07-27T19:54:57.962Z","type":"quit"}
{"nick":"rgrinberg","date":"2016-07-27T19:58:01.847Z","type":"join"}
{"nick":"erlbot--","reason":"Remote host closed the connection","date":"2016-07-27T20:14:25.321Z","type":"quit"}
{"nick":"erlbot--","date":"2016-07-27T20:15:10.734Z","type":"join"}
{"nick":"rendar_","date":"2016-07-27T20:20:20.806Z","type":"join"}
{"nick":"rendar","reason":"Disconnected by services","date":"2016-07-27T20:21:25.789Z","type":"quit"}
{"nick":"rendar_","reason":"Client Quit","date":"2016-07-27T20:21:50.751Z","type":"quit"}
{"nick":"rendar","date":"2016-07-27T20:22:05.390Z","type":"join"}
{"nick":"rgrinberg","reason":"Ping timeout: 244 seconds","date":"2016-07-27T21:51:11.725Z","type":"quit"}
{"nick":"rendar","reason":"Quit: std::lower_bound + std::less_equal *works* with a vector without duplicates!","date":"2016-07-27T21:59:28.273Z","type":"quit"}
{"nick":"a__","date":"2016-07-27T22:33:04.370Z","type":"join"}
