{"nick":"creationix","message":"woohoo, updated http benchmark to use new http decoder and I’m getting around 160,000 requests/second","date":"2014-12-10T00:02:02.972Z","type":"message"}
{"nick":"creationix","message":"25% of all cores are uses in the bench client.  I tried to do the test over ethernet, but it turns out usb to ethernet cables are a nice bottleneck","date":"2014-12-10T00:02:30.045Z","type":"message"}
{"nick":"kazupon","date":"2014-12-10T00:08:39.057Z","type":"join"}
{"nick":"travis-ci","date":"2014-12-10T00:10:48.825Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1365 (http-decoder - ea5c7c0 : Tim Caswell): The build passed.","date":"2014-12-10T00:10:48.827Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/01282ce15dc3^...ea5c7c08b648","date":"2014-12-10T00:10:48.827Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43539014","date":"2014-12-10T00:10:48.827Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T00:10:48.827Z","type":"part"}
{"nick":"kazupon","reason":"Ping timeout: 265 seconds","date":"2014-12-10T00:13:02.106Z","type":"quit"}
{"nick":"DarkGod","reason":"Ping timeout: 245 seconds","date":"2014-12-10T00:16:54.657Z","type":"quit"}
{"nick":"dan336","date":"2014-12-10T00:36:46.973Z","type":"join"}
{"nick":"dan336","reason":"Client Quit","date":"2014-12-10T00:38:43.326Z","type":"quit"}
{"nick":"kazupon","date":"2014-12-10T01:13:30.908Z","type":"join"}
{"nick":"dan336","date":"2014-12-10T01:24:08.971Z","type":"join"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-12-10T01:36:12.815Z","type":"quit"}
{"nick":"dan336","reason":"Read error: Connection reset by peer","date":"2014-12-10T01:39:52.045Z","type":"quit"}
{"nick":"kazupon","date":"2014-12-10T01:42:29.090Z","type":"join"}
{"nick":"rphillips","message":"creationix: memory usage?","date":"2014-12-10T03:02:55.159Z","type":"message"}
{"nick":"creationix","message":"for the benchmark.  I doubt it’s much, I can run again and see","date":"2014-12-10T03:03:16.458Z","type":"message"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-12-10T03:05:50.810Z","type":"quit"}
{"nick":"creationix","message":"rphillips: the 4 worker processes cap about 6mb","date":"2014-12-10T03:06:36.562Z","type":"message"}
{"nick":"creationix","message":"master is 4mb","date":"2014-12-10T03:06:47.349Z","type":"message"}
{"nick":"creationix","message":"If I use luvi-tiny to build luvit it’s just over 3mb each","date":"2014-12-10T03:07:45.641Z","type":"message"}
{"nick":"creationix","message":"(this is linux x64)","date":"2014-12-10T03:07:53.110Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T03:12:01.697Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1367 (luvi-up - 5bd2090 : Tim Caswell): The build passed.","date":"2014-12-10T03:12:01.699Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/8414cfb0b4cc...5bd2090cbc69","date":"2014-12-10T03:12:01.699Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43552166","date":"2014-12-10T03:12:01.700Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T03:12:01.700Z","type":"part"}
{"nick":"kazupon","date":"2014-12-10T03:12:07.456Z","type":"join"}
{"nick":"rphillips","message":"nice","date":"2014-12-10T03:26:55.469Z","type":"message"}
{"nick":"rphillips","message":"https://github.com/luvit/luvit/pull/564","date":"2014-12-10T03:32:18.681Z","type":"message"}
{"nick":"rphillips","message":"emitting the exit after the uv.close seems to fix the lockup","date":"2014-12-10T03:32:44.200Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T03:33:29.057Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1368 (fixes/emit_exit_on_nexttick - 003c7b4 : Ryan Phillips): The build passed.","date":"2014-12-10T03:33:29.059Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/commit/003c7b4e7093","date":"2014-12-10T03:33:29.059Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43553102","date":"2014-12-10T03:33:29.059Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T03:33:29.059Z","type":"part"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-12-10T03:38:56.378Z","type":"quit"}
{"nick":"cledev","reason":"Quit: Leaving","date":"2014-12-10T03:47:25.488Z","type":"quit"}
{"nick":"cledev","date":"2014-12-10T03:49:00.081Z","type":"join"}
{"nick":"travis-ci","date":"2014-12-10T03:52:00.107Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1370 (fixes/emit_exit_on_nexttick - 4f3ee94 : Ryan Phillips): The build passed.","date":"2014-12-10T03:52:00.108Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/003c7b4e7093...4f3ee941646a","date":"2014-12-10T03:52:00.108Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43553961","date":"2014-12-10T03:52:00.109Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T03:52:00.109Z","type":"part"}
{"nick":"creationix","message":"rphillips: why wait till close to delete handle?  Wouldn’t it be safer to delete it right after close returns?","date":"2014-12-10T03:59:06.754Z","type":"message"}
{"nick":"rphillips","message":"hmm yeah. ill patch that","date":"2014-12-10T04:01:40.184Z","type":"message"}
{"nick":"creationix","message":"less race conditions help us sleep at night when this goes into production","date":"2014-12-10T04:02:48.573Z","type":"message"}
{"nick":"kazupon","date":"2014-12-10T04:18:25.269Z","type":"join"}
{"nick":"cledev","reason":"Ping timeout: 260 seconds","date":"2014-12-10T04:19:59.488Z","type":"quit"}
{"nick":"cledev","date":"2014-12-10T05:27:26.460Z","type":"join"}
{"nick":"rphillips","message":"fixed","date":"2014-12-10T05:27:45.532Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T05:28:22.489Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1372 (fixes/emit_exit_on_nexttick - e87abcc : Ryan Phillips): The build passed.","date":"2014-12-10T05:28:22.490Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/4f3ee941646a...e87abccc607c","date":"2014-12-10T05:28:22.491Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43557854","date":"2014-12-10T05:28:22.491Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T05:28:22.491Z","type":"part"}
{"nick":"cledev","reason":"Ping timeout: 250 seconds","date":"2014-12-10T05:46:11.469Z","type":"quit"}
{"nick":"a_le","reason":"Ping timeout: 256 seconds","date":"2014-12-10T05:50:36.557Z","type":"quit"}
{"nick":"a_le","date":"2014-12-10T05:51:51.099Z","type":"join"}
{"nick":"travis-ci","date":"2014-12-10T06:16:34.125Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvi#220 (feat/add_win_svc - 4895657 : Rob Emanuele): The build passed.","date":"2014-12-10T06:16:34.127Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvi/commit/48956574c004","date":"2014-12-10T06:16:34.127Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvi/builds/43559804","date":"2014-12-10T06:16:34.127Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T06:16:34.128Z","type":"part"}
{"nick":"cledev","date":"2014-12-10T09:30:37.134Z","type":"join"}
{"nick":"prontotest","date":"2014-12-10T09:39:01.285Z","type":"join"}
{"nick":"prontotest","date":"2014-12-10T09:39:01.621Z","type":"part"}
{"nick":"kazupon","reason":"Remote host closed the connection","date":"2014-12-10T10:37:25.033Z","type":"quit"}
{"nick":"cledev","reason":"Ping timeout: 265 seconds","date":"2014-12-10T13:03:28.137Z","type":"quit"}
{"nick":"cledev","date":"2014-12-10T14:06:39.644Z","type":"join"}
{"nick":"rphillips","message":"child process stdin:write() has a bug on windows","date":"2014-12-10T14:57:39.746Z","type":"message"}
{"nick":"rphillips","message":"the tls-server-verify should work on windows, but the stdin:write() never gets written back to the client connection in the subprocess","date":"2014-12-10T14:58:53.381Z","type":"message"}
{"nick":"KennethWilke","date":"2014-12-10T15:24:39.568Z","type":"join"}
{"nick":"dan336","date":"2014-12-10T15:39:01.367Z","type":"join"}
{"nick":"KennethWilke","message":"good morning","date":"2014-12-10T16:11:34.496Z","type":"message"}
{"nick":"rphillips","message":"morning","date":"2014-12-10T16:15:38.098Z","type":"message"}
{"nick":"KennethWilke","message":"i'm hitting something of a race condition today, from a script similar to: https://raw.githubusercontent.com/luvit/luvit/luvi-up/examples/tcp-uv-proxy.lua","date":"2014-12-10T16:20:54.270Z","type":"message"}
{"nick":"KennethWilke","message":"when i use a uv_pipe_t socket for listening sometimes i get a SIGPIPE when the client disconnects and the upstream responds to the client around the same time","date":"2014-12-10T16:22:44.849Z","type":"message"}
{"nick":"rch","message":"it sounds like the write is writing before the client disconnect is observed?","date":"2014-12-10T16:23:07.866Z","type":"message"}
{"nick":"KennethWilke","message":"it's not always, and i think it's in the same epoll() call","date":"2014-12-10T16:23:09.240Z","type":"message"}
{"nick":"KennethWilke","message":"yeah it does","date":"2014-12-10T16:23:15.570Z","type":"message"}
{"nick":"KennethWilke","message":"with tcp sockets it doesn't seem to happen","date":"2014-12-10T16:23:21.865Z","type":"message"}
{"nick":"rch","message":"SIGPIPE is only for pipes right","date":"2014-12-10T16:23:35.613Z","type":"message"}
{"nick":"KennethWilke","message":"yeah","date":"2014-12-10T16:23:40.689Z","type":"message"}
{"nick":"KennethWilke","message":"is there a way i could just capture that signal?","date":"2014-12-10T16:24:01.750Z","type":"message"}
{"nick":"KennethWilke","message":"that'd suffice for my needs","date":"2014-12-10T16:24:06.503Z","type":"message"}
{"nick":"rch","message":"probably the write call should have a check in it to see if the pipe is still valid","date":"2014-12-10T16:24:20.069Z","type":"message"}
{"nick":"rch","message":"but maybe there's a cooler way to fix it","date":"2014-12-10T16:24:46.193Z","type":"message"}
{"nick":"rch","message":"KennethWilke: not sure if this is exposed in luvit (yet) but imo if you really think you need to catch SIGPIPE you should set the handler to SIG_IGN","date":"2014-12-10T16:25:43.748Z","type":"message"}
{"nick":"rch","message":"in master i see this: _luv_register_signal_handler(SIGPIPE, SIG_IGN);","date":"2014-12-10T16:26:39.534Z","type":"message"}
{"nick":"KennethWilke","message":"i'm not familiar with that signal","date":"2014-12-10T16:26:50.077Z","type":"message"}
{"nick":"rch","message":"in luvit_init.c","date":"2014-12-10T16:26:50.405Z","type":"message"}
{"nick":"rch","message":"i wonder if that's not in the luvi-up branch","date":"2014-12-10T16:27:00.635Z","type":"message"}
{"nick":"KennethWilke","message":"but that call would just like, use the SIG_IGN handler for SIGPIPE events?","date":"2014-12-10T16:27:06.028Z","type":"message"}
{"nick":"rch","message":"it's not a signal it's an enum telling the kernel to ignore the signal (ign = ignore)","date":"2014-12-10T16:27:13.178Z","type":"message"}
{"nick":"KennethWilke","message":"ahhh okay","date":"2014-12-10T16:27:24.115Z","type":"message"}
{"nick":"KennethWilke","message":"yeah i'd prefer that over a handler","date":"2014-12-10T16:27:31.905Z","type":"message"}
{"nick":"rphillips","message":"yeah, we need to ignore SIGPIPE","date":"2014-12-10T16:27:40.494Z","type":"message"}
{"nick":"KennethWilke","message":"there's nothing i want to occur when that gets thrown","date":"2014-12-10T16:27:40.813Z","type":"message"}
{"nick":"rch","message":"rphillips: shouldn't it be handled in the write call instead?","date":"2014-12-10T16:28:02.861Z","type":"message"}
{"nick":"rphillips","message":"node ignores it globally","date":"2014-12-10T16:28:38.132Z","type":"message"}
{"nick":"rch","message":"ok","date":"2014-12-10T16:28:48.141Z","type":"message"}
{"nick":"rch","message":"so the luvi-up branch is missing the line i showed above which is in master","date":"2014-12-10T16:28:59.117Z","type":"message"}
{"nick":"rphillips","message":"https://github.com/joyent/node/blob/master/src/node.cc#L3456","date":"2014-12-10T16:29:08.781Z","type":"message"}
{"nick":"rch","message":"cool","date":"2014-12-10T16:29:40.384Z","type":"message"}
{"nick":"rch","message":"any shortcut node takes must be fine for us","date":"2014-12-10T16:29:47.924Z","type":"message"}
{"nick":"rphillips","message":"KennethWilke: you should be able to add it like this https://github.com/luvit/luv/blob/master/tests/test-signal.lua","date":"2014-12-10T16:30:52.585Z","type":"message"}
{"nick":"KennethWilke","message":"awesome, ty, will give that a try","date":"2014-12-10T16:36:36.250Z","type":"message"}
{"nick":"endou_____","reason":"Ping timeout: 258 seconds","date":"2014-12-10T16:47:29.993Z","type":"quit"}
{"nick":"Michalik","reason":"Ping timeout: 260 seconds","date":"2014-12-10T16:50:21.205Z","type":"quit"}
{"nick":"KennethWilke","reason":"Quit: Leaving","date":"2014-12-10T16:52:20.416Z","type":"quit"}
{"nick":"creationix","message":"mornin'","date":"2014-12-10T17:00:55.539Z","type":"message"}
{"nick":"rphillips","message":"morning","date":"2014-12-10T17:01:36.267Z","type":"message"}
{"nick":"UniOn","date":"2014-12-10T17:01:45.053Z","type":"join"}
{"nick":"KennethWilke","date":"2014-12-10T17:03:01.347Z","type":"join"}
{"nick":"travis-ci","date":"2014-12-10T17:05:11.059Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1374 (luvi-up - 56b4f6b : Ryan Phillips): The build passed.","date":"2014-12-10T17:05:11.061Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/5bd2090cbc69...56b4f6b2385d","date":"2014-12-10T17:05:11.061Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43619177","date":"2014-12-10T17:05:11.061Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T17:05:11.061Z","type":"part"}
{"nick":"KennethWilke","message":"setting up that signal handler did the trick, now i can also handle sigint properly, woo!","date":"2014-12-10T17:06:46.895Z","type":"message"}
{"nick":"creationix","message":"KennethWilke: nice","date":"2014-12-10T17:11:42.256Z","type":"message"}
{"nick":"KennethWilke","message":"i was very surprised how efficient it is to concatenate buffers and make one write operation vs multiple writing calls","date":"2014-12-10T17:13:35.391Z","type":"message"}
{"nick":"creationix","message":"yeah, syscalls are expensive","date":"2014-12-10T17:13:47.445Z","type":"message"}
{"nick":"creationix","message":"now libuv does support sending an array of buffers, but I didn’t expose that to lua because it’s complicated","date":"2014-12-10T17:14:08.041Z","type":"message"}
{"nick":"creationix","message":"it could be added if it ever made a real difference to an app","date":"2014-12-10T17:14:21.639Z","type":"message"}
{"nick":"KennethWilke","message":"like i was getting 1.2k reqs per second doing multiple stream:write calls","date":"2014-12-10T17:14:38.486Z","type":"message"}
{"nick":"KennethWilke","message":"and 20k when i concatenate first and make a single write call","date":"2014-12-10T17:14:47.168Z","type":"message"}
{"nick":"creationix","message":"nice","date":"2014-12-10T17:14:58.559Z","type":"message"}
{"nick":"KennethWilke","message":"i did try passing an array to write to see if it'd use that libuv feature","date":"2014-12-10T17:15:16.260Z","type":"message"}
{"nick":"KennethWilke","message":"and it was like","date":"2014-12-10T17:15:52.377Z","type":"message"}
{"nick":"KennethWilke","action":"flips table","date":"2014-12-10T17:15:55.465Z","type":"action"}
{"nick":"creationix","message":"I should add that","date":"2014-12-10T17:15:56.744Z","type":"message"}
{"nick":"KennethWilke","message":"this isnt a string!","date":"2014-12-10T17:15:57.546Z","type":"message"}
{"nick":"creationix","message":"lol","date":"2014-12-10T17:16:00.076Z","type":"message"}
{"nick":"creationix","message":"EFLIPSTABLE","date":"2014-12-10T17:16:14.145Z","type":"message"}
{"nick":"KennethWilke","message":"lol","date":"2014-12-10T17:16:23.032Z","type":"message"}
{"nick":"KennethWilke","message":"SIG_FLIP","date":"2014-12-10T17:16:27.560Z","type":"message"}
{"nick":"creationix","message":"task noted https://github.com/luvit/luv/issues/100","date":"2014-12-10T17:17:03.038Z","type":"message"}
{"nick":"KennethWilke","message":"woo!","date":"2014-12-10T17:17:08.342Z","type":"message"}
{"nick":"KennethWilke","message":"i'd be curious to see if that'd be a lil faster than concatenating","date":"2014-12-10T17:17:23.573Z","type":"message"}
{"nick":"KennethWilke","message":"my gut says it'd be slightly faster at least","date":"2014-12-10T17:17:53.810Z","type":"message"}
{"nick":"KennethWilke","message":"but it's been wrong before","date":"2014-12-10T17:18:00.573Z","type":"message"}
{"nick":"KennethWilke","message":"i also have no idea what lua is doing under the hood to concat things","date":"2014-12-10T17:18:27.197Z","type":"message"}
{"nick":"creationix","message":"lua does mem copy","date":"2014-12-10T17:19:23.581Z","type":"message"}
{"nick":"creationix","message":"which is “slow”, but fast and slow are relative","date":"2014-12-10T17:19:38.314Z","type":"message"}
{"nick":"creationix","message":"system calls are one of the more expensive things you can do","date":"2014-12-10T17:19:45.992Z","type":"message"}
{"nick":"KennethWilke","message":"yeah","date":"2014-12-10T17:20:01.397Z","type":"message"}
{"nick":"KennethWilke","message":"dat context switching","date":"2014-12-10T17:20:04.997Z","type":"message"}
{"nick":"creationix","message":"memcpy is much faster than system calls, especially for tiny strings","date":"2014-12-10T17:20:13.499Z","type":"message"}
{"nick":"KennethWilke","message":"and this was with tiny requests","date":"2014-12-10T17:20:25.648Z","type":"message"}
{"nick":"KennethWilke","message":"i was more wondering what kinda way it was organizing that stuff in heap","date":"2014-12-10T17:32:45.237Z","type":"message"}
{"nick":"KennethWilke","message":"if the strings buffer was big enough already, or if it was realloc()ing or something","date":"2014-12-10T17:33:12.997Z","type":"message"}
{"nick":"creationix","message":"not sure.  I do know that pointers are stable in lua, the GC doesn’t move them around","date":"2014-12-10T17:33:46.816Z","type":"message"}
{"nick":"creationix","message":"(which is probably why they don’t implement string chains)","date":"2014-12-10T17:33:56.881Z","type":"message"}
{"nick":"creationix","message":"luajit is a hybrid of a hand-written interpreter in assembly and a JIT compiler","date":"2014-12-10T17:34:42.265Z","type":"message"}
{"nick":"creationix","message":"so who knows what fancy tricks it does","date":"2014-12-10T17:34:47.681Z","type":"message"}
{"nick":"KennethWilke","message":"lol i tried running it through ltrace","date":"2014-12-10T17:35:48.063Z","type":"message"}
{"nick":"KennethWilke","message":"but ltrtace did some callstack too deep error","date":"2014-12-10T17:35:54.193Z","type":"message"}
{"nick":"rphillips","message":"creationix: are exceptions being caught? when I write a test with a syntax error the process is hanging... not dumping the exception","date":"2014-12-10T17:37:28.395Z","type":"message"}
{"nick":"creationix","message":"they should print","date":"2014-12-10T17:37:39.992Z","type":"message"}
{"nick":"rphillips","message":"hmm. perhaps they are... there was a string concat with a nil","date":"2014-12-10T17:39:05.353Z","type":"message"}
{"nick":"rje","message":"does libuv have any synchronization objects?  (events, mutexes, i wouldn't mind an event)","date":"2014-12-10T17:39:41.188Z","type":"message"}
{"nick":"creationix","message":"rphillips: I tihnk there could be a bug in the tap library","date":"2014-12-10T17:40:17.089Z","type":"message"}
{"nick":"creationix","message":"it might be hanging on line 92","date":"2014-12-10T17:40:25.464Z","type":"message"}
{"nick":"creationix","message":"I should probably call uv.stop() to cancel any pending handles in case of error","date":"2014-12-10T17:41:09.958Z","type":"message"}
{"nick":"rphillips","message":"that might be it","date":"2014-12-10T17:41:19.331Z","type":"message"}
{"nick":"creationix","message":"try putting a uv.stop() before the uv.run()","date":"2014-12-10T17:41:35.773Z","type":"message"}
{"nick":"creationix","message":"also there is concern that throwing errors inside of uv.run() is dangerous","date":"2014-12-10T17:43:01.931Z","type":"message"}
{"nick":"creationix","message":"I don’t pcall when calling callbacks.  I let exceptions crash uv.run","date":"2014-12-10T17:43:14.157Z","type":"message"}
{"nick":"creationix","message":"(it helps get meaningful stack traces)","date":"2014-12-10T17:43:24.379Z","type":"message"}
{"nick":"KennethWilke","message":"rje, i think it has some sync primitives","date":"2014-12-10T17:45:12.780Z","type":"message"}
{"nick":"creationix","message":"rje: yes, libuv has all sorts of stuff like that","date":"2014-12-10T17:45:35.466Z","type":"message"}
{"nick":"KennethWilke","message":"i try to avoid using them though, because of the types of performance problems they can do","date":"2014-12-10T17:45:37.781Z","type":"message"}
{"nick":"creationix","message":"I’m just not sure how to expose them to lua","date":"2014-12-10T17:45:40.181Z","type":"message"}
{"nick":"creationix","message":"if you think of a good way to expose it, I’ll add it to luv","date":"2014-12-10T17:45:50.490Z","type":"message"}
{"nick":"creationix","message":"http://docs.libuv.org/en/v1.x/threading.html","date":"2014-12-10T17:46:17.197Z","type":"message"}
{"nick":"KennethWilke","message":"http://docs.libuv.org/en/v1.x/threading.html","date":"2014-12-10T17:46:18.093Z","type":"message"}
{"nick":"KennethWilke","message":"hay! stop that","date":"2014-12-10T17:46:23.056Z","type":"message"}
{"nick":"KennethWilke","message":":p","date":"2014-12-10T17:46:24.901Z","type":"message"}
{"nick":"creationix","message":"lol","date":"2014-12-10T17:46:39.139Z","type":"message"}
{"nick":"rje","message":"k, thanks :)  i'm not sure i'm going to need them yet.  they're plan b.","date":"2014-12-10T17:46:41.334Z","type":"message"}
{"nick":"creationix","message":"one idea I had was to revive dvv’s old experiment and create lua workers in threads","date":"2014-12-10T17:47:15.206Z","type":"message"}
{"nick":"KennethWilke","message":"i hear you on that, i always like to handle my things like an assembly line","date":"2014-12-10T17:47:19.063Z","type":"message"}
{"nick":"creationix","message":"they would have independent lua states and their own uv loop","date":"2014-12-10T17:47:31.477Z","type":"message"}
{"nick":"KennethWilke","message":"that way no step in whatever process interacts with any others","date":"2014-12-10T17:47:37.224Z","type":"message"}
{"nick":"rje","message":"i'm writing the windows service example right now and trying to make do without them","date":"2014-12-10T17:48:21.162Z","type":"message"}
{"nick":"KennethWilke","message":"still handy that libuv provides cross platform sync primitives though","date":"2014-12-10T17:49:10.030Z","type":"message"}
{"nick":"creationix","message":"yep, and the other section I didn’t bind was the dlopen stuff","date":"2014-12-10T17:49:37.073Z","type":"message"}
{"nick":"creationix","message":"lua can’t handle C pointers and luajit ffi already does all that on it’s own","date":"2014-12-10T17:49:50.993Z","type":"message"}
{"nick":"KennethWilke","message":"the ffi thing is still new to me","date":"2014-12-10T17:50:22.935Z","type":"message"}
{"nick":"KennethWilke","message":"i really like the way the ctypes python lib handles interactions with shared objects","date":"2014-12-10T17:50:36.008Z","type":"message"}
{"nick":"KennethWilke","message":"i dunno what it does, but it seems like magic","date":"2014-12-10T17:50:45.901Z","type":"message"}
{"nick":"creationix","message":"yeah, luajit ffi has less sugar","date":"2014-12-10T17:51:03.260Z","type":"message"}
{"nick":"endou_____","date":"2014-12-10T17:51:09.521Z","type":"join"}
{"nick":"creationix","message":"but it’s way faster than ffi in any other runtime.  It’s embedded deep in the jit itself","date":"2014-12-10T17:51:14.355Z","type":"message"}
{"nick":"creationix","message":"one of these days I plan on wrapping libuv to be poll based instead of callback based and interacting with it purely via ffi","date":"2014-12-10T17:52:00.393Z","type":"message"}
{"nick":"creationix","message":"it should be crazy fast and require less C code","date":"2014-12-10T17:52:16.906Z","type":"message"}
{"nick":"creationix","message":"(though a lot more lua code for the ffi bindings)","date":"2014-12-10T17:52:24.254Z","type":"message"}
{"nick":"KennethWilke","message":"yeah and that ffi code looks less pretty","date":"2014-12-10T17:52:35.438Z","type":"message"}
{"nick":"creationix","message":"you can ffi libuv today, but that requires passing c callbacks via the ffi which is very slow","date":"2014-12-10T17:53:30.805Z","type":"message"}
{"nick":"creationix","message":"rphillips: did adding the uv.stop() help?","date":"2014-12-10T17:56:00.654Z","type":"message"}
{"nick":"rphillips","message":"haven't tried it yet","date":"2014-12-10T17:56:34.699Z","type":"message"}
{"nick":"creationix","message":"rphillips: ok, pushed the tweak to luvi-up","date":"2014-12-10T17:57:37.506Z","type":"message"}
{"nick":"creationix","message":"it should be safer than before","date":"2014-12-10T17:57:45.793Z","type":"message"}
{"nick":"rphillips","message":"cool. thanks","date":"2014-12-10T17:57:50.334Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:07:57.537Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1375 (luvi-up - 55bb4a1 : Tim Caswell): The build passed.","date":"2014-12-10T18:07:57.539Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/56b4f6b2385d...55bb4a1ad4ea","date":"2014-12-10T18:07:57.539Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43626490","date":"2014-12-10T18:07:57.539Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:07:57.539Z","type":"part"}
{"nick":"Michalik","date":"2014-12-10T18:10:06.988Z","type":"join"}
{"nick":"creationix","message":"rphillips: KennethWilke https://github.com/luvit/luv/pull/101","date":"2014-12-10T18:28:09.877Z","type":"message"}
{"nick":"creationix","message":"hmm, gets ENOTSUP error on windows.  Is the vector form of write not supported on windows?","date":"2014-12-10T18:34:41.238Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:38:16.038Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luv#197 (vector-writes - b514920 : Tim Caswell): The build passed.","date":"2014-12-10T18:38:16.040Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luv/compare/a707d9c78332^...b514920d4649","date":"2014-12-10T18:38:16.040Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luv/builds/43629309","date":"2014-12-10T18:38:16.040Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:38:16.040Z","type":"part"}
{"nick":"rphillips","message":"https://github.com/luvit/luvit/pull/565","date":"2014-12-10T18:41:28.093Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:50:13.879Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1376 (feat/null_cipher_test - 5510d51 : Ryan Phillips): The build has errored.","date":"2014-12-10T18:50:13.918Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/commit/5510d512f502","date":"2014-12-10T18:50:13.918Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43630690","date":"2014-12-10T18:50:13.918Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:50:13.918Z","type":"part"}
{"nick":"travis-ci","date":"2014-12-10T18:52:30.659Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1378 (feat/null_cipher_test - 7bb18ce : Ryan Phillips): The build failed.","date":"2014-12-10T18:52:30.723Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/5510d512f502...7bb18ce20236","date":"2014-12-10T18:52:30.725Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43630844","date":"2014-12-10T18:52:30.725Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:52:30.725Z","type":"part"}
{"nick":"travis-ci","date":"2014-12-10T18:57:50.394Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luv#198 (vector-writes - 5e1b4d8 : Tim Caswell): The build passed.","date":"2014-12-10T18:57:50.396Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luv/compare/b514920d4649...5e1b4d817f88","date":"2014-12-10T18:57:50.396Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luv/builds/43631280","date":"2014-12-10T18:57:50.396Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T18:57:50.396Z","type":"part"}
{"nick":"rch","message":"KennethWilke: how did you get a reference to SIG_IGN?","date":"2014-12-10T19:04:21.303Z","type":"message"}
{"nick":"KennethWilke","message":"oh i didn't do that, i just set an empty function as its handler","date":"2014-12-10T19:05:10.330Z","type":"message"}
{"nick":"KennethWilke","message":"'uv.signal_start(sigpipe, \"sigpipe\", function() end)'","date":"2014-12-10T19:05:45.323Z","type":"message"}
{"nick":"rch","message":"huh","date":"2014-12-10T19:05:52.592Z","type":"message"}
{"nick":"rch","message":"i guess the difference is minimal","date":"2014-12-10T19:06:01.133Z","type":"message"}
{"nick":"rch","message":"where is the constants module defined? can't find it","date":"2014-12-10T19:06:11.335Z","type":"message"}
{"nick":"KennethWilke","message":"and the sigpipe first argument is my 'local sigpipe = uv.new_signal()'","date":"2014-12-10T19:06:47.791Z","type":"message"}
{"nick":"rch","message":"right","date":"2014-12-10T19:07:09.949Z","type":"message"}
{"nick":"creationix","message":"rch, this one? https://github.com/luvit/luv/blob/master/src/constants.c","date":"2014-12-10T19:11:49.123Z","type":"message"}
{"nick":"rch","message":"aha! thanks","date":"2014-12-10T19:12:38.554Z","type":"message"}
{"nick":"rch","message":"my submodule must not have been updated or something","date":"2014-12-10T19:12:47.405Z","type":"message"}
{"nick":"DarkGod","date":"2014-12-10T19:13:22.396Z","type":"join"}
{"nick":"rch","message":"so SIG_IGN is defined as an invalid function ptr","date":"2014-12-10T19:14:06.267Z","type":"message"}
{"nick":"rch","message":"creationix: do you think the right way to make SIG_IGN available is to expose it in constants.c with lua_pushcfunction? even though it is defined as a funky macro: #define SIG_IGN ((__sighandler_t)1)     /* ignore signal */","date":"2014-12-10T19:17:12.426Z","type":"message"}
{"nick":"creationix","message":"where is that passed in to luv?","date":"2014-12-10T19:17:40.558Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T19:17:59.770Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1380 (feat/null_cipher_test - 52eeab9 : Ryan Phillips): The build was fixed.","date":"2014-12-10T19:17:59.772Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/7bb18ce20236...52eeab913eb0","date":"2014-12-10T19:17:59.772Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43633621","date":"2014-12-10T19:17:59.772Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T19:17:59.773Z","type":"part"}
{"nick":"creationix","message":"and as long as __sighandler_t is an integer, it’s fine to expose it as an integer","date":"2014-12-10T19:18:20.776Z","type":"message"}
{"nick":"rch","message":"oh I guess that would work fine, __sighandler_t is a function *","date":"2014-12-10T19:18:50.177Z","type":"message"}
{"nick":"creationix","message":"hmm ,interesting","date":"2014-12-10T19:19:39.111Z","type":"message"}
{"nick":"rch","message":"signal.h does it with different macro types but same result, 1","date":"2014-12-10T19:20:40.474Z","type":"message"}
{"nick":"rch","message":"as long as equality operators work on the value maybe it doesn't matter between lua_pushcfunction and lua_pushinteger","date":"2014-12-10T19:21:12.090Z","type":"message"}
{"nick":"creationix","message":"well, pushcfunction only takes a certain shape of C pointer","date":"2014-12-10T19:21:39.426Z","type":"message"}
{"nick":"creationix","message":"int (*name)(lua_State *)","date":"2014-12-10T19:22:01.337Z","type":"message"}
{"nick":"rch","message":"oh i thought that only mattered if you called the function.","date":"2014-12-10T19:22:59.210Z","type":"message"}
{"nick":"rch","action":"imagines calling void (*1)()","date":"2014-12-10T19:23:15.004Z","type":"action"}
{"nick":"creationix","message":"so yeah, we can add SIG_IGN as 1, but where does lua pass that valie back to C?","date":"2014-12-10T19:23:51.963Z","type":"message"}
{"nick":"rch","message":"great question, let me see","date":"2014-12-10T19:24:06.407Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T19:28:27.555Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luv#200 (vector-writes - 8a7e905 : Tim Caswell): The build passed.","date":"2014-12-10T19:28:27.557Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luv/compare/5e1b4d817f88...8a7e905ccedf","date":"2014-12-10T19:28:27.557Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luv/builds/43634482","date":"2014-12-10T19:28:27.557Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T19:28:27.557Z","type":"part"}
{"nick":"rch","message":"creationix: yeah there's no way that can work. i think the best solution is to define SIG_IGN like KennethWilke did as `function() end`","date":"2014-12-10T19:29:39.792Z","type":"message"}
{"nick":"rch","message":"Comparison will still work on it, and it will have the same effect as SIG_IGN intends.","date":"2014-12-10T19:29:58.476Z","type":"message"}
{"nick":"rch","message":"since SIG_IGN isn't an enum, it's a special function ptr the kernel treats natively, i don't think there's any good way to represent it in lua space","date":"2014-12-10T19:30:32.598Z","type":"message"}
{"nick":"rch","message":"comparisons on it will work work well","date":"2014-12-10T19:31:35.421Z","type":"message"}
{"nick":"rch","message":"might be all that matters","date":"2014-12-10T19:31:49.926Z","type":"message"}
{"nick":"creationix","message":"I could wrap the SIG_IGN in a lua C function that then calls it.  Does it actually do anything?","date":"2014-12-10T19:45:10.223Z","type":"message"}
{"nick":"creationix","message":"or allow the integer 1 in the signal API and special case it to pass SIG_IGN to libuv","date":"2014-12-10T19:45:43.027Z","type":"message"}
{"nick":"songgao","reason":"Remote host closed the connection","date":"2014-12-10T19:46:40.551Z","type":"quit"}
{"nick":"larme","date":"2014-12-10T19:48:51.294Z","type":"join"}
{"nick":"creationix","message":"nah, libuv doesn’t accept SIG_IGN directly, it only accepts special libuv callbacks","date":"2014-12-10T19:51:27.073Z","type":"message"}
{"nick":"creationix","message":"I could just make the callback optional in signal:start, then if you don’t pass one in, it just ignores the signal","date":"2014-12-10T19:52:29.971Z","type":"message"}
{"nick":"rphillips","message":"rje: https://github.com/Squirrel/Squirrel.Mac","date":"2014-12-10T19:57:35.185Z","type":"message"}
{"nick":"rphillips","message":"https://github.com/Squirrel/Squirrel.Windows","date":"2014-12-10T19:57:43.947Z","type":"message"}
{"nick":"rphillips","message":"sorta interesting... it's the updater for atom","date":"2014-12-10T19:57:57.290Z","type":"message"}
{"nick":"creationix","message":"rphillips: I was about to say, that’s the one used in atom","date":"2014-12-10T19:58:07.486Z","type":"message"}
{"nick":"rphillips","message":"it doesn't seem to work with windows services","date":"2014-12-10T19:58:18.234Z","type":"message"}
{"nick":"rje","message":"huh, neat.","date":"2014-12-10T19:58:35.794Z","type":"message"}
{"nick":"creationix","message":"rch: KennethWilke: https://github.com/luvit/luv/pull/102","date":"2014-12-10T20:07:51.808Z","type":"message"}
{"nick":"KennethWilke","message":"looks good to me","date":"2014-12-10T20:09:32.457Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T20:14:04.270Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1382 (luvi-up - bf5c20b : Ryan Phillips): The build passed.","date":"2014-12-10T20:14:04.310Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/compare/55bb4a1ad4ea...bf5c20b47a6a","date":"2014-12-10T20:14:04.310Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43639181","date":"2014-12-10T20:14:04.310Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T20:14:04.310Z","type":"part"}
{"nick":"travis-ci","date":"2014-12-10T20:15:33.896Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luv#202 (improve-signal-start - 40a8799 : Tim Caswell): The build passed.","date":"2014-12-10T20:15:33.898Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luv/commit/40a8799539ab","date":"2014-12-10T20:15:33.898Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luv/builds/43638968","date":"2014-12-10T20:15:33.898Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T20:15:33.898Z","type":"part"}
{"nick":"KennethWilke","message":"hmm","date":"2014-12-10T20:28:27.046Z","type":"message"}
{"nick":"KennethWilke","message":"this isn't really something i use often, but my interactive interpreter seems to have some sillyness","date":"2014-12-10T20:29:12.288Z","type":"message"}
{"nick":"KennethWilke","message":"Welcome to the Luvit repl!","date":"2014-12-10T20:29:38.900Z","type":"message"}
{"nick":"KennethWilke","message":"> local test=\"hello\"","date":"2014-12-10T20:29:39.105Z","type":"message"}
{"nick":"KennethWilke","message":"> print(test)","date":"2014-12-10T20:29:39.107Z","type":"message"}
{"nick":"KennethWilke","message":"nil","date":"2014-12-10T20:29:39.107Z","type":"message"}
{"nick":"KennethWilke","message":"looks like it garbage collects between lines","date":"2014-12-10T20:29:54.845Z","type":"message"}
{"nick":"KennethWilke","message":"if i do 'local test=\"hello\" print(test)' i get the expected output","date":"2014-12-10T20:30:12.773Z","type":"message"}
{"nick":"KennethWilke","message":"and if i run a script through the interpreter it's fine as well, of course","date":"2014-12-10T20:30:39.894Z","type":"message"}
{"nick":"rphillips","message":"creationix: is that how the signal handling works in libuv?","date":"2014-12-10T20:38:09.731Z","type":"message"}
{"nick":"creationix","message":"KennethWilke: it’s not GC, it’s that each line in the repl runs in an independent local scope","date":"2014-12-10T20:38:39.297Z","type":"message"}
{"nick":"creationix","message":"that’s the nature of eval","date":"2014-12-10T20:38:42.819Z","type":"message"}
{"nick":"creationix","message":"just don’t use local in the repl","date":"2014-12-10T20:38:48.262Z","type":"message"}
{"nick":"KennethWilke","message":"ahhh! okay","date":"2014-12-10T20:38:55.338Z","type":"message"}
{"nick":"KennethWilke","message":"i just wanted to make sure that's expected behavior","date":"2014-12-10T20:39:09.394Z","type":"message"}
{"nick":"creationix","message":"rphillips: I think that as long as you have a signal handler registered in libuv, it will ignore the signal","date":"2014-12-10T20:39:48.195Z","type":"message"}
{"nick":"creationix","message":"it’s not ass effecient as `signal(SIGPIPE, SIG_IGN)`, but you can’t go that low in libuv","date":"2014-12-10T20:40:08.105Z","type":"message"}
{"nick":"creationix","message":"the C callback will be called, but if you ommitted the lua callback, the C callback won’t do anything","date":"2014-12-10T20:40:26.474Z","type":"message"}
{"nick":"creationix","message":"slightly faster than a noop lua callback","date":"2014-12-10T20:40:41.479Z","type":"message"}
{"nick":"rphillips","message":"gotcha","date":"2014-12-10T20:41:49.516Z","type":"message"}
{"nick":"rch","message":"huh interesting","date":"2014-12-10T21:08:10.499Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T21:17:20.058Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luv#204 (master - 1757b39 : Tim Caswell): The build passed.","date":"2014-12-10T21:17:20.060Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luv/compare/2ae54a46f972...1757b39ef4fa","date":"2014-12-10T21:17:20.060Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luv/builds/43645713","date":"2014-12-10T21:17:20.060Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T21:17:20.060Z","type":"part"}
{"nick":"UniOn_","date":"2014-12-10T22:09:59.921Z","type":"join"}
{"nick":"UniOn","reason":"Ping timeout: 258 seconds","date":"2014-12-10T22:11:02.097Z","type":"quit"}
{"nick":"rphillips","message":"https://www.hakkalabs.co/articles/optimizing-go-3k-requestssec-480k-requestssec","date":"2014-12-10T22:29:48.489Z","type":"message"}
{"nick":"rphillips","message":"haven't went through this yet, but looked interesting","date":"2014-12-10T22:29:56.096Z","type":"message"}
{"nick":"KennethWilke","message":"ooo","date":"2014-12-10T22:30:34.997Z","type":"message"}
{"nick":"rje","message":"rphillips, creationix: this is what the service api use is going toward in lua, opinions?  https://github.com/rjemanuele/lua_winsvc/blob/master/examples/complete.lua","date":"2014-12-10T22:32:18.463Z","type":"message"}
{"nick":"rch","message":"neat","date":"2014-12-10T22:32:48.448Z","type":"message"}
{"nick":"rje","message":"rch, i had to scrap the port of luaservice to luvi as it wasn't working well.  this is working out better as more of a windows service api wrapper","date":"2014-12-10T22:34:01.299Z","type":"message"}
{"nick":"creationix","message":"wow, never realized services could be so complicated","date":"2014-12-10T22:34:13.968Z","type":"message"}
{"nick":"creationix","message":"but I like the idea of mapping closely to the windows APIs","date":"2014-12-10T22:34:22.668Z","type":"message"}
{"nick":"rje","message":"its pretty close, i needed a few other windows functions that i'm putting in that aux module.","date":"2014-12-10T22:35:01.839Z","type":"message"}
{"nick":"rje","message":"its nice of msvc to use whatever for whitespace :/","date":"2014-12-10T22:35:39.030Z","type":"message"}
{"nick":"rje","message":"creationix, i wonder about calls like this https://github.com/rjemanuele/lua_winsvc/blob/master/examples/complete.lua#L154","date":"2014-12-10T22:36:07.364Z","type":"message"}
{"nick":"rje","message":"would it be better to wrap them in a pcall?","date":"2014-12-10T22:36:17.976Z","type":"message"}
{"nick":"rphillips","message":"slick","date":"2014-12-10T22:36:18.799Z","type":"message"}
{"nick":"rje","message":"that way the error could be caught qucik","date":"2014-12-10T22:36:36.287Z","type":"message"}
{"nick":"KennethWilke","message":"rphillips: where's the silver bullet in that video?! :p","date":"2014-12-10T22:38:43.242Z","type":"message"}
{"nick":"creationix","message":"if the user wants to ignore the error sometimes, I like to return assert friendly style","date":"2014-12-10T22:38:56.978Z","type":"message"}
{"nick":"rphillips","message":"KennethWilke: haven't watched it yet","date":"2014-12-10T22:39:04.645Z","type":"message"}
{"nick":"creationix","message":"so they can wrap it in assert when they want to catch the error","date":"2014-12-10T22:39:05.686Z","type":"message"}
{"nick":"creationix","message":"success/value, err","date":"2014-12-10T22:39:18.860Z","type":"message"}
{"nick":"rje","message":"creationix, so like it is now","date":"2014-12-10T22:39:19.315Z","type":"message"}
{"nick":"creationix","message":"well, except in case of error, you should return the error string as the second return value","date":"2014-12-10T22:39:37.412Z","type":"message"}
{"nick":"rje","message":"got it","date":"2014-12-10T22:39:52.043Z","type":"message"}
{"nick":"creationix","message":"so the user doesn’t have to look it up themself with winsvcaux.GetLastErrorString())","date":"2014-12-10T22:39:53.449Z","type":"message"}
{"nick":"rje","message":"yeah that made me itch","date":"2014-12-10T22:40:42.026Z","type":"message"}
{"nick":"creationix","message":"but if the user rarely wants to ignore the error, go ahead and error() inside instead of returning","date":"2014-12-10T22:41:16.024Z","type":"message"}
{"nick":"creationix","message":"then they can’t foget to check for error","date":"2014-12-10T22:41:22.743Z","type":"message"}
{"nick":"creationix","message":"*forget","date":"2014-12-10T22:41:25.696Z","type":"message"}
{"nick":"creationix","message":"generally I do assert style for low-level stuff and throw in high-level stuff","date":"2014-12-10T22:41:56.516Z","type":"message"}
{"nick":"rje","message":"hrm.  i hate fuzzy.  hate to pick where to draw that line","date":"2014-12-10T22:43:03.247Z","type":"message"}
{"nick":"creationix","message":"since this is for luvi, use assert style then","date":"2014-12-10T22:43:29.437Z","type":"message"}
{"nick":"rje","message":"kk","date":"2014-12-10T22:44:30.142Z","type":"message"}
{"nick":"rje","message":"fyi http://roy-t.nl/index.php/2013/09/04/lua-syntax-highlighting-in-visual-studio-2012-and-visual-studio-2013-preview/","date":"2014-12-10T22:45:17.663Z","type":"message"}
{"nick":"KennethWilke","message":"rphillips: there's not a lot of juicy data in that video :\\","date":"2014-12-10T22:47:04.236Z","type":"message"}
{"nick":"KennethWilke","message":"it teases!","date":"2014-12-10T22:47:06.771Z","type":"message"}
{"nick":"rphillips","message":"bummer","date":"2014-12-10T22:47:16.265Z","type":"message"}
{"nick":"KennethWilke","message":"though in that realm of things, i recommend this long video: https://www.youtube.com/watch?v=73XNtI0w7jA","date":"2014-12-10T22:48:04.860Z","type":"message"}
{"nick":"KennethWilke","message":"a common thread is making lock free structures, minimizing memory copying and context switching","date":"2014-12-10T22:48:33.504Z","type":"message"}
{"nick":"KennethWilke","message":"the 480k reqs in go video says to use pointers instead of copying buffers, the c10m video gets into pedantic territory recommending using flatter C structures to avoid cache misses and all sorts of crap","date":"2014-12-10T22:50:36.984Z","type":"message"}
{"nick":"cledev","reason":"Ping timeout: 256 seconds","date":"2014-12-10T22:51:44.644Z","type":"quit"}
{"nick":"KennethWilke","message":"also i think the 'processing' 480k reqs per second benchmark is considering all that data is already loaded in application memory, i was thinking he was talking about handling requests but he's talking about analyizing logs","date":"2014-12-10T22:52:59.906Z","type":"message"}
{"nick":"creationix","message":"Almost done with a pure lua readline module for luvit","date":"2014-12-10T22:59:08.606Z","type":"message"}
{"nick":"KennethWilke","message":"ooo nice","date":"2014-12-10T22:59:16.530Z","type":"message"}
{"nick":"creationix","message":"I just can’t repl without it, I’m spoiled","date":"2014-12-10T22:59:16.753Z","type":"message"}
{"nick":"KennethWilke","message":"i hear you","date":"2014-12-10T22:59:23.894Z","type":"message"}
{"nick":"creationix","message":"the last part is Control Left Arrow to jump left one word","date":"2014-12-10T22:59:34.635Z","type":"message"}
{"nick":"KennethWilke","message":"i got like ^[[C^[[D all ove rit","date":"2014-12-10T22:59:37.160Z","type":"message"}
{"nick":"creationix","message":"turns out nagtive pattern matches are tricky in lua","date":"2014-12-10T22:59:46.514Z","type":"message"}
{"nick":"KennethWilke","message":"there's always perl!","date":"2014-12-10T22:59:54.568Z","type":"message"}
{"nick":"KennethWilke","message":"lol","date":"2014-12-10T23:00:05.293Z","type":"message"}
{"nick":"creationix","message":"got it https://github.com/luvit/luvit/blob/0b8802e9d1a61de706c84adac46e6933675ac0a1/app/modules/readline.lua#L194-L208","date":"2014-12-10T23:13:37.009Z","type":"message"}
{"nick":"creationix","message":"KennethWilke: if you want to play around, just run that file in luvit.  It has a test at the bottom","date":"2014-12-10T23:13:54.759Z","type":"message"}
{"nick":"creationix","message":"the history management isn’t quite right, but it seems to work great otherwise","date":"2014-12-10T23:14:06.742Z","type":"message"}
{"nick":"KennethWilke","message":"yeah looks pretty good","date":"2014-12-10T23:16:18.973Z","type":"message"}
{"nick":"KennethWilke","message":"i have a request!","date":"2014-12-10T23:16:24.560Z","type":"message"}
{"nick":"KennethWilke","message":"ctrl+w support :D","date":"2014-12-10T23:16:29.166Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T23:16:34.615Z","type":"join"}
{"nick":"travis-ci","message":"luvit/luvit#1383 (readline - 0b8802e : Tim Caswell): The build passed.","date":"2014-12-10T23:16:34.616Z","type":"message"}
{"nick":"travis-ci","message":"Change view : https://github.com/luvit/luvit/commit/0b8802e9d1a6","date":"2014-12-10T23:16:34.616Z","type":"message"}
{"nick":"travis-ci","message":"Build details : http://travis-ci.org/luvit/luvit/builds/43658225","date":"2014-12-10T23:16:34.616Z","type":"message"}
{"nick":"travis-ci","date":"2014-12-10T23:16:34.617Z","type":"part"}
{"nick":"KennethWilke","message":"i think ctrl+w just removes from current cursor position until it hits whitespace","date":"2014-12-10T23:18:45.369Z","type":"message"}
{"nick":"KennethWilke","message":"and if it's mid whitespace, it'll remove whitespace, then text until it hits whitespace","date":"2014-12-10T23:19:22.433Z","type":"message"}
{"nick":"KennethWilke","message":"i'm gonna head outa here, y'all have a good'n!","date":"2014-12-10T23:23:14.742Z","type":"message"}
{"nick":"KennethWilke","reason":"Quit: Leaving","date":"2014-12-10T23:24:00.798Z","type":"quit"}
{"nick":"dan336","message":"KennethWilke: are using luvi for a load balancer right?","date":"2014-12-10T23:26:13.900Z","type":"message"}
{"nick":"dan336","message":"dan missed him.","date":"2014-12-10T23:26:35.995Z","type":"message"}
{"nick":"cledev","date":"2014-12-10T23:27:53.931Z","type":"join"}
{"nick":"dan336","reason":"Quit: Leaving.","date":"2014-12-10T23:57:08.813Z","type":"quit"}
