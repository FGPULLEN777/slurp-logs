{"nick":"cjihrig","reason":"Quit: Leaving.","date":"2014-10-28T00:02:29.591Z","type":"quit"}
{"nick":"cjihrig","date":"2014-10-28T00:15:22.868Z","type":"join"}
{"nick":"ijroth","date":"2014-10-28T00:38:09.370Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 255 seconds","date":"2014-10-28T01:29:13.451Z","type":"quit"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T01:34:27.863Z","type":"quit"}
{"nick":"indutny","message":"ohai","date":"2014-10-28T01:35:47.930Z","type":"message"}
{"nick":"rvagg","message":"imma tell Mikeal that Trevor wants a mailing list for node-forward, he'll be so pleased ...","date":"2014-10-28T01:43:04.308Z","type":"message"}
{"nick":"hayes","reason":"Ping timeout: 258 seconds","date":"2014-10-28T02:01:24.794Z","type":"quit"}
{"nick":"hayes","date":"2014-10-28T02:06:27.200Z","type":"join"}
{"nick":"Aria","message":"Haha.","date":"2014-10-28T02:08:17.061Z","type":"message"}
{"nick":"cjihrig","reason":"Quit: Leaving.","date":"2014-10-28T02:46:36.109Z","type":"quit"}
{"nick":"octetcloud","date":"2014-10-28T03:12:55.799Z","type":"join"}
{"nick":"Fishrock123","date":"2014-10-28T03:14:09.254Z","type":"join"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-10-28T03:14:59.015Z","type":"quit"}
{"nick":"rvagg","message":"wolfeidau: brycebaril just pointed me to this issue, about TLS overhead back in early 0.10: https://github.com/joyent/node/issues/5480 similar graphs to yours","date":"2014-10-28T03:39:25.110Z","type":"message"}
{"nick":"wolfeidau","message":"rvagg: yeah thanks for reminding me, just going to run a test with 0.11","date":"2014-10-28T03:42:59.019Z","type":"message"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2014-10-28T03:46:35.958Z","type":"quit"}
{"nick":"rmg","date":"2014-10-28T04:15:29.846Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 255 seconds","date":"2014-10-28T04:20:18.054Z","type":"quit"}
{"nick":"wolfeidau","message":"rvagg: pretty similar results HTTPS peaks at 200MB of ram https://www.dropbox.com/s/8zoj11re4qkwbo5/Screenshot%202014-10-28%2015.34.23.png?dl=0 and HTTP is higher on 0.11 at around 100MB of ram https://www.dropbox.com/s/316kimxvsh8del8/Screenshot%202014-10-28%2015.35.12.png?dl=0","date":"2014-10-28T04:35:37.009Z","type":"message"}
{"nick":"wolfeidau","message":"FYI trevnorris indutny 0.11 memory use on OSX","date":"2014-10-28T04:36:49.020Z","type":"message"}
{"nick":"ijroth","date":"2014-10-28T05:06:43.065Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 255 seconds","date":"2014-10-28T05:48:03.055Z","type":"quit"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T05:55:15.853Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T06:27:32.462Z","type":"join"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T08:33:46.880Z","type":"quit"}
{"nick":"rmg","date":"2014-10-28T09:42:14.143Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 258 seconds","date":"2014-10-28T09:46:46.722Z","type":"quit"}
{"nick":"seishun","date":"2014-10-28T10:22:17.887Z","type":"join"}
{"nick":"bnoordhuis","date":"2014-10-28T10:46:01.875Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 272 seconds","date":"2014-10-28T11:24:09.925Z","type":"quit"}
{"nick":"bnoordhuis","date":"2014-10-28T11:55:06.035Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 244 seconds","date":"2014-10-28T11:56:52.300Z","type":"quit"}
{"nick":"cjihrig","date":"2014-10-28T12:27:52.615Z","type":"join"}
{"nick":"node-forward-gh","date":"2014-10-28T12:38:03.015Z","type":"join"}
{"nick":"node-forward-gh","message":"[node\u000f] bnoordhuis\u000f force-pushed\u000f bnoordhuis-fix-33\u000f from f7de5dd\u000f to 3543c55\u000f: https://github.com/node-forward/node/commits/bnoordhuis-fix-33\u000f","date":"2014-10-28T12:38:03.189Z","type":"message"}
{"nick":"node-forward-gh","message":"node\u000f/bnoordhuis-fix-33\u000f 78e38f5\u000f Ben Noordhuis\u000f: src: fix uninitialized memory dereference...","date":"2014-10-28T12:38:03.189Z","type":"message"}
{"nick":"node-forward-gh","message":"node\u000f/bnoordhuis-fix-33\u000f 3543c55\u000f Ben Noordhuis\u000f: src: simplify v8 thread pool implementation...","date":"2014-10-28T12:38:03.189Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T12:38:03.189Z","type":"part"}
{"nick":"bnoordhuis","reason":"Ping timeout: 256 seconds","date":"2014-10-28T12:52:20.038Z","type":"quit"}
{"nick":"cjihrig","reason":"Quit: Leaving.","date":"2014-10-28T13:16:37.082Z","type":"quit"}
{"nick":"cjihrig","date":"2014-10-28T13:47:00.970Z","type":"join"}
{"nick":"bnoordhuis","date":"2014-10-28T13:58:46.986Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 264 seconds","date":"2014-10-28T14:03:46.961Z","type":"quit"}
{"nick":"bnoordhuis","date":"2014-10-28T14:06:37.953Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 240 seconds","date":"2014-10-28T14:16:52.934Z","type":"quit"}
{"nick":"rmg","date":"2014-10-28T14:20:37.296Z","type":"join"}
{"nick":"rmg","reason":"Ping timeout: 256 seconds","date":"2014-10-28T14:25:15.966Z","type":"quit"}
{"nick":"cjihrig","reason":"Quit: Leaving.","date":"2014-10-28T15:08:01.171Z","type":"quit"}
{"nick":"bnoordhuis","date":"2014-10-28T15:23:38.027Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 260 seconds","date":"2014-10-28T15:28:05.070Z","type":"quit"}
{"nick":"cjihrig","date":"2014-10-28T15:35:28.011Z","type":"join"}
{"nick":"node-forward-gh","date":"2014-10-28T15:51:25.478Z","type":"join"}
{"nick":"node-forward-gh","message":"[node\u000f] indutny\u000f created fix/gh-https-detached\u000f (+1\u000f new commit): https://github.com/node-forward/node/commit/6fd089c43678\u000f","date":"2014-10-28T15:51:25.697Z","type":"message"}
{"nick":"node-forward-gh","message":"node\u000f/fix/gh-https-detached\u000f 6fd089c\u000f Fedor Indutny\u000f: handle_wrap: fix","date":"2014-10-28T15:51:25.697Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T15:51:25.697Z","type":"part"}
{"nick":"node-forward-gh","date":"2014-10-28T15:51:45.450Z","type":"join"}
{"nick":"node-forward-gh","message":"[node\u000f] indutny\u000f opened pull request #37: handle_wrap: fix (v0.12\u000f...fix/gh-https-detached\u000f) https://github.com/node-forward/node/pull/37\u000f","date":"2014-10-28T15:51:45.631Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T15:51:45.631Z","type":"part"}
{"nick":"rmg","date":"2014-10-28T15:57:29.344Z","type":"join"}
{"nick":"seishun","date":"2014-10-28T16:06:45.725Z","type":"join"}
{"nick":"cjihrig","reason":"Quit: Leaving.","date":"2014-10-28T16:10:37.826Z","type":"quit"}
{"nick":"octetcloud","date":"2014-10-28T16:15:52.943Z","type":"join"}
{"nick":"Fishrock123","date":"2014-10-28T16:17:38.322Z","type":"join"}
{"nick":"ijroth","date":"2014-10-28T16:33:50.650Z","type":"join"}
{"nick":"bnoordhuis","date":"2014-10-28T16:34:12.702Z","type":"join"}
{"nick":"bnoordhuis","reason":"Ping timeout: 245 seconds","date":"2014-10-28T16:49:27.660Z","type":"quit"}
{"nick":"cjihrig","date":"2014-10-28T16:51:25.980Z","type":"join"}
{"nick":"seishun","message":"maybe I should have tried to build that platform fix before it was merged","date":"2014-10-28T16:54:17.843Z","type":"message"}
{"nick":"wolfeidau_","date":"2014-10-28T16:57:18.984Z","type":"join"}
{"nick":"wolfeidau","reason":"Ping timeout: 240 seconds","date":"2014-10-28T17:00:22.946Z","type":"quit"}
{"nick":"seishun","message":"yeah VS2013 doesn't support extended sizeof","date":"2014-10-28T17:03:32.111Z","type":"message"}
{"nick":"indutny","message":"what do you mean?","date":"2014-10-28T17:09:04.775Z","type":"message"}
{"nick":"seishun","message":"ARRAY_SIZE(TaskQueue::ring_) doesn't compile","date":"2014-10-28T17:11:09.313Z","type":"message"}
{"nick":"indutny","message":"oh","date":"2014-10-28T17:12:59.605Z","type":"message"}
{"nick":"indutny","message":"why?","date":"2014-10-28T17:13:04.347Z","type":"message"}
{"nick":"indutny","message":"ah","date":"2014-10-28T17:13:09.747Z","type":"message"}
{"nick":"indutny","message":"because of v8::Task","date":"2014-10-28T17:13:16.461Z","type":"message"}
{"nick":"indutny","message":"wtf","date":"2014-10-28T17:13:19.660Z","type":"message"}
{"nick":"seishun","message":"huh?","date":"2014-10-28T17:13:32.883Z","type":"message"}
{"nick":"seishun","message":"ARRAY_SIZE(TaskQueue::ring_) expands to sizeof(TaskQueue::ring_) / sizeof((TaskQueue::ring_)[0])","date":"2014-10-28T17:14:28.470Z","type":"message"}
{"nick":"seishun","message":"using sizeof on a non-static member is a C++11 feature","date":"2014-10-28T17:14:52.082Z","type":"message"}
{"nick":"seishun","message":"without an instance","date":"2014-10-28T17:15:07.445Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T17:23:02.034Z","type":"join"}
{"nick":"node-forward-gh","message":"[node\u000f] seishun\u000f opened pull request #38: src: remove usage of extended sizeof (v0.12\u000f...patch-1\u000f) https://github.com/node-forward/node/pull/38\u000f","date":"2014-10-28T17:23:02.253Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T17:23:02.253Z","type":"part"}
{"nick":"bnoordhuis","date":"2014-10-28T17:24:23.961Z","type":"join"}
{"nick":"indutny","message":"seishun: oh, I see","date":"2014-10-28T17:25:19.891Z","type":"message"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T17:41:29.393Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2014-10-28T17:42:35.138Z","type":"quit"}
{"nick":"bnoordhuis","message":"indutny, seishun: left a comment. if one of you can test, that'd be great","date":"2014-10-28T18:03:56.648Z","type":"message"}
{"nick":"seishun","message":"&TaskQueue::ring_","date":"2014-10-28T18:04:37.618Z","type":"message"}
{"nick":"seishun","message":"this doesn't look like valid code","date":"2014-10-28T18:04:44.330Z","type":"message"}
{"nick":"bnoordhuis","message":"is too","date":"2014-10-28T18:05:46.222Z","type":"message"}
{"nick":"bnoordhuis","message":"valid c++98 even","date":"2014-10-28T18:05:56.575Z","type":"message"}
{"nick":"indutny","message":"yeah","date":"2014-10-28T18:12:06.350Z","type":"message"}
{"nick":"indutny","message":"we was using it in container_of","date":"2014-10-28T18:12:10.511Z","type":"message"}
{"nick":"indutny","message":"for ages","date":"2014-10-28T18:12:11.611Z","type":"message"}
{"nick":"indutny","message":"well","date":"2014-10-28T18:12:15.416Z","type":"message"}
{"nick":"indutny","message":"sort of","date":"2014-10-28T18:12:16.195Z","type":"message"}
{"nick":"seishun","message":"well it compiles, although intellisense is confused","date":"2014-10-28T18:13:19.849Z","type":"message"}
{"nick":"seishun","message":"but I don't like the idea of introducing a utility function just for one function","date":"2014-10-28T18:14:09.267Z","type":"message"}
{"nick":"seishun","message":"does node use stdlib anywhere at all?","date":"2014-10-28T18:16:13.581Z","type":"message"}
{"nick":"seishun","message":"std::array would look cleaner here","date":"2014-10-28T18:16:52.431Z","type":"message"}
{"nick":"bnoordhuis","message":"seishun: i'm a bit on the fence wrt c++11 libraries because of http://chromium-cpp.appspot.com/","date":"2014-10-28T18:19:51.608Z","type":"message"}
{"nick":"bnoordhuis","message":"i trust the chromium people when they say that support is spotty across toolchains","date":"2014-10-28T18:20:13.990Z","type":"message"}
{"nick":"Fishrock123","date":"2014-10-28T18:21:50.949Z","type":"join"}
{"nick":"bnoordhuis","message":"apropos that CountOf() template, i would suggest globally replacing ARRAY_SIZE with it","date":"2014-10-28T18:22:16.511Z","type":"message"}
{"nick":"seishun","message":"does node build on those toolchains though?","date":"2014-10-28T18:23:01.573Z","type":"message"}
{"nick":"bnoordhuis","message":"i hope so :-)","date":"2014-10-28T18:36:20.778Z","type":"message"}
{"nick":"bnoordhuis","message":"node has been ported to more platforms than chromium so whatever affects chromium, likely affects node as well","date":"2014-10-28T18:36:42.246Z","type":"message"}
{"nick":"seishun","message":"makes sense","date":"2014-10-28T18:38:20.485Z","type":"message"}
{"nick":"ijroth","date":"2014-10-28T18:40:19.423Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2014-10-28T18:49:11.498Z","type":"quit"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T18:50:50.636Z","type":"quit"}
{"nick":"trevnorris","message":"indutny: so what do you think about hacking Lithium to make system calls?","date":"2014-10-28T19:10:01.241Z","type":"message"}
{"nick":"ijroth","date":"2014-10-28T19:23:38.481Z","type":"join"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T19:34:01.544Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T19:40:22.224Z","type":"join"}
{"nick":"ijroth","reason":"Client Quit","date":"2014-10-28T19:42:10.516Z","type":"quit"}
{"nick":"mmalecki","reason":"Read error: Connection reset by peer","date":"2014-10-28T19:46:38.267Z","type":"quit"}
{"nick":"mmalecki","date":"2014-10-28T19:48:58.362Z","type":"join"}
{"nick":"seishun","message":"bnoordhuis: I'm not sure CountOf(&TaskQueue::ring_) is a huge improvement over ARRAY_SIZE(TaskQueue{}.ring_)","date":"2014-10-28T20:00:36.695Z","type":"message"}
{"nick":"bnoordhuis","message":"seishun: why not?","date":"2014-10-28T20:01:26.451Z","type":"message"}
{"nick":"seishun","message":"well, what does it gain?","date":"2014-10-28T20:01:57.006Z","type":"message"}
{"nick":"bnoordhuis","message":"replacing a type-unsafe macro with a type-safe template function","date":"2014-10-28T20:02:44.735Z","type":"message"}
{"nick":"bnoordhuis","message":"what do you lose?","date":"2014-10-28T20:02:48.615Z","type":"message"}
{"nick":"bnoordhuis","message":"seishun: if you're still unsure, consider what ARRAY_SIZE(p) and CountOf(p) with p = void* would do","date":"2014-10-28T20:12:53.136Z","type":"message"}
{"nick":"bnoordhuis","message":"make that p = int*","date":"2014-10-28T20:13:13.516Z","type":"message"}
{"nick":"seishun","message":"I understand how it's safer, but I'm not sure if it's worth changing everything","date":"2014-10-28T20:15:34.649Z","type":"message"}
{"nick":"bnoordhuis","message":"i don't understand the hesitation","date":"2014-10-28T20:16:40.352Z","type":"message"}
{"nick":"bnoordhuis","message":"if you're worried about doing it manually, perl -i -pe 's/ARRAY_SIZE/CountOf/g' src/*.{cc,h}","date":"2014-10-28T20:17:03.866Z","type":"message"}
{"nick":"seishun","message":"and CountOf can't be used in a constexpr context","date":"2014-10-28T20:21:29.928Z","type":"message"}
{"nick":"bnoordhuis","message":"constexpr is banned for now anyway, doesn't work in VS :-)","date":"2014-10-28T20:22:24.878Z","type":"message"}
{"nick":"bnoordhuis","message":"i think c++14 lifts most of the restrictions on what constexpr can and cannot do btw","date":"2014-10-28T20:23:03.524Z","type":"message"}
{"nick":"seishun","message":"that's what I meant","date":"2014-10-28T20:24:09.182Z","type":"message"}
{"nick":"seishun","message":"you couldn't do something like static_assert(CountOf(blah) > CountOf(bleh)) in VS2013","date":"2014-10-28T20:24:37.167Z","type":"message"}
{"nick":"bnoordhuis","message":"ah, like that. so, we can't have nice things because of VS...","date":"2014-10-28T20:26:11.826Z","type":"message"}
{"nick":"bnoordhuis","message":"bert's idea of switching to clang gets more and more appealing","date":"2014-10-28T20:26:33.229Z","type":"message"}
{"nick":"ijroth","date":"2014-10-28T20:30:35.100Z","type":"join"}
{"nick":"hayes","reason":"Ping timeout: 272 seconds","date":"2014-10-28T20:33:16.025Z","type":"quit"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T20:36:10.756Z","type":"quit"}
{"nick":"hayes","date":"2014-10-28T20:40:04.743Z","type":"join"}
{"nick":"trevnorris","message":"bnoordhuis: +1 on the change.","date":"2014-10-28T20:41:45.878Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: you mean the ARRAY_SIZE -> CountOf thing? i think we just arrived at the conclusion that it's not feasible because VS","date":"2014-10-28T20:43:55.718Z","type":"message"}
{"nick":"bnoordhuis","message":"crappy compilers holding you back... the life of a programmer isn't all roses and unicorns","date":"2014-10-28T20:44:24.823Z","type":"message"}
{"nick":"trevnorris","message":"haha, is it ever?","date":"2014-10-28T20:45:35.745Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: on another note, you think it's too nuts to try hacking Lithium to directly perform syscalls?","date":"2014-10-28T20:46:04.411Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: why would you want to do that?","date":"2014-10-28T20:46:26.919Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: because I think it'd be freaking awesome. ;-P","date":"2014-10-28T20:46:55.403Z","type":"message"}
{"nick":"trevnorris","message":"want to see if it's possible, and like the idea that doing a system call could be optimized by V8 down to a few cycles.","date":"2014-10-28T20:47:41.534Z","type":"message"}
{"nick":"trevnorris","message":"I mean, we're talking shaving off sub 8ns here, but why not?","date":"2014-10-28T20:47:53.361Z","type":"message"}
{"nick":"bnoordhuis","message":"what system calls in particular would you want to inline. and how?","date":"2014-10-28T20:50:20.865Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T20:51:17.629Z","type":"join"}
{"nick":"node-forward-gh","message":"[node\u000f] bnoordhuis\u000f pushed 1\u000f new commit to v0.12\u000f: https://github.com/node-forward/node/commit/b782ef85f1b53384c884050c220efba3dd442bec\u000f","date":"2014-10-28T20:51:17.810Z","type":"message"}
{"nick":"node-forward-gh","message":"node\u000f/v0.12\u000f b782ef8\u000f Nikolai Vavilov\u000f: src: remove usage of extended sizeof...","date":"2014-10-28T20:51:17.811Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T20:51:17.811Z","type":"part"}
{"nick":"node-forward-gh","date":"2014-10-28T20:52:06.576Z","type":"join"}
{"nick":"node-forward-gh","message":"[node\u000f] bnoordhuis\u000f closed pull request #38: src: remove usage of extended sizeof (v0.12\u000f...patch-1\u000f) https://github.com/node-forward/node/pull/38\u000f","date":"2014-10-28T20:52:06.757Z","type":"message"}
{"nick":"node-forward-gh","date":"2014-10-28T20:52:06.758Z","type":"part"}
{"nick":"bnoordhuis","message":"seishun: ^","date":"2014-10-28T20:52:09.118Z","type":"message"}
{"nick":"seishun","message":"yeah","date":"2014-10-28T20:52:19.765Z","type":"message"}
{"nick":"qard-appneta","date":"2014-10-28T20:52:20.796Z","type":"part"}
{"nick":"qard-appneta","date":"2014-10-28T20:52:48.126Z","type":"join"}
{"nick":"qard-appneta","date":"2014-10-28T20:53:39.777Z","type":"part"}
{"nick":"qard-appneta","date":"2014-10-28T20:54:02.142Z","type":"join"}
{"nick":"trevnorris","message":"bnoordhuis: I'd start with something simple, like clock_gettime()","date":"2014-10-28T20:54:27.279Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: and then? how would it work?","date":"2014-10-28T20:56:20.524Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: i'm using LCodeGen::DoMathRound as an example. basics would be to load up the registers, make the call and return the value.","date":"2014-10-28T21:04:18.251Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: yeah, but clock_gettime() returns data in a struct your provide. how are you going to handle that?","date":"2014-10-28T21:08:28.563Z","type":"message"}
{"nick":"ijroth","date":"2014-10-28T21:11:01.261Z","type":"join"}
{"nick":"ijroth","reason":"Client Quit","date":"2014-10-28T21:14:09.919Z","type":"quit"}
{"nick":"trevnorris","message":"bnoordhuis: my thought is to have a pre-allocated struct that's used for all calls, then use the built-in instructions to return that time in ms.","date":"2014-10-28T21:19:16.262Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: pre-allocated per isolate?","date":"2014-10-28T21:20:06.971Z","type":"message"}
{"nick":"bnoordhuis","message":"that could work","date":"2014-10-28T21:20:18.129Z","type":"message"}
{"nick":"rmg","reason":"Remote host closed the connection","date":"2014-10-28T21:22:46.921Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T21:24:43.062Z","type":"join"}
{"nick":"ijroth","reason":"Client Quit","date":"2014-10-28T21:28:10.000Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T21:29:36.075Z","type":"join"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T21:35:33.938Z","type":"quit"}
{"nick":"bnoordhuis","message":"indutny: idea time. proposal: change uv_run(uv_run_mode mode) to uv_run(int64_t timeout), where 0 == UV_RUN_NOWAIT, -1 == UV_RUN_ONCE, -2+ == UV_RUN_DEFAULT","date":"2014-10-28T21:40:00.496Z","type":"message"}
{"nick":"bnoordhuis","message":"but timeout > 0 is the timeout in microseconds","date":"2014-10-28T21:40:24.133Z","type":"message"}
{"nick":"bnoordhuis","message":"it annoys me no end that i have to keep a timer handle around if i want to do a timed poll","date":"2014-10-28T21:40:51.840Z","type":"message"}
{"nick":"bnoordhuis","message":"or maybe a separate uv_run_timed() function.  i also want to change the return value from 'is loop alive?' to 'were events fired?'","date":"2014-10-28T21:43:54.962Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: yeah, per isolate.","date":"2014-10-28T22:00:11.081Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: figure that way I could load the necessary values directly into the CPU registers then send the interrupt.","date":"2014-10-28T22:02:56.118Z","type":"message"}
{"nick":"rmg","date":"2014-10-28T22:02:58.331Z","type":"join"}
{"nick":"bnoordhuis","message":"trevnorris: interrupt? surely you jest, mr. norris!","date":"2014-10-28T22:05:30.329Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: on x86_64, emit a 'syscall' instruction. the old 'int $0x80' way is much, much slower","date":"2014-10-28T22:07:04.377Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: heh. need to find an updated nasm tutorial. It was having me use 'int $0x80'","date":"2014-10-28T22:11:41.341Z","type":"message"}
{"nick":"bnoordhuis","message":"trevnorris: `man 2 syscall`","date":"2014-10-28T22:12:55.841Z","type":"message"}
{"nick":"bnoordhuis","message":"note that that man page lists the args registers but doesn't mention that on x86_64, system calls clobber rcx and r11","date":"2014-10-28T22:13:31.426Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: wow, raw assembly is sort of a bitch to debug.","date":"2014-10-28T22:19:18.316Z","type":"message"}
{"nick":"bnoordhuis","message":"man invented the compiler for a reason :-)","date":"2014-10-28T22:27:27.984Z","type":"message"}
{"nick":"trevnorris","message":"heh","date":"2014-10-28T22:28:00.033Z","type":"message"}
{"nick":"cjihrig","reason":"Quit: Leaving.","date":"2014-10-28T22:48:37.727Z","type":"quit"}
{"nick":"trevnorris","message":"bnoordhuis: you see anything wrong with this? https://gist.github.com/trevnorris/21e13b7ceb2eb359a5bc","date":"2014-10-28T22:53:41.733Z","type":"message"}
{"nick":"cjihrig","date":"2014-10-28T22:55:28.568Z","type":"join"}
{"nick":"bnoordhuis","message":"trevnorris: i don't think so, it looks like a well-formed url to me","date":"2014-10-28T22:56:26.666Z","type":"message"}
{"nick":"trevnorris","message":":P","date":"2014-10-28T22:56:37.143Z","type":"message"}
{"nick":"bnoordhuis","message":"(i'll get my coat)","date":"2014-10-28T22:56:52.972Z","type":"message"}
{"nick":"bnoordhuis","message":"i thought write was syscall #1?","date":"2014-10-28T22:57:08.681Z","type":"message"}
{"nick":"bnoordhuis","message":"yeah, it is","date":"2014-10-28T22:57:40.074Z","type":"message"}
{"nick":"bnoordhuis","message":"also, you probably don't want SYS_exit but SYS_exit_group","date":"2014-10-28T22:58:16.274Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: strange, when I was using 'int 0x80' i used 4.","date":"2014-10-28T22:58:39.916Z","type":"message"}
{"nick":"bnoordhuis","message":"lemme gues, you were compiling for i386, not x86_64?","date":"2014-10-28T22:59:37.431Z","type":"message"}
{"nick":"bnoordhuis","message":"oh, perhaps you haven't seen it mentioned anywhere but the syscall numbers are different for i386 and x86_64","date":"2014-10-28T23:00:12.535Z","type":"message"}
{"nick":"trevnorris","message":"ah yeah. that was why.","date":"2014-10-28T23:00:13.725Z","type":"message"}
{"nick":"trevnorris","message":"yeah, hadn't seen that.","date":"2014-10-28T23:00:22.483Z","type":"message"}
{"nick":"bnoordhuis","message":"you should have two files in /usr/include/asm called unistd_32.h and unistd_64.h","date":"2014-10-28T23:01:08.327Z","type":"message"}
{"nick":"trevnorris","message":"ah, awesome","date":"2014-10-28T23:12:14.541Z","type":"message"}
{"nick":"trevnorris","message":"bnoordhuis: thanks much for the help","date":"2014-10-28T23:12:17.774Z","type":"message"}
{"nick":"trevnorris","message":"I'm off to the airport.","date":"2014-10-28T23:12:22.183Z","type":"message"}
{"nick":"trevnorris","action":"&","date":"2014-10-28T23:12:29.481Z","type":"action"}
{"nick":"bnoordhuis","message":"have a safe flight, trevor","date":"2014-10-28T23:14:01.238Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 255 seconds","date":"2014-10-28T23:23:45.090Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T23:31:41.119Z","type":"join"}
{"nick":"ijroth","reason":"Client Quit","date":"2014-10-28T23:35:05.031Z","type":"quit"}
{"nick":"cjihrig","reason":"Quit: Leaving.","date":"2014-10-28T23:35:17.049Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T23:35:35.106Z","type":"join"}
{"nick":"ijroth","reason":"Quit: Leaving.","date":"2014-10-28T23:47:42.491Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T23:50:08.267Z","type":"join"}
{"nick":"ijroth","reason":"Client Quit","date":"2014-10-28T23:51:57.919Z","type":"quit"}
{"nick":"ijroth","date":"2014-10-28T23:52:27.942Z","type":"join"}
{"nick":"ijroth","reason":"Client Quit","date":"2014-10-28T23:54:43.012Z","type":"quit"}
