{"nick":"evangeni_","reason":"Remote host closed the connection","date":"2013-03-11T00:35:52.984Z","type":"quit"}
{"nick":"majek_","date":"2013-03-11T00:37:06.772Z","type":"join"}
{"nick":"avital_","date":"2013-03-11T00:37:47.323Z","type":"join"}
{"nick":"andrewreedy","date":"2013-03-11T00:42:23.963Z","type":"join"}
{"nick":"sveisvei","reason":"*.net *.split","date":"2013-03-11T00:44:18.000Z","type":"quit"}
{"nick":"majek","reason":"*.net *.split","date":"2013-03-11T00:44:18.000Z","type":"quit"}
{"nick":"avital","reason":"*.net *.split","date":"2013-03-11T00:44:18.210Z","type":"quit"}
{"nick":"avital_","new_nick":"avital","date":"2013-03-11T00:44:18.814Z","type":"nick"}
{"nick":"majek_","new_nick":"majek","date":"2013-03-11T00:46:33.816Z","type":"nick"}
{"nick":"evangenieur","reason":"Remote host closed the connection","date":"2013-03-11T00:50:29.677Z","type":"quit"}
{"nick":"G________","date":"2013-03-11T01:20:34.481Z","type":"join"}
{"nick":"G________","date":"2013-03-11T01:22:10.533Z","type":"part"}
{"nick":"droach","date":"2013-03-11T01:28:40.960Z","type":"join"}
{"nick":"droach","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2013-03-11T02:05:17.325Z","type":"quit"}
{"nick":"sveisvei","date":"2013-03-11T02:37:11.380Z","type":"join"}
{"nick":"lluad","reason":"Quit: lluad","date":"2013-03-11T06:09:40.392Z","type":"quit"}
{"nick":"andrewreedy","reason":"Quit: andrewreedy","date":"2013-03-11T08:16:02.265Z","type":"quit"}
{"nick":"vguerra","date":"2013-03-11T08:27:45.388Z","type":"join"}
{"nick":"evangenieur","date":"2013-03-11T08:59:25.436Z","type":"join"}
{"nick":"colinsullivan","reason":"Quit: Leaving.","date":"2013-03-11T09:03:13.284Z","type":"quit"}
{"nick":"evangeni_","date":"2013-03-11T09:09:28.508Z","type":"join"}
{"nick":"dennismartensson","date":"2013-03-11T11:29:43.800Z","type":"join"}
{"nick":"evangenieur","reason":"Remote host closed the connection","date":"2013-03-11T11:47:41.283Z","type":"quit"}
{"nick":"evangenieur","date":"2013-03-11T12:11:43.953Z","type":"join"}
{"nick":"dennismartensson","reason":"Remote host closed the connection","date":"2013-03-11T12:45:36.098Z","type":"quit"}
{"nick":"ArxPoetica","reason":"Quit: Leaving.","date":"2013-03-11T13:09:53.173Z","type":"quit"}
{"nick":"dennismartensson","date":"2013-03-11T14:12:23.924Z","type":"join"}
{"nick":"dennisma_","date":"2013-03-11T15:07:50.348Z","type":"join"}
{"nick":"dennismartensson","reason":"Read error: Connection reset by peer","date":"2013-03-11T15:07:50.703Z","type":"quit"}
{"nick":"lluad","date":"2013-03-11T15:18:22.235Z","type":"join"}
{"nick":"andrewreedy","date":"2013-03-11T16:17:16.915Z","type":"join"}
{"nick":"vguerra","reason":"Remote host closed the connection","date":"2013-03-11T16:44:32.929Z","type":"quit"}
{"nick":"paulbjensen","date":"2013-03-11T17:04:03.170Z","type":"join"}
{"nick":"ArxPoetica1","date":"2013-03-11T18:00:39.477Z","type":"join"}
{"nick":"ArxPoetica1","reason":"Client Quit","date":"2013-03-11T18:00:42.425Z","type":"quit"}
{"nick":"ArxPoetica1","date":"2013-03-11T18:02:00.516Z","type":"join"}
{"nick":"ArxPoetica1","reason":"Client Quit","date":"2013-03-11T18:02:29.355Z","type":"quit"}
{"nick":"andrewreedy","reason":"Quit: andrewreedy","date":"2013-03-11T18:18:31.719Z","type":"quit"}
{"nick":"andrewreedy","date":"2013-03-11T18:19:36.922Z","type":"join"}
{"nick":"paulbjensen","reason":"Quit: paulbjensen","date":"2013-03-11T18:53:23.460Z","type":"quit"}
{"nick":"erobit2","date":"2013-03-11T19:11:35.966Z","type":"join"}
{"nick":"paulbjensen","date":"2013-03-11T19:14:37.453Z","type":"join"}
{"nick":"andrewreedy","reason":"Quit: andrewreedy","date":"2013-03-11T19:23:16.107Z","type":"quit"}
{"nick":"paulbjensen","reason":"Quit: paulbjensen","date":"2013-03-11T19:26:20.397Z","type":"quit"}
{"nick":"ArxPoetica","date":"2013-03-11T19:26:40.665Z","type":"join"}
{"nick":"ArxPoetica","message":"lo","date":"2013-03-11T19:26:51.776Z","type":"message"}
{"nick":"ArxPoetica","message":"hey owenb --> I assume you're fully aware of the release: http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/","date":"2013-03-11T19:27:08.488Z","type":"message"}
{"nick":"ArxPoetica","message":"I'm most interested in the streams bit -- how will that effect SS","date":"2013-03-11T19:28:32.592Z","type":"message"}
{"nick":"ArxPoetica","message":"i.e., how has your experimentation gone w/ streams?","date":"2013-03-11T19:28:48.024Z","type":"message"}
{"nick":"k1i","date":"2013-03-11T19:31:53.388Z","type":"join"}
{"nick":"k1i","message":"anyone in here using ss-angular?","date":"2013-03-11T19:32:01.194Z","type":"message"}
{"nick":"colinsullivan","date":"2013-03-11T20:01:59.336Z","type":"join"}
{"nick":"andrewreedy","date":"2013-03-11T20:23:37.980Z","type":"join"}
{"nick":"k1i_","date":"2013-03-11T20:40:43.358Z","type":"join"}
{"nick":"ArxPoetica","date":"2013-03-11T20:45:12.437Z","type":"part"}
{"nick":"ArxPoetica","date":"2013-03-11T20:45:56.119Z","type":"join"}
{"nick":"k1i","reason":"Ping timeout: 246 seconds","date":"2013-03-11T20:47:14.673Z","type":"quit"}
{"nick":"k1i_","new_nick":"k1i","date":"2013-03-11T20:47:15.183Z","type":"nick"}
{"nick":"ArxPoetica","message":"owenb â€” did you see my Q from earlier?","date":"2013-03-11T20:48:10.661Z","type":"message"}
{"nick":"erobit2","reason":"Ping timeout: 245 seconds","date":"2013-03-11T20:49:38.064Z","type":"quit"}
{"nick":"owenb","message":"hey","date":"2013-03-11T20:49:53.516Z","type":"message"}
{"nick":"owenb","message":"SS 0.3 should work fine with 0.10","date":"2013-03-11T20:50:11.803Z","type":"message"}
{"nick":"owenb","message":"let me know if you find any bugs","date":"2013-03-11T20:50:20.551Z","type":"message"}
{"nick":"owenb","message":"but from initial testing, all looks well","date":"2013-03-11T20:50:27.384Z","type":"message"}
{"nick":"owenb","message":"k1i if you want to use ss-angular you'll need to use the latest socketstream on github master","date":"2013-03-11T20:50:54.496Z","type":"message"}
{"nick":"owenb","message":"until i push a new release to npm shortly","date":"2013-03-11T20:51:07.460Z","type":"message"}
{"nick":"k1i","message":"there are a few decisions in ss-angular I am having trouble wrapping my head around","date":"2013-03-11T20:51:22.066Z","type":"message"}
{"nick":"owenb","message":"still doing a lot of experimentation around streams right now","date":"2013-03-11T20:51:32.628Z","type":"message"}
{"nick":"k1i","message":"- polling","date":"2013-03-11T20:51:48.585Z","type":"message"}
{"nick":"k1i","message":"- serverside rendering","date":"2013-03-11T20:51:58.007Z","type":"message"}
{"nick":"owenb","message":"initial gut feeling is we'll use them extensively on the server, but I've yet to decide if they are a good fit for the browser. plan on writing benchmarks shortly","date":"2013-03-11T20:52:19.119Z","type":"message"}
{"nick":"owenb","message":"k1i - i agree, but Ben is very much open to improvements and pull requests","date":"2013-03-11T20:52:41.948Z","type":"message"}
{"nick":"k1i","message":"well","date":"2013-03-11T20:52:58.018Z","type":"message"}
{"nick":"owenb","message":"or you can make your own module :)","date":"2013-03-11T20:53:05.182Z","type":"message"}
{"nick":"k1i","message":"with the way the routing occurs in SS-angular and the lack of integration tightly with express","date":"2013-03-11T20:53:07.688Z","type":"message"}
{"nick":"k1i","message":"is serverside rendering going to be doable?","date":"2013-03-11T20:53:14.386Z","type":"message"}
{"nick":"owenb","message":"do you want server-side rendering?","date":"2013-03-11T20:53:31.648Z","type":"message"}
{"nick":"k1i","message":"yes","date":"2013-03-11T20:53:41.506Z","type":"message"}
{"nick":"k1i","message":"but with the use of angular \"clientside routes\"","date":"2013-03-11T20:53:46.969Z","type":"message"}
{"nick":"k1i","message":"i dont know how viable that will be","date":"2013-03-11T20:53:54.117Z","type":"message"}
{"nick":"owenb","message":"yeah. i'm going through a similar issue myself at the moment","date":"2013-03-11T20:54:25.751Z","type":"message"}
{"nick":"owenb","message":"i favour client-side rendering","date":"2013-03-11T20:54:34.105Z","type":"message"}
{"nick":"owenb","message":"and data over the wire","date":"2013-03-11T20:54:38.065Z","type":"message"}
{"nick":"k1i","message":"I prefer both.","date":"2013-03-11T20:54:41.486Z","type":"message"}
{"nick":"k1i","message":"I want CS rendering and SS rendering for SEO","date":"2013-03-11T20:54:50.727Z","type":"message"}
{"nick":"owenb","message":"but when making a new docs site for 0.4 i really need it to be indexed in google","date":"2013-03-11T20:54:53.144Z","type":"message"}
{"nick":"owenb","message":"exactly","date":"2013-03-11T20:54:56.259Z","type":"message"}
{"nick":"owenb","message":"i'm looking to make it easier to combine both approaches in SS 0.4","date":"2013-03-11T20:55:14.391Z","type":"message"}
{"nick":"owenb","message":"mostly through tighter express integration (though you won't be forced to use Express)","date":"2013-03-11T20:55:32.685Z","type":"message"}
{"nick":"k1i","message":"yeah","date":"2013-03-11T21:02:42.354Z","type":"message"}
{"nick":"k1i","message":"also","date":"2013-03-11T21:02:43.349Z","type":"message"}
{"nick":"k1i","message":"I don't like the model update system in the ss-angular package - polling is wholly unnecessary if you use redis to sync servers","date":"2013-03-11T21:03:03.786Z","type":"message"}
{"nick":"k1i","message":"you also would avoid the need for sticky sessions","date":"2013-03-11T21:03:09.958Z","type":"message"}
{"nick":"k1i","message":"if redis was used to maintain session/state rather than in-memory session management","date":"2013-03-11T21:03:22.207Z","type":"message"}
{"nick":"owenb","message":"indeed","date":"2013-03-11T21:03:53.160Z","type":"message"}
{"nick":"ArxPoetica","message":"how would streams be used on the browser?","date":"2013-03-11T21:04:02.517Z","type":"message"}
{"nick":"ArxPoetica","message":"I find that confusing. :P","date":"2013-03-11T21:04:07.160Z","type":"message"}
{"nick":"ArxPoetica","message":"Are you talking about actually chunking data that way?","date":"2013-03-11T21:04:21.405Z","type":"message"}
{"nick":"owenb","message":"i would make it depend on redis, but it would be nice to support that and do away with polling altogether","date":"2013-03-11T21:04:37.912Z","type":"message"}
{"nick":"owenb","message":"if you can improve ss-angular I will do the work needed to make sure it works well with the new 0.4 service API","date":"2013-03-11T21:04:59.713Z","type":"message"}
{"nick":"owenb","message":"planning to do that anyway","date":"2013-03-11T21:05:03.279Z","type":"message"}
{"nick":"owenb","message":"as it's one of the main modules I want to launch 0.4 with","date":"2013-03-11T21:05:12.070Z","type":"message"}
{"nick":"owenb","message":"Arx: by sending the streams shim shipped with browserify","date":"2013-03-11T21:05:28.619Z","type":"message"}
{"nick":"ArxPoetica","message":"k1i â€” there's another methodology someone employed for angular routing","date":"2013-03-11T21:05:32.476Z","type":"message"}
{"nick":"owenb","message":"but it's only streams1 :(","date":"2013-03-11T21:05:39.254Z","type":"message"}
{"nick":"ArxPoetica","message":"other than polidore's","date":"2013-03-11T21:05:39.614Z","type":"message"}
{"nick":"ArxPoetica","message":"lemme see if I can find","date":"2013-03-11T21:05:48.844Z","type":"message"}
{"nick":"owenb","message":"and streams2 is VERY big","date":"2013-03-11T21:05:50.187Z","type":"message"}
{"nick":"k1i","message":"owenb: one sec","date":"2013-03-11T21:06:09.311Z","type":"message"}
{"nick":"owenb","message":"so I'm 90% decided that we won't ship this by default (streams1 is an additional 5kb when minified)","date":"2013-03-11T21:06:17.579Z","type":"message"}
{"nick":"ArxPoetica","message":"I'll have to look @ the browserify streams shim","date":"2013-03-11T21:07:18.116Z","type":"message"}
{"nick":"ArxPoetica","message":"so did you ultimately decide on browserify?","date":"2013-03-11T21:07:25.369Z","type":"message"}
{"nick":"k1i","message":"ok so, owenb","date":"2013-03-11T21:07:29.347Z","type":"message"}
{"nick":"k1i","message":"I don't like SS-angular's filestructure, either","date":"2013-03-11T21:07:35.610Z","type":"message"}
{"nick":"k1i","message":"I don't like the massive split between server/clientside","date":"2013-03-11T21:07:43.823Z","type":"message"}
{"nick":"owenb","message":"not 100% decided yet","date":"2013-03-11T21:08:05.701Z","type":"message"}
{"nick":"owenb","message":"but using for now","date":"2013-03-11T21:08:11.071Z","type":"message"}
{"nick":"k1i","message":"the way I want to do it is, use the same files for each environment, and then, on packAssets(), do some clever file manipulation to change local model calls to RPC calls in model files etc.","date":"2013-03-11T21:08:25.480Z","type":"message"}
{"nick":"owenb","message":"everything is in flux atm.... i really want 0.4 to be awesome in time for April (realtime conf eu)","date":"2013-03-11T21:08:30.957Z","type":"message"}
{"nick":"owenb","message":"and out and working, at least in a preview state","date":"2013-03-11T21:08:41.473Z","type":"message"}
{"nick":"k1i","message":"Meteor has some major problems, IMO, and I want to use something like socketstream+ angular + an ORM to make the equivalent of a well-written meteor","date":"2013-03-11T21:09:17.179Z","type":"message"}
{"nick":"ArxPoetica","message":"Here's an alternate way: https://github.com/americanyak/ss-angular-demo","date":"2013-03-11T21:09:17.755Z","type":"message"}
{"nick":"ArxPoetica","message":"I don't think this uses ss-angular, but wraps it another way","date":"2013-03-11T21:09:32.578Z","type":"message"}
{"nick":"k1i","message":"I believe that all of the routes should be the exact same, the serverside files and clientside files should be the same, and the ORM should be divorced from the system","date":"2013-03-11T21:09:51.068Z","type":"message"}
{"nick":"ArxPoetica","message":"not 100% sure (that's actually my repository, but Davis Ford made most of the commits)","date":"2013-03-11T21:09:52.197Z","type":"message"}
{"nick":"k1i","message":"I also believe that redis should be used as a state storing machine instead of memory (so sticky sessions arent necessary, and horizontal scaling is cake)","date":"2013-03-11T21:10:09.657Z","type":"message"}
{"nick":"owenb","message":"k1i you should read the comment i posted today: https://github.com/socketstream/socketstream/pull/358","date":"2013-03-11T21:10:20.284Z","type":"message"}
{"nick":"k1i","message":"I also believe that ZeroMQ should be used to propagate PUSHes instead of polling","date":"2013-03-11T21:10:23.943Z","type":"message"}
{"nick":"k1i","message":"that kind of a system would be the cat's meow","date":"2013-03-11T21:10:29.056Z","type":"message"}
{"nick":"k1i","message":"I hate dependencies, but everyone is using redis anyway","date":"2013-03-11T21:10:53.016Z","type":"message"}
{"nick":"k1i","message":"ZeroMQ is small enough that - who cares","date":"2013-03-11T21:11:02.051Z","type":"message"}
{"nick":"ArxPoetica","message":"not EVERYONE","date":"2013-03-11T21:11:04.688Z","type":"message"}
{"nick":"ArxPoetica","message":":P","date":"2013-03-11T21:11:06.053Z","type":"message"}
{"nick":"k1i","message":"Everyone.","date":"2013-03-11T21:11:07.900Z","type":"message"}
{"nick":"ArxPoetica","message":"lol","date":"2013-03-11T21:11:11.178Z","type":"message"}
{"nick":"owenb","message":"k1i. and also potentially very complicated to setup which will put people off. believe me, i've been there :)","date":"2013-03-11T21:11:13.085Z","type":"message"}
{"nick":"k1i","message":"well","date":"2013-03-11T21:11:16.692Z","type":"message"}
{"nick":"ArxPoetica","message":"I'm actually trying to get away from it.","date":"2013-03-11T21:11:17.182Z","type":"message"}
{"nick":"k1i","message":"ArxPoetica: and move to what kind of a distributed in-memory cache?","date":"2013-03-11T21:11:25.136Z","type":"message"}
{"nick":"ArxPoetica","message":"local storage ha ha","date":"2013-03-11T21:11:33.899Z","type":"message"}
{"nick":"k1i","message":"because in-memory session handling in an environment like meteor,derby,socketstream isnt going to work","date":"2013-03-11T21:11:36.621Z","type":"message"}
{"nick":"k1i","message":"because horizontal scaling becomes impossible","date":"2013-03-11T21:11:41.736Z","type":"message"}
{"nick":"k1i","message":"without stupid shit like sticky sessions","date":"2013-03-11T21:11:49.820Z","type":"message"}
{"nick":"owenb","message":"i think you will always need sticky sessions","date":"2013-03-11T21:12:02.020Z","type":"message"}
{"nick":"ArxPoetica","message":"SSD ftw","date":"2013-03-11T21:12:03.922Z","type":"message"}
{"nick":"owenb","message":"it just makes sense","date":"2013-03-11T21:12:04.738Z","type":"message"}
{"nick":"ArxPoetica","message":":P","date":"2013-03-11T21:12:06.311Z","type":"message"}
{"nick":"k1i","message":"why?","date":"2013-03-11T21:12:09.154Z","type":"message"}
{"nick":"ArxPoetica","message":"Okay, I'll stop trolling now on that.","date":"2013-03-11T21:12:15.248Z","type":"message"}
{"nick":"owenb","message":"when you write you want to persist to redis or something like that","date":"2013-03-11T21:12:22.241Z","type":"message"}
{"nick":"owenb","message":"but most of the time you're just reading","date":"2013-03-11T21:12:25.960Z","type":"message"}
{"nick":"ArxPoetica","message":"I am actually curious about ZeroMQ","date":"2013-03-11T21:12:27.700Z","type":"message"}
{"nick":"k1i","message":"well, here's the issue","date":"2013-03-11T21:12:32.812Z","type":"message"}
{"nick":"k1i","message":"I want my clients to be server-independent, like in a stateless system","date":"2013-03-11T21:12:43.530Z","type":"message"}
{"nick":"owenb","message":"and you're constantly connected to the same piece of hardware anyway","date":"2013-03-11T21:12:45.450Z","type":"message"}
{"nick":"k1i","message":"by moving that state to redis - something everything can connect to","date":"2013-03-11T21:12:49.191Z","type":"message"}
{"nick":"owenb","message":"so why not keep all the session data in ram","date":"2013-03-11T21:12:52.410Z","type":"message"}
{"nick":"k1i","message":"you can remove the dependency on stick ysession","date":"2013-03-11T21:12:55.136Z","type":"message"}
{"nick":"k1i","message":"because you are keeping it in RAM, in Redis, just in a distributed RAM cache","date":"2013-03-11T21:13:04.646Z","type":"message"}
{"nick":"k1i","message":"the distributed portion of it is already done for you","date":"2013-03-11T21:13:17.305Z","type":"message"}
{"nick":"owenb","message":"but a ws connection maybe open for hours","date":"2013-03-11T21:13:18.974Z","type":"message"}
{"nick":"k1i","message":"yes, and that doesnt require sticky sessions to deal with","date":"2013-03-11T21:13:25.453Z","type":"message"}
{"nick":"k1i","message":"long polling does","date":"2013-03-11T21:13:27.646Z","type":"message"}
{"nick":"owenb","message":"yes","date":"2013-03-11T21:13:31.035Z","type":"message"}
{"nick":"owenb","message":"i think all reads should be done from ram where possible","date":"2013-03-11T21:13:46.354Z","type":"message"}
{"nick":"k1i","message":"why would a WS require sticky sessions to remain open?","date":"2013-03-11T21:13:53.356Z","type":"message"}
{"nick":"owenb","message":"but i agree, you should be able to connect to any other service","date":"2013-03-11T21:13:56.660Z","type":"message"}
{"nick":"k1i","message":"long polling/comet yes","date":"2013-03-11T21:13:59.622Z","type":"message"}
{"nick":"owenb","message":"server*","date":"2013-03-11T21:13:59.830Z","type":"message"}
{"nick":"owenb","message":"and load from redis","date":"2013-03-11T21:14:03.340Z","type":"message"}
{"nick":"k1i","message":"WS is a TCP socket, no?","date":"2013-03-11T21:14:06.418Z","type":"message"}
{"nick":"owenb","message":"which is kinda what we have already anyway","date":"2013-03-11T21:14:10.121Z","type":"message"}
{"nick":"owenb","message":"yes","date":"2013-03-11T21:14:12.629Z","type":"message"}
{"nick":"k1i","message":"so why would you need sticky sessions to persist the machine it happens to be connecting to if it is an open socket","date":"2013-03-11T21:14:35.468Z","type":"message"}
{"nick":"k1i","message":"I can see this with a stateless protocol (longpolling), but, not with an open socket","date":"2013-03-11T21:15:13.515Z","type":"message"}
{"nick":"owenb","message":"i find myself agreeing. i think what you describe is exactly what happens now tbh if you use redis to store session data","date":"2013-03-11T21:16:04.301Z","type":"message"}
{"nick":"k1i","message":"but can you arbitrarily connect to any node and have the same persisted session?","date":"2013-03-11T21:16:19.730Z","type":"message"}
{"nick":"owenb","message":"yes","date":"2013-03-11T21:16:24.467Z","type":"message"}
{"nick":"owenb","message":"if you use the connect redis session store","date":"2013-03-11T21:16:40.024Z","type":"message"}
{"nick":"owenb","message":"not the in memory one","date":"2013-03-11T21:16:44.826Z","type":"message"}
{"nick":"k1i","message":"so","date":"2013-03-11T21:16:51.412Z","type":"message"}
{"nick":"owenb","message":"the key is in the writes","date":"2013-03-11T21:16:51.700Z","type":"message"}
{"nick":"k1i","message":"ok","date":"2013-03-11T21:16:54.345Z","type":"message"}
{"nick":"owenb","message":"they are all pushed to redis","date":"2013-03-11T21:17:01.016Z","type":"message"}
{"nick":"k1i","message":"how does that happen","date":"2013-03-11T21:17:01.232Z","type":"message"}
{"nick":"k1i","message":"are they queued?","date":"2013-03-11T21:17:04.503Z","type":"message"}
{"nick":"k1i","message":"a la mongo","date":"2013-03-11T21:17:17.331Z","type":"message"}
{"nick":"owenb","message":"not sure of the exact implementation - it's just the default connect session driver. you can use any connect session store with SS","date":"2013-03-11T21:17:48.147Z","type":"message"}
{"nick":"k1i","message":"ok","date":"2013-03-11T21:17:58.552Z","type":"message"}
{"nick":"k1i","message":"I really like that","date":"2013-03-11T21:18:18.547Z","type":"message"}
{"nick":"k1i","message":"so, sticky sessions would effectively be unnecessary?","date":"2013-03-11T21:18:25.344Z","type":"message"}
{"nick":"ArxPoetica","message":"What's the diff between sticky and store?","date":"2013-03-11T21:18:31.398Z","type":"message"}
{"nick":"k1i","message":"because you can technically make stateless requests?","date":"2013-03-11T21:18:31.608Z","type":"message"}
{"nick":"k1i","message":"Sticky sessions are a loadbalancer-level setting that allow you to map specific HTTPrequests to a specific server instance","date":"2013-03-11T21:18:49.592Z","type":"message"}
{"nick":"ArxPoetica","message":"ah","date":"2013-03-11T21:18:54.880Z","type":"message"}
{"nick":"ArxPoetica","message":"right â€” hence the horizontal concern","date":"2013-03-11T21:19:07.404Z","type":"message"}
{"nick":"owenb","message":"yes. there is no need for loadbalancers really","date":"2013-03-11T21:19:09.647Z","type":"message"}
{"nick":"k1i","message":"it is a shitty way (IMO) to achieve a \"stateless-like\" system in a multi-server environment","date":"2013-03-11T21:19:12.254Z","type":"message"}
{"nick":"owenb","message":"read this: http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation/","date":"2013-03-11T21:19:27.340Z","type":"message"}
{"nick":"k1i","message":"if you use redis as your session store, instead of relying on individual nodes to maintain state","date":"2013-03-11T21:19:29.891Z","type":"message"}
{"nick":"owenb","message":"about load balancing","date":"2013-03-11T21:19:33.887Z","type":"message"}
{"nick":"k1i","message":"you dont need that","date":"2013-03-11T21:19:41.224Z","type":"message"}
{"nick":"k1i","message":"my environment will always have native websocket support (browser enforcement)","date":"2013-03-11T21:20:14.205Z","type":"message"}
{"nick":"owenb","message":"right guys i need to get back to working on 0.4. got a small talk to give on wednesday and right now a lot of stuff is in a broken state","date":"2013-03-11T21:20:20.431Z","type":"message"}
{"nick":"k1i","message":"gotcha","date":"2013-03-11T21:20:24.748Z","type":"message"}
{"nick":"k1i","message":"so","date":"2013-03-11T21:20:29.642Z","type":"message"}
{"nick":"k1i","message":"ss-redis is the session store module?","date":"2013-03-11T21:20:32.996Z","type":"message"}
{"nick":"owenb","message":"no just connect.redis","date":"2013-03-11T21:20:43.790Z","type":"message"}
{"nick":"owenb","message":"whatever it's called :)","date":"2013-03-11T21:20:52.599Z","type":"message"}
{"nick":"k1i","message":"gotcha","date":"2013-03-11T21:20:57.367Z","type":"message"}
{"nick":"owenb","message":"think we will continue using connect session stores in 0.4 as they are the most mature and there are adapters for every db on earth lol","date":"2013-03-11T21:21:24.365Z","type":"message"}
{"nick":"ArxPoetica","message":"k1i â€” did you get my ss-angular-routing link?","date":"2013-03-11T21:21:27.126Z","type":"message"}
{"nick":"k1i","message":"yes","date":"2013-03-11T21:21:31.895Z","type":"message"}
{"nick":"k1i","message":"I saw it","date":"2013-03-11T21:21:33.008Z","type":"message"}
{"nick":"ArxPoetica","message":"ok","date":"2013-03-11T21:21:36.141Z","type":"message"}
{"nick":"k1i","message":"I believe that querying mydomain.com/route should be the same on the client as it is on the server","date":"2013-03-11T21:21:51.469Z","type":"message"}
{"nick":"k1i","message":"for SEO purposes","date":"2013-03-11T21:22:01.382Z","type":"message"}
{"nick":"k1i","message":"automatically that is","date":"2013-03-11T21:22:09.970Z","type":"message"}
{"nick":"ArxPoetica","message":"doesn't derby do that?","date":"2013-03-11T21:22:19.673Z","type":"message"}
{"nick":"k1i","message":"yes, but derby fails in many other areas","date":"2013-03-11T21:22:37.320Z","type":"message"}
{"nick":"owenb","message":"need to go for a bit. will check back in later. chat soon guys","date":"2013-03-11T21:22:40.101Z","type":"message"}
{"nick":"ArxPoetica","message":"agreed","date":"2013-03-11T21:22:41.187Z","type":"message"}
{"nick":"ArxPoetica","message":"cya","date":"2013-03-11T21:22:45.090Z","type":"message"}
{"nick":"k1i","message":"SS + angular = the best.","date":"2013-03-11T21:22:45.412Z","type":"message"}
{"nick":"ArxPoetica","message":"love angular but haven't had a reason to dive in fully yet","date":"2013-03-11T21:22:59.487Z","type":"message"}
{"nick":"k1i","message":"ss + angular + redis + zeroMQ + an ORM is going to be the best  \"real\" system","date":"2013-03-11T21:23:03.118Z","type":"message"}
{"nick":"ArxPoetica","message":"and which ORM?","date":"2013-03-11T21:23:33.191Z","type":"message"}
{"nick":"k1i","message":"should be ORM agnostic.","date":"2013-03-11T21:23:38.530Z","type":"message"}
{"nick":"k1i","message":"you don't even technically need an ORM","date":"2013-03-11T21:23:45.302Z","type":"message"}
{"nick":"k1i","message":"you can execute direct RPC calls to a compliant database connection over the wire","date":"2013-03-11T21:23:56.114Z","type":"message"}
{"nick":"k1i","message":"mongo, et al.","date":"2013-03-11T21:24:02.791Z","type":"message"}
{"nick":"k1i","message":"ZeroMQ will take the place of DB polling","date":"2013-03-11T21:24:43.900Z","type":"message"}
{"nick":"ArxPoetica","message":"ss is flexible that way, eys","date":"2013-03-11T21:25:17.829Z","type":"message"}
{"nick":"ArxPoetica","message":"*yes","date":"2013-03-11T21:25:18.045Z","type":"message"}
{"nick":"ArxPoetica","message":"but you're sold on redis as the *only* offering? :P","date":"2013-03-11T21:25:18.615Z","type":"message"}
{"nick":"ArxPoetica","message":"sure","date":"2013-03-11T21:25:21.704Z","type":"message"}
{"nick":"k1i","message":"redis for session storage, honestly, that is a minor portion of it","date":"2013-03-11T21:25:28.072Z","type":"message"}
{"nick":"k1i","message":"any kind of distributed store that can store a key/value will do","date":"2013-03-11T21:25:37.526Z","type":"message"}
{"nick":"ArxPoetica","message":"Could one just use Mongo that way? MubSub?","date":"2013-03-11T21:26:26.272Z","type":"message"}
{"nick":"k1i","message":"redis is just nice because it is tested and scales well, memcache would do the exact same thing (but you need to tweak the expiry settings, etc)","date":"2013-03-11T21:26:30.245Z","type":"message"}
{"nick":"k1i","message":"Mongo shouldnt be used for session persistence, IMO","date":"2013-03-11T21:26:39.577Z","type":"message"}
{"nick":"k1i","message":"massive overkill for what amounts as a KV store","date":"2013-03-11T21:26:53.912Z","type":"message"}
{"nick":"ArxPoetica","message":"I've been wondering over that recently â€” like â€” I love Mongo for many things","date":"2013-03-11T21:27:12.524Z","type":"message"}
{"nick":"k1i","message":"and the real issue is the global write lock","date":"2013-03-11T21:27:15.580Z","type":"message"}
{"nick":"ArxPoetica","message":"But could it","date":"2013-03-11T21:27:17.664Z","type":"message"}
{"nick":"k1i","message":"yes","date":"2013-03-11T21:27:19.037Z","type":"message"}
{"nick":"ArxPoetica","message":"lol","date":"2013-03-11T21:27:22.392Z","type":"message"}
{"nick":"ArxPoetica","message":"https://github.com/scttnlsn/mubsub","date":"2013-03-11T21:27:30.603Z","type":"message"}
{"nick":"k1i","message":"redis is just a better store though for massive writespeed","date":"2013-03-11T21:27:34.271Z","type":"message"}
{"nick":"ArxPoetica","message":"right","date":"2013-03-11T21:27:39.453Z","type":"message"}
{"nick":"k1i","message":"we are just talking sessions here","date":"2013-03-11T21:27:48.949Z","type":"message"}
{"nick":"k1i","message":"not model persistence","date":"2013-03-11T21:27:50.568Z","type":"message"}
{"nick":"ArxPoetica","message":"sure","date":"2013-03-11T21:28:00.519Z","type":"message"}
{"nick":"ArxPoetica","message":"I get the diff","date":"2013-03-11T21:28:07.351Z","type":"message"}
{"nick":"ArxPoetica","message":"The only reason I even started asking the question is because of costs associated w/ running different dbs.","date":"2013-03-11T21:28:42.156Z","type":"message"}
{"nick":"k1i","message":"yep","date":"2013-03-11T21:28:48.289Z","type":"message"}
{"nick":"ArxPoetica","message":"not really a db guy, tbh","date":"2013-03-11T21:29:03.922Z","type":"message"}
{"nick":"k1i","message":"basically, in my ideal architecture (for realtime)","date":"2013-03-11T21:29:05.827Z","type":"message"}
{"nick":"k1i","message":"you have tons of socketstream servers running express/your app's serverside code/models","date":"2013-03-11T21:29:21.428Z","type":"message"}
{"nick":"k1i","message":"you have a redis cluster on top of that","date":"2013-03-11T21:29:39.443Z","type":"message"}
{"nick":"k1i","message":"all of the socketstream servers communicate model updates to eachother via ZeroMQ (agnostic of DB)","date":"2013-03-11T21:29:56.199Z","type":"message"}
{"nick":"evangenieur","reason":"Remote host closed the connection","date":"2013-03-11T21:30:27.382Z","type":"quit"}
{"nick":"ArxPoetica","message":"do you have an ideal db?","date":"2013-03-11T21:30:27.592Z","type":"message"}
{"nick":"k1i","message":"you mean for model persistence?","date":"2013-03-11T21:30:37.476Z","type":"message"}
{"nick":"ArxPoetica","message":"yes","date":"2013-03-11T21:30:40.255Z","type":"message"}
{"nick":"k1i","message":"mongo or PGSQL ;)","date":"2013-03-11T21:30:41.292Z","type":"message"}
{"nick":"ArxPoetica","message":"right","date":"2013-03-11T21:30:46.305Z","type":"message"}
{"nick":"k1i","message":"but the idea is to have a system that can run completely agnostic to the model datastore","date":"2013-03-11T21:31:25.236Z","type":"message"}
{"nick":"k1i","message":"technically you could have all models in memory-only","date":"2013-03-11T21:31:33.023Z","type":"message"}
{"nick":"k1i","message":"being very transient","date":"2013-03-11T21:31:41.914Z","type":"message"}
{"nick":"ArxPoetica","message":"yeah, I'm on a bit of a shoestring trying to set something up and not choke if it has a sudden dig or viral hit","date":"2013-03-11T21:31:50.549Z","type":"message"}
{"nick":"k1i","message":"but basically, this is the way meteor should have been written","date":"2013-03-11T21:31:54.022Z","type":"message"}
{"nick":"ArxPoetica","message":"spike","date":"2013-03-11T21:31:54.980Z","type":"message"}
{"nick":"k1i","message":"also","date":"2013-03-11T21:31:59.935Z","type":"message"}
{"nick":"k1i","message":"very easy to scale using any kind of heroku, ec2 (opsworks), etc.","date":"2013-03-11T21:32:14.381Z","type":"message"}
{"nick":"ArxPoetica","message":"Been using NodeJitsu","date":"2013-03-11T21:32:26.190Z","type":"message"}
{"nick":"k1i","message":"so basically you have 3 places to scale","date":"2013-03-11T21:32:32.112Z","type":"message"}
{"nick":"ArxPoetica","message":"but I'll probably switch to ec2 for cost","date":"2013-03-11T21:32:34.974Z","type":"message"}
{"nick":"k1i","message":"DB servers, app servers, and session persistence server","date":"2013-03-11T21:32:43.871Z","type":"message"}
{"nick":"k1i","message":"the session persistence server is honestly the cheapest part of the whole thing","date":"2013-03-11T21:32:59.539Z","type":"message"}
{"nick":"ArxPoetica","message":"That's interesting.","date":"2013-03-11T21:33:07.691Z","type":"message"}
{"nick":"k1i","message":"redis costs nothing to run","date":"2013-03-11T21:33:11.693Z","type":"message"}
{"nick":"ArxPoetica","message":"yeah?","date":"2013-03-11T21:33:17.794Z","type":"message"}
{"nick":"ArxPoetica","message":"Mind me asking what's your background/where you're coming from?","date":"2013-03-11T21:33:31.099Z","type":"message"}
{"nick":"ArxPoetica","message":"(And I don't think I've noticed you in here before?)","date":"2013-03-11T21:33:43.826Z","type":"message"}
{"nick":"k1i","message":"ruby on rails","date":"2013-03-11T21:33:47.196Z","type":"message"}
{"nick":"ArxPoetica","message":"gotcha","date":"2013-03-11T21:33:51.981Z","type":"message"}
{"nick":"k1i","message":"ive been architecting and planning this for quite a while","date":"2013-03-11T21:33:55.651Z","type":"message"}
{"nick":"k1i","message":"meteor and derby are unscalable and unacceptable for a lot of reasons","date":"2013-03-11T21:34:03.875Z","type":"message"}
{"nick":"k1i","message":"socketstream is perfect IMO","date":"2013-03-11T21:34:06.922Z","type":"message"}
{"nick":"ArxPoetica","message":"It's been great so far","date":"2013-03-11T21:34:13.137Z","type":"message"}
{"nick":"k1i","message":"meteor is less than derby in some ways, and derby less than meteor in others","date":"2013-03-11T21:34:21.589Z","type":"message"}
{"nick":"ArxPoetica","message":"Even 0.3 <â€” which isn't \"production ready\" is pretty awesome.","date":"2013-03-11T21:34:28.757Z","type":"message"}
{"nick":"k1i","message":"anyway, a session identifier and some arbitrary data (subs, etc)","date":"2013-03-11T21:34:44.241Z","type":"message"}
{"nick":"k1i","message":"will be less than 125kb","date":"2013-03-11T21:34:46.497Z","type":"message"}
{"nick":"k1i","message":"but","date":"2013-03-11T21:34:47.415Z","type":"message"}
{"nick":"k1i","message":"8192 125kb sessions can fit in 1gb of RAM","date":"2013-03-11T21:34:54.244Z","type":"message"}
{"nick":"k1i","message":"cheap","date":"2013-03-11T21:34:57.631Z","type":"message"}
{"nick":"ArxPoetica","message":"interesting","date":"2013-03-11T21:35:23.604Z","type":"message"}
{"nick":"k1i","message":"concurrents, mind you","date":"2013-03-11T21:35:33.470Z","type":"message"}
{"nick":"k1i","message":"your sessions are likely going to be less than a few KB","date":"2013-03-11T21:35:52.572Z","type":"message"}
{"nick":"ArxPoetica","message":"gotcha","date":"2013-03-11T21:36:01.038Z","type":"message"}
{"nick":"ArxPoetica","message":"I've been trying to price this out for my client","date":"2013-03-11T21:36:32.591Z","type":"message"}
{"nick":"k1i","message":"the session will store the unique client identifier, any and all subscriptions, and any other lightweight non-datastore-meritorious data","date":"2013-03-11T21:36:37.855Z","type":"message"}
{"nick":"k1i","message":"i was talking to charuru (meteor guy) - he runs 700 concurrents before getting massive slowdown on a medium EC2 instance","date":"2013-03-11T21:37:12.953Z","type":"message"}
{"nick":"k1i","message":"(outsources DB hosting)","date":"2013-03-11T21:37:25.304Z","type":"message"}
{"nick":"k1i","message":"and meteor is super-inefficient for a lot of reasons","date":"2013-03-11T21:37:34.052Z","type":"message"}
{"nick":"k1i","message":"that is a single node instance","date":"2013-03-11T21:37:54.419Z","type":"message"}
{"nick":"ArxPoetica","message":"that's epic","date":"2013-03-11T21:40:09.657Z","type":"message"}
{"nick":"ArxPoetica","message":"I actually love Meteor for a lot of reasons â€” but love SS way more","date":"2013-03-11T21:40:19.940Z","type":"message"}
{"nick":"k1i","message":"Meteor is going to succeed due to 11.2m in funding","date":"2013-03-11T21:40:31.582Z","type":"message"}
{"nick":"k1i","message":"they have a shitty model with a few nice pieces","date":"2013-03-11T21:40:39.396Z","type":"message"}
{"nick":"k1i","message":"with no horizontal scaling in mind, etc.","date":"2013-03-11T21:40:49.120Z","type":"message"}
{"nick":"ArxPoetica","message":"yeah","date":"2013-03-11T21:40:50.595Z","type":"message"}
{"nick":"ArxPoetica","message":"I know someone who tried to scale Derby horizontal","date":"2013-03-11T21:41:03.405Z","type":"message"}
{"nick":"ArxPoetica","message":"crashed","date":"2013-03-11T21:41:06.828Z","type":"message"}
{"nick":"k1i","message":"Derby has a lot of problems","date":"2013-03-11T21:41:08.039Z","type":"message"}
{"nick":"k1i","message":"it has good intentions","date":"2013-03-11T21:41:13.228Z","type":"message"}
{"nick":"ArxPoetica","message":"he said he'd never do it that way again","date":"2013-03-11T21:41:16.800Z","type":"message"}
{"nick":"ArxPoetica","message":"I knew they weren't going to work for me when I went into IRC and they responded like know-it-alls to problems I presented","date":"2013-03-11T21:41:41.083Z","type":"message"}
{"nick":"k1i","message":"I believe the method I described to you is the best, simplest way to scale","date":"2013-03-11T21:41:42.176Z","type":"message"}
{"nick":"ArxPoetica","message":":P","date":"2013-03-11T21:41:42.387Z","type":"message"}
{"nick":"ArxPoetica","message":"yeah, that's awesome","date":"2013-03-11T21:41:54.080Z","type":"message"}
{"nick":"k1i","message":"zeroMQ for PUSH (rather than polling)","date":"2013-03-11T21:41:56.112Z","type":"message"}
{"nick":"k1i","message":"redis (or memcached or if you must - mongo) for session storage","date":"2013-03-11T21:42:07.040Z","type":"message"}
{"nick":"ArxPoetica","message":"Gonna go look into that","date":"2013-03-11T21:42:11.698Z","type":"message"}
{"nick":"k1i","message":"socketstream servers for app hosting","date":"2013-03-11T21:42:18.765Z","type":"message"}
{"nick":"ArxPoetica","message":"no â€” no mongo ha ha","date":"2013-03-11T21:42:20.870Z","type":"message"}
{"nick":"ArxPoetica","message":"using mongo for models and stuff though","date":"2013-03-11T21:42:27.527Z","type":"message"}
{"nick":"k1i","message":"yes I agree with that","date":"2013-03-11T21:42:32.634Z","type":"message"}
{"nick":"k1i","message":"SocketStream is 80% of what I need","date":"2013-03-11T21:42:43.702Z","type":"message"}
{"nick":"k1i","message":"Angular is another 10%","date":"2013-03-11T21:42:47.268Z","type":"message"}
{"nick":"k1i","message":"the rest of it I am probably going to have to write","date":"2013-03-11T21:42:54.991Z","type":"message"}
{"nick":"ArxPoetica","message":"FYI this is a really crude app I and another guy built using SS: https://github.com/engagementgamelab/CivicSeed","date":"2013-03-11T21:43:16.147Z","type":"message"}
{"nick":"ArxPoetica","message":"has some big bugs, and it's not done, but it works","date":"2013-03-11T21:43:27.705Z","type":"message"}
{"nick":"ArxPoetica","message":"also has major need for tests","date":"2013-03-11T21:43:37.638Z","type":"message"}
{"nick":"k1i","message":"also","date":"2013-03-11T21:43:40.742Z","type":"message"}
{"nick":"k1i","message":"I want the ability to define mongodb connections on the fly","date":"2013-03-11T21:43:53.473Z","type":"message"}
{"nick":"k1i","message":"for a multi-tenant environment.","date":"2013-03-11T21:43:56.338Z","type":"message"}
{"nick":"k1i","message":"this is sort of a personal requirement","date":"2013-03-11T21:44:02.451Z","type":"message"}
{"nick":"ArxPoetica","message":"what does that mean?","date":"2013-03-11T21:44:14.255Z","type":"message"}
{"nick":"ArxPoetica","message":"on the fly","date":"2013-03-11T21:44:16.624Z","type":"message"}
{"nick":"ArxPoetica","message":"like from the client?","date":"2013-03-11T21:44:24.081Z","type":"message"}
{"nick":"k1i","message":"well on the serverside","date":"2013-03-11T21:44:29.280Z","type":"message"}
{"nick":"k1i","message":"but","date":"2013-03-11T21:44:29.778Z","type":"message"}
{"nick":"k1i","message":"the client could potentially determine which DB to connect to","date":"2013-03-11T21:44:38.832Z","type":"message"}
{"nick":"k1i","message":"it would connect for whatever information it would need to pull","date":"2013-03-11T21:44:47.615Z","type":"message"}
{"nick":"k1i","message":"and then close the connection","date":"2013-03-11T21:44:49.638Z","type":"message"}
{"nick":"k1i","message":"im just saying at runtime","date":"2013-03-11T21:45:10.174Z","type":"message"}
{"nick":"ArxPoetica","message":"i c","date":"2013-03-11T21:45:21.277Z","type":"message"}
{"nick":"ArxPoetica","message":"well, thx for the chat","date":"2013-03-11T21:45:54.429Z","type":"message"}
{"nick":"ArxPoetica","message":"gotta run soon","date":"2013-03-11T21:45:57.070Z","type":"message"}
{"nick":"ArxPoetica","message":"are you in here a lot? I haven't noticed you before...","date":"2013-03-11T21:46:05.497Z","type":"message"}
{"nick":"ArxPoetica","message":"though there are a lot of peeps who sorta lie dormant","date":"2013-03-11T21:46:27.084Z","type":"message"}
{"nick":"k1i","message":"no, I just found this channel","date":"2013-03-11T21:46:42.953Z","type":"message"}
{"nick":"k1i","message":"I am in the derby/meteor channels","date":"2013-03-11T21:46:46.283Z","type":"message"}
{"nick":"k1i","message":"I am probably going to start in the next few days on my own ss-angular","date":"2013-03-11T21:46:54.514Z","type":"message"}
{"nick":"ArxPoetica","message":"awesome","date":"2013-03-11T21:47:02.565Z","type":"message"}
{"nick":"ArxPoetica","message":"if you see a guy in here â€” I think his handle is zenocon â€” he worked on the ss-angular-demo i sent","date":"2013-03-11T21:47:26.537Z","type":"message"}
{"nick":"k1i","message":"gotcha","date":"2013-03-11T21:48:23.884Z","type":"message"}
{"nick":"k1i","message":"I will talk to him about it","date":"2013-03-11T21:48:26.009Z","type":"message"}
{"nick":"k1i","message":"but odds are my implementation is going to be entirely different than anything else","date":"2013-03-11T21:48:35.595Z","type":"message"}
{"nick":"k1i","message":"I firmly believe in DRY","date":"2013-03-11T21:48:39.557Z","type":"message"}
{"nick":"ArxPoetica","message":"very","date":"2013-03-11T21:49:15.813Z","type":"message"}
{"nick":"k1i","message":"in my strong opinion, I believe that something like grunt should sift through a model file","date":"2013-03-11T21:49:17.880Z","type":"message"}
{"nick":"k1i","message":"and you can run the model on both client and server","date":"2013-03-11T21:49:28.371Z","type":"message"}
{"nick":"ArxPoetica","message":"yeah â€” that's the goal of ss","date":"2013-03-11T21:49:38.657Z","type":"message"}
{"nick":"k1i","message":"at \"compile time,\" grunt could sift through a model file and replace any local function def","date":"2013-03-11T21:49:41.021Z","type":"message"}
{"nick":"k1i","message":"with an RPC call","date":"2013-03-11T21:49:46.968Z","type":"message"}
{"nick":"ArxPoetica","message":"but implementation could be better","date":"2013-03-11T21:49:47.931Z","type":"message"}
{"nick":"k1i","message":"seamlessly","date":"2013-03-11T21:49:48.143Z","type":"message"}
{"nick":"k1i","message":"take the same args, etc.","date":"2013-03-11T21:49:50.620Z","type":"message"}
{"nick":"k1i","message":"so the serverside calling convention of a model function is the same as the clientside calling convention","date":"2013-03-11T21:50:05.204Z","type":"message"}
{"nick":"k1i","message":"one would just seamlessly be replaced with RPC code, though","date":"2013-03-11T21:50:12.532Z","type":"message"}
{"nick":"k1i","message":"for the packaged client JS","date":"2013-03-11T21:50:20.061Z","type":"message"}
{"nick":"k1i","message":"if that makes any sense","date":"2013-03-11T21:50:28.676Z","type":"message"}
{"nick":"k1i","message":"so User.js","date":"2013-03-11T21:50:32.081Z","type":"message"}
{"nick":"k1i","message":"defines App.Model.User as a class","date":"2013-03-11T21:50:36.961Z","type":"message"}
{"nick":"ArxPoetica","message":"So I'm curious how you maintain convention (with grunt, for example), but be open enough for the different models.","date":"2013-03-11T21:50:37.440Z","type":"message"}
{"nick":"k1i","message":"say there is a function updateTwitter() in there that obviously requires serverside RPC (for credentials, etc, purposes)","date":"2013-03-11T21:50:57.878Z","type":"message"}
{"nick":"ArxPoetica","message":"I've created my own model convention to not repeat myself, but I'm interested in where you go with this","date":"2013-03-11T21:51:02.662Z","type":"message"}
{"nick":"ArxPoetica","message":"grunt is a good idea, btw","date":"2013-03-11T21:51:10.584Z","type":"message"}
{"nick":"k1i","message":"updateTwitter() in the client JS gets rewritten with an SS RPC call","date":"2013-03-11T21:51:13.816Z","type":"message"}
{"nick":"k1i","message":"updateTwitter() in the serverside version of the code stays the same","date":"2013-03-11T21:51:22.687Z","type":"message"}
{"nick":"ArxPoetica","message":"keep me posted","date":"2013-03-11T21:51:29.665Z","type":"message"}
{"nick":"k1i","message":"they take the same args","date":"2013-03-11T21:51:30.675Z","type":"message"}
{"nick":"ArxPoetica","message":"yeah i get it","date":"2013-03-11T21:51:37.528Z","type":"message"}
{"nick":"k1i","message":"get called via the same calling convention, etc.","date":"2013-03-11T21:51:40.851Z","type":"message"}
{"nick":"k1i","message":"to maintain convention across \"different models,\" you would need some kind of metadata","date":"2013-03-11T21:52:08.871Z","type":"message"}
{"nick":"k1i","message":"to define which functions (or all) get rewritten to \"RPC-mode\"","date":"2013-03-11T21:52:17.317Z","type":"message"}
{"nick":"evangenieur","date":"2013-03-11T21:52:21.172Z","type":"join"}
{"nick":"k1i","message":"and a conventional calling method","date":"2013-03-11T21:52:22.896Z","type":"message"}
{"nick":"k1i","message":"or method of passing arguments","date":"2013-03-11T21:52:34.612Z","type":"message"}
{"nick":"ArxPoetica","message":"ah","date":"2013-03-11T21:52:58.131Z","type":"message"}
{"nick":"k1i","message":"so, to call updateTwitter, you might have to do User.call(\"updateTwitter\", {args}, function callback() {cb});","date":"2013-03-11T21:52:58.341Z","type":"message"}
{"nick":"ArxPoetica","message":"so it's the metadata that gets standardized","date":"2013-03-11T21:53:06.231Z","type":"message"}
{"nick":"k1i","message":"but on the serverside that is a seamless, local function execution","date":"2013-03-11T21:53:07.825Z","type":"message"}
{"nick":"k1i","message":"yeah","date":"2013-03-11T21:53:41.649Z","type":"message"}
{"nick":"ArxPoetica","message":"hmmâ€¦so is this all precompile? (ala grunt)","date":"2013-03-11T21:53:45.608Z","type":"message"}
{"nick":"k1i","message":"the clientside would be precompiled, yes, though, technically","date":"2013-03-11T21:53:54.363Z","type":"message"}
{"nick":"k1i","message":"i was thinking in the wrong track","date":"2013-03-11T21:54:05.568Z","type":"message"}
{"nick":"ArxPoetica","message":"Well, even on the back end","date":"2013-03-11T21:54:17.384Z","type":"message"}
{"nick":"ArxPoetica","message":"Just thinking â€” for perf reasons don't want to build in a layer that only works at runtime.","date":"2013-03-11T21:54:43.921Z","type":"message"}
{"nick":"k1i","message":"you would be able to do something like updateTwitter(args, cb) on the client and the server","date":"2013-03-11T21:55:05.809Z","type":"message"}
{"nick":"k1i","message":"just like that","date":"2013-03-11T21:55:12.616Z","type":"message"}
{"nick":"k1i","message":"provided you standardized the calling convention and argument order","date":"2013-03-11T21:55:22.125Z","type":"message"}
{"nick":"k1i","message":"well","date":"2013-03-11T21:55:25.645Z","type":"message"}
{"nick":"k1i","message":"grunt would only be needed on the clientside","date":"2013-03-11T21:55:31.262Z","type":"message"}
{"nick":"ArxPoetica","message":"right","date":"2013-03-11T21:55:36.284Z","type":"message"}
{"nick":"k1i","message":"to rewrite functions that need to be made into rpc calls (seamlessly)","date":"2013-03-11T21:55:46.281Z","type":"message"}
{"nick":"k1i","message":"this results in a shitload of less boilerplate code","date":"2013-03-11T21:55:51.188Z","type":"message"}
{"nick":"k1i","message":"so you arent defining a server/model/user.js and a client/model/user.js which are basically the same thing, but one contains RPC code and one contains the real, needed-to-be-executed code","date":"2013-03-11T21:56:13.949Z","type":"message"}
{"nick":"ArxPoetica","message":"ah....","date":"2013-03-11T21:56:24.097Z","type":"message"}
{"nick":"ArxPoetica","message":"okay I get it now","date":"2013-03-11T21:56:26.942Z","type":"message"}
{"nick":"k1i","message":"but the metadata could be as simple as","date":"2013-03-11T21:56:37.922Z","type":"message"}
{"nick":"ArxPoetica","message":"so its basically XORing the server","date":"2013-03-11T21:56:39.798Z","type":"message"}
{"nick":"k1i","message":"to create clientcode, yes","date":"2013-03-11T21:56:45.598Z","type":"message"}
{"nick":"ArxPoetica","message":"right right","date":"2013-03-11T21:56:52.668Z","type":"message"}
{"nick":"ArxPoetica","message":"that's smart","date":"2013-03-11T21:56:54.418Z","type":"message"}
{"nick":"k1i","message":"\"//remoteFuncs:[updateTwitter,updateFacebook,deleteUser,createUser]","date":"2013-03-11T21:57:07.609Z","type":"message"}
{"nick":"ArxPoetica","message":"cool","date":"2013-03-11T21:57:08.029Z","type":"message"}
{"nick":"ArxPoetica","message":"well i gotta run","date":"2013-03-11T21:57:17.538Z","type":"message"}
{"nick":"k1i","message":"grunt would find those function definitions (standard js), and rewrite them","date":"2013-03-11T21:57:20.003Z","type":"message"}
{"nick":"ArxPoetica","message":"catch'ya later","date":"2013-03-11T21:57:22.818Z","type":"message"}
{"nick":"k1i","message":"alright","date":"2013-03-11T21:57:23.052Z","type":"message"}
{"nick":"k1i","message":"later","date":"2013-03-11T21:57:24.189Z","type":"message"}
{"nick":"ArxPoetica","date":"2013-03-11T21:57:32.217Z","type":"part"}
{"nick":"colinsullivan","reason":"Quit: Leaving.","date":"2013-03-11T22:14:50.921Z","type":"quit"}
{"nick":"colinsullivan","date":"2013-03-11T22:29:20.172Z","type":"join"}
{"nick":"colinsullivan","reason":"Quit: Leaving.","date":"2013-03-11T22:49:11.112Z","type":"quit"}
{"nick":"paulbjensen","date":"2013-03-11T22:58:56.101Z","type":"join"}
{"nick":"paulbjensen","reason":"Quit: paulbjensen","date":"2013-03-11T23:21:31.729Z","type":"quit"}
{"nick":"ArxPoetica1","date":"2013-03-11T23:38:28.262Z","type":"join"}
{"nick":"ArxPoetica1","new_nick":"ArxPoetica","date":"2013-03-11T23:58:31.705Z","type":"nick"}
